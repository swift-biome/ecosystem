{"culture":"SwiftSyntax","dependencies":[],"extensions":[],"partitions":[{"namespace":"SwiftSyntax","communities":[{"community":"protocol","startIndex":0,"endIndex":17},{"community":"enum","startIndex":17,"endIndex":25},{"community":"struct","startIndex":25,"endIndex":535},{"community":"class","startIndex":535,"endIndex":542},{"community":"enum.case","startIndex":542,"endIndex":947},{"community":"init","startIndex":947,"endIndex":1437},{"community":"subscript","startIndex":1437,"endIndex":1481},{"community":"type.property","startIndex":1481,"endIndex":1483},{"community":"property","startIndex":1483,"endIndex":3438},{"community":"type.method","startIndex":3438,"endIndex":4070},{"community":"method","startIndex":4070,"endIndex":7514},{"community":"type.op","startIndex":7514,"endIndex":7529},{"community":"func.op","startIndex":7529,"endIndex":7530},{"community":"func","startIndex":7530,"endIndex":7531},{"community":"typealias","startIndex":7531,"endIndex":7619}]}],"identifiers":["s11SwiftSyntax013ParenthesizedB0P","s11SwiftSyntax013WithCodeBlockB0P","s11SwiftSyntax014IdentifiedDeclB0P","s11SwiftSyntax014WithStatementsB0P","s11SwiftSyntax017WithTrailingCommaB0P","s11SwiftSyntax04DeclB8ProtocolP","s11SwiftSyntax04ExprB8ProtocolP","s11SwiftSyntax04StmtB8ProtocolP","s11SwiftSyntax04TypeB8ProtocolP","s11SwiftSyntax06BracedB0P","s11SwiftSyntax07LabeledB0P","s11SwiftSyntax07PatternB8ProtocolP","s11SwiftSyntax09DeclGroupB0P","s11SwiftSyntax0B10CollectionP","s11SwiftSyntax0B8HashableP","s11SwiftSyntax0B8ProtocolP","s11SwiftSyntax34IncrementalParseReusedNodeDelegateP","s11SwiftSyntax0B13VerifierErrorO","s11SwiftSyntax0B14ClassificationO","s11SwiftSyntax0B19VisitorContinueKindO","s11SwiftSyntax0B4EnumO","s11SwiftSyntax0B7FactoryO","s11SwiftSyntax11TriviaPieceO","s11SwiftSyntax14SourcePresenceO","s11SwiftSyntax9TokenKindO","s11SwiftSyntax010AccessPathB0V","s11SwiftSyntax010AccessPathB0V8IteratorV","s11SwiftSyntax010ImportDeclB0V","s11SwiftSyntax010ImportDeclB7BuilderV","s11SwiftSyntax010ReturnStmtB0V","s11SwiftSyntax010ReturnStmtB7BuilderV","s11SwiftSyntax010SourceFileB0V","s11SwiftSyntax010SourceFileB7BuilderV","s11SwiftSyntax010StructDeclB0V","s11SwiftSyntax010StructDeclB7BuilderV","s11SwiftSyntax010SwitchCaseB0V","s11SwiftSyntax010SwitchCaseB7BuilderV","s11SwiftSyntax010SwitchStmtB0V","s11SwiftSyntax010SwitchStmtB7BuilderV","s11SwiftSyntax011CatchClauseB0V","s11SwiftSyntax011CatchClauseB7BuilderV","s11SwiftSyntax011ClosureExprB0V","s11SwiftSyntax011ClosureExprB7BuilderV","s11SwiftSyntax011KeyPathExprB0V","s11SwiftSyntax011KeyPathExprB7BuilderV","s11SwiftSyntax011TernaryExprB0V","s11SwiftSyntax011TernaryExprB7BuilderV","s11SwiftSyntax011UnknownDeclB0V","s11SwiftSyntax011UnknownExprB0V","s11SwiftSyntax011UnknownStmtB0V","s11SwiftSyntax011UnknownTypeB0V","s11SwiftSyntax011WhereClauseB0V","s11SwiftSyntax011WhereClauseB7BuilderV","s11SwiftSyntax012AccessorDeclB0V","s11SwiftSyntax012AccessorDeclB7BuilderV","s11SwiftSyntax012AccessorListB0V","s11SwiftSyntax012AccessorListB0V8IteratorV","s11SwiftSyntax012ArrayElementB0V","s11SwiftSyntax012ArrayElementB7BuilderV","s11SwiftSyntax012CaseItemListB0V","s11SwiftSyntax012CaseItemListB0V8IteratorV","s11SwiftSyntax012ClosureParamB0V","s11SwiftSyntax012ClosureParamB7BuilderV","s11SwiftSyntax012ContinueStmtB0V","s11SwiftSyntax012ContinueStmtB7BuilderV","s11SwiftSyntax012DeclModifierB0V","s11SwiftSyntax012DeclModifierB7BuilderV","s11SwiftSyntax012EnumCaseDeclB0V","s11SwiftSyntax012EnumCaseDeclB7BuilderV","s11SwiftSyntax012FunctionDeclB0V","s11SwiftSyntax012FunctionDeclB7BuilderV","s11SwiftSyntax012FunctionTypeB0V","s11SwiftSyntax012FunctionTypeB7BuilderV","s11SwiftSyntax012IfConfigDeclB0V","s11SwiftSyntax012IfConfigDeclB7BuilderV","s11SwiftSyntax012MetatypeTypeB0V","s11SwiftSyntax012MetatypeTypeB7BuilderV","s11SwiftSyntax012ModifierListB0V","s11SwiftSyntax012ModifierListB0V8IteratorV","s11SwiftSyntax012ObjCSelectorB0V","s11SwiftSyntax012ObjCSelectorB0V8IteratorV","s11SwiftSyntax012OperatorDeclB0V","s11SwiftSyntax012OperatorDeclB7BuilderV","s11SwiftSyntax012OptionalTypeB0V","s11SwiftSyntax012OptionalTypeB7BuilderV","s11SwiftSyntax012ProtocolDeclB0V","s11SwiftSyntax012ProtocolDeclB7BuilderV","s11SwiftSyntax012ReturnClauseB0V","s11SwiftSyntax012ReturnClauseB7BuilderV","s11SwiftSyntax012SequenceExprB0V","s11SwiftSyntax012SequenceExprB7BuilderV","s11SwiftSyntax012SuperRefExprB0V","s11SwiftSyntax012SuperRefExprB7BuilderV","s11SwiftSyntax012TuplePatternB0V","s11SwiftSyntax012TuplePatternB7BuilderV","s11SwiftSyntax012VariableDeclB0V","s11SwiftSyntax012VariableDeclB7BuilderV","s11SwiftSyntax012VersionTupleB0V","s11SwiftSyntax012VersionTupleB7BuilderV","s11SwiftSyntax013AccessorBlockB0V","s11SwiftSyntax013AccessorBlockB7BuilderV","s11SwiftSyntax013AsTypePatternB0V","s11SwiftSyntax013AsTypePatternB7BuilderV","s11SwiftSyntax013AttributeListB0V","s11SwiftSyntax013AttributeListB0V8IteratorV","s11SwiftSyntax013CatchItemListB0V","s11SwiftSyntax013CatchItemListB0V8IteratorV","s11SwiftSyntax013CodeBlockItemB0V","s11SwiftSyntax013CodeBlockItemB7BuilderV","s11SwiftSyntax013ExtensionDeclB0V","s11SwiftSyntax013ExtensionDeclB7BuilderV","s11SwiftSyntax013InheritedTypeB0V","s11SwiftSyntax013InheritedTypeB7BuilderV","s11SwiftSyntax013IsTypePatternB0V","s11SwiftSyntax013IsTypePatternB7BuilderV","s11SwiftSyntax013ObjcNamePieceB0V","s11SwiftSyntax013ObjcNamePieceB7BuilderV","s11SwiftSyntax013PoundFileExprB0V","s11SwiftSyntax013PoundFileExprB7BuilderV","s11SwiftSyntax013PoundLineExprB0V","s11SwiftSyntax013PoundLineExprB7BuilderV","s11SwiftSyntax013StringSegmentB0V","s11SwiftSyntax013StringSegmentB7BuilderV","s11SwiftSyntax013SubscriptDeclB0V","s11SwiftSyntax013SubscriptDeclB7BuilderV","s11SwiftSyntax013SubscriptExprB0V","s11SwiftSyntax013SubscriptExprB7BuilderV","s11SwiftSyntax013TypealiasDeclB0V","s11SwiftSyntax013TypealiasDeclB7BuilderV","s11SwiftSyntax014AssignmentExprB0V","s11SwiftSyntax014AssignmentExprB7BuilderV","s11SwiftSyntax014AttributedTypeB0V","s11SwiftSyntax014AttributedTypeB7BuilderV","s11SwiftSyntax014DictionaryExprB0V","s11SwiftSyntax014DictionaryExprB7BuilderV","s11SwiftSyntax014DictionaryTypeB0V","s11SwiftSyntax014DictionaryTypeB7BuilderV","s11SwiftSyntax014ExpressionStmtB0V","s11SwiftSyntax014ExpressionStmtB7BuilderV","s11SwiftSyntax014IdentifierExprB0V","s11SwiftSyntax014IdentifierExprB7BuilderV","s11SwiftSyntax014IdentifierListB0V","s11SwiftSyntax014IdentifierListB0V8IteratorV","s11SwiftSyntax014IfConfigClauseB0V","s11SwiftSyntax014IfConfigClauseB7BuilderV","s11SwiftSyntax014MemberDeclListB0V","s11SwiftSyntax014MemberDeclListB0V8IteratorV","s11SwiftSyntax014NilLiteralExprB0V","s11SwiftSyntax014NilLiteralExprB7BuilderV","s11SwiftSyntax014PatternBindingB0V","s11SwiftSyntax014PatternBindingB7BuilderV","s11SwiftSyntax014PoundErrorDeclB0V","s11SwiftSyntax014PoundErrorDeclB7BuilderV","s11SwiftSyntax014SpecializeExprB0V","s11SwiftSyntax014SpecializeExprB7BuilderV","s11SwiftSyntax014SwitchCaseListB0V","s11SwiftSyntax014SwitchCaseListB0V8IteratorV","s11SwiftSyntax014TypeAnnotationB0V","s11SwiftSyntax014TypeAnnotationB7BuilderV","s11SwiftSyntax014UnknownPatternB0V","s11SwiftSyntax015CatchClauseListB0V","s11SwiftSyntax015CatchClauseListB0V8IteratorV","s11SwiftSyntax015CompositionTypeB0V","s11SwiftSyntax015CompositionTypeB7BuilderV","s11SwiftSyntax015CustomAttributeB0V","s11SwiftSyntax015CustomAttributeB7BuilderV","s11SwiftSyntax015DeclarationStmtB0V","s11SwiftSyntax015DeclarationStmtB7BuilderV","s11SwiftSyntax015EnumCaseElementB0V","s11SwiftSyntax015EnumCaseElementB7BuilderV","s11SwiftSyntax015EnumCasePatternB0V","s11SwiftSyntax015EnumCasePatternB7BuilderV","s11SwiftSyntax015FallthroughStmtB0V","s11SwiftSyntax015FallthroughStmtB7BuilderV","s11SwiftSyntax015ForcedValueExprB0V","s11SwiftSyntax015ForcedValueExprB7BuilderV","s11SwiftSyntax015GenericArgumentB0V","s11SwiftSyntax015GenericArgumentB7BuilderV","s11SwiftSyntax015InitializerDeclB0V","s11SwiftSyntax015InitializerDeclB7BuilderV","s11SwiftSyntax015KeyPathBaseExprB0V","s11SwiftSyntax015KeyPathBaseExprB7BuilderV","s11SwiftSyntax015MemberDeclBlockB0V","s11SwiftSyntax015MemberDeclBlockB7BuilderV","s11SwiftSyntax015ObjcKeyPathExprB0V","s11SwiftSyntax015ObjcKeyPathExprB7BuilderV","s11SwiftSyntax015OptionalPatternB0V","s11SwiftSyntax015OptionalPatternB7BuilderV","s11SwiftSyntax015ParameterClauseB0V","s11SwiftSyntax015ParameterClauseB7BuilderV","s11SwiftSyntax015PoundAssertStmtB0V","s11SwiftSyntax015PoundAssertStmtB7BuilderV","s11SwiftSyntax015PoundColumnExprB0V","s11SwiftSyntax015PoundColumnExprB7BuilderV","s11SwiftSyntax015PoundFileIDExprB0V","s11SwiftSyntax015PoundFileIDExprB7BuilderV","s11SwiftSyntax015RepeatWhileStmtB0V","s11SwiftSyntax015RepeatWhileStmtB7BuilderV","s11SwiftSyntax015SwitchCaseLabelB0V","s11SwiftSyntax015SwitchCaseLabelB7BuilderV","s11SwiftSyntax015WildcardPatternB0V","s11SwiftSyntax015WildcardPatternB7BuilderV","s11SwiftSyntax016ArrayElementListB0V","s11SwiftSyntax016ArrayElementListB0V8IteratorV","s11SwiftSyntax016ClosureParamListB0V","s11SwiftSyntax016ClosureParamListB0V8IteratorV","s11SwiftSyntax016ClosureSignatureB0V","s11SwiftSyntax016ClosureSignatureB7BuilderV","s11SwiftSyntax016ConditionElementB0V","s11SwiftSyntax016ConditionElementB7BuilderV","s11SwiftSyntax016DeclNameArgumentB0V","s11SwiftSyntax016DeclNameArgumentB7BuilderV","s11SwiftSyntax016FloatLiteralExprB0V","s11SwiftSyntax016FloatLiteralExprB7BuilderV","s11SwiftSyntax016FunctionCallExprB0V","s11SwiftSyntax016FunctionCallExprB7BuilderV","s11SwiftSyntax016FunctionDeclNameB0V","s11SwiftSyntax016FunctionDeclNameB7BuilderV","s11SwiftSyntax016GenericParameterB0V","s11SwiftSyntax016GenericParameterB7BuilderV","s11SwiftSyntax016MemberAccessExprB0V","s11SwiftSyntax016MemberAccessExprB7BuilderV","s11SwiftSyntax016ObjcSelectorExprB0V","s11SwiftSyntax016ObjcSelectorExprB7BuilderV","s11SwiftSyntax016PostfixUnaryExprB0V","s11SwiftSyntax016PostfixUnaryExprB7BuilderV","s11SwiftSyntax016PoundWarningDeclB0V","s11SwiftSyntax016PoundWarningDeclB7BuilderV","s11SwiftSyntax016RegexLiteralExprB0V","s11SwiftSyntax016RegexLiteralExprB7BuilderV","s11SwiftSyntax016TupleExprElementB0V","s11SwiftSyntax016TupleExprElementB7BuilderV","s11SwiftSyntax016TupleTypeElementB0V","s11SwiftSyntax016TupleTypeElementB7BuilderV","s11SwiftSyntax017AccessorParameterB0V","s11SwiftSyntax017AccessorParameterB7BuilderV","s11SwiftSyntax017AvailabilityEntryB0V","s11SwiftSyntax017AvailabilityEntryB7BuilderV","s11SwiftSyntax017CodeBlockItemListB0V","s11SwiftSyntax017CodeBlockItemListB0V8IteratorV","s11SwiftSyntax017DeclNameArgumentsB0V","s11SwiftSyntax017DeclNameArgumentsB7BuilderV","s11SwiftSyntax017DeinitializerDeclB0V","s11SwiftSyntax017DeinitializerDeclB7BuilderV","s11SwiftSyntax017DictionaryElementB0V","s11SwiftSyntax017DictionaryElementB7BuilderV","s11SwiftSyntax017ExpressionPatternB0V","s11SwiftSyntax017ExpressionPatternB7BuilderV","s11SwiftSyntax017ExpressionSegmentB0V","s11SwiftSyntax017ExpressionSegmentB7BuilderV","s11SwiftSyntax017FunctionParameterB0V","s11SwiftSyntax017FunctionParameterB7BuilderV","s11SwiftSyntax017FunctionSignatureB0V","s11SwiftSyntax017FunctionSignatureB7BuilderV","s11SwiftSyntax017IdentifierPatternB0V","s11SwiftSyntax017IdentifierPatternB7BuilderV","s11SwiftSyntax017InheritedTypeListB0V","s11SwiftSyntax017InheritedTypeListB0V8IteratorV","s11SwiftSyntax017InitializerClauseB0V","s11SwiftSyntax017InitializerClauseB7BuilderV","s11SwiftSyntax017NonEmptyTokenListB0V","s11SwiftSyntax017NonEmptyTokenListB0V8IteratorV","s11SwiftSyntax017ObjCSelectorPieceB0V","s11SwiftSyntax017ObjCSelectorPieceB7BuilderV","s11SwiftSyntax017ObjectLiteralExprB0V","s11SwiftSyntax017ObjectLiteralExprB7BuilderV","s11SwiftSyntax017PoundFilePathExprB0V","s11SwiftSyntax017PoundFilePathExprB7BuilderV","s11SwiftSyntax017PoundFunctionExprB0V","s11SwiftSyntax017PoundFunctionExprB7BuilderV","s11SwiftSyntax017QualifiedDeclNameB0V","s11SwiftSyntax017QualifiedDeclNameB7BuilderV","s11SwiftSyntax017StringLiteralExprB0V","s11SwiftSyntax017StringLiteralExprB7BuilderV","s11SwiftSyntax018AssociatedtypeDeclB0V","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV","s11SwiftSyntax018BinaryOperatorExprB0V","s11SwiftSyntax018BinaryOperatorExprB7BuilderV","s11SwiftSyntax018BooleanLiteralExprB0V","s11SwiftSyntax018BooleanLiteralExprB7BuilderV","s11SwiftSyntax018ClosureCaptureItemB0V","s11SwiftSyntax018ClosureCaptureItemB7BuilderV","s11SwiftSyntax018ElseIfContinuationB0V","s11SwiftSyntax018ElseIfContinuationB7BuilderV","s11SwiftSyntax018GenericRequirementB0V","s11SwiftSyntax018GenericRequirementB7BuilderV","s11SwiftSyntax018GenericWhereClauseB0V","s11SwiftSyntax018GenericWhereClauseB7BuilderV","s11SwiftSyntax018IfConfigClauseListB0V","s11SwiftSyntax018IfConfigClauseListB0V8IteratorV","s11SwiftSyntax018IntegerLiteralExprB0V","s11SwiftSyntax018IntegerLiteralExprB7BuilderV","s11SwiftSyntax018MemberDeclListItemB0V","s11SwiftSyntax018MemberDeclListItemB7BuilderV","s11SwiftSyntax018PatternBindingListB0V","s11SwiftSyntax018PatternBindingListB0V8IteratorV","s11SwiftSyntax018PoundDsohandleExprB0V","s11SwiftSyntax018PoundDsohandleExprB7BuilderV","s11SwiftSyntax018PrefixOperatorExprB0V","s11SwiftSyntax018PrefixOperatorExprB7BuilderV","s11SwiftSyntax018SwitchDefaultLabelB0V","s11SwiftSyntax018SwitchDefaultLabelB7BuilderV","s11SwiftSyntax019AccessLevelModifierB0V","s11SwiftSyntax019AccessLevelModifierB7BuilderV","s11SwiftSyntax019AccessPathComponentB0V","s11SwiftSyntax019AccessPathComponentB7BuilderV","s11SwiftSyntax019EnumCaseElementListB0V","s11SwiftSyntax019EnumCaseElementListB0V8IteratorV","s11SwiftSyntax019GenericArgumentListB0V","s11SwiftSyntax019GenericArgumentListB0V8IteratorV","s11SwiftSyntax019PostfixIfConfigExprB0V","s11SwiftSyntax019PostfixIfConfigExprB7BuilderV","s11SwiftSyntax019PoundSourceLocationB0V","s11SwiftSyntax019PoundSourceLocationB7BuilderV","s11SwiftSyntax019PrecedenceGroupDeclB0V","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV","s11SwiftSyntax019SameTypeRequirementB0V","s11SwiftSyntax019SameTypeRequirementB7BuilderV","s11SwiftSyntax019TargetFunctionEntryB0V","s11SwiftSyntax019TargetFunctionEntryB7BuilderV","s11SwiftSyntax019TuplePatternElementB0V","s11SwiftSyntax019TuplePatternElementB7BuilderV","s11SwiftSyntax019ValueBindingPatternB0V","s11SwiftSyntax019ValueBindingPatternB7BuilderV","s11SwiftSyntax020AvailabilityArgumentB0V","s11SwiftSyntax020AvailabilityArgumentB7BuilderV","s11SwiftSyntax020AvailabilitySpecListB0V","s11SwiftSyntax020AvailabilitySpecListB0V8IteratorV","s11SwiftSyntax020ClassRestrictionTypeB0V","s11SwiftSyntax020ClassRestrictionTypeB7BuilderV","s11SwiftSyntax020ConditionElementListB0V","s11SwiftSyntax020ConditionElementListB0V8IteratorV","s11SwiftSyntax020DeclNameArgumentListB0V","s11SwiftSyntax020DeclNameArgumentListB0V8IteratorV","s11SwiftSyntax020GenericParameterListB0V","s11SwiftSyntax020GenericParameterListB0V8IteratorV","s11SwiftSyntax020MemberTypeIdentifierB0V","s11SwiftSyntax020MemberTypeIdentifierB7BuilderV","s11SwiftSyntax020OptionalChainingExprB0V","s11SwiftSyntax020OptionalChainingExprB7BuilderV","s11SwiftSyntax020SimpleTypeIdentifierB0V","s11SwiftSyntax020SimpleTypeIdentifierB7BuilderV","s11SwiftSyntax020TupleExprElementListB0V","s11SwiftSyntax020TupleExprElementListB0V8IteratorV","s11SwiftSyntax020TupleTypeElementListB0V","s11SwiftSyntax020TupleTypeElementListB0V8IteratorV","s11SwiftSyntax021AvailabilityConditionB0V","s11SwiftSyntax021AvailabilityConditionB7BuilderV","s11SwiftSyntax021DictionaryElementListB0V","s11SwiftSyntax021DictionaryElementListB0V8IteratorV","s11SwiftSyntax021DiscardAssignmentExprB0V","s11SwiftSyntax021DiscardAssignmentExprB7BuilderV","s11SwiftSyntax021EditorPlaceholderExprB0V","s11SwiftSyntax021EditorPlaceholderExprB7BuilderV","s11SwiftSyntax021FunctionParameterListB0V","s11SwiftSyntax021FunctionParameterListB0V8IteratorV","s11SwiftSyntax021GenericArgumentClauseB0V","s11SwiftSyntax021GenericArgumentClauseB7BuilderV","s11SwiftSyntax021PrimaryAssociatedTypeB0V","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV","s11SwiftSyntax021StringLiteralSegmentsB0V","s11SwiftSyntax021StringLiteralSegmentsB0V8IteratorV","s11SwiftSyntax021SymbolicReferenceExprB0V","s11SwiftSyntax021SymbolicReferenceExprB7BuilderV","s11SwiftSyntax021TypeInheritanceClauseB0V","s11SwiftSyntax021TypeInheritanceClauseB7BuilderV","s11SwiftSyntax021TypeInitializerClauseB0V","s11SwiftSyntax021TypeInitializerClauseB7BuilderV","s11SwiftSyntax021UnresolvedPatternExprB0V","s11SwiftSyntax021UnresolvedPatternExprB7BuilderV","s11SwiftSyntax022ClosureCaptureItemListB0V","s11SwiftSyntax022ClosureCaptureItemListB0V8IteratorV","s11SwiftSyntax022CompositionTypeElementB0V","s11SwiftSyntax022CompositionTypeElementB7BuilderV","s11SwiftSyntax022ConformanceRequirementB0V","s11SwiftSyntax022ConformanceRequirementB7BuilderV","s11SwiftSyntax022DifferentiabilityParamB0V","s11SwiftSyntax022DifferentiabilityParamB7BuilderV","s11SwiftSyntax022GenericParameterClauseB0V","s11SwiftSyntax022GenericParameterClauseB7BuilderV","s11SwiftSyntax022GenericRequirementListB0V","s11SwiftSyntax022GenericRequirementListB0V8IteratorV","s11SwiftSyntax022LabeledSpecializeEntryB0V","s11SwiftSyntax022LabeledSpecializeEntryB7BuilderV","s11SwiftSyntax023ClosureCaptureSignatureB0V","s11SwiftSyntax023ClosureCaptureSignatureB7BuilderV","s11SwiftSyntax023DifferentiabilityParamsB0V","s11SwiftSyntax023DifferentiabilityParamsB7BuilderV","s11SwiftSyntax023PoundSourceLocationArgsB0V","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV","s11SwiftSyntax023PrecedenceGroupNameListB0V","s11SwiftSyntax023PrecedenceGroupNameListB0V8IteratorV","s11SwiftSyntax023PrecedenceGroupRelationB0V","s11SwiftSyntax023PrecedenceGroupRelationB7BuilderV","s11SwiftSyntax023TuplePatternElementListB0V","s11SwiftSyntax023TuplePatternElementListB0V8IteratorV","s11SwiftSyntax023UnavailabilityConditionB0V","s11SwiftSyntax023UnavailabilityConditionB7BuilderV","s11SwiftSyntax024MatchingPatternConditionB0V","s11SwiftSyntax024MatchingPatternConditionB7BuilderV","s11SwiftSyntax024OptionalBindingConditionB0V","s11SwiftSyntax024OptionalBindingConditionB7BuilderV","s11SwiftSyntax025PrecedenceGroupAssignmentB0V","s11SwiftSyntax025PrecedenceGroupAssignmentB7BuilderV","s11SwiftSyntax025PrimaryAssociatedTypeListB0V","s11SwiftSyntax025PrimaryAssociatedTypeListB0V8IteratorV","s11SwiftSyntax026CompositionTypeElementListB0V","s11SwiftSyntax026CompositionTypeElementListB0V8IteratorV","s11SwiftSyntax026DifferentiabilityParamListB0V","s11SwiftSyntax026DifferentiabilityParamListB0V8IteratorV","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V","s11SwiftSyntax026OperatorPrecedenceAndTypesB7BuilderV","s11SwiftSyntax026PrecedenceGroupNameElementB0V","s11SwiftSyntax026PrecedenceGroupNameElementB7BuilderV","s11SwiftSyntax027AvailabilityLabeledArgumentB0V","s11SwiftSyntax027AvailabilityLabeledArgumentB7BuilderV","s11SwiftSyntax027SpecializeAttributeSpecListB0V","s11SwiftSyntax027SpecializeAttributeSpecListB0V8IteratorV","s11SwiftSyntax028ImplementsAttributeArgumentsB0V","s11SwiftSyntax028ImplementsAttributeArgumentsB7BuilderV","s11SwiftSyntax028NamedAttributeStringArgumentB0V","s11SwiftSyntax028NamedAttributeStringArgumentB7BuilderV","s11SwiftSyntax028PrecedenceGroupAssociativityB0V","s11SwiftSyntax028PrecedenceGroupAssociativityB7BuilderV","s11SwiftSyntax028PrecedenceGroupAttributeListB0V","s11SwiftSyntax028PrecedenceGroupAttributeListB0V8IteratorV","s11SwiftSyntax029DifferentiabilityParamsClauseB0V","s11SwiftSyntax029DifferentiabilityParamsClauseB7BuilderV","s11SwiftSyntax030AvailabilityVersionRestrictionB0V","s11SwiftSyntax030AvailabilityVersionRestrictionB7BuilderV","s11SwiftSyntax030MultipleTrailingClosureElementB0V","s11SwiftSyntax030MultipleTrailingClosureElementB7BuilderV","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB7BuilderV","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V","s11SwiftSyntax032DifferentiableAttributeArgumentsB7BuilderV","s11SwiftSyntax034MultipleTrailingClosureElementListB0V","s11SwiftSyntax034MultipleTrailingClosureElementListB0V8IteratorV","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV","s11SwiftSyntax04DeclB0V","s11SwiftSyntax04ExprB0V","s11SwiftSyntax04StmtB0V","s11SwiftSyntax04TypeB0V","s11SwiftSyntax05TokenB0V","s11SwiftSyntax06AsExprB0V","s11SwiftSyntax06AsExprB7BuilderV","s11SwiftSyntax06DoStmtB0V","s11SwiftSyntax06DoStmtB7BuilderV","s11SwiftSyntax06IfStmtB0V","s11SwiftSyntax06IfStmtB7BuilderV","s11SwiftSyntax06IsExprB0V","s11SwiftSyntax06IsExprB7BuilderV","s11SwiftSyntax07PatternB0V","s11SwiftSyntax07TryExprB0V","s11SwiftSyntax07TryExprB7BuilderV","s11SwiftSyntax07UnknownB0V","s11SwiftSyntax08CaseItemB0V","s11SwiftSyntax08CaseItemB7BuilderV","s11SwiftSyntax08DeclNameB0V","s11SwiftSyntax08DeclNameB7BuilderV","s11SwiftSyntax08EnumDeclB0V","s11SwiftSyntax08EnumDeclB7BuilderV","s11SwiftSyntax08ExprListB0V","s11SwiftSyntax08ExprListB0V8IteratorV","s11SwiftSyntax08ObjcNameB0V","s11SwiftSyntax08ObjcNameB0V8IteratorV","s11SwiftSyntax08SomeTypeB0V","s11SwiftSyntax08SomeTypeB7BuilderV","s11SwiftSyntax08TypeExprB0V","s11SwiftSyntax08TypeExprB7BuilderV","s11SwiftSyntax09ArrayExprB0V","s11SwiftSyntax09ArrayExprB7BuilderV","s11SwiftSyntax09ArrayTypeB0V","s11SwiftSyntax09ArrayTypeB7BuilderV","s11SwiftSyntax09ArrowExprB0V","s11SwiftSyntax09ArrowExprB7BuilderV","s11SwiftSyntax09AttributeB0V","s11SwiftSyntax09AttributeB7BuilderV","s11SwiftSyntax09AwaitExprB0V","s11SwiftSyntax09AwaitExprB7BuilderV","s11SwiftSyntax09BreakStmtB0V","s11SwiftSyntax09BreakStmtB7BuilderV","s11SwiftSyntax09CatchItemB0V","s11SwiftSyntax09CatchItemB7BuilderV","s11SwiftSyntax09ClassDeclB0V","s11SwiftSyntax09ClassDeclB7BuilderV","s11SwiftSyntax09CodeBlockB0V","s11SwiftSyntax09CodeBlockB7BuilderV","s11SwiftSyntax09DeferStmtB0V","s11SwiftSyntax09DeferStmtB7BuilderV","s11SwiftSyntax09ElseBlockB0V","s11SwiftSyntax09ElseBlockB7BuilderV","s11SwiftSyntax09ForInStmtB0V","s11SwiftSyntax09ForInStmtB7BuilderV","s11SwiftSyntax09GuardStmtB0V","s11SwiftSyntax09GuardStmtB7BuilderV","s11SwiftSyntax09InOutExprB0V","s11SwiftSyntax09InOutExprB7BuilderV","s11SwiftSyntax09ThrowStmtB0V","s11SwiftSyntax09ThrowStmtB7BuilderV","s11SwiftSyntax09TokenListB0V","s11SwiftSyntax09TokenListB0V8IteratorV","s11SwiftSyntax09TupleExprB0V","s11SwiftSyntax09TupleExprB7BuilderV","s11SwiftSyntax09TupleTypeB0V","s11SwiftSyntax09TupleTypeB7BuilderV","s11SwiftSyntax09WhileStmtB0V","s11SwiftSyntax09WhileStmtB7BuilderV","s11SwiftSyntax09YieldListB0V","s11SwiftSyntax09YieldListB7BuilderV","s11SwiftSyntax09YieldStmtB0V","s11SwiftSyntax09YieldStmtB7BuilderV","s11SwiftSyntax0B0V","s11SwiftSyntax0B10IdentifierV","s11SwiftSyntax0B13ChildrenIndexV","s11SwiftSyntax0B15ClassificationsV","s11SwiftSyntax0B15ClassificationsV8IteratorV","s11SwiftSyntax0B15ClassifiedRangeV","s11SwiftSyntax0B17ChildrenIndexDataV","s11SwiftSyntax0B4NodeV","s11SwiftSyntax0B8ChildrenV","s11SwiftSyntax10SourceEditV","s11SwiftSyntax11SourceRangeV","s11SwiftSyntax12SourceLengthV","s11SwiftSyntax13TokenSequenceV","s11SwiftSyntax13TokenSequenceV8IteratorV","s11SwiftSyntax14SourceLocationV","s11SwiftSyntax15ByteSourceRangeV","s11SwiftSyntax15ConcurrentEditsV","s11SwiftSyntax16AbsolutePositionV","s11SwiftSyntax21ReversedTokenSequenceV","s11SwiftSyntax21ReversedTokenSequenceV8IteratorV","s11SwiftSyntax22IncrementalParseLookupV","s11SwiftSyntax6TriviaV","s11SwiftSyntax0B10AnyVisitorC","s11SwiftSyntax0B7VisitorC","s11SwiftSyntax0B8RewriterC","s11SwiftSyntax0B8VerifierC","s11SwiftSyntax23SourceLocationConverterC","s11SwiftSyntax26IncrementalParseTransitionC","s11SwiftSyntax35IncrementalParseReusedNodeCollectorC","s11SwiftSyntax0B13VerifierErrorO07unknownB5FoundyAcA0B0V_tcACmF","s11SwiftSyntax0B14ClassificationO10identifieryA2CmF","s11SwiftSyntax0B14ClassificationO11lineCommentyA2CmF","s11SwiftSyntax0B14ClassificationO12blockCommentyA2CmF","s11SwiftSyntax0B14ClassificationO13buildConfigIdyA2CmF","s11SwiftSyntax0B14ClassificationO13objectLiteralyA2CmF","s11SwiftSyntax0B14ClassificationO13stringLiteralyA2CmF","s11SwiftSyntax0B14ClassificationO14docLineCommentyA2CmF","s11SwiftSyntax0B14ClassificationO14integerLiteralyA2CmF","s11SwiftSyntax0B14ClassificationO14typeIdentifieryA2CmF","s11SwiftSyntax0B14ClassificationO15docBlockCommentyA2CmF","s11SwiftSyntax0B14ClassificationO15floatingLiteralyA2CmF","s11SwiftSyntax0B14ClassificationO16dollarIdentifieryA2CmF","s11SwiftSyntax0B14ClassificationO17editorPlaceholderyA2CmF","s11SwiftSyntax0B14ClassificationO21poundDirectiveKeywordyA2CmF","s11SwiftSyntax0B14ClassificationO25stringInterpolationAnchoryA2CmF","s11SwiftSyntax0B14ClassificationO4noneyA2CmF","s11SwiftSyntax0B14ClassificationO7keywordyA2CmF","s11SwiftSyntax0B14ClassificationO9attributeyA2CmF","s11SwiftSyntax0B19VisitorContinueKindO12skipChildrenyA2CmF","s11SwiftSyntax0B19VisitorContinueKindO13visitChildrenyA2CmF","s11SwiftSyntax0B4EnumO10accessPathyAcA06AccesseB0VcACmF","s11SwiftSyntax0B4EnumO10importDeclyAcA06ImporteB0VcACmF","s11SwiftSyntax0B4EnumO10returnStmtyAcA06ReturneB0VcACmF","s11SwiftSyntax0B4EnumO10sourceFileyAcA06SourceeB0VcACmF","s11SwiftSyntax0B4EnumO10structDeclyAcA06StructeB0VcACmF","s11SwiftSyntax0B4EnumO10switchCaseyAcA06SwitcheB0VcACmF","s11SwiftSyntax0B4EnumO10switchStmtyAcA06SwitcheB0VcACmF","s11SwiftSyntax0B4EnumO11catchClauseyAcA05CatcheB0VcACmF","s11SwiftSyntax0B4EnumO11closureExpryAcA07ClosureeB0VcACmF","s11SwiftSyntax0B4EnumO11keyPathExpryAcA03KeyefB0VcACmF","s11SwiftSyntax0B4EnumO11ternaryExpryAcA07TernaryeB0VcACmF","s11SwiftSyntax0B4EnumO11unknownDeclyAcA07UnknowneB0VcACmF","s11SwiftSyntax0B4EnumO11unknownExpryAcA07UnknowneB0VcACmF","s11SwiftSyntax0B4EnumO11unknownStmtyAcA07UnknowneB0VcACmF","s11SwiftSyntax0B4EnumO11unknownTypeyAcA07UnknowneB0VcACmF","s11SwiftSyntax0B4EnumO11whereClauseyAcA05WhereeB0VcACmF","s11SwiftSyntax0B4EnumO12accessorDeclyAcA08AccessoreB0VcACmF","s11SwiftSyntax0B4EnumO12accessorListyAcA08AccessoreB0VcACmF","s11SwiftSyntax0B4EnumO12arrayElementyAcA05ArrayeB0VcACmF","s11SwiftSyntax0B4EnumO12caseItemListyAcA04CaseefB0VcACmF","s11SwiftSyntax0B4EnumO12closureParamyAcA07ClosureeB0VcACmF","s11SwiftSyntax0B4EnumO12continueStmtyAcA08ContinueeB0VcACmF","s11SwiftSyntax0B4EnumO12declModifieryAcA04DecleB0VcACmF","s11SwiftSyntax0B4EnumO12enumCaseDeclyAcA0cefB0VcACmF","s11SwiftSyntax0B4EnumO12functionDeclyAcA08FunctioneB0VcACmF","s11SwiftSyntax0B4EnumO12functionTypeyAcA08FunctioneB0VcACmF","s11SwiftSyntax0B4EnumO12ifConfigDeclyAcA02IfefB0VcACmF","s11SwiftSyntax0B4EnumO12metatypeTypeyAcA08MetatypeeB0VcACmF","s11SwiftSyntax0B4EnumO12modifierListyAcA08ModifiereB0VcACmF","s11SwiftSyntax0B4EnumO12objCSelectoryAcA03ObjeB0VcACmF","s11SwiftSyntax0B4EnumO12operatorDeclyAcA08OperatoreB0VcACmF","s11SwiftSyntax0B4EnumO12optionalTypeyAcA08OptionaleB0VcACmF","s11SwiftSyntax0B4EnumO12protocolDeclyAcA08ProtocoleB0VcACmF","s11SwiftSyntax0B4EnumO12returnClauseyAcA06ReturneB0VcACmF","s11SwiftSyntax0B4EnumO12sequenceExpryAcA08SequenceeB0VcACmF","s11SwiftSyntax0B4EnumO12superRefExpryAcA05SuperefB0VcACmF","s11SwiftSyntax0B4EnumO12tuplePatternyAcA05TupleeB0VcACmF","s11SwiftSyntax0B4EnumO12variableDeclyAcA08VariableeB0VcACmF","s11SwiftSyntax0B4EnumO12versionTupleyAcA07VersioneB0VcACmF","s11SwiftSyntax0B4EnumO13accessorBlockyAcA08AccessoreB0VcACmF","s11SwiftSyntax0B4EnumO13asTypePatternyAcA02AsefB0VcACmF","s11SwiftSyntax0B4EnumO13attributeListyAcA09AttributeeB0VcACmF","s11SwiftSyntax0B4EnumO13catchItemListyAcA05CatchefB0VcACmF","s11SwiftSyntax0B4EnumO13codeBlockItemyAcA04CodeefB0VcACmF","s11SwiftSyntax0B4EnumO13extensionDeclyAcA09ExtensioneB0VcACmF","s11SwiftSyntax0B4EnumO13inheritedTypeyAcA09InheritedeB0VcACmF","s11SwiftSyntax0B4EnumO13isTypePatternyAcA02IsefB0VcACmF","s11SwiftSyntax0B4EnumO13objcNamePieceyAcA04ObjcefB0VcACmF","s11SwiftSyntax0B4EnumO13poundFileExpryAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO13poundLineExpryAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO13stringSegmentyAcA06StringeB0VcACmF","s11SwiftSyntax0B4EnumO13subscriptDeclyAcA09SubscripteB0VcACmF","s11SwiftSyntax0B4EnumO13subscriptExpryAcA09SubscripteB0VcACmF","s11SwiftSyntax0B4EnumO13typealiasDeclyAcA09TypealiaseB0VcACmF","s11SwiftSyntax0B4EnumO14assignmentExpryAcA010AssignmenteB0VcACmF","s11SwiftSyntax0B4EnumO14attributedTypeyAcA010AttributedeB0VcACmF","s11SwiftSyntax0B4EnumO14dictionaryExpryAcA010DictionaryeB0VcACmF","s11SwiftSyntax0B4EnumO14dictionaryTypeyAcA010DictionaryeB0VcACmF","s11SwiftSyntax0B4EnumO14expressionStmtyAcA010ExpressioneB0VcACmF","s11SwiftSyntax0B4EnumO14identifierExpryAcA010IdentifiereB0VcACmF","s11SwiftSyntax0B4EnumO14identifierListyAcA010IdentifiereB0VcACmF","s11SwiftSyntax0B4EnumO14ifConfigClauseyAcA02IfefB0VcACmF","s11SwiftSyntax0B4EnumO14memberDeclListyAcA06MemberefB0VcACmF","s11SwiftSyntax0B4EnumO14nilLiteralExpryAcA03NilefB0VcACmF","s11SwiftSyntax0B4EnumO14patternBindingyAcA07PatterneB0VcACmF","s11SwiftSyntax0B4EnumO14poundErrorDeclyAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO14specializeExpryAcA010SpecializeeB0VcACmF","s11SwiftSyntax0B4EnumO14switchCaseListyAcA06SwitchefB0VcACmF","s11SwiftSyntax0B4EnumO14typeAnnotationyAcA04TypeeB0VcACmF","s11SwiftSyntax0B4EnumO14unknownPatternyAcA07UnknowneB0VcACmF","s11SwiftSyntax0B4EnumO15catchClauseListyAcA05CatchefB0VcACmF","s11SwiftSyntax0B4EnumO15compositionTypeyAcA011CompositioneB0VcACmF","s11SwiftSyntax0B4EnumO15customAttributeyAcA06CustomeB0VcACmF","s11SwiftSyntax0B4EnumO15declarationStmtyAcA011DeclarationeB0VcACmF","s11SwiftSyntax0B4EnumO15enumCaseElementyAcA0cefB0VcACmF","s11SwiftSyntax0B4EnumO15enumCasePatternyAcA0cefB0VcACmF","s11SwiftSyntax0B4EnumO15fallthroughStmtyAcA011FallthrougheB0VcACmF","s11SwiftSyntax0B4EnumO15forcedValueExpryAcA06ForcedefB0VcACmF","s11SwiftSyntax0B4EnumO15genericArgumentyAcA07GenericeB0VcACmF","s11SwiftSyntax0B4EnumO15initializerDeclyAcA011InitializereB0VcACmF","s11SwiftSyntax0B4EnumO15keyPathBaseExpryAcA03KeyefgB0VcACmF","s11SwiftSyntax0B4EnumO15memberDeclBlockyAcA06MemberefB0VcACmF","s11SwiftSyntax0B4EnumO15objcKeyPathExpryAcA04ObjcefgB0VcACmF","s11SwiftSyntax0B4EnumO15optionalPatternyAcA08OptionaleB0VcACmF","s11SwiftSyntax0B4EnumO15parameterClauseyAcA09ParametereB0VcACmF","s11SwiftSyntax0B4EnumO15poundAssertStmtyAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO15poundColumnExpryAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO15poundFileIDExpryAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO15repeatWhileStmtyAcA06RepeatefB0VcACmF","s11SwiftSyntax0B4EnumO15switchCaseLabelyAcA06SwitchefB0VcACmF","s11SwiftSyntax0B4EnumO15wildcardPatternyAcA08WildcardeB0VcACmF","s11SwiftSyntax0B4EnumO16arrayElementListyAcA05ArrayefB0VcACmF","s11SwiftSyntax0B4EnumO16closureParamListyAcA07ClosureefB0VcACmF","s11SwiftSyntax0B4EnumO16closureSignatureyAcA07ClosureeB0VcACmF","s11SwiftSyntax0B4EnumO16conditionElementyAcA09ConditioneB0VcACmF","s11SwiftSyntax0B4EnumO16declNameArgumentyAcA04DeclefB0VcACmF","s11SwiftSyntax0B4EnumO16floatLiteralExpryAcA05FloatefB0VcACmF","s11SwiftSyntax0B4EnumO16functionCallExpryAcA08FunctionefB0VcACmF","s11SwiftSyntax0B4EnumO16functionDeclNameyAcA08FunctionefB0VcACmF","s11SwiftSyntax0B4EnumO16genericParameteryAcA07GenericeB0VcACmF","s11SwiftSyntax0B4EnumO16memberAccessExpryAcA06MemberefB0VcACmF","s11SwiftSyntax0B4EnumO16objcSelectorExpryAcA04ObjcefB0VcACmF","s11SwiftSyntax0B4EnumO16postfixUnaryExpryAcA07PostfixefB0VcACmF","s11SwiftSyntax0B4EnumO16poundWarningDeclyAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO16regexLiteralExpryAcA05RegexefB0VcACmF","s11SwiftSyntax0B4EnumO16tupleExprElementyAcA05TupleefB0VcACmF","s11SwiftSyntax0B4EnumO16tupleTypeElementyAcA05TupleefB0VcACmF","s11SwiftSyntax0B4EnumO17accessorParameteryAcA08AccessoreB0VcACmF","s11SwiftSyntax0B4EnumO17availabilityEntryyAcA012AvailabilityeB0VcACmF","s11SwiftSyntax0B4EnumO17codeBlockItemListyAcA04CodeefgB0VcACmF","s11SwiftSyntax0B4EnumO17declNameArgumentsyAcA04DeclefB0VcACmF","s11SwiftSyntax0B4EnumO17deinitializerDeclyAcA013DeinitializereB0VcACmF","s11SwiftSyntax0B4EnumO17dictionaryElementyAcA010DictionaryeB0VcACmF","s11SwiftSyntax0B4EnumO17expressionPatternyAcA010ExpressioneB0VcACmF","s11SwiftSyntax0B4EnumO17expressionSegmentyAcA010ExpressioneB0VcACmF","s11SwiftSyntax0B4EnumO17functionParameteryAcA08FunctioneB0VcACmF","s11SwiftSyntax0B4EnumO17functionSignatureyAcA08FunctioneB0VcACmF","s11SwiftSyntax0B4EnumO17identifierPatternyAcA010IdentifiereB0VcACmF","s11SwiftSyntax0B4EnumO17inheritedTypeListyAcA09InheritedefB0VcACmF","s11SwiftSyntax0B4EnumO17initializerClauseyAcA011InitializereB0VcACmF","s11SwiftSyntax0B4EnumO17nonEmptyTokenListyAcA03NonefgB0VcACmF","s11SwiftSyntax0B4EnumO17objCSelectorPieceyAcA03ObjefB0VcACmF","s11SwiftSyntax0B4EnumO17objectLiteralExpryAcA06ObjectefB0VcACmF","s11SwiftSyntax0B4EnumO17poundFilePathExpryAcA05PoundefgB0VcACmF","s11SwiftSyntax0B4EnumO17poundFunctionExpryAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO17qualifiedDeclNameyAcA09QualifiedefB0VcACmF","s11SwiftSyntax0B4EnumO17stringLiteralExpryAcA06StringefB0VcACmF","s11SwiftSyntax0B4EnumO18associatedtypeDeclyAcA014AssociatedtypeeB0VcACmF","s11SwiftSyntax0B4EnumO18binaryOperatorExpryAcA06BinaryefB0VcACmF","s11SwiftSyntax0B4EnumO18booleanLiteralExpryAcA07BooleanefB0VcACmF","s11SwiftSyntax0B4EnumO18closureCaptureItemyAcA07ClosureefB0VcACmF","s11SwiftSyntax0B4EnumO18elseIfContinuationyAcA04ElseefB0VcACmF","s11SwiftSyntax0B4EnumO18genericRequirementyAcA07GenericeB0VcACmF","s11SwiftSyntax0B4EnumO18genericWhereClauseyAcA07GenericefB0VcACmF","s11SwiftSyntax0B4EnumO18ifConfigClauseListyAcA02IfefgB0VcACmF","s11SwiftSyntax0B4EnumO18integerLiteralExpryAcA07IntegerefB0VcACmF","s11SwiftSyntax0B4EnumO18memberDeclListItemyAcA06MemberefgB0VcACmF","s11SwiftSyntax0B4EnumO18patternBindingListyAcA07PatternefB0VcACmF","s11SwiftSyntax0B4EnumO18poundDsohandleExpryAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO18prefixOperatorExpryAcA06PrefixefB0VcACmF","s11SwiftSyntax0B4EnumO18switchDefaultLabelyAcA06SwitchefB0VcACmF","s11SwiftSyntax0B4EnumO19accessLevelModifieryAcA06AccessefB0VcACmF","s11SwiftSyntax0B4EnumO19accessPathComponentyAcA06AccessefB0VcACmF","s11SwiftSyntax0B4EnumO19enumCaseElementListyAcA0cefgB0VcACmF","s11SwiftSyntax0B4EnumO19genericArgumentListyAcA07GenericefB0VcACmF","s11SwiftSyntax0B4EnumO19postfixIfConfigExpryAcA07PostfixefgB0VcACmF","s11SwiftSyntax0B4EnumO19poundSourceLocationyAcA05PoundefB0VcACmF","s11SwiftSyntax0B4EnumO19precedenceGroupDeclyAcA010PrecedenceefB0VcACmF","s11SwiftSyntax0B4EnumO19sameTypeRequirementyAcA04SameefB0VcACmF","s11SwiftSyntax0B4EnumO19targetFunctionEntryyAcA06TargetefB0VcACmF","s11SwiftSyntax0B4EnumO19tuplePatternElementyAcA05TupleefB0VcACmF","s11SwiftSyntax0B4EnumO19valueBindingPatternyAcA05ValueefB0VcACmF","s11SwiftSyntax0B4EnumO20availabilityArgumentyAcA012AvailabilityeB0VcACmF","s11SwiftSyntax0B4EnumO20availabilitySpecListyAcA012AvailabilityefB0VcACmF","s11SwiftSyntax0B4EnumO20classRestrictionTypeyAcA05ClassefB0VcACmF","s11SwiftSyntax0B4EnumO20conditionElementListyAcA09ConditionefB0VcACmF","s11SwiftSyntax0B4EnumO20declNameArgumentListyAcA04DeclefgB0VcACmF","s11SwiftSyntax0B4EnumO20genericParameterListyAcA07GenericefB0VcACmF","s11SwiftSyntax0B4EnumO20memberTypeIdentifieryAcA06MemberefB0VcACmF","s11SwiftSyntax0B4EnumO20optionalChainingExpryAcA08OptionalefB0VcACmF","s11SwiftSyntax0B4EnumO20simpleTypeIdentifieryAcA06SimpleefB0VcACmF","s11SwiftSyntax0B4EnumO20tupleExprElementListyAcA05TupleefgB0VcACmF","s11SwiftSyntax0B4EnumO20tupleTypeElementListyAcA05TupleefgB0VcACmF","s11SwiftSyntax0B4EnumO21availabilityConditionyAcA012AvailabilityeB0VcACmF","s11SwiftSyntax0B4EnumO21dictionaryElementListyAcA010DictionaryefB0VcACmF","s11SwiftSyntax0B4EnumO21discardAssignmentExpryAcA07DiscardefB0VcACmF","s11SwiftSyntax0B4EnumO21editorPlaceholderExpryAcA06EditorefB0VcACmF","s11SwiftSyntax0B4EnumO21functionParameterListyAcA08FunctionefB0VcACmF","s11SwiftSyntax0B4EnumO21genericArgumentClauseyAcA07GenericefB0VcACmF","s11SwiftSyntax0B4EnumO21primaryAssociatedTypeyAcA07PrimaryefB0VcACmF","s11SwiftSyntax0B4EnumO21stringLiteralSegmentsyAcA06StringefB0VcACmF","s11SwiftSyntax0B4EnumO21symbolicReferenceExpryAcA08SymbolicefB0VcACmF","s11SwiftSyntax0B4EnumO21typeInheritanceClauseyAcA04TypeefB0VcACmF","s11SwiftSyntax0B4EnumO21typeInitializerClauseyAcA04TypeefB0VcACmF","s11SwiftSyntax0B4EnumO21unresolvedPatternExpryAcA010UnresolvedefB0VcACmF","s11SwiftSyntax0B4EnumO22closureCaptureItemListyAcA07ClosureefgB0VcACmF","s11SwiftSyntax0B4EnumO22compositionTypeElementyAcA011CompositionefB0VcACmF","s11SwiftSyntax0B4EnumO22conformanceRequirementyAcA011ConformanceeB0VcACmF","s11SwiftSyntax0B4EnumO22differentiabilityParamyAcA017DifferentiabilityeB0VcACmF","s11SwiftSyntax0B4EnumO22genericParameterClauseyAcA07GenericefB0VcACmF","s11SwiftSyntax0B4EnumO22genericRequirementListyAcA07GenericefB0VcACmF","s11SwiftSyntax0B4EnumO22labeledSpecializeEntryyAcA07LabeledefB0VcACmF","s11SwiftSyntax0B4EnumO23closureCaptureSignatureyAcA07ClosureefB0VcACmF","s11SwiftSyntax0B4EnumO23differentiabilityParamsyAcA017DifferentiabilityeB0VcACmF","s11SwiftSyntax0B4EnumO23poundSourceLocationArgsyAcA05PoundefgB0VcACmF","s11SwiftSyntax0B4EnumO23precedenceGroupNameListyAcA010PrecedenceefgB0VcACmF","s11SwiftSyntax0B4EnumO23precedenceGroupRelationyAcA010PrecedenceefB0VcACmF","s11SwiftSyntax0B4EnumO23tuplePatternElementListyAcA05TupleefgB0VcACmF","s11SwiftSyntax0B4EnumO23unavailabilityConditionyAcA014UnavailabilityeB0VcACmF","s11SwiftSyntax0B4EnumO24matchingPatternConditionyAcA08MatchingefB0VcACmF","s11SwiftSyntax0B4EnumO24optionalBindingConditionyAcA08OptionalefB0VcACmF","s11SwiftSyntax0B4EnumO25precedenceGroupAssignmentyAcA010PrecedenceefB0VcACmF","s11SwiftSyntax0B4EnumO25primaryAssociatedTypeListyAcA07PrimaryefgB0VcACmF","s11SwiftSyntax0B4EnumO26compositionTypeElementListyAcA011CompositionefgB0VcACmF","s11SwiftSyntax0B4EnumO26differentiabilityParamListyAcA017DifferentiabilityefB0VcACmF","s11SwiftSyntax0B4EnumO26operatorPrecedenceAndTypesyAcA08OperatorefgB0VcACmF","s11SwiftSyntax0B4EnumO26precedenceGroupNameElementyAcA010PrecedenceefgB0VcACmF","s11SwiftSyntax0B4EnumO27availabilityLabeledArgumentyAcA012AvailabilityefB0VcACmF","s11SwiftSyntax0B4EnumO27specializeAttributeSpecListyAcA010SpecializeefgB0VcACmF","s11SwiftSyntax0B4EnumO28implementsAttributeArgumentsyAcA010ImplementsefB0VcACmF","s11SwiftSyntax0B4EnumO28namedAttributeStringArgumentyAcA05NamedefgB0VcACmF","s11SwiftSyntax0B4EnumO28precedenceGroupAssociativityyAcA010PrecedenceefB0VcACmF","s11SwiftSyntax0B4EnumO28precedenceGroupAttributeListyAcA010PrecedenceefgB0VcACmF","s11SwiftSyntax0B4EnumO29differentiabilityParamsClauseyAcA017DifferentiabilityefB0VcACmF","s11SwiftSyntax0B4EnumO30availabilityVersionRestrictionyAcA012AvailabilityefB0VcACmF","s11SwiftSyntax0B4EnumO30multipleTrailingClosureElementyAcA08MultipleefgB0VcACmF","s11SwiftSyntax0B4EnumO31implicitlyUnwrappedOptionalTypeyAcA010ImplicitlyefgB0VcACmF","s11SwiftSyntax0B4EnumO32differentiableAttributeArgumentsyAcA014DifferentiableefB0VcACmF","s11SwiftSyntax0B4EnumO34multipleTrailingClosureElementListyAcA08MultipleefghB0VcACmF","s11SwiftSyntax0B4EnumO40derivativeRegistrationAttributeArgumentsyAcA010DerivativeefgB0VcACmF","s11SwiftSyntax0B4EnumO4declyAcA011UnknownDeclB0VcACmF","s11SwiftSyntax0B4EnumO4expryAcA011UnknownExprB0VcACmF","s11SwiftSyntax0B4EnumO4stmtyAcA011UnknownStmtB0VcACmF","s11SwiftSyntax0B4EnumO4typeyAcA011UnknownTypeB0VcACmF","s11SwiftSyntax0B4EnumO5tokenyAcA05TokenB0VcACmF","s11SwiftSyntax0B4EnumO6asExpryAcA02AseB0VcACmF","s11SwiftSyntax0B4EnumO6doStmtyAcA02DoeB0VcACmF","s11SwiftSyntax0B4EnumO6ifStmtyAcA02IfeB0VcACmF","s11SwiftSyntax0B4EnumO6isExpryAcA02IseB0VcACmF","s11SwiftSyntax0B4EnumO7patternyAcA014UnknownPatternB0VcACmF","s11SwiftSyntax0B4EnumO7tryExpryAcA03TryeB0VcACmF","s11SwiftSyntax0B4EnumO7unknownyAcA07UnknownB0VcACmF","s11SwiftSyntax0B4EnumO8caseItemyAcA04CaseeB0VcACmF","s11SwiftSyntax0B4EnumO8declNameyAcA04DecleB0VcACmF","s11SwiftSyntax0B4EnumO8enumDeclyAcA0ceB0VcACmF","s11SwiftSyntax0B4EnumO8exprListyAcA04ExpreB0VcACmF","s11SwiftSyntax0B4EnumO8objcNameyAcA04ObjceB0VcACmF","s11SwiftSyntax0B4EnumO8someTypeyAcA04SomeeB0VcACmF","s11SwiftSyntax0B4EnumO8typeExpryAcA04TypeeB0VcACmF","s11SwiftSyntax0B4EnumO9arrayExpryAcA05ArrayeB0VcACmF","s11SwiftSyntax0B4EnumO9arrayTypeyAcA05ArrayeB0VcACmF","s11SwiftSyntax0B4EnumO9arrowExpryAcA05ArroweB0VcACmF","s11SwiftSyntax0B4EnumO9attributeyAcA09AttributeB0VcACmF","s11SwiftSyntax0B4EnumO9awaitExpryAcA05AwaiteB0VcACmF","s11SwiftSyntax0B4EnumO9breakStmtyAcA05BreakeB0VcACmF","s11SwiftSyntax0B4EnumO9catchItemyAcA05CatcheB0VcACmF","s11SwiftSyntax0B4EnumO9classDeclyAcA05ClasseB0VcACmF","s11SwiftSyntax0B4EnumO9codeBlockyAcA04CodeeB0VcACmF","s11SwiftSyntax0B4EnumO9deferStmtyAcA05DefereB0VcACmF","s11SwiftSyntax0B4EnumO9elseBlockyAcA04ElseeB0VcACmF","s11SwiftSyntax0B4EnumO9forInStmtyAcA03ForefB0VcACmF","s11SwiftSyntax0B4EnumO9guardStmtyAcA05GuardeB0VcACmF","s11SwiftSyntax0B4EnumO9inOutExpryAcA02InefB0VcACmF","s11SwiftSyntax0B4EnumO9throwStmtyAcA05ThroweB0VcACmF","s11SwiftSyntax0B4EnumO9tokenListyAcA05TokeneB0VcACmF","s11SwiftSyntax0B4EnumO9tupleExpryAcA05TupleeB0VcACmF","s11SwiftSyntax0B4EnumO9tupleTypeyAcA05TupleeB0VcACmF","s11SwiftSyntax0B4EnumO9whileStmtyAcA05WhileeB0VcACmF","s11SwiftSyntax0B4EnumO9yieldListyAcA05YieldeB0VcACmF","s11SwiftSyntax0B4EnumO9yieldStmtyAcA05YieldeB0VcACmF","s11SwiftSyntax11TriviaPieceO11garbageTextyACSScACmF","s11SwiftSyntax11TriviaPieceO11lineCommentyACSScACmF","s11SwiftSyntax11TriviaPieceO12blockCommentyACSScACmF","s11SwiftSyntax11TriviaPieceO12verticalTabsyACSicACmF","s11SwiftSyntax11TriviaPieceO14docLineCommentyACSScACmF","s11SwiftSyntax11TriviaPieceO15carriageReturnsyACSicACmF","s11SwiftSyntax11TriviaPieceO15docBlockCommentyACSScACmF","s11SwiftSyntax11TriviaPieceO23carriageReturnLineFeedsyACSicACmF","s11SwiftSyntax11TriviaPieceO4tabsyACSicACmF","s11SwiftSyntax11TriviaPieceO6spacesyACSicACmF","s11SwiftSyntax11TriviaPieceO8newlinesyACSicACmF","s11SwiftSyntax11TriviaPieceO9formfeedsyACSicACmF","s11SwiftSyntax14SourcePresenceO7missingyA2CmF","s11SwiftSyntax14SourcePresenceO7presentyA2CmF","s11SwiftSyntax9TokenKindO10anyKeywordyA2CmF","s11SwiftSyntax9TokenKindO10forKeywordyA2CmF","s11SwiftSyntax9TokenKindO10identifieryACSScACmF","s11SwiftSyntax9TokenKindO10letKeywordyA2CmF","s11SwiftSyntax9TokenKindO10nilKeywordyA2CmF","s11SwiftSyntax9TokenKindO10rightAngleyA2CmF","s11SwiftSyntax9TokenKindO10rightBraceyA2CmF","s11SwiftSyntax9TokenKindO10rightParenyA2CmF","s11SwiftSyntax9TokenKindO10tryKeywordyA2CmF","s11SwiftSyntax9TokenKindO10varKeywordyA2CmF","s11SwiftSyntax9TokenKindO11caseKeywordyA2CmF","s11SwiftSyntax9TokenKindO11elseKeywordyA2CmF","s11SwiftSyntax9TokenKindO11enumKeywordyA2CmF","s11SwiftSyntax9TokenKindO11funcKeywordyA2CmF","s11SwiftSyntax9TokenKindO11initKeywordyA2CmF","s11SwiftSyntax9TokenKindO11selfKeywordyA2CmF","s11SwiftSyntax9TokenKindO11singleQuoteyA2CmF","s11SwiftSyntax9TokenKindO11stringQuoteyA2CmF","s11SwiftSyntax9TokenKindO11trueKeywordyA2CmF","s11SwiftSyntax9TokenKindO12breakKeywordyA2CmF","s11SwiftSyntax9TokenKindO12catchKeywordyA2CmF","s11SwiftSyntax9TokenKindO12classKeywordyA2CmF","s11SwiftSyntax9TokenKindO12deferKeywordyA2CmF","s11SwiftSyntax9TokenKindO12falseKeywordyA2CmF","s11SwiftSyntax9TokenKindO12guardKeywordyA2CmF","s11SwiftSyntax9TokenKindO12inoutKeywordyA2CmF","s11SwiftSyntax9TokenKindO12prefixPeriodyA2CmF","s11SwiftSyntax9TokenKindO12regexLiteralyACSScACmF","s11SwiftSyntax9TokenKindO12superKeywordyA2CmF","s11SwiftSyntax9TokenKindO12throwKeywordyA2CmF","s11SwiftSyntax9TokenKindO12whereKeywordyA2CmF","s11SwiftSyntax9TokenKindO12whileKeywordyA2CmF","s11SwiftSyntax9TokenKindO13deinitKeywordyA2CmF","s11SwiftSyntax9TokenKindO13importKeywordyA2CmF","s11SwiftSyntax9TokenKindO13publicKeywordyA2CmF","s11SwiftSyntax9TokenKindO13repeatKeywordyA2CmF","s11SwiftSyntax9TokenKindO13returnKeywordyA2CmF","s11SwiftSyntax9TokenKindO13staticKeywordyA2CmF","s11SwiftSyntax9TokenKindO13stringLiteralyACSScACmF","s11SwiftSyntax9TokenKindO13stringSegmentyACSScACmF","s11SwiftSyntax9TokenKindO13structKeywordyA2CmF","s11SwiftSyntax9TokenKindO13switchKeywordyA2CmF","s11SwiftSyntax9TokenKindO13throwsKeywordyA2CmF","s11SwiftSyntax9TokenKindO14defaultKeywordyA2CmF","s11SwiftSyntax9TokenKindO14integerLiteralyACSScACmF","s11SwiftSyntax9TokenKindO14poundIfKeywordyA2CmF","s11SwiftSyntax9TokenKindO14prefixOperatoryACSScACmF","s11SwiftSyntax9TokenKindO14privateKeywordyA2CmF","s11SwiftSyntax9TokenKindO15continueKeywordyA2CmF","s11SwiftSyntax9TokenKindO15exclamationMarkyA2CmF","s11SwiftSyntax9TokenKindO15floatingLiteralyACSScACmF","s11SwiftSyntax9TokenKindO15internalKeywordyA2CmF","s11SwiftSyntax9TokenKindO15operatorKeywordyA2CmF","s11SwiftSyntax9TokenKindO15postfixOperatoryACSScACmF","s11SwiftSyntax9TokenKindO15prefixAmpersandyA2CmF","s11SwiftSyntax9TokenKindO15protocolKeywordyA2CmF","s11SwiftSyntax9TokenKindO15rethrowsKeywordyA2CmF","s11SwiftSyntax9TokenKindO15wildcardKeywordyA2CmF","s11SwiftSyntax9TokenKindO16dollarIdentifieryACSScACmF","s11SwiftSyntax9TokenKindO16extensionKeywordyA2CmF","s11SwiftSyntax9TokenKindO16poundElseKeywordyA2CmF","s11SwiftSyntax9TokenKindO16poundFileKeywordyA2CmF","s11SwiftSyntax9TokenKindO16poundLineKeywordyA2CmF","s11SwiftSyntax9TokenKindO16subscriptKeywordyA2CmF","s11SwiftSyntax9TokenKindO16typealiasKeywordyA2CmF","s11SwiftSyntax9TokenKindO17contextualKeywordyACSScACmF","s11SwiftSyntax9TokenKindO17infixQuestionMarkyA2CmF","s11SwiftSyntax9TokenKindO17leftSquareBracketyA2CmF","s11SwiftSyntax9TokenKindO17poundEndifKeywordyA2CmF","s11SwiftSyntax9TokenKindO17poundErrorKeywordyA2CmF","s11SwiftSyntax9TokenKindO18capitalSelfKeywordyA2CmF","s11SwiftSyntax9TokenKindO18fallthroughKeywordyA2CmF","s11SwiftSyntax9TokenKindO18fileprivateKeywordyA2CmF","s11SwiftSyntax9TokenKindO18poundAssertKeywordyA2CmF","s11SwiftSyntax9TokenKindO18poundColumnKeywordyA2CmF","s11SwiftSyntax9TokenKindO18poundElseifKeywordyA2CmF","s11SwiftSyntax9TokenKindO18poundFileIDKeywordyA2CmF","s11SwiftSyntax9TokenKindO18rawStringDelimiteryACSScACmF","s11SwiftSyntax9TokenKindO18rightSquareBracketyA2CmF","s11SwiftSyntax9TokenKindO19postfixQuestionMarkyA2CmF","s11SwiftSyntax9TokenKindO19poundKeyPathKeywordyA2CmF","s11SwiftSyntax9TokenKindO19poundWarningKeywordyA2CmF","s11SwiftSyntax9TokenKindO20multilineStringQuoteyA2CmF","s11SwiftSyntax9TokenKindO20poundFilePathKeywordyA2CmF","s11SwiftSyntax9TokenKindO20poundFunctionKeywordyA2CmF","s11SwiftSyntax9TokenKindO20poundSelectorKeywordyA2CmF","s11SwiftSyntax9TokenKindO20spacedBinaryOperatoryACSScACmF","s11SwiftSyntax9TokenKindO21associatedtypeKeywordyA2CmF","s11SwiftSyntax9TokenKindO21poundAvailableKeywordyA2CmF","s11SwiftSyntax9TokenKindO21poundDsohandleKeywordyA2CmF","s11SwiftSyntax9TokenKindO22precedencegroupKeywordyA2CmF","s11SwiftSyntax9TokenKindO22unspacedBinaryOperatoryACSScACmF","s11SwiftSyntax9TokenKindO23poundFileLiteralKeywordyA2CmF","s11SwiftSyntax9TokenKindO23poundUnavailableKeywordyA2CmF","s11SwiftSyntax9TokenKindO24poundColorLiteralKeywordyA2CmF","s11SwiftSyntax9TokenKindO24poundImageLiteralKeywordyA2CmF","s11SwiftSyntax9TokenKindO25stringInterpolationAnchoryA2CmF","s11SwiftSyntax9TokenKindO26poundSourceLocationKeywordyA2CmF","s11SwiftSyntax9TokenKindO3eofyA2CmF","s11SwiftSyntax9TokenKindO5arrowyA2CmF","s11SwiftSyntax9TokenKindO5colonyA2CmF","s11SwiftSyntax9TokenKindO5commayA2CmF","s11SwiftSyntax9TokenKindO5equalyA2CmF","s11SwiftSyntax9TokenKindO5poundyA2CmF","s11SwiftSyntax9TokenKindO5yieldyA2CmF","s11SwiftSyntax9TokenKindO6atSignyA2CmF","s11SwiftSyntax9TokenKindO6periodyA2CmF","s11SwiftSyntax9TokenKindO7unknownyACSScACmF","s11SwiftSyntax9TokenKindO8backtickyA2CmF","s11SwiftSyntax9TokenKindO8ellipsisyA2CmF","s11SwiftSyntax9TokenKindO9asKeywordyA2CmF","s11SwiftSyntax9TokenKindO9backslashyA2CmF","s11SwiftSyntax9TokenKindO9doKeywordyA2CmF","s11SwiftSyntax9TokenKindO9ifKeywordyA2CmF","s11SwiftSyntax9TokenKindO9inKeywordyA2CmF","s11SwiftSyntax9TokenKindO9isKeywordyA2CmF","s11SwiftSyntax9TokenKindO9leftAngleyA2CmF","s11SwiftSyntax9TokenKindO9leftBraceyA2CmF","s11SwiftSyntax9TokenKindO9leftParenyA2CmF","s11SwiftSyntax9TokenKindO9semicolonyA2CmF","s11SwiftSyntax010AccessPathB0VyACSgAA0B0Vcfc","s11SwiftSyntax010ImportDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax010ImportDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax010ReturnStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax010ReturnStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax010SourceFileB0VyACSgAA0B0Vcfc","s11SwiftSyntax010SourceFileB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax010StructDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax010StructDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax010SwitchCaseB0VyACSgAA0B0Vcfc","s11SwiftSyntax010SwitchCaseB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax010SwitchStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax010SwitchStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax011CatchClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax011CatchClauseB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax011ClosureExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax011ClosureExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax011KeyPathExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax011KeyPathExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax011TernaryExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax011TernaryExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax011UnknownDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax011UnknownExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax011UnknownStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax011UnknownTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax011WhereClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax011WhereClauseB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012AccessorDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012AccessorDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012AccessorListB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ArrayElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ArrayElementB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012CaseItemListB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ClosureParamB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ClosureParamB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012ContinueStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ContinueStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012DeclModifierB0VyACSgAA0B0Vcfc","s11SwiftSyntax012DeclModifierB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012EnumCaseDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012EnumCaseDeclB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax012FunctionDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012FunctionDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012FunctionTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax012FunctionTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012IfConfigDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012IfConfigDeclB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax012MetatypeTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax012MetatypeTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012ModifierListB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ObjCSelectorB0VyACSgAA0B0Vcfc","s11SwiftSyntax012OperatorDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012OperatorDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012OptionalTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax012OptionalTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012ProtocolDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ProtocolDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012ReturnClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax012ReturnClauseB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012SequenceExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax012SequenceExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012SuperRefExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax012SuperRefExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax012TuplePatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax012TuplePatternB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012VariableDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax012VariableDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax012VersionTupleB0VyACSgAA0B0Vcfc","s11SwiftSyntax012VersionTupleB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013AccessorBlockB0VyACSgAA0B0Vcfc","s11SwiftSyntax013AccessorBlockB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013AsTypePatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax013AsTypePatternB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax013AttributeListB0VyACSgAA0B0Vcfc","s11SwiftSyntax013CatchItemListB0VyACSgAA0B0Vcfc","s11SwiftSyntax013CodeBlockItemB0VyACSgAA0B0Vcfc","s11SwiftSyntax013CodeBlockItemB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax013ExtensionDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax013ExtensionDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013InheritedTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax013InheritedTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013IsTypePatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax013IsTypePatternB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax013ObjcNamePieceB0VyACSgAA0B0Vcfc","s11SwiftSyntax013ObjcNamePieceB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax013PoundFileExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax013PoundFileExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax013PoundLineExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax013PoundLineExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax013StringSegmentB0VyACSgAA0B0Vcfc","s11SwiftSyntax013StringSegmentB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013SubscriptDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax013SubscriptDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013SubscriptExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax013SubscriptExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax013TypealiasDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax013TypealiasDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014AssignmentExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax014AssignmentExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014AttributedTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax014AttributedTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014DictionaryExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax014DictionaryExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014DictionaryTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax014DictionaryTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014ExpressionStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax014ExpressionStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014IdentifierExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax014IdentifierExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014IdentifierListB0VyACSgAA0B0Vcfc","s11SwiftSyntax014IfConfigClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax014IfConfigClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax014MemberDeclListB0VyACSgAA0B0Vcfc","s11SwiftSyntax014NilLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax014NilLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax014PatternBindingB0VyACSgAA0B0Vcfc","s11SwiftSyntax014PatternBindingB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014PoundErrorDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax014PoundErrorDeclB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax014SpecializeExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax014SpecializeExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014SwitchCaseListB0VyACSgAA0B0Vcfc","s11SwiftSyntax014TypeAnnotationB0VyACSgAA0B0Vcfc","s11SwiftSyntax014TypeAnnotationB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax014UnknownPatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax015CatchClauseListB0VyACSgAA0B0Vcfc","s11SwiftSyntax015CompositionTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax015CompositionTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015CustomAttributeB0VyACSgAA0B0Vcfc","s11SwiftSyntax015CustomAttributeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015DeclarationStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax015DeclarationStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015EnumCaseElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax015EnumCaseElementB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015EnumCasePatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax015EnumCasePatternB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015FallthroughStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax015FallthroughStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015ForcedValueExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax015ForcedValueExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015GenericArgumentB0VyACSgAA0B0Vcfc","s11SwiftSyntax015GenericArgumentB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015InitializerDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax015InitializerDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015KeyPathBaseExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax015KeyPathBaseExprB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax015MemberDeclBlockB0VyACSgAA0B0Vcfc","s11SwiftSyntax015MemberDeclBlockB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015ObjcKeyPathExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax015ObjcKeyPathExprB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax015OptionalPatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax015OptionalPatternB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015ParameterClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax015ParameterClauseB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax015PoundAssertStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax015PoundAssertStmtB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015PoundColumnExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax015PoundColumnExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015PoundFileIDExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax015PoundFileIDExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015RepeatWhileStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax015RepeatWhileStmtB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015SwitchCaseLabelB0VyACSgAA0B0Vcfc","s11SwiftSyntax015SwitchCaseLabelB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax015WildcardPatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax015WildcardPatternB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax016ArrayElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax016ClosureParamListB0VyACSgAA0B0Vcfc","s11SwiftSyntax016ClosureSignatureB0VyACSgAA0B0Vcfc","s11SwiftSyntax016ClosureSignatureB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax016ConditionElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax016ConditionElementB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax016DeclNameArgumentB0VyACSgAA0B0Vcfc","s11SwiftSyntax016DeclNameArgumentB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016FloatLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax016FloatLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016FunctionCallExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax016FunctionCallExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016FunctionDeclNameB0VyACSgAA0B0Vcfc","s11SwiftSyntax016FunctionDeclNameB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016GenericParameterB0VyACSgAA0B0Vcfc","s11SwiftSyntax016GenericParameterB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax016MemberAccessExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax016MemberAccessExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016ObjcSelectorExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax016ObjcSelectorExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016PostfixUnaryExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax016PostfixUnaryExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016PoundWarningDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax016PoundWarningDeclB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016RegexLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax016RegexLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016TupleExprElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax016TupleExprElementB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax016TupleTypeElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax016TupleTypeElementB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax017AccessorParameterB0VyACSgAA0B0Vcfc","s11SwiftSyntax017AccessorParameterB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017AvailabilityEntryB0VyACSgAA0B0Vcfc","s11SwiftSyntax017AvailabilityEntryB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017CodeBlockItemListB0VyACSgAA0B0Vcfc","s11SwiftSyntax017DeclNameArgumentsB0VyACSgAA0B0Vcfc","s11SwiftSyntax017DeclNameArgumentsB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax017DeinitializerDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax017DeinitializerDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017DictionaryElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax017DictionaryElementB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017ExpressionPatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax017ExpressionPatternB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017ExpressionSegmentB0VyACSgAA0B0Vcfc","s11SwiftSyntax017ExpressionSegmentB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017FunctionParameterB0VyACSgAA0B0Vcfc","s11SwiftSyntax017FunctionParameterB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017FunctionSignatureB0VyACSgAA0B0Vcfc","s11SwiftSyntax017FunctionSignatureB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017IdentifierPatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax017IdentifierPatternB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017InheritedTypeListB0VyACSgAA0B0Vcfc","s11SwiftSyntax017InitializerClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax017InitializerClauseB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax017NonEmptyTokenListB0VyACSgAA0B0Vcfc","s11SwiftSyntax017ObjCSelectorPieceB0VyACSgAA0B0Vcfc","s11SwiftSyntax017ObjCSelectorPieceB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax017ObjectLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax017ObjectLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax017PoundFilePathExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax017PoundFilePathExprB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax017PoundFunctionExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax017PoundFunctionExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax017QualifiedDeclNameB0VyACSgAA0B0Vcfc","s11SwiftSyntax017QualifiedDeclNameB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax017StringLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax017StringLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018AssociatedtypeDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax018AssociatedtypeDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax018BinaryOperatorExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax018BinaryOperatorExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018BooleanLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax018BooleanLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018ClosureCaptureItemB0VyACSgAA0B0Vcfc","s11SwiftSyntax018ClosureCaptureItemB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018ElseIfContinuationB0VyACSgAA0B0Vcfc","s11SwiftSyntax018ElseIfContinuationB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018GenericRequirementB0VyACSgAA0B0Vcfc","s11SwiftSyntax018GenericRequirementB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax018GenericWhereClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax018GenericWhereClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018IfConfigClauseListB0VyACSgAA0B0Vcfc","s11SwiftSyntax018IntegerLiteralExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax018IntegerLiteralExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018MemberDeclListItemB0VyACSgAA0B0Vcfc","s11SwiftSyntax018MemberDeclListItemB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax018PatternBindingListB0VyACSgAA0B0Vcfc","s11SwiftSyntax018PoundDsohandleExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax018PoundDsohandleExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018PrefixOperatorExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax018PrefixOperatorExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax018SwitchDefaultLabelB0VyACSgAA0B0Vcfc","s11SwiftSyntax018SwitchDefaultLabelB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019AccessLevelModifierB0VyACSgAA0B0Vcfc","s11SwiftSyntax019AccessLevelModifierB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019AccessPathComponentB0VyACSgAA0B0Vcfc","s11SwiftSyntax019AccessPathComponentB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019EnumCaseElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax019GenericArgumentListB0VyACSgAA0B0Vcfc","s11SwiftSyntax019PostfixIfConfigExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax019PostfixIfConfigExprB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax019PoundSourceLocationB0VyACSgAA0B0Vcfc","s11SwiftSyntax019PoundSourceLocationB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019PrecedenceGroupDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax019PrecedenceGroupDeclB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019SameTypeRequirementB0VyACSgAA0B0Vcfc","s11SwiftSyntax019SameTypeRequirementB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019TargetFunctionEntryB0VyACSgAA0B0Vcfc","s11SwiftSyntax019TargetFunctionEntryB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019TuplePatternElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax019TuplePatternElementB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax019ValueBindingPatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax019ValueBindingPatternB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax020AvailabilityArgumentB0VyACSgAA0B0Vcfc","s11SwiftSyntax020AvailabilityArgumentB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax020AvailabilitySpecListB0VyACSgAA0B0Vcfc","s11SwiftSyntax020ClassRestrictionTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax020ClassRestrictionTypeB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax020ConditionElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax020DeclNameArgumentListB0VyACSgAA0B0Vcfc","s11SwiftSyntax020GenericParameterListB0VyACSgAA0B0Vcfc","s11SwiftSyntax020MemberTypeIdentifierB0VyACSgAA0B0Vcfc","s11SwiftSyntax020MemberTypeIdentifierB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax020OptionalChainingExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax020OptionalChainingExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax020SimpleTypeIdentifierB0VyACSgAA0B0Vcfc","s11SwiftSyntax020SimpleTypeIdentifierB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax020TupleExprElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax020TupleTypeElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax021AvailabilityConditionB0VyACSgAA0B0Vcfc","s11SwiftSyntax021AvailabilityConditionB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax021DictionaryElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax021DiscardAssignmentExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax021DiscardAssignmentExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021EditorPlaceholderExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax021EditorPlaceholderExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021FunctionParameterListB0VyACSgAA0B0Vcfc","s11SwiftSyntax021GenericArgumentClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax021GenericArgumentClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021PrimaryAssociatedTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax021PrimaryAssociatedTypeB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021StringLiteralSegmentsB0VyACSgAA0B0Vcfc","s11SwiftSyntax021SymbolicReferenceExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax021SymbolicReferenceExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021TypeInheritanceClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax021TypeInheritanceClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021TypeInitializerClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax021TypeInitializerClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax021UnresolvedPatternExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax021UnresolvedPatternExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax022ClosureCaptureItemListB0VyACSgAA0B0Vcfc","s11SwiftSyntax022CompositionTypeElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax022CompositionTypeElementB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax022ConformanceRequirementB0VyACSgAA0B0Vcfc","s11SwiftSyntax022ConformanceRequirementB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax022DifferentiabilityParamB0VyACSgAA0B0Vcfc","s11SwiftSyntax022DifferentiabilityParamB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax022GenericParameterClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax022GenericParameterClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax022GenericRequirementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax022LabeledSpecializeEntryB0VyACSgAA0B0Vcfc","s11SwiftSyntax022LabeledSpecializeEntryB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax023ClosureCaptureSignatureB0VyACSgAA0B0Vcfc","s11SwiftSyntax023ClosureCaptureSignatureB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax023DifferentiabilityParamsB0VyACSgAA0B0Vcfc","s11SwiftSyntax023DifferentiabilityParamsB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax023PoundSourceLocationArgsB0VyACSgAA0B0Vcfc","s11SwiftSyntax023PoundSourceLocationArgsB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax023PrecedenceGroupNameListB0VyACSgAA0B0Vcfc","s11SwiftSyntax023PrecedenceGroupRelationB0VyACSgAA0B0Vcfc","s11SwiftSyntax023PrecedenceGroupRelationB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax023TuplePatternElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax023UnavailabilityConditionB0VyACSgAA0B0Vcfc","s11SwiftSyntax023UnavailabilityConditionB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax024MatchingPatternConditionB0VyACSgAA0B0Vcfc","s11SwiftSyntax024MatchingPatternConditionB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax024OptionalBindingConditionB0VyACSgAA0B0Vcfc","s11SwiftSyntax024OptionalBindingConditionB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax025PrecedenceGroupAssignmentB0VyACSgAA0B0Vcfc","s11SwiftSyntax025PrecedenceGroupAssignmentB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax025PrimaryAssociatedTypeListB0VyACSgAA0B0Vcfc","s11SwiftSyntax026CompositionTypeElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax026DifferentiabilityParamListB0VyACSgAA0B0Vcfc","s11SwiftSyntax026OperatorPrecedenceAndTypesB0VyACSgAA0B0Vcfc","s11SwiftSyntax026OperatorPrecedenceAndTypesB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax026PrecedenceGroupNameElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax026PrecedenceGroupNameElementB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax027AvailabilityLabeledArgumentB0VyACSgAA0B0Vcfc","s11SwiftSyntax027AvailabilityLabeledArgumentB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax027SpecializeAttributeSpecListB0VyACSgAA0B0Vcfc","s11SwiftSyntax028ImplementsAttributeArgumentsB0VyACSgAA0B0Vcfc","s11SwiftSyntax028ImplementsAttributeArgumentsB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax028NamedAttributeStringArgumentB0VyACSgAA0B0Vcfc","s11SwiftSyntax028NamedAttributeStringArgumentB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax028PrecedenceGroupAssociativityB0VyACSgAA0B0Vcfc","s11SwiftSyntax028PrecedenceGroupAssociativityB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax028PrecedenceGroupAttributeListB0VyACSgAA0B0Vcfc","s11SwiftSyntax029DifferentiabilityParamsClauseB0VyACSgAA0B0Vcfc","s11SwiftSyntax029DifferentiabilityParamsClauseB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax030AvailabilityVersionRestrictionB0VyACSgAA0B0Vcfc","s11SwiftSyntax030AvailabilityVersionRestrictionB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax030MultipleTrailingClosureElementB0VyACSgAA0B0Vcfc","s11SwiftSyntax030MultipleTrailingClosureElementB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax032DifferentiableAttributeArgumentsB0VyACSgAA0B0Vcfc","s11SwiftSyntax032DifferentiableAttributeArgumentsB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax034MultipleTrailingClosureElementListB0VyACSgAA0B0Vcfc","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0VyACSgAA0B0Vcfc","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0VyACyAA0cdefB7BuilderVzXEcfc","s11SwiftSyntax04DeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax04DeclB0VyACSgxSgcAA0cB8ProtocolRzlufc","s11SwiftSyntax04DeclB0VyACxcAA0cB8ProtocolRzlufc","s11SwiftSyntax04ExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax04ExprB0VyACSgxSgcAA0cB8ProtocolRzlufc","s11SwiftSyntax04ExprB0VyACxcAA0cB8ProtocolRzlufc","s11SwiftSyntax04StmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax04StmtB0VyACSgxSgcAA0cB8ProtocolRzlufc","s11SwiftSyntax04StmtB0VyACxcAA0cB8ProtocolRzlufc","s11SwiftSyntax04TypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax04TypeB0VyACSgxSgcAA0cB8ProtocolRzlufc","s11SwiftSyntax04TypeB0VyACxcAA0cB8ProtocolRzlufc","s11SwiftSyntax05TokenB0VyACSgAA0B0Vcfc","s11SwiftSyntax06AsExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax06AsExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax06DoStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax06DoStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax06IfStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax06IfStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax06IsExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax06IsExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax07PatternB0VyACSgAA0B0Vcfc","s11SwiftSyntax07PatternB0VyACSgxSgcAA0cB8ProtocolRzlufc","s11SwiftSyntax07PatternB0VyACxcAA0cB8ProtocolRzlufc","s11SwiftSyntax07TryExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax07TryExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax07UnknownB0VyACSgAA0B0Vcfc","s11SwiftSyntax08CaseItemB0VyACSgAA0B0Vcfc","s11SwiftSyntax08CaseItemB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax08DeclNameB0VyACSgAA0B0Vcfc","s11SwiftSyntax08DeclNameB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax08EnumDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax08EnumDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax08ExprListB0VyACSgAA0B0Vcfc","s11SwiftSyntax08ObjcNameB0VyACSgAA0B0Vcfc","s11SwiftSyntax08SomeTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax08SomeTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax08TypeExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax08TypeExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09ArrayExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ArrayExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09ArrayTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ArrayTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09ArrowExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ArrowExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09AttributeB0VyACSgAA0B0Vcfc","s11SwiftSyntax09AttributeB0VyACyAA0cB7BuilderVzXEcfc","s11SwiftSyntax09AwaitExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax09AwaitExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09BreakStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09BreakStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09CatchItemB0VyACSgAA0B0Vcfc","s11SwiftSyntax09CatchItemB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09ClassDeclB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ClassDeclB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09CodeBlockB0VyACSgAA0B0Vcfc","s11SwiftSyntax09CodeBlockB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09DeferStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09DeferStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09ElseBlockB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ElseBlockB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09ForInStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ForInStmtB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax09GuardStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09GuardStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09InOutExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax09InOutExprB0VyACyAA0cdeB7BuilderVzXEcfc","s11SwiftSyntax09ThrowStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09ThrowStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09TokenListB0VyACSgAA0B0Vcfc","s11SwiftSyntax09TupleExprB0VyACSgAA0B0Vcfc","s11SwiftSyntax09TupleExprB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09TupleTypeB0VyACSgAA0B0Vcfc","s11SwiftSyntax09TupleTypeB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09WhileStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09WhileStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09YieldListB0VyACSgAA0B0Vcfc","s11SwiftSyntax09YieldListB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax09YieldStmtB0VyACSgAA0B0Vcfc","s11SwiftSyntax09YieldStmtB0VyACyAA0cdB7BuilderVzXEcfc","s11SwiftSyntax0B0V12fromProtocolACSgAA0bD0_pSg_tcfc","s11SwiftSyntax0B0V12fromProtocolAcA0bD0_p_tcfc","s11SwiftSyntax0B0VyACSgxSgcAA0B8ProtocolRzlufc","s11SwiftSyntax0B0VyACxcAA0B8ProtocolRzlufc","s11SwiftSyntax0B13ChildrenIndexV10nilLiteralACyt_tcfc","s11SwiftSyntax0B15ClassificationsV_2inAcA0B0V_AA15ByteSourceRangeVtcfc","s11SwiftSyntax0B7VisitorCACycfc","s11SwiftSyntax0B8ProtocolPyxSgAA0B0Vcfc","s11SwiftSyntax0B8RewriterCACycfc","s11SwiftSyntax10SourceEditV5range17replacementLengthAcA04ByteC5RangeV_Sitcfc","s11SwiftSyntax10SourceEditV6offset6length17replacementLengthACSi_S2itcfc","s11SwiftSyntax11SourceRangeV4fromACs7Decoder_p_tKcfc","s11SwiftSyntax11SourceRangeV5start3endAcA0C8LocationV_AGtcfc","s11SwiftSyntax12SourceLengthV04utf8D0ACSi_tcfc","s11SwiftSyntax12SourceLengthV2ofACSS_tcfc","s11SwiftSyntax13TokenSequenceVyAcA0B0Vcfc","s11SwiftSyntax14SourceLocationV4fromACs7Decoder_p_tKcfc","s11SwiftSyntax14SourceLocationV4line6column6offset4fileACSi_S2iSStcfc","s11SwiftSyntax14SourceLocationV6offset9converterACSi_AA0cD9ConverterCSgtcfc","s11SwiftSyntax14SourcePresenceO8rawValueACSgSS_tcfc","s11SwiftSyntax15ByteSourceRangeV6offset6lengthACSi_Sitcfc","s11SwiftSyntax15ConcurrentEditsV10concurrentACSayAA10SourceEditVG_tKcfc","s11SwiftSyntax15ConcurrentEditsV14fromSequentialACSayAA10SourceEditVG_tcfc","s11SwiftSyntax15ConcurrentEditsVyAcA10SourceEditVcfc","s11SwiftSyntax16AbsolutePositionV10utf8OffsetACSi_tcfc","s11SwiftSyntax21ReversedTokenSequenceVyAcA0B0Vcfc","s11SwiftSyntax22IncrementalParseLookupV10transitionAcA0cD10TransitionC_tcfc","s11SwiftSyntax23SourceLocationConverterC4file4treeACSS_AA0c4FileB0Vtcfc","s11SwiftSyntax23SourceLocationConverterC4file6sourceACSS_SStcfc","s11SwiftSyntax26IncrementalParseTransitionC12previousTree5edits18reusedNodeDelegateAcA010SourceFileB0V_AA15ConcurrentEditsVAA0cd6ReusedjK0_pSgtcfc","s11SwiftSyntax26IncrementalParseTransitionC12previousTree5edits18reusedNodeDelegateAcA010SourceFileB0V_SayAA0L4EditVGAA0cd6ReusedjK0_pSgtcfc","s11SwiftSyntax35IncrementalParseReusedNodeCollectorCACycfc","s11SwiftSyntax6TriviaV12arrayLiteralAcA0C5PieceOd_tcfc","s11SwiftSyntax6TriviaV6piecesACSayAA0C5PieceOG_tcfc","s11SwiftSyntax010AccessPathB0VyAA0cd9ComponentB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax012AccessorListB0VyAA0c4DeclB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax012CaseItemListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax012ModifierListB0VyAA04DeclcB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax012ObjCSelectorB0VyAA0cd5PieceB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax013AttributeListB0VyAA0B0VAA0B13ChildrenIndexVcip","s11SwiftSyntax013CatchItemListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax014IdentifierListB0VyAA05TokenB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax014MemberDeclListB0VyAA0cde4ItemB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax014SwitchCaseListB0VyAA0B0VAA0B13ChildrenIndexVcip","s11SwiftSyntax015CatchClauseListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax016ArrayElementListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax016ClosureParamListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax017CodeBlockItemListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax017InheritedTypeListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax017NonEmptyTokenListB0VyAA0eB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax018IfConfigClauseListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax018PatternBindingListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax019EnumCaseElementListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax019GenericArgumentListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax020AvailabilitySpecListB0VyAA0c8ArgumentB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax020ConditionElementListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax020DeclNameArgumentListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax020GenericParameterListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax020TupleExprElementListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax020TupleTypeElementListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax021DictionaryElementListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax021FunctionParameterListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax021StringLiteralSegmentsB0VyAA0B0VAA0B13ChildrenIndexVcip","s11SwiftSyntax022ClosureCaptureItemListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax022GenericRequirementListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax023PrecedenceGroupNameListB0VyAA0cde7ElementB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax023TuplePatternElementListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax025PrimaryAssociatedTypeListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax026CompositionTypeElementListB0VyAA0cdeB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax026DifferentiabilityParamListB0VyAA0cdB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax027SpecializeAttributeSpecListB0VyAA0B0VAA0B13ChildrenIndexVcip","s11SwiftSyntax028PrecedenceGroupAttributeListB0VyAA0B0VAA0B13ChildrenIndexVcip","s11SwiftSyntax034MultipleTrailingClosureElementListB0VyAA0cdefB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax08ExprListB0VyAA0cB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax08ObjcNameB0VyAA0cd5PieceB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax09TokenListB0VyAA0cB0VAA0B13ChildrenIndexVcip","s11SwiftSyntax0B8ChildrenVyAA0B0VAA0bC5IndexVcip","s11SwiftSyntax6TriviaVyAA0C5PieceOSicip","s11SwiftSyntax12SourceLengthV4zeroACvpZ","s11SwiftSyntax6TriviaV4zeroACvpZ","s11SwiftSyntax010AccessPathB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax010AccessPathB0V12customMirrors0F0Vvp","s11SwiftSyntax010AccessPathB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax010AccessPathB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010AccessPathB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax010AccessPathB0V5countSivp","s11SwiftSyntax010AccessPathB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax010ImportDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax010ImportDeclB0V10importKindAA05TokenB0VSgvp","s11SwiftSyntax010ImportDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax010ImportDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010ImportDeclB0V4pathAA010AccessPathB0Vvp","s11SwiftSyntax010ImportDeclB0V9importTokAA05TokenB0Vvp","s11SwiftSyntax010ImportDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax010ReturnStmtB0V10expressionAA04ExprB0VSgvp","s11SwiftSyntax010ReturnStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax010ReturnStmtB0V13returnKeywordAA05TokenB0Vvp","s11SwiftSyntax010ReturnStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010SourceFileB0V10statementsAA017CodeBlockItemListB0Vvp","s11SwiftSyntax010SourceFileB0V12customMirrors0F0Vvp","s11SwiftSyntax010SourceFileB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010SourceFileB0V8eofTokenAA0fB0Vvp","s11SwiftSyntax010StructDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax010StructDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax010StructDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax010StructDeclB0V13structKeywordAA05TokenB0Vvp","s11SwiftSyntax010StructDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010StructDeclB0V17inheritanceClauseAA015TypeInheritancefB0VSgvp","s11SwiftSyntax010StructDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax010StructDeclB0V22genericParameterClauseAA07GenericfgB0VSgvp","s11SwiftSyntax010StructDeclB0V7membersAA06Memberd5BlockB0Vvp","s11SwiftSyntax010StructDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax010SwitchCaseB0V10statementsAA017CodeBlockItemListB0Vvp","s11SwiftSyntax010SwitchCaseB0V11unknownAttrAA09AttributeB0VSgvp","s11SwiftSyntax010SwitchCaseB0V12customMirrors0F0Vvp","s11SwiftSyntax010SwitchCaseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010SwitchCaseB0V5labelAA0B0Vvp","s11SwiftSyntax010SwitchStmtB0V10expressionAA04ExprB0Vvp","s11SwiftSyntax010SwitchStmtB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax010SwitchStmtB0V10rightBraceAA05TokenB0Vvp","s11SwiftSyntax010SwitchStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax010SwitchStmtB0V13switchKeywordAA05TokenB0Vvp","s11SwiftSyntax010SwitchStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax010SwitchStmtB0V5casesAA0c8CaseListB0Vvp","s11SwiftSyntax010SwitchStmtB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax010SwitchStmtB0V9leftBraceAA05TokenB0Vvp","s11SwiftSyntax011CatchClauseB0V10catchItemsAA0c8ItemListB0VSgvp","s11SwiftSyntax011CatchClauseB0V12catchKeywordAA05TokenB0Vvp","s11SwiftSyntax011CatchClauseB0V12customMirrors0F0Vvp","s11SwiftSyntax011CatchClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011CatchClauseB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax011ClosureExprB0V10rightBraceAA05TokenB0Vvp","s11SwiftSyntax011ClosureExprB0V10statementsAA017CodeBlockItemListB0Vvp","s11SwiftSyntax011ClosureExprB0V12customMirrors0F0Vvp","s11SwiftSyntax011ClosureExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011ClosureExprB0V9leftBraceAA05TokenB0Vvp","s11SwiftSyntax011ClosureExprB0V9signatureAA0c9SignatureB0VSgvp","s11SwiftSyntax011KeyPathExprB0V04rootE0AA0eB0VSgvp","s11SwiftSyntax011KeyPathExprB0V10expressionAA0eB0Vvp","s11SwiftSyntax011KeyPathExprB0V12customMirrors0G0Vvp","s11SwiftSyntax011KeyPathExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011KeyPathExprB0V9backslashAA05TokenB0Vvp","s11SwiftSyntax011TernaryExprB0V11firstChoiceAA0dB0Vvp","s11SwiftSyntax011TernaryExprB0V12customMirrors0F0Vvp","s11SwiftSyntax011TernaryExprB0V12questionMarkAA05TokenB0Vvp","s11SwiftSyntax011TernaryExprB0V12secondChoiceAA0dB0Vvp","s11SwiftSyntax011TernaryExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011TernaryExprB0V19conditionExpressionAA0dB0Vvp","s11SwiftSyntax011TernaryExprB0V9colonMarkAA05TokenB0Vvp","s11SwiftSyntax011UnknownDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax011UnknownDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011UnknownExprB0V12customMirrors0F0Vvp","s11SwiftSyntax011UnknownExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011UnknownStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax011UnknownStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax011UnknownTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax011UnknownTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax011WhereClauseB0V11guardResultAA04ExprB0Vvp","s11SwiftSyntax011WhereClauseB0V12customMirrors0F0Vvp","s11SwiftSyntax011WhereClauseB0V12whereKeywordAA05TokenB0Vvp","s11SwiftSyntax011WhereClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012AccessorDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax012AccessorDeclB0V12accessorKindAA05TokenB0Vvp","s11SwiftSyntax012AccessorDeclB0V12asyncKeywordAA05TokenB0VSgvp","s11SwiftSyntax012AccessorDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax012AccessorDeclB0V13throwsKeywordAA05TokenB0VSgvp","s11SwiftSyntax012AccessorDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012AccessorDeclB0V4bodyAA09CodeBlockB0VSgvp","s11SwiftSyntax012AccessorDeclB0V8modifierAA0d8ModifierB0VSgvp","s11SwiftSyntax012AccessorDeclB0V9parameterAA0c9ParameterB0VSgvp","s11SwiftSyntax012AccessorListB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax012AccessorListB0V12customMirrors0F0Vvp","s11SwiftSyntax012AccessorListB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax012AccessorListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012AccessorListB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax012AccessorListB0V5countSivp","s11SwiftSyntax012AccessorListB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax012ArrayElementB0V10expressionAA04ExprB0Vvp","s11SwiftSyntax012ArrayElementB0V12customMirrors0F0Vvp","s11SwiftSyntax012ArrayElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax012ArrayElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012CaseItemListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax012CaseItemListB0V12customMirrors0G0Vvp","s11SwiftSyntax012CaseItemListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax012CaseItemListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012CaseItemListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax012CaseItemListB0V5countSivp","s11SwiftSyntax012CaseItemListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax012ClosureParamB0V12customMirrors0F0Vvp","s11SwiftSyntax012ClosureParamB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax012ClosureParamB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012ClosureParamB0V4nameAA05TokenB0Vvp","s11SwiftSyntax012ContinueStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax012ContinueStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012ContinueStmtB0V15continueKeywordAA05TokenB0Vvp","s11SwiftSyntax012ContinueStmtB0V5labelAA05TokenB0VSgvp","s11SwiftSyntax012DeclModifierB0V12customMirrors0F0Vvp","s11SwiftSyntax012DeclModifierB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012DeclModifierB0V15detailLeftParenAA05TokenB0VSgvp","s11SwiftSyntax012DeclModifierB0V16detailRightParenAA05TokenB0VSgvp","s11SwiftSyntax012DeclModifierB0V4nameAA05TokenB0Vvp","s11SwiftSyntax012DeclModifierB0V6detailAA05TokenB0VSgvp","s11SwiftSyntax012EnumCaseDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax012EnumCaseDeclB0V11caseKeywordAA05TokenB0Vvp","s11SwiftSyntax012EnumCaseDeclB0V12customMirrors0G0Vvp","s11SwiftSyntax012EnumCaseDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012EnumCaseDeclB0V8elementsAA0cd11ElementListB0Vvp","s11SwiftSyntax012EnumCaseDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax012FunctionDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax012FunctionDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax012FunctionDeclB0V11funcKeywordAA05TokenB0Vvp","s11SwiftSyntax012FunctionDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax012FunctionDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012FunctionDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax012FunctionDeclB0V22genericParameterClauseAA07GenericfgB0VSgvp","s11SwiftSyntax012FunctionDeclB0V4bodyAA09CodeBlockB0VSgvp","s11SwiftSyntax012FunctionDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax012FunctionDeclB0V9signatureAA0c9SignatureB0Vvp","s11SwiftSyntax012FunctionTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax012FunctionTypeB0V06returnD0AA0dB0Vvp","s11SwiftSyntax012FunctionTypeB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax012FunctionTypeB0V12asyncKeywordAA05TokenB0VSgvp","s11SwiftSyntax012FunctionTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax012FunctionTypeB0V23throwsOrRethrowsKeywordAA05TokenB0VSgvp","s11SwiftSyntax012FunctionTypeB0V5arrowAA05TokenB0Vvp","s11SwiftSyntax012FunctionTypeB0V9argumentsAA05Tupled11ElementListB0Vvp","s11SwiftSyntax012FunctionTypeB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax012IfConfigDeclB0V10poundEndifAA05TokenB0Vvp","s11SwiftSyntax012IfConfigDeclB0V12customMirrors0G0Vvp","s11SwiftSyntax012IfConfigDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012IfConfigDeclB0V7clausesAA0cd10ClauseListB0Vvp","s11SwiftSyntax012MetatypeTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax012MetatypeTypeB0V04baseD0AA0dB0Vvp","s11SwiftSyntax012MetatypeTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax012MetatypeTypeB0V14typeOrProtocolAA05TokenB0Vvp","s11SwiftSyntax012MetatypeTypeB0V6periodAA05TokenB0Vvp","s11SwiftSyntax012ModifierListB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax012ModifierListB0V12customMirrors0F0Vvp","s11SwiftSyntax012ModifierListB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax012ModifierListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012ModifierListB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax012ModifierListB0V5countSivp","s11SwiftSyntax012ModifierListB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax012ObjCSelectorB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax012ObjCSelectorB0V12customMirrors0F0Vvp","s11SwiftSyntax012ObjCSelectorB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax012ObjCSelectorB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012ObjCSelectorB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax012ObjCSelectorB0V5countSivp","s11SwiftSyntax012ObjCSelectorB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax012OperatorDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax012OperatorDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax012OperatorDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax012OperatorDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012OperatorDeclB0V15operatorKeywordAA05TokenB0Vvp","s11SwiftSyntax012OperatorDeclB0V26operatorPrecedenceAndTypesAA0cfghB0VSgvp","s11SwiftSyntax012OperatorDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax012OptionalTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax012OptionalTypeB0V07wrappedD0AA0dB0Vvp","s11SwiftSyntax012OptionalTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax012OptionalTypeB0V12questionMarkAA05TokenB0Vvp","s11SwiftSyntax012ProtocolDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax012ProtocolDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax012ProtocolDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax012ProtocolDeclB0V14syntaxNodeTypeAA0bC0_pXpvp","s11SwiftSyntax012ProtocolDeclB0V15protocolKeywordAA05TokenB0Vvp","s11SwiftSyntax012ProtocolDeclB0V17inheritanceClauseAA015TypeInheritancefB0VSgvp","s11SwiftSyntax012ProtocolDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax012ProtocolDeclB0V7membersAA06Memberd5BlockB0Vvp","s11SwiftSyntax012ProtocolDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax012ReturnClauseB0V10returnTypeAA0fB0Vvp","s11SwiftSyntax012ReturnClauseB0V12customMirrors0F0Vvp","s11SwiftSyntax012ReturnClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012ReturnClauseB0V5arrowAA05TokenB0Vvp","s11SwiftSyntax012SequenceExprB0V12customMirrors0F0Vvp","s11SwiftSyntax012SequenceExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012SequenceExprB0V8elementsAA0d4ListB0Vvp","s11SwiftSyntax012SuperRefExprB0V12customMirrors0G0Vvp","s11SwiftSyntax012SuperRefExprB0V12superKeywordAA05TokenB0Vvp","s11SwiftSyntax012SuperRefExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012TuplePatternB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax012TuplePatternB0V12customMirrors0F0Vvp","s11SwiftSyntax012TuplePatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012TuplePatternB0V8elementsAA0cd11ElementListB0Vvp","s11SwiftSyntax012TuplePatternB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax012VariableDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax012VariableDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax012VariableDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax012VariableDeclB0V15letOrVarKeywordAA05TokenB0Vvp","s11SwiftSyntax012VariableDeclB0V8bindingsAA018PatternBindingListB0Vvp","s11SwiftSyntax012VariableDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax012VersionTupleB0V05patchC0AA05TokenB0VSgvp","s11SwiftSyntax012VersionTupleB0V10majorMinorAA0B0Vvp","s11SwiftSyntax012VersionTupleB0V11patchPeriodAA05TokenB0VSgvp","s11SwiftSyntax012VersionTupleB0V12customMirrors0F0Vvp","s11SwiftSyntax012VersionTupleB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013AccessorBlockB0V10rightBraceAA05TokenB0Vvp","s11SwiftSyntax013AccessorBlockB0V12customMirrors0F0Vvp","s11SwiftSyntax013AccessorBlockB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013AccessorBlockB0V9accessorsAA0c4ListB0Vvp","s11SwiftSyntax013AccessorBlockB0V9leftBraceAA05TokenB0Vvp","s11SwiftSyntax013AsTypePatternB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax013AsTypePatternB0V12customMirrors0G0Vvp","s11SwiftSyntax013AsTypePatternB0V4typeAA0dB0Vvp","s11SwiftSyntax013AsTypePatternB0V7patternAA0eB0Vvp","s11SwiftSyntax013AsTypePatternB0V9asKeywordAA05TokenB0Vvp","s11SwiftSyntax013AttributeListB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax013AttributeListB0V12customMirrors0F0Vvp","s11SwiftSyntax013AttributeListB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax013AttributeListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013AttributeListB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax013AttributeListB0V5countSivp","s11SwiftSyntax013AttributeListB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax013CatchItemListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax013CatchItemListB0V12customMirrors0G0Vvp","s11SwiftSyntax013CatchItemListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax013CatchItemListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013CatchItemListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax013CatchItemListB0V5countSivp","s11SwiftSyntax013CatchItemListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax013CodeBlockItemB0V11errorTokensAA0B0VSgvp","s11SwiftSyntax013CodeBlockItemB0V12customMirrors0G0Vvp","s11SwiftSyntax013CodeBlockItemB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013CodeBlockItemB0V4itemAA0B0Vvp","s11SwiftSyntax013CodeBlockItemB0V9semicolonAA05TokenB0VSgvp","s11SwiftSyntax013ExtensionDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax013ExtensionDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax013ExtensionDeclB0V12extendedTypeAA0fB0Vvp","s11SwiftSyntax013ExtensionDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013ExtensionDeclB0V16extensionKeywordAA05TokenB0Vvp","s11SwiftSyntax013ExtensionDeclB0V17inheritanceClauseAA015TypeInheritancefB0VSgvp","s11SwiftSyntax013ExtensionDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax013ExtensionDeclB0V7membersAA06Memberd5BlockB0Vvp","s11SwiftSyntax013ExtensionDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax013InheritedTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax013InheritedTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax013InheritedTypeB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax013InheritedTypeB0V8typeNameAA0dB0Vvp","s11SwiftSyntax013IsTypePatternB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax013IsTypePatternB0V12customMirrors0G0Vvp","s11SwiftSyntax013IsTypePatternB0V4typeAA0dB0Vvp","s11SwiftSyntax013IsTypePatternB0V9isKeywordAA05TokenB0Vvp","s11SwiftSyntax013ObjcNamePieceB0V12customMirrors0G0Vvp","s11SwiftSyntax013ObjcNamePieceB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013ObjcNamePieceB0V3dotAA05TokenB0VSgvp","s11SwiftSyntax013ObjcNamePieceB0V4nameAA05TokenB0Vvp","s11SwiftSyntax013ParenthesizedB0P10rightParenAA05TokenB0Vvp","s11SwiftSyntax013ParenthesizedB0P9leftParenAA05TokenB0Vvp","s11SwiftSyntax013PoundFileExprB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax013PoundFileExprB0V12customMirrors0G0Vvp","s11SwiftSyntax013PoundFileExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013PoundLineExprB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax013PoundLineExprB0V12customMirrors0G0Vvp","s11SwiftSyntax013PoundLineExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013StringSegmentB0V12customMirrors0F0Vvp","s11SwiftSyntax013StringSegmentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013StringSegmentB0V7contentAA05TokenB0Vvp","s11SwiftSyntax013SubscriptDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax013SubscriptDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax013SubscriptDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013SubscriptDeclB0V16subscriptKeywordAA05TokenB0Vvp","s11SwiftSyntax013SubscriptDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax013SubscriptDeclB0V22genericParameterClauseAA07GenericfgB0VSgvp","s11SwiftSyntax013SubscriptDeclB0V6resultAA012ReturnClauseB0Vvp","s11SwiftSyntax013SubscriptDeclB0V7indicesAA015ParameterClauseB0Vvp","s11SwiftSyntax013SubscriptDeclB0V8accessorAA0B0VSgvp","s11SwiftSyntax013SubscriptDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax013SubscriptExprB0V11leftBracketAA05TokenB0Vvp","s11SwiftSyntax013SubscriptExprB0V12argumentListAA05Tupled7ElementfB0Vvp","s11SwiftSyntax013SubscriptExprB0V12customMirrors0F0Vvp","s11SwiftSyntax013SubscriptExprB0V12rightBracketAA05TokenB0Vvp","s11SwiftSyntax013SubscriptExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013SubscriptExprB0V15trailingClosureAA0fdB0VSgvp","s11SwiftSyntax013SubscriptExprB0V16calledExpressionAA0dB0Vvp","s11SwiftSyntax013SubscriptExprB0V26additionalTrailingClosuresAA08Multiplef18ClosureElementListB0VSgvp","s11SwiftSyntax013TypealiasDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax013TypealiasDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax013TypealiasDeclB0V11initializerAA021TypeInitializerClauseB0VSgvp","s11SwiftSyntax013TypealiasDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax013TypealiasDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax013TypealiasDeclB0V16typealiasKeywordAA05TokenB0Vvp","s11SwiftSyntax013TypealiasDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax013TypealiasDeclB0V22genericParameterClauseAA07GenericfgB0VSgvp","s11SwiftSyntax013TypealiasDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax013WithCodeBlockB0P4bodyAA0deB0Vvp","s11SwiftSyntax014AssignmentExprB0V11assignTokenAA0fB0Vvp","s11SwiftSyntax014AssignmentExprB0V12customMirrors0F0Vvp","s11SwiftSyntax014AssignmentExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014AttributedTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax014AttributedTypeB0V04baseD0AA0dB0Vvp","s11SwiftSyntax014AttributedTypeB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax014AttributedTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax014AttributedTypeB0V9specifierAA05TokenB0VSgvp","s11SwiftSyntax014DictionaryExprB0V10leftSquareAA05TokenB0Vvp","s11SwiftSyntax014DictionaryExprB0V11rightSquareAA05TokenB0Vvp","s11SwiftSyntax014DictionaryExprB0V12customMirrors0F0Vvp","s11SwiftSyntax014DictionaryExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014DictionaryExprB0V7contentAA0B0Vvp","s11SwiftSyntax014DictionaryTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax014DictionaryTypeB0V03keyD0AA0dB0Vvp","s11SwiftSyntax014DictionaryTypeB0V05valueD0AA0dB0Vvp","s11SwiftSyntax014DictionaryTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax014DictionaryTypeB0V17leftSquareBracketAA05TokenB0Vvp","s11SwiftSyntax014DictionaryTypeB0V18rightSquareBracketAA05TokenB0Vvp","s11SwiftSyntax014DictionaryTypeB0V5colonAA05TokenB0Vvp","s11SwiftSyntax014ExpressionStmtB0V10expressionAA04ExprB0Vvp","s11SwiftSyntax014ExpressionStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax014ExpressionStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014IdentifiedDeclB0P10identifierAA05TokenB0Vvp","s11SwiftSyntax014IdentifierExprB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax014IdentifierExprB0V12customMirrors0F0Vvp","s11SwiftSyntax014IdentifierExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014IdentifierExprB0V17declNameArgumentsAA04DeclfgB0VSgvp","s11SwiftSyntax014IdentifierListB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax014IdentifierListB0V12customMirrors0F0Vvp","s11SwiftSyntax014IdentifierListB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax014IdentifierListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014IdentifierListB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax014IdentifierListB0V5countSivp","s11SwiftSyntax014IdentifierListB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax014IfConfigClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax014IfConfigClauseB0V12poundKeywordAA05TokenB0Vvp","s11SwiftSyntax014IfConfigClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014IfConfigClauseB0V8elementsAA0B0Vvp","s11SwiftSyntax014IfConfigClauseB0V9conditionAA04ExprB0VSgvp","s11SwiftSyntax014MemberDeclListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax014MemberDeclListB0V12customMirrors0G0Vvp","s11SwiftSyntax014MemberDeclListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax014MemberDeclListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014MemberDeclListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax014MemberDeclListB0V5countSivp","s11SwiftSyntax014MemberDeclListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax014NilLiteralExprB0V10nilKeywordAA05TokenB0Vvp","s11SwiftSyntax014NilLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax014NilLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014PatternBindingB0V11initializerAA017InitializerClauseB0VSgvp","s11SwiftSyntax014PatternBindingB0V12customMirrors0F0Vvp","s11SwiftSyntax014PatternBindingB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax014PatternBindingB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014PatternBindingB0V14typeAnnotationAA04TypefB0VSgvp","s11SwiftSyntax014PatternBindingB0V7patternAA0cB0Vvp","s11SwiftSyntax014PatternBindingB0V8accessorAA0B0VSgvp","s11SwiftSyntax014PoundErrorDeclB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax014PoundErrorDeclB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax014PoundErrorDeclB0V12customMirrors0G0Vvp","s11SwiftSyntax014PoundErrorDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014PoundErrorDeclB0V7messageAA017StringLiteralExprB0Vvp","s11SwiftSyntax014PoundErrorDeclB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax014SpecializeExprB0V10expressionAA0dB0Vvp","s11SwiftSyntax014SpecializeExprB0V12customMirrors0F0Vvp","s11SwiftSyntax014SpecializeExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014SpecializeExprB0V21genericArgumentClauseAA07GenericfgB0Vvp","s11SwiftSyntax014SwitchCaseListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax014SwitchCaseListB0V12customMirrors0G0Vvp","s11SwiftSyntax014SwitchCaseListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax014SwitchCaseListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014SwitchCaseListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax014SwitchCaseListB0V5countSivp","s11SwiftSyntax014SwitchCaseListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax014TypeAnnotationB0V010syntaxNodeC0AA0B8Protocol_pXpvp","s11SwiftSyntax014TypeAnnotationB0V12customMirrors0F0Vvp","s11SwiftSyntax014TypeAnnotationB0V4typeAA0cB0Vvp","s11SwiftSyntax014TypeAnnotationB0V5colonAA05TokenB0Vvp","s11SwiftSyntax014UnknownPatternB0V12customMirrors0F0Vvp","s11SwiftSyntax014UnknownPatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax014WithStatementsB0P10statementsAA017CodeBlockItemListB0Vvp","s11SwiftSyntax015CatchClauseListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax015CatchClauseListB0V12customMirrors0G0Vvp","s11SwiftSyntax015CatchClauseListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax015CatchClauseListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015CatchClauseListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax015CatchClauseListB0V5countSivp","s11SwiftSyntax015CatchClauseListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax015CompositionTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax015CompositionTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax015CompositionTypeB0V8elementsAA0cd11ElementListB0Vvp","s11SwiftSyntax015CustomAttributeB0V10rightParenAA05TokenB0VSgvp","s11SwiftSyntax015CustomAttributeB0V11atSignTokenAA0gB0Vvp","s11SwiftSyntax015CustomAttributeB0V12argumentListAA016TupleExprElementfB0VSgvp","s11SwiftSyntax015CustomAttributeB0V12customMirrors0F0Vvp","s11SwiftSyntax015CustomAttributeB0V13attributeNameAA04TypeB0Vvp","s11SwiftSyntax015CustomAttributeB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015CustomAttributeB0V9leftParenAA05TokenB0VSgvp","s11SwiftSyntax015DeclarationStmtB0V11declarationAA04DeclB0Vvp","s11SwiftSyntax015DeclarationStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax015DeclarationStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015EnumCaseElementB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax015EnumCaseElementB0V12customMirrors0G0Vvp","s11SwiftSyntax015EnumCaseElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax015EnumCaseElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015EnumCaseElementB0V15associatedValueAA015ParameterClauseB0VSgvp","s11SwiftSyntax015EnumCaseElementB0V8rawValueAA017InitializerClauseB0VSgvp","s11SwiftSyntax015EnumCasePatternB0V12customMirrors0G0Vvp","s11SwiftSyntax015EnumCasePatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015EnumCasePatternB0V15associatedTupleAA0geB0VSgvp","s11SwiftSyntax015EnumCasePatternB0V4typeAA04TypeB0VSgvp","s11SwiftSyntax015EnumCasePatternB0V6periodAA05TokenB0Vvp","s11SwiftSyntax015EnumCasePatternB0V8caseNameAA05TokenB0Vvp","s11SwiftSyntax015FallthroughStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax015FallthroughStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015FallthroughStmtB0V18fallthroughKeywordAA05TokenB0Vvp","s11SwiftSyntax015ForcedValueExprB0V10expressionAA0eB0Vvp","s11SwiftSyntax015ForcedValueExprB0V12customMirrors0G0Vvp","s11SwiftSyntax015ForcedValueExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015ForcedValueExprB0V15exclamationMarkAA05TokenB0Vvp","s11SwiftSyntax015GenericArgumentB0V12argumentTypeAA0fB0Vvp","s11SwiftSyntax015GenericArgumentB0V12customMirrors0F0Vvp","s11SwiftSyntax015GenericArgumentB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax015GenericArgumentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015InitializerDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax015InitializerDeclB0V10parametersAA015ParameterClauseB0Vvp","s11SwiftSyntax015InitializerDeclB0V11initKeywordAA05TokenB0Vvp","s11SwiftSyntax015InitializerDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax015InitializerDeclB0V12optionalMarkAA05TokenB0VSgvp","s11SwiftSyntax015InitializerDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015InitializerDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax015InitializerDeclB0V22genericParameterClauseAA07GenericfgB0VSgvp","s11SwiftSyntax015InitializerDeclB0V23throwsOrRethrowsKeywordAA05TokenB0VSgvp","s11SwiftSyntax015InitializerDeclB0V4bodyAA09CodeBlockB0VSgvp","s11SwiftSyntax015InitializerDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax015KeyPathBaseExprB0V12customMirrors0H0Vvp","s11SwiftSyntax015KeyPathBaseExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015KeyPathBaseExprB0V6periodAA05TokenB0Vvp","s11SwiftSyntax015MemberDeclBlockB0V10rightBraceAA05TokenB0Vvp","s11SwiftSyntax015MemberDeclBlockB0V12customMirrors0G0Vvp","s11SwiftSyntax015MemberDeclBlockB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015MemberDeclBlockB0V7membersAA0cd4ListB0Vvp","s11SwiftSyntax015MemberDeclBlockB0V9leftBraceAA05TokenB0Vvp","s11SwiftSyntax015ObjcKeyPathExprB0V03keyE0AA05TokenB0Vvp","s11SwiftSyntax015ObjcKeyPathExprB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax015ObjcKeyPathExprB0V12customMirrors0H0Vvp","s11SwiftSyntax015ObjcKeyPathExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015ObjcKeyPathExprB0V4nameAA0c4NameB0Vvp","s11SwiftSyntax015ObjcKeyPathExprB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax015OptionalPatternB0V03subD0AA0dB0Vvp","s11SwiftSyntax015OptionalPatternB0V12customMirrors0F0Vvp","s11SwiftSyntax015OptionalPatternB0V12questionMarkAA05TokenB0Vvp","s11SwiftSyntax015OptionalPatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015ParameterClauseB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax015ParameterClauseB0V12customMirrors0F0Vvp","s11SwiftSyntax015ParameterClauseB0V13parameterListAA08FunctioncfB0Vvp","s11SwiftSyntax015ParameterClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015ParameterClauseB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax015PoundAssertStmtB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax015PoundAssertStmtB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax015PoundAssertStmtB0V12customMirrors0G0Vvp","s11SwiftSyntax015PoundAssertStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015PoundAssertStmtB0V5commaAA05TokenB0VSgvp","s11SwiftSyntax015PoundAssertStmtB0V7messageAA05TokenB0VSgvp","s11SwiftSyntax015PoundAssertStmtB0V9conditionAA04ExprB0Vvp","s11SwiftSyntax015PoundAssertStmtB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax015PoundColumnExprB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax015PoundColumnExprB0V12customMirrors0G0Vvp","s11SwiftSyntax015PoundColumnExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015PoundFileIDExprB0V05poundD2IDAA05TokenB0Vvp","s11SwiftSyntax015PoundFileIDExprB0V12customMirrors0G0Vvp","s11SwiftSyntax015PoundFileIDExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015RepeatWhileStmtB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax015RepeatWhileStmtB0V12customMirrors0G0Vvp","s11SwiftSyntax015RepeatWhileStmtB0V12whileKeywordAA05TokenB0Vvp","s11SwiftSyntax015RepeatWhileStmtB0V13repeatKeywordAA05TokenB0Vvp","s11SwiftSyntax015RepeatWhileStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015RepeatWhileStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax015RepeatWhileStmtB0V9conditionAA04ExprB0Vvp","s11SwiftSyntax015RepeatWhileStmtB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax015SwitchCaseLabelB0V11caseKeywordAA05TokenB0Vvp","s11SwiftSyntax015SwitchCaseLabelB0V12customMirrors0G0Vvp","s11SwiftSyntax015SwitchCaseLabelB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015SwitchCaseLabelB0V5colonAA05TokenB0Vvp","s11SwiftSyntax015SwitchCaseLabelB0V9caseItemsAA0d8ItemListB0Vvp","s11SwiftSyntax015WildcardPatternB0V12customMirrors0F0Vvp","s11SwiftSyntax015WildcardPatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax015WildcardPatternB0V14typeAnnotationAA04TypefB0VSgvp","s11SwiftSyntax015WildcardPatternB0V8wildcardAA05TokenB0Vvp","s11SwiftSyntax016ArrayElementListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax016ArrayElementListB0V12customMirrors0G0Vvp","s11SwiftSyntax016ArrayElementListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax016ArrayElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016ArrayElementListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax016ArrayElementListB0V5countSivp","s11SwiftSyntax016ArrayElementListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax016ClosureParamListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax016ClosureParamListB0V12customMirrors0G0Vvp","s11SwiftSyntax016ClosureParamListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax016ClosureParamListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016ClosureParamListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax016ClosureParamListB0V5countSivp","s11SwiftSyntax016ClosureParamListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax016ClosureSignatureB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax016ClosureSignatureB0V12asyncKeywordAA05TokenB0VSgvp","s11SwiftSyntax016ClosureSignatureB0V12customMirrors0F0Vvp","s11SwiftSyntax016ClosureSignatureB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016ClosureSignatureB0V5inTokAA05TokenB0Vvp","s11SwiftSyntax016ClosureSignatureB0V5inputAA0B0VSgvp","s11SwiftSyntax016ClosureSignatureB0V6outputAA012ReturnClauseB0VSgvp","s11SwiftSyntax016ClosureSignatureB0V7captureAA0c7CapturedB0VSgvp","s11SwiftSyntax016ClosureSignatureB0V9throwsTokAA05TokenB0VSgvp","s11SwiftSyntax016ConditionElementB0V12customMirrors0F0Vvp","s11SwiftSyntax016ConditionElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax016ConditionElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016ConditionElementB0V9conditionAA0B0Vvp","s11SwiftSyntax016DeclNameArgumentB0V12customMirrors0G0Vvp","s11SwiftSyntax016DeclNameArgumentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016DeclNameArgumentB0V4nameAA05TokenB0Vvp","s11SwiftSyntax016DeclNameArgumentB0V5colonAA05TokenB0Vvp","s11SwiftSyntax016FloatLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax016FloatLiteralExprB0V14floatingDigitsAA05TokenB0Vvp","s11SwiftSyntax016FloatLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016FunctionCallExprB0V10rightParenAA05TokenB0VSgvp","s11SwiftSyntax016FunctionCallExprB0V12argumentListAA05Tuplee7ElementgB0Vvp","s11SwiftSyntax016FunctionCallExprB0V12customMirrors0G0Vvp","s11SwiftSyntax016FunctionCallExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016FunctionCallExprB0V15trailingClosureAA0geB0VSgvp","s11SwiftSyntax016FunctionCallExprB0V16calledExpressionAA0eB0Vvp","s11SwiftSyntax016FunctionCallExprB0V26additionalTrailingClosuresAA08Multipleg18ClosureElementListB0VSgvp","s11SwiftSyntax016FunctionCallExprB0V9leftParenAA05TokenB0VSgvp","s11SwiftSyntax016FunctionDeclNameB0V12customMirrors0G0Vvp","s11SwiftSyntax016FunctionDeclNameB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016FunctionDeclNameB0V4nameAA0B0Vvp","s11SwiftSyntax016FunctionDeclNameB0V9argumentsAA0de9ArgumentsB0VSgvp","s11SwiftSyntax016GenericParameterB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax016GenericParameterB0V12customMirrors0F0Vvp","s11SwiftSyntax016GenericParameterB0V13inheritedTypeAA0fB0VSgvp","s11SwiftSyntax016GenericParameterB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax016GenericParameterB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016GenericParameterB0V4nameAA05TokenB0Vvp","s11SwiftSyntax016GenericParameterB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax016MemberAccessExprB0V12customMirrors0G0Vvp","s11SwiftSyntax016MemberAccessExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016MemberAccessExprB0V17declNameArgumentsAA04DeclghB0VSgvp","s11SwiftSyntax016MemberAccessExprB0V3dotAA05TokenB0Vvp","s11SwiftSyntax016MemberAccessExprB0V4baseAA0eB0VSgvp","s11SwiftSyntax016MemberAccessExprB0V4nameAA05TokenB0Vvp","s11SwiftSyntax016ObjcSelectorExprB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax016ObjcSelectorExprB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax016ObjcSelectorExprB0V12customMirrors0G0Vvp","s11SwiftSyntax016ObjcSelectorExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016ObjcSelectorExprB0V4kindAA05TokenB0VSgvp","s11SwiftSyntax016ObjcSelectorExprB0V4nameAA0eB0Vvp","s11SwiftSyntax016ObjcSelectorExprB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax016ObjcSelectorExprB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax016PostfixUnaryExprB0V10expressionAA0eB0Vvp","s11SwiftSyntax016PostfixUnaryExprB0V12customMirrors0G0Vvp","s11SwiftSyntax016PostfixUnaryExprB0V13operatorTokenAA0gB0Vvp","s11SwiftSyntax016PostfixUnaryExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016PoundWarningDeclB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax016PoundWarningDeclB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax016PoundWarningDeclB0V12customMirrors0G0Vvp","s11SwiftSyntax016PoundWarningDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016PoundWarningDeclB0V7messageAA017StringLiteralExprB0Vvp","s11SwiftSyntax016PoundWarningDeclB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax016RegexLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax016RegexLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016RegexLiteralExprB0V5regexAA05TokenB0Vvp","s11SwiftSyntax016TupleExprElementB0V10expressionAA0dB0Vvp","s11SwiftSyntax016TupleExprElementB0V12customMirrors0G0Vvp","s11SwiftSyntax016TupleExprElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax016TupleExprElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax016TupleExprElementB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax016TupleExprElementB0V5labelAA05TokenB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax016TupleTypeElementB0V10secondNameAA05TokenB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V11initializerAA017InitializerClauseB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V12customMirrors0G0Vvp","s11SwiftSyntax016TupleTypeElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V4nameAA05TokenB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V4typeAA0dB0Vvp","s11SwiftSyntax016TupleTypeElementB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V5inOutAA05TokenB0VSgvp","s11SwiftSyntax016TupleTypeElementB0V8ellipsisAA05TokenB0VSgvp","s11SwiftSyntax017AccessorParameterB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax017AccessorParameterB0V12customMirrors0F0Vvp","s11SwiftSyntax017AccessorParameterB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017AccessorParameterB0V4nameAA05TokenB0Vvp","s11SwiftSyntax017AccessorParameterB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax017AvailabilityEntryB0V12customMirrors0F0Vvp","s11SwiftSyntax017AvailabilityEntryB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017AvailabilityEntryB0V16availabilityListAA0c4SpecfB0Vvp","s11SwiftSyntax017AvailabilityEntryB0V5colonAA05TokenB0Vvp","s11SwiftSyntax017AvailabilityEntryB0V5labelAA05TokenB0Vvp","s11SwiftSyntax017AvailabilityEntryB0V9semicolonAA05TokenB0Vvp","s11SwiftSyntax017CodeBlockItemListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax017CodeBlockItemListB0V12customMirrors0H0Vvp","s11SwiftSyntax017CodeBlockItemListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax017CodeBlockItemListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017CodeBlockItemListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax017CodeBlockItemListB0V5countSivp","s11SwiftSyntax017CodeBlockItemListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax017DeclNameArgumentsB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax017DeclNameArgumentsB0V12customMirrors0G0Vvp","s11SwiftSyntax017DeclNameArgumentsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017DeclNameArgumentsB0V9argumentsAA0cd12ArgumentListB0Vvp","s11SwiftSyntax017DeclNameArgumentsB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax017DeinitializerDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax017DeinitializerDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax017DeinitializerDeclB0V13deinitKeywordAA05TokenB0Vvp","s11SwiftSyntax017DeinitializerDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017DeinitializerDeclB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax017DeinitializerDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax017DictionaryElementB0V12customMirrors0F0Vvp","s11SwiftSyntax017DictionaryElementB0V13keyExpressionAA04ExprB0Vvp","s11SwiftSyntax017DictionaryElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax017DictionaryElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017DictionaryElementB0V15valueExpressionAA04ExprB0Vvp","s11SwiftSyntax017DictionaryElementB0V5colonAA05TokenB0Vvp","s11SwiftSyntax017ExpressionPatternB0V10expressionAA04ExprB0Vvp","s11SwiftSyntax017ExpressionPatternB0V12customMirrors0F0Vvp","s11SwiftSyntax017ExpressionPatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017ExpressionSegmentB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax017ExpressionSegmentB0V11expressionsAA020TupleExprElementListB0Vvp","s11SwiftSyntax017ExpressionSegmentB0V12customMirrors0F0Vvp","s11SwiftSyntax017ExpressionSegmentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017ExpressionSegmentB0V9backslashAA05TokenB0Vvp","s11SwiftSyntax017ExpressionSegmentB0V9delimiterAA05TokenB0VSgvp","s11SwiftSyntax017ExpressionSegmentB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax017FunctionParameterB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax017FunctionParameterB0V10secondNameAA05TokenB0VSgvp","s11SwiftSyntax017FunctionParameterB0V12customMirrors0F0Vvp","s11SwiftSyntax017FunctionParameterB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax017FunctionParameterB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017FunctionParameterB0V15defaultArgumentAA017InitializerClauseB0VSgvp","s11SwiftSyntax017FunctionParameterB0V4typeAA04TypeB0VSgvp","s11SwiftSyntax017FunctionParameterB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax017FunctionParameterB0V8ellipsisAA05TokenB0VSgvp","s11SwiftSyntax017FunctionParameterB0V9firstNameAA05TokenB0VSgvp","s11SwiftSyntax017FunctionSignatureB0V12customMirrors0F0Vvp","s11SwiftSyntax017FunctionSignatureB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017FunctionSignatureB0V21asyncOrReasyncKeywordAA05TokenB0VSgvp","s11SwiftSyntax017FunctionSignatureB0V23throwsOrRethrowsKeywordAA05TokenB0VSgvp","s11SwiftSyntax017FunctionSignatureB0V5inputAA015ParameterClauseB0Vvp","s11SwiftSyntax017FunctionSignatureB0V6outputAA012ReturnClauseB0VSgvp","s11SwiftSyntax017IdentifierPatternB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax017IdentifierPatternB0V12customMirrors0F0Vvp","s11SwiftSyntax017IdentifierPatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017InheritedTypeListB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax017InheritedTypeListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax017InheritedTypeListB0V12customMirrors0G0Vvp","s11SwiftSyntax017InheritedTypeListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax017InheritedTypeListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax017InheritedTypeListB0V5countSivp","s11SwiftSyntax017InheritedTypeListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax017InitializerClauseB0V12customMirrors0F0Vvp","s11SwiftSyntax017InitializerClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017InitializerClauseB0V5equalAA05TokenB0Vvp","s11SwiftSyntax017InitializerClauseB0V5valueAA04ExprB0Vvp","s11SwiftSyntax017NonEmptyTokenListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax017NonEmptyTokenListB0V12customMirrors0H0Vvp","s11SwiftSyntax017NonEmptyTokenListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax017NonEmptyTokenListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017NonEmptyTokenListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax017NonEmptyTokenListB0V5countSivp","s11SwiftSyntax017NonEmptyTokenListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax017ObjCSelectorPieceB0V12customMirrors0G0Vvp","s11SwiftSyntax017ObjCSelectorPieceB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017ObjCSelectorPieceB0V4nameAA05TokenB0VSgvp","s11SwiftSyntax017ObjCSelectorPieceB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax017ObjectLiteralExprB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax017ObjectLiteralExprB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax017ObjectLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax017ObjectLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017ObjectLiteralExprB0V9argumentsAA05Tuplee11ElementListB0Vvp","s11SwiftSyntax017ObjectLiteralExprB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax017PoundFilePathExprB0V05pounddE0AA05TokenB0Vvp","s11SwiftSyntax017PoundFilePathExprB0V12customMirrors0H0Vvp","s11SwiftSyntax017PoundFilePathExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017PoundFunctionExprB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax017PoundFunctionExprB0V12customMirrors0G0Vvp","s11SwiftSyntax017PoundFunctionExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017QualifiedDeclNameB0V12customMirrors0G0Vvp","s11SwiftSyntax017QualifiedDeclNameB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017QualifiedDeclNameB0V3dotAA05TokenB0VSgvp","s11SwiftSyntax017QualifiedDeclNameB0V4nameAA05TokenB0Vvp","s11SwiftSyntax017QualifiedDeclNameB0V8baseTypeAA0gB0VSgvp","s11SwiftSyntax017QualifiedDeclNameB0V9argumentsAA0de9ArgumentsB0VSgvp","s11SwiftSyntax017StringLiteralExprB0V10closeQuoteAA05TokenB0Vvp","s11SwiftSyntax017StringLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax017StringLiteralExprB0V13openDelimiterAA05TokenB0VSgvp","s11SwiftSyntax017StringLiteralExprB0V14closeDelimiterAA05TokenB0VSgvp","s11SwiftSyntax017StringLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax017StringLiteralExprB0V8segmentsAA0cd8SegmentsB0Vvp","s11SwiftSyntax017StringLiteralExprB0V9openQuoteAA05TokenB0Vvp","s11SwiftSyntax017WithTrailingCommaB0P08trailingE0AA05TokenB0VSgvp","s11SwiftSyntax018AssociatedtypeDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax018AssociatedtypeDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax018AssociatedtypeDeclB0V11initializerAA021TypeInitializerClauseB0VSgvp","s11SwiftSyntax018AssociatedtypeDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax018AssociatedtypeDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018AssociatedtypeDeclB0V17inheritanceClauseAA015TypeInheritancefB0VSgvp","s11SwiftSyntax018AssociatedtypeDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax018AssociatedtypeDeclB0V21associatedtypeKeywordAA05TokenB0Vvp","s11SwiftSyntax018AssociatedtypeDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax018BinaryOperatorExprB0V12customMirrors0G0Vvp","s11SwiftSyntax018BinaryOperatorExprB0V13operatorTokenAA0gB0Vvp","s11SwiftSyntax018BinaryOperatorExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018BooleanLiteralExprB0V07booleanD0AA05TokenB0Vvp","s11SwiftSyntax018BooleanLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax018BooleanLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018ClosureCaptureItemB0V10expressionAA04ExprB0Vvp","s11SwiftSyntax018ClosureCaptureItemB0V11assignTokenAA0gB0VSgvp","s11SwiftSyntax018ClosureCaptureItemB0V12customMirrors0G0Vvp","s11SwiftSyntax018ClosureCaptureItemB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax018ClosureCaptureItemB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018ClosureCaptureItemB0V4nameAA05TokenB0VSgvp","s11SwiftSyntax018ClosureCaptureItemB0V9specifierAA09TokenListB0VSgvp","s11SwiftSyntax018ElseIfContinuationB0V11ifStatementAA0d4StmtB0Vvp","s11SwiftSyntax018ElseIfContinuationB0V12customMirrors0G0Vvp","s11SwiftSyntax018ElseIfContinuationB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018GenericRequirementB0V12customMirrors0F0Vvp","s11SwiftSyntax018GenericRequirementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax018GenericRequirementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018GenericRequirementB0V4bodyAA0B0Vvp","s11SwiftSyntax018GenericWhereClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax018GenericWhereClauseB0V12whereKeywordAA05TokenB0Vvp","s11SwiftSyntax018GenericWhereClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018GenericWhereClauseB0V15requirementListAA0c11RequirementgB0Vvp","s11SwiftSyntax018IfConfigClauseListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax018IfConfigClauseListB0V12customMirrors0H0Vvp","s11SwiftSyntax018IfConfigClauseListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax018IfConfigClauseListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018IfConfigClauseListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax018IfConfigClauseListB0V5countSivp","s11SwiftSyntax018IfConfigClauseListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax018IntegerLiteralExprB0V12customMirrors0G0Vvp","s11SwiftSyntax018IntegerLiteralExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018IntegerLiteralExprB0V6digitsAA05TokenB0Vvp","s11SwiftSyntax018MemberDeclListItemB0V12customMirrors0H0Vvp","s11SwiftSyntax018MemberDeclListItemB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018MemberDeclListItemB0V4declAA0dB0Vvp","s11SwiftSyntax018MemberDeclListItemB0V9semicolonAA05TokenB0VSgvp","s11SwiftSyntax018PatternBindingListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax018PatternBindingListB0V12customMirrors0G0Vvp","s11SwiftSyntax018PatternBindingListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax018PatternBindingListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018PatternBindingListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax018PatternBindingListB0V5countSivp","s11SwiftSyntax018PatternBindingListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax018PoundDsohandleExprB0V05poundD0AA05TokenB0Vvp","s11SwiftSyntax018PoundDsohandleExprB0V12customMirrors0G0Vvp","s11SwiftSyntax018PoundDsohandleExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018PrefixOperatorExprB0V12customMirrors0G0Vvp","s11SwiftSyntax018PrefixOperatorExprB0V13operatorTokenAA0gB0VSgvp","s11SwiftSyntax018PrefixOperatorExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018PrefixOperatorExprB0V17postfixExpressionAA0eB0Vvp","s11SwiftSyntax018SwitchDefaultLabelB0V12customMirrors0G0Vvp","s11SwiftSyntax018SwitchDefaultLabelB0V14defaultKeywordAA05TokenB0Vvp","s11SwiftSyntax018SwitchDefaultLabelB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax018SwitchDefaultLabelB0V5colonAA05TokenB0Vvp","s11SwiftSyntax019AccessLevelModifierB0V10rightParenAA05TokenB0VSgvp","s11SwiftSyntax019AccessLevelModifierB0V12customMirrors0G0Vvp","s11SwiftSyntax019AccessLevelModifierB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019AccessLevelModifierB0V4nameAA05TokenB0Vvp","s11SwiftSyntax019AccessLevelModifierB0V8modifierAA05TokenB0VSgvp","s11SwiftSyntax019AccessLevelModifierB0V9leftParenAA05TokenB0VSgvp","s11SwiftSyntax019AccessPathComponentB0V11trailingDotAA05TokenB0VSgvp","s11SwiftSyntax019AccessPathComponentB0V12customMirrors0G0Vvp","s11SwiftSyntax019AccessPathComponentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019AccessPathComponentB0V4nameAA05TokenB0Vvp","s11SwiftSyntax019EnumCaseElementListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax019EnumCaseElementListB0V12customMirrors0H0Vvp","s11SwiftSyntax019EnumCaseElementListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax019EnumCaseElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019EnumCaseElementListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax019EnumCaseElementListB0V5countSivp","s11SwiftSyntax019EnumCaseElementListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax019GenericArgumentListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax019GenericArgumentListB0V12customMirrors0G0Vvp","s11SwiftSyntax019GenericArgumentListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax019GenericArgumentListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019GenericArgumentListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax019GenericArgumentListB0V5countSivp","s11SwiftSyntax019GenericArgumentListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax019PostfixIfConfigExprB0V12customMirrors0H0Vvp","s11SwiftSyntax019PostfixIfConfigExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019PostfixIfConfigExprB0V4baseAA0fB0VSgvp","s11SwiftSyntax019PostfixIfConfigExprB0V6configAA0de4DeclB0Vvp","s11SwiftSyntax019PoundSourceLocationB0V05pounddE0AA05TokenB0Vvp","s11SwiftSyntax019PoundSourceLocationB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax019PoundSourceLocationB0V12customMirrors0G0Vvp","s11SwiftSyntax019PoundSourceLocationB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019PoundSourceLocationB0V4argsAA0cde4ArgsB0VSgvp","s11SwiftSyntax019PoundSourceLocationB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax019PrecedenceGroupDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V10rightBraceAA05TokenB0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V12customMirrors0G0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019PrecedenceGroupDeclB0V15groupAttributesAA0cd13AttributeListB0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V22precedencegroupKeywordAA05TokenB0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V9leftBraceAA05TokenB0Vvp","s11SwiftSyntax019PrecedenceGroupDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax019SameTypeRequirementB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax019SameTypeRequirementB0V04leftD10IdentifierAA0dB0Vvp","s11SwiftSyntax019SameTypeRequirementB0V05rightD10IdentifierAA0dB0Vvp","s11SwiftSyntax019SameTypeRequirementB0V12customMirrors0G0Vvp","s11SwiftSyntax019SameTypeRequirementB0V13equalityTokenAA0gB0Vvp","s11SwiftSyntax019TargetFunctionEntryB0V12customMirrors0G0Vvp","s11SwiftSyntax019TargetFunctionEntryB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax019TargetFunctionEntryB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019TargetFunctionEntryB0V5colonAA05TokenB0Vvp","s11SwiftSyntax019TargetFunctionEntryB0V5labelAA05TokenB0Vvp","s11SwiftSyntax019TargetFunctionEntryB0V8delcnameAA08DeclNameB0Vvp","s11SwiftSyntax019TuplePatternElementB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax019TuplePatternElementB0V12customMirrors0G0Vvp","s11SwiftSyntax019TuplePatternElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax019TuplePatternElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019TuplePatternElementB0V7patternAA0dB0Vvp","s11SwiftSyntax019TuplePatternElementB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax019ValueBindingPatternB0V05valueE0AA0eB0Vvp","s11SwiftSyntax019ValueBindingPatternB0V12customMirrors0G0Vvp","s11SwiftSyntax019ValueBindingPatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax019ValueBindingPatternB0V15letOrVarKeywordAA05TokenB0Vvp","s11SwiftSyntax020AvailabilityArgumentB0V12customMirrors0F0Vvp","s11SwiftSyntax020AvailabilityArgumentB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax020AvailabilityArgumentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020AvailabilityArgumentB0V5entryAA0B0Vvp","s11SwiftSyntax020AvailabilitySpecListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax020AvailabilitySpecListB0V12customMirrors0G0Vvp","s11SwiftSyntax020AvailabilitySpecListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax020AvailabilitySpecListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020AvailabilitySpecListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax020AvailabilitySpecListB0V5countSivp","s11SwiftSyntax020AvailabilitySpecListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax020ClassRestrictionTypeB0V010syntaxNodeE0AA0B8Protocol_pXpvp","s11SwiftSyntax020ClassRestrictionTypeB0V12classKeywordAA05TokenB0Vvp","s11SwiftSyntax020ClassRestrictionTypeB0V12customMirrors0G0Vvp","s11SwiftSyntax020ConditionElementListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax020ConditionElementListB0V12customMirrors0G0Vvp","s11SwiftSyntax020ConditionElementListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax020ConditionElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020ConditionElementListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax020ConditionElementListB0V5countSivp","s11SwiftSyntax020ConditionElementListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax020DeclNameArgumentListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax020DeclNameArgumentListB0V12customMirrors0H0Vvp","s11SwiftSyntax020DeclNameArgumentListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax020DeclNameArgumentListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020DeclNameArgumentListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax020DeclNameArgumentListB0V5countSivp","s11SwiftSyntax020DeclNameArgumentListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax020GenericParameterListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax020GenericParameterListB0V12customMirrors0G0Vvp","s11SwiftSyntax020GenericParameterListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax020GenericParameterListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020GenericParameterListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax020GenericParameterListB0V5countSivp","s11SwiftSyntax020GenericParameterListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax020MemberTypeIdentifierB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax020MemberTypeIdentifierB0V04baseD0AA0dB0Vvp","s11SwiftSyntax020MemberTypeIdentifierB0V12customMirrors0G0Vvp","s11SwiftSyntax020MemberTypeIdentifierB0V21genericArgumentClauseAA07GenericghB0VSgvp","s11SwiftSyntax020MemberTypeIdentifierB0V4nameAA05TokenB0Vvp","s11SwiftSyntax020MemberTypeIdentifierB0V6periodAA05TokenB0Vvp","s11SwiftSyntax020OptionalChainingExprB0V10expressionAA0eB0Vvp","s11SwiftSyntax020OptionalChainingExprB0V12customMirrors0G0Vvp","s11SwiftSyntax020OptionalChainingExprB0V12questionMarkAA05TokenB0Vvp","s11SwiftSyntax020OptionalChainingExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020SimpleTypeIdentifierB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax020SimpleTypeIdentifierB0V12customMirrors0G0Vvp","s11SwiftSyntax020SimpleTypeIdentifierB0V21genericArgumentClauseAA07GenericghB0VSgvp","s11SwiftSyntax020SimpleTypeIdentifierB0V4nameAA05TokenB0Vvp","s11SwiftSyntax020TupleExprElementListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax020TupleExprElementListB0V12customMirrors0H0Vvp","s11SwiftSyntax020TupleExprElementListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax020TupleExprElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax020TupleExprElementListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax020TupleExprElementListB0V5countSivp","s11SwiftSyntax020TupleExprElementListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax020TupleTypeElementListB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax020TupleTypeElementListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax020TupleTypeElementListB0V12customMirrors0H0Vvp","s11SwiftSyntax020TupleTypeElementListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax020TupleTypeElementListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax020TupleTypeElementListB0V5countSivp","s11SwiftSyntax020TupleTypeElementListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax021AvailabilityConditionB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax021AvailabilityConditionB0V12customMirrors0F0Vvp","s11SwiftSyntax021AvailabilityConditionB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021AvailabilityConditionB0V16availabilitySpecAA0cf4ListB0Vvp","s11SwiftSyntax021AvailabilityConditionB0V21poundAvailableKeywordAA05TokenB0Vvp","s11SwiftSyntax021AvailabilityConditionB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax021DictionaryElementListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax021DictionaryElementListB0V12customMirrors0G0Vvp","s11SwiftSyntax021DictionaryElementListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax021DictionaryElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021DictionaryElementListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax021DictionaryElementListB0V5countSivp","s11SwiftSyntax021DictionaryElementListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax021DiscardAssignmentExprB0V12customMirrors0G0Vvp","s11SwiftSyntax021DiscardAssignmentExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021DiscardAssignmentExprB0V8wildcardAA05TokenB0Vvp","s11SwiftSyntax021EditorPlaceholderExprB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax021EditorPlaceholderExprB0V12customMirrors0G0Vvp","s11SwiftSyntax021EditorPlaceholderExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021FunctionParameterListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax021FunctionParameterListB0V12customMirrors0G0Vvp","s11SwiftSyntax021FunctionParameterListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax021FunctionParameterListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021FunctionParameterListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax021FunctionParameterListB0V5countSivp","s11SwiftSyntax021FunctionParameterListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax021GenericArgumentClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax021GenericArgumentClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021GenericArgumentClauseB0V16leftAngleBracketAA05TokenB0Vvp","s11SwiftSyntax021GenericArgumentClauseB0V17rightAngleBracketAA05TokenB0Vvp","s11SwiftSyntax021GenericArgumentClauseB0V9argumentsAA0cd4ListB0Vvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V010syntaxNodeE0AA0B8Protocol_pXpvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V09inheritedE0AA0eB0VSgvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V11initializerAA0e17InitializerClauseB0VSgvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V12customMirrors0G0Vvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V4nameAA05TokenB0Vvp","s11SwiftSyntax021PrimaryAssociatedTypeB0V5colonAA05TokenB0VSgvp","s11SwiftSyntax021StringLiteralSegmentsB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax021StringLiteralSegmentsB0V12customMirrors0G0Vvp","s11SwiftSyntax021StringLiteralSegmentsB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax021StringLiteralSegmentsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021StringLiteralSegmentsB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax021StringLiteralSegmentsB0V5countSivp","s11SwiftSyntax021StringLiteralSegmentsB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax021SymbolicReferenceExprB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax021SymbolicReferenceExprB0V12customMirrors0G0Vvp","s11SwiftSyntax021SymbolicReferenceExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021SymbolicReferenceExprB0V21genericArgumentClauseAA07GenericghB0VSgvp","s11SwiftSyntax021TypeInheritanceClauseB0V010syntaxNodeC0AA0B8Protocol_pXpvp","s11SwiftSyntax021TypeInheritanceClauseB0V09inheritedC10CollectionAA09Inheritedc4ListB0Vvp","s11SwiftSyntax021TypeInheritanceClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax021TypeInheritanceClauseB0V5colonAA05TokenB0Vvp","s11SwiftSyntax021TypeInitializerClauseB0V010syntaxNodeC0AA0B8Protocol_pXpvp","s11SwiftSyntax021TypeInitializerClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax021TypeInitializerClauseB0V5equalAA05TokenB0Vvp","s11SwiftSyntax021TypeInitializerClauseB0V5valueAA0cB0Vvp","s11SwiftSyntax021UnresolvedPatternExprB0V12customMirrors0G0Vvp","s11SwiftSyntax021UnresolvedPatternExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax021UnresolvedPatternExprB0V7patternAA0dB0Vvp","s11SwiftSyntax022ClosureCaptureItemListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax022ClosureCaptureItemListB0V12customMirrors0H0Vvp","s11SwiftSyntax022ClosureCaptureItemListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax022ClosureCaptureItemListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax022ClosureCaptureItemListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax022ClosureCaptureItemListB0V5countSivp","s11SwiftSyntax022ClosureCaptureItemListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax022CompositionTypeElementB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax022CompositionTypeElementB0V12customMirrors0G0Vvp","s11SwiftSyntax022CompositionTypeElementB0V4typeAA0dB0Vvp","s11SwiftSyntax022CompositionTypeElementB0V9ampersandAA05TokenB0VSgvp","s11SwiftSyntax022ConformanceRequirementB0V12customMirrors0F0Vvp","s11SwiftSyntax022ConformanceRequirementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax022ConformanceRequirementB0V18leftTypeIdentifierAA0fB0Vvp","s11SwiftSyntax022ConformanceRequirementB0V19rightTypeIdentifierAA0fB0Vvp","s11SwiftSyntax022ConformanceRequirementB0V5colonAA05TokenB0Vvp","s11SwiftSyntax022DifferentiabilityParamB0V12customMirrors0F0Vvp","s11SwiftSyntax022DifferentiabilityParamB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax022DifferentiabilityParamB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax022DifferentiabilityParamB0V9parameterAA0B0Vvp","s11SwiftSyntax022GenericParameterClauseB0V07genericD4ListAA0cdgB0Vvp","s11SwiftSyntax022GenericParameterClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax022GenericParameterClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax022GenericParameterClauseB0V16leftAngleBracketAA05TokenB0Vvp","s11SwiftSyntax022GenericParameterClauseB0V17rightAngleBracketAA05TokenB0Vvp","s11SwiftSyntax022GenericRequirementListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax022GenericRequirementListB0V12customMirrors0G0Vvp","s11SwiftSyntax022GenericRequirementListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax022GenericRequirementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax022GenericRequirementListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax022GenericRequirementListB0V5countSivp","s11SwiftSyntax022GenericRequirementListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax022LabeledSpecializeEntryB0V12customMirrors0G0Vvp","s11SwiftSyntax022LabeledSpecializeEntryB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax022LabeledSpecializeEntryB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax022LabeledSpecializeEntryB0V5colonAA05TokenB0Vvp","s11SwiftSyntax022LabeledSpecializeEntryB0V5labelAA05TokenB0Vvp","s11SwiftSyntax022LabeledSpecializeEntryB0V5valueAA05TokenB0Vvp","s11SwiftSyntax023ClosureCaptureSignatureB0V10leftSquareAA05TokenB0Vvp","s11SwiftSyntax023ClosureCaptureSignatureB0V11rightSquareAA05TokenB0Vvp","s11SwiftSyntax023ClosureCaptureSignatureB0V12customMirrors0G0Vvp","s11SwiftSyntax023ClosureCaptureSignatureB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023ClosureCaptureSignatureB0V5itemsAA0cd8ItemListB0VSgvp","s11SwiftSyntax023DifferentiabilityParamsB0V04diffD0AA0c9ParamListB0Vvp","s11SwiftSyntax023DifferentiabilityParamsB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax023DifferentiabilityParamsB0V12customMirrors0F0Vvp","s11SwiftSyntax023DifferentiabilityParamsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023DifferentiabilityParamsB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V10lineNumberAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V12customMirrors0H0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V12fileArgColonAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V12fileArgLabelAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V12lineArgColonAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V12lineArgLabelAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023PoundSourceLocationArgsB0V5commaAA05TokenB0Vvp","s11SwiftSyntax023PoundSourceLocationArgsB0V8fileNameAA05TokenB0Vvp","s11SwiftSyntax023PrecedenceGroupNameListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax023PrecedenceGroupNameListB0V12customMirrors0H0Vvp","s11SwiftSyntax023PrecedenceGroupNameListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax023PrecedenceGroupNameListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023PrecedenceGroupNameListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax023PrecedenceGroupNameListB0V5countSivp","s11SwiftSyntax023PrecedenceGroupNameListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax023PrecedenceGroupRelationB0V017higherThanOrLowerG0AA05TokenB0Vvp","s11SwiftSyntax023PrecedenceGroupRelationB0V10otherNamesAA0cd8NameListB0Vvp","s11SwiftSyntax023PrecedenceGroupRelationB0V12customMirrors0G0Vvp","s11SwiftSyntax023PrecedenceGroupRelationB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023PrecedenceGroupRelationB0V5colonAA05TokenB0Vvp","s11SwiftSyntax023TuplePatternElementListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax023TuplePatternElementListB0V12customMirrors0H0Vvp","s11SwiftSyntax023TuplePatternElementListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax023TuplePatternElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023TuplePatternElementListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax023TuplePatternElementListB0V5countSivp","s11SwiftSyntax023TuplePatternElementListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax023UnavailabilityConditionB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax023UnavailabilityConditionB0V12customMirrors0F0Vvp","s11SwiftSyntax023UnavailabilityConditionB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax023UnavailabilityConditionB0V16availabilitySpecAA012Availabilityf4ListB0Vvp","s11SwiftSyntax023UnavailabilityConditionB0V23poundUnavailableKeywordAA05TokenB0Vvp","s11SwiftSyntax023UnavailabilityConditionB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax024MatchingPatternConditionB0V11caseKeywordAA05TokenB0Vvp","s11SwiftSyntax024MatchingPatternConditionB0V11initializerAA017InitializerClauseB0Vvp","s11SwiftSyntax024MatchingPatternConditionB0V12customMirrors0G0Vvp","s11SwiftSyntax024MatchingPatternConditionB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax024MatchingPatternConditionB0V14typeAnnotationAA04TypegB0VSgvp","s11SwiftSyntax024MatchingPatternConditionB0V7patternAA0dB0Vvp","s11SwiftSyntax024OptionalBindingConditionB0V11initializerAA017InitializerClauseB0Vvp","s11SwiftSyntax024OptionalBindingConditionB0V12customMirrors0G0Vvp","s11SwiftSyntax024OptionalBindingConditionB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax024OptionalBindingConditionB0V14typeAnnotationAA04TypegB0VSgvp","s11SwiftSyntax024OptionalBindingConditionB0V15letOrVarKeywordAA05TokenB0Vvp","s11SwiftSyntax024OptionalBindingConditionB0V7patternAA07PatternB0Vvp","s11SwiftSyntax025PrecedenceGroupAssignmentB0V12customMirrors0G0Vvp","s11SwiftSyntax025PrecedenceGroupAssignmentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax025PrecedenceGroupAssignmentB0V17assignmentKeywordAA05TokenB0Vvp","s11SwiftSyntax025PrecedenceGroupAssignmentB0V4flagAA05TokenB0Vvp","s11SwiftSyntax025PrecedenceGroupAssignmentB0V5colonAA05TokenB0Vvp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V010syntaxNodeE0AA0B8Protocol_pXpvp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V12customMirrors0H0Vvp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V5countSivp","s11SwiftSyntax025PrimaryAssociatedTypeListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax026CompositionTypeElementListB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax026CompositionTypeElementListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax026CompositionTypeElementListB0V12customMirrors0H0Vvp","s11SwiftSyntax026CompositionTypeElementListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax026CompositionTypeElementListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax026CompositionTypeElementListB0V5countSivp","s11SwiftSyntax026CompositionTypeElementListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax026DifferentiabilityParamListB0V10startIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax026DifferentiabilityParamListB0V12customMirrors0G0Vvp","s11SwiftSyntax026DifferentiabilityParamListB0V13leadingTriviaAA0G0VSgvp","s11SwiftSyntax026DifferentiabilityParamListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax026DifferentiabilityParamListB0V14trailingTriviaAA0G0VSgvp","s11SwiftSyntax026DifferentiabilityParamListB0V5countSivp","s11SwiftSyntax026DifferentiabilityParamListB0V8endIndexAA0b8ChildrenG0Vvp","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V015precedenceGroupe10DesignatedF0AA014IdentifierListB0Vvp","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V12customMirrors0H0Vvp","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V5colonAA05TokenB0Vvp","s11SwiftSyntax026PrecedenceGroupNameElementB0V12customMirrors0H0Vvp","s11SwiftSyntax026PrecedenceGroupNameElementB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax026PrecedenceGroupNameElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax026PrecedenceGroupNameElementB0V4nameAA05TokenB0Vvp","s11SwiftSyntax027AvailabilityLabeledArgumentB0V12customMirrors0G0Vvp","s11SwiftSyntax027AvailabilityLabeledArgumentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax027AvailabilityLabeledArgumentB0V5colonAA05TokenB0Vvp","s11SwiftSyntax027AvailabilityLabeledArgumentB0V5labelAA05TokenB0Vvp","s11SwiftSyntax027AvailabilityLabeledArgumentB0V5valueAA0B0Vvp","s11SwiftSyntax027SpecializeAttributeSpecListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax027SpecializeAttributeSpecListB0V12customMirrors0H0Vvp","s11SwiftSyntax027SpecializeAttributeSpecListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax027SpecializeAttributeSpecListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax027SpecializeAttributeSpecListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax027SpecializeAttributeSpecListB0V5countSivp","s11SwiftSyntax027SpecializeAttributeSpecListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax028ImplementsAttributeArgumentsB0V08declNameE0AA04DeclgeB0VSgvp","s11SwiftSyntax028ImplementsAttributeArgumentsB0V12customMirrors0G0Vvp","s11SwiftSyntax028ImplementsAttributeArgumentsB0V12declBaseNameAA0B0Vvp","s11SwiftSyntax028ImplementsAttributeArgumentsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax028ImplementsAttributeArgumentsB0V4typeAA020SimpleTypeIdentifierB0Vvp","s11SwiftSyntax028ImplementsAttributeArgumentsB0V5commaAA05TokenB0Vvp","s11SwiftSyntax028NamedAttributeStringArgumentB0V12customMirrors0H0Vvp","s11SwiftSyntax028NamedAttributeStringArgumentB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax028NamedAttributeStringArgumentB0V16stringOrDeclnameAA0B0Vvp","s11SwiftSyntax028NamedAttributeStringArgumentB0V5colonAA05TokenB0Vvp","s11SwiftSyntax028NamedAttributeStringArgumentB0V7nameTokAA05TokenB0Vvp","s11SwiftSyntax028PrecedenceGroupAssociativityB0V12customMirrors0G0Vvp","s11SwiftSyntax028PrecedenceGroupAssociativityB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax028PrecedenceGroupAssociativityB0V20associativityKeywordAA05TokenB0Vvp","s11SwiftSyntax028PrecedenceGroupAssociativityB0V5colonAA05TokenB0Vvp","s11SwiftSyntax028PrecedenceGroupAssociativityB0V5valueAA05TokenB0Vvp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V10startIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V12customMirrors0H0Vvp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V13leadingTriviaAA0H0VSgvp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V14trailingTriviaAA0H0VSgvp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V5countSivp","s11SwiftSyntax028PrecedenceGroupAttributeListB0V8endIndexAA0b8ChildrenH0Vvp","s11SwiftSyntax029DifferentiabilityParamsClauseB0V10parametersAA0B0Vvp","s11SwiftSyntax029DifferentiabilityParamsClauseB0V12customMirrors0G0Vvp","s11SwiftSyntax029DifferentiabilityParamsClauseB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax029DifferentiabilityParamsClauseB0V5colonAA05TokenB0Vvp","s11SwiftSyntax029DifferentiabilityParamsClauseB0V8wrtLabelAA05TokenB0Vvp","s11SwiftSyntax030AvailabilityVersionRestrictionB0V12customMirrors0G0Vvp","s11SwiftSyntax030AvailabilityVersionRestrictionB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax030AvailabilityVersionRestrictionB0V7versionAA0d5TupleB0VSgvp","s11SwiftSyntax030AvailabilityVersionRestrictionB0V8platformAA05TokenB0Vvp","s11SwiftSyntax030MultipleTrailingClosureElementB0V12customMirrors0H0Vvp","s11SwiftSyntax030MultipleTrailingClosureElementB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax030MultipleTrailingClosureElementB0V5colonAA05TokenB0Vvp","s11SwiftSyntax030MultipleTrailingClosureElementB0V5labelAA05TokenB0Vvp","s11SwiftSyntax030MultipleTrailingClosureElementB0V7closureAA0e4ExprB0Vvp","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V010syntaxNodeF0AA0B8Protocol_pXpvp","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V07wrappedF0AA0fB0Vvp","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V12customMirrors0H0Vvp","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V15exclamationMarkAA05TokenB0Vvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V10diffParamsAA017Differentiabilityg6ClauseB0VSgvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V11whereClauseAA012GenericWheregB0VSgvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V12customMirrors0G0Vvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V13diffKindCommaAA05TokenB0VSgvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V15diffParamsCommaAA05TokenB0VSgvp","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V8diffKindAA05TokenB0VSgvp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V10startIndexAA0b8ChildrenI0Vvp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V12customMirrors0I0Vvp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V13leadingTriviaAA0I0VSgvp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V14trailingTriviaAA0I0VSgvp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V5countSivp","s11SwiftSyntax034MultipleTrailingClosureElementListB0V8endIndexAA0b8ChildrenI0Vvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V10diffParamsAA017Differentiabilityh6ClauseB0VSgvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V12accessorKindAA05TokenB0VSgvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V12customMirrors0H0Vvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V16originalDeclNameAA09QualifiedhiB0Vvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V5colonAA05TokenB0Vvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V5commaAA05TokenB0VSgvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V6periodAA05TokenB0VSgvp","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V7ofLabelAA05TokenB0Vvp","s11SwiftSyntax04DeclB0V12customMirrors0E0Vvp","s11SwiftSyntax04DeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax04ExprB0V12customMirrors0E0Vvp","s11SwiftSyntax04ExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax04StmtB0V12customMirrors0E0Vvp","s11SwiftSyntax04StmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax04TypeB0V010syntaxNodeC0AA0B8Protocol_pXpvp","s11SwiftSyntax04TypeB0V12customMirrors0E0Vvp","s11SwiftSyntax05TokenB0V11totalLengthAA06SourceE0Vvp","s11SwiftSyntax05TokenB0V12customMirrors0E0Vvp","s11SwiftSyntax05TokenB0V13contentLengthAA06SourceE0Vvp","s11SwiftSyntax05TokenB0V13leadingTriviaAA0E0Vvp","s11SwiftSyntax05TokenB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax05TokenB0V14trailingTriviaAA0E0Vvp","s11SwiftSyntax05TokenB0V19leadingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax05TokenB0V19tokenClassificationAA0B15ClassifiedRangeVvp","s11SwiftSyntax05TokenB0V20trailingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax05TokenB0V4textSSvp","s11SwiftSyntax05TokenB0V8presenceAA14SourcePresenceOvp","s11SwiftSyntax05TokenB0V9tokenKindAA0cE0Ovp","s11SwiftSyntax06AsExprB0V12customMirrors0F0Vvp","s11SwiftSyntax06AsExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax06AsExprB0V25questionOrExclamationMarkAA05TokenB0VSgvp","s11SwiftSyntax06AsExprB0V5asTokAA05TokenB0Vvp","s11SwiftSyntax06AsExprB0V8typeNameAA04TypeB0Vvp","s11SwiftSyntax06BracedB0P10rightBraceAA05TokenB0Vvp","s11SwiftSyntax06BracedB0P9leftBraceAA05TokenB0Vvp","s11SwiftSyntax06DoStmtB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax06DoStmtB0V12catchClausesAA015CatchClauseListB0VSgvp","s11SwiftSyntax06DoStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax06DoStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax06DoStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax06DoStmtB0V9doKeywordAA05TokenB0Vvp","s11SwiftSyntax06DoStmtB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax06IfStmtB0V10conditionsAA020ConditionElementListB0Vvp","s11SwiftSyntax06IfStmtB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax06IfStmtB0V11elseKeywordAA05TokenB0VSgvp","s11SwiftSyntax06IfStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax06IfStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax06IfStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax06IfStmtB0V8elseBodyAA0B0VSgvp","s11SwiftSyntax06IfStmtB0V9ifKeywordAA05TokenB0Vvp","s11SwiftSyntax06IfStmtB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax06IsExprB0V12customMirrors0F0Vvp","s11SwiftSyntax06IsExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax06IsExprB0V5isTokAA05TokenB0Vvp","s11SwiftSyntax06IsExprB0V8typeNameAA04TypeB0Vvp","s11SwiftSyntax07LabeledB0P10labelColonAA05TokenB0VSgvp","s11SwiftSyntax07LabeledB0P9labelNameAA05TokenB0VSgvp","s11SwiftSyntax07PatternB0V12customMirrors0E0Vvp","s11SwiftSyntax07PatternB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax07TryExprB0V10expressionAA0dB0Vvp","s11SwiftSyntax07TryExprB0V10tryKeywordAA05TokenB0Vvp","s11SwiftSyntax07TryExprB0V12customMirrors0F0Vvp","s11SwiftSyntax07TryExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax07TryExprB0V25questionOrExclamationMarkAA05TokenB0VSgvp","s11SwiftSyntax07UnknownB0V12customMirrors0E0Vvp","s11SwiftSyntax07UnknownB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax08CaseItemB0V11whereClauseAA05WherefB0VSgvp","s11SwiftSyntax08CaseItemB0V12customMirrors0F0Vvp","s11SwiftSyntax08CaseItemB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax08CaseItemB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax08CaseItemB0V7patternAA07PatternB0Vvp","s11SwiftSyntax08DeclNameB0V04declD9ArgumentsAA0cdfB0VSgvp","s11SwiftSyntax08DeclNameB0V08declBaseD0AA0B0Vvp","s11SwiftSyntax08DeclNameB0V12customMirrors0F0Vvp","s11SwiftSyntax08DeclNameB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax08EnumDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax08EnumDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax08EnumDeclB0V11enumKeywordAA05TokenB0Vvp","s11SwiftSyntax08EnumDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax08EnumDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax08EnumDeclB0V17genericParametersAA022GenericParameterClauseB0VSgvp","s11SwiftSyntax08EnumDeclB0V17inheritanceClauseAA015TypeInheritancefB0VSgvp","s11SwiftSyntax08EnumDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax08EnumDeclB0V7membersAA06Memberd5BlockB0Vvp","s11SwiftSyntax08EnumDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax08ExprListB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax08ExprListB0V12customMirrors0F0Vvp","s11SwiftSyntax08ExprListB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax08ExprListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax08ExprListB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax08ExprListB0V5countSivp","s11SwiftSyntax08ExprListB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax08ObjcNameB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax08ObjcNameB0V12customMirrors0F0Vvp","s11SwiftSyntax08ObjcNameB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax08ObjcNameB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax08ObjcNameB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax08ObjcNameB0V5countSivp","s11SwiftSyntax08ObjcNameB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax08SomeTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax08SomeTypeB0V04baseD0AA0dB0Vvp","s11SwiftSyntax08SomeTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax08SomeTypeB0V13someSpecifierAA05TokenB0Vvp","s11SwiftSyntax08TypeExprB0V010syntaxNodeC0AA0B8Protocol_pXpvp","s11SwiftSyntax08TypeExprB0V12customMirrors0F0Vvp","s11SwiftSyntax08TypeExprB0V4typeAA0cB0Vvp","s11SwiftSyntax09ArrayExprB0V10leftSquareAA05TokenB0Vvp","s11SwiftSyntax09ArrayExprB0V11rightSquareAA05TokenB0Vvp","s11SwiftSyntax09ArrayExprB0V12customMirrors0F0Vvp","s11SwiftSyntax09ArrayExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09ArrayExprB0V8elementsAA0c11ElementListB0Vvp","s11SwiftSyntax09ArrayTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax09ArrayTypeB0V07elementD0AA0dB0Vvp","s11SwiftSyntax09ArrayTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax09ArrayTypeB0V17leftSquareBracketAA05TokenB0Vvp","s11SwiftSyntax09ArrayTypeB0V18rightSquareBracketAA05TokenB0Vvp","s11SwiftSyntax09ArrowExprB0V10arrowTokenAA0fB0Vvp","s11SwiftSyntax09ArrowExprB0V11throwsTokenAA0fB0VSgvp","s11SwiftSyntax09ArrowExprB0V12asyncKeywordAA05TokenB0VSgvp","s11SwiftSyntax09ArrowExprB0V12customMirrors0F0Vvp","s11SwiftSyntax09ArrowExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09AttributeB0V10rightParenAA05TokenB0VSgvp","s11SwiftSyntax09AttributeB0V11atSignTokenAA0fB0Vvp","s11SwiftSyntax09AttributeB0V12customMirrors0E0Vvp","s11SwiftSyntax09AttributeB0V13attributeNameAA05TokenB0Vvp","s11SwiftSyntax09AttributeB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09AttributeB0V8argumentAA0B0VSgvp","s11SwiftSyntax09AttributeB0V9leftParenAA05TokenB0VSgvp","s11SwiftSyntax09AttributeB0V9tokenListAA05TokeneB0VSgvp","s11SwiftSyntax09AwaitExprB0V10expressionAA0dB0Vvp","s11SwiftSyntax09AwaitExprB0V12awaitKeywordAA05TokenB0Vvp","s11SwiftSyntax09AwaitExprB0V12customMirrors0F0Vvp","s11SwiftSyntax09AwaitExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09BreakStmtB0V12breakKeywordAA05TokenB0Vvp","s11SwiftSyntax09BreakStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax09BreakStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09BreakStmtB0V5labelAA05TokenB0VSgvp","s11SwiftSyntax09CatchItemB0V11whereClauseAA05WherefB0VSgvp","s11SwiftSyntax09CatchItemB0V12customMirrors0F0Vvp","s11SwiftSyntax09CatchItemB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax09CatchItemB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09CatchItemB0V7patternAA07PatternB0VSgvp","s11SwiftSyntax09ClassDeclB0V10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax09ClassDeclB0V10identifierAA05TokenB0Vvp","s11SwiftSyntax09ClassDeclB0V12customMirrors0F0Vvp","s11SwiftSyntax09ClassDeclB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09ClassDeclB0V17inheritanceClauseAA015TypeInheritancefB0VSgvp","s11SwiftSyntax09ClassDeclB0V18genericWhereClauseAA07GenericfgB0VSgvp","s11SwiftSyntax09ClassDeclB0V19classOrActorKeywordAA05TokenB0Vvp","s11SwiftSyntax09ClassDeclB0V22genericParameterClauseAA07GenericfgB0VSgvp","s11SwiftSyntax09ClassDeclB0V7membersAA06Memberd5BlockB0Vvp","s11SwiftSyntax09ClassDeclB0V9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax09CodeBlockB0V10rightBraceAA05TokenB0Vvp","s11SwiftSyntax09CodeBlockB0V10statementsAA0cd8ItemListB0Vvp","s11SwiftSyntax09CodeBlockB0V12customMirrors0F0Vvp","s11SwiftSyntax09CodeBlockB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09CodeBlockB0V9leftBraceAA05TokenB0Vvp","s11SwiftSyntax09DeclGroupB0P10attributesAA013AttributeListB0VSgvp","s11SwiftSyntax09DeclGroupB0P7membersAA06Memberc5BlockB0Vvp","s11SwiftSyntax09DeclGroupB0P9modifiersAA012ModifierListB0VSgvp","s11SwiftSyntax09DeferStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax09DeferStmtB0V12deferKeywordAA05TokenB0Vvp","s11SwiftSyntax09DeferStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09DeferStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax09ElseBlockB0V11elseKeywordAA05TokenB0Vvp","s11SwiftSyntax09ElseBlockB0V12customMirrors0F0Vvp","s11SwiftSyntax09ElseBlockB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09ElseBlockB0V4bodyAA04CodedB0Vvp","s11SwiftSyntax09ForInStmtB0V10forKeywordAA05TokenB0Vvp","s11SwiftSyntax09ForInStmtB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax09ForInStmtB0V10tryKeywordAA05TokenB0VSgvp","s11SwiftSyntax09ForInStmtB0V11caseKeywordAA05TokenB0VSgvp","s11SwiftSyntax09ForInStmtB0V11whereClauseAA05WheregB0VSgvp","s11SwiftSyntax09ForInStmtB0V12awaitKeywordAA05TokenB0VSgvp","s11SwiftSyntax09ForInStmtB0V12customMirrors0G0Vvp","s11SwiftSyntax09ForInStmtB0V12sequenceExprAA0gB0Vvp","s11SwiftSyntax09ForInStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09ForInStmtB0V14typeAnnotationAA04TypegB0VSgvp","s11SwiftSyntax09ForInStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax09ForInStmtB0V7patternAA07PatternB0Vvp","s11SwiftSyntax09ForInStmtB0V9inKeywordAA05TokenB0Vvp","s11SwiftSyntax09ForInStmtB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax09GuardStmtB0V10conditionsAA020ConditionElementListB0Vvp","s11SwiftSyntax09GuardStmtB0V11elseKeywordAA05TokenB0Vvp","s11SwiftSyntax09GuardStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax09GuardStmtB0V12guardKeywordAA05TokenB0Vvp","s11SwiftSyntax09GuardStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09GuardStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax09InOutExprB0V10expressionAA0eB0Vvp","s11SwiftSyntax09InOutExprB0V12customMirrors0G0Vvp","s11SwiftSyntax09InOutExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09InOutExprB0V9ampersandAA05TokenB0Vvp","s11SwiftSyntax09ThrowStmtB0V10expressionAA04ExprB0Vvp","s11SwiftSyntax09ThrowStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax09ThrowStmtB0V12throwKeywordAA05TokenB0Vvp","s11SwiftSyntax09ThrowStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09TokenListB0V10startIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax09TokenListB0V12customMirrors0F0Vvp","s11SwiftSyntax09TokenListB0V13leadingTriviaAA0F0VSgvp","s11SwiftSyntax09TokenListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09TokenListB0V14trailingTriviaAA0F0VSgvp","s11SwiftSyntax09TokenListB0V5countSivp","s11SwiftSyntax09TokenListB0V8endIndexAA0b8ChildrenF0Vvp","s11SwiftSyntax09TupleExprB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax09TupleExprB0V11elementListAA0cd7ElementfB0Vvp","s11SwiftSyntax09TupleExprB0V12customMirrors0F0Vvp","s11SwiftSyntax09TupleExprB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09TupleExprB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax09TupleTypeB0V010syntaxNodeD0AA0B8Protocol_pXpvp","s11SwiftSyntax09TupleTypeB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax09TupleTypeB0V12customMirrors0F0Vvp","s11SwiftSyntax09TupleTypeB0V8elementsAA0cd11ElementListB0Vvp","s11SwiftSyntax09TupleTypeB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax09WhileStmtB0V10conditionsAA020ConditionElementListB0Vvp","s11SwiftSyntax09WhileStmtB0V10labelColonAA05TokenB0VSgvp","s11SwiftSyntax09WhileStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax09WhileStmtB0V12whileKeywordAA05TokenB0Vvp","s11SwiftSyntax09WhileStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09WhileStmtB0V4bodyAA09CodeBlockB0Vvp","s11SwiftSyntax09WhileStmtB0V9labelNameAA05TokenB0VSgvp","s11SwiftSyntax09YieldListB0V07elementD0AA04ExprdB0Vvp","s11SwiftSyntax09YieldListB0V10rightParenAA05TokenB0Vvp","s11SwiftSyntax09YieldListB0V12customMirrors0F0Vvp","s11SwiftSyntax09YieldListB0V13trailingCommaAA05TokenB0VSgvp","s11SwiftSyntax09YieldListB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09YieldListB0V9leftParenAA05TokenB0Vvp","s11SwiftSyntax09YieldStmtB0V12customMirrors0F0Vvp","s11SwiftSyntax09YieldStmtB0V12yieldKeywordAA05TokenB0Vvp","s11SwiftSyntax09YieldStmtB0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax09YieldStmtB0V6yieldsAA0B0Vvp","s11SwiftSyntax0B0V12customMirrors0D0Vvp","s11SwiftSyntax0B0V14syntaxNodeTypeAA0B8Protocol_pXpvp","s11SwiftSyntax0B10CollectionP5countSivp","s11SwiftSyntax0B13VerifierErrorO11descriptionSSvp","s11SwiftSyntax0B15ClassifiedRangeV4kindAA0B14ClassificationOvp","s11SwiftSyntax0B15ClassifiedRangeV5rangeAA010ByteSourceD0Vvp","s11SwiftSyntax0B15ClassifiedRangeV6lengthSivp","s11SwiftSyntax0B15ClassifiedRangeV6offsetSivp","s11SwiftSyntax0B15ClassifiedRangeV9endOffsetSivp","s11SwiftSyntax0B4NodeV02asB0AA0B0Vvp","s11SwiftSyntax0B4NodeV10asCaseItemAA0efB0VSgvp","s11SwiftSyntax0B4NodeV10asDeclNameAA0efB0VSgvp","s11SwiftSyntax0B4NodeV10asEnumDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV10asExprListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV10asObjcNameAA0efB0VSgvp","s11SwiftSyntax0B4NodeV10asSomeTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV10asTypeExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV10isCaseItemSbvp","s11SwiftSyntax0B4NodeV10isDeclNameSbvp","s11SwiftSyntax0B4NodeV10isEnumDeclSbvp","s11SwiftSyntax0B4NodeV10isExprListSbvp","s11SwiftSyntax0B4NodeV10isObjcNameSbvp","s11SwiftSyntax0B4NodeV10isSomeTypeSbvp","s11SwiftSyntax0B4NodeV10isTypeExprSbvp","s11SwiftSyntax0B4NodeV11asArrayExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asArrayTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asArrowExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asAttributeAA0eB0VSgvp","s11SwiftSyntax0B4NodeV11asAwaitExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asBreakStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asCatchItemAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asClassDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asCodeBlockAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asDeferStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asElseBlockAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asForInStmtAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV11asGuardStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asInOutExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV11asThrowStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asTokenListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asTupleExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asTupleTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asWhileStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asYieldListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11asYieldStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV11descriptionSSvp","s11SwiftSyntax0B4NodeV11endPositionAA08AbsoluteE0Vvp","s11SwiftSyntax0B4NodeV11isArrayExprSbvp","s11SwiftSyntax0B4NodeV11isArrayTypeSbvp","s11SwiftSyntax0B4NodeV11isArrowExprSbvp","s11SwiftSyntax0B4NodeV11isAttributeSbvp","s11SwiftSyntax0B4NodeV11isAwaitExprSbvp","s11SwiftSyntax0B4NodeV11isBreakStmtSbvp","s11SwiftSyntax0B4NodeV11isCatchItemSbvp","s11SwiftSyntax0B4NodeV11isClassDeclSbvp","s11SwiftSyntax0B4NodeV11isCodeBlockSbvp","s11SwiftSyntax0B4NodeV11isDeferStmtSbvp","s11SwiftSyntax0B4NodeV11isElseBlockSbvp","s11SwiftSyntax0B4NodeV11isForInStmtSbvp","s11SwiftSyntax0B4NodeV11isGuardStmtSbvp","s11SwiftSyntax0B4NodeV11isInOutExprSbvp","s11SwiftSyntax0B4NodeV11isThrowStmtSbvp","s11SwiftSyntax0B4NodeV11isTokenListSbvp","s11SwiftSyntax0B4NodeV11isTupleExprSbvp","s11SwiftSyntax0B4NodeV11isTupleTypeSbvp","s11SwiftSyntax0B4NodeV11isWhileStmtSbvp","s11SwiftSyntax0B4NodeV11isYieldListSbvp","s11SwiftSyntax0B4NodeV11isYieldStmtSbvp","s11SwiftSyntax0B4NodeV11totalLengthAA06SourceE0Vvp","s11SwiftSyntax0B4NodeV12asAccessPathAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12asImportDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12asReturnStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12asSourceFileAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12asStructDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12asSwitchCaseAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12asSwitchStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV12isAccessPathSbvp","s11SwiftSyntax0B4NodeV12isImportDeclSbvp","s11SwiftSyntax0B4NodeV12isReturnStmtSbvp","s11SwiftSyntax0B4NodeV12isSourceFileSbvp","s11SwiftSyntax0B4NodeV12isStructDeclSbvp","s11SwiftSyntax0B4NodeV12isSwitchCaseSbvp","s11SwiftSyntax0B4NodeV12isSwitchStmtSbvp","s11SwiftSyntax0B4NodeV13asCatchClauseAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asClosureExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asKeyPathExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV13asTernaryExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asUnknownDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asUnknownExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asUnknownStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asUnknownTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13asWhereClauseAA0efB0VSgvp","s11SwiftSyntax0B4NodeV13isCatchClauseSbvp","s11SwiftSyntax0B4NodeV13isClosureExprSbvp","s11SwiftSyntax0B4NodeV13isKeyPathExprSbvp","s11SwiftSyntax0B4NodeV13isTernaryExprSbvp","s11SwiftSyntax0B4NodeV13isUnknownDeclSbvp","s11SwiftSyntax0B4NodeV13isUnknownExprSbvp","s11SwiftSyntax0B4NodeV13isUnknownStmtSbvp","s11SwiftSyntax0B4NodeV13isUnknownTypeSbvp","s11SwiftSyntax0B4NodeV13isWhereClauseSbvp","s11SwiftSyntax0B4NodeV14asAccessorDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asAccessorListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asArrayElementAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asCaseItemListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV14asClosureParamAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asContinueStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asDeclModifierAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asEnumCaseDeclAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV14asFunctionDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asFunctionTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asIfConfigDeclAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV14asMetatypeTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asModifierListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asObjCSelectorAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asOperatorDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asOptionalTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asProtocolDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asReturnClauseAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asSequenceExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asSuperRefExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV14asTuplePatternAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asVariableDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14asVersionTupleAA0efB0VSgvp","s11SwiftSyntax0B4NodeV14isAccessorDeclSbvp","s11SwiftSyntax0B4NodeV14isAccessorListSbvp","s11SwiftSyntax0B4NodeV14isArrayElementSbvp","s11SwiftSyntax0B4NodeV14isCaseItemListSbvp","s11SwiftSyntax0B4NodeV14isClosureParamSbvp","s11SwiftSyntax0B4NodeV14isContinueStmtSbvp","s11SwiftSyntax0B4NodeV14isDeclModifierSbvp","s11SwiftSyntax0B4NodeV14isEnumCaseDeclSbvp","s11SwiftSyntax0B4NodeV14isFunctionDeclSbvp","s11SwiftSyntax0B4NodeV14isFunctionTypeSbvp","s11SwiftSyntax0B4NodeV14isIfConfigDeclSbvp","s11SwiftSyntax0B4NodeV14isMetatypeTypeSbvp","s11SwiftSyntax0B4NodeV14isModifierListSbvp","s11SwiftSyntax0B4NodeV14isObjCSelectorSbvp","s11SwiftSyntax0B4NodeV14isOperatorDeclSbvp","s11SwiftSyntax0B4NodeV14isOptionalTypeSbvp","s11SwiftSyntax0B4NodeV14isProtocolDeclSbvp","s11SwiftSyntax0B4NodeV14isReturnClauseSbvp","s11SwiftSyntax0B4NodeV14isSequenceExprSbvp","s11SwiftSyntax0B4NodeV14isSuperRefExprSbvp","s11SwiftSyntax0B4NodeV14isTuplePatternSbvp","s11SwiftSyntax0B4NodeV14isVariableDeclSbvp","s11SwiftSyntax0B4NodeV14isVersionTupleSbvp","s11SwiftSyntax0B4NodeV15asAccessorBlockAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asAsTypePatternAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asAttributeListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asCatchItemListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asCodeBlockItemAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asExtensionDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asInheritedTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asIsTypePatternAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asObjcNamePieceAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asPoundFileExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asPoundLineExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV15asStringSegmentAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asSubscriptDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asSubscriptExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15asTypealiasDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV15isAccessorBlockSbvp","s11SwiftSyntax0B4NodeV15isAsTypePatternSbvp","s11SwiftSyntax0B4NodeV15isAttributeListSbvp","s11SwiftSyntax0B4NodeV15isCatchItemListSbvp","s11SwiftSyntax0B4NodeV15isCodeBlockItemSbvp","s11SwiftSyntax0B4NodeV15isExtensionDeclSbvp","s11SwiftSyntax0B4NodeV15isInheritedTypeSbvp","s11SwiftSyntax0B4NodeV15isIsTypePatternSbvp","s11SwiftSyntax0B4NodeV15isObjcNamePieceSbvp","s11SwiftSyntax0B4NodeV15isPoundFileExprSbvp","s11SwiftSyntax0B4NodeV15isPoundLineExprSbvp","s11SwiftSyntax0B4NodeV15isStringSegmentSbvp","s11SwiftSyntax0B4NodeV15isSubscriptDeclSbvp","s11SwiftSyntax0B4NodeV15isSubscriptExprSbvp","s11SwiftSyntax0B4NodeV15isTypealiasDeclSbvp","s11SwiftSyntax0B4NodeV16asAssignmentExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asAttributedTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asDictionaryExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asDictionaryTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asExpressionStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asIdentifierExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asIdentifierListAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asIfConfigClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV16asMemberDeclListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV16asNilLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV16asPatternBindingAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asPoundErrorDeclAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV16asSpecializeExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asSwitchCaseListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV16asTypeAnnotationAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16asUnknownPatternAA0efB0VSgvp","s11SwiftSyntax0B4NodeV16isAssignmentExprSbvp","s11SwiftSyntax0B4NodeV16isAttributedTypeSbvp","s11SwiftSyntax0B4NodeV16isDictionaryExprSbvp","s11SwiftSyntax0B4NodeV16isDictionaryTypeSbvp","s11SwiftSyntax0B4NodeV16isExpressionStmtSbvp","s11SwiftSyntax0B4NodeV16isIdentifierExprSbvp","s11SwiftSyntax0B4NodeV16isIdentifierListSbvp","s11SwiftSyntax0B4NodeV16isIfConfigClauseSbvp","s11SwiftSyntax0B4NodeV16isMemberDeclListSbvp","s11SwiftSyntax0B4NodeV16isNilLiteralExprSbvp","s11SwiftSyntax0B4NodeV16isPatternBindingSbvp","s11SwiftSyntax0B4NodeV16isPoundErrorDeclSbvp","s11SwiftSyntax0B4NodeV16isSpecializeExprSbvp","s11SwiftSyntax0B4NodeV16isSwitchCaseListSbvp","s11SwiftSyntax0B4NodeV16isTypeAnnotationSbvp","s11SwiftSyntax0B4NodeV16isUnknownPatternSbvp","s11SwiftSyntax0B4NodeV17asCatchClauseListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asCompositionTypeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asCustomAttributeAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asDeclarationStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asEnumCaseElementAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asEnumCasePatternAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asFallthroughStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asForcedValueExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asGenericArgumentAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asInitializerDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asKeyPathBaseExprAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV17asMemberDeclBlockAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asObjcKeyPathExprAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV17asOptionalPatternAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asParameterClauseAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17asPoundAssertStmtAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asPoundColumnExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asPoundFileIDExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asRepeatWhileStmtAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asSwitchCaseLabelAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV17asWildcardPatternAA0efB0VSgvp","s11SwiftSyntax0B4NodeV17isCatchClauseListSbvp","s11SwiftSyntax0B4NodeV17isCompositionTypeSbvp","s11SwiftSyntax0B4NodeV17isCustomAttributeSbvp","s11SwiftSyntax0B4NodeV17isDeclarationStmtSbvp","s11SwiftSyntax0B4NodeV17isEnumCaseElementSbvp","s11SwiftSyntax0B4NodeV17isEnumCasePatternSbvp","s11SwiftSyntax0B4NodeV17isFallthroughStmtSbvp","s11SwiftSyntax0B4NodeV17isForcedValueExprSbvp","s11SwiftSyntax0B4NodeV17isGenericArgumentSbvp","s11SwiftSyntax0B4NodeV17isInitializerDeclSbvp","s11SwiftSyntax0B4NodeV17isKeyPathBaseExprSbvp","s11SwiftSyntax0B4NodeV17isMemberDeclBlockSbvp","s11SwiftSyntax0B4NodeV17isObjcKeyPathExprSbvp","s11SwiftSyntax0B4NodeV17isOptionalPatternSbvp","s11SwiftSyntax0B4NodeV17isParameterClauseSbvp","s11SwiftSyntax0B4NodeV17isPoundAssertStmtSbvp","s11SwiftSyntax0B4NodeV17isPoundColumnExprSbvp","s11SwiftSyntax0B4NodeV17isPoundFileIDExprSbvp","s11SwiftSyntax0B4NodeV17isRepeatWhileStmtSbvp","s11SwiftSyntax0B4NodeV17isSwitchCaseLabelSbvp","s11SwiftSyntax0B4NodeV17isWildcardPatternSbvp","s11SwiftSyntax0B4NodeV18asArrayElementListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asClosureParamListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asClosureSignatureAA0efB0VSgvp","s11SwiftSyntax0B4NodeV18asConditionElementAA0efB0VSgvp","s11SwiftSyntax0B4NodeV18asDeclNameArgumentAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asFloatLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asFunctionCallExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asFunctionDeclNameAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asGenericParameterAA0efB0VSgvp","s11SwiftSyntax0B4NodeV18asMemberAccessExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asObjcSelectorExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asPostfixUnaryExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asPoundWarningDeclAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asRegexLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asTupleExprElementAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18asTupleTypeElementAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV18isArrayElementListSbvp","s11SwiftSyntax0B4NodeV18isClosureParamListSbvp","s11SwiftSyntax0B4NodeV18isClosureSignatureSbvp","s11SwiftSyntax0B4NodeV18isConditionElementSbvp","s11SwiftSyntax0B4NodeV18isDeclNameArgumentSbvp","s11SwiftSyntax0B4NodeV18isFloatLiteralExprSbvp","s11SwiftSyntax0B4NodeV18isFunctionCallExprSbvp","s11SwiftSyntax0B4NodeV18isFunctionDeclNameSbvp","s11SwiftSyntax0B4NodeV18isGenericParameterSbvp","s11SwiftSyntax0B4NodeV18isMemberAccessExprSbvp","s11SwiftSyntax0B4NodeV18isObjcSelectorExprSbvp","s11SwiftSyntax0B4NodeV18isPostfixUnaryExprSbvp","s11SwiftSyntax0B4NodeV18isPoundWarningDeclSbvp","s11SwiftSyntax0B4NodeV18isRegexLiteralExprSbvp","s11SwiftSyntax0B4NodeV18isTupleExprElementSbvp","s11SwiftSyntax0B4NodeV18isTupleTypeElementSbvp","s11SwiftSyntax0B4NodeV19asAccessorParameterAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asAvailabilityEntryAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asCodeBlockItemListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV19asDeclNameArgumentsAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19asDeinitializerDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asDictionaryElementAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asExpressionPatternAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asExpressionSegmentAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asFunctionParameterAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asFunctionSignatureAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asIdentifierPatternAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asInheritedTypeListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19asInitializerClauseAA0efB0VSgvp","s11SwiftSyntax0B4NodeV19asNonEmptyTokenListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV19asObjCSelectorPieceAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19asObjectLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19asPoundFilePathExprAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV19asPoundFunctionExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19asQualifiedDeclNameAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19asStringLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV19isAccessorParameterSbvp","s11SwiftSyntax0B4NodeV19isAvailabilityEntrySbvp","s11SwiftSyntax0B4NodeV19isCodeBlockItemListSbvp","s11SwiftSyntax0B4NodeV19isDeclNameArgumentsSbvp","s11SwiftSyntax0B4NodeV19isDeinitializerDeclSbvp","s11SwiftSyntax0B4NodeV19isDictionaryElementSbvp","s11SwiftSyntax0B4NodeV19isExpressionPatternSbvp","s11SwiftSyntax0B4NodeV19isExpressionSegmentSbvp","s11SwiftSyntax0B4NodeV19isFunctionParameterSbvp","s11SwiftSyntax0B4NodeV19isFunctionSignatureSbvp","s11SwiftSyntax0B4NodeV19isIdentifierPatternSbvp","s11SwiftSyntax0B4NodeV19isInheritedTypeListSbvp","s11SwiftSyntax0B4NodeV19isInitializerClauseSbvp","s11SwiftSyntax0B4NodeV19isNonEmptyTokenListSbvp","s11SwiftSyntax0B4NodeV19isObjCSelectorPieceSbvp","s11SwiftSyntax0B4NodeV19isObjectLiteralExprSbvp","s11SwiftSyntax0B4NodeV19isPoundFilePathExprSbvp","s11SwiftSyntax0B4NodeV19isPoundFunctionExprSbvp","s11SwiftSyntax0B4NodeV19isQualifiedDeclNameSbvp","s11SwiftSyntax0B4NodeV19isStringLiteralExprSbvp","s11SwiftSyntax0B4NodeV20asAssociatedtypeDeclAA0efB0VSgvp","s11SwiftSyntax0B4NodeV20asBinaryOperatorExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asBooleanLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asClosureCaptureItemAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asElseIfContinuationAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asGenericRequirementAA0efB0VSgvp","s11SwiftSyntax0B4NodeV20asGenericWhereClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asIfConfigClauseListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV20asIntegerLiteralExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asMemberDeclListItemAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV20asPatternBindingListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asPoundDsohandleExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asPrefixOperatorExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20asSwitchDefaultLabelAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV20isAssociatedtypeDeclSbvp","s11SwiftSyntax0B4NodeV20isBinaryOperatorExprSbvp","s11SwiftSyntax0B4NodeV20isBooleanLiteralExprSbvp","s11SwiftSyntax0B4NodeV20isClosureCaptureItemSbvp","s11SwiftSyntax0B4NodeV20isElseIfContinuationSbvp","s11SwiftSyntax0B4NodeV20isGenericRequirementSbvp","s11SwiftSyntax0B4NodeV20isGenericWhereClauseSbvp","s11SwiftSyntax0B4NodeV20isIfConfigClauseListSbvp","s11SwiftSyntax0B4NodeV20isIntegerLiteralExprSbvp","s11SwiftSyntax0B4NodeV20isMemberDeclListItemSbvp","s11SwiftSyntax0B4NodeV20isPatternBindingListSbvp","s11SwiftSyntax0B4NodeV20isPoundDsohandleExprSbvp","s11SwiftSyntax0B4NodeV20isPrefixOperatorExprSbvp","s11SwiftSyntax0B4NodeV20isSwitchDefaultLabelSbvp","s11SwiftSyntax0B4NodeV21asAccessLevelModifierAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asAccessPathComponentAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asEnumCaseElementListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV21asGenericArgumentListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asPostfixIfConfigExprAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV21asPoundSourceLocationAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asPrecedenceGroupDeclAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asSameTypeRequirementAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asTargetFunctionEntryAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asTuplePatternElementAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21asValueBindingPatternAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV21isAccessLevelModifierSbvp","s11SwiftSyntax0B4NodeV21isAccessPathComponentSbvp","s11SwiftSyntax0B4NodeV21isEnumCaseElementListSbvp","s11SwiftSyntax0B4NodeV21isGenericArgumentListSbvp","s11SwiftSyntax0B4NodeV21isPostfixIfConfigExprSbvp","s11SwiftSyntax0B4NodeV21isPoundSourceLocationSbvp","s11SwiftSyntax0B4NodeV21isPrecedenceGroupDeclSbvp","s11SwiftSyntax0B4NodeV21isSameTypeRequirementSbvp","s11SwiftSyntax0B4NodeV21isTargetFunctionEntrySbvp","s11SwiftSyntax0B4NodeV21isTuplePatternElementSbvp","s11SwiftSyntax0B4NodeV21isValueBindingPatternSbvp","s11SwiftSyntax0B4NodeV22asAvailabilityArgumentAA0efB0VSgvp","s11SwiftSyntax0B4NodeV22asAvailabilitySpecListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asClassRestrictionTypeAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asConditionElementListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asDeclNameArgumentListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV22asGenericParameterListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asMemberTypeIdentifierAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asOptionalChainingExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asSimpleTypeIdentifierAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV22asTupleExprElementListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV22asTupleTypeElementListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV22isAvailabilityArgumentSbvp","s11SwiftSyntax0B4NodeV22isAvailabilitySpecListSbvp","s11SwiftSyntax0B4NodeV22isClassRestrictionTypeSbvp","s11SwiftSyntax0B4NodeV22isConditionElementListSbvp","s11SwiftSyntax0B4NodeV22isDeclNameArgumentListSbvp","s11SwiftSyntax0B4NodeV22isGenericParameterListSbvp","s11SwiftSyntax0B4NodeV22isMemberTypeIdentifierSbvp","s11SwiftSyntax0B4NodeV22isOptionalChainingExprSbvp","s11SwiftSyntax0B4NodeV22isSimpleTypeIdentifierSbvp","s11SwiftSyntax0B4NodeV22isTupleExprElementListSbvp","s11SwiftSyntax0B4NodeV22isTupleTypeElementListSbvp","s11SwiftSyntax0B4NodeV23asAvailabilityConditionAA0efB0VSgvp","s11SwiftSyntax0B4NodeV23asDictionaryElementListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asDiscardAssignmentExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asEditorPlaceholderExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asFunctionParameterListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asGenericArgumentClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asPrimaryAssociatedTypeAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asStringLiteralSegmentsAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asSymbolicReferenceExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asTypeInheritanceClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asTypeInitializerClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23asUnresolvedPatternExprAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV23isAvailabilityConditionSbvp","s11SwiftSyntax0B4NodeV23isDictionaryElementListSbvp","s11SwiftSyntax0B4NodeV23isDiscardAssignmentExprSbvp","s11SwiftSyntax0B4NodeV23isEditorPlaceholderExprSbvp","s11SwiftSyntax0B4NodeV23isFunctionParameterListSbvp","s11SwiftSyntax0B4NodeV23isGenericArgumentClauseSbvp","s11SwiftSyntax0B4NodeV23isPrimaryAssociatedTypeSbvp","s11SwiftSyntax0B4NodeV23isStringLiteralSegmentsSbvp","s11SwiftSyntax0B4NodeV23isSymbolicReferenceExprSbvp","s11SwiftSyntax0B4NodeV23isTypeInheritanceClauseSbvp","s11SwiftSyntax0B4NodeV23isTypeInitializerClauseSbvp","s11SwiftSyntax0B4NodeV23isUnresolvedPatternExprSbvp","s11SwiftSyntax0B4NodeV24asClosureCaptureItemListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV24asCompositionTypeElementAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV24asConformanceRequirementAA0efB0VSgvp","s11SwiftSyntax0B4NodeV24asDifferentiabilityParamAA0efB0VSgvp","s11SwiftSyntax0B4NodeV24asGenericParameterClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV24asGenericRequirementListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV24asLabeledSpecializeEntryAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV24isClosureCaptureItemListSbvp","s11SwiftSyntax0B4NodeV24isCompositionTypeElementSbvp","s11SwiftSyntax0B4NodeV24isConformanceRequirementSbvp","s11SwiftSyntax0B4NodeV24isDifferentiabilityParamSbvp","s11SwiftSyntax0B4NodeV24isGenericParameterClauseSbvp","s11SwiftSyntax0B4NodeV24isGenericRequirementListSbvp","s11SwiftSyntax0B4NodeV24isLabeledSpecializeEntrySbvp","s11SwiftSyntax0B4NodeV25asClosureCaptureSignatureAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV25asDifferentiabilityParamsAA0efB0VSgvp","s11SwiftSyntax0B4NodeV25asPoundSourceLocationArgsAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV25asPrecedenceGroupNameListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV25asPrecedenceGroupRelationAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV25asTuplePatternElementListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV25asUnavailabilityConditionAA0efB0VSgvp","s11SwiftSyntax0B4NodeV25isClosureCaptureSignatureSbvp","s11SwiftSyntax0B4NodeV25isDifferentiabilityParamsSbvp","s11SwiftSyntax0B4NodeV25isPoundSourceLocationArgsSbvp","s11SwiftSyntax0B4NodeV25isPrecedenceGroupNameListSbvp","s11SwiftSyntax0B4NodeV25isPrecedenceGroupRelationSbvp","s11SwiftSyntax0B4NodeV25isTuplePatternElementListSbvp","s11SwiftSyntax0B4NodeV25isUnavailabilityConditionSbvp","s11SwiftSyntax0B4NodeV26asMatchingPatternConditionAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV26asOptionalBindingConditionAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV26isMatchingPatternConditionSbvp","s11SwiftSyntax0B4NodeV26isOptionalBindingConditionSbvp","s11SwiftSyntax0B4NodeV27asPrecedenceGroupAssignmentAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV27asPrimaryAssociatedTypeListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV27isPrecedenceGroupAssignmentSbvp","s11SwiftSyntax0B4NodeV27isPrimaryAssociatedTypeListSbvp","s11SwiftSyntax0B4NodeV28asCompositionTypeElementListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV28asDifferentiabilityParamListAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV28asOperatorPrecedenceAndTypesAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV28asPrecedenceGroupNameElementAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV28isCompositionTypeElementListSbvp","s11SwiftSyntax0B4NodeV28isDifferentiabilityParamListSbvp","s11SwiftSyntax0B4NodeV28isOperatorPrecedenceAndTypesSbvp","s11SwiftSyntax0B4NodeV28isPrecedenceGroupNameElementSbvp","s11SwiftSyntax0B4NodeV29asAvailabilityLabeledArgumentAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV29asSpecializeAttributeSpecListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV29isAvailabilityLabeledArgumentSbvp","s11SwiftSyntax0B4NodeV29isSpecializeAttributeSpecListSbvp","s11SwiftSyntax0B4NodeV2idAA0B10IdentifierVvp","s11SwiftSyntax0B4NodeV30asImplementsAttributeArgumentsAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV30asNamedAttributeStringArgumentAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV30asPrecedenceGroupAssociativityAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV30asPrecedenceGroupAttributeListAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV30isImplementsAttributeArgumentsSbvp","s11SwiftSyntax0B4NodeV30isNamedAttributeStringArgumentSbvp","s11SwiftSyntax0B4NodeV30isPrecedenceGroupAssociativitySbvp","s11SwiftSyntax0B4NodeV30isPrecedenceGroupAttributeListSbvp","s11SwiftSyntax0B4NodeV31asDifferentiabilityParamsClauseAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV31isDifferentiabilityParamsClauseSbvp","s11SwiftSyntax0B4NodeV32asAvailabilityVersionRestrictionAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV32asMultipleTrailingClosureElementAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV32isAvailabilityVersionRestrictionSbvp","s11SwiftSyntax0B4NodeV32isMultipleTrailingClosureElementSbvp","s11SwiftSyntax0B4NodeV33asImplicitlyUnwrappedOptionalTypeAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV33isImplicitlyUnwrappedOptionalTypeSbvp","s11SwiftSyntax0B4NodeV34asDifferentiableAttributeArgumentsAA0efgB0VSgvp","s11SwiftSyntax0B4NodeV34isDifferentiableAttributeArgumentsSbvp","s11SwiftSyntax0B4NodeV36asMultipleTrailingClosureElementListAA0efghiB0VSgvp","s11SwiftSyntax0B4NodeV36isMultipleTrailingClosureElementListSbvp","s11SwiftSyntax0B4NodeV42asDerivativeRegistrationAttributeArgumentsAA0efghB0VSgvp","s11SwiftSyntax0B4NodeV42isDerivativeRegistrationAttributeArgumentsSbvp","s11SwiftSyntax0B4NodeV6parentACSgvp","s11SwiftSyntax0B4NodeV8asAsExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV8asDoStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV8asIfStmtAA0efB0VSgvp","s11SwiftSyntax0B4NodeV8asIsExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV8byteSizeSivp","s11SwiftSyntax0B4NodeV8isAsExprSbvp","s11SwiftSyntax0B4NodeV8isDoStmtSbvp","s11SwiftSyntax0B4NodeV8isIfStmtSbvp","s11SwiftSyntax0B4NodeV8isIsExprSbvp","s11SwiftSyntax0B4NodeV8positionAA16AbsolutePositionVvp","s11SwiftSyntax0B4NodeV9asTryExprAA0efB0VSgvp","s11SwiftSyntax0B4NodeV9asUnknownAA0eB0VSgvp","s11SwiftSyntax0B4NodeV9byteRangeAA010ByteSourceE0Vvp","s11SwiftSyntax0B4NodeV9isTryExprSbvp","s11SwiftSyntax0B4NodeV9isUnknownSbvp","s11SwiftSyntax0B8ChildrenV10startIndexAA0bcE0Vvp","s11SwiftSyntax0B8ChildrenV8endIndexAA0bcE0Vvp","s11SwiftSyntax0B8ProtocolP14syntaxNodeTypeAaB_pXpvp","s11SwiftSyntax0B8ProtocolPAAE10firstTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE10isImplicitSbvp","s11SwiftSyntax0B8ProtocolPAAE11descriptionSSvp","s11SwiftSyntax0B8ProtocolPAAE11endPositionAA08AbsoluteE0Vvp","s11SwiftSyntax0B8ProtocolPAAE11totalLengthAA06SourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE12isCollectionSbvp","s11SwiftSyntax0B8ProtocolPAAE13contentLengthAA06SourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE13indexInParentSivp","s11SwiftSyntax0B8ProtocolPAAE13leadingTriviaAA0E0VSgvp","s11SwiftSyntax0B8ProtocolPAAE13previousTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE14trailingTriviaAA0E0VSgvp","s11SwiftSyntax0B8ProtocolPAAE15classificationsAA0B15ClassificationsVvp","s11SwiftSyntax0B8ProtocolPAAE16debugDescriptionSSvp","s11SwiftSyntax0B8ProtocolPAAE19leadingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax0B8ProtocolPAAE20trailingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax0B8ProtocolPAAE27byteSizeAfterTrimmingTriviaSivp","s11SwiftSyntax0B8ProtocolPAAE2idAA0B10IdentifierVvp","s11SwiftSyntax0B8ProtocolPAAE31endPositionBeforeTrailingTriviaAA08AbsoluteE0Vvp","s11SwiftSyntax0B8ProtocolPAAE34positionAfterSkippingLeadingTriviaAA16AbsolutePositionVvp","s11SwiftSyntax0B8ProtocolPAAE4rootAA0B0Vvp","s11SwiftSyntax0B8ProtocolPAAE5indexAA0B13ChildrenIndexVvp","s11SwiftSyntax0B8ProtocolPAAE6parentAA0B0VSgvp","s11SwiftSyntax0B8ProtocolPAAE6tokensAA13TokenSequenceVvp","s11SwiftSyntax0B8ProtocolPAAE7isTokenSbvp","s11SwiftSyntax0B8ProtocolPAAE8byteSizeSivp","s11SwiftSyntax0B8ProtocolPAAE8childrenAA0B8ChildrenVvp","s11SwiftSyntax0B8ProtocolPAAE8positionAA16AbsolutePositionVvp","s11SwiftSyntax0B8ProtocolPAAE9byteRangeAA010ByteSourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE9hasParentSbvp","s11SwiftSyntax0B8ProtocolPAAE9isMissingSbvp","s11SwiftSyntax0B8ProtocolPAAE9isPresentSbvp","s11SwiftSyntax0B8ProtocolPAAE9isUnknownSbvp","s11SwiftSyntax0B8ProtocolPAAE9lastTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE9nextTokenAA0eB0VSgvp","s11SwiftSyntax10SourceEditV16replacementRangeAA04BytecF0Vvp","s11SwiftSyntax10SourceEditV17replacementLengthSivp","s11SwiftSyntax10SourceEditV5rangeAA04ByteC5RangeVvp","s11SwiftSyntax10SourceEditV6lengthSivp","s11SwiftSyntax10SourceEditV6offsetSivp","s11SwiftSyntax10SourceEditV9endOffsetSivp","s11SwiftSyntax11SourceRangeV16debugDescriptionSSvp","s11SwiftSyntax11SourceRangeV3endAA0C8LocationVvp","s11SwiftSyntax11SourceRangeV5startAA0C8LocationVvp","s11SwiftSyntax11TriviaPieceO12sourceLengthAA06SourceF0Vvp","s11SwiftSyntax11TriviaPieceO16debugDescriptionSSvp","s11SwiftSyntax12SourceLengthV04utf8D0Sivp","s11SwiftSyntax13TokenSequenceV12customMirrors0F0Vvp","s11SwiftSyntax14SourceLocationV16debugDescriptionSSvp","s11SwiftSyntax14SourceLocationV4fileSSSgvp","s11SwiftSyntax14SourceLocationV4lineSiSgvp","s11SwiftSyntax14SourceLocationV6columnSiSgvp","s11SwiftSyntax14SourceLocationV6offsetSivp","s11SwiftSyntax15ByteSourceRangeV6lengthSivp","s11SwiftSyntax15ByteSourceRangeV6offsetSivp","s11SwiftSyntax15ByteSourceRangeV7isEmptySbvp","s11SwiftSyntax15ByteSourceRangeV9endOffsetSivp","s11SwiftSyntax15ConcurrentEditsV5editsSayAA10SourceEditVGvp","s11SwiftSyntax16AbsolutePositionV10utf8OffsetSivp","s11SwiftSyntax21ReversedTokenSequenceV12customMirrors0G0Vvp","s11SwiftSyntax35IncrementalParseReusedNodeCollectorC13rangeAndNodesSayAA15ByteSourceRangeV_AA0bF0VtGvp","s11SwiftSyntax6TriviaV10startIndexSivp","s11SwiftSyntax6TriviaV12sourceLengthAA06SourceE0Vvp","s11SwiftSyntax6TriviaV8byteSizeSivp","s11SwiftSyntax6TriviaV8endIndexSivp","s11SwiftSyntax9TokenKindO9isKeywordSbvp","s11SwiftSyntax0B7FactoryO011makeUnknownB06tokensAA0eB0VSayAA05TokenB0VG_tFZ","s11SwiftSyntax0B7FactoryO10makeAsExpr5asTok25questionOrExclamationMark8typeNameAA0efB0VAA05TokenB0V_AKSgAA04TypeB0VtFZ","s11SwiftSyntax0B7FactoryO10makeDoStmt9labelName0G5Colon9doKeyword4body12catchClausesAA0efB0VAA05TokenB0VSg_AnmA09CodeBlockB0VAA015CatchClauseListB0VSgtFZ","s11SwiftSyntax0B7FactoryO10makeIfStmt9labelName0G5Colon9ifKeyword10conditions4body04elseK00N4BodyAA0efB0VAA05TokenB0VSg_ApoA020ConditionElementListB0VAA09CodeBlockB0VApA0B0VSgtFZ","s11SwiftSyntax0B7FactoryO10makeIsExpr5isTok8typeNameAA0efB0VAA05TokenB0V_AA04TypeB0VtFZ","s11SwiftSyntax0B7FactoryO11makeTryExpr10tryKeyword25questionOrExclamationMark10expressionAA0efB0VAA05TokenB0V_AKSgAA0fB0VtFZ","s11SwiftSyntax0B7FactoryO11makeUnknown_13leadingTrivia08trailingG0AA05TokenB0VSS_AA0G0VAJtFZ","s11SwiftSyntax0B7FactoryO12makeCaseItem7pattern11whereClause13trailingCommaAA0efB0VAA07PatternB0V_AA05WhereiB0VSgAA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO12makeDeclName08declBaseF00gF9ArgumentsAA0efB0VAA0B0V_AA0efiB0VSgtFZ","s11SwiftSyntax0B7FactoryO12makeEnumDecl10attributes9modifiers11enumKeyword10identifier17genericParameters17inheritanceClause0l5WhereO07membersAA0efB0VAA013AttributeListB0VSg_AA08ModifiersB0VSgAA05TokenB0VAvA016GenericParameteroB0VSgAA015TypeInheritanceoB0VSgAA0vpoB0VSgAA06Memberf5BlockB0VtFZ","s11SwiftSyntax0B7FactoryO12makeExprListyAA0efB0VSayAA0eB0VGFZ","s11SwiftSyntax0B7FactoryO12makeObjcNameyAA0efB0VSayAA0ef5PieceB0VGFZ","s11SwiftSyntax0B7FactoryO12makeSomeType13someSpecifier04baseF0AA0efB0VAA05TokenB0V_AA0fB0VtFZ","s11SwiftSyntax0B7FactoryO12makeTypeExpr4typeAA0efB0VAA0eB0V_tFZ","s11SwiftSyntax0B7FactoryO13makeArrayExpr10leftSquare8elements05rightH0AA0efB0VAA05TokenB0V_AA0e11ElementListB0VAKtFZ","s11SwiftSyntax0B7FactoryO13makeArrayType17leftSquareBracket07elementF005righthI0AA0efB0VAA05TokenB0V_AA0fB0VAKtFZ","s11SwiftSyntax0B7FactoryO13makeArrowExpr12asyncKeyword11throwsToken05arrowJ0AA0efB0VAA0jB0VSg_AlKtFZ","s11SwiftSyntax0B7FactoryO13makeAsKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO13makeAttribute11atSignToken13attributeName9leftParen8argument05rightL09tokenListAA0eB0VAA0hB0V_A2NSgAA0B0VSgAoA0hpB0VSgtFZ","s11SwiftSyntax0B7FactoryO13makeAwaitExpr12awaitKeyword10expressionAA0efB0VAA05TokenB0V_AA0fB0VtFZ","s11SwiftSyntax0B7FactoryO13makeBreakStmt12breakKeyword5labelAA0efB0VAA05TokenB0V_AJSgtFZ","s11SwiftSyntax0B7FactoryO13makeCatchItem7pattern11whereClause13trailingCommaAA0efB0VAA07PatternB0VSg_AA05WhereiB0VSgAA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO13makeClassDecl10attributes9modifiers19classOrActorKeyword10identifier22genericParameterClause011inheritanceP00n5WhereP07membersAA0efB0VAA013AttributeListB0VSg_AA08ModifieruB0VSgAA05TokenB0VAvA07GenericopB0VSgAA015TypeInheritancepB0VSgAA0xrpB0VSgAA06Memberf5BlockB0VtFZ","s11SwiftSyntax0B7FactoryO13makeCodeBlock9leftBrace10statements05rightH0AA0efB0VAA05TokenB0V_AA0ef8ItemListB0VAKtFZ","s11SwiftSyntax0B7FactoryO13makeDeferStmt12deferKeyword4bodyAA0efB0VAA05TokenB0V_AA09CodeBlockB0VtFZ","s11SwiftSyntax0B7FactoryO13makeDoKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO13makeElseBlock11elseKeyword4bodyAA0efB0VAA05TokenB0V_AA04CodefB0VtFZ","s11SwiftSyntax0B7FactoryO13makeForInStmt9labelName0H5Colon10forKeyword03tryL005awaitL004caseL07pattern14typeAnnotation02inL012sequenceExpr11whereClause4bodyAA0efgB0VAA05TokenB0VSg_Aut3uA07PatternB0VAA04TyperB0VSgAtA0uB0VAA05WherewB0VSgAA09CodeBlockB0VtFZ","s11SwiftSyntax0B7FactoryO13makeGuardStmt12guardKeyword10conditions04elseH04bodyAA0efB0VAA05TokenB0V_AA020ConditionElementListB0VAlA09CodeBlockB0VtFZ","s11SwiftSyntax0B7FactoryO13makeIfKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO13makeInKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO13makeInOutExpr9ampersand10expressionAA0efgB0VAA05TokenB0V_AA0gB0VtFZ","s11SwiftSyntax0B7FactoryO13makeIsKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO13makeThrowStmt12throwKeyword10expressionAA0efB0VAA05TokenB0V_AA04ExprB0VtFZ","s11SwiftSyntax0B7FactoryO13makeTokenListyAA0efB0VSayAA0eB0VGFZ","s11SwiftSyntax0B7FactoryO13makeTupleExpr9leftParen11elementList05rightH0AA0efB0VAA05TokenB0V_AA0ef7ElementjB0VAKtFZ","s11SwiftSyntax0B7FactoryO13makeTupleType9leftParen8elements05rightH0AA0efB0VAA05TokenB0V_AA0ef11ElementListB0VAKtFZ","s11SwiftSyntax0B7FactoryO13makeTypeToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO13makeWhileStmt9labelName0G5Colon12whileKeyword10conditions4bodyAA0efB0VAA05TokenB0VSg_AnmA020ConditionElementListB0VAA09CodeBlockB0VtFZ","s11SwiftSyntax0B7FactoryO13makeYieldList9leftParen07elementF013trailingComma05rightH0AA0efB0VAA05TokenB0V_AA04ExprfB0VALSgALtFZ","s11SwiftSyntax0B7FactoryO13makeYieldStmt12yieldKeyword6yieldsAA0efB0VAA05TokenB0V_AA0B0VtFZ","s11SwiftSyntax0B7FactoryO14makeAccessPathyAA0efB0VSayAA0ef9ComponentB0VGFZ","s11SwiftSyntax0B7FactoryO14makeAnyKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeArrowToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeColonToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeCommaToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeEqualToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeForKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeIdentifier_13leadingTrivia08trailingG0AA05TokenB0VSS_AA0G0VAJtFZ","s11SwiftSyntax0B7FactoryO14makeImportDecl10attributes9modifiers9importTok0I4Kind4pathAA0efB0VAA013AttributeListB0VSg_AA08ModifiernB0VSgAA05TokenB0VASSgAA010AccessPathB0VtFZ","s11SwiftSyntax0B7FactoryO14makeLetKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeNilKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makePoundToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeReturnStmt13returnKeyword10expressionAA0efB0VAA05TokenB0V_AA04ExprB0VSgtFZ","s11SwiftSyntax0B7FactoryO14makeSourceFile10statements8eofTokenAA0efB0VAA017CodeBlockItemListB0V_AA0iB0VtFZ","s11SwiftSyntax0B7FactoryO14makeStructDecl10attributes9modifiers13structKeyword10identifier22genericParameterClause011inheritanceN00l5WhereN07membersAA0efB0VAA013AttributeListB0VSg_AA08ModifiersB0VSgAA05TokenB0VAvA07GenericmnB0VSgAA015TypeInheritancenB0VSgAA0vpnB0VSgAA06Memberf5BlockB0VtFZ","s11SwiftSyntax0B7FactoryO14makeSwitchCase11unknownAttr5label10statementsAA0efB0VAA09AttributeB0VSg_AA0B0VAA017CodeBlockItemListB0VtFZ","s11SwiftSyntax0B7FactoryO14makeSwitchStmt9labelName0G5Colon13switchKeyword10expression9leftBrace5cases05rightN0AA0efB0VAA05TokenB0VSg_ApoA04ExprB0VAoA0e8CaseListB0VAOtFZ","s11SwiftSyntax0B7FactoryO14makeTryKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeVarKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO14makeYieldToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeAtSignToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeBlankAsExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO15makeBlankDoStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO15makeBlankIfStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO15makeBlankIsExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO15makeCaseKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeCatchClause12catchKeyword0G5Items4bodyAA0efB0VAA05TokenB0V_AA0e8ItemListB0VSgAA09CodeBlockB0VtFZ","s11SwiftSyntax0B7FactoryO15makeClosureExpr9leftBrace9signature10statements05rightH0AA0efB0VAA05TokenB0V_AA0e9SignatureB0VSgAA017CodeBlockItemListB0VALtFZ","s11SwiftSyntax0B7FactoryO15makeElseKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeEnumKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeFuncKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeInitKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeKeyPathExpr9backslash04rootG010expressionAA0efgB0VAA05TokenB0V_AA0gB0VSgAMtFZ","s11SwiftSyntax0B7FactoryO15makePeriodToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeSelfKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeTernaryExpr19conditionExpression12questionMark11firstChoice05colonJ006secondL0AA0efB0VAA0fB0V_AA05TokenB0VAmoMtFZ","s11SwiftSyntax0B7FactoryO15makeTrueKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO15makeWhereClause12whereKeyword11guardResultAA0efB0VAA05TokenB0V_AA04ExprB0VtFZ","s11SwiftSyntax0B7FactoryO16makeAccessorDecl10attributes8modifier12accessorKind9parameter12asyncKeyword06throwsM04bodyAA0efB0VAA013AttributeListB0VSg_AA0f8ModifierB0VSgAA05TokenB0VAA0e9ParameterB0VSgAUSgAyA09CodeBlockB0VSgtFZ","s11SwiftSyntax0B7FactoryO16makeAccessorListyAA0efB0VSayAA0e4DeclB0VGFZ","s11SwiftSyntax0B7FactoryO16makeArrayElement10expression13trailingCommaAA0efB0VAA04ExprB0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO16makeBlankTryExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO16makeBreakKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeCaseItemListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO16makeCatchKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeClassKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeClosureParam4name13trailingCommaAA0efB0VAA05TokenB0V_AJSgtFZ","s11SwiftSyntax0B7FactoryO16makeContinueStmt15continueKeyword5labelAA0efB0VAA05TokenB0V_AJSgtFZ","s11SwiftSyntax0B7FactoryO16makeDeclModifier4name15detailLeftParen0H00h5RightJ0AA0efB0VAA05TokenB0V_ALSgA2MtFZ","s11SwiftSyntax0B7FactoryO16makeDeferKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeEnumCaseDecl10attributes9modifiers11caseKeyword8elementsAA0efgB0VAA013AttributeListB0VSg_AA08ModifiernB0VSgAA05TokenB0VAA0ef7ElementnB0VtFZ","s11SwiftSyntax0B7FactoryO16makeFalseKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeFunctionDecl10attributes9modifiers11funcKeyword10identifier22genericParameterClause9signature0l5WhereN04bodyAA0efB0VAA013AttributeListB0VSg_AA08ModifiersB0VSgAA05TokenB0VAvA07GenericmnB0VSgAA0e9SignatureB0VAA0vpnB0VSgAA09CodeBlockB0VSgtFZ","s11SwiftSyntax0B7FactoryO16makeFunctionType9leftParen9arguments05rightH012asyncKeyword016throwsOrRethrowsL05arrow06returnF0AA0efB0VAA05TokenB0V_AA05Tuplef11ElementListB0VA2OSgAroA0fB0VtFZ","s11SwiftSyntax0B7FactoryO16makeGuardKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeIfConfigDecl7clauses10poundEndifAA0efgB0VAA0ef10ClauseListB0V_AA05TokenB0VtFZ","s11SwiftSyntax0B7FactoryO16makeInoutKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeMetatypeType04baseF06period14typeOrProtocolAA0efB0VAA0fB0V_AA05TokenB0VAMtFZ","s11SwiftSyntax0B7FactoryO16makeModifierListyAA0efB0VSayAA04DecleB0VGFZ","s11SwiftSyntax0B7FactoryO16makeObjCSelectoryAA0efB0VSayAA0ef5PieceB0VGFZ","s11SwiftSyntax0B7FactoryO16makeOperatorDecl10attributes9modifiers15operatorKeyword10identifier0I18PrecedenceAndTypesAA0efB0VAA013AttributeListB0VSg_AA08ModifierpB0VSgAA05TokenB0VAsA0elmnB0VSgtFZ","s11SwiftSyntax0B7FactoryO16makeOptionalType07wrappedF012questionMarkAA0efB0VAA0fB0V_AA05TokenB0VtFZ","s11SwiftSyntax0B7FactoryO16makeProtocolDecl10attributes9modifiers15protocolKeyword10identifier17inheritanceClause012genericWhereM07membersAA0efB0VAA013AttributeListB0VSg_AA08ModifierrB0VSgAA05TokenB0VAuA015TypeInheritancemB0VSgAA07GenericomB0VSgAA06Memberf5BlockB0VtFZ","s11SwiftSyntax0B7FactoryO16makeRegexLiteral_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO16makeReturnClause5arrow10returnTypeAA0efB0VAA05TokenB0V_AA0iB0VtFZ","s11SwiftSyntax0B7FactoryO16makeSequenceExpr8elementsAA0efB0VAA0f4ListB0V_tFZ","s11SwiftSyntax0B7FactoryO16makeSuperKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeSuperRefExpr12superKeywordAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO16makeThrowKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeTuplePattern9leftParen8elements05rightH0AA0efB0VAA05TokenB0V_AA0ef11ElementListB0VAKtFZ","s11SwiftSyntax0B7FactoryO16makeVariableDecl10attributes9modifiers15letOrVarKeyword8bindingsAA0efB0VAA013AttributeListB0VSg_AA08ModifieroB0VSgAA05TokenB0VAA014PatternBindingoB0VtFZ","s11SwiftSyntax0B7FactoryO16makeVariableExpr_13leadingTrivia08trailingH0AA010IdentifierfB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO16makeVersionTuple10majorMinor11patchPeriod0iE0AA0efB0VAA0B0V_AA05TokenB0VSgANtFZ","s11SwiftSyntax0B7FactoryO16makeWhereKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO16makeWhileKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeAccessorBlock9leftBrace9accessors05rightH0AA0efB0VAA05TokenB0V_AA0e4ListB0VAKtFZ","s11SwiftSyntax0B7FactoryO17makeAsTypePattern7pattern9asKeyword4typeAA0efgB0VAA0gB0V_AA05TokenB0VAA0fB0VtFZ","s11SwiftSyntax0B7FactoryO17makeAttributeListyAA0efB0VSayAA0B0VGFZ","s11SwiftSyntax0B7FactoryO17makeBacktickToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeBlankCaseItemAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO17makeBlankDeclNameAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO17makeBlankEnumDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO17makeBlankExprListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO17makeBlankObjcNameAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO17makeBlankSomeTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO17makeBlankTypeExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO17makeCatchItemListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO17makeCodeBlockItem4item9semicolon11errorTokensAA0efgB0VAA0B0V_AA05TokenB0VSgAKSgtFZ","s11SwiftSyntax0B7FactoryO17makeDeinitKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeEllipsisToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeExtensionDecl10attributes9modifiers16extensionKeyword12extendedType17inheritanceClause012genericWhereN07membersAA0efB0VAA013AttributeListB0VSg_AA08ModifiersB0VSgAA05TokenB0VAA0lB0VAA0l11InheritancenB0VSgAA07GenericpnB0VSgAA06Memberf5BlockB0VtFZ","s11SwiftSyntax0B7FactoryO17makeImportKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeInheritedType8typeName13trailingCommaAA0efB0VAA0fB0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO17makeIsTypePattern9isKeyword4typeAA0efgB0VAA05TokenB0V_AA0fB0VtFZ","s11SwiftSyntax0B7FactoryO17makeObjcNamePiece4name3dotAA0efgB0VAA05TokenB0V_AJSgtFZ","s11SwiftSyntax0B7FactoryO17makePoundFileExpr05poundF0AA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO17makePoundLineExpr05poundF0AA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO17makeProtocolToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makePublicKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeRepeatKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeReturnKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeStaticKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeStringLiteral_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO17makeStringSegment7contentAA0efB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO17makeStringSegment_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO17makeStructKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeSubscriptDecl10attributes9modifiers16subscriptKeyword22genericParameterClause7indices6result0k5WhereM08accessorAA0efB0VAA013AttributeListB0VSg_AA08ModifiersB0VSgAA05TokenB0VAA07GenericlmB0VSgAA0lmB0VAA06ReturnmB0VAA0vpmB0VSgAA0B0VSgtFZ","s11SwiftSyntax0B7FactoryO17makeSubscriptExpr16calledExpression11leftBracket12argumentList05rightJ015trailingClosure26additionalTrailingClosuresAA0efB0VAA0fB0V_AA05TokenB0VAA05Tuplef7ElementlB0VApA0ofB0VSgAA08MultipleqoulB0VSgtFZ","s11SwiftSyntax0B7FactoryO17makeSwitchKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeThrowsKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO17makeTypealiasDecl10attributes9modifiers16typealiasKeyword10identifier22genericParameterClause11initializer0l5WhereN0AA0efB0VAA013AttributeListB0VSg_AA08ModifierrB0VSgAA05TokenB0VAuA07GenericmnB0VSgAA015TypeInitializernB0VSgAA0upnB0VSgtFZ","s11SwiftSyntax0B7FactoryO17makeVoidTupleTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeAssignmentExpr11assignTokenAA0efB0VAA0hB0V_tFZ","s11SwiftSyntax0B7FactoryO18makeAttributedType9specifier10attributes04baseF0AA0efB0VAA05TokenB0VSg_AA013AttributeListB0VSgAA0fB0VtFZ","s11SwiftSyntax0B7FactoryO18makeBackslashToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeBinaryOperator_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO18makeBlankArrayExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankArrayTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankArrowExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankAttributeAA0fB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankAwaitExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankBreakStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankCatchItemAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankClassDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankCodeBlockAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankDeferStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankElseBlockAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankForInStmtAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankGuardStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankInOutExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankThrowStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankTokenListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankTupleExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankTupleTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankWhileStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankYieldListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeBlankYieldStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO18makeDefaultKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeDictionaryExpr10leftSquare7content05rightH0AA0efB0VAA05TokenB0V_AA0B0VAKtFZ","s11SwiftSyntax0B7FactoryO18makeDictionaryType17leftSquareBracket03keyF05colon05valueF005righthI0AA0efB0VAA05TokenB0V_AA0fB0VAmoMtFZ","s11SwiftSyntax0B7FactoryO18makeExpressionStmt10expressionAA0efB0VAA04ExprB0V_tFZ","s11SwiftSyntax0B7FactoryO18makeIdentifierExpr10identifier17declNameArgumentsAA0efB0VAA05TokenB0V_AA04DeclijB0VSgtFZ","s11SwiftSyntax0B7FactoryO18makeIdentifierListyAA0efB0VSayAA05TokenB0VGFZ","s11SwiftSyntax0B7FactoryO18makeIfConfigClause12poundKeyword9condition8elementsAA0efgB0VAA05TokenB0V_AA04ExprB0VSgAA0B0VtFZ","s11SwiftSyntax0B7FactoryO18makeIntegerLiteral_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO18makeLeftAngleToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeLeftBraceToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeLeftParenToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeMemberDeclListyAA0efgB0VSayAA0efg4ItemB0VGFZ","s11SwiftSyntax0B7FactoryO18makeNilLiteralExpr10nilKeywordAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO18makePatternBinding7pattern14typeAnnotation11initializer8accessor13trailingCommaAA0efB0VAA0eB0V_AA04TypeiB0VSgAA017InitializerClauseB0VSgAA0B0VSgAA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO18makePoundErrorDecl05poundF09leftParen7message05rightJ0AA0efgB0VAA05TokenB0V_AlA017StringLiteralExprB0VALtFZ","s11SwiftSyntax0B7FactoryO18makePoundIfKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makePrefixOperator_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO18makePrivateKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeSemicolonToken13leadingTrivia08trailingH0AA0fB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO18makeSpecializeExpr10expression21genericArgumentClauseAA0efB0VAA0fB0V_AA07GenericijB0VtFZ","s11SwiftSyntax0B7FactoryO18makeSwitchCaseListyAA0efgB0VSayAA0B0VGFZ","s11SwiftSyntax0B7FactoryO18makeTypeAnnotation5colon4typeAA0efB0VAA05TokenB0V_AA0eB0VtFZ","s11SwiftSyntax0B7FactoryO18makeTypeIdentifier_13leadingTrivia08trailingH0AA0eB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO19makeBlankAccessPathAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeBlankImportDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeBlankReturnStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeBlankSourceFileAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeBlankStructDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeBlankSwitchCaseAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeBlankSwitchStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO19makeCatchClauseListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO19makeCompositionType8elementsAA0efB0VAA0ef11ElementListB0V_tFZ","s11SwiftSyntax0B7FactoryO19makeContinueKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeCustomAttribute11atSignToken13attributeName9leftParen12argumentList05rightM0AA0efB0VAA0iB0V_AA04TypeB0VAMSgAA016TupleExprElementoB0VSgAPtFZ","s11SwiftSyntax0B7FactoryO19makeDeclarationStmt11declarationAA0efB0VAA04DeclB0V_tFZ","s11SwiftSyntax0B7FactoryO19makeEnumCaseElement10identifier15associatedValue03rawJ013trailingCommaAA0efgB0VAA05TokenB0V_AA015ParameterClauseB0VSgAA011InitializerpB0VSgALSgtFZ","s11SwiftSyntax0B7FactoryO19makeEnumCasePattern4type6period8caseName15associatedTupleAA0efgB0VAA04TypeB0VSg_AA05TokenB0VAoA0mgB0VSgtFZ","s11SwiftSyntax0B7FactoryO19makeFallthroughStmt18fallthroughKeywordAA0efB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO19makeFloatingLiteral_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO19makeForcedValueExpr10expression15exclamationMarkAA0efgB0VAA0gB0V_AA05TokenB0VtFZ","s11SwiftSyntax0B7FactoryO19makeGenericArgument12argumentType13trailingCommaAA0efB0VAA0hB0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO19makeInitializerDecl10attributes9modifiers11initKeyword12optionalMark22genericParameterClause10parameters016throwsOrRethrowsJ00m5WhereO04bodyAA0efB0VAA013AttributeListB0VSg_AA08ModifierwB0VSgAA05TokenB0VAWSgAA07GenericnoB0VSgAA0noB0VAxA0ztoB0VSgAA09CodeBlockB0VSgtFZ","s11SwiftSyntax0B7FactoryO19makeInternalKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeKeyPathBaseExpr6periodAA0efghB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO19makeMemberDeclBlock9leftBrace7members05rightI0AA0efgB0VAA05TokenB0V_AA0ef4ListB0VAKtFZ","s11SwiftSyntax0B7FactoryO19makeObjcKeyPathExpr03keyG09leftParen4name05rightK0AA0efghB0VAA05TokenB0V_AlA0e4NameB0VALtFZ","s11SwiftSyntax0B7FactoryO19makeOperatorKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeOptionalPattern03subF012questionMarkAA0efB0VAA0fB0V_AA05TokenB0VtFZ","s11SwiftSyntax0B7FactoryO19makeParameterClause9leftParen13parameterList05rightH0AA0efB0VAA05TokenB0V_AA08FunctionejB0VAKtFZ","s11SwiftSyntax0B7FactoryO19makePostfixOperator_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO19makePoundAssertStmt05poundF09leftParen9condition5comma7message05rightJ0AA0efgB0VAA05TokenB0V_AnA04ExprB0VANSgAqNtFZ","s11SwiftSyntax0B7FactoryO19makePoundColumnExpr05poundF0AA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO19makePoundFileIDExpr05poundF2IDAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO19makeProtocolKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeRepeatWhileStmt9labelName0H5Colon13repeatKeyword4body05whileL09conditionAA0efgB0VAA05TokenB0VSg_AonA09CodeBlockB0VAnA04ExprB0VtFZ","s11SwiftSyntax0B7FactoryO19makeRethrowsKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeRightAngleToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeRightBraceToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeRightParenToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeSwitchCaseLabel11caseKeyword0H5Items5colonAA0efgB0VAA05TokenB0V_AA0f8ItemListB0VAKtFZ","s11SwiftSyntax0B7FactoryO19makeWildcardKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19makeWildcardPattern8wildcard14typeAnnotationAA0efB0VAA05TokenB0V_AA04TypeiB0VSgtFZ","s11SwiftSyntax0B7FactoryO19make__FILE__Keyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO19make__LINE__Keyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeArrayElementListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO20makeBlankCatchClauseAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankClosureExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankKeyPathExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankTernaryExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankUnknownDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankUnknownExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankUnknownStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankUnknownTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeBlankWhereClauseAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO20makeClosureParamListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO20makeClosureSignature10attributes7capture5input12asyncKeyword9throwsTok6output02inM0AA0efB0VAA013AttributeListB0VSg_AA0e7CapturefB0VSgAA0B0VSgAA05TokenB0VSgAyA012ReturnClauseB0VSgAXtFZ","s11SwiftSyntax0B7FactoryO20makeConditionElement9condition13trailingCommaAA0efB0VAA0B0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO20makeDeclNameArgument4name5colonAA0efgB0VAA05TokenB0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeDollarIdentifier_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO20makeExtensionKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeFloatLiteralExpr14floatingDigitsAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO20makeFunctionCallExpr16calledExpression9leftParen12argumentList05rightK015trailingClosure26additionalTrailingClosuresAA0efgB0VAA0gB0V_AA05TokenB0VSgAA05Tupleg7ElementmB0VAqA0pgB0VSgAA08MultiplerpvmB0VSgtFZ","s11SwiftSyntax0B7FactoryO20makeFunctionDeclName4name9argumentsAA0efgB0VAA0B0V_AA0fg9ArgumentsB0VSgtFZ","s11SwiftSyntax0B7FactoryO20makeGenericParameter10attributes4name5colon13inheritedType13trailingCommaAA0efB0VAA013AttributeListB0VSg_AA05TokenB0VAPSgAA0kB0VSgAQtFZ","s11SwiftSyntax0B7FactoryO20makeGenericParameter4name13trailingCommaAA0efB0VAA05TokenB0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeMemberAccessExpr4base3dot4name17declNameArgumentsAA0efgB0VAA0gB0VSg_AA05TokenB0VAoA04DecllmB0VSgtFZ","s11SwiftSyntax0B7FactoryO20makeObjcSelectorExpr05poundF09leftParen4kind5colon4name05rightJ0AA0efgB0VAA05TokenB0V_A2NSgAoA0gB0VANtFZ","s11SwiftSyntax0B7FactoryO20makePostfixUnaryExpr10expression13operatorTokenAA0efgB0VAA0gB0V_AA0jB0VtFZ","s11SwiftSyntax0B7FactoryO20makePoundElseKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makePoundFileKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makePoundLineKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makePoundWarningDecl05poundF09leftParen7message05rightJ0AA0efgB0VAA05TokenB0V_AlA017StringLiteralExprB0VALtFZ","s11SwiftSyntax0B7FactoryO20makeRegexLiteralExpr5regexAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO20makeSingleQuoteToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeStringQuoteToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeSubscriptKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO20makeTupleExprElement5label5colon10expression13trailingCommaAA0efgB0VAA05TokenB0VSg_AmA0fB0VAMtFZ","s11SwiftSyntax0B7FactoryO20makeTupleTypeElement4name5colon4type13trailingCommaAA0efgB0VAA05TokenB0VSg_AmA0fB0VAMtFZ","s11SwiftSyntax0B7FactoryO20makeTupleTypeElement4type13trailingCommaAA0efgB0VAA0fB0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO20makeTupleTypeElement5inOut4name10secondName5colon4type8ellipsis11initializer13trailingCommaAA0efgB0VAA05TokenB0VSg_A3qA0fB0VAqA017InitializerClauseB0VSgAQtFZ","s11SwiftSyntax0B7FactoryO20makeTypealiasKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO21makeAccessorParameter9leftParen4name05rightH0AA0efB0VAA05TokenB0V_A2KtFZ","s11SwiftSyntax0B7FactoryO21makeAnyTypeIdentifier13leadingTrivia08trailingI0AA0fB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO21makeAvailabilityEntry5label5colon16availabilityList9semicolonAA0efB0VAA05TokenB0V_AlA0e4SpecjB0VALtFZ","s11SwiftSyntax0B7FactoryO21makeBlankAccessorDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankAccessorListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankArrayElementAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankCaseItemListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankClosureParamAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankContinueStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankDeclModifierAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankEnumCaseDeclAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankFunctionDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankFunctionTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankIfConfigDeclAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankMetatypeTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankModifierListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankObjCSelectorAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankOperatorDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankOptionalTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankProtocolDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankReturnClauseAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankSequenceExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankSuperRefExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankTuplePatternAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankVariableDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeBlankVersionTupleAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO21makeCodeBlockItemListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO21makeContextualKeyword_13leadingTrivia08trailingH0AA05TokenB0VSS_AA0H0VAJtFZ","s11SwiftSyntax0B7FactoryO21makeDeclNameArguments9leftParen9arguments05rightI0AA0efgB0VAA05TokenB0V_AA0ef12ArgumentListB0VAKtFZ","s11SwiftSyntax0B7FactoryO21makeDeinitializerDecl10attributes9modifiers13deinitKeyword4bodyAA0efB0VAA013AttributeListB0VSg_AA08ModifiermB0VSgAA05TokenB0VAA09CodeBlockB0VtFZ","s11SwiftSyntax0B7FactoryO21makeDictionaryElement13keyExpression5colon05valueH013trailingCommaAA0efB0VAA04ExprB0V_AA05TokenB0VAlNSgtFZ","s11SwiftSyntax0B7FactoryO21makeExpressionPattern10expressionAA0efB0VAA04ExprB0V_tFZ","s11SwiftSyntax0B7FactoryO21makeExpressionSegment9backslash9delimiter9leftParen11expressions05rightJ0AA0efB0VAA05TokenB0V_AMSgAmA020TupleExprElementListB0VAMtFZ","s11SwiftSyntax0B7FactoryO21makeFunctionParameter10attributes9firstName06secondI05colon4type8ellipsis15defaultArgument13trailingCommaAA0efB0VAA013AttributeListB0VSg_AA05TokenB0VSgA2tA04TypeB0VSgAtA017InitializerClauseB0VSgATtFZ","s11SwiftSyntax0B7FactoryO21makeFunctionSignature5input21asyncOrReasyncKeyword06throwsi8RethrowsK06outputAA0efB0VAA015ParameterClauseB0V_AA05TokenB0VSgAoA06ReturnpB0VSgtFZ","s11SwiftSyntax0B7FactoryO21makeIdentifierPattern10identifierAA0efB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO21makeInheritedTypeListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO21makeInitializerClause5equal5valueAA0efB0VAA05TokenB0V_AA04ExprB0VtFZ","s11SwiftSyntax0B7FactoryO21makeNonEmptyTokenListyAA0efghB0VSayAA0gB0VGFZ","s11SwiftSyntax0B7FactoryO21makeObjCSelectorPiece4name5colonAA0efgB0VAA05TokenB0VSg_AKtFZ","s11SwiftSyntax0B7FactoryO21makeObjectLiteralExpr10identifier9leftParen9arguments05rightJ0AA0efgB0VAA05TokenB0V_AlA05Tupleg11ElementListB0VALtFZ","s11SwiftSyntax0B7FactoryO21makePoundEndifKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO21makePoundErrorKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO21makePoundFilePathExpr05poundfG0AA0efghB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO21makePoundFunctionExpr05poundF0AA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO21makePrefixPeriodToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO21makeQualifiedDeclName8baseType3dot4name9argumentsAA0efgB0VAA0iB0VSg_AA05TokenB0VSgAoA0fg9ArgumentsB0VSgtFZ","s11SwiftSyntax0B7FactoryO21makeStringLiteralExpr13openDelimiter0H5Quote8segments05closeJ00lI0AA0efgB0VAA05TokenB0VSg_AmA0ef8SegmentsB0VAmNtFZ","s11SwiftSyntax0B7FactoryO21makeStringLiteralExpr_13leadingTrivia08trailingI0AA0efgB0VSS_AA0I0VAJtFZ","s11SwiftSyntax0B7FactoryO21make__COLUMN__Keyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makeAssociatedtypeDecl10attributes9modifiers21associatedtypeKeyword10identifier17inheritanceClause11initializer012genericWhereM0AA0efB0VAA013AttributeListB0VSg_AA08ModifierrB0VSgAA05TokenB0VAuA015TypeInheritancemB0VSgAA0u11InitializermB0VSgAA07GenericpmB0VSgtFZ","s11SwiftSyntax0B7FactoryO22makeBinaryOperatorExpr13operatorTokenAA0efgB0VAA0iB0V_tFZ","s11SwiftSyntax0B7FactoryO22makeBlankAccessorBlockAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankAsTypePatternAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankAttributeListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankCatchItemListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankCodeBlockItemAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankExtensionDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankInheritedTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankIsTypePatternAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankObjcNamePieceAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankPoundFileExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankPoundLineExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankStringSegmentAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankSubscriptDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankSubscriptExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBlankTypealiasDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO22makeBooleanLiteralExpr07booleanF0AA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO22makeCapitalSelfKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makeClosureCaptureItem9specifier4name11assignToken10expression13trailingCommaAA0efgB0VAA0k4ListB0VSg_AA0kB0VSgAqA04ExprB0VAQtFZ","s11SwiftSyntax0B7FactoryO22makeElseIfContinuation11ifStatementAA0efgB0VAA0f4StmtB0V_tFZ","s11SwiftSyntax0B7FactoryO22makeFallthroughKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makeFileprivateKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makeGenericRequirement4body13trailingCommaAA0efB0VAA0B0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO22makeGenericWhereClause12whereKeyword15requirementListAA0efgB0VAA05TokenB0V_AA0e11RequirementkB0VtFZ","s11SwiftSyntax0B7FactoryO22makeIfConfigClauseListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO22makeIntegerLiteralExpr6digitsAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO22makeMemberDeclListItem4decl9semicolonAA0efghB0VAA0fB0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO22makePatternBindingListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO22makePoundAssertKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makePoundColumnKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makePoundDsohandleExpr05poundF0AA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO22makePoundElseifKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makePoundFileIDKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makePrefixOperatorExpr13operatorToken17postfixExpressionAA0efgB0VAA0iB0VSg_AA0gB0VtFZ","s11SwiftSyntax0B7FactoryO22makeRawStringDelimiter_13leadingTrivia08trailingI0AA05TokenB0VSS_AA0I0VAJtFZ","s11SwiftSyntax0B7FactoryO22makeSelfTypeIdentifier13leadingTrivia08trailingI0AA0fB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO22makeSwitchDefaultLabel14defaultKeyword5colonAA0efgB0VAA05TokenB0V_AJtFZ","s11SwiftSyntax0B7FactoryO23makeAccessLevelModifier4name9leftParen8modifier05rightJ0AA0efgB0VAA05TokenB0V_ALSgA2MtFZ","s11SwiftSyntax0B7FactoryO23makeAccessPathComponent4name11trailingDotAA0efgB0VAA05TokenB0V_AJSgtFZ","s11SwiftSyntax0B7FactoryO23makeBlankAssignmentExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankAttributedTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankDictionaryExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankDictionaryTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankExpressionStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankIdentifierExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankIdentifierListAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankIfConfigClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankMemberDeclListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankNilLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankPatternBindingAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankPoundErrorDeclAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankSpecializeExprAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankSwitchCaseListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankTypeAnnotationAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeBlankUnknownPatternAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO23makeEnumCaseElementListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO23makeGenericArgumentListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO23makePostfixIfConfigExpr4base6configAA0efghB0VAA0hB0VSg_AA0fg4DeclB0VtFZ","s11SwiftSyntax0B7FactoryO23makePoundKeyPathKeyword13leadingTrivia08trailingJ0AA05TokenB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO23makePoundSourceLocation05poundfG09leftParen4args05rightJ0AA0efgB0VAA05TokenB0V_AlA0efg4ArgsB0VSgALtFZ","s11SwiftSyntax0B7FactoryO23makePoundWarningKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO23makePrecedenceGroupDecl10attributes9modifiers22precedencegroupKeyword10identifier9leftBrace15groupAttributes05rightN0AA0efgB0VAA013AttributeListB0VSg_AA08ModifiersB0VSgAA05TokenB0VA2uA0efrsB0VAUtFZ","s11SwiftSyntax0B7FactoryO23makeSameTypeRequirement04leftF10Identifier13equalityToken05rightfI0AA0efgB0VAA0fB0V_AA0kB0VAKtFZ","s11SwiftSyntax0B7FactoryO23makeTargetFunctionEntry5label5colon8delcname13trailingCommaAA0efgB0VAA05TokenB0V_AlA08DeclNameB0VALSgtFZ","s11SwiftSyntax0B7FactoryO23makeTuplePatternElement9labelName0H5Colon7pattern13trailingCommaAA0efgB0VAA05TokenB0VSg_AmA0fB0VAMtFZ","s11SwiftSyntax0B7FactoryO23makeValueBindingPattern15letOrVarKeyword05valueG0AA0efgB0VAA05TokenB0V_AA0gB0VtFZ","s11SwiftSyntax0B7FactoryO23make__FUNCTION__Keyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO24makeAvailabilityArgument5entry13trailingCommaAA0efB0VAA0B0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO24makeAvailabilitySpecListyAA0efgB0VSayAA0e8ArgumentB0VGFZ","s11SwiftSyntax0B7FactoryO24makeBlankCatchClauseListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankCompositionTypeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankCustomAttributeAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankDeclarationStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankEnumCaseElementAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankEnumCasePatternAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankFallthroughStmtAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankForcedValueExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankGenericArgumentAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankInitializerDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankKeyPathBaseExprAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankMemberDeclBlockAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankObjcKeyPathExprAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankOptionalPatternAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankParameterClauseAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankPoundAssertStmtAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankPoundColumnExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankPoundFileIDExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankRepeatWhileStmtAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankSwitchCaseLabelAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO24makeBlankWildcardPatternAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO24makeClassRestrictionType12classKeywordAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO24makeConditionElementListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO24makeDeclNameArgumentListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO24makeExclamationMarkToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO24makeGenericParameterListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO24makeMemberTypeIdentifier04baseF06period4name21genericArgumentClauseAA0efgB0VAA0fB0V_AA05TokenB0VAnA07GenericlmB0VSgtFZ","s11SwiftSyntax0B7FactoryO24makeOptionalChainingExpr10expression12questionMarkAA0efgB0VAA0gB0V_AA05TokenB0VtFZ","s11SwiftSyntax0B7FactoryO24makePoundFilePathKeyword13leadingTrivia08trailingJ0AA05TokenB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO24makePoundFunctionKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO24makePoundSelectorKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO24makePrefixAmpersandToken13leadingTrivia08trailingI0AA0gB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO24makeSimpleTypeIdentifier4name21genericArgumentClauseAA0efgB0VAA05TokenB0V_AA07GenericjkB0VSgtFZ","s11SwiftSyntax0B7FactoryO24makeSpacedBinaryOperator_13leadingTrivia08trailingI0AA05TokenB0VSS_AA0I0VAJtFZ","s11SwiftSyntax0B7FactoryO24makeTupleExprElementListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO24makeTupleTypeElementListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO25makeAssociatedtypeKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO25makeAvailabilityCondition21poundAvailableKeyword9leftParen16availabilitySpec05rightK0AA0efB0VAA05TokenB0V_AlA0em4ListB0VALtFZ","s11SwiftSyntax0B7FactoryO25makeBlankArrayElementListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankClosureParamListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankClosureSignatureAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankConditionElementAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankDeclNameArgumentAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankFloatLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankFunctionCallExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankFunctionDeclNameAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankGenericParameterAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankMemberAccessExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankObjcSelectorExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankPostfixUnaryExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankPoundWarningDeclAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankRegexLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankTupleExprElementAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeBlankTupleTypeElementAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO25makeDictionaryElementListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO25makeDiscardAssignmentExpr8wildcardAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO25makeEditorPlaceholderExpr10identifierAA0efgB0VAA05TokenB0V_tFZ","s11SwiftSyntax0B7FactoryO25makeFunctionParameterListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO25makeGenericArgumentClause16leftAngleBracket9arguments05rightiJ0AA0efgB0VAA05TokenB0V_AA0ef4ListB0VAKtFZ","s11SwiftSyntax0B7FactoryO25makePoundAvailableKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO25makePoundDsohandleKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO25makePrimaryAssociatedType10attributes4name5colon09inheritedG011initializer13trailingCommaAA0efgB0VAA013AttributeListB0VSg_AA05TokenB0VAQSgAA0gB0VSgAA0g17InitializerClauseB0VSgARtFZ","s11SwiftSyntax0B7FactoryO25makeStringLiteralSegmentsyAA0efgB0VSayAA0B0VGFZ","s11SwiftSyntax0B7FactoryO25makeSymbolicReferenceExpr10identifier21genericArgumentClauseAA0efgB0VAA05TokenB0V_AA07GenericjkB0VSgtFZ","s11SwiftSyntax0B7FactoryO25makeTypeInheritanceClause5colon09inheritedE10CollectionAA0efgB0VAA05TokenB0V_AA09Inheritede4ListB0VtFZ","s11SwiftSyntax0B7FactoryO25makeTypeInitializerClause5equal5valueAA0efgB0VAA05TokenB0V_AA0eB0VtFZ","s11SwiftSyntax0B7FactoryO25makeUnresolvedPatternExpr7patternAA0efgB0VAA0fB0V_tFZ","s11SwiftSyntax0B7FactoryO25make__DSO_HANDLE__Keyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO26makeBlankAccessorParameterAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankAvailabilityEntryAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankCodeBlockItemListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankDeclNameArgumentsAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankDeinitializerDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankDictionaryElementAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankExpressionPatternAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankExpressionSegmentAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankFunctionParameterAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankFunctionSignatureAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankIdentifierPatternAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankInheritedTypeListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankInitializerClauseAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankNonEmptyTokenListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankObjCSelectorPieceAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankObjectLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankPoundFilePathExprAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankPoundFunctionExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankQualifiedDeclNameAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeBlankStringLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO26makeClosureCaptureItemListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO26makeCompositionTypeElement4type9ampersandAA0efgB0VAA0fB0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO26makeConformanceRequirement18leftTypeIdentifier5colon05righthI0AA0efB0VAA0hB0V_AA05TokenB0VAKtFZ","s11SwiftSyntax0B7FactoryO26makeDifferentiabilityParam9parameter13trailingCommaAA0efB0VAA0B0V_AA05TokenB0VSgtFZ","s11SwiftSyntax0B7FactoryO26makeGenericParameterClause16leftAngleBracket07genericF4List05rightiJ0AA0efgB0VAA05TokenB0V_AA0eflB0VAKtFZ","s11SwiftSyntax0B7FactoryO26makeGenericRequirementListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO26makeInfixQuestionMarkToken13leadingTrivia08trailingJ0AA0hB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO26makeLabeledSpecializeEntry5label5colon5value13trailingCommaAA0efgB0VAA05TokenB0V_A3LSgtFZ","s11SwiftSyntax0B7FactoryO26makeLeftSquareBracketToken13leadingTrivia08trailingJ0AA0hB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO26makePrecedencegroupKeyword13leadingTrivia08trailingH0AA05TokenB0VAA0H0V_AJtFZ","s11SwiftSyntax0B7FactoryO26makeUnspacedBinaryOperator_13leadingTrivia08trailingI0AA05TokenB0VSS_AA0I0VAJtFZ","s11SwiftSyntax0B7FactoryO27makeBlankAssociatedtypeDeclAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankBinaryOperatorExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankBooleanLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankClosureCaptureItemAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankElseIfContinuationAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankGenericRequirementAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankGenericWhereClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankIfConfigClauseListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankIntegerLiteralExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankMemberDeclListItemAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankPatternBindingListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankPoundDsohandleExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankPrefixOperatorExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeBlankSwitchDefaultLabelAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO27makeClosureCaptureSignature10leftSquare5items05rightI0AA0efgB0VAA05TokenB0V_AA0ef8ItemListB0VSgAKtFZ","s11SwiftSyntax0B7FactoryO27makeDifferentiabilityParams9leftParen04diffF005rightH0AA0efB0VAA05TokenB0V_AA0e9ParamListB0VAKtFZ","s11SwiftSyntax0B7FactoryO27makePoundFileLiteralKeyword13leadingTrivia08trailingJ0AA05TokenB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO27makePoundSourceLocationArgs12fileArgLabel0iJ5Colon0I4Name5comma04linejK00ojL00O6NumberAA0efghB0VAA05TokenB0V_A6OtFZ","s11SwiftSyntax0B7FactoryO27makePoundUnavailableKeyword13leadingTrivia08trailingI0AA05TokenB0VAA0I0V_AJtFZ","s11SwiftSyntax0B7FactoryO27makePrecedenceGroupNameListyAA0efghB0VSayAA0efg7ElementB0VGFZ","s11SwiftSyntax0B7FactoryO27makePrecedenceGroupRelation017higherThanOrLowerI05colon10otherNamesAA0efgB0VAA05TokenB0V_AkA0ef8NameListB0VtFZ","s11SwiftSyntax0B7FactoryO27makeRightSquareBracketToken13leadingTrivia08trailingJ0AA0hB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO27makeTuplePatternElementListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO27makeUnavailabilityCondition23poundUnavailableKeyword9leftParen16availabilitySpec05rightK0AA0efB0VAA05TokenB0V_AlA012Availabilitym4ListB0VALtFZ","s11SwiftSyntax0B7FactoryO28makeBlankAccessLevelModifierAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankAccessPathComponentAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankEnumCaseElementListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankGenericArgumentListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankPostfixIfConfigExprAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankPoundSourceLocationAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankPrecedenceGroupDeclAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankSameTypeRequirementAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankTargetFunctionEntryAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankTuplePatternElementAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeBlankValueBindingPatternAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO28makeMatchingPatternCondition11caseKeyword7pattern14typeAnnotation11initializerAA0efgB0VAA05TokenB0V_AA0fB0VAA04TypelB0VSgAA017InitializerClauseB0VtFZ","s11SwiftSyntax0B7FactoryO28makeOptionalBindingCondition15letOrVarKeyword7pattern14typeAnnotation11initializerAA0efgB0VAA05TokenB0V_AA07PatternB0VAA04TypenB0VSgAA017InitializerClauseB0VtFZ","s11SwiftSyntax0B7FactoryO28makePostfixQuestionMarkToken13leadingTrivia08trailingJ0AA0hB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO28makePoundColorLiteralKeyword13leadingTrivia08trailingJ0AA05TokenB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO28makePoundImageLiteralKeyword13leadingTrivia08trailingJ0AA05TokenB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO29makeBlankAvailabilityArgumentAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankAvailabilitySpecListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankClassRestrictionTypeAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankConditionElementListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankDeclNameArgumentListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankGenericParameterListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankMemberTypeIdentifierAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankOptionalChainingExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankSimpleTypeIdentifierAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankTupleExprElementListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO29makeBlankTupleTypeElementListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO29makeMultilineStringQuoteToken13leadingTrivia08trailingJ0AA0hB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO29makePrecedenceGroupAssignment17assignmentKeyword5colon4flagAA0efgB0VAA05TokenB0V_A2KtFZ","s11SwiftSyntax0B7FactoryO29makePrimaryAssociatedTypeListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO30makeBlankAvailabilityConditionAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankDictionaryElementListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankDiscardAssignmentExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankEditorPlaceholderExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankFunctionParameterListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankGenericArgumentClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankPrimaryAssociatedTypeAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankStringLiteralSegmentsAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankSymbolicReferenceExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankTypeInheritanceClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankTypeInitializerClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeBlankUnresolvedPatternExprAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO30makeCompositionTypeElementListyAA0efghB0VSayAA0efgB0VGFZ","s11SwiftSyntax0B7FactoryO30makeDifferentiabilityParamListyAA0efgB0VSayAA0efB0VGFZ","s11SwiftSyntax0B7FactoryO30makeOperatorPrecedenceAndTypes5colon015precedenceGroupg10DesignatedH0AA0efghB0VAA05TokenB0V_AA014IdentifierListB0VtFZ","s11SwiftSyntax0B7FactoryO30makePoundSourceLocationKeyword13leadingTrivia08trailingJ0AA05TokenB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO30makePrecedenceGroupNameElement4name13trailingCommaAA0efghB0VAA05TokenB0V_AJSgtFZ","s11SwiftSyntax0B7FactoryO31makeAvailabilityLabeledArgument5label5colon5valueAA0efgB0VAA05TokenB0V_AkA0B0VtFZ","s11SwiftSyntax0B7FactoryO31makeBlankClosureCaptureItemListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO31makeBlankCompositionTypeElementAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO31makeBlankConformanceRequirementAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO31makeBlankDifferentiabilityParamAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO31makeBlankGenericParameterClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO31makeBlankGenericRequirementListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO31makeBlankLabeledSpecializeEntryAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO31makeSpecializeAttributeSpecListyAA0efghB0VSayAA0B0VGFZ","s11SwiftSyntax0B7FactoryO32makeBlankClosureCaptureSignatureAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO32makeBlankDifferentiabilityParamsAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO32makeBlankPoundSourceLocationArgsAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO32makeBlankPrecedenceGroupNameListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO32makeBlankPrecedenceGroupRelationAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO32makeBlankTuplePatternElementListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO32makeBlankUnavailabilityConditionAA0fgB0VyFZ","s11SwiftSyntax0B7FactoryO32makeImplementsAttributeArguments4type5comma12declBaseName0jlG0AA0efgB0VAA020SimpleTypeIdentifierB0V_AA05TokenB0VAA0B0VAA04DecllgB0VSgtFZ","s11SwiftSyntax0B7FactoryO32makeNamedAttributeStringArgument7nameTok5colon16stringOrDeclnameAA0efghB0VAA05TokenB0V_AkA0B0VtFZ","s11SwiftSyntax0B7FactoryO32makePrecedenceGroupAssociativity20associativityKeyword5colon5valueAA0efgB0VAA05TokenB0V_A2KtFZ","s11SwiftSyntax0B7FactoryO32makePrecedenceGroupAttributeListyAA0efghB0VSayAA0B0VGFZ","s11SwiftSyntax0B7FactoryO33makeBlankMatchingPatternConditionAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO33makeBlankOptionalBindingConditionAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO33makeDifferentiabilityParamsClause8wrtLabel5colon10parametersAA0efgB0VAA05TokenB0V_AkA0B0VtFZ","s11SwiftSyntax0B7FactoryO34makeAvailabilityVersionRestriction8platform7versionAA0efgB0VAA05TokenB0V_AA0f5TupleB0VSgtFZ","s11SwiftSyntax0B7FactoryO34makeBlankPrecedenceGroupAssignmentAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO34makeBlankPrimaryAssociatedTypeListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO34makeMultipleTrailingClosureElement5label5colon7closureAA0efghB0VAA05TokenB0V_AkA0g4ExprB0VtFZ","s11SwiftSyntax0B7FactoryO34makeStringInterpolationAnchorToken13leadingTrivia08trailingJ0AA0hB0VAA0J0V_AJtFZ","s11SwiftSyntax0B7FactoryO35makeBlankCompositionTypeElementListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO35makeBlankDifferentiabilityParamListAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO35makeBlankOperatorPrecedenceAndTypesAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO35makeBlankPrecedenceGroupNameElementAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO35makeImplicitlyUnwrappedOptionalType07wrappedH015exclamationMarkAA0efghB0VAA0hB0V_AA05TokenB0VtFZ","s11SwiftSyntax0B7FactoryO36makeBlankAvailabilityLabeledArgumentAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO36makeBlankSpecializeAttributeSpecListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO36makeDifferentiableAttributeArguments8diffKind0hI5Comma0H6Params0hkJ011whereClauseAA0efgB0VAA05TokenB0VSg_AnA017DifferentiabilitykmB0VSgAnA012GenericWheremB0VSgtFZ","s11SwiftSyntax0B7FactoryO37makeBlankImplementsAttributeArgumentsAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO37makeBlankNamedAttributeStringArgumentAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO37makeBlankPrecedenceGroupAssociativityAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO37makeBlankPrecedenceGroupAttributeListAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO38makeBlankDifferentiabilityParamsClauseAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO38makeMultipleTrailingClosureElementListyAA0efghiB0VSayAA0efghB0VGFZ","s11SwiftSyntax0B7FactoryO39makeBlankAvailabilityVersionRestrictionAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO39makeBlankMultipleTrailingClosureElementAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO40makeBlankImplicitlyUnwrappedOptionalTypeAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO41makeBlankDifferentiableAttributeArgumentsAA0fghB0VyFZ","s11SwiftSyntax0B7FactoryO43makeBlankMultipleTrailingClosureElementListAA0fghijB0VyFZ","s11SwiftSyntax0B7FactoryO44makeDerivativeRegistrationAttributeArguments7ofLabel5colon16originalDeclName6period12accessorKind5comma10diffParamsAA0efghB0VAA05TokenB0V_AoA09QualifiedmnB0VAOSgA2rA017Differentiabilityt6ClauseB0VSgtFZ","s11SwiftSyntax0B7FactoryO49makeBlankDerivativeRegistrationAttributeArgumentsAA0fghiB0VyFZ","s11SwiftSyntax0B7FactoryO9makeToken_8presence13leadingTrivia08trailingH0AA0eB0VAA0E4KindO_AA14SourcePresenceOAA0H0VAOtFZ","s11SwiftSyntax0B8VerifierC6verifyyyAA0B0VKFZ","s11SwiftSyntax6TriviaV11garbageTextyACSSFZ","s11SwiftSyntax6TriviaV11lineCommentyACSSFZ","s11SwiftSyntax6TriviaV12blockCommentyACSSFZ","s11SwiftSyntax6TriviaV12verticalTabsyACSiFZ","s11SwiftSyntax6TriviaV14docLineCommentyACSSFZ","s11SwiftSyntax6TriviaV15carriageReturnsyACSiFZ","s11SwiftSyntax6TriviaV15docBlockCommentyACSSFZ","s11SwiftSyntax6TriviaV23carriageReturnLineFeedsyACSiFZ","s11SwiftSyntax6TriviaV4tabsyACSiFZ","s11SwiftSyntax6TriviaV6spacesyACSiFZ","s11SwiftSyntax6TriviaV8newlinesyACSiFZ","s11SwiftSyntax6TriviaV9formfeedsyACSiFZ","s11SwiftSyntax010AccessPathB0V10prependingyAcA0cd9ComponentB0VF","s11SwiftSyntax010AccessPathB0V12makeIteratorAC0F0VyF","s11SwiftSyntax010AccessPathB0V12removingLastACyF","s11SwiftSyntax010AccessPathB0V13removingFirstACyF","s11SwiftSyntax010AccessPathB0V13withoutTriviaACyF","s11SwiftSyntax010AccessPathB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax010AccessPathB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax010AccessPathB0V20withoutLeadingTriviaACyF","s11SwiftSyntax010AccessPathB0V21withoutTrailingTriviaACyF","s11SwiftSyntax010AccessPathB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax010AccessPathB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax010AccessPathB0V8IteratorV4nextAA0cd9ComponentB0VSgyF","s11SwiftSyntax010AccessPathB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax010AccessPathB0V8removing7childAtACSi_tF","s11SwiftSyntax010AccessPathB0V9appendingyAcA0cd9ComponentB0VF","s11SwiftSyntax010AccessPathB0V9inserting_2atAcA0cd9ComponentB0V_SitF","s11SwiftSyntax010AccessPathB0V9replacing7childAt4withACSi_AA0cd9ComponentB0VtF","s11SwiftSyntax010ImportDeclB0V04withC3TokyAcA05TokenB0VSgF","s11SwiftSyntax010ImportDeclB0V04withC4KindyAcA05TokenB0VSgF","s11SwiftSyntax010ImportDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax010ImportDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax010ImportDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax010ImportDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax010ImportDeclB0V16addPathComponentyAcA06AccessfgB0VF","s11SwiftSyntax010ImportDeclB0V8withPathyAcA06AccessfB0VSgF","s11SwiftSyntax010ImportDeclB7BuilderV03useC3TokyyAA05TokenB0VF","s11SwiftSyntax010ImportDeclB7BuilderV03useC4KindyyAA05TokenB0VF","s11SwiftSyntax010ImportDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax010ImportDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax010ImportDeclB7BuilderV16addPathComponentyyAA06AccessghB0VF","s11SwiftSyntax010ReturnStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax010ReturnStmtB0V14withExpressionyAcA04ExprB0VSgF","s11SwiftSyntax010ReturnStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax010ReturnStmtB7BuilderV13useExpressionyyAA04ExprB0VF","s11SwiftSyntax010SourceFileB0V12addStatementyAcA013CodeBlockItemB0VF","s11SwiftSyntax010SourceFileB0V12withEOFTokenyAcA05TokenB0VSgF","s11SwiftSyntax010SourceFileB0V14withStatementsyAcA017CodeBlockItemListB0VSgF","s11SwiftSyntax010SourceFileB7BuilderV11useEOFTokenyyAA05TokenB0VF","s11SwiftSyntax010SourceFileB7BuilderV12addStatementyyAA013CodeBlockItemB0VF","s11SwiftSyntax010StructDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax010StructDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax010StructDeclB0V11withMembersyAcA06Memberd5BlockB0VSgF","s11SwiftSyntax010StructDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax010StructDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax010StructDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax010StructDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax010StructDeclB0V21withInheritanceClauseyAcA04TypefgB0VSgF","s11SwiftSyntax010StructDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax010StructDeclB0V26withGenericParameterClauseyAcA0fghB0VSgF","s11SwiftSyntax010StructDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax010StructDeclB7BuilderV10useMembersyyAA06Memberd5BlockB0VF","s11SwiftSyntax010StructDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax010StructDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax010StructDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax010StructDeclB7BuilderV20useInheritanceClauseyyAA04TypeghB0VF","s11SwiftSyntax010StructDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax010StructDeclB7BuilderV25useGenericParameterClauseyyAA0ghiB0VF","s11SwiftSyntax010SwitchCaseB0V12addStatementyAcA013CodeBlockItemB0VF","s11SwiftSyntax010SwitchCaseB0V14withStatementsyAcA017CodeBlockItemListB0VSgF","s11SwiftSyntax010SwitchCaseB0V15withUnknownAttryAcA09AttributeB0VSgF","s11SwiftSyntax010SwitchCaseB0V9withLabelyAcA0B0VSgF","s11SwiftSyntax010SwitchCaseB7BuilderV12addStatementyyAA013CodeBlockItemB0VF","s11SwiftSyntax010SwitchCaseB7BuilderV14useUnknownAttryyAA09AttributeB0VF","s11SwiftSyntax010SwitchCaseB7BuilderV8useLabelyyAA0B0VF","s11SwiftSyntax010SwitchStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax010SwitchStmtB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax010SwitchStmtB0V13withLeftBraceyAcA05TokenB0VSgF","s11SwiftSyntax010SwitchStmtB0V14withExpressionyAcA04ExprB0VSgF","s11SwiftSyntax010SwitchStmtB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax010SwitchStmtB0V14withRightBraceyAcA05TokenB0VSgF","s11SwiftSyntax010SwitchStmtB0V7addCaseyAcA0B0VF","s11SwiftSyntax010SwitchStmtB0V9withCasesyAcA0c8CaseListB0VSgF","s11SwiftSyntax010SwitchStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax010SwitchStmtB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax010SwitchStmtB7BuilderV12useLeftBraceyyAA05TokenB0VF","s11SwiftSyntax010SwitchStmtB7BuilderV13useExpressionyyAA04ExprB0VF","s11SwiftSyntax010SwitchStmtB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax010SwitchStmtB7BuilderV13useRightBraceyyAA05TokenB0VF","s11SwiftSyntax010SwitchStmtB7BuilderV7addCaseyyAA0B0VF","s11SwiftSyntax011CatchClauseB0V03addC4ItemyAcA0cfB0VF","s11SwiftSyntax011CatchClauseB0V04withC5ItemsyAcA0c8ItemListB0VSgF","s11SwiftSyntax011CatchClauseB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax011CatchClauseB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax011CatchClauseB7BuilderV03addC4ItemyyAA0cgB0VF","s11SwiftSyntax011CatchClauseB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax011CatchClauseB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax011ClosureExprB0V12addStatementyAcA013CodeBlockItemB0VF","s11SwiftSyntax011ClosureExprB0V13withLeftBraceyAcA05TokenB0VSgF","s11SwiftSyntax011ClosureExprB0V13withSignatureyAcA0cfB0VSgF","s11SwiftSyntax011ClosureExprB0V14withRightBraceyAcA05TokenB0VSgF","s11SwiftSyntax011ClosureExprB0V14withStatementsyAcA017CodeBlockItemListB0VSgF","s11SwiftSyntax011ClosureExprB7BuilderV12addStatementyyAA013CodeBlockItemB0VF","s11SwiftSyntax011ClosureExprB7BuilderV12useLeftBraceyyAA05TokenB0VF","s11SwiftSyntax011ClosureExprB7BuilderV12useSignatureyyAA0cgB0VF","s11SwiftSyntax011ClosureExprB7BuilderV13useRightBraceyyAA05TokenB0VF","s11SwiftSyntax011KeyPathExprB0V08withRootE0yAcA0eB0VSgF","s11SwiftSyntax011KeyPathExprB0V13withBackslashyAcA05TokenB0VSgF","s11SwiftSyntax011KeyPathExprB0V14withExpressionyAcA0eB0VSgF","s11SwiftSyntax011KeyPathExprB7BuilderV07useRootE0yyAA0eB0VF","s11SwiftSyntax011KeyPathExprB7BuilderV12useBackslashyyAA05TokenB0VF","s11SwiftSyntax011KeyPathExprB7BuilderV13useExpressionyyAA0eB0VF","s11SwiftSyntax011TernaryExprB0V13withColonMarkyAcA05TokenB0VSgF","s11SwiftSyntax011TernaryExprB0V15withFirstChoiceyAcA0dB0VSgF","s11SwiftSyntax011TernaryExprB0V16withQuestionMarkyAcA05TokenB0VSgF","s11SwiftSyntax011TernaryExprB0V16withSecondChoiceyAcA0dB0VSgF","s11SwiftSyntax011TernaryExprB0V23withConditionExpressionyAcA0dB0VSgF","s11SwiftSyntax011TernaryExprB7BuilderV12useColonMarkyyAA05TokenB0VF","s11SwiftSyntax011TernaryExprB7BuilderV14useFirstChoiceyyAA0dB0VF","s11SwiftSyntax011TernaryExprB7BuilderV15useQuestionMarkyyAA05TokenB0VF","s11SwiftSyntax011TernaryExprB7BuilderV15useSecondChoiceyyAA0dB0VF","s11SwiftSyntax011TernaryExprB7BuilderV22useConditionExpressionyyAA0dB0VF","s11SwiftSyntax011WhereClauseB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax011WhereClauseB0V15withGuardResultyAcA04ExprB0VSgF","s11SwiftSyntax011WhereClauseB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax011WhereClauseB7BuilderV14useGuardResultyyAA04ExprB0VF","s11SwiftSyntax012AccessorDeclB0V04withC4KindyAcA05TokenB0VSgF","s11SwiftSyntax012AccessorDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax012AccessorDeclB0V12withModifieryAcA0dfB0VSgF","s11SwiftSyntax012AccessorDeclB0V13withParameteryAcA0cfB0VSgF","s11SwiftSyntax012AccessorDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax012AccessorDeclB0V16withAsyncKeywordyAcA05TokenB0VSgF","s11SwiftSyntax012AccessorDeclB0V17withThrowsKeywordyAcA05TokenB0VSgF","s11SwiftSyntax012AccessorDeclB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax012AccessorDeclB7BuilderV03useC4KindyyAA05TokenB0VF","s11SwiftSyntax012AccessorDeclB7BuilderV11useModifieryyAA0dgB0VF","s11SwiftSyntax012AccessorDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax012AccessorDeclB7BuilderV12useParameteryyAA0cgB0VF","s11SwiftSyntax012AccessorDeclB7BuilderV15useAsyncKeywordyyAA05TokenB0VF","s11SwiftSyntax012AccessorDeclB7BuilderV16useThrowsKeywordyyAA05TokenB0VF","s11SwiftSyntax012AccessorDeclB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax012AccessorListB0V10prependingyAcA0c4DeclB0VF","s11SwiftSyntax012AccessorListB0V12makeIteratorAC0F0VyF","s11SwiftSyntax012AccessorListB0V12removingLastACyF","s11SwiftSyntax012AccessorListB0V13removingFirstACyF","s11SwiftSyntax012AccessorListB0V13withoutTriviaACyF","s11SwiftSyntax012AccessorListB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax012AccessorListB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax012AccessorListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax012AccessorListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax012AccessorListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012AccessorListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012AccessorListB0V8IteratorV4nextAA0c4DeclB0VSgyF","s11SwiftSyntax012AccessorListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax012AccessorListB0V8removing7childAtACSi_tF","s11SwiftSyntax012AccessorListB0V9appendingyAcA0c4DeclB0VF","s11SwiftSyntax012AccessorListB0V9inserting_2atAcA0c4DeclB0V_SitF","s11SwiftSyntax012AccessorListB0V9replacing7childAt4withACSi_AA0c4DeclB0VtF","s11SwiftSyntax012ArrayElementB0V14withExpressionyAcA04ExprB0VSgF","s11SwiftSyntax012ArrayElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax012ArrayElementB7BuilderV13useExpressionyyAA04ExprB0VF","s11SwiftSyntax012ArrayElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax012CaseItemListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax012CaseItemListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax012CaseItemListB0V12removingLastACyF","s11SwiftSyntax012CaseItemListB0V13removingFirstACyF","s11SwiftSyntax012CaseItemListB0V13withoutTriviaACyF","s11SwiftSyntax012CaseItemListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax012CaseItemListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax012CaseItemListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax012CaseItemListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax012CaseItemListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012CaseItemListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012CaseItemListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax012CaseItemListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax012CaseItemListB0V8removing7childAtACSi_tF","s11SwiftSyntax012CaseItemListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax012CaseItemListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax012CaseItemListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax012ClosureParamB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax012ClosureParamB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax012ClosureParamB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax012ClosureParamB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax012ContinueStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax012ContinueStmtB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax012ContinueStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax012ContinueStmtB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax012DeclModifierB0V10withDetailyAcA05TokenB0VSgF","s11SwiftSyntax012DeclModifierB0V19withDetailLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax012DeclModifierB0V20withDetailRightParenyAcA05TokenB0VSgF","s11SwiftSyntax012DeclModifierB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax012DeclModifierB7BuilderV18useDetailLeftParenyyAA05TokenB0VF","s11SwiftSyntax012DeclModifierB7BuilderV19useDetailRightParenyyAA05TokenB0VF","s11SwiftSyntax012DeclModifierB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax012DeclModifierB7BuilderV9useDetailyyAA05TokenB0VF","s11SwiftSyntax012EnumCaseDeclB0V04withD7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax012EnumCaseDeclB0V10addElementyAcA0cdgB0VF","s11SwiftSyntax012EnumCaseDeclB0V11addModifieryAcA0egB0VF","s11SwiftSyntax012EnumCaseDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax012EnumCaseDeclB0V12withElementsyAcA0cd11ElementListB0VSgF","s11SwiftSyntax012EnumCaseDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax012EnumCaseDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax012EnumCaseDeclB7BuilderV03useD7KeywordyyAA05TokenB0VF","s11SwiftSyntax012EnumCaseDeclB7BuilderV10addElementyyAA0cdhB0VF","s11SwiftSyntax012EnumCaseDeclB7BuilderV11addModifieryyAA0ehB0VF","s11SwiftSyntax012EnumCaseDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax012FunctionDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax012FunctionDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax012FunctionDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax012FunctionDeclB0V13withSignatureyAcA0cfB0VSgF","s11SwiftSyntax012FunctionDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax012FunctionDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax012FunctionDeclB0V15withFuncKeywordyAcA05TokenB0VSgF","s11SwiftSyntax012FunctionDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax012FunctionDeclB0V26withGenericParameterClauseyAcA0fghB0VSgF","s11SwiftSyntax012FunctionDeclB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax012FunctionDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax012FunctionDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax012FunctionDeclB7BuilderV12useSignatureyyAA0cgB0VF","s11SwiftSyntax012FunctionDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax012FunctionDeclB7BuilderV14useFuncKeywordyyAA05TokenB0VF","s11SwiftSyntax012FunctionDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax012FunctionDeclB7BuilderV25useGenericParameterClauseyyAA0ghiB0VF","s11SwiftSyntax012FunctionDeclB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax012FunctionTypeB0V010withReturnD0yAcA0dB0VSgF","s11SwiftSyntax012FunctionTypeB0V11addArgumentyAcA05Tupled7ElementB0VF","s11SwiftSyntax012FunctionTypeB0V13withArgumentsyAcA05Tupled11ElementListB0VSgF","s11SwiftSyntax012FunctionTypeB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax012FunctionTypeB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax012FunctionTypeB0V16withAsyncKeywordyAcA05TokenB0VSgF","s11SwiftSyntax012FunctionTypeB0V27withThrowsOrRethrowsKeywordyAcA05TokenB0VSgF","s11SwiftSyntax012FunctionTypeB0V9withArrowyAcA05TokenB0VSgF","s11SwiftSyntax012FunctionTypeB7BuilderV09useReturnD0yyAA0dB0VF","s11SwiftSyntax012FunctionTypeB7BuilderV11addArgumentyyAA05Tupled7ElementB0VF","s11SwiftSyntax012FunctionTypeB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax012FunctionTypeB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax012FunctionTypeB7BuilderV15useAsyncKeywordyyAA05TokenB0VF","s11SwiftSyntax012FunctionTypeB7BuilderV26useThrowsOrRethrowsKeywordyyAA05TokenB0VF","s11SwiftSyntax012FunctionTypeB7BuilderV8useArrowyyAA05TokenB0VF","s11SwiftSyntax012IfConfigDeclB0V11withClausesyAcA0cd10ClauseListB0VSgF","s11SwiftSyntax012IfConfigDeclB0V14withPoundEndifyAcA05TokenB0VSgF","s11SwiftSyntax012IfConfigDeclB0V9addClauseyAcA0cdgB0VF","s11SwiftSyntax012IfConfigDeclB7BuilderV13usePoundEndifyyAA05TokenB0VF","s11SwiftSyntax012IfConfigDeclB7BuilderV9addClauseyyAA0cdhB0VF","s11SwiftSyntax012MetatypeTypeB0V04withD10OrProtocolyAcA05TokenB0VSgF","s11SwiftSyntax012MetatypeTypeB0V08withBaseD0yAcA0dB0VSgF","s11SwiftSyntax012MetatypeTypeB0V10withPeriodyAcA05TokenB0VSgF","s11SwiftSyntax012MetatypeTypeB7BuilderV03useD10OrProtocolyyAA05TokenB0VF","s11SwiftSyntax012MetatypeTypeB7BuilderV07useBaseD0yyAA0dB0VF","s11SwiftSyntax012MetatypeTypeB7BuilderV9usePeriodyyAA05TokenB0VF","s11SwiftSyntax012ModifierListB0V10prependingyAcA04DeclcB0VF","s11SwiftSyntax012ModifierListB0V12makeIteratorAC0F0VyF","s11SwiftSyntax012ModifierListB0V12removingLastACyF","s11SwiftSyntax012ModifierListB0V13removingFirstACyF","s11SwiftSyntax012ModifierListB0V13withoutTriviaACyF","s11SwiftSyntax012ModifierListB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax012ModifierListB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax012ModifierListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax012ModifierListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax012ModifierListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012ModifierListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012ModifierListB0V8IteratorV4nextAA04DeclcB0VSgyF","s11SwiftSyntax012ModifierListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax012ModifierListB0V8removing7childAtACSi_tF","s11SwiftSyntax012ModifierListB0V9appendingyAcA04DeclcB0VF","s11SwiftSyntax012ModifierListB0V9inserting_2atAcA04DeclcB0V_SitF","s11SwiftSyntax012ModifierListB0V9replacing7childAt4withACSi_AA04DeclcB0VtF","s11SwiftSyntax012ObjCSelectorB0V10prependingyAcA0cd5PieceB0VF","s11SwiftSyntax012ObjCSelectorB0V12makeIteratorAC0F0VyF","s11SwiftSyntax012ObjCSelectorB0V12removingLastACyF","s11SwiftSyntax012ObjCSelectorB0V13removingFirstACyF","s11SwiftSyntax012ObjCSelectorB0V13withoutTriviaACyF","s11SwiftSyntax012ObjCSelectorB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax012ObjCSelectorB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax012ObjCSelectorB0V20withoutLeadingTriviaACyF","s11SwiftSyntax012ObjCSelectorB0V21withoutTrailingTriviaACyF","s11SwiftSyntax012ObjCSelectorB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012ObjCSelectorB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax012ObjCSelectorB0V8IteratorV4nextAA0cd5PieceB0VSgyF","s11SwiftSyntax012ObjCSelectorB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax012ObjCSelectorB0V8removing7childAtACSi_tF","s11SwiftSyntax012ObjCSelectorB0V9appendingyAcA0cd5PieceB0VF","s11SwiftSyntax012ObjCSelectorB0V9inserting_2atAcA0cd5PieceB0V_SitF","s11SwiftSyntax012ObjCSelectorB0V9replacing7childAt4withACSi_AA0cd5PieceB0VtF","s11SwiftSyntax012OperatorDeclB0V04withC18PrecedenceAndTypesyAcA0cfghB0VSgF","s11SwiftSyntax012OperatorDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax012OperatorDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax012OperatorDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax012OperatorDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax012OperatorDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax012OperatorDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax012OperatorDeclB7BuilderV03useC18PrecedenceAndTypesyyAA0cghiB0VF","s11SwiftSyntax012OperatorDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax012OperatorDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax012OperatorDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax012OperatorDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax012OptionalTypeB0V011withWrappedD0yAcA0dB0VSgF","s11SwiftSyntax012OptionalTypeB0V16withQuestionMarkyAcA05TokenB0VSgF","s11SwiftSyntax012OptionalTypeB7BuilderV010useWrappedD0yyAA0dB0VF","s11SwiftSyntax012OptionalTypeB7BuilderV15useQuestionMarkyyAA05TokenB0VF","s11SwiftSyntax012ProtocolDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax012ProtocolDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax012ProtocolDeclB0V11withMembersyAcA06Memberd5BlockB0VSgF","s11SwiftSyntax012ProtocolDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax012ProtocolDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax012ProtocolDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax012ProtocolDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax012ProtocolDeclB0V21withInheritanceClauseyAcA04TypefgB0VSgF","s11SwiftSyntax012ProtocolDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax012ProtocolDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax012ProtocolDeclB7BuilderV10useMembersyyAA06Memberd5BlockB0VF","s11SwiftSyntax012ProtocolDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax012ProtocolDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax012ProtocolDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax012ProtocolDeclB7BuilderV20useInheritanceClauseyyAA04TypeghB0VF","s11SwiftSyntax012ProtocolDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax012ReturnClauseB0V04withC4TypeyAcA0fB0VSgF","s11SwiftSyntax012ReturnClauseB0V9withArrowyAcA05TokenB0VSgF","s11SwiftSyntax012ReturnClauseB7BuilderV03useC4TypeyyAA0gB0VF","s11SwiftSyntax012ReturnClauseB7BuilderV8useArrowyyAA05TokenB0VF","s11SwiftSyntax012SequenceExprB0V10addElementyAcA0dB0VF","s11SwiftSyntax012SequenceExprB0V12withElementsyAcA0d4ListB0VSgF","s11SwiftSyntax012SequenceExprB7BuilderV10addElementyyAA0dB0VF","s11SwiftSyntax012SuperRefExprB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax012SuperRefExprB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax012TuplePatternB0V10addElementyAcA0cdfB0VF","s11SwiftSyntax012TuplePatternB0V12withElementsyAcA0cd11ElementListB0VSgF","s11SwiftSyntax012TuplePatternB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax012TuplePatternB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax012TuplePatternB7BuilderV10addElementyyAA0cdgB0VF","s11SwiftSyntax012TuplePatternB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax012TuplePatternB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax012VariableDeclB0V10addBindingyAcA07PatternfB0VF","s11SwiftSyntax012VariableDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax012VariableDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax012VariableDeclB0V12withBindingsyAcA018PatternBindingListB0VSgF","s11SwiftSyntax012VariableDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax012VariableDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax012VariableDeclB0V19withLetOrVarKeywordyAcA05TokenB0VSgF","s11SwiftSyntax012VariableDeclB7BuilderV10addBindingyyAA07PatterngB0VF","s11SwiftSyntax012VariableDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax012VariableDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax012VariableDeclB7BuilderV18useLetOrVarKeywordyyAA05TokenB0VF","s11SwiftSyntax012VersionTupleB0V09withPatchC0yAcA05TokenB0VSgF","s11SwiftSyntax012VersionTupleB0V14withMajorMinoryAcA0B0VSgF","s11SwiftSyntax012VersionTupleB0V15withPatchPeriodyAcA05TokenB0VSgF","s11SwiftSyntax012VersionTupleB7BuilderV08usePatchC0yyAA05TokenB0VF","s11SwiftSyntax012VersionTupleB7BuilderV13useMajorMinoryyAA0B0VF","s11SwiftSyntax012VersionTupleB7BuilderV14usePatchPeriodyyAA05TokenB0VF","s11SwiftSyntax013AccessorBlockB0V03addC0yAcA0c4DeclB0VF","s11SwiftSyntax013AccessorBlockB0V13withAccessorsyAcA0c4ListB0VSgF","s11SwiftSyntax013AccessorBlockB0V13withLeftBraceyAcA05TokenB0VSgF","s11SwiftSyntax013AccessorBlockB0V14withRightBraceyAcA05TokenB0VSgF","s11SwiftSyntax013AccessorBlockB7BuilderV03addC0yyAA0c4DeclB0VF","s11SwiftSyntax013AccessorBlockB7BuilderV12useLeftBraceyyAA05TokenB0VF","s11SwiftSyntax013AccessorBlockB7BuilderV13useRightBraceyyAA05TokenB0VF","s11SwiftSyntax013AsTypePatternB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax013AsTypePatternB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax013AsTypePatternB0V04withE0yAcA0eB0VSgF","s11SwiftSyntax013AsTypePatternB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax013AsTypePatternB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax013AsTypePatternB7BuilderV03useE0yyAA0eB0VF","s11SwiftSyntax013AttributeListB0V10prependingyAcA0B0VF","s11SwiftSyntax013AttributeListB0V12makeIteratorAC0F0VyF","s11SwiftSyntax013AttributeListB0V12removingLastACyF","s11SwiftSyntax013AttributeListB0V13removingFirstACyF","s11SwiftSyntax013AttributeListB0V13withoutTriviaACyF","s11SwiftSyntax013AttributeListB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax013AttributeListB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax013AttributeListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax013AttributeListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax013AttributeListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax013AttributeListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax013AttributeListB0V8IteratorV4nextAA0B0VSgyF","s11SwiftSyntax013AttributeListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax013AttributeListB0V8removing7childAtACSi_tF","s11SwiftSyntax013AttributeListB0V9appendingyAcA0B0VF","s11SwiftSyntax013AttributeListB0V9inserting_2atAcA0B0V_SitF","s11SwiftSyntax013AttributeListB0V9replacing7childAt4withACSi_AA0B0VtF","s11SwiftSyntax013CatchItemListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax013CatchItemListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax013CatchItemListB0V12removingLastACyF","s11SwiftSyntax013CatchItemListB0V13removingFirstACyF","s11SwiftSyntax013CatchItemListB0V13withoutTriviaACyF","s11SwiftSyntax013CatchItemListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax013CatchItemListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax013CatchItemListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax013CatchItemListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax013CatchItemListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax013CatchItemListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax013CatchItemListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax013CatchItemListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax013CatchItemListB0V8removing7childAtACSi_tF","s11SwiftSyntax013CatchItemListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax013CatchItemListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax013CatchItemListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax013CodeBlockItemB0V04withE0yAcA0B0VSgF","s11SwiftSyntax013CodeBlockItemB0V13withSemicolonyAcA05TokenB0VSgF","s11SwiftSyntax013CodeBlockItemB0V15withErrorTokensyAcA0B0VSgF","s11SwiftSyntax013CodeBlockItemB7BuilderV03useE0yyAA0B0VF","s11SwiftSyntax013CodeBlockItemB7BuilderV12useSemicolonyyAA05TokenB0VF","s11SwiftSyntax013CodeBlockItemB7BuilderV14useErrorTokensyyAA0B0VF","s11SwiftSyntax013ExtensionDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax013ExtensionDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax013ExtensionDeclB0V11withMembersyAcA06Memberd5BlockB0VSgF","s11SwiftSyntax013ExtensionDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax013ExtensionDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax013ExtensionDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax013ExtensionDeclB0V16withExtendedTypeyAcA0gB0VSgF","s11SwiftSyntax013ExtensionDeclB0V21withInheritanceClauseyAcA04TypefgB0VSgF","s11SwiftSyntax013ExtensionDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax013ExtensionDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax013ExtensionDeclB7BuilderV10useMembersyyAA06Memberd5BlockB0VF","s11SwiftSyntax013ExtensionDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax013ExtensionDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax013ExtensionDeclB7BuilderV15useExtendedTypeyyAA0hB0VF","s11SwiftSyntax013ExtensionDeclB7BuilderV20useInheritanceClauseyyAA04TypeghB0VF","s11SwiftSyntax013ExtensionDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax013InheritedTypeB0V04withD4NameyAcA0dB0VSgF","s11SwiftSyntax013InheritedTypeB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax013InheritedTypeB7BuilderV03useD4NameyyAA0dB0VF","s11SwiftSyntax013InheritedTypeB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax013IsTypePatternB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax013IsTypePatternB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax013IsTypePatternB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax013IsTypePatternB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax013ObjcNamePieceB0V04withD0yAcA05TokenB0VSgF","s11SwiftSyntax013ObjcNamePieceB0V7withDotyAcA05TokenB0VSgF","s11SwiftSyntax013ObjcNamePieceB7BuilderV03useD0yyAA05TokenB0VF","s11SwiftSyntax013ObjcNamePieceB7BuilderV6useDotyyAA05TokenB0VF","s11SwiftSyntax013ParenthesizedB0P13withLeftParenyxAA05TokenB0VSgF","s11SwiftSyntax013ParenthesizedB0P14withRightParenyxAA05TokenB0VSgF","s11SwiftSyntax013PoundFileExprB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax013PoundFileExprB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax013PoundLineExprB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax013PoundLineExprB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax013StringSegmentB0V11withContentyAcA05TokenB0VSgF","s11SwiftSyntax013StringSegmentB7BuilderV10useContentyyAA05TokenB0VF","s11SwiftSyntax013SubscriptDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax013SubscriptDeclB0V10withResultyAcA012ReturnClauseB0VSgF","s11SwiftSyntax013SubscriptDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax013SubscriptDeclB0V11withIndicesyAcA015ParameterClauseB0VSgF","s11SwiftSyntax013SubscriptDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax013SubscriptDeclB0V12withAccessoryAcA0B0VSgF","s11SwiftSyntax013SubscriptDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax013SubscriptDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax013SubscriptDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax013SubscriptDeclB0V26withGenericParameterClauseyAcA0fghB0VSgF","s11SwiftSyntax013SubscriptDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV10useIndicesyyAA015ParameterClauseB0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV11useAccessoryyAA0B0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV25useGenericParameterClauseyyAA0ghiB0VF","s11SwiftSyntax013SubscriptDeclB7BuilderV9useResultyyAA012ReturnClauseB0VF","s11SwiftSyntax013SubscriptExprB0V11addArgumentyAcA05Tupled7ElementB0VF","s11SwiftSyntax013SubscriptExprB0V15withLeftBracketyAcA05TokenB0VSgF","s11SwiftSyntax013SubscriptExprB0V16withArgumentListyAcA05Tupled7ElementgB0VSgF","s11SwiftSyntax013SubscriptExprB0V16withRightBracketyAcA05TokenB0VSgF","s11SwiftSyntax013SubscriptExprB0V19withTrailingClosureyAcA0gdB0VSgF","s11SwiftSyntax013SubscriptExprB0V20withCalledExpressionyAcA0dB0VSgF","s11SwiftSyntax013SubscriptExprB0V28addAdditionalTrailingClosureyAcA08Multiplegh7ElementB0VF","s11SwiftSyntax013SubscriptExprB0V30withAdditionalTrailingClosuresyAcA08Multipleg18ClosureElementListB0VSgF","s11SwiftSyntax013SubscriptExprB7BuilderV11addArgumentyyAA05Tupled7ElementB0VF","s11SwiftSyntax013SubscriptExprB7BuilderV14useLeftBracketyyAA05TokenB0VF","s11SwiftSyntax013SubscriptExprB7BuilderV15useRightBracketyyAA05TokenB0VF","s11SwiftSyntax013SubscriptExprB7BuilderV18useTrailingClosureyyAA0hdB0VF","s11SwiftSyntax013SubscriptExprB7BuilderV19useCalledExpressionyyAA0dB0VF","s11SwiftSyntax013SubscriptExprB7BuilderV28addAdditionalTrailingClosureyyAA08Multiplehi7ElementB0VF","s11SwiftSyntax013TypealiasDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax013TypealiasDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax013TypealiasDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax013TypealiasDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax013TypealiasDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax013TypealiasDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax013TypealiasDeclB0V15withInitializeryAcA04Typef6ClauseB0VSgF","s11SwiftSyntax013TypealiasDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax013TypealiasDeclB0V26withGenericParameterClauseyAcA0fghB0VSgF","s11SwiftSyntax013TypealiasDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax013TypealiasDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax013TypealiasDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax013TypealiasDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax013TypealiasDeclB7BuilderV14useInitializeryyAA04Typeg6ClauseB0VF","s11SwiftSyntax013TypealiasDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax013TypealiasDeclB7BuilderV25useGenericParameterClauseyyAA0ghiB0VF","s11SwiftSyntax013WithCodeBlockB0P8withBodyyxAA0deB0VSgF","s11SwiftSyntax014AssignmentExprB0V15withAssignTokenyAcA0gB0VSgF","s11SwiftSyntax014AssignmentExprB7BuilderV14useAssignTokenyyAA0hB0VF","s11SwiftSyntax014AttributedTypeB0V08withBaseD0yAcA0dB0VSgF","s11SwiftSyntax014AttributedTypeB0V12addAttributeyAcA0B0VF","s11SwiftSyntax014AttributedTypeB0V13withSpecifieryAcA05TokenB0VSgF","s11SwiftSyntax014AttributedTypeB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax014AttributedTypeB7BuilderV07useBaseD0yyAA0dB0VF","s11SwiftSyntax014AttributedTypeB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax014AttributedTypeB7BuilderV12useSpecifieryyAA05TokenB0VF","s11SwiftSyntax014DictionaryExprB0V11withContentyAcA0B0VSgF","s11SwiftSyntax014DictionaryExprB0V14withLeftSquareyAcA05TokenB0VSgF","s11SwiftSyntax014DictionaryExprB0V15withRightSquareyAcA05TokenB0VSgF","s11SwiftSyntax014DictionaryExprB7BuilderV10useContentyyAA0B0VF","s11SwiftSyntax014DictionaryExprB7BuilderV13useLeftSquareyyAA05TokenB0VF","s11SwiftSyntax014DictionaryExprB7BuilderV14useRightSquareyyAA05TokenB0VF","s11SwiftSyntax014DictionaryTypeB0V07withKeyD0yAcA0dB0VSgF","s11SwiftSyntax014DictionaryTypeB0V09withValueD0yAcA0dB0VSgF","s11SwiftSyntax014DictionaryTypeB0V21withLeftSquareBracketyAcA05TokenB0VSgF","s11SwiftSyntax014DictionaryTypeB0V22withRightSquareBracketyAcA05TokenB0VSgF","s11SwiftSyntax014DictionaryTypeB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax014DictionaryTypeB7BuilderV06useKeyD0yyAA0dB0VF","s11SwiftSyntax014DictionaryTypeB7BuilderV08useValueD0yyAA0dB0VF","s11SwiftSyntax014DictionaryTypeB7BuilderV20useLeftSquareBracketyyAA05TokenB0VF","s11SwiftSyntax014DictionaryTypeB7BuilderV21useRightSquareBracketyyAA05TokenB0VF","s11SwiftSyntax014DictionaryTypeB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax014ExpressionStmtB0V04withC0yAcA04ExprB0VSgF","s11SwiftSyntax014ExpressionStmtB7BuilderV03useC0yyAA04ExprB0VF","s11SwiftSyntax014IdentifiedDeclB0P14withIdentifieryxAA05TokenB0VSgF","s11SwiftSyntax014IdentifierExprB0V04withC0yAcA05TokenB0VSgF","s11SwiftSyntax014IdentifierExprB0V21withDeclNameArgumentsyAcA0fghB0VSgF","s11SwiftSyntax014IdentifierExprB7BuilderV03useC0yyAA05TokenB0VF","s11SwiftSyntax014IdentifierExprB7BuilderV20useDeclNameArgumentsyyAA0ghiB0VF","s11SwiftSyntax014IdentifierListB0V10prependingyAcA05TokenB0VF","s11SwiftSyntax014IdentifierListB0V12makeIteratorAC0F0VyF","s11SwiftSyntax014IdentifierListB0V12removingLastACyF","s11SwiftSyntax014IdentifierListB0V13removingFirstACyF","s11SwiftSyntax014IdentifierListB0V13withoutTriviaACyF","s11SwiftSyntax014IdentifierListB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax014IdentifierListB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax014IdentifierListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax014IdentifierListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax014IdentifierListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax014IdentifierListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax014IdentifierListB0V8IteratorV4nextAA05TokenB0VSgyF","s11SwiftSyntax014IdentifierListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax014IdentifierListB0V8removing7childAtACSi_tF","s11SwiftSyntax014IdentifierListB0V9appendingyAcA05TokenB0VF","s11SwiftSyntax014IdentifierListB0V9inserting_2atAcA05TokenB0V_SitF","s11SwiftSyntax014IdentifierListB0V9replacing7childAt4withACSi_AA05TokenB0VtF","s11SwiftSyntax014IfConfigClauseB0V12withElementsyAcA0B0VSgF","s11SwiftSyntax014IfConfigClauseB0V13withConditionyAcA04ExprB0VSgF","s11SwiftSyntax014IfConfigClauseB0V16withPoundKeywordyAcA05TokenB0VSgF","s11SwiftSyntax014IfConfigClauseB7BuilderV11useElementsyyAA0B0VF","s11SwiftSyntax014IfConfigClauseB7BuilderV12useConditionyyAA04ExprB0VF","s11SwiftSyntax014IfConfigClauseB7BuilderV15usePoundKeywordyyAA05TokenB0VF","s11SwiftSyntax014MemberDeclListB0V10prependingyAcA0cde4ItemB0VF","s11SwiftSyntax014MemberDeclListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax014MemberDeclListB0V12removingLastACyF","s11SwiftSyntax014MemberDeclListB0V13removingFirstACyF","s11SwiftSyntax014MemberDeclListB0V13withoutTriviaACyF","s11SwiftSyntax014MemberDeclListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax014MemberDeclListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax014MemberDeclListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax014MemberDeclListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax014MemberDeclListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax014MemberDeclListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax014MemberDeclListB0V8IteratorV4nextAA0cde4ItemB0VSgyF","s11SwiftSyntax014MemberDeclListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax014MemberDeclListB0V8removing7childAtACSi_tF","s11SwiftSyntax014MemberDeclListB0V9appendingyAcA0cde4ItemB0VF","s11SwiftSyntax014MemberDeclListB0V9inserting_2atAcA0cde4ItemB0V_SitF","s11SwiftSyntax014MemberDeclListB0V9replacing7childAt4withACSi_AA0cde4ItemB0VtF","s11SwiftSyntax014NilLiteralExprB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax014NilLiteralExprB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax014PatternBindingB0V04withC0yAcA0cB0VSgF","s11SwiftSyntax014PatternBindingB0V12withAccessoryAcA0B0VSgF","s11SwiftSyntax014PatternBindingB0V15withInitializeryAcA0f6ClauseB0VSgF","s11SwiftSyntax014PatternBindingB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax014PatternBindingB0V18withTypeAnnotationyAcA0fgB0VSgF","s11SwiftSyntax014PatternBindingB7BuilderV03useC0yyAA0cB0VF","s11SwiftSyntax014PatternBindingB7BuilderV11useAccessoryyAA0B0VF","s11SwiftSyntax014PatternBindingB7BuilderV14useInitializeryyAA0g6ClauseB0VF","s11SwiftSyntax014PatternBindingB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax014PatternBindingB7BuilderV17useTypeAnnotationyyAA0ghB0VF","s11SwiftSyntax014PoundErrorDeclB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax014PoundErrorDeclB0V11withMessageyAcA017StringLiteralExprB0VSgF","s11SwiftSyntax014PoundErrorDeclB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax014PoundErrorDeclB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax014PoundErrorDeclB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax014PoundErrorDeclB7BuilderV10useMessageyyAA017StringLiteralExprB0VF","s11SwiftSyntax014PoundErrorDeclB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax014PoundErrorDeclB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax014SpecializeExprB0V14withExpressionyAcA0dB0VSgF","s11SwiftSyntax014SpecializeExprB0V25withGenericArgumentClauseyAcA0fghB0VSgF","s11SwiftSyntax014SpecializeExprB7BuilderV13useExpressionyyAA0dB0VF","s11SwiftSyntax014SpecializeExprB7BuilderV24useGenericArgumentClauseyyAA0ghiB0VF","s11SwiftSyntax014SwitchCaseListB0V10prependingyAcA0B0VF","s11SwiftSyntax014SwitchCaseListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax014SwitchCaseListB0V12removingLastACyF","s11SwiftSyntax014SwitchCaseListB0V13removingFirstACyF","s11SwiftSyntax014SwitchCaseListB0V13withoutTriviaACyF","s11SwiftSyntax014SwitchCaseListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax014SwitchCaseListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax014SwitchCaseListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax014SwitchCaseListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax014SwitchCaseListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax014SwitchCaseListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax014SwitchCaseListB0V8IteratorV4nextAA0B0VSgyF","s11SwiftSyntax014SwitchCaseListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax014SwitchCaseListB0V8removing7childAtACSi_tF","s11SwiftSyntax014SwitchCaseListB0V9appendingyAcA0B0VF","s11SwiftSyntax014SwitchCaseListB0V9inserting_2atAcA0B0V_SitF","s11SwiftSyntax014SwitchCaseListB0V9replacing7childAt4withACSi_AA0B0VtF","s11SwiftSyntax014TypeAnnotationB0V04withC0yAcA0cB0VSgF","s11SwiftSyntax014TypeAnnotationB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax014TypeAnnotationB7BuilderV03useC0yyAA0cB0VF","s11SwiftSyntax014TypeAnnotationB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax014WithStatementsB0P04withD0yxAA017CodeBlockItemListB0VSgF","s11SwiftSyntax015CatchClauseListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax015CatchClauseListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax015CatchClauseListB0V12removingLastACyF","s11SwiftSyntax015CatchClauseListB0V13removingFirstACyF","s11SwiftSyntax015CatchClauseListB0V13withoutTriviaACyF","s11SwiftSyntax015CatchClauseListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax015CatchClauseListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax015CatchClauseListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax015CatchClauseListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax015CatchClauseListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax015CatchClauseListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax015CatchClauseListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax015CatchClauseListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax015CatchClauseListB0V8removing7childAtACSi_tF","s11SwiftSyntax015CatchClauseListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax015CatchClauseListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax015CatchClauseListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax015CompositionTypeB0V10addElementyAcA0cdfB0VF","s11SwiftSyntax015CompositionTypeB0V12withElementsyAcA0cd11ElementListB0VSgF","s11SwiftSyntax015CompositionTypeB7BuilderV10addElementyyAA0cdgB0VF","s11SwiftSyntax015CustomAttributeB0V04withD4NameyAcA04TypeB0VSgF","s11SwiftSyntax015CustomAttributeB0V11addArgumentyAcA016TupleExprElementB0VF","s11SwiftSyntax015CustomAttributeB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax015CustomAttributeB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax015CustomAttributeB0V15withAtSignTokenyAcA0hB0VSgF","s11SwiftSyntax015CustomAttributeB0V16withArgumentListyAcA016TupleExprElementgB0VSgF","s11SwiftSyntax015CustomAttributeB7BuilderV03useD4NameyyAA04TypeB0VF","s11SwiftSyntax015CustomAttributeB7BuilderV11addArgumentyyAA016TupleExprElementB0VF","s11SwiftSyntax015CustomAttributeB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax015CustomAttributeB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax015CustomAttributeB7BuilderV14useAtSignTokenyyAA0iB0VF","s11SwiftSyntax015DeclarationStmtB0V04withC0yAcA04DeclB0VSgF","s11SwiftSyntax015DeclarationStmtB7BuilderV03useC0yyAA04DeclB0VF","s11SwiftSyntax015EnumCaseElementB0V12withRawValueyAcA017InitializerClauseB0VSgF","s11SwiftSyntax015EnumCaseElementB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax015EnumCaseElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax015EnumCaseElementB0V19withAssociatedValueyAcA015ParameterClauseB0VSgF","s11SwiftSyntax015EnumCaseElementB7BuilderV11useRawValueyyAA017InitializerClauseB0VF","s11SwiftSyntax015EnumCaseElementB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax015EnumCaseElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax015EnumCaseElementB7BuilderV18useAssociatedValueyyAA015ParameterClauseB0VF","s11SwiftSyntax015EnumCasePatternB0V04withD4NameyAcA05TokenB0VSgF","s11SwiftSyntax015EnumCasePatternB0V10withPeriodyAcA05TokenB0VSgF","s11SwiftSyntax015EnumCasePatternB0V19withAssociatedTupleyAcA0heB0VSgF","s11SwiftSyntax015EnumCasePatternB0V8withTypeyAcA0gB0VSgF","s11SwiftSyntax015EnumCasePatternB7BuilderV03useD4NameyyAA05TokenB0VF","s11SwiftSyntax015EnumCasePatternB7BuilderV18useAssociatedTupleyyAA0ieB0VF","s11SwiftSyntax015EnumCasePatternB7BuilderV7useTypeyyAA0hB0VF","s11SwiftSyntax015EnumCasePatternB7BuilderV9usePeriodyyAA05TokenB0VF","s11SwiftSyntax015FallthroughStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax015FallthroughStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax015ForcedValueExprB0V14withExpressionyAcA0eB0VSgF","s11SwiftSyntax015ForcedValueExprB0V19withExclamationMarkyAcA05TokenB0VSgF","s11SwiftSyntax015ForcedValueExprB7BuilderV13useExpressionyyAA0eB0VF","s11SwiftSyntax015ForcedValueExprB7BuilderV18useExclamationMarkyyAA05TokenB0VF","s11SwiftSyntax015GenericArgumentB0V04withD4TypeyAcA0fB0VSgF","s11SwiftSyntax015GenericArgumentB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax015GenericArgumentB7BuilderV03useD4TypeyyAA0gB0VF","s11SwiftSyntax015GenericArgumentB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax015InitializerDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax015InitializerDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax015InitializerDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax015InitializerDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax015InitializerDeclB0V14withParametersyAcA015ParameterClauseB0VSgF","s11SwiftSyntax015InitializerDeclB0V15withInitKeywordyAcA05TokenB0VSgF","s11SwiftSyntax015InitializerDeclB0V16withOptionalMarkyAcA05TokenB0VSgF","s11SwiftSyntax015InitializerDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax015InitializerDeclB0V26withGenericParameterClauseyAcA0fghB0VSgF","s11SwiftSyntax015InitializerDeclB0V27withThrowsOrRethrowsKeywordyAcA05TokenB0VSgF","s11SwiftSyntax015InitializerDeclB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax015InitializerDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax015InitializerDeclB7BuilderV13useParametersyyAA015ParameterClauseB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV14useInitKeywordyyAA05TokenB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV15useOptionalMarkyyAA05TokenB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV25useGenericParameterClauseyyAA0ghiB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV26useThrowsOrRethrowsKeywordyyAA05TokenB0VF","s11SwiftSyntax015InitializerDeclB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax015KeyPathBaseExprB0V10withPeriodyAcA05TokenB0VSgF","s11SwiftSyntax015KeyPathBaseExprB7BuilderV9usePeriodyyAA05TokenB0VF","s11SwiftSyntax015MemberDeclBlockB0V03addC0yAcA0cd8ListItemB0VF","s11SwiftSyntax015MemberDeclBlockB0V11withMembersyAcA0cd4ListB0VSgF","s11SwiftSyntax015MemberDeclBlockB0V13withLeftBraceyAcA05TokenB0VSgF","s11SwiftSyntax015MemberDeclBlockB0V14withRightBraceyAcA05TokenB0VSgF","s11SwiftSyntax015MemberDeclBlockB7BuilderV03addC0yyAA0cd8ListItemB0VF","s11SwiftSyntax015MemberDeclBlockB7BuilderV12useLeftBraceyyAA05TokenB0VF","s11SwiftSyntax015MemberDeclBlockB7BuilderV13useRightBraceyyAA05TokenB0VF","s11SwiftSyntax015ObjcKeyPathExprB0V04withdE0yAcA05TokenB0VSgF","s11SwiftSyntax015ObjcKeyPathExprB0V12addNamePieceyAcA0chiB0VF","s11SwiftSyntax015ObjcKeyPathExprB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax015ObjcKeyPathExprB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax015ObjcKeyPathExprB0V8withNameyAcA0chB0VSgF","s11SwiftSyntax015ObjcKeyPathExprB7BuilderV03usedE0yyAA05TokenB0VF","s11SwiftSyntax015ObjcKeyPathExprB7BuilderV12addNamePieceyyAA0cijB0VF","s11SwiftSyntax015ObjcKeyPathExprB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax015ObjcKeyPathExprB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax015OptionalPatternB0V07withSubD0yAcA0dB0VSgF","s11SwiftSyntax015OptionalPatternB0V16withQuestionMarkyAcA05TokenB0VSgF","s11SwiftSyntax015OptionalPatternB7BuilderV06useSubD0yyAA0dB0VF","s11SwiftSyntax015OptionalPatternB7BuilderV15useQuestionMarkyyAA05TokenB0VF","s11SwiftSyntax015ParameterClauseB0V03addC0yAcA08FunctioncB0VF","s11SwiftSyntax015ParameterClauseB0V04withC4ListyAcA08FunctioncfB0VSgF","s11SwiftSyntax015ParameterClauseB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax015ParameterClauseB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax015ParameterClauseB7BuilderV03addC0yyAA08FunctioncB0VF","s11SwiftSyntax015ParameterClauseB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax015ParameterClauseB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax015PoundAssertStmtB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax015PoundAssertStmtB0V11withMessageyAcA05TokenB0VSgF","s11SwiftSyntax015PoundAssertStmtB0V13withConditionyAcA04ExprB0VSgF","s11SwiftSyntax015PoundAssertStmtB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax015PoundAssertStmtB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax015PoundAssertStmtB0V9withCommayAcA05TokenB0VSgF","s11SwiftSyntax015PoundAssertStmtB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax015PoundAssertStmtB7BuilderV10useMessageyyAA05TokenB0VF","s11SwiftSyntax015PoundAssertStmtB7BuilderV12useConditionyyAA04ExprB0VF","s11SwiftSyntax015PoundAssertStmtB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax015PoundAssertStmtB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax015PoundAssertStmtB7BuilderV8useCommayyAA05TokenB0VF","s11SwiftSyntax015PoundColumnExprB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax015PoundColumnExprB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax015PoundFileIDExprB0V04withcD2IDyAcA05TokenB0VSgF","s11SwiftSyntax015PoundFileIDExprB7BuilderV03usecD2IDyyAA05TokenB0VF","s11SwiftSyntax015RepeatWhileStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax015RepeatWhileStmtB0V04withD7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax015RepeatWhileStmtB0V13withConditionyAcA04ExprB0VSgF","s11SwiftSyntax015RepeatWhileStmtB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax015RepeatWhileStmtB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax015RepeatWhileStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax015RepeatWhileStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax015RepeatWhileStmtB7BuilderV03useD7KeywordyyAA05TokenB0VF","s11SwiftSyntax015RepeatWhileStmtB7BuilderV12useConditionyyAA04ExprB0VF","s11SwiftSyntax015RepeatWhileStmtB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax015RepeatWhileStmtB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax015RepeatWhileStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax015SwitchCaseLabelB0V03addD4ItemyAcA0dgB0VF","s11SwiftSyntax015SwitchCaseLabelB0V04withD5ItemsyAcA0d8ItemListB0VSgF","s11SwiftSyntax015SwitchCaseLabelB0V04withD7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax015SwitchCaseLabelB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax015SwitchCaseLabelB7BuilderV03addD4ItemyyAA0dhB0VF","s11SwiftSyntax015SwitchCaseLabelB7BuilderV03useD7KeywordyyAA05TokenB0VF","s11SwiftSyntax015SwitchCaseLabelB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax015WildcardPatternB0V04withC0yAcA05TokenB0VSgF","s11SwiftSyntax015WildcardPatternB0V18withTypeAnnotationyAcA0fgB0VSgF","s11SwiftSyntax015WildcardPatternB7BuilderV03useC0yyAA05TokenB0VF","s11SwiftSyntax015WildcardPatternB7BuilderV17useTypeAnnotationyyAA0ghB0VF","s11SwiftSyntax016ArrayElementListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax016ArrayElementListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax016ArrayElementListB0V12removingLastACyF","s11SwiftSyntax016ArrayElementListB0V13removingFirstACyF","s11SwiftSyntax016ArrayElementListB0V13withoutTriviaACyF","s11SwiftSyntax016ArrayElementListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax016ArrayElementListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax016ArrayElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax016ArrayElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax016ArrayElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax016ArrayElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax016ArrayElementListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax016ArrayElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax016ArrayElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax016ArrayElementListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax016ArrayElementListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax016ArrayElementListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax016ClosureParamListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax016ClosureParamListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax016ClosureParamListB0V12removingLastACyF","s11SwiftSyntax016ClosureParamListB0V13removingFirstACyF","s11SwiftSyntax016ClosureParamListB0V13withoutTriviaACyF","s11SwiftSyntax016ClosureParamListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax016ClosureParamListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax016ClosureParamListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax016ClosureParamListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax016ClosureParamListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax016ClosureParamListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax016ClosureParamListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax016ClosureParamListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax016ClosureParamListB0V8removing7childAtACSi_tF","s11SwiftSyntax016ClosureParamListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax016ClosureParamListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax016ClosureParamListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax016ClosureSignatureB0V10withOutputyAcA012ReturnClauseB0VSgF","s11SwiftSyntax016ClosureSignatureB0V11withCaptureyAcA0cfdB0VSgF","s11SwiftSyntax016ClosureSignatureB0V12addAttributeyAcA0B0VF","s11SwiftSyntax016ClosureSignatureB0V13withThrowsTokyAcA05TokenB0VSgF","s11SwiftSyntax016ClosureSignatureB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax016ClosureSignatureB0V16withAsyncKeywordyAcA05TokenB0VSgF","s11SwiftSyntax016ClosureSignatureB0V9withInTokyAcA05TokenB0VSgF","s11SwiftSyntax016ClosureSignatureB0V9withInputyAcA0B0VSgF","s11SwiftSyntax016ClosureSignatureB7BuilderV10useCaptureyyAA0cgdB0VF","s11SwiftSyntax016ClosureSignatureB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax016ClosureSignatureB7BuilderV12useThrowsTokyyAA05TokenB0VF","s11SwiftSyntax016ClosureSignatureB7BuilderV15useAsyncKeywordyyAA05TokenB0VF","s11SwiftSyntax016ClosureSignatureB7BuilderV8useInTokyyAA05TokenB0VF","s11SwiftSyntax016ClosureSignatureB7BuilderV8useInputyyAA0B0VF","s11SwiftSyntax016ClosureSignatureB7BuilderV9useOutputyyAA012ReturnClauseB0VF","s11SwiftSyntax016ConditionElementB0V04withC0yAcA0B0VSgF","s11SwiftSyntax016ConditionElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax016ConditionElementB7BuilderV03useC0yyAA0B0VF","s11SwiftSyntax016ConditionElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax016DeclNameArgumentB0V04withD0yAcA05TokenB0VSgF","s11SwiftSyntax016DeclNameArgumentB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax016DeclNameArgumentB7BuilderV03useD0yyAA05TokenB0VF","s11SwiftSyntax016DeclNameArgumentB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax016FloatLiteralExprB0V18withFloatingDigitsyAcA05TokenB0VSgF","s11SwiftSyntax016FloatLiteralExprB7BuilderV17useFloatingDigitsyyAA05TokenB0VF","s11SwiftSyntax016FunctionCallExprB0V11addArgumentyAcA05Tuplee7ElementB0VF","s11SwiftSyntax016FunctionCallExprB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax016FunctionCallExprB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax016FunctionCallExprB0V16withArgumentListyAcA05Tuplee7ElementhB0VSgF","s11SwiftSyntax016FunctionCallExprB0V19withTrailingClosureyAcA0heB0VSgF","s11SwiftSyntax016FunctionCallExprB0V20withCalledExpressionyAcA0eB0VSgF","s11SwiftSyntax016FunctionCallExprB0V28addAdditionalTrailingClosureyAcA08Multiplehi7ElementB0VF","s11SwiftSyntax016FunctionCallExprB0V30withAdditionalTrailingClosuresyAcA08Multipleh18ClosureElementListB0VSgF","s11SwiftSyntax016FunctionCallExprB7BuilderV11addArgumentyyAA05Tuplee7ElementB0VF","s11SwiftSyntax016FunctionCallExprB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax016FunctionCallExprB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax016FunctionCallExprB7BuilderV18useTrailingClosureyyAA0ieB0VF","s11SwiftSyntax016FunctionCallExprB7BuilderV19useCalledExpressionyyAA0eB0VF","s11SwiftSyntax016FunctionCallExprB7BuilderV28addAdditionalTrailingClosureyyAA08Multipleij7ElementB0VF","s11SwiftSyntax016FunctionDeclNameB0V04withE0yAcA0B0VSgF","s11SwiftSyntax016FunctionDeclNameB0V13withArgumentsyAcA0degB0VSgF","s11SwiftSyntax016FunctionDeclNameB7BuilderV03useE0yyAA0B0VF","s11SwiftSyntax016FunctionDeclNameB7BuilderV12useArgumentsyyAA0dehB0VF","s11SwiftSyntax016GenericParameterB0V12addAttributeyAcA0B0VF","s11SwiftSyntax016GenericParameterB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax016GenericParameterB0V17withInheritedTypeyAcA0gB0VSgF","s11SwiftSyntax016GenericParameterB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax016GenericParameterB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax016GenericParameterB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax016GenericParameterB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax016GenericParameterB7BuilderV16useInheritedTypeyyAA0hB0VF","s11SwiftSyntax016GenericParameterB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax016GenericParameterB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax016GenericParameterB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax016MemberAccessExprB0V21withDeclNameArgumentsyAcA0ghiB0VSgF","s11SwiftSyntax016MemberAccessExprB0V7withDotyAcA05TokenB0VSgF","s11SwiftSyntax016MemberAccessExprB0V8withBaseyAcA0eB0VSgF","s11SwiftSyntax016MemberAccessExprB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax016MemberAccessExprB7BuilderV20useDeclNameArgumentsyyAA0hijB0VF","s11SwiftSyntax016MemberAccessExprB7BuilderV6useDotyyAA05TokenB0VF","s11SwiftSyntax016MemberAccessExprB7BuilderV7useBaseyyAA0eB0VF","s11SwiftSyntax016MemberAccessExprB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax016ObjcSelectorExprB0V09withPoundD0yAcA05TokenB0VSgF","s11SwiftSyntax016ObjcSelectorExprB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax016ObjcSelectorExprB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax016ObjcSelectorExprB0V8withKindyAcA05TokenB0VSgF","s11SwiftSyntax016ObjcSelectorExprB0V8withNameyAcA0eB0VSgF","s11SwiftSyntax016ObjcSelectorExprB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax016ObjcSelectorExprB7BuilderV08usePoundD0yyAA05TokenB0VF","s11SwiftSyntax016ObjcSelectorExprB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax016ObjcSelectorExprB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax016ObjcSelectorExprB7BuilderV7useKindyyAA05TokenB0VF","s11SwiftSyntax016ObjcSelectorExprB7BuilderV7useNameyyAA0eB0VF","s11SwiftSyntax016ObjcSelectorExprB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax016PostfixUnaryExprB0V14withExpressionyAcA0eB0VSgF","s11SwiftSyntax016PostfixUnaryExprB0V17withOperatorTokenyAcA0hB0VSgF","s11SwiftSyntax016PostfixUnaryExprB7BuilderV13useExpressionyyAA0eB0VF","s11SwiftSyntax016PostfixUnaryExprB7BuilderV16useOperatorTokenyyAA0iB0VF","s11SwiftSyntax016PoundWarningDeclB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax016PoundWarningDeclB0V11withMessageyAcA017StringLiteralExprB0VSgF","s11SwiftSyntax016PoundWarningDeclB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax016PoundWarningDeclB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax016PoundWarningDeclB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax016PoundWarningDeclB7BuilderV10useMessageyyAA017StringLiteralExprB0VF","s11SwiftSyntax016PoundWarningDeclB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax016PoundWarningDeclB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax016RegexLiteralExprB0V04withC0yAcA05TokenB0VSgF","s11SwiftSyntax016RegexLiteralExprB7BuilderV03useC0yyAA05TokenB0VF","s11SwiftSyntax016TupleExprElementB0V14withExpressionyAcA0dB0VSgF","s11SwiftSyntax016TupleExprElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax016TupleExprElementB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax016TupleExprElementB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax016TupleExprElementB7BuilderV13useExpressionyyAA0dB0VF","s11SwiftSyntax016TupleExprElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax016TupleExprElementB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax016TupleExprElementB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax016TupleTypeElementB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax016TupleTypeElementB0V12withEllipsisyAcA05TokenB0VSgF","s11SwiftSyntax016TupleTypeElementB0V14withSecondNameyAcA05TokenB0VSgF","s11SwiftSyntax016TupleTypeElementB0V15withInitializeryAcA0g6ClauseB0VSgF","s11SwiftSyntax016TupleTypeElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax016TupleTypeElementB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax016TupleTypeElementB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax016TupleTypeElementB0V9withInOutyAcA05TokenB0VSgF","s11SwiftSyntax016TupleTypeElementB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV11useEllipsisyyAA05TokenB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV13useSecondNameyyAA05TokenB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV14useInitializeryyAA0h6ClauseB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax016TupleTypeElementB7BuilderV8useInOutyyAA05TokenB0VF","s11SwiftSyntax017AccessorParameterB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax017AccessorParameterB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax017AccessorParameterB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax017AccessorParameterB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax017AccessorParameterB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax017AccessorParameterB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax017AvailabilityEntryB0V03addC0yAcA0c8ArgumentB0VF","s11SwiftSyntax017AvailabilityEntryB0V04withC4ListyAcA0c4SpecfB0VSgF","s11SwiftSyntax017AvailabilityEntryB0V13withSemicolonyAcA05TokenB0VSgF","s11SwiftSyntax017AvailabilityEntryB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax017AvailabilityEntryB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax017AvailabilityEntryB7BuilderV03addC0yyAA0c8ArgumentB0VF","s11SwiftSyntax017AvailabilityEntryB7BuilderV12useSemicolonyyAA05TokenB0VF","s11SwiftSyntax017AvailabilityEntryB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax017AvailabilityEntryB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax017CodeBlockItemListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax017CodeBlockItemListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax017CodeBlockItemListB0V12removingLastACyF","s11SwiftSyntax017CodeBlockItemListB0V13removingFirstACyF","s11SwiftSyntax017CodeBlockItemListB0V13withoutTriviaACyF","s11SwiftSyntax017CodeBlockItemListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax017CodeBlockItemListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax017CodeBlockItemListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax017CodeBlockItemListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax017CodeBlockItemListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax017CodeBlockItemListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax017CodeBlockItemListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax017CodeBlockItemListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax017CodeBlockItemListB0V8removing7childAtACSi_tF","s11SwiftSyntax017CodeBlockItemListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax017CodeBlockItemListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax017CodeBlockItemListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax017DeclNameArgumentsB0V04withE0yAcA0cd12ArgumentListB0VSgF","s11SwiftSyntax017DeclNameArgumentsB0V11addArgumentyAcA0cdgB0VF","s11SwiftSyntax017DeclNameArgumentsB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax017DeclNameArgumentsB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax017DeclNameArgumentsB7BuilderV11addArgumentyyAA0cdhB0VF","s11SwiftSyntax017DeclNameArgumentsB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax017DeclNameArgumentsB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax017DeinitializerDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax017DeinitializerDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax017DeinitializerDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax017DeinitializerDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax017DeinitializerDeclB0V17withDeinitKeywordyAcA05TokenB0VSgF","s11SwiftSyntax017DeinitializerDeclB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax017DeinitializerDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax017DeinitializerDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax017DeinitializerDeclB7BuilderV16useDeinitKeywordyyAA05TokenB0VF","s11SwiftSyntax017DeinitializerDeclB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax017DictionaryElementB0V17withKeyExpressionyAcA04ExprB0VSgF","s11SwiftSyntax017DictionaryElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax017DictionaryElementB0V19withValueExpressionyAcA04ExprB0VSgF","s11SwiftSyntax017DictionaryElementB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax017DictionaryElementB7BuilderV16useKeyExpressionyyAA04ExprB0VF","s11SwiftSyntax017DictionaryElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax017DictionaryElementB7BuilderV18useValueExpressionyyAA04ExprB0VF","s11SwiftSyntax017DictionaryElementB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax017ExpressionPatternB0V04withC0yAcA04ExprB0VSgF","s11SwiftSyntax017ExpressionPatternB7BuilderV03useC0yyAA04ExprB0VF","s11SwiftSyntax017ExpressionSegmentB0V03addC0yAcA016TupleExprElementB0VF","s11SwiftSyntax017ExpressionSegmentB0V13withBackslashyAcA05TokenB0VSgF","s11SwiftSyntax017ExpressionSegmentB0V13withDelimiteryAcA05TokenB0VSgF","s11SwiftSyntax017ExpressionSegmentB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax017ExpressionSegmentB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax017ExpressionSegmentB0V15withExpressionsyAcA020TupleExprElementListB0VSgF","s11SwiftSyntax017ExpressionSegmentB7BuilderV03addC0yyAA016TupleExprElementB0VF","s11SwiftSyntax017ExpressionSegmentB7BuilderV12useBackslashyyAA05TokenB0VF","s11SwiftSyntax017ExpressionSegmentB7BuilderV12useDelimiteryyAA05TokenB0VF","s11SwiftSyntax017ExpressionSegmentB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax017ExpressionSegmentB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax017FunctionParameterB0V12addAttributeyAcA0B0VF","s11SwiftSyntax017FunctionParameterB0V12withEllipsisyAcA05TokenB0VSgF","s11SwiftSyntax017FunctionParameterB0V13withFirstNameyAcA05TokenB0VSgF","s11SwiftSyntax017FunctionParameterB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax017FunctionParameterB0V14withSecondNameyAcA05TokenB0VSgF","s11SwiftSyntax017FunctionParameterB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax017FunctionParameterB0V19withDefaultArgumentyAcA017InitializerClauseB0VSgF","s11SwiftSyntax017FunctionParameterB0V8withTypeyAcA0fB0VSgF","s11SwiftSyntax017FunctionParameterB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax017FunctionParameterB7BuilderV11useEllipsisyyAA05TokenB0VF","s11SwiftSyntax017FunctionParameterB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax017FunctionParameterB7BuilderV12useFirstNameyyAA05TokenB0VF","s11SwiftSyntax017FunctionParameterB7BuilderV13useSecondNameyyAA05TokenB0VF","s11SwiftSyntax017FunctionParameterB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax017FunctionParameterB7BuilderV18useDefaultArgumentyyAA017InitializerClauseB0VF","s11SwiftSyntax017FunctionParameterB7BuilderV7useTypeyyAA0gB0VF","s11SwiftSyntax017FunctionParameterB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax017FunctionSignatureB0V10withOutputyAcA012ReturnClauseB0VSgF","s11SwiftSyntax017FunctionSignatureB0V25withAsyncOrReasyncKeywordyAcA05TokenB0VSgF","s11SwiftSyntax017FunctionSignatureB0V27withThrowsOrRethrowsKeywordyAcA05TokenB0VSgF","s11SwiftSyntax017FunctionSignatureB0V9withInputyAcA015ParameterClauseB0VSgF","s11SwiftSyntax017FunctionSignatureB7BuilderV24useAsyncOrReasyncKeywordyyAA05TokenB0VF","s11SwiftSyntax017FunctionSignatureB7BuilderV26useThrowsOrRethrowsKeywordyyAA05TokenB0VF","s11SwiftSyntax017FunctionSignatureB7BuilderV8useInputyyAA015ParameterClauseB0VF","s11SwiftSyntax017FunctionSignatureB7BuilderV9useOutputyyAA012ReturnClauseB0VF","s11SwiftSyntax017IdentifierPatternB0V04withC0yAcA05TokenB0VSgF","s11SwiftSyntax017IdentifierPatternB7BuilderV03useC0yyAA05TokenB0VF","s11SwiftSyntax017InheritedTypeListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax017InheritedTypeListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax017InheritedTypeListB0V12removingLastACyF","s11SwiftSyntax017InheritedTypeListB0V13removingFirstACyF","s11SwiftSyntax017InheritedTypeListB0V13withoutTriviaACyF","s11SwiftSyntax017InheritedTypeListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax017InheritedTypeListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax017InheritedTypeListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax017InheritedTypeListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax017InheritedTypeListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax017InheritedTypeListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax017InheritedTypeListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax017InheritedTypeListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax017InheritedTypeListB0V8removing7childAtACSi_tF","s11SwiftSyntax017InheritedTypeListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax017InheritedTypeListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax017InheritedTypeListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax017InitializerClauseB0V9withEqualyAcA05TokenB0VSgF","s11SwiftSyntax017InitializerClauseB0V9withValueyAcA04ExprB0VSgF","s11SwiftSyntax017InitializerClauseB7BuilderV8useEqualyyAA05TokenB0VF","s11SwiftSyntax017InitializerClauseB7BuilderV8useValueyyAA04ExprB0VF","s11SwiftSyntax017NonEmptyTokenListB0V10prependingyAcA0eB0VF","s11SwiftSyntax017NonEmptyTokenListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax017NonEmptyTokenListB0V12removingLastACyF","s11SwiftSyntax017NonEmptyTokenListB0V13removingFirstACyF","s11SwiftSyntax017NonEmptyTokenListB0V13withoutTriviaACyF","s11SwiftSyntax017NonEmptyTokenListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax017NonEmptyTokenListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax017NonEmptyTokenListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax017NonEmptyTokenListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax017NonEmptyTokenListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax017NonEmptyTokenListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax017NonEmptyTokenListB0V8IteratorV4nextAA0eB0VSgyF","s11SwiftSyntax017NonEmptyTokenListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax017NonEmptyTokenListB0V8removing7childAtACSi_tF","s11SwiftSyntax017NonEmptyTokenListB0V9appendingyAcA0eB0VF","s11SwiftSyntax017NonEmptyTokenListB0V9inserting_2atAcA0eB0V_SitF","s11SwiftSyntax017NonEmptyTokenListB0V9replacing7childAt4withACSi_AA0eB0VtF","s11SwiftSyntax017ObjCSelectorPieceB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax017ObjCSelectorPieceB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax017ObjCSelectorPieceB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax017ObjCSelectorPieceB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax017ObjectLiteralExprB0V11addArgumentyAcA05Tuplee7ElementB0VF","s11SwiftSyntax017ObjectLiteralExprB0V13withArgumentsyAcA05Tuplee11ElementListB0VSgF","s11SwiftSyntax017ObjectLiteralExprB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax017ObjectLiteralExprB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax017ObjectLiteralExprB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax017ObjectLiteralExprB7BuilderV11addArgumentyyAA05Tuplee7ElementB0VF","s11SwiftSyntax017ObjectLiteralExprB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax017ObjectLiteralExprB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax017ObjectLiteralExprB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax017PoundFilePathExprB0V04withcdE0yAcA05TokenB0VSgF","s11SwiftSyntax017PoundFilePathExprB7BuilderV03usecdE0yyAA05TokenB0VF","s11SwiftSyntax017PoundFunctionExprB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax017PoundFunctionExprB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax017QualifiedDeclNameB0V04withE0yAcA05TokenB0VSgF","s11SwiftSyntax017QualifiedDeclNameB0V12withBaseTypeyAcA0hB0VSgF","s11SwiftSyntax017QualifiedDeclNameB0V13withArgumentsyAcA0degB0VSgF","s11SwiftSyntax017QualifiedDeclNameB0V7withDotyAcA05TokenB0VSgF","s11SwiftSyntax017QualifiedDeclNameB7BuilderV03useE0yyAA05TokenB0VF","s11SwiftSyntax017QualifiedDeclNameB7BuilderV11useBaseTypeyyAA0iB0VF","s11SwiftSyntax017QualifiedDeclNameB7BuilderV12useArgumentsyyAA0dehB0VF","s11SwiftSyntax017QualifiedDeclNameB7BuilderV6useDotyyAA05TokenB0VF","s11SwiftSyntax017StringLiteralExprB0V10addSegmentyAcA0B0VF","s11SwiftSyntax017StringLiteralExprB0V12withSegmentsyAcA0cdgB0VSgF","s11SwiftSyntax017StringLiteralExprB0V13withOpenQuoteyAcA05TokenB0VSgF","s11SwiftSyntax017StringLiteralExprB0V14withCloseQuoteyAcA05TokenB0VSgF","s11SwiftSyntax017StringLiteralExprB0V17withOpenDelimiteryAcA05TokenB0VSgF","s11SwiftSyntax017StringLiteralExprB0V18withCloseDelimiteryAcA05TokenB0VSgF","s11SwiftSyntax017StringLiteralExprB7BuilderV10addSegmentyyAA0B0VF","s11SwiftSyntax017StringLiteralExprB7BuilderV12useOpenQuoteyyAA05TokenB0VF","s11SwiftSyntax017StringLiteralExprB7BuilderV13useCloseQuoteyyAA05TokenB0VF","s11SwiftSyntax017StringLiteralExprB7BuilderV16useOpenDelimiteryyAA05TokenB0VF","s11SwiftSyntax017StringLiteralExprB7BuilderV17useCloseDelimiteryyAA05TokenB0VF","s11SwiftSyntax017WithTrailingCommaB0P04withdE0yxAA05TokenB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax018AssociatedtypeDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax018AssociatedtypeDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V15withInitializeryAcA04Typef6ClauseB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V21withInheritanceClauseyAcA04TypefgB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV14useInitializeryyAA04Typeg6ClauseB0VF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV20useInheritanceClauseyyAA04TypeghB0VF","s11SwiftSyntax018AssociatedtypeDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax018BinaryOperatorExprB0V04withD5TokenyAcA0gB0VSgF","s11SwiftSyntax018BinaryOperatorExprB7BuilderV03useD5TokenyyAA0hB0VF","s11SwiftSyntax018BooleanLiteralExprB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax018BooleanLiteralExprB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax018ClosureCaptureItemB0V13withSpecifieryAcA09TokenListB0VSgF","s11SwiftSyntax018ClosureCaptureItemB0V14withExpressionyAcA04ExprB0VSgF","s11SwiftSyntax018ClosureCaptureItemB0V15withAssignTokenyAcA0hB0VSgF","s11SwiftSyntax018ClosureCaptureItemB0V17addSpecifierTokenyAcA0hB0VF","s11SwiftSyntax018ClosureCaptureItemB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax018ClosureCaptureItemB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax018ClosureCaptureItemB7BuilderV13useExpressionyyAA04ExprB0VF","s11SwiftSyntax018ClosureCaptureItemB7BuilderV14useAssignTokenyyAA0iB0VF","s11SwiftSyntax018ClosureCaptureItemB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax018ClosureCaptureItemB7BuilderV17addSpecifierTokenyyAA0iB0VF","s11SwiftSyntax018ClosureCaptureItemB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax018ElseIfContinuationB0V04withD9StatementyAcA0d4StmtB0VSgF","s11SwiftSyntax018ElseIfContinuationB7BuilderV03useD9StatementyyAA0d4StmtB0VF","s11SwiftSyntax018GenericRequirementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax018GenericRequirementB0V8withBodyyAcA0B0VSgF","s11SwiftSyntax018GenericRequirementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax018GenericRequirementB7BuilderV7useBodyyyAA0B0VF","s11SwiftSyntax018GenericWhereClauseB0V04withD7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax018GenericWhereClauseB0V14addRequirementyAcA0cgB0VF","s11SwiftSyntax018GenericWhereClauseB0V19withRequirementListyAcA0cghB0VSgF","s11SwiftSyntax018GenericWhereClauseB7BuilderV03useD7KeywordyyAA05TokenB0VF","s11SwiftSyntax018GenericWhereClauseB7BuilderV14addRequirementyyAA0chB0VF","s11SwiftSyntax018IfConfigClauseListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax018IfConfigClauseListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax018IfConfigClauseListB0V12removingLastACyF","s11SwiftSyntax018IfConfigClauseListB0V13removingFirstACyF","s11SwiftSyntax018IfConfigClauseListB0V13withoutTriviaACyF","s11SwiftSyntax018IfConfigClauseListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax018IfConfigClauseListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax018IfConfigClauseListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax018IfConfigClauseListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax018IfConfigClauseListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax018IfConfigClauseListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax018IfConfigClauseListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax018IfConfigClauseListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax018IfConfigClauseListB0V8removing7childAtACSi_tF","s11SwiftSyntax018IfConfigClauseListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax018IfConfigClauseListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax018IfConfigClauseListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax018IntegerLiteralExprB0V10withDigitsyAcA05TokenB0VSgF","s11SwiftSyntax018IntegerLiteralExprB7BuilderV9useDigitsyyAA05TokenB0VF","s11SwiftSyntax018MemberDeclListItemB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax018MemberDeclListItemB0V13withSemicolonyAcA05TokenB0VSgF","s11SwiftSyntax018MemberDeclListItemB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax018MemberDeclListItemB7BuilderV12useSemicolonyyAA05TokenB0VF","s11SwiftSyntax018PatternBindingListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax018PatternBindingListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax018PatternBindingListB0V12removingLastACyF","s11SwiftSyntax018PatternBindingListB0V13removingFirstACyF","s11SwiftSyntax018PatternBindingListB0V13withoutTriviaACyF","s11SwiftSyntax018PatternBindingListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax018PatternBindingListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax018PatternBindingListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax018PatternBindingListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax018PatternBindingListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax018PatternBindingListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax018PatternBindingListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax018PatternBindingListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax018PatternBindingListB0V8removing7childAtACSi_tF","s11SwiftSyntax018PatternBindingListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax018PatternBindingListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax018PatternBindingListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax018PoundDsohandleExprB0V04withcD0yAcA05TokenB0VSgF","s11SwiftSyntax018PoundDsohandleExprB7BuilderV03usecD0yyAA05TokenB0VF","s11SwiftSyntax018PrefixOperatorExprB0V04withD5TokenyAcA0gB0VSgF","s11SwiftSyntax018PrefixOperatorExprB0V21withPostfixExpressionyAcA0eB0VSgF","s11SwiftSyntax018PrefixOperatorExprB7BuilderV03useD5TokenyyAA0hB0VF","s11SwiftSyntax018PrefixOperatorExprB7BuilderV20usePostfixExpressionyyAA0eB0VF","s11SwiftSyntax018SwitchDefaultLabelB0V04withD7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax018SwitchDefaultLabelB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax018SwitchDefaultLabelB7BuilderV03useD7KeywordyyAA05TokenB0VF","s11SwiftSyntax018SwitchDefaultLabelB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax019AccessLevelModifierB0V04withE0yAcA05TokenB0VSgF","s11SwiftSyntax019AccessLevelModifierB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax019AccessLevelModifierB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax019AccessLevelModifierB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax019AccessLevelModifierB7BuilderV03useE0yyAA05TokenB0VF","s11SwiftSyntax019AccessLevelModifierB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax019AccessLevelModifierB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax019AccessLevelModifierB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax019AccessPathComponentB0V15withTrailingDotyAcA05TokenB0VSgF","s11SwiftSyntax019AccessPathComponentB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax019AccessPathComponentB7BuilderV14useTrailingDotyyAA05TokenB0VF","s11SwiftSyntax019AccessPathComponentB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax019EnumCaseElementListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax019EnumCaseElementListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax019EnumCaseElementListB0V12removingLastACyF","s11SwiftSyntax019EnumCaseElementListB0V13removingFirstACyF","s11SwiftSyntax019EnumCaseElementListB0V13withoutTriviaACyF","s11SwiftSyntax019EnumCaseElementListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax019EnumCaseElementListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax019EnumCaseElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax019EnumCaseElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax019EnumCaseElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax019EnumCaseElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax019EnumCaseElementListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax019EnumCaseElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax019EnumCaseElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax019EnumCaseElementListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax019EnumCaseElementListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax019EnumCaseElementListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax019GenericArgumentListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax019GenericArgumentListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax019GenericArgumentListB0V12removingLastACyF","s11SwiftSyntax019GenericArgumentListB0V13removingFirstACyF","s11SwiftSyntax019GenericArgumentListB0V13withoutTriviaACyF","s11SwiftSyntax019GenericArgumentListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax019GenericArgumentListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax019GenericArgumentListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax019GenericArgumentListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax019GenericArgumentListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax019GenericArgumentListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax019GenericArgumentListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax019GenericArgumentListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax019GenericArgumentListB0V8removing7childAtACSi_tF","s11SwiftSyntax019GenericArgumentListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax019GenericArgumentListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax019GenericArgumentListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax019PostfixIfConfigExprB0V04withE0yAcA0de4DeclB0VSgF","s11SwiftSyntax019PostfixIfConfigExprB0V8withBaseyAcA0fB0VSgF","s11SwiftSyntax019PostfixIfConfigExprB7BuilderV03useE0yyAA0de4DeclB0VF","s11SwiftSyntax019PostfixIfConfigExprB7BuilderV7useBaseyyAA0fB0VF","s11SwiftSyntax019PoundSourceLocationB0V04withcdE0yAcA05TokenB0VSgF","s11SwiftSyntax019PoundSourceLocationB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax019PoundSourceLocationB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax019PoundSourceLocationB0V8withArgsyAcA0cdegB0VSgF","s11SwiftSyntax019PoundSourceLocationB7BuilderV03usecdE0yyAA05TokenB0VF","s11SwiftSyntax019PoundSourceLocationB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax019PoundSourceLocationB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax019PoundSourceLocationB7BuilderV7useArgsyyAA0cdehB0VF","s11SwiftSyntax019PrecedenceGroupDeclB0V03addD9AttributeyAcA0B0VF","s11SwiftSyntax019PrecedenceGroupDeclB0V04withD10AttributesyAcA0cd13AttributeListB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB0V11addModifieryAcA0egB0VF","s11SwiftSyntax019PrecedenceGroupDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax019PrecedenceGroupDeclB0V13withLeftBraceyAcA05TokenB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB0V14withRightBraceyAcA05TokenB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB0V26withPrecedencegroupKeywordyAcA05TokenB0VSgF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV03addD9AttributeyyAA0B0VF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV11addModifieryyAA0ehB0VF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV12useLeftBraceyyAA05TokenB0VF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV13useRightBraceyyAA05TokenB0VF","s11SwiftSyntax019PrecedenceGroupDeclB7BuilderV25usePrecedencegroupKeywordyyAA05TokenB0VF","s11SwiftSyntax019SameTypeRequirementB0V08withLeftD10IdentifieryAcA0dB0VSgF","s11SwiftSyntax019SameTypeRequirementB0V09withRightD10IdentifieryAcA0dB0VSgF","s11SwiftSyntax019SameTypeRequirementB0V17withEqualityTokenyAcA0hB0VSgF","s11SwiftSyntax019SameTypeRequirementB7BuilderV07useLeftD10IdentifieryyAA0dB0VF","s11SwiftSyntax019SameTypeRequirementB7BuilderV08useRightD10IdentifieryyAA0dB0VF","s11SwiftSyntax019SameTypeRequirementB7BuilderV16useEqualityTokenyyAA0iB0VF","s11SwiftSyntax019TargetFunctionEntryB0V12withDelcnameyAcA08DeclNameB0VSgF","s11SwiftSyntax019TargetFunctionEntryB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax019TargetFunctionEntryB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax019TargetFunctionEntryB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax019TargetFunctionEntryB7BuilderV11useDelcnameyyAA08DeclNameB0VF","s11SwiftSyntax019TargetFunctionEntryB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax019TargetFunctionEntryB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax019TargetFunctionEntryB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax019TuplePatternElementB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax019TuplePatternElementB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax019TuplePatternElementB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax019TuplePatternElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax019TuplePatternElementB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax019TuplePatternElementB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax019TuplePatternElementB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax019TuplePatternElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax019ValueBindingPatternB0V04withcE0yAcA0eB0VSgF","s11SwiftSyntax019ValueBindingPatternB0V19withLetOrVarKeywordyAcA05TokenB0VSgF","s11SwiftSyntax019ValueBindingPatternB7BuilderV03usecE0yyAA0eB0VF","s11SwiftSyntax019ValueBindingPatternB7BuilderV18useLetOrVarKeywordyyAA05TokenB0VF","s11SwiftSyntax020AvailabilityArgumentB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax020AvailabilityArgumentB0V9withEntryyAcA0B0VSgF","s11SwiftSyntax020AvailabilityArgumentB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax020AvailabilityArgumentB7BuilderV8useEntryyyAA0B0VF","s11SwiftSyntax020AvailabilitySpecListB0V10prependingyAcA0c8ArgumentB0VF","s11SwiftSyntax020AvailabilitySpecListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax020AvailabilitySpecListB0V12removingLastACyF","s11SwiftSyntax020AvailabilitySpecListB0V13removingFirstACyF","s11SwiftSyntax020AvailabilitySpecListB0V13withoutTriviaACyF","s11SwiftSyntax020AvailabilitySpecListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax020AvailabilitySpecListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax020AvailabilitySpecListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax020AvailabilitySpecListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax020AvailabilitySpecListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020AvailabilitySpecListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020AvailabilitySpecListB0V8IteratorV4nextAA0c8ArgumentB0VSgyF","s11SwiftSyntax020AvailabilitySpecListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax020AvailabilitySpecListB0V8removing7childAtACSi_tF","s11SwiftSyntax020AvailabilitySpecListB0V9appendingyAcA0c8ArgumentB0VF","s11SwiftSyntax020AvailabilitySpecListB0V9inserting_2atAcA0c8ArgumentB0V_SitF","s11SwiftSyntax020AvailabilitySpecListB0V9replacing7childAt4withACSi_AA0c8ArgumentB0VtF","s11SwiftSyntax020ClassRestrictionTypeB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax020ClassRestrictionTypeB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax020ConditionElementListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax020ConditionElementListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax020ConditionElementListB0V12removingLastACyF","s11SwiftSyntax020ConditionElementListB0V13removingFirstACyF","s11SwiftSyntax020ConditionElementListB0V13withoutTriviaACyF","s11SwiftSyntax020ConditionElementListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax020ConditionElementListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax020ConditionElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax020ConditionElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax020ConditionElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020ConditionElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020ConditionElementListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax020ConditionElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax020ConditionElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax020ConditionElementListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax020ConditionElementListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax020ConditionElementListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax020DeclNameArgumentListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax020DeclNameArgumentListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax020DeclNameArgumentListB0V12removingLastACyF","s11SwiftSyntax020DeclNameArgumentListB0V13removingFirstACyF","s11SwiftSyntax020DeclNameArgumentListB0V13withoutTriviaACyF","s11SwiftSyntax020DeclNameArgumentListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax020DeclNameArgumentListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax020DeclNameArgumentListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax020DeclNameArgumentListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax020DeclNameArgumentListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020DeclNameArgumentListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020DeclNameArgumentListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax020DeclNameArgumentListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax020DeclNameArgumentListB0V8removing7childAtACSi_tF","s11SwiftSyntax020DeclNameArgumentListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax020DeclNameArgumentListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax020DeclNameArgumentListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax020GenericParameterListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax020GenericParameterListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax020GenericParameterListB0V12removingLastACyF","s11SwiftSyntax020GenericParameterListB0V13removingFirstACyF","s11SwiftSyntax020GenericParameterListB0V13withoutTriviaACyF","s11SwiftSyntax020GenericParameterListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax020GenericParameterListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax020GenericParameterListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax020GenericParameterListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax020GenericParameterListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020GenericParameterListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020GenericParameterListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax020GenericParameterListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax020GenericParameterListB0V8removing7childAtACSi_tF","s11SwiftSyntax020GenericParameterListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax020GenericParameterListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax020GenericParameterListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax020MemberTypeIdentifierB0V08withBaseD0yAcA0dB0VSgF","s11SwiftSyntax020MemberTypeIdentifierB0V10withPeriodyAcA05TokenB0VSgF","s11SwiftSyntax020MemberTypeIdentifierB0V25withGenericArgumentClauseyAcA0ghiB0VSgF","s11SwiftSyntax020MemberTypeIdentifierB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax020MemberTypeIdentifierB7BuilderV07useBaseD0yyAA0dB0VF","s11SwiftSyntax020MemberTypeIdentifierB7BuilderV24useGenericArgumentClauseyyAA0hijB0VF","s11SwiftSyntax020MemberTypeIdentifierB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax020MemberTypeIdentifierB7BuilderV9usePeriodyyAA05TokenB0VF","s11SwiftSyntax020OptionalChainingExprB0V14withExpressionyAcA0eB0VSgF","s11SwiftSyntax020OptionalChainingExprB0V16withQuestionMarkyAcA05TokenB0VSgF","s11SwiftSyntax020OptionalChainingExprB7BuilderV13useExpressionyyAA0eB0VF","s11SwiftSyntax020OptionalChainingExprB7BuilderV15useQuestionMarkyyAA05TokenB0VF","s11SwiftSyntax020SimpleTypeIdentifierB0V25withGenericArgumentClauseyAcA0ghiB0VSgF","s11SwiftSyntax020SimpleTypeIdentifierB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax020SimpleTypeIdentifierB7BuilderV24useGenericArgumentClauseyyAA0hijB0VF","s11SwiftSyntax020SimpleTypeIdentifierB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax020TupleExprElementListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax020TupleExprElementListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax020TupleExprElementListB0V12removingLastACyF","s11SwiftSyntax020TupleExprElementListB0V13removingFirstACyF","s11SwiftSyntax020TupleExprElementListB0V13withoutTriviaACyF","s11SwiftSyntax020TupleExprElementListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax020TupleExprElementListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax020TupleExprElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax020TupleExprElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax020TupleExprElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020TupleExprElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020TupleExprElementListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax020TupleExprElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax020TupleExprElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax020TupleExprElementListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax020TupleExprElementListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax020TupleExprElementListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax020TupleTypeElementListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax020TupleTypeElementListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax020TupleTypeElementListB0V12removingLastACyF","s11SwiftSyntax020TupleTypeElementListB0V13removingFirstACyF","s11SwiftSyntax020TupleTypeElementListB0V13withoutTriviaACyF","s11SwiftSyntax020TupleTypeElementListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax020TupleTypeElementListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax020TupleTypeElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax020TupleTypeElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax020TupleTypeElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020TupleTypeElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax020TupleTypeElementListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax020TupleTypeElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax020TupleTypeElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax020TupleTypeElementListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax020TupleTypeElementListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax020TupleTypeElementListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax021AvailabilityConditionB0V03addC8ArgumentyAcA0cfB0VF","s11SwiftSyntax021AvailabilityConditionB0V04withC4SpecyAcA0cf4ListB0VSgF","s11SwiftSyntax021AvailabilityConditionB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax021AvailabilityConditionB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax021AvailabilityConditionB0V25withPoundAvailableKeywordyAcA05TokenB0VSgF","s11SwiftSyntax021AvailabilityConditionB7BuilderV03addC8ArgumentyyAA0cgB0VF","s11SwiftSyntax021AvailabilityConditionB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax021AvailabilityConditionB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax021AvailabilityConditionB7BuilderV24usePoundAvailableKeywordyyAA05TokenB0VF","s11SwiftSyntax021DictionaryElementListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax021DictionaryElementListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax021DictionaryElementListB0V12removingLastACyF","s11SwiftSyntax021DictionaryElementListB0V13removingFirstACyF","s11SwiftSyntax021DictionaryElementListB0V13withoutTriviaACyF","s11SwiftSyntax021DictionaryElementListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax021DictionaryElementListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax021DictionaryElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax021DictionaryElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax021DictionaryElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021DictionaryElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021DictionaryElementListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax021DictionaryElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax021DictionaryElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax021DictionaryElementListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax021DictionaryElementListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax021DictionaryElementListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax021DiscardAssignmentExprB0V12withWildcardyAcA05TokenB0VSgF","s11SwiftSyntax021DiscardAssignmentExprB7BuilderV11useWildcardyyAA05TokenB0VF","s11SwiftSyntax021EditorPlaceholderExprB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax021EditorPlaceholderExprB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax021FunctionParameterListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax021FunctionParameterListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax021FunctionParameterListB0V12removingLastACyF","s11SwiftSyntax021FunctionParameterListB0V13removingFirstACyF","s11SwiftSyntax021FunctionParameterListB0V13withoutTriviaACyF","s11SwiftSyntax021FunctionParameterListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax021FunctionParameterListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax021FunctionParameterListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax021FunctionParameterListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax021FunctionParameterListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021FunctionParameterListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021FunctionParameterListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax021FunctionParameterListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax021FunctionParameterListB0V8removing7childAtACSi_tF","s11SwiftSyntax021FunctionParameterListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax021FunctionParameterListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax021FunctionParameterListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax021GenericArgumentClauseB0V03addD0yAcA0cdB0VF","s11SwiftSyntax021GenericArgumentClauseB0V13withArgumentsyAcA0cd4ListB0VSgF","s11SwiftSyntax021GenericArgumentClauseB0V20withLeftAngleBracketyAcA05TokenB0VSgF","s11SwiftSyntax021GenericArgumentClauseB0V21withRightAngleBracketyAcA05TokenB0VSgF","s11SwiftSyntax021GenericArgumentClauseB7BuilderV03addD0yyAA0cdB0VF","s11SwiftSyntax021GenericArgumentClauseB7BuilderV19useLeftAngleBracketyyAA05TokenB0VF","s11SwiftSyntax021GenericArgumentClauseB7BuilderV20useRightAngleBracketyyAA05TokenB0VF","s11SwiftSyntax021PrimaryAssociatedTypeB0V013withInheritedE0yAcA0eB0VSgF","s11SwiftSyntax021PrimaryAssociatedTypeB0V12addAttributeyAcA0B0VF","s11SwiftSyntax021PrimaryAssociatedTypeB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax021PrimaryAssociatedTypeB0V15withInitializeryAcA0eg6ClauseB0VSgF","s11SwiftSyntax021PrimaryAssociatedTypeB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax021PrimaryAssociatedTypeB0V8withNameyAcA05TokenB0VSgF","s11SwiftSyntax021PrimaryAssociatedTypeB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV012useInheritedE0yyAA0eB0VF","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV14useInitializeryyAA0eh6ClauseB0VF","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV7useNameyyAA05TokenB0VF","s11SwiftSyntax021PrimaryAssociatedTypeB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax021StringLiteralSegmentsB0V10prependingyAcA0B0VF","s11SwiftSyntax021StringLiteralSegmentsB0V12makeIteratorAC0G0VyF","s11SwiftSyntax021StringLiteralSegmentsB0V12removingLastACyF","s11SwiftSyntax021StringLiteralSegmentsB0V13removingFirstACyF","s11SwiftSyntax021StringLiteralSegmentsB0V13withoutTriviaACyF","s11SwiftSyntax021StringLiteralSegmentsB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax021StringLiteralSegmentsB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax021StringLiteralSegmentsB0V20withoutLeadingTriviaACyF","s11SwiftSyntax021StringLiteralSegmentsB0V21withoutTrailingTriviaACyF","s11SwiftSyntax021StringLiteralSegmentsB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021StringLiteralSegmentsB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax021StringLiteralSegmentsB0V8IteratorV4nextAA0B0VSgyF","s11SwiftSyntax021StringLiteralSegmentsB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax021StringLiteralSegmentsB0V8removing7childAtACSi_tF","s11SwiftSyntax021StringLiteralSegmentsB0V9appendingyAcA0B0VF","s11SwiftSyntax021StringLiteralSegmentsB0V9inserting_2atAcA0B0V_SitF","s11SwiftSyntax021StringLiteralSegmentsB0V9replacing7childAt4withACSi_AA0B0VtF","s11SwiftSyntax021SymbolicReferenceExprB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax021SymbolicReferenceExprB0V25withGenericArgumentClauseyAcA0ghiB0VSgF","s11SwiftSyntax021SymbolicReferenceExprB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax021SymbolicReferenceExprB7BuilderV24useGenericArgumentClauseyyAA0hijB0VF","s11SwiftSyntax021TypeInheritanceClauseB0V012addInheritedC0yAcA0gcB0VF","s11SwiftSyntax021TypeInheritanceClauseB0V013withInheritedC10CollectionyAcA0gc4ListB0VSgF","s11SwiftSyntax021TypeInheritanceClauseB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax021TypeInheritanceClauseB7BuilderV012addInheritedC0yyAA0hcB0VF","s11SwiftSyntax021TypeInheritanceClauseB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax021TypeInitializerClauseB0V9withEqualyAcA05TokenB0VSgF","s11SwiftSyntax021TypeInitializerClauseB0V9withValueyAcA0cB0VSgF","s11SwiftSyntax021TypeInitializerClauseB7BuilderV8useEqualyyAA05TokenB0VF","s11SwiftSyntax021TypeInitializerClauseB7BuilderV8useValueyyAA0cB0VF","s11SwiftSyntax021UnresolvedPatternExprB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax021UnresolvedPatternExprB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax022ClosureCaptureItemListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax022ClosureCaptureItemListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax022ClosureCaptureItemListB0V12removingLastACyF","s11SwiftSyntax022ClosureCaptureItemListB0V13removingFirstACyF","s11SwiftSyntax022ClosureCaptureItemListB0V13withoutTriviaACyF","s11SwiftSyntax022ClosureCaptureItemListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax022ClosureCaptureItemListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax022ClosureCaptureItemListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax022ClosureCaptureItemListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax022ClosureCaptureItemListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax022ClosureCaptureItemListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax022ClosureCaptureItemListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax022ClosureCaptureItemListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax022ClosureCaptureItemListB0V8removing7childAtACSi_tF","s11SwiftSyntax022ClosureCaptureItemListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax022ClosureCaptureItemListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax022ClosureCaptureItemListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax022CompositionTypeElementB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax022CompositionTypeElementB0V13withAmpersandyAcA05TokenB0VSgF","s11SwiftSyntax022CompositionTypeElementB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax022CompositionTypeElementB7BuilderV12useAmpersandyyAA05TokenB0VF","s11SwiftSyntax022ConformanceRequirementB0V22withLeftTypeIdentifieryAcA0gB0VSgF","s11SwiftSyntax022ConformanceRequirementB0V23withRightTypeIdentifieryAcA0gB0VSgF","s11SwiftSyntax022ConformanceRequirementB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax022ConformanceRequirementB7BuilderV21useLeftTypeIdentifieryyAA0hB0VF","s11SwiftSyntax022ConformanceRequirementB7BuilderV22useRightTypeIdentifieryyAA0hB0VF","s11SwiftSyntax022ConformanceRequirementB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax022DifferentiabilityParamB0V13withParameteryAcA0B0VSgF","s11SwiftSyntax022DifferentiabilityParamB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax022DifferentiabilityParamB7BuilderV12useParameteryyAA0B0VF","s11SwiftSyntax022DifferentiabilityParamB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax022GenericParameterClauseB0V03addcD0yAcA0cdB0VF","s11SwiftSyntax022GenericParameterClauseB0V04withcD4ListyAcA0cdgB0VSgF","s11SwiftSyntax022GenericParameterClauseB0V20withLeftAngleBracketyAcA05TokenB0VSgF","s11SwiftSyntax022GenericParameterClauseB0V21withRightAngleBracketyAcA05TokenB0VSgF","s11SwiftSyntax022GenericParameterClauseB7BuilderV03addcD0yyAA0cdB0VF","s11SwiftSyntax022GenericParameterClauseB7BuilderV19useLeftAngleBracketyyAA05TokenB0VF","s11SwiftSyntax022GenericParameterClauseB7BuilderV20useRightAngleBracketyyAA05TokenB0VF","s11SwiftSyntax022GenericRequirementListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax022GenericRequirementListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax022GenericRequirementListB0V12removingLastACyF","s11SwiftSyntax022GenericRequirementListB0V13removingFirstACyF","s11SwiftSyntax022GenericRequirementListB0V13withoutTriviaACyF","s11SwiftSyntax022GenericRequirementListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax022GenericRequirementListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax022GenericRequirementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax022GenericRequirementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax022GenericRequirementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax022GenericRequirementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax022GenericRequirementListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax022GenericRequirementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax022GenericRequirementListB0V8removing7childAtACSi_tF","s11SwiftSyntax022GenericRequirementListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax022GenericRequirementListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax022GenericRequirementListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax022LabeledSpecializeEntryB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax022LabeledSpecializeEntryB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax022LabeledSpecializeEntryB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax022LabeledSpecializeEntryB0V9withValueyAcA05TokenB0VSgF","s11SwiftSyntax022LabeledSpecializeEntryB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax022LabeledSpecializeEntryB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax022LabeledSpecializeEntryB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax022LabeledSpecializeEntryB7BuilderV8useValueyyAA05TokenB0VF","s11SwiftSyntax023ClosureCaptureSignatureB0V14withLeftSquareyAcA05TokenB0VSgF","s11SwiftSyntax023ClosureCaptureSignatureB0V15withRightSquareyAcA05TokenB0VSgF","s11SwiftSyntax023ClosureCaptureSignatureB0V7addItemyAcA0cdgB0VF","s11SwiftSyntax023ClosureCaptureSignatureB0V9withItemsyAcA0cd8ItemListB0VSgF","s11SwiftSyntax023ClosureCaptureSignatureB7BuilderV13useLeftSquareyyAA05TokenB0VF","s11SwiftSyntax023ClosureCaptureSignatureB7BuilderV14useRightSquareyyAA05TokenB0VF","s11SwiftSyntax023ClosureCaptureSignatureB7BuilderV7addItemyyAA0cdhB0VF","s11SwiftSyntax023DifferentiabilityParamsB0V03addC5ParamyAcA0cfB0VF","s11SwiftSyntax023DifferentiabilityParamsB0V08withDiffD0yAcA0c9ParamListB0VSgF","s11SwiftSyntax023DifferentiabilityParamsB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax023DifferentiabilityParamsB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax023DifferentiabilityParamsB7BuilderV03addC5ParamyyAA0cgB0VF","s11SwiftSyntax023DifferentiabilityParamsB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax023DifferentiabilityParamsB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB0V12withFileNameyAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB0V14withLineNumberyAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB0V16withFileArgColonyAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB0V16withFileArgLabelyAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB0V16withLineArgColonyAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB0V16withLineArgLabelyAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB0V9withCommayAcA05TokenB0VSgF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV11useFileNameyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV13useLineNumberyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV15useFileArgColonyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV15useFileArgLabelyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV15useLineArgColonyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV15useLineArgLabelyyAA05TokenB0VF","s11SwiftSyntax023PoundSourceLocationArgsB7BuilderV8useCommayyAA05TokenB0VF","s11SwiftSyntax023PrecedenceGroupNameListB0V10prependingyAcA0cde7ElementB0VF","s11SwiftSyntax023PrecedenceGroupNameListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax023PrecedenceGroupNameListB0V12removingLastACyF","s11SwiftSyntax023PrecedenceGroupNameListB0V13removingFirstACyF","s11SwiftSyntax023PrecedenceGroupNameListB0V13withoutTriviaACyF","s11SwiftSyntax023PrecedenceGroupNameListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax023PrecedenceGroupNameListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax023PrecedenceGroupNameListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax023PrecedenceGroupNameListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax023PrecedenceGroupNameListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax023PrecedenceGroupNameListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax023PrecedenceGroupNameListB0V8IteratorV4nextAA0cde7ElementB0VSgyF","s11SwiftSyntax023PrecedenceGroupNameListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax023PrecedenceGroupNameListB0V8removing7childAtACSi_tF","s11SwiftSyntax023PrecedenceGroupNameListB0V9appendingyAcA0cde7ElementB0VF","s11SwiftSyntax023PrecedenceGroupNameListB0V9inserting_2atAcA0cde7ElementB0V_SitF","s11SwiftSyntax023PrecedenceGroupNameListB0V9replacing7childAt4withACSi_AA0cde7ElementB0VtF","s11SwiftSyntax023PrecedenceGroupRelationB0V021withHigherThanOrLowerH0yAcA05TokenB0VSgF","s11SwiftSyntax023PrecedenceGroupRelationB0V12addOtherNameyAcA0cdh7ElementB0VF","s11SwiftSyntax023PrecedenceGroupRelationB0V14withOtherNamesyAcA0cd8NameListB0VSgF","s11SwiftSyntax023PrecedenceGroupRelationB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax023PrecedenceGroupRelationB7BuilderV020useHigherThanOrLowerI0yyAA05TokenB0VF","s11SwiftSyntax023PrecedenceGroupRelationB7BuilderV12addOtherNameyyAA0cdi7ElementB0VF","s11SwiftSyntax023PrecedenceGroupRelationB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax023TuplePatternElementListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax023TuplePatternElementListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax023TuplePatternElementListB0V12removingLastACyF","s11SwiftSyntax023TuplePatternElementListB0V13removingFirstACyF","s11SwiftSyntax023TuplePatternElementListB0V13withoutTriviaACyF","s11SwiftSyntax023TuplePatternElementListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax023TuplePatternElementListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax023TuplePatternElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax023TuplePatternElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax023TuplePatternElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax023TuplePatternElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax023TuplePatternElementListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax023TuplePatternElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax023TuplePatternElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax023TuplePatternElementListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax023TuplePatternElementListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax023TuplePatternElementListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax023UnavailabilityConditionB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax023UnavailabilityConditionB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax023UnavailabilityConditionB0V20withAvailabilitySpecyAcA0fg4ListB0VSgF","s11SwiftSyntax023UnavailabilityConditionB0V23addAvailabilityArgumentyAcA0fgB0VF","s11SwiftSyntax023UnavailabilityConditionB0V27withPoundUnavailableKeywordyAcA05TokenB0VSgF","s11SwiftSyntax023UnavailabilityConditionB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax023UnavailabilityConditionB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax023UnavailabilityConditionB7BuilderV23addAvailabilityArgumentyyAA0ghB0VF","s11SwiftSyntax023UnavailabilityConditionB7BuilderV26usePoundUnavailableKeywordyyAA05TokenB0VF","s11SwiftSyntax024MatchingPatternConditionB0V04withD0yAcA0dB0VSgF","s11SwiftSyntax024MatchingPatternConditionB0V15withCaseKeywordyAcA05TokenB0VSgF","s11SwiftSyntax024MatchingPatternConditionB0V15withInitializeryAcA0g6ClauseB0VSgF","s11SwiftSyntax024MatchingPatternConditionB0V18withTypeAnnotationyAcA0ghB0VSgF","s11SwiftSyntax024MatchingPatternConditionB7BuilderV03useD0yyAA0dB0VF","s11SwiftSyntax024MatchingPatternConditionB7BuilderV14useCaseKeywordyyAA05TokenB0VF","s11SwiftSyntax024MatchingPatternConditionB7BuilderV14useInitializeryyAA0h6ClauseB0VF","s11SwiftSyntax024MatchingPatternConditionB7BuilderV17useTypeAnnotationyyAA0hiB0VF","s11SwiftSyntax024OptionalBindingConditionB0V11withPatternyAcA0gB0VSgF","s11SwiftSyntax024OptionalBindingConditionB0V15withInitializeryAcA0g6ClauseB0VSgF","s11SwiftSyntax024OptionalBindingConditionB0V18withTypeAnnotationyAcA0ghB0VSgF","s11SwiftSyntax024OptionalBindingConditionB0V19withLetOrVarKeywordyAcA05TokenB0VSgF","s11SwiftSyntax024OptionalBindingConditionB7BuilderV10usePatternyyAA0hB0VF","s11SwiftSyntax024OptionalBindingConditionB7BuilderV14useInitializeryyAA0h6ClauseB0VF","s11SwiftSyntax024OptionalBindingConditionB7BuilderV17useTypeAnnotationyyAA0hiB0VF","s11SwiftSyntax024OptionalBindingConditionB7BuilderV18useLetOrVarKeywordyyAA05TokenB0VF","s11SwiftSyntax025PrecedenceGroupAssignmentB0V04withE7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax025PrecedenceGroupAssignmentB0V8withFlagyAcA05TokenB0VSgF","s11SwiftSyntax025PrecedenceGroupAssignmentB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax025PrecedenceGroupAssignmentB7BuilderV03useE7KeywordyyAA05TokenB0VF","s11SwiftSyntax025PrecedenceGroupAssignmentB7BuilderV7useFlagyyAA05TokenB0VF","s11SwiftSyntax025PrecedenceGroupAssignmentB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V12removingLastACyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V13removingFirstACyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V13withoutTriviaACyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V8removing7childAtACSi_tF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax025PrimaryAssociatedTypeListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax026CompositionTypeElementListB0V10prependingyAcA0cdeB0VF","s11SwiftSyntax026CompositionTypeElementListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax026CompositionTypeElementListB0V12removingLastACyF","s11SwiftSyntax026CompositionTypeElementListB0V13removingFirstACyF","s11SwiftSyntax026CompositionTypeElementListB0V13withoutTriviaACyF","s11SwiftSyntax026CompositionTypeElementListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax026CompositionTypeElementListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax026CompositionTypeElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax026CompositionTypeElementListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax026CompositionTypeElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax026CompositionTypeElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax026CompositionTypeElementListB0V8IteratorV4nextAA0cdeB0VSgyF","s11SwiftSyntax026CompositionTypeElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax026CompositionTypeElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax026CompositionTypeElementListB0V9appendingyAcA0cdeB0VF","s11SwiftSyntax026CompositionTypeElementListB0V9inserting_2atAcA0cdeB0V_SitF","s11SwiftSyntax026CompositionTypeElementListB0V9replacing7childAt4withACSi_AA0cdeB0VtF","s11SwiftSyntax026DifferentiabilityParamListB0V10prependingyAcA0cdB0VF","s11SwiftSyntax026DifferentiabilityParamListB0V12makeIteratorAC0G0VyF","s11SwiftSyntax026DifferentiabilityParamListB0V12removingLastACyF","s11SwiftSyntax026DifferentiabilityParamListB0V13removingFirstACyF","s11SwiftSyntax026DifferentiabilityParamListB0V13withoutTriviaACyF","s11SwiftSyntax026DifferentiabilityParamListB0V17withLeadingTriviayAcA0H0VF","s11SwiftSyntax026DifferentiabilityParamListB0V18withTrailingTriviayAcA0H0VF","s11SwiftSyntax026DifferentiabilityParamListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax026DifferentiabilityParamListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax026DifferentiabilityParamListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax026DifferentiabilityParamListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax026DifferentiabilityParamListB0V8IteratorV4nextAA0cdB0VSgyF","s11SwiftSyntax026DifferentiabilityParamListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax026DifferentiabilityParamListB0V8removing7childAtACSi_tF","s11SwiftSyntax026DifferentiabilityParamListB0V9appendingyAcA0cdB0VF","s11SwiftSyntax026DifferentiabilityParamListB0V9inserting_2atAcA0cdB0V_SitF","s11SwiftSyntax026DifferentiabilityParamListB0V9replacing7childAt4withACSi_AA0cdB0VtF","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V03addd5GroupE14DesignatedTypeyAcA05TokenB0VF","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V04withd5Groupe10DesignatedF0yAcA014IdentifierListB0VSgF","s11SwiftSyntax026OperatorPrecedenceAndTypesB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax026OperatorPrecedenceAndTypesB7BuilderV03addd5GroupE14DesignatedTypeyyAA05TokenB0VF","s11SwiftSyntax026OperatorPrecedenceAndTypesB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax026PrecedenceGroupNameElementB0V04withE0yAcA05TokenB0VSgF","s11SwiftSyntax026PrecedenceGroupNameElementB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax026PrecedenceGroupNameElementB7BuilderV03useE0yyAA05TokenB0VF","s11SwiftSyntax026PrecedenceGroupNameElementB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax027AvailabilityLabeledArgumentB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax027AvailabilityLabeledArgumentB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax027AvailabilityLabeledArgumentB0V9withValueyAcA0B0VSgF","s11SwiftSyntax027AvailabilityLabeledArgumentB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax027AvailabilityLabeledArgumentB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax027AvailabilityLabeledArgumentB7BuilderV8useValueyyAA0B0VF","s11SwiftSyntax027SpecializeAttributeSpecListB0V10prependingyAcA0B0VF","s11SwiftSyntax027SpecializeAttributeSpecListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V12removingLastACyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V13removingFirstACyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V13withoutTriviaACyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax027SpecializeAttributeSpecListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax027SpecializeAttributeSpecListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax027SpecializeAttributeSpecListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax027SpecializeAttributeSpecListB0V8IteratorV4nextAA0B0VSgyF","s11SwiftSyntax027SpecializeAttributeSpecListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax027SpecializeAttributeSpecListB0V8removing7childAtACSi_tF","s11SwiftSyntax027SpecializeAttributeSpecListB0V9appendingyAcA0B0VF","s11SwiftSyntax027SpecializeAttributeSpecListB0V9inserting_2atAcA0B0V_SitF","s11SwiftSyntax027SpecializeAttributeSpecListB0V9replacing7childAt4withACSi_AA0B0VtF","s11SwiftSyntax028ImplementsAttributeArgumentsB0V012withDeclNameE0yAcA0gheB0VSgF","s11SwiftSyntax028ImplementsAttributeArgumentsB0V16withDeclBaseNameyAcA0B0VSgF","s11SwiftSyntax028ImplementsAttributeArgumentsB0V8withTypeyAcA06Simpleg10IdentifierB0VSgF","s11SwiftSyntax028ImplementsAttributeArgumentsB0V9withCommayAcA05TokenB0VSgF","s11SwiftSyntax028ImplementsAttributeArgumentsB7BuilderV011useDeclNameE0yyAA0hieB0VF","s11SwiftSyntax028ImplementsAttributeArgumentsB7BuilderV15useDeclBaseNameyyAA0B0VF","s11SwiftSyntax028ImplementsAttributeArgumentsB7BuilderV7useTypeyyAA06Simpleh10IdentifierB0VF","s11SwiftSyntax028ImplementsAttributeArgumentsB7BuilderV8useCommayyAA05TokenB0VF","s11SwiftSyntax028NamedAttributeStringArgumentB0V04withE10OrDeclnameyAcA0B0VSgF","s11SwiftSyntax028NamedAttributeStringArgumentB0V11withNameTokyAcA05TokenB0VSgF","s11SwiftSyntax028NamedAttributeStringArgumentB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax028NamedAttributeStringArgumentB7BuilderV03useE10OrDeclnameyyAA0B0VF","s11SwiftSyntax028NamedAttributeStringArgumentB7BuilderV10useNameTokyyAA05TokenB0VF","s11SwiftSyntax028NamedAttributeStringArgumentB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax028PrecedenceGroupAssociativityB0V04withE7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax028PrecedenceGroupAssociativityB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax028PrecedenceGroupAssociativityB0V9withValueyAcA05TokenB0VSgF","s11SwiftSyntax028PrecedenceGroupAssociativityB7BuilderV03useE7KeywordyyAA05TokenB0VF","s11SwiftSyntax028PrecedenceGroupAssociativityB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax028PrecedenceGroupAssociativityB7BuilderV8useValueyyAA05TokenB0VF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V10prependingyAcA0B0VF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V12makeIteratorAC0H0VyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V12removingLastACyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V13removingFirstACyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V13withoutTriviaACyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V17withLeadingTriviayAcA0I0VF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V18withTrailingTriviayAcA0I0VF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V8IteratorV4nextAA0B0VSgyF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V8removing7childAtACSi_tF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V9appendingyAcA0B0VF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V9inserting_2atAcA0B0V_SitF","s11SwiftSyntax028PrecedenceGroupAttributeListB0V9replacing7childAt4withACSi_AA0B0VtF","s11SwiftSyntax029DifferentiabilityParamsClauseB0V12withWrtLabelyAcA05TokenB0VSgF","s11SwiftSyntax029DifferentiabilityParamsClauseB0V14withParametersyAcA0B0VSgF","s11SwiftSyntax029DifferentiabilityParamsClauseB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax029DifferentiabilityParamsClauseB7BuilderV11useWrtLabelyyAA05TokenB0VF","s11SwiftSyntax029DifferentiabilityParamsClauseB7BuilderV13useParametersyyAA0B0VF","s11SwiftSyntax029DifferentiabilityParamsClauseB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax030AvailabilityVersionRestrictionB0V04withD0yAcA0d5TupleB0VSgF","s11SwiftSyntax030AvailabilityVersionRestrictionB0V12withPlatformyAcA05TokenB0VSgF","s11SwiftSyntax030AvailabilityVersionRestrictionB7BuilderV03useD0yyAA0d5TupleB0VF","s11SwiftSyntax030AvailabilityVersionRestrictionB7BuilderV11usePlatformyyAA05TokenB0VF","s11SwiftSyntax030MultipleTrailingClosureElementB0V04withE0yAcA0e4ExprB0VSgF","s11SwiftSyntax030MultipleTrailingClosureElementB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax030MultipleTrailingClosureElementB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax030MultipleTrailingClosureElementB7BuilderV03useE0yyAA0e4ExprB0VF","s11SwiftSyntax030MultipleTrailingClosureElementB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax030MultipleTrailingClosureElementB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V011withWrappedF0yAcA0fB0VSgF","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB0V19withExclamationMarkyAcA05TokenB0VSgF","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB7BuilderV010useWrappedF0yyAA0fB0VF","s11SwiftSyntax031ImplicitlyUnwrappedOptionalTypeB7BuilderV18useExclamationMarkyyAA05TokenB0VF","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V12withDiffKindyAcA05TokenB0VSgF","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V14withDiffParamsyAcA017Differentiabilityh6ClauseB0VSgF","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V15withWhereClauseyAcA07GenericghB0VSgF","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V17withDiffKindCommayAcA05TokenB0VSgF","s11SwiftSyntax032DifferentiableAttributeArgumentsB0V19withDiffParamsCommayAcA05TokenB0VSgF","s11SwiftSyntax032DifferentiableAttributeArgumentsB7BuilderV11useDiffKindyyAA05TokenB0VF","s11SwiftSyntax032DifferentiableAttributeArgumentsB7BuilderV13useDiffParamsyyAA017Differentiabilityi6ClauseB0VF","s11SwiftSyntax032DifferentiableAttributeArgumentsB7BuilderV14useWhereClauseyyAA07GenerichiB0VF","s11SwiftSyntax032DifferentiableAttributeArgumentsB7BuilderV16useDiffKindCommayyAA05TokenB0VF","s11SwiftSyntax032DifferentiableAttributeArgumentsB7BuilderV18useDiffParamsCommayyAA05TokenB0VF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V04withD6TriviayAcA0I0VF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V07withoutD6TriviaACyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V10prependingyAcA0cdefB0VF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V12makeIteratorAC0I0VyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V12removingLastACyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V13removingFirstACyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V13withoutTriviaACyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V17withLeadingTriviayAcA0J0VF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V8IteratorV4nextAA0cdefB0VSgyF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V8removing7childAtACSi_tF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V9appendingyAcA0cdefB0VF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V9inserting_2atAcA0cdefB0V_SitF","s11SwiftSyntax034MultipleTrailingClosureElementListB0V9replacing7childAt4withACSi_AA0cdefB0VtF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V10withPeriodyAcA05TokenB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V11withOfLabelyAcA05TokenB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V14withDiffParamsyAcA017Differentiabilityi6ClauseB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V16withAccessorKindyAcA05TokenB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V20withOriginalDeclNameyAcA09QualifiedijB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V9withColonyAcA05TokenB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB0V9withCommayAcA05TokenB0VSgF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV10useOfLabelyyAA05TokenB0VF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV13useDiffParamsyyAA017Differentiabilityj6ClauseB0VF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV15useAccessorKindyyAA05TokenB0VF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV19useOriginalDeclNameyyAA09QualifiedjkB0VF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV8useColonyyAA05TokenB0VF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV8useCommayyAA05TokenB0VF","s11SwiftSyntax040DerivativeRegistrationAttributeArgumentsB7BuilderV9usePeriodyyAA05TokenB0VF","s11SwiftSyntax04DeclB0V10asProtocolyAA0cbE0_pAaE_pmF","s11SwiftSyntax04DeclB0V10isProtocolySbAA0cbE0_pmF","s11SwiftSyntax04DeclB0V2asyxSgxmAA0cB8ProtocolRzlF","s11SwiftSyntax04DeclB0V2isySbxmAA0cB8ProtocolRzlF","s11SwiftSyntax04ExprB0V10asProtocolyAA0cbE0_pAaE_pmF","s11SwiftSyntax04ExprB0V10isProtocolySbAA0cbE0_pmF","s11SwiftSyntax04ExprB0V2asyxSgxmAA0cB8ProtocolRzlF","s11SwiftSyntax04ExprB0V2isySbxmAA0cB8ProtocolRzlF","s11SwiftSyntax04StmtB0V10asProtocolyAA0cbE0_pAaE_pmF","s11SwiftSyntax04StmtB0V10isProtocolySbAA0cbE0_pmF","s11SwiftSyntax04StmtB0V2asyxSgxmAA0cB8ProtocolRzlF","s11SwiftSyntax04StmtB0V2isySbxmAA0cB8ProtocolRzlF","s11SwiftSyntax04TypeB0V10asProtocolyAA0cbE0_pAaE_pmF","s11SwiftSyntax04TypeB0V10isProtocolySbAA0cbE0_pmF","s11SwiftSyntax04TypeB0V2asyxSgxmAA0cB8ProtocolRzlF","s11SwiftSyntax04TypeB0V2isySbxmAA0cB8ProtocolRzlF","s11SwiftSyntax05TokenB0V13withoutTriviaACyF","s11SwiftSyntax05TokenB0V17withLeadingTriviayAcA0F0VF","s11SwiftSyntax05TokenB0V18withTrailingTriviayAcA0F0VF","s11SwiftSyntax05TokenB0V20withoutLeadingTriviaACyF","s11SwiftSyntax05TokenB0V21withoutTrailingTriviaACyF","s11SwiftSyntax05TokenB0V8withKindyAcA0cE0OF","s11SwiftSyntax06AsExprB0V04withC3TokyAcA05TokenB0VSgF","s11SwiftSyntax06AsExprB0V12withTypeNameyAcA0fB0VSgF","s11SwiftSyntax06AsExprB0V29withQuestionOrExclamationMarkyAcA05TokenB0VSgF","s11SwiftSyntax06AsExprB7BuilderV03useC3TokyyAA05TokenB0VF","s11SwiftSyntax06AsExprB7BuilderV11useTypeNameyyAA0gB0VF","s11SwiftSyntax06AsExprB7BuilderV28useQuestionOrExclamationMarkyyAA05TokenB0VF","s11SwiftSyntax06BracedB0P13withLeftBraceyxAA05TokenB0VSgF","s11SwiftSyntax06BracedB0P14withRightBraceyxAA05TokenB0VSgF","s11SwiftSyntax06DoStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax06DoStmtB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax06DoStmtB0V14addCatchClauseyAcA0fgB0VF","s11SwiftSyntax06DoStmtB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax06DoStmtB0V16withCatchClausesyAcA0f10ClauseListB0VSgF","s11SwiftSyntax06DoStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax06DoStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax06DoStmtB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax06DoStmtB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax06DoStmtB7BuilderV14addCatchClauseyyAA0ghB0VF","s11SwiftSyntax06DoStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax06IfStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax06IfStmtB0V12addConditionyAcA0f7ElementB0VF","s11SwiftSyntax06IfStmtB0V12withElseBodyyAcA0B0VSgF","s11SwiftSyntax06IfStmtB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax06IfStmtB0V14withConditionsyAcA020ConditionElementListB0VSgF","s11SwiftSyntax06IfStmtB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax06IfStmtB0V15withElseKeywordyAcA05TokenB0VSgF","s11SwiftSyntax06IfStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax06IfStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax06IfStmtB7BuilderV11useElseBodyyyAA0B0VF","s11SwiftSyntax06IfStmtB7BuilderV12addConditionyyAA0g7ElementB0VF","s11SwiftSyntax06IfStmtB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax06IfStmtB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax06IfStmtB7BuilderV14useElseKeywordyyAA05TokenB0VF","s11SwiftSyntax06IfStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax06IsExprB0V04withC3TokyAcA05TokenB0VSgF","s11SwiftSyntax06IsExprB0V12withTypeNameyAcA0fB0VSgF","s11SwiftSyntax06IsExprB7BuilderV03useC3TokyyAA05TokenB0VF","s11SwiftSyntax06IsExprB7BuilderV11useTypeNameyyAA0gB0VF","s11SwiftSyntax07LabeledB0P13withLabelNameyxAA05TokenB0VSgF","s11SwiftSyntax07LabeledB0P14withLabelColonyxAA05TokenB0VSgF","s11SwiftSyntax07PatternB0V10asProtocolyAA0cbE0_pAaE_pmF","s11SwiftSyntax07PatternB0V10isProtocolySbAA0cbE0_pmF","s11SwiftSyntax07PatternB0V2asyxSgxmAA0cB8ProtocolRzlF","s11SwiftSyntax07PatternB0V2isySbxmAA0cB8ProtocolRzlF","s11SwiftSyntax07TryExprB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax07TryExprB0V14withExpressionyAcA0dB0VSgF","s11SwiftSyntax07TryExprB0V29withQuestionOrExclamationMarkyAcA05TokenB0VSgF","s11SwiftSyntax07TryExprB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax07TryExprB7BuilderV13useExpressionyyAA0dB0VF","s11SwiftSyntax07TryExprB7BuilderV28useQuestionOrExclamationMarkyyAA05TokenB0VF","s11SwiftSyntax08CaseItemB0V11withPatternyAcA0fB0VSgF","s11SwiftSyntax08CaseItemB0V15withWhereClauseyAcA0fgB0VSgF","s11SwiftSyntax08CaseItemB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax08CaseItemB7BuilderV10usePatternyyAA0gB0VF","s11SwiftSyntax08CaseItemB7BuilderV14useWhereClauseyyAA0ghB0VF","s11SwiftSyntax08CaseItemB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax08DeclNameB0V04withc4BaseD0yAcA0B0VSgF","s11SwiftSyntax08DeclNameB0V04withcD9ArgumentsyAcA0cdfB0VSgF","s11SwiftSyntax08DeclNameB7BuilderV03usec4BaseD0yyAA0B0VF","s11SwiftSyntax08DeclNameB7BuilderV03usecD9ArgumentsyyAA0cdgB0VF","s11SwiftSyntax08EnumDeclB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax08EnumDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax08EnumDeclB0V11withMembersyAcA06Memberd5BlockB0VSgF","s11SwiftSyntax08EnumDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax08EnumDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax08EnumDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax08EnumDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax08EnumDeclB0V21withGenericParametersyAcA0f15ParameterClauseB0VSgF","s11SwiftSyntax08EnumDeclB0V21withInheritanceClauseyAcA04TypefgB0VSgF","s11SwiftSyntax08EnumDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax08EnumDeclB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax08EnumDeclB7BuilderV10useMembersyyAA06Memberd5BlockB0VF","s11SwiftSyntax08EnumDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax08EnumDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax08EnumDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax08EnumDeclB7BuilderV20useGenericParametersyyAA0g15ParameterClauseB0VF","s11SwiftSyntax08EnumDeclB7BuilderV20useInheritanceClauseyyAA04TypeghB0VF","s11SwiftSyntax08EnumDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax08ExprListB0V10prependingyAcA0cB0VF","s11SwiftSyntax08ExprListB0V12makeIteratorAC0F0VyF","s11SwiftSyntax08ExprListB0V12removingLastACyF","s11SwiftSyntax08ExprListB0V13removingFirstACyF","s11SwiftSyntax08ExprListB0V13withoutTriviaACyF","s11SwiftSyntax08ExprListB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax08ExprListB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax08ExprListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax08ExprListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax08ExprListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax08ExprListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax08ExprListB0V8IteratorV4nextAA0cB0VSgyF","s11SwiftSyntax08ExprListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax08ExprListB0V8removing7childAtACSi_tF","s11SwiftSyntax08ExprListB0V9appendingyAcA0cB0VF","s11SwiftSyntax08ExprListB0V9inserting_2atAcA0cB0V_SitF","s11SwiftSyntax08ExprListB0V9replacing7childAt4withACSi_AA0cB0VtF","s11SwiftSyntax08ObjcNameB0V10prependingyAcA0cd5PieceB0VF","s11SwiftSyntax08ObjcNameB0V12makeIteratorAC0F0VyF","s11SwiftSyntax08ObjcNameB0V12removingLastACyF","s11SwiftSyntax08ObjcNameB0V13removingFirstACyF","s11SwiftSyntax08ObjcNameB0V13withoutTriviaACyF","s11SwiftSyntax08ObjcNameB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax08ObjcNameB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax08ObjcNameB0V20withoutLeadingTriviaACyF","s11SwiftSyntax08ObjcNameB0V21withoutTrailingTriviaACyF","s11SwiftSyntax08ObjcNameB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax08ObjcNameB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax08ObjcNameB0V8IteratorV4nextAA0cd5PieceB0VSgyF","s11SwiftSyntax08ObjcNameB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax08ObjcNameB0V8removing7childAtACSi_tF","s11SwiftSyntax08ObjcNameB0V9appendingyAcA0cd5PieceB0VF","s11SwiftSyntax08ObjcNameB0V9inserting_2atAcA0cd5PieceB0V_SitF","s11SwiftSyntax08ObjcNameB0V9replacing7childAt4withACSi_AA0cd5PieceB0VtF","s11SwiftSyntax08SomeTypeB0V04withC9SpecifieryAcA05TokenB0VSgF","s11SwiftSyntax08SomeTypeB0V08withBaseD0yAcA0dB0VSgF","s11SwiftSyntax08SomeTypeB7BuilderV03useC9SpecifieryyAA05TokenB0VF","s11SwiftSyntax08SomeTypeB7BuilderV07useBaseD0yyAA0dB0VF","s11SwiftSyntax08TypeExprB0V04withC0yAcA0cB0VSgF","s11SwiftSyntax08TypeExprB7BuilderV03useC0yyAA0cB0VF","s11SwiftSyntax09ArrayExprB0V10addElementyAcA0cfB0VF","s11SwiftSyntax09ArrayExprB0V12withElementsyAcA0c11ElementListB0VSgF","s11SwiftSyntax09ArrayExprB0V14withLeftSquareyAcA05TokenB0VSgF","s11SwiftSyntax09ArrayExprB0V15withRightSquareyAcA05TokenB0VSgF","s11SwiftSyntax09ArrayExprB7BuilderV10addElementyyAA0cgB0VF","s11SwiftSyntax09ArrayExprB7BuilderV13useLeftSquareyyAA05TokenB0VF","s11SwiftSyntax09ArrayExprB7BuilderV14useRightSquareyyAA05TokenB0VF","s11SwiftSyntax09ArrayTypeB0V011withElementD0yAcA0dB0VSgF","s11SwiftSyntax09ArrayTypeB0V21withLeftSquareBracketyAcA05TokenB0VSgF","s11SwiftSyntax09ArrayTypeB0V22withRightSquareBracketyAcA05TokenB0VSgF","s11SwiftSyntax09ArrayTypeB7BuilderV010useElementD0yyAA0dB0VF","s11SwiftSyntax09ArrayTypeB7BuilderV20useLeftSquareBracketyyAA05TokenB0VF","s11SwiftSyntax09ArrayTypeB7BuilderV21useRightSquareBracketyyAA05TokenB0VF","s11SwiftSyntax09ArrowExprB0V04withC5TokenyAcA0fB0VSgF","s11SwiftSyntax09ArrowExprB0V15withThrowsTokenyAcA0gB0VSgF","s11SwiftSyntax09ArrowExprB0V16withAsyncKeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ArrowExprB7BuilderV03useC5TokenyyAA0gB0VF","s11SwiftSyntax09ArrowExprB7BuilderV14useThrowsTokenyyAA0hB0VF","s11SwiftSyntax09ArrowExprB7BuilderV15useAsyncKeywordyyAA05TokenB0VF","s11SwiftSyntax09AttributeB0V04withC4NameyAcA05TokenB0VSgF","s11SwiftSyntax09AttributeB0V12withArgumentyAcA0B0VSgF","s11SwiftSyntax09AttributeB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax09AttributeB0V13withTokenListyAcA0efB0VSgF","s11SwiftSyntax09AttributeB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax09AttributeB0V15withAtSignTokenyAcA0gB0VSgF","s11SwiftSyntax09AttributeB0V8addTokenyAcA0eB0VF","s11SwiftSyntax09AttributeB7BuilderV03useC4NameyyAA05TokenB0VF","s11SwiftSyntax09AttributeB7BuilderV11useArgumentyyAA0B0VF","s11SwiftSyntax09AttributeB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax09AttributeB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax09AttributeB7BuilderV14useAtSignTokenyyAA0hB0VF","s11SwiftSyntax09AttributeB7BuilderV8addTokenyyAA0fB0VF","s11SwiftSyntax09AwaitExprB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09AwaitExprB0V14withExpressionyAcA0dB0VSgF","s11SwiftSyntax09AwaitExprB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09AwaitExprB7BuilderV13useExpressionyyAA0dB0VF","s11SwiftSyntax09BreakStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09BreakStmtB0V9withLabelyAcA05TokenB0VSgF","s11SwiftSyntax09BreakStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09BreakStmtB7BuilderV8useLabelyyAA05TokenB0VF","s11SwiftSyntax09CatchItemB0V11withPatternyAcA0fB0VSgF","s11SwiftSyntax09CatchItemB0V15withWhereClauseyAcA0fgB0VSgF","s11SwiftSyntax09CatchItemB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax09CatchItemB7BuilderV10usePatternyyAA0gB0VF","s11SwiftSyntax09CatchItemB7BuilderV14useWhereClauseyyAA0ghB0VF","s11SwiftSyntax09CatchItemB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax09ClassDeclB0V04withC14OrActorKeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ClassDeclB0V11addModifieryAcA0dfB0VF","s11SwiftSyntax09ClassDeclB0V11withMembersyAcA06Memberd5BlockB0VSgF","s11SwiftSyntax09ClassDeclB0V12addAttributeyAcA0B0VF","s11SwiftSyntax09ClassDeclB0V13withModifiersyAcA012ModifierListB0VSgF","s11SwiftSyntax09ClassDeclB0V14withAttributesyAcA013AttributeListB0VSgF","s11SwiftSyntax09ClassDeclB0V14withIdentifieryAcA05TokenB0VSgF","s11SwiftSyntax09ClassDeclB0V21withInheritanceClauseyAcA04TypefgB0VSgF","s11SwiftSyntax09ClassDeclB0V22withGenericWhereClauseyAcA0fghB0VSgF","s11SwiftSyntax09ClassDeclB0V26withGenericParameterClauseyAcA0fghB0VSgF","s11SwiftSyntax09ClassDeclB7BuilderV03useC14OrActorKeywordyyAA05TokenB0VF","s11SwiftSyntax09ClassDeclB7BuilderV10useMembersyyAA06Memberd5BlockB0VF","s11SwiftSyntax09ClassDeclB7BuilderV11addModifieryyAA0dgB0VF","s11SwiftSyntax09ClassDeclB7BuilderV12addAttributeyyAA0B0VF","s11SwiftSyntax09ClassDeclB7BuilderV13useIdentifieryyAA05TokenB0VF","s11SwiftSyntax09ClassDeclB7BuilderV20useInheritanceClauseyyAA04TypeghB0VF","s11SwiftSyntax09ClassDeclB7BuilderV21useGenericWhereClauseyyAA0ghiB0VF","s11SwiftSyntax09ClassDeclB7BuilderV25useGenericParameterClauseyyAA0ghiB0VF","s11SwiftSyntax09CodeBlockB0V12addStatementyAcA0cd4ItemB0VF","s11SwiftSyntax09CodeBlockB0V13withLeftBraceyAcA05TokenB0VSgF","s11SwiftSyntax09CodeBlockB0V14withRightBraceyAcA05TokenB0VSgF","s11SwiftSyntax09CodeBlockB0V14withStatementsyAcA0cd8ItemListB0VSgF","s11SwiftSyntax09CodeBlockB7BuilderV12addStatementyyAA0cd4ItemB0VF","s11SwiftSyntax09CodeBlockB7BuilderV12useLeftBraceyyAA05TokenB0VF","s11SwiftSyntax09CodeBlockB7BuilderV13useRightBraceyyAA05TokenB0VF","s11SwiftSyntax09DeclGroupB0P11withMembersyxAA06Memberc5BlockB0VSgF","s11SwiftSyntax09DeclGroupB0P13withModifiersyxAA012ModifierListB0VSgF","s11SwiftSyntax09DeclGroupB0P14withAttributesyxAA013AttributeListB0VSgF","s11SwiftSyntax09DeferStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09DeferStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax09DeferStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09DeferStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax09ElseBlockB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ElseBlockB0V8withBodyyAcA04CodedB0VSgF","s11SwiftSyntax09ElseBlockB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09ElseBlockB7BuilderV7useBodyyyAA04CodedB0VF","s11SwiftSyntax09ForInStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V04withD7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V11withPatternyAcA0gB0VSgF","s11SwiftSyntax09ForInStmtB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V14withTryKeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V15withCaseKeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V15withWhereClauseyAcA0ghB0VSgF","s11SwiftSyntax09ForInStmtB0V16withAwaitKeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ForInStmtB0V16withSequenceExpryAcA0hB0VSgF","s11SwiftSyntax09ForInStmtB0V18withTypeAnnotationyAcA0ghB0VSgF","s11SwiftSyntax09ForInStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax09ForInStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV03useD7KeywordyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV10usePatternyyAA0hB0VF","s11SwiftSyntax09ForInStmtB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV13useTryKeywordyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV14useCaseKeywordyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV14useWhereClauseyyAA0hiB0VF","s11SwiftSyntax09ForInStmtB7BuilderV15useAwaitKeywordyyAA05TokenB0VF","s11SwiftSyntax09ForInStmtB7BuilderV15useSequenceExpryyAA0iB0VF","s11SwiftSyntax09ForInStmtB7BuilderV17useTypeAnnotationyyAA0hiB0VF","s11SwiftSyntax09ForInStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax09GuardStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09GuardStmtB0V12addConditionyAcA0f7ElementB0VF","s11SwiftSyntax09GuardStmtB0V14withConditionsyAcA020ConditionElementListB0VSgF","s11SwiftSyntax09GuardStmtB0V15withElseKeywordyAcA05TokenB0VSgF","s11SwiftSyntax09GuardStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax09GuardStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09GuardStmtB7BuilderV12addConditionyyAA0g7ElementB0VF","s11SwiftSyntax09GuardStmtB7BuilderV14useElseKeywordyyAA05TokenB0VF","s11SwiftSyntax09GuardStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax09InOutExprB0V13withAmpersandyAcA05TokenB0VSgF","s11SwiftSyntax09InOutExprB0V14withExpressionyAcA0eB0VSgF","s11SwiftSyntax09InOutExprB7BuilderV12useAmpersandyyAA05TokenB0VF","s11SwiftSyntax09InOutExprB7BuilderV13useExpressionyyAA0eB0VF","s11SwiftSyntax09ThrowStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09ThrowStmtB0V14withExpressionyAcA04ExprB0VSgF","s11SwiftSyntax09ThrowStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09ThrowStmtB7BuilderV13useExpressionyyAA04ExprB0VF","s11SwiftSyntax09TokenListB0V10prependingyAcA0cB0VF","s11SwiftSyntax09TokenListB0V12makeIteratorAC0F0VyF","s11SwiftSyntax09TokenListB0V12removingLastACyF","s11SwiftSyntax09TokenListB0V13removingFirstACyF","s11SwiftSyntax09TokenListB0V13withoutTriviaACyF","s11SwiftSyntax09TokenListB0V17withLeadingTriviayAcA0G0VF","s11SwiftSyntax09TokenListB0V18withTrailingTriviayAcA0G0VF","s11SwiftSyntax09TokenListB0V20withoutLeadingTriviaACyF","s11SwiftSyntax09TokenListB0V21withoutTrailingTriviaACyF","s11SwiftSyntax09TokenListB0V5index5afterAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax09TokenListB0V5index6beforeAA0B13ChildrenIndexVAG_tF","s11SwiftSyntax09TokenListB0V8IteratorV4nextAA0cB0VSgyF","s11SwiftSyntax09TokenListB0V8distance4from2toSiAA0B13ChildrenIndexV_AHtF","s11SwiftSyntax09TokenListB0V8removing7childAtACSi_tF","s11SwiftSyntax09TokenListB0V9appendingyAcA0cB0VF","s11SwiftSyntax09TokenListB0V9inserting_2atAcA0cB0V_SitF","s11SwiftSyntax09TokenListB0V9replacing7childAt4withACSi_AA0cB0VtF","s11SwiftSyntax09TupleExprB0V10addElementyAcA0cdfB0VF","s11SwiftSyntax09TupleExprB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax09TupleExprB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax09TupleExprB0V15withElementListyAcA0cdfgB0VSgF","s11SwiftSyntax09TupleExprB7BuilderV10addElementyyAA0cdgB0VF","s11SwiftSyntax09TupleExprB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax09TupleExprB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax09TupleTypeB0V10addElementyAcA0cdfB0VF","s11SwiftSyntax09TupleTypeB0V12withElementsyAcA0cd11ElementListB0VSgF","s11SwiftSyntax09TupleTypeB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax09TupleTypeB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax09TupleTypeB7BuilderV10addElementyyAA0cdgB0VF","s11SwiftSyntax09TupleTypeB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax09TupleTypeB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax09WhileStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09WhileStmtB0V12addConditionyAcA0f7ElementB0VF","s11SwiftSyntax09WhileStmtB0V13withLabelNameyAcA05TokenB0VSgF","s11SwiftSyntax09WhileStmtB0V14withConditionsyAcA020ConditionElementListB0VSgF","s11SwiftSyntax09WhileStmtB0V14withLabelColonyAcA05TokenB0VSgF","s11SwiftSyntax09WhileStmtB0V8withBodyyAcA09CodeBlockB0VSgF","s11SwiftSyntax09WhileStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09WhileStmtB7BuilderV12addConditionyyAA0g7ElementB0VF","s11SwiftSyntax09WhileStmtB7BuilderV12useLabelNameyyAA05TokenB0VF","s11SwiftSyntax09WhileStmtB7BuilderV13useLabelColonyyAA05TokenB0VF","s11SwiftSyntax09WhileStmtB7BuilderV7useBodyyyAA09CodeBlockB0VF","s11SwiftSyntax09YieldListB0V011withElementD0yAcA04ExprdB0VSgF","s11SwiftSyntax09YieldListB0V10addElementyAcA04ExprB0VF","s11SwiftSyntax09YieldListB0V13withLeftParenyAcA05TokenB0VSgF","s11SwiftSyntax09YieldListB0V14withRightParenyAcA05TokenB0VSgF","s11SwiftSyntax09YieldListB0V17withTrailingCommayAcA05TokenB0VSgF","s11SwiftSyntax09YieldListB7BuilderV10addElementyyAA04ExprB0VF","s11SwiftSyntax09YieldListB7BuilderV12useLeftParenyyAA05TokenB0VF","s11SwiftSyntax09YieldListB7BuilderV13useRightParenyyAA05TokenB0VF","s11SwiftSyntax09YieldListB7BuilderV16useTrailingCommayyAA05TokenB0VF","s11SwiftSyntax09YieldStmtB0V04withC7KeywordyAcA05TokenB0VSgF","s11SwiftSyntax09YieldStmtB0V10withYieldsyAcA0B0VSgF","s11SwiftSyntax09YieldStmtB7BuilderV03useC7KeywordyyAA05TokenB0VF","s11SwiftSyntax09YieldStmtB7BuilderV9useYieldsyyAA0B0VF","s11SwiftSyntax0B0V10asProtocolyAA04DeclbD0_pSgAaE_pmF","s11SwiftSyntax0B0V10asProtocolyAA04ExprbD0_pSgAaE_pmF","s11SwiftSyntax0B0V10asProtocolyAA04StmtbD0_pSgAaE_pmF","s11SwiftSyntax0B0V10asProtocolyAA04TypebD0_pSgAaE_pmF","s11SwiftSyntax0B0V10asProtocolyAA07PatternbD0_pSgAaE_pmF","s11SwiftSyntax0B0V10asProtocolyAA0bD0_pAaE_pmF","s11SwiftSyntax0B0V10isProtocolySbAA04DeclbD0_pmF","s11SwiftSyntax0B0V10isProtocolySbAA04ExprbD0_pmF","s11SwiftSyntax0B0V10isProtocolySbAA04StmtbD0_pmF","s11SwiftSyntax0B0V10isProtocolySbAA04TypebD0_pmF","s11SwiftSyntax0B0V10isProtocolySbAA07PatternbD0_pmF","s11SwiftSyntax0B0V10isProtocolySbAA0bD0_pmF","s11SwiftSyntax0B0V11endLocation9converter19afterTrailingTriviaAA06SourceD0VAA0iD9ConverterC_SbtF","s11SwiftSyntax0B0V11sourceRange9converter18afterLeadingTrivia0f8TrailingH0AA06SourceD0VAA0J17LocationConverterC_S2btF","s11SwiftSyntax0B0V13startLocation9converter18afterLeadingTriviaAA06SourceD0VAA0iD9ConverterC_SbtF","s11SwiftSyntax0B0V2asyAA0B4EnumOAFmF","s11SwiftSyntax0B0V2asyxSgxmAA0B8ProtocolRzlF","s11SwiftSyntax0B0V2isySbxmAA0B8ProtocolRzlF","s11SwiftSyntax0B0V4hash4intoys6HasherVz_tF","s11SwiftSyntax0B10AnyVisitorC05visitC0yAA0bD12ContinueKindOAA0B0VF","s11SwiftSyntax0B10AnyVisitorC05visitC4PostyyAA0B0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010AccessPathB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010ImportDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010ReturnStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010SourceFileB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010StructDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010SwitchCaseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA010SwitchStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011CatchClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011ClosureExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011KeyPathExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011TernaryExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011UnknownDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011UnknownExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011UnknownStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011UnknownTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA011WhereClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012AccessorDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012AccessorListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012ArrayElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012CaseItemListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012ClosureParamB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012DeclModifierB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012EnumCaseDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012FunctionDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012FunctionTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012IfConfigDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012MetatypeTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012ModifierListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012ObjCSelectorB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012OperatorDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012OptionalTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012ProtocolDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012ReturnClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012SequenceExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012SuperRefExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012TuplePatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012VariableDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA012VersionTupleB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013AccessorBlockB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013AsTypePatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013AttributeListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013CatchItemListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013CodeBlockItemB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013ExtensionDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013InheritedTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013IsTypePatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013ObjcNamePieceB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013PoundFileExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013PoundLineExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013StringSegmentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013SubscriptDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013SubscriptExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA013TypealiasDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014AssignmentExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014AttributedTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014DictionaryExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014DictionaryTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014ExpressionStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014IdentifierExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014IdentifierListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014IfConfigClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014MemberDeclListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014NilLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014PatternBindingB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014PoundErrorDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014SpecializeExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014SwitchCaseListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014TypeAnnotationB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA014UnknownPatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015CatchClauseListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015CompositionTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015CustomAttributeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015DeclarationStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015EnumCaseElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015EnumCasePatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015FallthroughStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015ForcedValueExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015GenericArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015InitializerDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015KeyPathBaseExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015MemberDeclBlockB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015ObjcKeyPathExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015OptionalPatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015ParameterClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015PoundAssertStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015PoundColumnExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015PoundFileIDExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015RepeatWhileStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015SwitchCaseLabelB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA015WildcardPatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016ArrayElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016ClosureParamListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016ClosureSignatureB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016ConditionElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016DeclNameArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016FloatLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016FunctionCallExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016FunctionDeclNameB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016GenericParameterB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016MemberAccessExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016ObjcSelectorExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016PostfixUnaryExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016PoundWarningDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016RegexLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016TupleExprElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA016TupleTypeElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017AccessorParameterB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017AvailabilityEntryB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017CodeBlockItemListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017DeclNameArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017DeinitializerDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017DictionaryElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017ExpressionPatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017ExpressionSegmentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017FunctionParameterB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017FunctionSignatureB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017IdentifierPatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017InheritedTypeListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017InitializerClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017NonEmptyTokenListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017ObjCSelectorPieceB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017ObjectLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017PoundFilePathExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017PoundFunctionExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017QualifiedDeclNameB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA017StringLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018AssociatedtypeDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018BinaryOperatorExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018BooleanLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018ClosureCaptureItemB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018ElseIfContinuationB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018GenericRequirementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018GenericWhereClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018IfConfigClauseListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018IntegerLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018MemberDeclListItemB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018PatternBindingListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018PoundDsohandleExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018PrefixOperatorExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA018SwitchDefaultLabelB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019AccessLevelModifierB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019AccessPathComponentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019EnumCaseElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019GenericArgumentListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019PostfixIfConfigExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019PoundSourceLocationB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019PrecedenceGroupDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019SameTypeRequirementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019TargetFunctionEntryB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019TuplePatternElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA019ValueBindingPatternB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020AvailabilityArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020AvailabilitySpecListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020ClassRestrictionTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020ConditionElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020DeclNameArgumentListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020GenericParameterListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020MemberTypeIdentifierB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020OptionalChainingExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020SimpleTypeIdentifierB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020TupleExprElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA020TupleTypeElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021AvailabilityConditionB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021DictionaryElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021DiscardAssignmentExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021EditorPlaceholderExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021FunctionParameterListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021GenericArgumentClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021PrimaryAssociatedTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021StringLiteralSegmentsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021SymbolicReferenceExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021TypeInheritanceClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021TypeInitializerClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA021UnresolvedPatternExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022ClosureCaptureItemListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022CompositionTypeElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022ConformanceRequirementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022DifferentiabilityParamB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022GenericParameterClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022GenericRequirementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA022LabeledSpecializeEntryB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023ClosureCaptureSignatureB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023DifferentiabilityParamsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023PoundSourceLocationArgsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023PrecedenceGroupNameListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023PrecedenceGroupRelationB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023TuplePatternElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA023UnavailabilityConditionB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA024MatchingPatternConditionB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA024OptionalBindingConditionB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA025PrecedenceGroupAssignmentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA025PrimaryAssociatedTypeListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA026CompositionTypeElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA026DifferentiabilityParamListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA026OperatorPrecedenceAndTypesB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA026PrecedenceGroupNameElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA027AvailabilityLabeledArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA027SpecializeAttributeSpecListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA028ImplementsAttributeArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA028NamedAttributeStringArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA028PrecedenceGroupAssociativityB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA028PrecedenceGroupAttributeListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA029DifferentiabilityParamsClauseB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA030AvailabilityVersionRestrictionB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA030MultipleTrailingClosureElementB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA031ImplicitlyUnwrappedOptionalTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA032DifferentiableAttributeArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA034MultipleTrailingClosureElementListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA040DerivativeRegistrationAttributeArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA05TokenB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA06AsExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA06DoStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA06IfStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA06IsExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA07TryExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA07UnknownB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA08CaseItemB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA08DeclNameB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA08EnumDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA08ExprListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA08ObjcNameB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA08SomeTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA08TypeExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ArrayExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ArrayTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ArrowExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09AttributeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09AwaitExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09BreakStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09CatchItemB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ClassDeclB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09CodeBlockB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09DeferStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ElseBlockB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ForInStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09GuardStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09InOutExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09ThrowStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09TokenListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09TupleExprB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09TupleTypeB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09WhileStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09YieldListB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA09YieldStmtB0VF","s11SwiftSyntax0B10AnyVisitorC5visityAA0bD12ContinueKindOAA0f4StmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010AccessPathB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010ImportDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010ReturnStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010SourceFileB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010StructDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010SwitchCaseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA010SwitchStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011CatchClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011ClosureExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011KeyPathExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011TernaryExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011UnknownDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011UnknownExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011UnknownStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011UnknownTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA011WhereClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012AccessorDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012AccessorListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ArrayElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012CaseItemListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ClosureParamB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ContinueStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012DeclModifierB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012EnumCaseDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012FunctionDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012FunctionTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012IfConfigDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012MetatypeTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ModifierListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ObjCSelectorB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012OperatorDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012OptionalTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ProtocolDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012ReturnClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012SequenceExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012SuperRefExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012TuplePatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012VariableDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA012VersionTupleB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013AccessorBlockB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013AsTypePatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013AttributeListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013CatchItemListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013CodeBlockItemB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013ExtensionDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013InheritedTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013IsTypePatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013ObjcNamePieceB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013PoundFileExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013PoundLineExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013StringSegmentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013SubscriptDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013SubscriptExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA013TypealiasDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014AssignmentExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014AttributedTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014DictionaryExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014DictionaryTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014ExpressionStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014IdentifierExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014IdentifierListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014IfConfigClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014MemberDeclListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014NilLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014PatternBindingB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014PoundErrorDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014SpecializeExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014SwitchCaseListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014TypeAnnotationB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA014UnknownPatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015CatchClauseListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015CompositionTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015CustomAttributeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015DeclarationStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015EnumCaseElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015EnumCasePatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015FallthroughStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015ForcedValueExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015GenericArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015InitializerDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015KeyPathBaseExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015MemberDeclBlockB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015ObjcKeyPathExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015OptionalPatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015ParameterClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015PoundAssertStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015PoundColumnExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015PoundFileIDExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015RepeatWhileStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015SwitchCaseLabelB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA015WildcardPatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016ArrayElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016ClosureParamListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016ClosureSignatureB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016ConditionElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016DeclNameArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016FloatLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016FunctionCallExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016FunctionDeclNameB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016GenericParameterB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016MemberAccessExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016ObjcSelectorExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016PostfixUnaryExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016PoundWarningDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016RegexLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016TupleExprElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA016TupleTypeElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017AccessorParameterB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017AvailabilityEntryB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017CodeBlockItemListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017DeclNameArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017DeinitializerDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017DictionaryElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017ExpressionPatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017ExpressionSegmentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017FunctionParameterB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017FunctionSignatureB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017IdentifierPatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017InheritedTypeListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017InitializerClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017NonEmptyTokenListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017ObjCSelectorPieceB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017ObjectLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017PoundFilePathExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017PoundFunctionExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017QualifiedDeclNameB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA017StringLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018AssociatedtypeDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018BinaryOperatorExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018BooleanLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018ClosureCaptureItemB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018ElseIfContinuationB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018GenericRequirementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018GenericWhereClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018IfConfigClauseListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018IntegerLiteralExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018MemberDeclListItemB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018PatternBindingListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018PoundDsohandleExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018PrefixOperatorExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA018SwitchDefaultLabelB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019AccessLevelModifierB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019AccessPathComponentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019EnumCaseElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019GenericArgumentListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019PostfixIfConfigExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019PoundSourceLocationB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019PrecedenceGroupDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019SameTypeRequirementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019TargetFunctionEntryB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019TuplePatternElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA019ValueBindingPatternB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020AvailabilityArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020AvailabilitySpecListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020ClassRestrictionTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020ConditionElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020DeclNameArgumentListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020GenericParameterListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020MemberTypeIdentifierB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020OptionalChainingExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020SimpleTypeIdentifierB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020TupleExprElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA020TupleTypeElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021AvailabilityConditionB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021DictionaryElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021DiscardAssignmentExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021EditorPlaceholderExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021FunctionParameterListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021GenericArgumentClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021PrimaryAssociatedTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021StringLiteralSegmentsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021SymbolicReferenceExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021TypeInheritanceClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021TypeInitializerClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA021UnresolvedPatternExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022ClosureCaptureItemListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022CompositionTypeElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022ConformanceRequirementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022DifferentiabilityParamB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022GenericParameterClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022GenericRequirementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA022LabeledSpecializeEntryB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023ClosureCaptureSignatureB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023DifferentiabilityParamsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023PoundSourceLocationArgsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023PrecedenceGroupNameListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023PrecedenceGroupRelationB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023TuplePatternElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA023UnavailabilityConditionB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA024MatchingPatternConditionB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA024OptionalBindingConditionB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA025PrecedenceGroupAssignmentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA025PrimaryAssociatedTypeListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA026CompositionTypeElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA026DifferentiabilityParamListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA026OperatorPrecedenceAndTypesB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA026PrecedenceGroupNameElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA027AvailabilityLabeledArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA027SpecializeAttributeSpecListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA028ImplementsAttributeArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA028NamedAttributeStringArgumentB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA028PrecedenceGroupAssociativityB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA028PrecedenceGroupAttributeListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA029DifferentiabilityParamsClauseB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA030AvailabilityVersionRestrictionB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA030MultipleTrailingClosureElementB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA031ImplicitlyUnwrappedOptionalTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA032DifferentiableAttributeArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA034MultipleTrailingClosureElementListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA040DerivativeRegistrationAttributeArgumentsB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA05TokenB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA06AsExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA06DoStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA06IfStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA06IsExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA07TryExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA07UnknownB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA08CaseItemB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA08DeclNameB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA08EnumDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA08ExprListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA08ObjcNameB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA08SomeTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA08TypeExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ArrayExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ArrayTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ArrowExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09AttributeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09AwaitExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09BreakStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09CatchItemB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ClassDeclB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09CodeBlockB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09DeferStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ElseBlockB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ForInStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09GuardStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09InOutExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09ThrowStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09TokenListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09TupleExprB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09TupleTypeB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09WhileStmtB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09YieldListB0VF","s11SwiftSyntax0B10AnyVisitorC9visitPostyyAA09YieldStmtB0VF","s11SwiftSyntax0B15ClassificationsV12makeIteratorAC0E0VyF","s11SwiftSyntax0B15ClassificationsV8IteratorV4nextAA0B15ClassifiedRangeVSgyF","s11SwiftSyntax0B4NodeV5write2toyxz_ts16TextOutputStreamRzlF","s11SwiftSyntax0B7VisitorC4walkyyxAA0B8ProtocolRzlF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010AccessPathB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010ImportDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010ReturnStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010SourceFileB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010StructDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010SwitchCaseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA010SwitchStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011CatchClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011ClosureExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011KeyPathExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011TernaryExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011UnknownDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011UnknownExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011UnknownStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011UnknownTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA011WhereClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012AccessorDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012AccessorListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012ArrayElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012CaseItemListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012ClosureParamB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012DeclModifierB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012EnumCaseDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012FunctionDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012FunctionTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012IfConfigDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012MetatypeTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012ModifierListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012ObjCSelectorB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012OperatorDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012OptionalTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012ProtocolDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012ReturnClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012SequenceExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012SuperRefExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012TuplePatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012VariableDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA012VersionTupleB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013AccessorBlockB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013AsTypePatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013AttributeListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013CatchItemListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013CodeBlockItemB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013ExtensionDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013InheritedTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013IsTypePatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013ObjcNamePieceB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013PoundFileExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013PoundLineExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013StringSegmentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013SubscriptDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013SubscriptExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA013TypealiasDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014AssignmentExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014AttributedTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014DictionaryExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014DictionaryTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014ExpressionStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014IdentifierExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014IdentifierListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014IfConfigClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014MemberDeclListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014NilLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014PatternBindingB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014PoundErrorDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014SpecializeExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014SwitchCaseListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014TypeAnnotationB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA014UnknownPatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015CatchClauseListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015CompositionTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015CustomAttributeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015DeclarationStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015EnumCaseElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015EnumCasePatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015FallthroughStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015ForcedValueExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015GenericArgumentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015InitializerDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015KeyPathBaseExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015MemberDeclBlockB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015ObjcKeyPathExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015OptionalPatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015ParameterClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015PoundAssertStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015PoundColumnExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015PoundFileIDExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015RepeatWhileStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015SwitchCaseLabelB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA015WildcardPatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016ArrayElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016ClosureParamListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016ClosureSignatureB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016ConditionElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016DeclNameArgumentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016FloatLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016FunctionCallExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016FunctionDeclNameB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016GenericParameterB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016MemberAccessExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016ObjcSelectorExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016PostfixUnaryExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016PoundWarningDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016RegexLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016TupleExprElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA016TupleTypeElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017AccessorParameterB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017AvailabilityEntryB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017CodeBlockItemListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017DeclNameArgumentsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017DeinitializerDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017DictionaryElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017ExpressionPatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017ExpressionSegmentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017FunctionParameterB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017FunctionSignatureB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017IdentifierPatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017InheritedTypeListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017InitializerClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017NonEmptyTokenListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017ObjCSelectorPieceB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017ObjectLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017PoundFilePathExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017PoundFunctionExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017QualifiedDeclNameB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA017StringLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018AssociatedtypeDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018BinaryOperatorExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018BooleanLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018ClosureCaptureItemB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018ElseIfContinuationB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018GenericRequirementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018GenericWhereClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018IfConfigClauseListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018IntegerLiteralExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018MemberDeclListItemB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018PatternBindingListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018PoundDsohandleExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018PrefixOperatorExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA018SwitchDefaultLabelB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019AccessLevelModifierB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019AccessPathComponentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019EnumCaseElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019GenericArgumentListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019PostfixIfConfigExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019PoundSourceLocationB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019PrecedenceGroupDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019SameTypeRequirementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019TargetFunctionEntryB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019TuplePatternElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA019ValueBindingPatternB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020AvailabilityArgumentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020AvailabilitySpecListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020ClassRestrictionTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020ConditionElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020DeclNameArgumentListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020GenericParameterListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020MemberTypeIdentifierB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020OptionalChainingExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020SimpleTypeIdentifierB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020TupleExprElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA020TupleTypeElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021AvailabilityConditionB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021DictionaryElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021DiscardAssignmentExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021EditorPlaceholderExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021FunctionParameterListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021GenericArgumentClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021PrimaryAssociatedTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021StringLiteralSegmentsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021SymbolicReferenceExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021TypeInheritanceClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021TypeInitializerClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA021UnresolvedPatternExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022ClosureCaptureItemListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022CompositionTypeElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022ConformanceRequirementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022DifferentiabilityParamB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022GenericParameterClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022GenericRequirementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA022LabeledSpecializeEntryB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023ClosureCaptureSignatureB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023DifferentiabilityParamsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023PoundSourceLocationArgsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023PrecedenceGroupNameListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023PrecedenceGroupRelationB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023TuplePatternElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA023UnavailabilityConditionB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA024MatchingPatternConditionB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA024OptionalBindingConditionB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA025PrecedenceGroupAssignmentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA025PrimaryAssociatedTypeListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA026CompositionTypeElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA026DifferentiabilityParamListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA026OperatorPrecedenceAndTypesB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA026PrecedenceGroupNameElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA027AvailabilityLabeledArgumentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA027SpecializeAttributeSpecListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA028ImplementsAttributeArgumentsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA028NamedAttributeStringArgumentB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA028PrecedenceGroupAssociativityB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA028PrecedenceGroupAttributeListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA029DifferentiabilityParamsClauseB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA030AvailabilityVersionRestrictionB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA030MultipleTrailingClosureElementB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA031ImplicitlyUnwrappedOptionalTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA032DifferentiableAttributeArgumentsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA034MultipleTrailingClosureElementListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA040DerivativeRegistrationAttributeArgumentsB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA05TokenB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA06AsExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA06DoStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA06IfStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA06IsExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA07TryExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA07UnknownB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA08CaseItemB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA08DeclNameB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA08EnumDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA08ExprListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA08ObjcNameB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA08SomeTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA08TypeExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ArrayExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ArrayTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ArrowExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09AttributeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09AwaitExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09BreakStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09CatchItemB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ClassDeclB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09CodeBlockB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09DeferStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ElseBlockB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ForInStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09GuardStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09InOutExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09ThrowStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09TokenListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09TupleExprB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09TupleTypeB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09WhileStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09YieldListB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA09YieldStmtB0VF","s11SwiftSyntax0B7VisitorC5visityAA0bC12ContinueKindOAA0e4StmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010AccessPathB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010ImportDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010ReturnStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010SourceFileB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010StructDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010SwitchCaseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA010SwitchStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011CatchClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011ClosureExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011KeyPathExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011TernaryExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011UnknownDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011UnknownExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011UnknownStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011UnknownTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA011WhereClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012AccessorDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012AccessorListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ArrayElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012CaseItemListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ClosureParamB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ContinueStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012DeclModifierB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012EnumCaseDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012FunctionDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012FunctionTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012IfConfigDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012MetatypeTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ModifierListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ObjCSelectorB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012OperatorDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012OptionalTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ProtocolDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012ReturnClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012SequenceExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012SuperRefExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012TuplePatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012VariableDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA012VersionTupleB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013AccessorBlockB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013AsTypePatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013AttributeListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013CatchItemListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013CodeBlockItemB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013ExtensionDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013InheritedTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013IsTypePatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013ObjcNamePieceB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013PoundFileExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013PoundLineExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013StringSegmentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013SubscriptDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013SubscriptExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA013TypealiasDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014AssignmentExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014AttributedTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014DictionaryExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014DictionaryTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014ExpressionStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014IdentifierExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014IdentifierListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014IfConfigClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014MemberDeclListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014NilLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014PatternBindingB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014PoundErrorDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014SpecializeExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014SwitchCaseListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014TypeAnnotationB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA014UnknownPatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015CatchClauseListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015CompositionTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015CustomAttributeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015DeclarationStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015EnumCaseElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015EnumCasePatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015FallthroughStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015ForcedValueExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015GenericArgumentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015InitializerDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015KeyPathBaseExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015MemberDeclBlockB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015ObjcKeyPathExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015OptionalPatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015ParameterClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015PoundAssertStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015PoundColumnExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015PoundFileIDExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015RepeatWhileStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015SwitchCaseLabelB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA015WildcardPatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016ArrayElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016ClosureParamListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016ClosureSignatureB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016ConditionElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016DeclNameArgumentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016FloatLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016FunctionCallExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016FunctionDeclNameB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016GenericParameterB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016MemberAccessExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016ObjcSelectorExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016PostfixUnaryExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016PoundWarningDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016RegexLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016TupleExprElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA016TupleTypeElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017AccessorParameterB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017AvailabilityEntryB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017CodeBlockItemListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017DeclNameArgumentsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017DeinitializerDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017DictionaryElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017ExpressionPatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017ExpressionSegmentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017FunctionParameterB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017FunctionSignatureB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017IdentifierPatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017InheritedTypeListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017InitializerClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017NonEmptyTokenListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017ObjCSelectorPieceB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017ObjectLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017PoundFilePathExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017PoundFunctionExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017QualifiedDeclNameB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA017StringLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018AssociatedtypeDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018BinaryOperatorExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018BooleanLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018ClosureCaptureItemB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018ElseIfContinuationB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018GenericRequirementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018GenericWhereClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018IfConfigClauseListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018IntegerLiteralExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018MemberDeclListItemB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018PatternBindingListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018PoundDsohandleExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018PrefixOperatorExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA018SwitchDefaultLabelB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019AccessLevelModifierB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019AccessPathComponentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019EnumCaseElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019GenericArgumentListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019PostfixIfConfigExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019PoundSourceLocationB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019PrecedenceGroupDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019SameTypeRequirementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019TargetFunctionEntryB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019TuplePatternElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA019ValueBindingPatternB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020AvailabilityArgumentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020AvailabilitySpecListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020ClassRestrictionTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020ConditionElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020DeclNameArgumentListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020GenericParameterListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020MemberTypeIdentifierB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020OptionalChainingExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020SimpleTypeIdentifierB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020TupleExprElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA020TupleTypeElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021AvailabilityConditionB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021DictionaryElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021DiscardAssignmentExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021EditorPlaceholderExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021FunctionParameterListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021GenericArgumentClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021PrimaryAssociatedTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021StringLiteralSegmentsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021SymbolicReferenceExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021TypeInheritanceClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021TypeInitializerClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA021UnresolvedPatternExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022ClosureCaptureItemListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022CompositionTypeElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022ConformanceRequirementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022DifferentiabilityParamB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022GenericParameterClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022GenericRequirementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA022LabeledSpecializeEntryB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023ClosureCaptureSignatureB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023DifferentiabilityParamsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023PoundSourceLocationArgsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023PrecedenceGroupNameListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023PrecedenceGroupRelationB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023TuplePatternElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA023UnavailabilityConditionB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA024MatchingPatternConditionB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA024OptionalBindingConditionB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA025PrecedenceGroupAssignmentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA025PrimaryAssociatedTypeListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA026CompositionTypeElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA026DifferentiabilityParamListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA026OperatorPrecedenceAndTypesB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA026PrecedenceGroupNameElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA027AvailabilityLabeledArgumentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA027SpecializeAttributeSpecListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA028ImplementsAttributeArgumentsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA028NamedAttributeStringArgumentB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA028PrecedenceGroupAssociativityB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA028PrecedenceGroupAttributeListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA029DifferentiabilityParamsClauseB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA030AvailabilityVersionRestrictionB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA030MultipleTrailingClosureElementB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA031ImplicitlyUnwrappedOptionalTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA032DifferentiableAttributeArgumentsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA034MultipleTrailingClosureElementListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA040DerivativeRegistrationAttributeArgumentsB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA05TokenB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA06AsExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA06DoStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA06IfStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA06IsExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA07TryExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA07UnknownB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA08CaseItemB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA08DeclNameB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA08EnumDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA08ExprListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA08ObjcNameB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA08SomeTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA08TypeExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ArrayExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ArrayTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ArrowExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09AttributeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09AwaitExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09BreakStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09CatchItemB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ClassDeclB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09CodeBlockB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09DeferStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ElseBlockB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ForInStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09GuardStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09InOutExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09ThrowStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09TokenListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09TupleExprB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09TupleTypeB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09WhileStmtB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09YieldListB0VF","s11SwiftSyntax0B7VisitorC9visitPostyyAA09YieldStmtB0VF","s11SwiftSyntax0B8ChildrenV5index5afterAA0bC5IndexVAG_tF","s11SwiftSyntax0B8ChildrenV5index6beforeAA0bC5IndexVAG_tF","s11SwiftSyntax0B8HashablePAAE4hash4intoys6HasherVz_tF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA013ParenthesizedB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA013WithCodeBlockB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA014IdentifiedDeclB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA014WithStatementsB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA017WithTrailingCommaB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA06BracedB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA07LabeledB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA09DeclGroupB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA013ParenthesizedB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA013WithCodeBlockB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA014IdentifiedDeclB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA014WithStatementsB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA017WithTrailingCommaB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA06BracedB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA07LabeledB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA09DeclGroupB0_pmF","s11SwiftSyntax0B8ProtocolPAAE11endLocation9converter19afterTrailingTriviaAA06SourceE0VAA0jE9ConverterC_SbtF","s11SwiftSyntax0B8ProtocolPAAE11sourceRange9converter18afterLeadingTrivia0g8TrailingI0AA06SourceE0VAA0K17LocationConverterC_S2btF","s11SwiftSyntax0B8ProtocolPAAE13startLocation9converter18afterLeadingTriviaAA06SourceE0VAA0jE9ConverterC_SbtF","s11SwiftSyntax0B8ProtocolPAAE13withoutTriviaxyF","s11SwiftSyntax0B8ProtocolPAAE14classification2atAA0B15ClassifiedRangeVSgAA16AbsolutePositionV_tF","s11SwiftSyntax0B8ProtocolPAAE14classification2atAA0B15ClassifiedRangeVSgSi_tF","s11SwiftSyntax0B8ProtocolPAAE15classifications2inAA0B15ClassificationsVAA15ByteSourceRangeV_tF","s11SwiftSyntax0B8ProtocolPAAE17withLeadingTriviayxAA0F0VF","s11SwiftSyntax0B8ProtocolPAAE18withTrailingTriviayxAA0F0VF","s11SwiftSyntax0B8ProtocolPAAE20withoutLeadingTriviaxyF","s11SwiftSyntax0B8ProtocolPAAE21withoutTrailingTriviaxyF","s11SwiftSyntax0B8ProtocolPAAE5write2toyqd__z_ts16TextOutputStreamRd__lF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA010PoundErroreB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA011InitializereB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA012PoundWarningeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA013DeinitializereB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA014AssociatedtypeeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA015PrecedenceGroupeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA019PoundSourceLocationB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA04EnumeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA05ClasseB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA06ImporteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA06StructeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA07UnknowneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08AccessoreB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08EnumCaseeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08FunctioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08IfConfigeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08OperatoreB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08ProtocoleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA08VariableeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA09ExtensioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA09SubscripteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04DeclB0VAA09TypealiaseB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA010AssignmenteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA010DictionaryeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA010IdentifiereB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA010NilLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA010SpecializeeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA011ForcedValueeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA011KeyPathBaseeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA011ObjcKeyPatheB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA011PoundColumneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA012FloatLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA012FunctionCalleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA012MemberAccesseB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA012ObjcSelectoreB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA012PostfixUnaryeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA012RegexLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA013ObjectLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA013PoundFilePatheB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA013PoundFunctioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA013StringLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA014BinaryOperatoreB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA014BooleanLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA014IntegerLiteraleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA014PoundDsohandleeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA014PrefixOperatoreB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA015PostfixIfConfigeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA015PoundFileIDExprB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA016OptionalChainingeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA017DiscardAssignmenteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA017EditorPlaceholdereB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA017SymbolicReferenceeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA017UnresolvedPatterneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA02AseB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA02IseB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA03TryeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA04TypeeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA05ArrayeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA05ArroweB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA05AwaiteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA05InOuteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA05TupleeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA07ClosureeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA07KeyPatheB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA07TernaryeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA07UnknowneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA08SequenceeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA08SuperRefeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA09PoundFileeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA09PoundLineeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04ExprB0VAA09SubscripteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA010ExpressioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA011DeclarationeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA011FallthrougheB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA011PoundAsserteB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA011RepeatWhileeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA02DoeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA02IfeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05BreakeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05DefereB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05ForIneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05GuardeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05ThroweB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05WhileeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA05YieldeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA06ReturneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA06SwitcheB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA07UnknowneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04StmtB0VAA08ContinueeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA010AttributedeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA010DictionaryeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA011CompositioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA016ClassRestrictioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA027ImplicitlyUnwrappedOptionaleB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA04SomeeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA05ArrayeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA05TupleeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA06Membere10IdentifierB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA06Simplee10IdentifierB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA07UnknowneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA08FunctioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA08MetatypeeB0VF","s11SwiftSyntax0B8RewriterC5visityAA04TypeB0VAA08OptionaleB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA010ExpressioneB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA010IdentifiereB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA012ValueBindingeB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA05TupleeB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA06AsTypeeB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA06IsTypeeB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA07UnknowneB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA08EnumCaseeB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA08OptionaleB0VF","s11SwiftSyntax0B8RewriterC5visityAA07PatternB0VAA08WildcardeB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA010AccessPathB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA010SourceFileB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA010SwitchCaseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA011CatchClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA011WhereClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012AccessorListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012ArrayElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012CaseItemListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012ClosureParamB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012DeclModifierB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012ModifierListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012ObjCSelectorB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012ReturnClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA012VersionTupleB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013AccessorBlockB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013AttributeListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013CatchItemListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013CodeBlockItemB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013InheritedTypeB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013ObjcNamePieceB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA013StringSegmentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA014IdentifierListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA014IfConfigClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA014MemberDeclListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA014PatternBindingB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA014SwitchCaseListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA014TypeAnnotationB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015CatchClauseListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015CustomAttributeB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015EnumCaseElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015GenericArgumentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015MemberDeclBlockB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015ParameterClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA015SwitchCaseLabelB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016ArrayElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016ClosureParamListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016ClosureSignatureB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016ConditionElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016DeclNameArgumentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016FunctionDeclNameB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016GenericParameterB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016TupleExprElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA016TupleTypeElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017AccessorParameterB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017AvailabilityEntryB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017CodeBlockItemListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017DeclNameArgumentsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017DictionaryElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017ExpressionSegmentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017FunctionParameterB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017FunctionSignatureB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017InheritedTypeListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017InitializerClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017NonEmptyTokenListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017ObjCSelectorPieceB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA017QualifiedDeclNameB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018ClosureCaptureItemB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018ElseIfContinuationB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018GenericRequirementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018GenericWhereClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018IfConfigClauseListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018MemberDeclListItemB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018PatternBindingListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA018SwitchDefaultLabelB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019AccessLevelModifierB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019AccessPathComponentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019EnumCaseElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019GenericArgumentListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019SameTypeRequirementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019TargetFunctionEntryB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA019TuplePatternElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020AvailabilityArgumentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020AvailabilitySpecListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020ConditionElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020DeclNameArgumentListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020GenericParameterListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020TupleExprElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA020TupleTypeElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021AvailabilityConditionB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021DictionaryElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021FunctionParameterListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021GenericArgumentClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021PrimaryAssociatedTypeB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021StringLiteralSegmentsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021TypeInheritanceClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA021TypeInitializerClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022ClosureCaptureItemListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022CompositionTypeElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022ConformanceRequirementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022DifferentiabilityParamB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022GenericParameterClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022GenericRequirementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA022LabeledSpecializeEntryB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023ClosureCaptureSignatureB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023DifferentiabilityParamsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023PoundSourceLocationArgsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023PrecedenceGroupNameListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023PrecedenceGroupRelationB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023TuplePatternElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA023UnavailabilityConditionB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA024MatchingPatternConditionB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA024OptionalBindingConditionB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA025PrecedenceGroupAssignmentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA025PrimaryAssociatedTypeListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA026CompositionTypeElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA026DifferentiabilityParamListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA026OperatorPrecedenceAndTypesB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA026PrecedenceGroupNameElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA027AvailabilityLabeledArgumentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA027SpecializeAttributeSpecListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA028ImplementsAttributeArgumentsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA028NamedAttributeStringArgumentB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA028PrecedenceGroupAssociativityB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA028PrecedenceGroupAttributeListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA029DifferentiabilityParamsClauseB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA030AvailabilityVersionRestrictionB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA030MultipleTrailingClosureElementB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA032DifferentiableAttributeArgumentsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA034MultipleTrailingClosureElementListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA040DerivativeRegistrationAttributeArgumentsB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA05TokenB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA07UnknownB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA08CaseItemB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA08DeclNameB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA08ExprListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA08ObjcNameB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA09AttributeB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA09CatchItemB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA09CodeBlockB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA09ElseBlockB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA09TokenListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAA09YieldListB0VF","s11SwiftSyntax0B8RewriterC5visityAA0B0VAFF","s11SwiftSyntax0B8RewriterC8visitAnyyAA0B0VSgAFF","s11SwiftSyntax0B8RewriterC8visitPreyyAA0B0VF","s11SwiftSyntax0B8RewriterC9visitPostyyAA0B0VF","s11SwiftSyntax0B8VerifierC8visitAnyyAA0B19VisitorContinueKindOAA0B0VF","s11SwiftSyntax10SourceEditV15intersectsRangeySbAA04BytecF0VF","s11SwiftSyntax10SourceEditV24intersectsOrTouchesRangeySbAA04BytecH0VF","s11SwiftSyntax11TriviaPieceO5write2toyxz_ts16TextOutputStreamRzlF","s11SwiftSyntax13TokenSequenceV12makeIteratorAC0F0VyF","s11SwiftSyntax13TokenSequenceV8IteratorV4nextAA0cB0VSgyF","s11SwiftSyntax13TokenSequenceV8reversedAA08ReversedcD0VyF","s11SwiftSyntax15ByteSourceRangeV10intersectsySbACF","s11SwiftSyntax15ByteSourceRangeV11intersectedyA2CF","s11SwiftSyntax15ByteSourceRangeV19intersectsOrTouchesySbACF","s11SwiftSyntax21ReversedTokenSequenceV12makeIteratorAC0G0VyF","s11SwiftSyntax21ReversedTokenSequenceV8IteratorV4nextAA0dB0VSgyF","s11SwiftSyntax21ReversedTokenSequenceV8reversedAA0dE0VyF","s11SwiftSyntax22IncrementalParseLookupV6lookUp_4kindAA0B4NodeVSgSi_s6UInt16VtF","s11SwiftSyntax23SourceLocationConverterC7isValid4line6columnSbSi_SitF","s11SwiftSyntax23SourceLocationConverterC7isValid8positionSbAA16AbsolutePositionV_tF","s11SwiftSyntax23SourceLocationConverterC8location3forAA0cD0VAA16AbsolutePositionV_tF","s11SwiftSyntax23SourceLocationConverterC8position6ofLine6columnAA16AbsolutePositionVSi_SitF","s11SwiftSyntax34IncrementalParseReusedNodeDelegateP06parsereF05range08previousF0yAA15ByteSourceRangeV_AA0bF0VtF","s11SwiftSyntax35IncrementalParseReusedNodeCollectorC06parsereF05range08previousF0yAA15ByteSourceRangeV_AA0bF0VtF","s11SwiftSyntax6TriviaV5index5afterS2i_tF","s11SwiftSyntax6TriviaV9appendingyAcA0C5PieceOF","s11SwiftSyntax0B0V2eeoiySbAC_ACtFZ","s11SwiftSyntax0B13ChildrenIndexV1loiySbAC_ACtFZ","s11SwiftSyntax0B17ChildrenIndexDataV1loiySbAC_ACtFZ","s11SwiftSyntax0B8HashablePAAE2eeoiySbx_xtFZ","s11SwiftSyntax12SourceLengthV1loiySbAC_ACtFZ","s11SwiftSyntax12SourceLengthV1poiyA2C_ACtFZ","s11SwiftSyntax12SourceLengthV1soiyA2C_ACtFZ","s11SwiftSyntax12SourceLengthV2peoiyyACz_ACtFZ","s11SwiftSyntax12SourceLengthV2seoiyyACz_ACtFZ","s11SwiftSyntax16AbsolutePositionV1loiySbAC_ACtFZ","s11SwiftSyntax16AbsolutePositionV1poiyA2C_AA12SourceLengthVtFZ","s11SwiftSyntax16AbsolutePositionV1soiyA2C_AA12SourceLengthVtFZ","s11SwiftSyntax16AbsolutePositionV2peoiyyACz_AA12SourceLengthVtFZ","s11SwiftSyntax16AbsolutePositionV2seoiyyACz_AA12SourceLengthVtFZ","s11SwiftSyntax9TokenKindO2eeoiySbAC_ACtFZ","s11SwiftSyntax1poiyAA6TriviaVAD_ADtF","s11SwiftSyntax15cNodeLayoutHashSiyF","s11SwiftSyntax010AccessPathB0V5Indexa","s11SwiftSyntax010AccessPathB0V7Elementa","s11SwiftSyntax012AccessorListB0V5Indexa","s11SwiftSyntax012AccessorListB0V7Elementa","s11SwiftSyntax012CaseItemListB0V5Indexa","s11SwiftSyntax012CaseItemListB0V7Elementa","s11SwiftSyntax012ModifierListB0V5Indexa","s11SwiftSyntax012ModifierListB0V7Elementa","s11SwiftSyntax012ObjCSelectorB0V5Indexa","s11SwiftSyntax012ObjCSelectorB0V7Elementa","s11SwiftSyntax013AttributeListB0V5Indexa","s11SwiftSyntax013AttributeListB0V7Elementa","s11SwiftSyntax013CatchItemListB0V5Indexa","s11SwiftSyntax013CatchItemListB0V7Elementa","s11SwiftSyntax014IdentifierListB0V5Indexa","s11SwiftSyntax014IdentifierListB0V7Elementa","s11SwiftSyntax014MemberDeclListB0V5Indexa","s11SwiftSyntax014MemberDeclListB0V7Elementa","s11SwiftSyntax014SwitchCaseListB0V5Indexa","s11SwiftSyntax014SwitchCaseListB0V7Elementa","s11SwiftSyntax015CatchClauseListB0V5Indexa","s11SwiftSyntax015CatchClauseListB0V7Elementa","s11SwiftSyntax016ArrayElementListB0V0D0a","s11SwiftSyntax016ArrayElementListB0V5Indexa","s11SwiftSyntax016ClosureParamListB0V5Indexa","s11SwiftSyntax016ClosureParamListB0V7Elementa","s11SwiftSyntax017CodeBlockItemListB0V5Indexa","s11SwiftSyntax017CodeBlockItemListB0V7Elementa","s11SwiftSyntax017InheritedTypeListB0V5Indexa","s11SwiftSyntax017InheritedTypeListB0V7Elementa","s11SwiftSyntax017NonEmptyTokenListB0V5Indexa","s11SwiftSyntax017NonEmptyTokenListB0V7Elementa","s11SwiftSyntax018IfConfigClauseListB0V5Indexa","s11SwiftSyntax018IfConfigClauseListB0V7Elementa","s11SwiftSyntax018PatternBindingListB0V5Indexa","s11SwiftSyntax018PatternBindingListB0V7Elementa","s11SwiftSyntax019EnumCaseElementListB0V0E0a","s11SwiftSyntax019EnumCaseElementListB0V5Indexa","s11SwiftSyntax019GenericArgumentListB0V5Indexa","s11SwiftSyntax019GenericArgumentListB0V7Elementa","s11SwiftSyntax020AvailabilitySpecListB0V5Indexa","s11SwiftSyntax020AvailabilitySpecListB0V7Elementa","s11SwiftSyntax020ConditionElementListB0V0D0a","s11SwiftSyntax020ConditionElementListB0V5Indexa","s11SwiftSyntax020DeclNameArgumentListB0V5Indexa","s11SwiftSyntax020DeclNameArgumentListB0V7Elementa","s11SwiftSyntax020GenericParameterListB0V5Indexa","s11SwiftSyntax020GenericParameterListB0V7Elementa","s11SwiftSyntax020TupleExprElementListB0V0E0a","s11SwiftSyntax020TupleExprElementListB0V5Indexa","s11SwiftSyntax020TupleTypeElementListB0V0E0a","s11SwiftSyntax020TupleTypeElementListB0V5Indexa","s11SwiftSyntax021DictionaryElementListB0V0D0a","s11SwiftSyntax021DictionaryElementListB0V5Indexa","s11SwiftSyntax021FunctionParameterListB0V5Indexa","s11SwiftSyntax021FunctionParameterListB0V7Elementa","s11SwiftSyntax021StringLiteralSegmentsB0V5Indexa","s11SwiftSyntax021StringLiteralSegmentsB0V7Elementa","s11SwiftSyntax022ClosureCaptureItemListB0V5Indexa","s11SwiftSyntax022ClosureCaptureItemListB0V7Elementa","s11SwiftSyntax022GenericRequirementListB0V5Indexa","s11SwiftSyntax022GenericRequirementListB0V7Elementa","s11SwiftSyntax023PrecedenceGroupNameListB0V5Indexa","s11SwiftSyntax023PrecedenceGroupNameListB0V7Elementa","s11SwiftSyntax023TuplePatternElementListB0V0E0a","s11SwiftSyntax023TuplePatternElementListB0V5Indexa","s11SwiftSyntax025PrimaryAssociatedTypeListB0V5Indexa","s11SwiftSyntax025PrimaryAssociatedTypeListB0V7Elementa","s11SwiftSyntax026CompositionTypeElementListB0V0E0a","s11SwiftSyntax026CompositionTypeElementListB0V5Indexa","s11SwiftSyntax026DifferentiabilityParamListB0V5Indexa","s11SwiftSyntax026DifferentiabilityParamListB0V7Elementa","s11SwiftSyntax027SpecializeAttributeSpecListB0V5Indexa","s11SwiftSyntax027SpecializeAttributeSpecListB0V7Elementa","s11SwiftSyntax028PrecedenceGroupAttributeListB0V5Indexa","s11SwiftSyntax028PrecedenceGroupAttributeListB0V7Elementa","s11SwiftSyntax034MultipleTrailingClosureElementListB0V0F0a","s11SwiftSyntax034MultipleTrailingClosureElementListB0V5Indexa","s11SwiftSyntax08ExprListB0V5Indexa","s11SwiftSyntax08ExprListB0V7Elementa","s11SwiftSyntax08ObjcNameB0V5Indexa","s11SwiftSyntax08ObjcNameB0V7Elementa","s11SwiftSyntax09TokenListB0V5Indexa","s11SwiftSyntax09TokenListB0V7Elementa","s11SwiftSyntax0B8ChildrenV5Indexa","s11SwiftSyntax0B8ChildrenV7Elementa","s11SwiftSyntax11CClientNodea","s11SwiftSyntax11CSyntaxKinda","sSE","sSH","sSH4hash4intoys6HasherVz_tF","sSK","sSK12_RegexParserE10mapOffsetsySny5IndexQzGSi5lower_Si5uppert_tF","sSK12_RegexParserE14flatmapOffsetsySny5IndexQzGSi5lower_Si5uppertSgF","sSK5index5after5IndexQzAD_tF","sSK5index6before5IndexQzAD_tF","sSK8distance4from2toSi5IndexQz_AEtF","sSK9formIndex6beforey0B0Qzz_tF","sSKsE10difference4from2bys20CollectionDifferenceVy7ElementQzGqd___SbAG_AGtXEtSKRd__AFQyd__AGRSlF","sSKsE4last5where7ElementQzSgSbADKXE_tKF","sSKsE4last7ElementQzSgvp","sSKsE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSKsE5index_8offsetBy5IndexQzAD_SitF","sSKsE6suffixy11SubSequenceQzSiF","sSKsE8distance4from2toSi5IndexQz_AEtF","sSKsE8dropLasty11SubSequenceQzSiF","sSKsE8reverseds18ReversedCollectionVyxGyF","sSKsE9formIndex6beforey0B0Qzz_tF","sSKsE9lastIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSKsSQ7ElementRpzrlE10difference4froms20CollectionDifferenceVyABGqd___tSKRd__AAQyd__ABRSlF","sSKsSQ7ElementRpzrlE9lastIndex2of0C0QzSgAB_tF","sSL","sSL1loiySbx_xtFZ","sSLsE1goiySbx_xtFZ","sSLsE2geoiySbx_xtFZ","sSLsE2leoiySbx_xtFZ","sSLsE3zzloiySnyxGx_xtFZ","sSLsE3zzlopys16PartialRangeUpToVyxGxFZ","sSLsE3zzzoPys16PartialRangeFromVyxGxFZ","sSLsE3zzzoiySNyxGx_xtFZ","sSLsE3zzzopys19PartialRangeThroughVyxGxFZ","sSQ","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSS","sST","sST12_RegexParserE3allyS2b7ElementQzXEF","sST12_RegexParserE3anyyS2b7ElementQzXEF","sST12_RegexParserE4noneyS2b7ElementQzXEF","sST12makeIterator0B0QzyF","sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sST7ElementQa","sST8IteratorQa","sSTsE10allSatisfyyS2b7ElementQzKXEKF","sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE10enumerateds18EnumeratedSequenceVyxGyF","sSTsE13elementsEqual_2bySbqd___Sb7ElementQz_ACQyd__tKXEtKSTRd__lF","sSTsE19underestimatedCountSivp","sSTsE25lexicographicallyPrecedes_2bySbqd___Sb7ElementQz_ADtKXEtKSTRd__ACQyd__ADRSlF","sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sSTsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSTsE3max2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE3min2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE4drop5whiles17DropWhileSequenceVyxGSb7ElementQzKXE_tKF","sSTsE4lazys12LazySequenceVyxGvp","sSTsE5first5where7ElementQzSgSbADKXE_tKF","sSTsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSays10ArraySliceVy7ElementQzGGSi_S2bAHKXEtKF","sSTsE6filterySay7ElementQzGSbACKXEKF","sSTsE6prefix5whileSay7ElementQzGSbADKXE_tKF","sSTsE6prefixys14PrefixSequenceVyxGSiF","sSTsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF","sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF","sSTsE6sorted2bySay7ElementQzGSbAD_ADtKXE_tKF","sSTsE6starts4with2bySbqd___Sb7ElementQz_ADQyd__tKXEtKSTRd__lF","sSTsE6suffixySay7ElementQzGSiF","sSTsE7flatMapySay7ElementQyd__Gqd__ABQzKXEKSTRd__lF","sSTsE7flatMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE7forEachyyy7ElementQzKXEKF","sSTsE8contains5whereS2b7ElementQzKXE_tKF","sSTsE8dropLastySay7ElementQzGSiF","sSTsE8reversedSay7ElementQzGyF","sSTsE8shuffled5usingSay7ElementQzGqd__z_tSGRd__lF","sSTsE8shuffledSay7ElementQzGyF","sSTsE9dropFirstys04DropB8SequenceVyxGSiF","sSTsSQ7ElementRpzrlE13elementsEqualySbqd__STRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSays10ArraySliceVyABGGAB_SiSbtF","sSTsSQ7ElementRpzrlE6starts4withSbqd___tSTRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE8containsySbABF","sSY","sSY8rawValuexSg03RawB0Qz_tcfc","sSYsSHRzSH8RawValueSYRpzrlE04hashB0Sivp","sSYsSHRzSH8RawValueSYRpzrlE4hash4intoys6HasherVz_tF","sSb","sSe","sSe4fromxs7Decoder_p_tKcfc","sSi","sSl","sSl10startIndex0B0Qzvp","sSl12_RegexParserE15convertByOffset_2in5IndexQyd__ADQz_qd__tSlRd__lF","sSl12_RegexParserE15convertByOffset_2inSny5IndexQyd__GSnyADQzG_qd__tSlRd__lF","sSl12_RegexParserE5index8atOffset5IndexQzSi_tF","sSl12_RegexParserE5split6around11SubSequenceQz6prefix_A2E6suffixtSny5IndexQzG_tF","sSl12_RegexParserE6offset2ofSi5IndexQz_tF","sSl12_RegexParserE6offset7ofIndexSi0E0Qz_tF","sSl12_RegexParserE7offsets2ofSnySiGSny5IndexQzG_tF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropPrefixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropSuffixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl17_StringProcessingE14trimmingPrefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSl17_StringProcessingSQ7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE14trimmingPrefixy11SubSequenceQzqd__STRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE6ranges2ofSaySny5IndexQzGGqd___tSlRd__ABQyd__ACRSlF","sSl5IndexQa","sSl5countSivp","sSl5index5after5IndexQzAD_tF","sSl8endIndex0B0Qzvp","sSlsE10firstIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSlsE13randomElement0B0QzSgyF","sSlsE13randomElement5using0B0QzSgqd__z_tSGRd__lF","sSlsE19underestimatedCountSivp","sSlsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSlsE4drop5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE5countSivp","sSlsE5first7ElementQzSgvp","sSlsE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSlsE5index_8offsetBy5IndexQzAD_SitF","sSlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF","sSlsE6prefix4upTo11SubSequenceQz5IndexQz_tF","sSlsE6prefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE6prefix7through11SubSequenceQz5IndexQz_tF","sSlsE6prefixy11SubSequenceQzSiF","sSlsE6suffix4from11SubSequenceQz5IndexQz_tF","sSlsE6suffixy11SubSequenceQzSiF","sSlsE7isEmptySbvp","sSlsE8distance4from2toSi5IndexQz_AEtF","sSlsE8dropLasty11SubSequenceQzSiF","sSlsE9dropFirsty11SubSequenceQzSiF","sSlsE9formIndex5aftery0B0Qzz_tF","sSlsE9formIndex_8offsetBy07limitedD0Sb0B0Qzz_SiAEtF","sSlsE9formIndex_8offsetByy0B0Qzz_SitF","sSlsEy11SubSequenceQzqd__cSXRd__5BoundQyd__5IndexRtzluip","sSlsEy11SubSequenceQzys15UnboundedRange_OXEcip","sSlsSIyxG7IndicesRtzrlE7indicesAAvp","sSlsSQ7ElementRpzrlE10firstIndex2of0C0QzSgAB_tF","sSlsSQ7ElementRpzrlE5index2of5IndexQzSgAB_tF","sSlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF","sSlss16IndexingIteratorVyxG0B0RtzrlE04makeB0ACyF","sSlss5SliceVyxG11SubSequenceRtzrlEyACSny5IndexQzGcip","sSly7ElementQz5IndexQzcip","sSt","sSt4next7ElementQzSgyF","sSv","ss16TextOutputStreamP","ss17CustomReflectableP","ss17CustomReflectableP12customMirrors0D0Vvp","ss20TextOutputStreamableP","ss20TextOutputStreamableP5write2toyqd__z_ts0aB6StreamRd__lF","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss23ExpressibleByNilLiteralP","ss23ExpressibleByNilLiteralP03nilD0xyt_tcfc","ss25ExpressibleByArrayLiteralP","ss25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc","ss28CustomDebugStringConvertibleP","ss28CustomDebugStringConvertibleP16debugDescriptionSSvp","ss4Voida","ss5ErrorP","ss5ErrorP10FoundationE20localizedDescriptionSSvp","ss6HasherV","ss6MirrorV","ss6UInt16V","ss7DecoderP","ss8SendableP"],"vertices":[{"p":["ParenthesizedSyntax"],"f":[["protocol",12],[" ",17],["ParenthesizedSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["ParenthesizedSyntax",7]]},{"p":["WithCodeBlockSyntax"],"f":[["protocol",12],[" ",17],["WithCodeBlockSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["WithCodeBlockSyntax",7]]},{"p":["IdentifiedDeclSyntax"],"f":[["protocol",12],[" ",17],["IdentifiedDeclSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["IdentifiedDeclSyntax",7]]},{"p":["WithStatementsSyntax"],"f":[["protocol",12],[" ",17],["WithStatementsSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["WithStatementsSyntax",7]]},{"p":["WithTrailingCommaSyntax"],"f":[["protocol",12],[" ",17],["WithTrailingCommaSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["WithTrailingCommaSyntax",7]]},{"p":["DeclSyntaxProtocol"],"f":[["protocol",12],[" ",17],["DeclSyntaxProtocol",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["DeclSyntaxProtocol",7]],"d":"Protocol to which all `DeclSyntax` nodes conform. Extension point to add\ncommon methods to all `DeclSyntax` nodes.\nDO NOT CONFORM TO THIS PROTOCOL YOURSELF!"},{"p":["ExprSyntaxProtocol"],"f":[["protocol",12],[" ",17],["ExprSyntaxProtocol",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["ExprSyntaxProtocol",7]],"d":"Protocol to which all `ExprSyntax` nodes conform. Extension point to add\ncommon methods to all `ExprSyntax` nodes.\nDO NOT CONFORM TO THIS PROTOCOL YOURSELF!"},{"p":["StmtSyntaxProtocol"],"f":[["protocol",12],[" ",17],["StmtSyntaxProtocol",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["StmtSyntaxProtocol",7]],"d":"Protocol to which all `StmtSyntax` nodes conform. Extension point to add\ncommon methods to all `StmtSyntax` nodes.\nDO NOT CONFORM TO THIS PROTOCOL YOURSELF!"},{"p":["TypeSyntaxProtocol"],"f":[["protocol",12],[" ",17],["TypeSyntaxProtocol",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["TypeSyntaxProtocol",7]],"d":"Protocol to which all `TypeSyntax` nodes conform. Extension point to add\ncommon methods to all `TypeSyntax` nodes.\nDO NOT CONFORM TO THIS PROTOCOL YOURSELF!"},{"p":["BracedSyntax"],"f":[["protocol",12],[" ",17],["BracedSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["BracedSyntax",7]]},{"p":["LabeledSyntax"],"f":[["protocol",12],[" ",17],["LabeledSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["LabeledSyntax",7]]},{"p":["PatternSyntaxProtocol"],"f":[["protocol",12],[" ",17],["PatternSyntaxProtocol",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["PatternSyntaxProtocol",7]],"d":"Protocol to which all `PatternSyntax` nodes conform. Extension point to add\ncommon methods to all `PatternSyntax` nodes.\nDO NOT CONFORM TO THIS PROTOCOL YOURSELF!"},{"p":["DeclGroupSyntax"],"f":[["protocol",12],[" ",17],["DeclGroupSyntax",7],[" : ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["DeclGroupSyntax",7]]},{"p":["SyntaxCollection"],"f":[["protocol",12],[" ",17],["SyntaxCollection",7],[" : ",17],["Sequence",18,7656],[", ",17],["SyntaxProtocol",18,15]],"s":[["protocol",12],[" ",17],["SyntaxCollection",7]]},{"p":["SyntaxHashable"],"f":[["protocol",12],[" ",17],["SyntaxHashable",7],[" : ",17],["Hashable",18,7620]],"s":[["protocol",12],[" ",17],["SyntaxHashable",7]],"d":"Protocol that provides a common Hashable implementation for all syntax nodes"},{"p":["SyntaxProtocol"],"f":[["protocol",12],[" ",17],["SyntaxProtocol",7],[" : ",17],["CustomDebugStringConvertible",18,7774],[", ",17],["CustomStringConvertible",18,7767],[", ",17],["TextOutputStreamable",18,7765]],"s":[["protocol",12],[" ",17],["SyntaxProtocol",7]],"d":"Provide common functionality for specialized syntax nodes. Extend this\nprotocol to provide common functionality for all syntax nodes.\nDO NOT CONFORM TO THIS PROTOCOL YOURSELF!"},{"p":["IncrementalParseReusedNodeDelegate"],"f":[["protocol",12],[" ",17],["IncrementalParseReusedNodeDelegate",7]],"s":[["protocol",12],[" ",17],["IncrementalParseReusedNodeDelegate",7]],"d":"Accepts the re-used `Syntax` nodes that `IncrementalParseTransition`\ndetermined they should be re-used for a parse invocation.\n\nThe client can use this information to potentially avoid unnecessary work\nfor regions of the source that have not changed.\n\nThis is also used for testing purposes to ensure incremental reparsing\nworked as expected."},{"p":["SyntaxVerifierError"],"f":[["enum",12],[" ",17],["SyntaxVerifierError",7]],"s":[["enum",12],[" ",17],["SyntaxVerifierError",7]]},{"p":["SyntaxClassification"],"f":[["enum",12],[" ",17],["SyntaxClassification",7]],"s":[["enum",12],[" ",17],["SyntaxClassification",7]]},{"p":["SyntaxVisitorContinueKind"],"f":[["enum",12],[" ",17],["SyntaxVisitorContinueKind",7]],"s":[["enum",12],[" ",17],["SyntaxVisitorContinueKind",7]],"d":"The enum describes how the SyntaxVistor should continue after visiting\nthe current node."},{"p":["SyntaxEnum"],"f":[["enum",12],[" ",17],["SyntaxEnum",7]],"s":[["enum",12],[" ",17],["SyntaxEnum",7]],"d":"Enum to exhaustively switch over all different syntax nodes."},{"p":["SyntaxFactory"],"f":[["enum",12],[" ",17],["SyntaxFactory",7]],"s":[["enum",12],[" ",17],["SyntaxFactory",7]]},{"p":["TriviaPiece"],"f":[["enum",12],[" ",17],["TriviaPiece",7]],"s":[["enum",12],[" ",17],["TriviaPiece",7]],"d":"A contiguous stretch of a single kind of trivia. The constituent part of\na `Trivia` collection.\n\nFor example, four spaces would be represented by\n`.spaces(4)`\n\nIn general, you should deal with the actual Trivia collection instead\nof individual pieces whenever possible."},{"p":["SourcePresence"],"f":[["enum",12],[" ",17],["SourcePresence",7]],"s":[["enum",12],[" ",17],["SourcePresence",7]],"d":"An indicator of whether a Syntax node was found or written in the source.\n\nA `missing` node does not mean, necessarily, that the source item is\nconsidered \"implicit\", but rather that it was not found in the source."},{"p":["TokenKind"],"f":[["enum",12],[" ",17],["TokenKind",7]],"s":[["enum",12],[" ",17],["TokenKind",7]],"d":"Enumerates the kinds of tokens in the Swift language."},{"p":["AccessPathSyntax"],"f":[["struct",12],[" ",17],["AccessPathSyntax",7]],"s":[["struct",12],[" ",17],["AccessPathSyntax",7]],"d":"`AccessPathSyntax` represents a collection of one or more\n`AccessPathComponentSyntax` nodes. AccessPathSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["AccessPathSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["ImportDeclSyntax"],"f":[["struct",12],[" ",17],["ImportDeclSyntax",7]],"s":[["struct",12],[" ",17],["ImportDeclSyntax",7]]},{"p":["ImportDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["ImportDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ImportDeclSyntaxBuilder",7]]},{"p":["ReturnStmtSyntax"],"f":[["struct",12],[" ",17],["ReturnStmtSyntax",7]],"s":[["struct",12],[" ",17],["ReturnStmtSyntax",7]]},{"p":["ReturnStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["ReturnStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ReturnStmtSyntaxBuilder",7]]},{"p":["SourceFileSyntax"],"f":[["struct",12],[" ",17],["SourceFileSyntax",7]],"s":[["struct",12],[" ",17],["SourceFileSyntax",7]]},{"p":["SourceFileSyntaxBuilder"],"f":[["struct",12],[" ",17],["SourceFileSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SourceFileSyntaxBuilder",7]]},{"p":["StructDeclSyntax"],"f":[["struct",12],[" ",17],["StructDeclSyntax",7]],"s":[["struct",12],[" ",17],["StructDeclSyntax",7]]},{"p":["StructDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["StructDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["StructDeclSyntaxBuilder",7]]},{"p":["SwitchCaseSyntax"],"f":[["struct",12],[" ",17],["SwitchCaseSyntax",7]],"s":[["struct",12],[" ",17],["SwitchCaseSyntax",7]]},{"p":["SwitchCaseSyntaxBuilder"],"f":[["struct",12],[" ",17],["SwitchCaseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SwitchCaseSyntaxBuilder",7]]},{"p":["SwitchStmtSyntax"],"f":[["struct",12],[" ",17],["SwitchStmtSyntax",7]],"s":[["struct",12],[" ",17],["SwitchStmtSyntax",7]]},{"p":["SwitchStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["SwitchStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SwitchStmtSyntaxBuilder",7]]},{"p":["CatchClauseSyntax"],"f":[["struct",12],[" ",17],["CatchClauseSyntax",7]],"s":[["struct",12],[" ",17],["CatchClauseSyntax",7]]},{"p":["CatchClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["CatchClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CatchClauseSyntaxBuilder",7]]},{"p":["ClosureExprSyntax"],"f":[["struct",12],[" ",17],["ClosureExprSyntax",7]],"s":[["struct",12],[" ",17],["ClosureExprSyntax",7]]},{"p":["ClosureExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClosureExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClosureExprSyntaxBuilder",7]]},{"p":["KeyPathExprSyntax"],"f":[["struct",12],[" ",17],["KeyPathExprSyntax",7]],"s":[["struct",12],[" ",17],["KeyPathExprSyntax",7]]},{"p":["KeyPathExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["KeyPathExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["KeyPathExprSyntaxBuilder",7]]},{"p":["TernaryExprSyntax"],"f":[["struct",12],[" ",17],["TernaryExprSyntax",7]],"s":[["struct",12],[" ",17],["TernaryExprSyntax",7]]},{"p":["TernaryExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["TernaryExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TernaryExprSyntaxBuilder",7]]},{"p":["UnknownDeclSyntax"],"f":[["struct",12],[" ",17],["UnknownDeclSyntax",7]],"s":[["struct",12],[" ",17],["UnknownDeclSyntax",7]]},{"p":["UnknownExprSyntax"],"f":[["struct",12],[" ",17],["UnknownExprSyntax",7]],"s":[["struct",12],[" ",17],["UnknownExprSyntax",7]]},{"p":["UnknownStmtSyntax"],"f":[["struct",12],[" ",17],["UnknownStmtSyntax",7]],"s":[["struct",12],[" ",17],["UnknownStmtSyntax",7]]},{"p":["UnknownTypeSyntax"],"f":[["struct",12],[" ",17],["UnknownTypeSyntax",7]],"s":[["struct",12],[" ",17],["UnknownTypeSyntax",7]]},{"p":["WhereClauseSyntax"],"f":[["struct",12],[" ",17],["WhereClauseSyntax",7]],"s":[["struct",12],[" ",17],["WhereClauseSyntax",7]]},{"p":["WhereClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["WhereClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["WhereClauseSyntaxBuilder",7]]},{"p":["AccessorDeclSyntax"],"f":[["struct",12],[" ",17],["AccessorDeclSyntax",7]],"s":[["struct",12],[" ",17],["AccessorDeclSyntax",7]]},{"p":["AccessorDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["AccessorDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AccessorDeclSyntaxBuilder",7]]},{"p":["AccessorListSyntax"],"f":[["struct",12],[" ",17],["AccessorListSyntax",7]],"s":[["struct",12],[" ",17],["AccessorListSyntax",7]],"d":"`AccessorListSyntax` represents a collection of one or more\n`AccessorDeclSyntax` nodes. AccessorListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["AccessorListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["ArrayElementSyntax"],"f":[["struct",12],[" ",17],["ArrayElementSyntax",7]],"s":[["struct",12],[" ",17],["ArrayElementSyntax",7]]},{"p":["ArrayElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["ArrayElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ArrayElementSyntaxBuilder",7]]},{"p":["CaseItemListSyntax"],"f":[["struct",12],[" ",17],["CaseItemListSyntax",7]],"s":[["struct",12],[" ",17],["CaseItemListSyntax",7]],"d":"`CaseItemListSyntax` represents a collection of one or more\n`CaseItemSyntax` nodes. CaseItemListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["CaseItemListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["ClosureParamSyntax"],"f":[["struct",12],[" ",17],["ClosureParamSyntax",7]],"s":[["struct",12],[" ",17],["ClosureParamSyntax",7]]},{"p":["ClosureParamSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClosureParamSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClosureParamSyntaxBuilder",7]]},{"p":["ContinueStmtSyntax"],"f":[["struct",12],[" ",17],["ContinueStmtSyntax",7]],"s":[["struct",12],[" ",17],["ContinueStmtSyntax",7]]},{"p":["ContinueStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["ContinueStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ContinueStmtSyntaxBuilder",7]]},{"p":["DeclModifierSyntax"],"f":[["struct",12],[" ",17],["DeclModifierSyntax",7]],"s":[["struct",12],[" ",17],["DeclModifierSyntax",7]]},{"p":["DeclModifierSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeclModifierSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeclModifierSyntaxBuilder",7]]},{"p":["EnumCaseDeclSyntax"],"f":[["struct",12],[" ",17],["EnumCaseDeclSyntax",7]],"s":[["struct",12],[" ",17],["EnumCaseDeclSyntax",7]],"d":"\nA `case` declaration of a Swift `enum`. It can have 1 or more\n`EnumCaseElement`s inside, each declaring a different case of the\nenum.\n"},{"p":["EnumCaseDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["EnumCaseDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["EnumCaseDeclSyntaxBuilder",7]]},{"p":["FunctionDeclSyntax"],"f":[["struct",12],[" ",17],["FunctionDeclSyntax",7]],"s":[["struct",12],[" ",17],["FunctionDeclSyntax",7]]},{"p":["FunctionDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["FunctionDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FunctionDeclSyntaxBuilder",7]]},{"p":["FunctionTypeSyntax"],"f":[["struct",12],[" ",17],["FunctionTypeSyntax",7]],"s":[["struct",12],[" ",17],["FunctionTypeSyntax",7]]},{"p":["FunctionTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["FunctionTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FunctionTypeSyntaxBuilder",7]]},{"p":["IfConfigDeclSyntax"],"f":[["struct",12],[" ",17],["IfConfigDeclSyntax",7]],"s":[["struct",12],[" ",17],["IfConfigDeclSyntax",7]]},{"p":["IfConfigDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["IfConfigDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IfConfigDeclSyntaxBuilder",7]]},{"p":["MetatypeTypeSyntax"],"f":[["struct",12],[" ",17],["MetatypeTypeSyntax",7]],"s":[["struct",12],[" ",17],["MetatypeTypeSyntax",7]]},{"p":["MetatypeTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["MetatypeTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MetatypeTypeSyntaxBuilder",7]]},{"p":["ModifierListSyntax"],"f":[["struct",12],[" ",17],["ModifierListSyntax",7]],"s":[["struct",12],[" ",17],["ModifierListSyntax",7]],"d":"`ModifierListSyntax` represents a collection of one or more\n`DeclModifierSyntax` nodes. ModifierListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ModifierListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["ObjCSelectorSyntax"],"f":[["struct",12],[" ",17],["ObjCSelectorSyntax",7]],"s":[["struct",12],[" ",17],["ObjCSelectorSyntax",7]],"d":"`ObjCSelectorSyntax` represents a collection of one or more\n`ObjCSelectorPieceSyntax` nodes. ObjCSelectorSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ObjCSelectorSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["OperatorDeclSyntax"],"f":[["struct",12],[" ",17],["OperatorDeclSyntax",7]],"s":[["struct",12],[" ",17],["OperatorDeclSyntax",7]],"d":"A Swift `operator` declaration."},{"p":["OperatorDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["OperatorDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["OperatorDeclSyntaxBuilder",7]]},{"p":["OptionalTypeSyntax"],"f":[["struct",12],[" ",17],["OptionalTypeSyntax",7]],"s":[["struct",12],[" ",17],["OptionalTypeSyntax",7]]},{"p":["OptionalTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["OptionalTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["OptionalTypeSyntaxBuilder",7]]},{"p":["ProtocolDeclSyntax"],"f":[["struct",12],[" ",17],["ProtocolDeclSyntax",7]],"s":[["struct",12],[" ",17],["ProtocolDeclSyntax",7]]},{"p":["ProtocolDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["ProtocolDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ProtocolDeclSyntaxBuilder",7]]},{"p":["ReturnClauseSyntax"],"f":[["struct",12],[" ",17],["ReturnClauseSyntax",7]],"s":[["struct",12],[" ",17],["ReturnClauseSyntax",7]]},{"p":["ReturnClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["ReturnClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ReturnClauseSyntaxBuilder",7]]},{"p":["SequenceExprSyntax"],"f":[["struct",12],[" ",17],["SequenceExprSyntax",7]],"s":[["struct",12],[" ",17],["SequenceExprSyntax",7]]},{"p":["SequenceExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["SequenceExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SequenceExprSyntaxBuilder",7]]},{"p":["SuperRefExprSyntax"],"f":[["struct",12],[" ",17],["SuperRefExprSyntax",7]],"s":[["struct",12],[" ",17],["SuperRefExprSyntax",7]]},{"p":["SuperRefExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["SuperRefExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SuperRefExprSyntaxBuilder",7]]},{"p":["TuplePatternSyntax"],"f":[["struct",12],[" ",17],["TuplePatternSyntax",7]],"s":[["struct",12],[" ",17],["TuplePatternSyntax",7]]},{"p":["TuplePatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["TuplePatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TuplePatternSyntaxBuilder",7]]},{"p":["VariableDeclSyntax"],"f":[["struct",12],[" ",17],["VariableDeclSyntax",7]],"s":[["struct",12],[" ",17],["VariableDeclSyntax",7]]},{"p":["VariableDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["VariableDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["VariableDeclSyntaxBuilder",7]]},{"p":["VersionTupleSyntax"],"f":[["struct",12],[" ",17],["VersionTupleSyntax",7]],"s":[["struct",12],[" ",17],["VersionTupleSyntax",7]],"d":"\nA version number of the form major.minor.patch in which the minor\nand patch part may be ommited.\n"},{"p":["VersionTupleSyntaxBuilder"],"f":[["struct",12],[" ",17],["VersionTupleSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["VersionTupleSyntaxBuilder",7]]},{"p":["AccessorBlockSyntax"],"f":[["struct",12],[" ",17],["AccessorBlockSyntax",7]],"s":[["struct",12],[" ",17],["AccessorBlockSyntax",7]]},{"p":["AccessorBlockSyntaxBuilder"],"f":[["struct",12],[" ",17],["AccessorBlockSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AccessorBlockSyntaxBuilder",7]]},{"p":["AsTypePatternSyntax"],"f":[["struct",12],[" ",17],["AsTypePatternSyntax",7]],"s":[["struct",12],[" ",17],["AsTypePatternSyntax",7]]},{"p":["AsTypePatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["AsTypePatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AsTypePatternSyntaxBuilder",7]]},{"p":["AttributeListSyntax"],"f":[["struct",12],[" ",17],["AttributeListSyntax",7]],"s":[["struct",12],[" ",17],["AttributeListSyntax",7]],"d":"`AttributeListSyntax` represents a collection of one or more\n`Syntax` nodes. AttributeListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["AttributeListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["CatchItemListSyntax"],"f":[["struct",12],[" ",17],["CatchItemListSyntax",7]],"s":[["struct",12],[" ",17],["CatchItemListSyntax",7]],"d":"`CatchItemListSyntax` represents a collection of one or more\n`CatchItemSyntax` nodes. CatchItemListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["CatchItemListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["CodeBlockItemSyntax"],"f":[["struct",12],[" ",17],["CodeBlockItemSyntax",7]],"s":[["struct",12],[" ",17],["CodeBlockItemSyntax",7]],"d":"\nA CodeBlockItem is any Syntax node that appears on its own line inside\na CodeBlock.\n"},{"p":["CodeBlockItemSyntaxBuilder"],"f":[["struct",12],[" ",17],["CodeBlockItemSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CodeBlockItemSyntaxBuilder",7]]},{"p":["ExtensionDeclSyntax"],"f":[["struct",12],[" ",17],["ExtensionDeclSyntax",7]],"s":[["struct",12],[" ",17],["ExtensionDeclSyntax",7]]},{"p":["ExtensionDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["ExtensionDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ExtensionDeclSyntaxBuilder",7]]},{"p":["InheritedTypeSyntax"],"f":[["struct",12],[" ",17],["InheritedTypeSyntax",7]],"s":[["struct",12],[" ",17],["InheritedTypeSyntax",7]]},{"p":["InheritedTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["InheritedTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["InheritedTypeSyntaxBuilder",7]]},{"p":["IsTypePatternSyntax"],"f":[["struct",12],[" ",17],["IsTypePatternSyntax",7]],"s":[["struct",12],[" ",17],["IsTypePatternSyntax",7]]},{"p":["IsTypePatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["IsTypePatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IsTypePatternSyntaxBuilder",7]]},{"p":["ObjcNamePieceSyntax"],"f":[["struct",12],[" ",17],["ObjcNamePieceSyntax",7]],"s":[["struct",12],[" ",17],["ObjcNamePieceSyntax",7]]},{"p":["ObjcNamePieceSyntaxBuilder"],"f":[["struct",12],[" ",17],["ObjcNamePieceSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ObjcNamePieceSyntaxBuilder",7]]},{"p":["PoundFileExprSyntax"],"f":[["struct",12],[" ",17],["PoundFileExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundFileExprSyntax",7]]},{"p":["PoundFileExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundFileExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundFileExprSyntaxBuilder",7]]},{"p":["PoundLineExprSyntax"],"f":[["struct",12],[" ",17],["PoundLineExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundLineExprSyntax",7]]},{"p":["PoundLineExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundLineExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundLineExprSyntaxBuilder",7]]},{"p":["StringSegmentSyntax"],"f":[["struct",12],[" ",17],["StringSegmentSyntax",7]],"s":[["struct",12],[" ",17],["StringSegmentSyntax",7]]},{"p":["StringSegmentSyntaxBuilder"],"f":[["struct",12],[" ",17],["StringSegmentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["StringSegmentSyntaxBuilder",7]]},{"p":["SubscriptDeclSyntax"],"f":[["struct",12],[" ",17],["SubscriptDeclSyntax",7]],"s":[["struct",12],[" ",17],["SubscriptDeclSyntax",7]]},{"p":["SubscriptDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["SubscriptDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SubscriptDeclSyntaxBuilder",7]]},{"p":["SubscriptExprSyntax"],"f":[["struct",12],[" ",17],["SubscriptExprSyntax",7]],"s":[["struct",12],[" ",17],["SubscriptExprSyntax",7]]},{"p":["SubscriptExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["SubscriptExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SubscriptExprSyntaxBuilder",7]]},{"p":["TypealiasDeclSyntax"],"f":[["struct",12],[" ",17],["TypealiasDeclSyntax",7]],"s":[["struct",12],[" ",17],["TypealiasDeclSyntax",7]]},{"p":["TypealiasDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["TypealiasDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TypealiasDeclSyntaxBuilder",7]]},{"p":["AssignmentExprSyntax"],"f":[["struct",12],[" ",17],["AssignmentExprSyntax",7]],"s":[["struct",12],[" ",17],["AssignmentExprSyntax",7]]},{"p":["AssignmentExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["AssignmentExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AssignmentExprSyntaxBuilder",7]]},{"p":["AttributedTypeSyntax"],"f":[["struct",12],[" ",17],["AttributedTypeSyntax",7]],"s":[["struct",12],[" ",17],["AttributedTypeSyntax",7]]},{"p":["AttributedTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["AttributedTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AttributedTypeSyntaxBuilder",7]]},{"p":["DictionaryExprSyntax"],"f":[["struct",12],[" ",17],["DictionaryExprSyntax",7]],"s":[["struct",12],[" ",17],["DictionaryExprSyntax",7]]},{"p":["DictionaryExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["DictionaryExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DictionaryExprSyntaxBuilder",7]]},{"p":["DictionaryTypeSyntax"],"f":[["struct",12],[" ",17],["DictionaryTypeSyntax",7]],"s":[["struct",12],[" ",17],["DictionaryTypeSyntax",7]]},{"p":["DictionaryTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["DictionaryTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DictionaryTypeSyntaxBuilder",7]]},{"p":["ExpressionStmtSyntax"],"f":[["struct",12],[" ",17],["ExpressionStmtSyntax",7]],"s":[["struct",12],[" ",17],["ExpressionStmtSyntax",7]]},{"p":["ExpressionStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["ExpressionStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ExpressionStmtSyntaxBuilder",7]]},{"p":["IdentifierExprSyntax"],"f":[["struct",12],[" ",17],["IdentifierExprSyntax",7]],"s":[["struct",12],[" ",17],["IdentifierExprSyntax",7]]},{"p":["IdentifierExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["IdentifierExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IdentifierExprSyntaxBuilder",7]]},{"p":["IdentifierListSyntax"],"f":[["struct",12],[" ",17],["IdentifierListSyntax",7]],"s":[["struct",12],[" ",17],["IdentifierListSyntax",7]],"d":"`IdentifierListSyntax` represents a collection of one or more\n`TokenSyntax` nodes. IdentifierListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["IdentifierListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["IfConfigClauseSyntax"],"f":[["struct",12],[" ",17],["IfConfigClauseSyntax",7]],"s":[["struct",12],[" ",17],["IfConfigClauseSyntax",7]]},{"p":["IfConfigClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["IfConfigClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IfConfigClauseSyntaxBuilder",7]]},{"p":["MemberDeclListSyntax"],"f":[["struct",12],[" ",17],["MemberDeclListSyntax",7]],"s":[["struct",12],[" ",17],["MemberDeclListSyntax",7]],"d":"`MemberDeclListSyntax` represents a collection of one or more\n`MemberDeclListItemSyntax` nodes. MemberDeclListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["MemberDeclListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["NilLiteralExprSyntax"],"f":[["struct",12],[" ",17],["NilLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["NilLiteralExprSyntax",7]]},{"p":["NilLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["NilLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["NilLiteralExprSyntaxBuilder",7]]},{"p":["PatternBindingSyntax"],"f":[["struct",12],[" ",17],["PatternBindingSyntax",7]],"s":[["struct",12],[" ",17],["PatternBindingSyntax",7]]},{"p":["PatternBindingSyntaxBuilder"],"f":[["struct",12],[" ",17],["PatternBindingSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PatternBindingSyntaxBuilder",7]]},{"p":["PoundErrorDeclSyntax"],"f":[["struct",12],[" ",17],["PoundErrorDeclSyntax",7]],"s":[["struct",12],[" ",17],["PoundErrorDeclSyntax",7]]},{"p":["PoundErrorDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundErrorDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundErrorDeclSyntaxBuilder",7]]},{"p":["SpecializeExprSyntax"],"f":[["struct",12],[" ",17],["SpecializeExprSyntax",7]],"s":[["struct",12],[" ",17],["SpecializeExprSyntax",7]]},{"p":["SpecializeExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["SpecializeExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SpecializeExprSyntaxBuilder",7]]},{"p":["SwitchCaseListSyntax"],"f":[["struct",12],[" ",17],["SwitchCaseListSyntax",7]],"s":[["struct",12],[" ",17],["SwitchCaseListSyntax",7]],"d":"`SwitchCaseListSyntax` represents a collection of one or more\n`Syntax` nodes. SwitchCaseListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["SwitchCaseListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["TypeAnnotationSyntax"],"f":[["struct",12],[" ",17],["TypeAnnotationSyntax",7]],"s":[["struct",12],[" ",17],["TypeAnnotationSyntax",7]]},{"p":["TypeAnnotationSyntaxBuilder"],"f":[["struct",12],[" ",17],["TypeAnnotationSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TypeAnnotationSyntaxBuilder",7]]},{"p":["UnknownPatternSyntax"],"f":[["struct",12],[" ",17],["UnknownPatternSyntax",7]],"s":[["struct",12],[" ",17],["UnknownPatternSyntax",7]]},{"p":["CatchClauseListSyntax"],"f":[["struct",12],[" ",17],["CatchClauseListSyntax",7]],"s":[["struct",12],[" ",17],["CatchClauseListSyntax",7]],"d":"`CatchClauseListSyntax` represents a collection of one or more\n`CatchClauseSyntax` nodes. CatchClauseListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["CatchClauseListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["CompositionTypeSyntax"],"f":[["struct",12],[" ",17],["CompositionTypeSyntax",7]],"s":[["struct",12],[" ",17],["CompositionTypeSyntax",7]]},{"p":["CompositionTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["CompositionTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CompositionTypeSyntaxBuilder",7]]},{"p":["CustomAttributeSyntax"],"f":[["struct",12],[" ",17],["CustomAttributeSyntax",7]],"s":[["struct",12],[" ",17],["CustomAttributeSyntax",7]],"d":"\nA custom `@` attribute.\n"},{"p":["CustomAttributeSyntaxBuilder"],"f":[["struct",12],[" ",17],["CustomAttributeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CustomAttributeSyntaxBuilder",7]]},{"p":["DeclarationStmtSyntax"],"f":[["struct",12],[" ",17],["DeclarationStmtSyntax",7]],"s":[["struct",12],[" ",17],["DeclarationStmtSyntax",7]]},{"p":["DeclarationStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeclarationStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeclarationStmtSyntaxBuilder",7]]},{"p":["EnumCaseElementSyntax"],"f":[["struct",12],[" ",17],["EnumCaseElementSyntax",7]],"s":[["struct",12],[" ",17],["EnumCaseElementSyntax",7]],"d":"\nAn element of an enum case, containing the name of the case and,\noptionally, either associated values or an assignment to a raw value.\n"},{"p":["EnumCaseElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["EnumCaseElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["EnumCaseElementSyntaxBuilder",7]]},{"p":["EnumCasePatternSyntax"],"f":[["struct",12],[" ",17],["EnumCasePatternSyntax",7]],"s":[["struct",12],[" ",17],["EnumCasePatternSyntax",7]]},{"p":["EnumCasePatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["EnumCasePatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["EnumCasePatternSyntaxBuilder",7]]},{"p":["FallthroughStmtSyntax"],"f":[["struct",12],[" ",17],["FallthroughStmtSyntax",7]],"s":[["struct",12],[" ",17],["FallthroughStmtSyntax",7]]},{"p":["FallthroughStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["FallthroughStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FallthroughStmtSyntaxBuilder",7]]},{"p":["ForcedValueExprSyntax"],"f":[["struct",12],[" ",17],["ForcedValueExprSyntax",7]],"s":[["struct",12],[" ",17],["ForcedValueExprSyntax",7]]},{"p":["ForcedValueExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ForcedValueExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ForcedValueExprSyntaxBuilder",7]]},{"p":["GenericArgumentSyntax"],"f":[["struct",12],[" ",17],["GenericArgumentSyntax",7]],"s":[["struct",12],[" ",17],["GenericArgumentSyntax",7]]},{"p":["GenericArgumentSyntaxBuilder"],"f":[["struct",12],[" ",17],["GenericArgumentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GenericArgumentSyntaxBuilder",7]]},{"p":["InitializerDeclSyntax"],"f":[["struct",12],[" ",17],["InitializerDeclSyntax",7]],"s":[["struct",12],[" ",17],["InitializerDeclSyntax",7]]},{"p":["InitializerDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["InitializerDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["InitializerDeclSyntaxBuilder",7]]},{"p":["KeyPathBaseExprSyntax"],"f":[["struct",12],[" ",17],["KeyPathBaseExprSyntax",7]],"s":[["struct",12],[" ",17],["KeyPathBaseExprSyntax",7]]},{"p":["KeyPathBaseExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["KeyPathBaseExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["KeyPathBaseExprSyntaxBuilder",7]]},{"p":["MemberDeclBlockSyntax"],"f":[["struct",12],[" ",17],["MemberDeclBlockSyntax",7]],"s":[["struct",12],[" ",17],["MemberDeclBlockSyntax",7]]},{"p":["MemberDeclBlockSyntaxBuilder"],"f":[["struct",12],[" ",17],["MemberDeclBlockSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MemberDeclBlockSyntaxBuilder",7]]},{"p":["ObjcKeyPathExprSyntax"],"f":[["struct",12],[" ",17],["ObjcKeyPathExprSyntax",7]],"s":[["struct",12],[" ",17],["ObjcKeyPathExprSyntax",7]]},{"p":["ObjcKeyPathExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ObjcKeyPathExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ObjcKeyPathExprSyntaxBuilder",7]]},{"p":["OptionalPatternSyntax"],"f":[["struct",12],[" ",17],["OptionalPatternSyntax",7]],"s":[["struct",12],[" ",17],["OptionalPatternSyntax",7]]},{"p":["OptionalPatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["OptionalPatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["OptionalPatternSyntaxBuilder",7]]},{"p":["ParameterClauseSyntax"],"f":[["struct",12],[" ",17],["ParameterClauseSyntax",7]],"s":[["struct",12],[" ",17],["ParameterClauseSyntax",7]]},{"p":["ParameterClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["ParameterClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ParameterClauseSyntaxBuilder",7]]},{"p":["PoundAssertStmtSyntax"],"f":[["struct",12],[" ",17],["PoundAssertStmtSyntax",7]],"s":[["struct",12],[" ",17],["PoundAssertStmtSyntax",7]]},{"p":["PoundAssertStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundAssertStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundAssertStmtSyntaxBuilder",7]]},{"p":["PoundColumnExprSyntax"],"f":[["struct",12],[" ",17],["PoundColumnExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundColumnExprSyntax",7]]},{"p":["PoundColumnExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundColumnExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundColumnExprSyntaxBuilder",7]]},{"p":["PoundFileIDExprSyntax"],"f":[["struct",12],[" ",17],["PoundFileIDExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundFileIDExprSyntax",7]]},{"p":["PoundFileIDExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundFileIDExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundFileIDExprSyntaxBuilder",7]]},{"p":["RepeatWhileStmtSyntax"],"f":[["struct",12],[" ",17],["RepeatWhileStmtSyntax",7]],"s":[["struct",12],[" ",17],["RepeatWhileStmtSyntax",7]]},{"p":["RepeatWhileStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["RepeatWhileStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["RepeatWhileStmtSyntaxBuilder",7]]},{"p":["SwitchCaseLabelSyntax"],"f":[["struct",12],[" ",17],["SwitchCaseLabelSyntax",7]],"s":[["struct",12],[" ",17],["SwitchCaseLabelSyntax",7]]},{"p":["SwitchCaseLabelSyntaxBuilder"],"f":[["struct",12],[" ",17],["SwitchCaseLabelSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SwitchCaseLabelSyntaxBuilder",7]]},{"p":["WildcardPatternSyntax"],"f":[["struct",12],[" ",17],["WildcardPatternSyntax",7]],"s":[["struct",12],[" ",17],["WildcardPatternSyntax",7]]},{"p":["WildcardPatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["WildcardPatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["WildcardPatternSyntaxBuilder",7]]},{"p":["ArrayElementListSyntax"],"f":[["struct",12],[" ",17],["ArrayElementListSyntax",7]],"s":[["struct",12],[" ",17],["ArrayElementListSyntax",7]],"d":"`ArrayElementListSyntax` represents a collection of one or more\n`ArrayElementSyntax` nodes. ArrayElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ArrayElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["ClosureParamListSyntax"],"f":[["struct",12],[" ",17],["ClosureParamListSyntax",7]],"s":[["struct",12],[" ",17],["ClosureParamListSyntax",7]],"d":"`ClosureParamListSyntax` represents a collection of one or more\n`ClosureParamSyntax` nodes. ClosureParamListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ClosureParamListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["ClosureSignatureSyntax"],"f":[["struct",12],[" ",17],["ClosureSignatureSyntax",7]],"s":[["struct",12],[" ",17],["ClosureSignatureSyntax",7]]},{"p":["ClosureSignatureSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClosureSignatureSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClosureSignatureSyntaxBuilder",7]]},{"p":["ConditionElementSyntax"],"f":[["struct",12],[" ",17],["ConditionElementSyntax",7]],"s":[["struct",12],[" ",17],["ConditionElementSyntax",7]]},{"p":["ConditionElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["ConditionElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ConditionElementSyntaxBuilder",7]]},{"p":["DeclNameArgumentSyntax"],"f":[["struct",12],[" ",17],["DeclNameArgumentSyntax",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentSyntax",7]]},{"p":["DeclNameArgumentSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeclNameArgumentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentSyntaxBuilder",7]]},{"p":["FloatLiteralExprSyntax"],"f":[["struct",12],[" ",17],["FloatLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["FloatLiteralExprSyntax",7]]},{"p":["FloatLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["FloatLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FloatLiteralExprSyntaxBuilder",7]]},{"p":["FunctionCallExprSyntax"],"f":[["struct",12],[" ",17],["FunctionCallExprSyntax",7]],"s":[["struct",12],[" ",17],["FunctionCallExprSyntax",7]]},{"p":["FunctionCallExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["FunctionCallExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FunctionCallExprSyntaxBuilder",7]]},{"p":["FunctionDeclNameSyntax"],"f":[["struct",12],[" ",17],["FunctionDeclNameSyntax",7]],"s":[["struct",12],[" ",17],["FunctionDeclNameSyntax",7]],"d":"A function declaration name (e.g. `foo(_:_:)`)."},{"p":["FunctionDeclNameSyntaxBuilder"],"f":[["struct",12],[" ",17],["FunctionDeclNameSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FunctionDeclNameSyntaxBuilder",7]]},{"p":["GenericParameterSyntax"],"f":[["struct",12],[" ",17],["GenericParameterSyntax",7]],"s":[["struct",12],[" ",17],["GenericParameterSyntax",7]]},{"p":["GenericParameterSyntaxBuilder"],"f":[["struct",12],[" ",17],["GenericParameterSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GenericParameterSyntaxBuilder",7]]},{"p":["MemberAccessExprSyntax"],"f":[["struct",12],[" ",17],["MemberAccessExprSyntax",7]],"s":[["struct",12],[" ",17],["MemberAccessExprSyntax",7]]},{"p":["MemberAccessExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["MemberAccessExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MemberAccessExprSyntaxBuilder",7]]},{"p":["ObjcSelectorExprSyntax"],"f":[["struct",12],[" ",17],["ObjcSelectorExprSyntax",7]],"s":[["struct",12],[" ",17],["ObjcSelectorExprSyntax",7]]},{"p":["ObjcSelectorExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ObjcSelectorExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ObjcSelectorExprSyntaxBuilder",7]]},{"p":["PostfixUnaryExprSyntax"],"f":[["struct",12],[" ",17],["PostfixUnaryExprSyntax",7]],"s":[["struct",12],[" ",17],["PostfixUnaryExprSyntax",7]]},{"p":["PostfixUnaryExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PostfixUnaryExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PostfixUnaryExprSyntaxBuilder",7]]},{"p":["PoundWarningDeclSyntax"],"f":[["struct",12],[" ",17],["PoundWarningDeclSyntax",7]],"s":[["struct",12],[" ",17],["PoundWarningDeclSyntax",7]]},{"p":["PoundWarningDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundWarningDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundWarningDeclSyntaxBuilder",7]]},{"p":["RegexLiteralExprSyntax"],"f":[["struct",12],[" ",17],["RegexLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["RegexLiteralExprSyntax",7]]},{"p":["RegexLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["RegexLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["RegexLiteralExprSyntaxBuilder",7]]},{"p":["TupleExprElementSyntax"],"f":[["struct",12],[" ",17],["TupleExprElementSyntax",7]],"s":[["struct",12],[" ",17],["TupleExprElementSyntax",7]]},{"p":["TupleExprElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["TupleExprElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TupleExprElementSyntaxBuilder",7]]},{"p":["TupleTypeElementSyntax"],"f":[["struct",12],[" ",17],["TupleTypeElementSyntax",7]],"s":[["struct",12],[" ",17],["TupleTypeElementSyntax",7]]},{"p":["TupleTypeElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["TupleTypeElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TupleTypeElementSyntaxBuilder",7]]},{"p":["AccessorParameterSyntax"],"f":[["struct",12],[" ",17],["AccessorParameterSyntax",7]],"s":[["struct",12],[" ",17],["AccessorParameterSyntax",7]]},{"p":["AccessorParameterSyntaxBuilder"],"f":[["struct",12],[" ",17],["AccessorParameterSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AccessorParameterSyntaxBuilder",7]]},{"p":["AvailabilityEntrySyntax"],"f":[["struct",12],[" ",17],["AvailabilityEntrySyntax",7]],"s":[["struct",12],[" ",17],["AvailabilityEntrySyntax",7]],"d":"\nThe availability argument for the _specialize attribute\n"},{"p":["AvailabilityEntrySyntaxBuilder"],"f":[["struct",12],[" ",17],["AvailabilityEntrySyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AvailabilityEntrySyntaxBuilder",7]]},{"p":["CodeBlockItemListSyntax"],"f":[["struct",12],[" ",17],["CodeBlockItemListSyntax",7]],"s":[["struct",12],[" ",17],["CodeBlockItemListSyntax",7]],"d":"`CodeBlockItemListSyntax` represents a collection of one or more\n`CodeBlockItemSyntax` nodes. CodeBlockItemListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["CodeBlockItemListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["DeclNameArgumentsSyntax"],"f":[["struct",12],[" ",17],["DeclNameArgumentsSyntax",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentsSyntax",7]]},{"p":["DeclNameArgumentsSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeclNameArgumentsSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentsSyntaxBuilder",7]]},{"p":["DeinitializerDeclSyntax"],"f":[["struct",12],[" ",17],["DeinitializerDeclSyntax",7]],"s":[["struct",12],[" ",17],["DeinitializerDeclSyntax",7]]},{"p":["DeinitializerDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeinitializerDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeinitializerDeclSyntaxBuilder",7]]},{"p":["DictionaryElementSyntax"],"f":[["struct",12],[" ",17],["DictionaryElementSyntax",7]],"s":[["struct",12],[" ",17],["DictionaryElementSyntax",7]]},{"p":["DictionaryElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["DictionaryElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DictionaryElementSyntaxBuilder",7]]},{"p":["ExpressionPatternSyntax"],"f":[["struct",12],[" ",17],["ExpressionPatternSyntax",7]],"s":[["struct",12],[" ",17],["ExpressionPatternSyntax",7]]},{"p":["ExpressionPatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["ExpressionPatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ExpressionPatternSyntaxBuilder",7]]},{"p":["ExpressionSegmentSyntax"],"f":[["struct",12],[" ",17],["ExpressionSegmentSyntax",7]],"s":[["struct",12],[" ",17],["ExpressionSegmentSyntax",7]]},{"p":["ExpressionSegmentSyntaxBuilder"],"f":[["struct",12],[" ",17],["ExpressionSegmentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ExpressionSegmentSyntaxBuilder",7]]},{"p":["FunctionParameterSyntax"],"f":[["struct",12],[" ",17],["FunctionParameterSyntax",7]],"s":[["struct",12],[" ",17],["FunctionParameterSyntax",7]]},{"p":["FunctionParameterSyntaxBuilder"],"f":[["struct",12],[" ",17],["FunctionParameterSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FunctionParameterSyntaxBuilder",7]]},{"p":["FunctionSignatureSyntax"],"f":[["struct",12],[" ",17],["FunctionSignatureSyntax",7]],"s":[["struct",12],[" ",17],["FunctionSignatureSyntax",7]]},{"p":["FunctionSignatureSyntaxBuilder"],"f":[["struct",12],[" ",17],["FunctionSignatureSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["FunctionSignatureSyntaxBuilder",7]]},{"p":["IdentifierPatternSyntax"],"f":[["struct",12],[" ",17],["IdentifierPatternSyntax",7]],"s":[["struct",12],[" ",17],["IdentifierPatternSyntax",7]]},{"p":["IdentifierPatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["IdentifierPatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IdentifierPatternSyntaxBuilder",7]]},{"p":["InheritedTypeListSyntax"],"f":[["struct",12],[" ",17],["InheritedTypeListSyntax",7]],"s":[["struct",12],[" ",17],["InheritedTypeListSyntax",7]],"d":"`InheritedTypeListSyntax` represents a collection of one or more\n`InheritedTypeSyntax` nodes. InheritedTypeListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["InheritedTypeListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["InitializerClauseSyntax"],"f":[["struct",12],[" ",17],["InitializerClauseSyntax",7]],"s":[["struct",12],[" ",17],["InitializerClauseSyntax",7]]},{"p":["InitializerClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["InitializerClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["InitializerClauseSyntaxBuilder",7]]},{"p":["NonEmptyTokenListSyntax"],"f":[["struct",12],[" ",17],["NonEmptyTokenListSyntax",7]],"s":[["struct",12],[" ",17],["NonEmptyTokenListSyntax",7]],"d":"`NonEmptyTokenListSyntax` represents a collection of one or more\n`TokenSyntax` nodes. NonEmptyTokenListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["NonEmptyTokenListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["ObjCSelectorPieceSyntax"],"f":[["struct",12],[" ",17],["ObjCSelectorPieceSyntax",7]],"s":[["struct",12],[" ",17],["ObjCSelectorPieceSyntax",7]],"d":"\nA piece of an Objective-C selector. Either consisiting of just an\nidentifier for a nullary selector, an identifier and a colon for a\nlabeled argument or just a colon for an unlabeled argument\n"},{"p":["ObjCSelectorPieceSyntaxBuilder"],"f":[["struct",12],[" ",17],["ObjCSelectorPieceSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ObjCSelectorPieceSyntaxBuilder",7]]},{"p":["ObjectLiteralExprSyntax"],"f":[["struct",12],[" ",17],["ObjectLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["ObjectLiteralExprSyntax",7]]},{"p":["ObjectLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ObjectLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ObjectLiteralExprSyntaxBuilder",7]]},{"p":["PoundFilePathExprSyntax"],"f":[["struct",12],[" ",17],["PoundFilePathExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundFilePathExprSyntax",7]]},{"p":["PoundFilePathExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundFilePathExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundFilePathExprSyntaxBuilder",7]]},{"p":["PoundFunctionExprSyntax"],"f":[["struct",12],[" ",17],["PoundFunctionExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundFunctionExprSyntax",7]]},{"p":["PoundFunctionExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundFunctionExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundFunctionExprSyntaxBuilder",7]]},{"p":["QualifiedDeclNameSyntax"],"f":[["struct",12],[" ",17],["QualifiedDeclNameSyntax",7]],"s":[["struct",12],[" ",17],["QualifiedDeclNameSyntax",7]],"d":"\nAn optionally qualified function declaration name (e.g. `+(_:_:)`,\n`A.B.C.foo(_:_:)`).\n"},{"p":["QualifiedDeclNameSyntaxBuilder"],"f":[["struct",12],[" ",17],["QualifiedDeclNameSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["QualifiedDeclNameSyntaxBuilder",7]]},{"p":["StringLiteralExprSyntax"],"f":[["struct",12],[" ",17],["StringLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["StringLiteralExprSyntax",7]]},{"p":["StringLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["StringLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["StringLiteralExprSyntaxBuilder",7]]},{"p":["AssociatedtypeDeclSyntax"],"f":[["struct",12],[" ",17],["AssociatedtypeDeclSyntax",7]],"s":[["struct",12],[" ",17],["AssociatedtypeDeclSyntax",7]]},{"p":["AssociatedtypeDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["AssociatedtypeDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AssociatedtypeDeclSyntaxBuilder",7]]},{"p":["BinaryOperatorExprSyntax"],"f":[["struct",12],[" ",17],["BinaryOperatorExprSyntax",7]],"s":[["struct",12],[" ",17],["BinaryOperatorExprSyntax",7]]},{"p":["BinaryOperatorExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["BinaryOperatorExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["BinaryOperatorExprSyntaxBuilder",7]]},{"p":["BooleanLiteralExprSyntax"],"f":[["struct",12],[" ",17],["BooleanLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["BooleanLiteralExprSyntax",7]]},{"p":["BooleanLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["BooleanLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["BooleanLiteralExprSyntaxBuilder",7]]},{"p":["ClosureCaptureItemSyntax"],"f":[["struct",12],[" ",17],["ClosureCaptureItemSyntax",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItemSyntax",7]]},{"p":["ClosureCaptureItemSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClosureCaptureItemSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItemSyntaxBuilder",7]]},{"p":["ElseIfContinuationSyntax"],"f":[["struct",12],[" ",17],["ElseIfContinuationSyntax",7]],"s":[["struct",12],[" ",17],["ElseIfContinuationSyntax",7]]},{"p":["ElseIfContinuationSyntaxBuilder"],"f":[["struct",12],[" ",17],["ElseIfContinuationSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ElseIfContinuationSyntaxBuilder",7]]},{"p":["GenericRequirementSyntax"],"f":[["struct",12],[" ",17],["GenericRequirementSyntax",7]],"s":[["struct",12],[" ",17],["GenericRequirementSyntax",7]]},{"p":["GenericRequirementSyntaxBuilder"],"f":[["struct",12],[" ",17],["GenericRequirementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GenericRequirementSyntaxBuilder",7]]},{"p":["GenericWhereClauseSyntax"],"f":[["struct",12],[" ",17],["GenericWhereClauseSyntax",7]],"s":[["struct",12],[" ",17],["GenericWhereClauseSyntax",7]]},{"p":["GenericWhereClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["GenericWhereClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GenericWhereClauseSyntaxBuilder",7]]},{"p":["IfConfigClauseListSyntax"],"f":[["struct",12],[" ",17],["IfConfigClauseListSyntax",7]],"s":[["struct",12],[" ",17],["IfConfigClauseListSyntax",7]],"d":"`IfConfigClauseListSyntax` represents a collection of one or more\n`IfConfigClauseSyntax` nodes. IfConfigClauseListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["IfConfigClauseListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["IntegerLiteralExprSyntax"],"f":[["struct",12],[" ",17],["IntegerLiteralExprSyntax",7]],"s":[["struct",12],[" ",17],["IntegerLiteralExprSyntax",7]]},{"p":["IntegerLiteralExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["IntegerLiteralExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IntegerLiteralExprSyntaxBuilder",7]]},{"p":["MemberDeclListItemSyntax"],"f":[["struct",12],[" ",17],["MemberDeclListItemSyntax",7]],"s":[["struct",12],[" ",17],["MemberDeclListItemSyntax",7]],"d":"\nA member declaration of a type consisting of a declaration and an\noptional semicolon;\n"},{"p":["MemberDeclListItemSyntaxBuilder"],"f":[["struct",12],[" ",17],["MemberDeclListItemSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MemberDeclListItemSyntaxBuilder",7]]},{"p":["PatternBindingListSyntax"],"f":[["struct",12],[" ",17],["PatternBindingListSyntax",7]],"s":[["struct",12],[" ",17],["PatternBindingListSyntax",7]],"d":"`PatternBindingListSyntax` represents a collection of one or more\n`PatternBindingSyntax` nodes. PatternBindingListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["PatternBindingListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["PoundDsohandleExprSyntax"],"f":[["struct",12],[" ",17],["PoundDsohandleExprSyntax",7]],"s":[["struct",12],[" ",17],["PoundDsohandleExprSyntax",7]]},{"p":["PoundDsohandleExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundDsohandleExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundDsohandleExprSyntaxBuilder",7]]},{"p":["PrefixOperatorExprSyntax"],"f":[["struct",12],[" ",17],["PrefixOperatorExprSyntax",7]],"s":[["struct",12],[" ",17],["PrefixOperatorExprSyntax",7]]},{"p":["PrefixOperatorExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PrefixOperatorExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrefixOperatorExprSyntaxBuilder",7]]},{"p":["SwitchDefaultLabelSyntax"],"f":[["struct",12],[" ",17],["SwitchDefaultLabelSyntax",7]],"s":[["struct",12],[" ",17],["SwitchDefaultLabelSyntax",7]]},{"p":["SwitchDefaultLabelSyntaxBuilder"],"f":[["struct",12],[" ",17],["SwitchDefaultLabelSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SwitchDefaultLabelSyntaxBuilder",7]]},{"p":["AccessLevelModifierSyntax"],"f":[["struct",12],[" ",17],["AccessLevelModifierSyntax",7]],"s":[["struct",12],[" ",17],["AccessLevelModifierSyntax",7]]},{"p":["AccessLevelModifierSyntaxBuilder"],"f":[["struct",12],[" ",17],["AccessLevelModifierSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AccessLevelModifierSyntaxBuilder",7]]},{"p":["AccessPathComponentSyntax"],"f":[["struct",12],[" ",17],["AccessPathComponentSyntax",7]],"s":[["struct",12],[" ",17],["AccessPathComponentSyntax",7]]},{"p":["AccessPathComponentSyntaxBuilder"],"f":[["struct",12],[" ",17],["AccessPathComponentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AccessPathComponentSyntaxBuilder",7]]},{"p":["EnumCaseElementListSyntax"],"f":[["struct",12],[" ",17],["EnumCaseElementListSyntax",7]],"s":[["struct",12],[" ",17],["EnumCaseElementListSyntax",7]],"d":"A collection of 0 or more `EnumCaseElement`s."},{"p":["EnumCaseElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["GenericArgumentListSyntax"],"f":[["struct",12],[" ",17],["GenericArgumentListSyntax",7]],"s":[["struct",12],[" ",17],["GenericArgumentListSyntax",7]],"d":"`GenericArgumentListSyntax` represents a collection of one or more\n`GenericArgumentSyntax` nodes. GenericArgumentListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["GenericArgumentListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["PostfixIfConfigExprSyntax"],"f":[["struct",12],[" ",17],["PostfixIfConfigExprSyntax",7]],"s":[["struct",12],[" ",17],["PostfixIfConfigExprSyntax",7]]},{"p":["PostfixIfConfigExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["PostfixIfConfigExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PostfixIfConfigExprSyntaxBuilder",7]]},{"p":["PoundSourceLocationSyntax"],"f":[["struct",12],[" ",17],["PoundSourceLocationSyntax",7]],"s":[["struct",12],[" ",17],["PoundSourceLocationSyntax",7]]},{"p":["PoundSourceLocationSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundSourceLocationSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundSourceLocationSyntaxBuilder",7]]},{"p":["PrecedenceGroupDeclSyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupDeclSyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupDeclSyntax",7]],"d":"A Swift `precedencegroup` declaration."},{"p":["PrecedenceGroupDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["PrecedenceGroupDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupDeclSyntaxBuilder",7]]},{"p":["SameTypeRequirementSyntax"],"f":[["struct",12],[" ",17],["SameTypeRequirementSyntax",7]],"s":[["struct",12],[" ",17],["SameTypeRequirementSyntax",7]]},{"p":["SameTypeRequirementSyntaxBuilder"],"f":[["struct",12],[" ",17],["SameTypeRequirementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SameTypeRequirementSyntaxBuilder",7]]},{"p":["TargetFunctionEntrySyntax"],"f":[["struct",12],[" ",17],["TargetFunctionEntrySyntax",7]],"s":[["struct",12],[" ",17],["TargetFunctionEntrySyntax",7]],"d":"\nA labeled argument for the `@_specialize` attribute with a function\ndecl value like\n`target: myFunc(_:)`\n"},{"p":["TargetFunctionEntrySyntaxBuilder"],"f":[["struct",12],[" ",17],["TargetFunctionEntrySyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TargetFunctionEntrySyntaxBuilder",7]]},{"p":["TuplePatternElementSyntax"],"f":[["struct",12],[" ",17],["TuplePatternElementSyntax",7]],"s":[["struct",12],[" ",17],["TuplePatternElementSyntax",7]]},{"p":["TuplePatternElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["TuplePatternElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TuplePatternElementSyntaxBuilder",7]]},{"p":["ValueBindingPatternSyntax"],"f":[["struct",12],[" ",17],["ValueBindingPatternSyntax",7]],"s":[["struct",12],[" ",17],["ValueBindingPatternSyntax",7]]},{"p":["ValueBindingPatternSyntaxBuilder"],"f":[["struct",12],[" ",17],["ValueBindingPatternSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ValueBindingPatternSyntaxBuilder",7]]},{"p":["AvailabilityArgumentSyntax"],"f":[["struct",12],[" ",17],["AvailabilityArgumentSyntax",7]],"s":[["struct",12],[" ",17],["AvailabilityArgumentSyntax",7]],"d":"\nA single argument to an `@available` argument like `*`, `iOS 10.1`,\nor `message: \"This has been deprecated\"`.\n"},{"p":["AvailabilityArgumentSyntaxBuilder"],"f":[["struct",12],[" ",17],["AvailabilityArgumentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AvailabilityArgumentSyntaxBuilder",7]]},{"p":["AvailabilitySpecListSyntax"],"f":[["struct",12],[" ",17],["AvailabilitySpecListSyntax",7]],"s":[["struct",12],[" ",17],["AvailabilitySpecListSyntax",7]],"d":"`AvailabilitySpecListSyntax` represents a collection of one or more\n`AvailabilityArgumentSyntax` nodes. AvailabilitySpecListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["AvailabilitySpecListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["ClassRestrictionTypeSyntax"],"f":[["struct",12],[" ",17],["ClassRestrictionTypeSyntax",7]],"s":[["struct",12],[" ",17],["ClassRestrictionTypeSyntax",7]]},{"p":["ClassRestrictionTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClassRestrictionTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClassRestrictionTypeSyntaxBuilder",7]]},{"p":["ConditionElementListSyntax"],"f":[["struct",12],[" ",17],["ConditionElementListSyntax",7]],"s":[["struct",12],[" ",17],["ConditionElementListSyntax",7]],"d":"`ConditionElementListSyntax` represents a collection of one or more\n`ConditionElementSyntax` nodes. ConditionElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ConditionElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["DeclNameArgumentListSyntax"],"f":[["struct",12],[" ",17],["DeclNameArgumentListSyntax",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentListSyntax",7]],"d":"`DeclNameArgumentListSyntax` represents a collection of one or more\n`DeclNameArgumentSyntax` nodes. DeclNameArgumentListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["DeclNameArgumentListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["GenericParameterListSyntax"],"f":[["struct",12],[" ",17],["GenericParameterListSyntax",7]],"s":[["struct",12],[" ",17],["GenericParameterListSyntax",7]],"d":"`GenericParameterListSyntax` represents a collection of one or more\n`GenericParameterSyntax` nodes. GenericParameterListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["GenericParameterListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["MemberTypeIdentifierSyntax"],"f":[["struct",12],[" ",17],["MemberTypeIdentifierSyntax",7]],"s":[["struct",12],[" ",17],["MemberTypeIdentifierSyntax",7]]},{"p":["MemberTypeIdentifierSyntaxBuilder"],"f":[["struct",12],[" ",17],["MemberTypeIdentifierSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MemberTypeIdentifierSyntaxBuilder",7]]},{"p":["OptionalChainingExprSyntax"],"f":[["struct",12],[" ",17],["OptionalChainingExprSyntax",7]],"s":[["struct",12],[" ",17],["OptionalChainingExprSyntax",7]]},{"p":["OptionalChainingExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["OptionalChainingExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["OptionalChainingExprSyntaxBuilder",7]]},{"p":["SimpleTypeIdentifierSyntax"],"f":[["struct",12],[" ",17],["SimpleTypeIdentifierSyntax",7]],"s":[["struct",12],[" ",17],["SimpleTypeIdentifierSyntax",7]]},{"p":["SimpleTypeIdentifierSyntaxBuilder"],"f":[["struct",12],[" ",17],["SimpleTypeIdentifierSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SimpleTypeIdentifierSyntaxBuilder",7]]},{"p":["TupleExprElementListSyntax"],"f":[["struct",12],[" ",17],["TupleExprElementListSyntax",7]],"s":[["struct",12],[" ",17],["TupleExprElementListSyntax",7]],"d":"`TupleExprElementListSyntax` represents a collection of one or more\n`TupleExprElementSyntax` nodes. TupleExprElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["TupleExprElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["TupleTypeElementListSyntax"],"f":[["struct",12],[" ",17],["TupleTypeElementListSyntax",7]],"s":[["struct",12],[" ",17],["TupleTypeElementListSyntax",7]],"d":"`TupleTypeElementListSyntax` represents a collection of one or more\n`TupleTypeElementSyntax` nodes. TupleTypeElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["TupleTypeElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["AvailabilityConditionSyntax"],"f":[["struct",12],[" ",17],["AvailabilityConditionSyntax",7]],"s":[["struct",12],[" ",17],["AvailabilityConditionSyntax",7]]},{"p":["AvailabilityConditionSyntaxBuilder"],"f":[["struct",12],[" ",17],["AvailabilityConditionSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AvailabilityConditionSyntaxBuilder",7]]},{"p":["DictionaryElementListSyntax"],"f":[["struct",12],[" ",17],["DictionaryElementListSyntax",7]],"s":[["struct",12],[" ",17],["DictionaryElementListSyntax",7]],"d":"`DictionaryElementListSyntax` represents a collection of one or more\n`DictionaryElementSyntax` nodes. DictionaryElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["DictionaryElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["DiscardAssignmentExprSyntax"],"f":[["struct",12],[" ",17],["DiscardAssignmentExprSyntax",7]],"s":[["struct",12],[" ",17],["DiscardAssignmentExprSyntax",7]]},{"p":["DiscardAssignmentExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["DiscardAssignmentExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DiscardAssignmentExprSyntaxBuilder",7]]},{"p":["EditorPlaceholderExprSyntax"],"f":[["struct",12],[" ",17],["EditorPlaceholderExprSyntax",7]],"s":[["struct",12],[" ",17],["EditorPlaceholderExprSyntax",7]]},{"p":["EditorPlaceholderExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["EditorPlaceholderExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["EditorPlaceholderExprSyntaxBuilder",7]]},{"p":["FunctionParameterListSyntax"],"f":[["struct",12],[" ",17],["FunctionParameterListSyntax",7]],"s":[["struct",12],[" ",17],["FunctionParameterListSyntax",7]],"d":"`FunctionParameterListSyntax` represents a collection of one or more\n`FunctionParameterSyntax` nodes. FunctionParameterListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["FunctionParameterListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["GenericArgumentClauseSyntax"],"f":[["struct",12],[" ",17],["GenericArgumentClauseSyntax",7]],"s":[["struct",12],[" ",17],["GenericArgumentClauseSyntax",7]]},{"p":["GenericArgumentClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["GenericArgumentClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GenericArgumentClauseSyntaxBuilder",7]]},{"p":["PrimaryAssociatedTypeSyntax"],"f":[["struct",12],[" ",17],["PrimaryAssociatedTypeSyntax",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeSyntax",7]]},{"p":["PrimaryAssociatedTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["PrimaryAssociatedTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeSyntaxBuilder",7]]},{"p":["StringLiteralSegmentsSyntax"],"f":[["struct",12],[" ",17],["StringLiteralSegmentsSyntax",7]],"s":[["struct",12],[" ",17],["StringLiteralSegmentsSyntax",7]],"d":"`StringLiteralSegmentsSyntax` represents a collection of one or more\n`Syntax` nodes. StringLiteralSegmentsSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["StringLiteralSegmentsSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["SymbolicReferenceExprSyntax"],"f":[["struct",12],[" ",17],["SymbolicReferenceExprSyntax",7]],"s":[["struct",12],[" ",17],["SymbolicReferenceExprSyntax",7]]},{"p":["SymbolicReferenceExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["SymbolicReferenceExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SymbolicReferenceExprSyntaxBuilder",7]]},{"p":["TypeInheritanceClauseSyntax"],"f":[["struct",12],[" ",17],["TypeInheritanceClauseSyntax",7]],"s":[["struct",12],[" ",17],["TypeInheritanceClauseSyntax",7]]},{"p":["TypeInheritanceClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["TypeInheritanceClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TypeInheritanceClauseSyntaxBuilder",7]]},{"p":["TypeInitializerClauseSyntax"],"f":[["struct",12],[" ",17],["TypeInitializerClauseSyntax",7]],"s":[["struct",12],[" ",17],["TypeInitializerClauseSyntax",7]]},{"p":["TypeInitializerClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["TypeInitializerClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TypeInitializerClauseSyntaxBuilder",7]]},{"p":["UnresolvedPatternExprSyntax"],"f":[["struct",12],[" ",17],["UnresolvedPatternExprSyntax",7]],"s":[["struct",12],[" ",17],["UnresolvedPatternExprSyntax",7]]},{"p":["UnresolvedPatternExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["UnresolvedPatternExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["UnresolvedPatternExprSyntaxBuilder",7]]},{"p":["ClosureCaptureItemListSyntax"],"f":[["struct",12],[" ",17],["ClosureCaptureItemListSyntax",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItemListSyntax",7]],"d":"`ClosureCaptureItemListSyntax` represents a collection of one or more\n`ClosureCaptureItemSyntax` nodes. ClosureCaptureItemListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ClosureCaptureItemListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["CompositionTypeElementSyntax"],"f":[["struct",12],[" ",17],["CompositionTypeElementSyntax",7]],"s":[["struct",12],[" ",17],["CompositionTypeElementSyntax",7]]},{"p":["CompositionTypeElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["CompositionTypeElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CompositionTypeElementSyntaxBuilder",7]]},{"p":["ConformanceRequirementSyntax"],"f":[["struct",12],[" ",17],["ConformanceRequirementSyntax",7]],"s":[["struct",12],[" ",17],["ConformanceRequirementSyntax",7]]},{"p":["ConformanceRequirementSyntaxBuilder"],"f":[["struct",12],[" ",17],["ConformanceRequirementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ConformanceRequirementSyntaxBuilder",7]]},{"p":["DifferentiabilityParamSyntax"],"f":[["struct",12],[" ",17],["DifferentiabilityParamSyntax",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamSyntax",7]],"d":"\nA differentiability parameter: either the \"self\" identifier, a function\nparameter name, or a function parameter index.\n"},{"p":["DifferentiabilityParamSyntaxBuilder"],"f":[["struct",12],[" ",17],["DifferentiabilityParamSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamSyntaxBuilder",7]]},{"p":["GenericParameterClauseSyntax"],"f":[["struct",12],[" ",17],["GenericParameterClauseSyntax",7]],"s":[["struct",12],[" ",17],["GenericParameterClauseSyntax",7]]},{"p":["GenericParameterClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["GenericParameterClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GenericParameterClauseSyntaxBuilder",7]]},{"p":["GenericRequirementListSyntax"],"f":[["struct",12],[" ",17],["GenericRequirementListSyntax",7]],"s":[["struct",12],[" ",17],["GenericRequirementListSyntax",7]],"d":"`GenericRequirementListSyntax` represents a collection of one or more\n`GenericRequirementSyntax` nodes. GenericRequirementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["GenericRequirementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["LabeledSpecializeEntrySyntax"],"f":[["struct",12],[" ",17],["LabeledSpecializeEntrySyntax",7]],"s":[["struct",12],[" ",17],["LabeledSpecializeEntrySyntax",7]],"d":"\nA labeled argument for the `@_specialize` attribute like\n`exported: true`\n"},{"p":["LabeledSpecializeEntrySyntaxBuilder"],"f":[["struct",12],[" ",17],["LabeledSpecializeEntrySyntaxBuilder",7]],"s":[["struct",12],[" ",17],["LabeledSpecializeEntrySyntaxBuilder",7]]},{"p":["ClosureCaptureSignatureSyntax"],"f":[["struct",12],[" ",17],["ClosureCaptureSignatureSyntax",7]],"s":[["struct",12],[" ",17],["ClosureCaptureSignatureSyntax",7]]},{"p":["ClosureCaptureSignatureSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClosureCaptureSignatureSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClosureCaptureSignatureSyntaxBuilder",7]]},{"p":["DifferentiabilityParamsSyntax"],"f":[["struct",12],[" ",17],["DifferentiabilityParamsSyntax",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamsSyntax",7]],"d":"The differentiability parameters."},{"p":["DifferentiabilityParamsSyntaxBuilder"],"f":[["struct",12],[" ",17],["DifferentiabilityParamsSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamsSyntaxBuilder",7]]},{"p":["PoundSourceLocationArgsSyntax"],"f":[["struct",12],[" ",17],["PoundSourceLocationArgsSyntax",7]],"s":[["struct",12],[" ",17],["PoundSourceLocationArgsSyntax",7]]},{"p":["PoundSourceLocationArgsSyntaxBuilder"],"f":[["struct",12],[" ",17],["PoundSourceLocationArgsSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PoundSourceLocationArgsSyntaxBuilder",7]]},{"p":["PrecedenceGroupNameListSyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupNameListSyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameListSyntax",7]],"d":"`PrecedenceGroupNameListSyntax` represents a collection of one or more\n`PrecedenceGroupNameElementSyntax` nodes. PrecedenceGroupNameListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["PrecedenceGroupNameListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["PrecedenceGroupRelationSyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupRelationSyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupRelationSyntax",7]],"d":"\nSpecify the new precedence group's relation to existing precedence\ngroups.\n"},{"p":["PrecedenceGroupRelationSyntaxBuilder"],"f":[["struct",12],[" ",17],["PrecedenceGroupRelationSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupRelationSyntaxBuilder",7]]},{"p":["TuplePatternElementListSyntax"],"f":[["struct",12],[" ",17],["TuplePatternElementListSyntax",7]],"s":[["struct",12],[" ",17],["TuplePatternElementListSyntax",7]],"d":"`TuplePatternElementListSyntax` represents a collection of one or more\n`TuplePatternElementSyntax` nodes. TuplePatternElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["TuplePatternElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["UnavailabilityConditionSyntax"],"f":[["struct",12],[" ",17],["UnavailabilityConditionSyntax",7]],"s":[["struct",12],[" ",17],["UnavailabilityConditionSyntax",7]]},{"p":["UnavailabilityConditionSyntaxBuilder"],"f":[["struct",12],[" ",17],["UnavailabilityConditionSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["UnavailabilityConditionSyntaxBuilder",7]]},{"p":["MatchingPatternConditionSyntax"],"f":[["struct",12],[" ",17],["MatchingPatternConditionSyntax",7]],"s":[["struct",12],[" ",17],["MatchingPatternConditionSyntax",7]]},{"p":["MatchingPatternConditionSyntaxBuilder"],"f":[["struct",12],[" ",17],["MatchingPatternConditionSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MatchingPatternConditionSyntaxBuilder",7]]},{"p":["OptionalBindingConditionSyntax"],"f":[["struct",12],[" ",17],["OptionalBindingConditionSyntax",7]],"s":[["struct",12],[" ",17],["OptionalBindingConditionSyntax",7]]},{"p":["OptionalBindingConditionSyntaxBuilder"],"f":[["struct",12],[" ",17],["OptionalBindingConditionSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["OptionalBindingConditionSyntaxBuilder",7]]},{"p":["PrecedenceGroupAssignmentSyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssignmentSyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssignmentSyntax",7]],"d":"\nSpecifies the precedence of an operator when used in an operation\nthat includes optional chaining.\n"},{"p":["PrecedenceGroupAssignmentSyntaxBuilder"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssignmentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssignmentSyntaxBuilder",7]]},{"p":["PrimaryAssociatedTypeListSyntax"],"f":[["struct",12],[" ",17],["PrimaryAssociatedTypeListSyntax",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeListSyntax",7]],"d":"`PrimaryAssociatedTypeListSyntax` represents a collection of one or more\n`PrimaryAssociatedTypeSyntax` nodes. PrimaryAssociatedTypeListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["PrimaryAssociatedTypeListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["CompositionTypeElementListSyntax"],"f":[["struct",12],[" ",17],["CompositionTypeElementListSyntax",7]],"s":[["struct",12],[" ",17],["CompositionTypeElementListSyntax",7]],"d":"`CompositionTypeElementListSyntax` represents a collection of one or more\n`CompositionTypeElementSyntax` nodes. CompositionTypeElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["CompositionTypeElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["DifferentiabilityParamListSyntax"],"f":[["struct",12],[" ",17],["DifferentiabilityParamListSyntax",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamListSyntax",7]],"d":"`DifferentiabilityParamListSyntax` represents a collection of one or more\n`DifferentiabilityParamSyntax` nodes. DifferentiabilityParamListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["DifferentiabilityParamListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["OperatorPrecedenceAndTypesSyntax"],"f":[["struct",12],[" ",17],["OperatorPrecedenceAndTypesSyntax",7]],"s":[["struct",12],[" ",17],["OperatorPrecedenceAndTypesSyntax",7]],"d":"\nA clause to specify precedence group in infix operator declarations, and designated types in any operator declaration.\n"},{"p":["OperatorPrecedenceAndTypesSyntaxBuilder"],"f":[["struct",12],[" ",17],["OperatorPrecedenceAndTypesSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["OperatorPrecedenceAndTypesSyntaxBuilder",7]]},{"p":["PrecedenceGroupNameElementSyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupNameElementSyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameElementSyntax",7]]},{"p":["PrecedenceGroupNameElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["PrecedenceGroupNameElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameElementSyntaxBuilder",7]]},{"p":["AvailabilityLabeledArgumentSyntax"],"f":[["struct",12],[" ",17],["AvailabilityLabeledArgumentSyntax",7]],"s":[["struct",12],[" ",17],["AvailabilityLabeledArgumentSyntax",7]],"d":"\nA argument to an `@available` attribute that consists of a label and\na value, e.g. `message: \"This has been deprecated\"`.\n"},{"p":["AvailabilityLabeledArgumentSyntaxBuilder"],"f":[["struct",12],[" ",17],["AvailabilityLabeledArgumentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AvailabilityLabeledArgumentSyntaxBuilder",7]]},{"p":["SpecializeAttributeSpecListSyntax"],"f":[["struct",12],[" ",17],["SpecializeAttributeSpecListSyntax",7]],"s":[["struct",12],[" ",17],["SpecializeAttributeSpecListSyntax",7]],"d":"\nA collection of arguments for the `@_specialize` attribute\n"},{"p":["SpecializeAttributeSpecListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["ImplementsAttributeArgumentsSyntax"],"f":[["struct",12],[" ",17],["ImplementsAttributeArgumentsSyntax",7]],"s":[["struct",12],[" ",17],["ImplementsAttributeArgumentsSyntax",7]],"d":"\nThe arguments for the `@_implements` attribute of the form\n`Type, methodName(arg1Label:arg2Label:)`\n"},{"p":["ImplementsAttributeArgumentsSyntaxBuilder"],"f":[["struct",12],[" ",17],["ImplementsAttributeArgumentsSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ImplementsAttributeArgumentsSyntaxBuilder",7]]},{"p":["NamedAttributeStringArgumentSyntax"],"f":[["struct",12],[" ",17],["NamedAttributeStringArgumentSyntax",7]],"s":[["struct",12],[" ",17],["NamedAttributeStringArgumentSyntax",7]],"d":"\nThe argument for the `@_dynamic_replacement` or `@_private`\nattribute of the form `for: \"function()\"` or `sourceFile:\n\"Src.swift\"`\n"},{"p":["NamedAttributeStringArgumentSyntaxBuilder"],"f":[["struct",12],[" ",17],["NamedAttributeStringArgumentSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["NamedAttributeStringArgumentSyntaxBuilder",7]]},{"p":["PrecedenceGroupAssociativitySyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssociativitySyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssociativitySyntax",7]],"d":"\nSpecifies how a sequence of operators with the same precedence level\nare grouped together in the absence of grouping parentheses.\n"},{"p":["PrecedenceGroupAssociativitySyntaxBuilder"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssociativitySyntaxBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssociativitySyntaxBuilder",7]]},{"p":["PrecedenceGroupAttributeListSyntax"],"f":[["struct",12],[" ",17],["PrecedenceGroupAttributeListSyntax",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAttributeListSyntax",7]],"d":"`PrecedenceGroupAttributeListSyntax` represents a collection of one or more\n`Syntax` nodes. PrecedenceGroupAttributeListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["PrecedenceGroupAttributeListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["DifferentiabilityParamsClauseSyntax"],"f":[["struct",12],[" ",17],["DifferentiabilityParamsClauseSyntax",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamsClauseSyntax",7]],"d":"A clause containing differentiability parameters."},{"p":["DifferentiabilityParamsClauseSyntaxBuilder"],"f":[["struct",12],[" ",17],["DifferentiabilityParamsClauseSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamsClauseSyntaxBuilder",7]]},{"p":["AvailabilityVersionRestrictionSyntax"],"f":[["struct",12],[" ",17],["AvailabilityVersionRestrictionSyntax",7]],"s":[["struct",12],[" ",17],["AvailabilityVersionRestrictionSyntax",7]],"d":"\nAn argument to `@available` that restricts the availability on a\ncertain platform to a version, e.g. `iOS 10` or `swift 3.4`.\n"},{"p":["AvailabilityVersionRestrictionSyntaxBuilder"],"f":[["struct",12],[" ",17],["AvailabilityVersionRestrictionSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AvailabilityVersionRestrictionSyntaxBuilder",7]]},{"p":["MultipleTrailingClosureElementSyntax"],"f":[["struct",12],[" ",17],["MultipleTrailingClosureElementSyntax",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElementSyntax",7]]},{"p":["MultipleTrailingClosureElementSyntaxBuilder"],"f":[["struct",12],[" ",17],["MultipleTrailingClosureElementSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElementSyntaxBuilder",7]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax"],"f":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",7]],"s":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",7]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder",7]]},{"p":["DifferentiableAttributeArgumentsSyntax"],"f":[["struct",12],[" ",17],["DifferentiableAttributeArgumentsSyntax",7]],"s":[["struct",12],[" ",17],["DifferentiableAttributeArgumentsSyntax",7]],"d":"\nThe arguments for the `@differentiable` attribute: an optional\ndifferentiability kind, an optional differentiability parameter clause,\nand an optional 'where' clause.\n"},{"p":["DifferentiableAttributeArgumentsSyntaxBuilder"],"f":[["struct",12],[" ",17],["DifferentiableAttributeArgumentsSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DifferentiableAttributeArgumentsSyntaxBuilder",7]]},{"p":["MultipleTrailingClosureElementListSyntax"],"f":[["struct",12],[" ",17],["MultipleTrailingClosureElementListSyntax",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElementListSyntax",7]],"d":"`MultipleTrailingClosureElementListSyntax` represents a collection of one or more\n`MultipleTrailingClosureElementSyntax` nodes. MultipleTrailingClosureElementListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["MultipleTrailingClosureElementListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["DerivativeRegistrationAttributeArgumentsSyntax"],"f":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArgumentsSyntax",7]],"s":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArgumentsSyntax",7]],"d":"\nThe arguments for the '@derivative(of:)' and '@transpose(of:)'\nattributes: the 'of:' label, the original declaration name, and an\noptional differentiability parameter list.\n"},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder"],"f":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArgumentsSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArgumentsSyntaxBuilder",7]]},{"p":["DeclSyntax"],"f":[["struct",12],[" ",17],["DeclSyntax",7]],"s":[["struct",12],[" ",17],["DeclSyntax",7]]},{"p":["ExprSyntax"],"f":[["struct",12],[" ",17],["ExprSyntax",7]],"s":[["struct",12],[" ",17],["ExprSyntax",7]]},{"p":["StmtSyntax"],"f":[["struct",12],[" ",17],["StmtSyntax",7]],"s":[["struct",12],[" ",17],["StmtSyntax",7]]},{"p":["TypeSyntax"],"f":[["struct",12],[" ",17],["TypeSyntax",7]],"s":[["struct",12],[" ",17],["TypeSyntax",7]]},{"p":["TokenSyntax"],"f":[["struct",12],[" ",17],["TokenSyntax",7]],"s":[["struct",12],[" ",17],["TokenSyntax",7]],"d":"A Syntax node representing a single token."},{"p":["AsExprSyntax"],"f":[["struct",12],[" ",17],["AsExprSyntax",7]],"s":[["struct",12],[" ",17],["AsExprSyntax",7]]},{"p":["AsExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["AsExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AsExprSyntaxBuilder",7]]},{"p":["DoStmtSyntax"],"f":[["struct",12],[" ",17],["DoStmtSyntax",7]],"s":[["struct",12],[" ",17],["DoStmtSyntax",7]]},{"p":["DoStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["DoStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DoStmtSyntaxBuilder",7]]},{"p":["IfStmtSyntax"],"f":[["struct",12],[" ",17],["IfStmtSyntax",7]],"s":[["struct",12],[" ",17],["IfStmtSyntax",7]]},{"p":["IfStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["IfStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IfStmtSyntaxBuilder",7]]},{"p":["IsExprSyntax"],"f":[["struct",12],[" ",17],["IsExprSyntax",7]],"s":[["struct",12],[" ",17],["IsExprSyntax",7]]},{"p":["IsExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["IsExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["IsExprSyntaxBuilder",7]]},{"p":["PatternSyntax"],"f":[["struct",12],[" ",17],["PatternSyntax",7]],"s":[["struct",12],[" ",17],["PatternSyntax",7]]},{"p":["TryExprSyntax"],"f":[["struct",12],[" ",17],["TryExprSyntax",7]],"s":[["struct",12],[" ",17],["TryExprSyntax",7]]},{"p":["TryExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["TryExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TryExprSyntaxBuilder",7]]},{"p":["UnknownSyntax"],"f":[["struct",12],[" ",17],["UnknownSyntax",7]],"s":[["struct",12],[" ",17],["UnknownSyntax",7]],"d":"A wrapper around a raw Syntax layout."},{"p":["CaseItemSyntax"],"f":[["struct",12],[" ",17],["CaseItemSyntax",7]],"s":[["struct",12],[" ",17],["CaseItemSyntax",7]]},{"p":["CaseItemSyntaxBuilder"],"f":[["struct",12],[" ",17],["CaseItemSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CaseItemSyntaxBuilder",7]]},{"p":["DeclNameSyntax"],"f":[["struct",12],[" ",17],["DeclNameSyntax",7]],"s":[["struct",12],[" ",17],["DeclNameSyntax",7]]},{"p":["DeclNameSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeclNameSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeclNameSyntaxBuilder",7]]},{"p":["EnumDeclSyntax"],"f":[["struct",12],[" ",17],["EnumDeclSyntax",7]],"s":[["struct",12],[" ",17],["EnumDeclSyntax",7]],"d":"A Swift `enum` declaration."},{"p":["EnumDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["EnumDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["EnumDeclSyntaxBuilder",7]]},{"p":["ExprListSyntax"],"f":[["struct",12],[" ",17],["ExprListSyntax",7]],"s":[["struct",12],[" ",17],["ExprListSyntax",7]],"d":"\nA list of expressions connected by operators. This list is contained\nby a `SequenceExprSyntax`.\n"},{"p":["ExprListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["ObjcNameSyntax"],"f":[["struct",12],[" ",17],["ObjcNameSyntax",7]],"s":[["struct",12],[" ",17],["ObjcNameSyntax",7]],"d":"`ObjcNameSyntax` represents a collection of one or more\n`ObjcNamePieceSyntax` nodes. ObjcNameSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["ObjcNameSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["SomeTypeSyntax"],"f":[["struct",12],[" ",17],["SomeTypeSyntax",7]],"s":[["struct",12],[" ",17],["SomeTypeSyntax",7]]},{"p":["SomeTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["SomeTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["SomeTypeSyntaxBuilder",7]]},{"p":["TypeExprSyntax"],"f":[["struct",12],[" ",17],["TypeExprSyntax",7]],"s":[["struct",12],[" ",17],["TypeExprSyntax",7]]},{"p":["TypeExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["TypeExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TypeExprSyntaxBuilder",7]]},{"p":["ArrayExprSyntax"],"f":[["struct",12],[" ",17],["ArrayExprSyntax",7]],"s":[["struct",12],[" ",17],["ArrayExprSyntax",7]]},{"p":["ArrayExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ArrayExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ArrayExprSyntaxBuilder",7]]},{"p":["ArrayTypeSyntax"],"f":[["struct",12],[" ",17],["ArrayTypeSyntax",7]],"s":[["struct",12],[" ",17],["ArrayTypeSyntax",7]]},{"p":["ArrayTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["ArrayTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ArrayTypeSyntaxBuilder",7]]},{"p":["ArrowExprSyntax"],"f":[["struct",12],[" ",17],["ArrowExprSyntax",7]],"s":[["struct",12],[" ",17],["ArrowExprSyntax",7]]},{"p":["ArrowExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["ArrowExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ArrowExprSyntaxBuilder",7]]},{"p":["AttributeSyntax"],"f":[["struct",12],[" ",17],["AttributeSyntax",7]],"s":[["struct",12],[" ",17],["AttributeSyntax",7]],"d":"\nAn `@` attribute.\n"},{"p":["AttributeSyntaxBuilder"],"f":[["struct",12],[" ",17],["AttributeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AttributeSyntaxBuilder",7]]},{"p":["AwaitExprSyntax"],"f":[["struct",12],[" ",17],["AwaitExprSyntax",7]],"s":[["struct",12],[" ",17],["AwaitExprSyntax",7]]},{"p":["AwaitExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["AwaitExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["AwaitExprSyntaxBuilder",7]]},{"p":["BreakStmtSyntax"],"f":[["struct",12],[" ",17],["BreakStmtSyntax",7]],"s":[["struct",12],[" ",17],["BreakStmtSyntax",7]]},{"p":["BreakStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["BreakStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["BreakStmtSyntaxBuilder",7]]},{"p":["CatchItemSyntax"],"f":[["struct",12],[" ",17],["CatchItemSyntax",7]],"s":[["struct",12],[" ",17],["CatchItemSyntax",7]]},{"p":["CatchItemSyntaxBuilder"],"f":[["struct",12],[" ",17],["CatchItemSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CatchItemSyntaxBuilder",7]]},{"p":["ClassDeclSyntax"],"f":[["struct",12],[" ",17],["ClassDeclSyntax",7]],"s":[["struct",12],[" ",17],["ClassDeclSyntax",7]]},{"p":["ClassDeclSyntaxBuilder"],"f":[["struct",12],[" ",17],["ClassDeclSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ClassDeclSyntaxBuilder",7]]},{"p":["CodeBlockSyntax"],"f":[["struct",12],[" ",17],["CodeBlockSyntax",7]],"s":[["struct",12],[" ",17],["CodeBlockSyntax",7]]},{"p":["CodeBlockSyntaxBuilder"],"f":[["struct",12],[" ",17],["CodeBlockSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["CodeBlockSyntaxBuilder",7]]},{"p":["DeferStmtSyntax"],"f":[["struct",12],[" ",17],["DeferStmtSyntax",7]],"s":[["struct",12],[" ",17],["DeferStmtSyntax",7]]},{"p":["DeferStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["DeferStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["DeferStmtSyntaxBuilder",7]]},{"p":["ElseBlockSyntax"],"f":[["struct",12],[" ",17],["ElseBlockSyntax",7]],"s":[["struct",12],[" ",17],["ElseBlockSyntax",7]]},{"p":["ElseBlockSyntaxBuilder"],"f":[["struct",12],[" ",17],["ElseBlockSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ElseBlockSyntaxBuilder",7]]},{"p":["ForInStmtSyntax"],"f":[["struct",12],[" ",17],["ForInStmtSyntax",7]],"s":[["struct",12],[" ",17],["ForInStmtSyntax",7]]},{"p":["ForInStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["ForInStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ForInStmtSyntaxBuilder",7]]},{"p":["GuardStmtSyntax"],"f":[["struct",12],[" ",17],["GuardStmtSyntax",7]],"s":[["struct",12],[" ",17],["GuardStmtSyntax",7]]},{"p":["GuardStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["GuardStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["GuardStmtSyntaxBuilder",7]]},{"p":["InOutExprSyntax"],"f":[["struct",12],[" ",17],["InOutExprSyntax",7]],"s":[["struct",12],[" ",17],["InOutExprSyntax",7]]},{"p":["InOutExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["InOutExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["InOutExprSyntaxBuilder",7]]},{"p":["ThrowStmtSyntax"],"f":[["struct",12],[" ",17],["ThrowStmtSyntax",7]],"s":[["struct",12],[" ",17],["ThrowStmtSyntax",7]]},{"p":["ThrowStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["ThrowStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["ThrowStmtSyntaxBuilder",7]]},{"p":["TokenListSyntax"],"f":[["struct",12],[" ",17],["TokenListSyntax",7]],"s":[["struct",12],[" ",17],["TokenListSyntax",7]],"d":"`TokenListSyntax` represents a collection of one or more\n`TokenSyntax` nodes. TokenListSyntax behaves\nas a regular Swift collection, and has accessors that return new\nversions of the collection with different children."},{"p":["TokenListSyntax","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["TupleExprSyntax"],"f":[["struct",12],[" ",17],["TupleExprSyntax",7]],"s":[["struct",12],[" ",17],["TupleExprSyntax",7]]},{"p":["TupleExprSyntaxBuilder"],"f":[["struct",12],[" ",17],["TupleExprSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TupleExprSyntaxBuilder",7]]},{"p":["TupleTypeSyntax"],"f":[["struct",12],[" ",17],["TupleTypeSyntax",7]],"s":[["struct",12],[" ",17],["TupleTypeSyntax",7]]},{"p":["TupleTypeSyntaxBuilder"],"f":[["struct",12],[" ",17],["TupleTypeSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["TupleTypeSyntaxBuilder",7]]},{"p":["WhileStmtSyntax"],"f":[["struct",12],[" ",17],["WhileStmtSyntax",7]],"s":[["struct",12],[" ",17],["WhileStmtSyntax",7]]},{"p":["WhileStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["WhileStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["WhileStmtSyntaxBuilder",7]]},{"p":["YieldListSyntax"],"f":[["struct",12],[" ",17],["YieldListSyntax",7]],"s":[["struct",12],[" ",17],["YieldListSyntax",7]]},{"p":["YieldListSyntaxBuilder"],"f":[["struct",12],[" ",17],["YieldListSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["YieldListSyntaxBuilder",7]]},{"p":["YieldStmtSyntax"],"f":[["struct",12],[" ",17],["YieldStmtSyntax",7]],"s":[["struct",12],[" ",17],["YieldStmtSyntax",7]]},{"p":["YieldStmtSyntaxBuilder"],"f":[["struct",12],[" ",17],["YieldStmtSyntaxBuilder",7]],"s":[["struct",12],[" ",17],["YieldStmtSyntaxBuilder",7]]},{"p":["Syntax"],"f":[["struct",12],[" ",17],["Syntax",7]],"s":[["struct",12],[" ",17],["Syntax",7]],"d":"A Syntax node represents a tree of nodes with tokens at the leaves.\nEach node has accessors for its known children, and allows efficient\niteration over the children through its `children` property."},{"p":["SyntaxIdentifier"],"f":[["struct",12],[" ",17],["SyntaxIdentifier",7]],"s":[["struct",12],[" ",17],["SyntaxIdentifier",7]],"d":"Provides a stable and unique identity for `Syntax` nodes."},{"p":["SyntaxChildrenIndex"],"f":[["struct",12],[" ",17],["SyntaxChildrenIndex",7]],"s":[["struct",12],[" ",17],["SyntaxChildrenIndex",7]],"d":"An index in a syntax children collection."},{"p":["SyntaxClassifications"],"f":[["struct",12],[" ",17],["SyntaxClassifications",7]],"s":[["struct",12],[" ",17],["SyntaxClassifications",7]],"d":"Provides a sequence of `SyntaxClassifiedRange`s for a syntax node."},{"p":["SyntaxClassifications","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["SyntaxClassifiedRange"],"f":[["struct",12],[" ",17],["SyntaxClassifiedRange",7]],"s":[["struct",12],[" ",17],["SyntaxClassifiedRange",7]],"d":"Represents a source range that is associated with a syntax classification."},{"p":["SyntaxChildrenIndexData"],"f":[["struct",12],[" ",17],["SyntaxChildrenIndexData",7]],"s":[["struct",12],[" ",17],["SyntaxChildrenIndexData",7]],"d":"The data for an index in a syntax children collection that is not the end\nindex. See `SyntaxChildrenIndex` for the representation of the end index."},{"p":["SyntaxNode"],"f":[["struct",12],[" ",17],["SyntaxNode",7]],"s":[["struct",12],[" ",17],["SyntaxNode",7]],"d":"Represents a node from the syntax tree.\n\nThis is a more efficient representation than `Syntax` because it avoids casts\nto `Syntax` for representing the parent hierarchy.\nIt provides generic information, like the node's position, range, and\na unique `id`, while still allowing getting the associated `Syntax`\nobject if necessary.\n\n`SyntaxParser` uses `SyntaxNode` to efficiently report which syntax nodes\ngot re-used during incremental re-parsing."},{"p":["SyntaxChildren"],"f":[["struct",12],[" ",17],["SyntaxChildren",7]],"s":[["struct",12],[" ",17],["SyntaxChildren",7]],"d":"Collection that contains the present child `Syntax` nodes of the given node."},{"p":["SourceEdit"],"f":[["struct",12],[" ",17],["SourceEdit",7]],"s":[["struct",12],[" ",17],["SourceEdit",7]]},{"p":["SourceRange"],"f":[["struct",12],[" ",17],["SourceRange",7]],"s":[["struct",12],[" ",17],["SourceRange",7]],"d":"Represents a start and end location in a Swift file."},{"p":["SourceLength"],"f":[["struct",12],[" ",17],["SourceLength",7]],"s":[["struct",12],[" ",17],["SourceLength",7]],"d":"The length a syntax node spans in the source code. From any AbsolutePosition\nyou reach a node's end location by adding its UTF-8 length."},{"p":["TokenSequence"],"f":[["struct",12],[" ",17],["TokenSequence",7]],"s":[["struct",12],[" ",17],["TokenSequence",7]],"d":"Sequence of tokens that are part of the provided Syntax node."},{"p":["TokenSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["SourceLocation"],"f":[["struct",12],[" ",17],["SourceLocation",7]],"s":[["struct",12],[" ",17],["SourceLocation",7]],"d":"Represents a source location in a Swift file."},{"p":["ByteSourceRange"],"f":[["struct",12],[" ",17],["ByteSourceRange",7]],"s":[["struct",12],[" ",17],["ByteSourceRange",7]]},{"p":["ConcurrentEdits"],"f":[["struct",12],[" ",17],["ConcurrentEdits",7]],"s":[["struct",12],[" ",17],["ConcurrentEdits",7]],"d":"Edits that are applied **simultaneously**. That is, the offsets of all edits\nrefer to the original string and are not shifted by previous edits. For\nexample applying\n - insert 'x' at offset 0\n - insert 'y' at offset 1\n - insert 'z' at offset 2\n to '012345' results in 'x0y1z2345'.\n\nThe raw `edits` of this struct are guaranteed to\n  1. not be overlapping.\n  2. be in increasing source offset order."},{"p":["AbsolutePosition"],"f":[["struct",12],[" ",17],["AbsolutePosition",7]],"s":[["struct",12],[" ",17],["AbsolutePosition",7]],"d":"An absolute position in a source file as text - the absolute utf8Offset from\nthe start of the file."},{"p":["ReversedTokenSequence"],"f":[["struct",12],[" ",17],["ReversedTokenSequence",7]],"s":[["struct",12],[" ",17],["ReversedTokenSequence",7]],"d":"Reverse sequence of tokens that are part of the provided Syntax node."},{"p":["ReversedTokenSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":7663},{"p":["IncrementalParseLookup"],"f":[["struct",12],[" ",17],["IncrementalParseLookup",7]],"s":[["struct",12],[" ",17],["IncrementalParseLookup",7]],"d":"Provides a mechanism for the parser to skip regions of an incrementally\nupdated source that was already parsed during a previous parse invocation."},{"p":["Trivia"],"f":[["struct",12],[" ",17],["Trivia",7]],"s":[["struct",12],[" ",17],["Trivia",7]],"d":"A collection of leading or trailing trivia. This is the main data structure\nfor thinking about trivia."},{"p":["SyntaxAnyVisitor"],"f":[["class",12],[" ",17],["SyntaxAnyVisitor",7]],"s":[["class",12],[" ",17],["SyntaxAnyVisitor",7]],"d":"A `SyntaxVisitor` that can visit the nodes as generic `Syntax` values.\n\nThis subclass of `SyntaxVisitor` is slower than the type-specific visitation \nof `SyntaxVisitor`. Use `SyntaxAnyVisitor` if the `visitAny(_)` function \nwould be useful to have, otherwise inherit from `SyntaxVisitor`.\n\nThis works by overriding the type-specific visit function that delegate to \n`visitAny(_)`. A subclass that provides a custom type-specific visit \nfunction, should also call `visitAny(_)` in its implementation, if calling \n`visitAny` is needed:\n\n    struct MyVisitor: SyntaxAnyVisitor {\n      func visitAny(_ node: Syntax) -> SyntaxVisitorContinueKind {\n        <code>\n      }\n\n      func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind {\n        <code>\n        // Call this to pass tokens to `visitAny(_)` as well if needed\n        visitAny(token)\n      }\n"},{"p":["SyntaxVisitor"],"f":[["class",12],[" ",17],["SyntaxVisitor",7]],"s":[["class",12],[" ",17],["SyntaxVisitor",7]]},{"p":["SyntaxRewriter"],"f":[["class",12],[" ",17],["SyntaxRewriter",7]],"s":[["class",12],[" ",17],["SyntaxRewriter",7]]},{"p":["SyntaxVerifier"],"f":[["class",12],[" ",17],["SyntaxVerifier",7]],"s":[["class",12],[" ",17],["SyntaxVerifier",7]],"d":"Verifier to check that there are no unknown syntax nodes in the tree."},{"p":["SourceLocationConverter"],"f":[["final",12],[" ",17],["class",12],[" ",17],["SourceLocationConverter",7]],"s":[["class",12],[" ",17],["SourceLocationConverter",7]],"d":"Converts `AbsolutePosition`s of syntax nodes to `SourceLocation`s, and\nvice-versa. The `AbsolutePosition`s must be originating from nodes that are\npart of the same tree that was used to initialize this class."},{"p":["IncrementalParseTransition"],"f":[["final",12],[" ",17],["class",12],[" ",17],["IncrementalParseTransition",7]],"s":[["class",12],[" ",17],["IncrementalParseTransition",7]],"d":"Keeps track of a previously parsed syntax tree and the source edits that\noccurred since it was created."},{"p":["IncrementalParseReusedNodeCollector"],"f":[["final",12],[" ",17],["class",12],[" ",17],["IncrementalParseReusedNodeCollector",7]],"s":[["class",12],[" ",17],["IncrementalParseReusedNodeCollector",7]],"d":"An implementation of `IncrementalParseReusedNodeDelegate` that just collects\nthe range and re-used node into an array."},{"p":["SyntaxVerifierError","unknownSyntaxFound(node:)"],"f":[["case",12],[" ",17],["unknownSyntaxFound",7],["(",17],["node",1],[": ",17],["Syntax",18,513],[")",17]],"s":[["case",12],[" ",17],["unknownSyntaxFound",7],["(",17],["node",1],[": ",17],["Syntax",18],[")",17]]},{"p":["SyntaxClassification","identifier"],"f":[["case",12],[" ",17],["identifier",7]],"s":[["case",12],[" ",17],["identifier",7]],"d":"A generic identifier. "},{"p":["SyntaxClassification","lineComment"],"f":[["case",12],[" ",17],["lineComment",7]],"s":[["case",12],[" ",17],["lineComment",7]],"d":"A line comment starting with `//`. "},{"p":["SyntaxClassification","blockComment"],"f":[["case",12],[" ",17],["blockComment",7]],"s":[["case",12],[" ",17],["blockComment",7]],"d":"A block comment starting with `/**` and ending with `*/. "},{"p":["SyntaxClassification","buildConfigId"],"f":[["case",12],[" ",17],["buildConfigId",7]],"s":[["case",12],[" ",17],["buildConfigId",7]],"d":"A build configuration directive like `#if`, `#elseif`, `#else`. "},{"p":["SyntaxClassification","objectLiteral"],"f":[["case",12],[" ",17],["objectLiteral",7]],"s":[["case",12],[" ",17],["objectLiteral",7]],"d":"An image, color, etc. literal. "},{"p":["SyntaxClassification","stringLiteral"],"f":[["case",12],[" ",17],["stringLiteral",7]],"s":[["case",12],[" ",17],["stringLiteral",7]],"d":"A string literal including multiline string literals. "},{"p":["SyntaxClassification","docLineComment"],"f":[["case",12],[" ",17],["docLineComment",7]],"s":[["case",12],[" ",17],["docLineComment",7]],"d":"A doc line comment starting with `///`. "},{"p":["SyntaxClassification","integerLiteral"],"f":[["case",12],[" ",17],["integerLiteral",7]],"s":[["case",12],[" ",17],["integerLiteral",7]],"d":"An integer literal. "},{"p":["SyntaxClassification","typeIdentifier"],"f":[["case",12],[" ",17],["typeIdentifier",7]],"s":[["case",12],[" ",17],["typeIdentifier",7]],"d":"An identifier referring to a type. "},{"p":["SyntaxClassification","docBlockComment"],"f":[["case",12],[" ",17],["docBlockComment",7]],"s":[["case",12],[" ",17],["docBlockComment",7]],"d":"A doc block comment starting with `/**` and ending with `*/. "},{"p":["SyntaxClassification","floatingLiteral"],"f":[["case",12],[" ",17],["floatingLiteral",7]],"s":[["case",12],[" ",17],["floatingLiteral",7]],"d":"A floating point literal. "},{"p":["SyntaxClassification","dollarIdentifier"],"f":[["case",12],[" ",17],["dollarIdentifier",7]],"s":[["case",12],[" ",17],["dollarIdentifier",7]],"d":"An identifier starting with `$` like `$0`. "},{"p":["SyntaxClassification","editorPlaceholder"],"f":[["case",12],[" ",17],["editorPlaceholder",7]],"s":[["case",12],[" ",17],["editorPlaceholder",7]],"d":"An editor placeholder of the form `<#content#>` "},{"p":["SyntaxClassification","poundDirectiveKeyword"],"f":[["case",12],[" ",17],["poundDirectiveKeyword",7]],"s":[["case",12],[" ",17],["poundDirectiveKeyword",7]],"d":"A `#` keyword like `#warning`. "},{"p":["SyntaxClassification","stringInterpolationAnchor"],"f":[["case",12],[" ",17],["stringInterpolationAnchor",7]],"s":[["case",12],[" ",17],["stringInterpolationAnchor",7]],"d":"The opening and closing paranthesis of string interpolation. "},{"p":["SyntaxClassification","none"],"f":[["case",12],[" ",17],["none",7]],"s":[["case",12],[" ",17],["none",7]],"d":"The token should not receive syntax coloring. "},{"p":["SyntaxClassification","keyword"],"f":[["case",12],[" ",17],["keyword",7]],"s":[["case",12],[" ",17],["keyword",7]],"d":"A Swift keyword, including contextual keywords. "},{"p":["SyntaxClassification","attribute"],"f":[["case",12],[" ",17],["attribute",7]],"s":[["case",12],[" ",17],["attribute",7]],"d":"An attribute starting with an `@`. "},{"p":["SyntaxVisitorContinueKind","skipChildren"],"f":[["case",12],[" ",17],["skipChildren",7]],"s":[["case",12],[" ",17],["skipChildren",7]],"d":"The visitor should avoid visiting the descendents of the current node."},{"p":["SyntaxVisitorContinueKind","visitChildren"],"f":[["case",12],[" ",17],["visitChildren",7]],"s":[["case",12],[" ",17],["visitChildren",7]],"d":"The visitor should visit the descendents of the current node."},{"p":["SyntaxEnum","accessPath(_:)"],"f":[["case",12],[" ",17],["accessPath",7],["(",17],["AccessPathSyntax",18,25],[")",17]],"s":[["case",12],[" ",17],["accessPath",7],["(",17],["AccessPathSyntax",18],[")",17]]},{"p":["SyntaxEnum","importDecl(_:)"],"f":[["case",12],[" ",17],["importDecl",7],["(",17],["ImportDeclSyntax",18,27],[")",17]],"s":[["case",12],[" ",17],["importDecl",7],["(",17],["ImportDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","returnStmt(_:)"],"f":[["case",12],[" ",17],["returnStmt",7],["(",17],["ReturnStmtSyntax",18,29],[")",17]],"s":[["case",12],[" ",17],["returnStmt",7],["(",17],["ReturnStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","sourceFile(_:)"],"f":[["case",12],[" ",17],["sourceFile",7],["(",17],["SourceFileSyntax",18,31],[")",17]],"s":[["case",12],[" ",17],["sourceFile",7],["(",17],["SourceFileSyntax",18],[")",17]]},{"p":["SyntaxEnum","structDecl(_:)"],"f":[["case",12],[" ",17],["structDecl",7],["(",17],["StructDeclSyntax",18,33],[")",17]],"s":[["case",12],[" ",17],["structDecl",7],["(",17],["StructDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","switchCase(_:)"],"f":[["case",12],[" ",17],["switchCase",7],["(",17],["SwitchCaseSyntax",18,35],[")",17]],"s":[["case",12],[" ",17],["switchCase",7],["(",17],["SwitchCaseSyntax",18],[")",17]]},{"p":["SyntaxEnum","switchStmt(_:)"],"f":[["case",12],[" ",17],["switchStmt",7],["(",17],["SwitchStmtSyntax",18,37],[")",17]],"s":[["case",12],[" ",17],["switchStmt",7],["(",17],["SwitchStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","catchClause(_:)"],"f":[["case",12],[" ",17],["catchClause",7],["(",17],["CatchClauseSyntax",18,39],[")",17]],"s":[["case",12],[" ",17],["catchClause",7],["(",17],["CatchClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","closureExpr(_:)"],"f":[["case",12],[" ",17],["closureExpr",7],["(",17],["ClosureExprSyntax",18,41],[")",17]],"s":[["case",12],[" ",17],["closureExpr",7],["(",17],["ClosureExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","keyPathExpr(_:)"],"f":[["case",12],[" ",17],["keyPathExpr",7],["(",17],["KeyPathExprSyntax",18,43],[")",17]],"s":[["case",12],[" ",17],["keyPathExpr",7],["(",17],["KeyPathExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","ternaryExpr(_:)"],"f":[["case",12],[" ",17],["ternaryExpr",7],["(",17],["TernaryExprSyntax",18,45],[")",17]],"s":[["case",12],[" ",17],["ternaryExpr",7],["(",17],["TernaryExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","unknownDecl(_:)"],"f":[["case",12],[" ",17],["unknownDecl",7],["(",17],["UnknownDeclSyntax",18,47],[")",17]],"s":[["case",12],[" ",17],["unknownDecl",7],["(",17],["UnknownDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","unknownExpr(_:)"],"f":[["case",12],[" ",17],["unknownExpr",7],["(",17],["UnknownExprSyntax",18,48],[")",17]],"s":[["case",12],[" ",17],["unknownExpr",7],["(",17],["UnknownExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","unknownStmt(_:)"],"f":[["case",12],[" ",17],["unknownStmt",7],["(",17],["UnknownStmtSyntax",18,49],[")",17]],"s":[["case",12],[" ",17],["unknownStmt",7],["(",17],["UnknownStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","unknownType(_:)"],"f":[["case",12],[" ",17],["unknownType",7],["(",17],["UnknownTypeSyntax",18,50],[")",17]],"s":[["case",12],[" ",17],["unknownType",7],["(",17],["UnknownTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","whereClause(_:)"],"f":[["case",12],[" ",17],["whereClause",7],["(",17],["WhereClauseSyntax",18,51],[")",17]],"s":[["case",12],[" ",17],["whereClause",7],["(",17],["WhereClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","accessorDecl(_:)"],"f":[["case",12],[" ",17],["accessorDecl",7],["(",17],["AccessorDeclSyntax",18,53],[")",17]],"s":[["case",12],[" ",17],["accessorDecl",7],["(",17],["AccessorDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","accessorList(_:)"],"f":[["case",12],[" ",17],["accessorList",7],["(",17],["AccessorListSyntax",18,55],[")",17]],"s":[["case",12],[" ",17],["accessorList",7],["(",17],["AccessorListSyntax",18],[")",17]]},{"p":["SyntaxEnum","arrayElement(_:)"],"f":[["case",12],[" ",17],["arrayElement",7],["(",17],["ArrayElementSyntax",18,57],[")",17]],"s":[["case",12],[" ",17],["arrayElement",7],["(",17],["ArrayElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","caseItemList(_:)"],"f":[["case",12],[" ",17],["caseItemList",7],["(",17],["CaseItemListSyntax",18,59],[")",17]],"s":[["case",12],[" ",17],["caseItemList",7],["(",17],["CaseItemListSyntax",18],[")",17]]},{"p":["SyntaxEnum","closureParam(_:)"],"f":[["case",12],[" ",17],["closureParam",7],["(",17],["ClosureParamSyntax",18,61],[")",17]],"s":[["case",12],[" ",17],["closureParam",7],["(",17],["ClosureParamSyntax",18],[")",17]]},{"p":["SyntaxEnum","continueStmt(_:)"],"f":[["case",12],[" ",17],["continueStmt",7],["(",17],["ContinueStmtSyntax",18,63],[")",17]],"s":[["case",12],[" ",17],["continueStmt",7],["(",17],["ContinueStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","declModifier(_:)"],"f":[["case",12],[" ",17],["declModifier",7],["(",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["case",12],[" ",17],["declModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["SyntaxEnum","enumCaseDecl(_:)"],"f":[["case",12],[" ",17],["enumCaseDecl",7],["(",17],["EnumCaseDeclSyntax",18,67],[")",17]],"s":[["case",12],[" ",17],["enumCaseDecl",7],["(",17],["EnumCaseDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionDecl(_:)"],"f":[["case",12],[" ",17],["functionDecl",7],["(",17],["FunctionDeclSyntax",18,69],[")",17]],"s":[["case",12],[" ",17],["functionDecl",7],["(",17],["FunctionDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionType(_:)"],"f":[["case",12],[" ",17],["functionType",7],["(",17],["FunctionTypeSyntax",18,71],[")",17]],"s":[["case",12],[" ",17],["functionType",7],["(",17],["FunctionTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","ifConfigDecl(_:)"],"f":[["case",12],[" ",17],["ifConfigDecl",7],["(",17],["IfConfigDeclSyntax",18,73],[")",17]],"s":[["case",12],[" ",17],["ifConfigDecl",7],["(",17],["IfConfigDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","metatypeType(_:)"],"f":[["case",12],[" ",17],["metatypeType",7],["(",17],["MetatypeTypeSyntax",18,75],[")",17]],"s":[["case",12],[" ",17],["metatypeType",7],["(",17],["MetatypeTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","modifierList(_:)"],"f":[["case",12],[" ",17],["modifierList",7],["(",17],["ModifierListSyntax",18,77],[")",17]],"s":[["case",12],[" ",17],["modifierList",7],["(",17],["ModifierListSyntax",18],[")",17]]},{"p":["SyntaxEnum","objCSelector(_:)"],"f":[["case",12],[" ",17],["objCSelector",7],["(",17],["ObjCSelectorSyntax",18,79],[")",17]],"s":[["case",12],[" ",17],["objCSelector",7],["(",17],["ObjCSelectorSyntax",18],[")",17]]},{"p":["SyntaxEnum","operatorDecl(_:)"],"f":[["case",12],[" ",17],["operatorDecl",7],["(",17],["OperatorDeclSyntax",18,81],[")",17]],"s":[["case",12],[" ",17],["operatorDecl",7],["(",17],["OperatorDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","optionalType(_:)"],"f":[["case",12],[" ",17],["optionalType",7],["(",17],["OptionalTypeSyntax",18,83],[")",17]],"s":[["case",12],[" ",17],["optionalType",7],["(",17],["OptionalTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","protocolDecl(_:)"],"f":[["case",12],[" ",17],["protocolDecl",7],["(",17],["ProtocolDeclSyntax",18,85],[")",17]],"s":[["case",12],[" ",17],["protocolDecl",7],["(",17],["ProtocolDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","returnClause(_:)"],"f":[["case",12],[" ",17],["returnClause",7],["(",17],["ReturnClauseSyntax",18,87],[")",17]],"s":[["case",12],[" ",17],["returnClause",7],["(",17],["ReturnClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","sequenceExpr(_:)"],"f":[["case",12],[" ",17],["sequenceExpr",7],["(",17],["SequenceExprSyntax",18,89],[")",17]],"s":[["case",12],[" ",17],["sequenceExpr",7],["(",17],["SequenceExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","superRefExpr(_:)"],"f":[["case",12],[" ",17],["superRefExpr",7],["(",17],["SuperRefExprSyntax",18,91],[")",17]],"s":[["case",12],[" ",17],["superRefExpr",7],["(",17],["SuperRefExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","tuplePattern(_:)"],"f":[["case",12],[" ",17],["tuplePattern",7],["(",17],["TuplePatternSyntax",18,93],[")",17]],"s":[["case",12],[" ",17],["tuplePattern",7],["(",17],["TuplePatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","variableDecl(_:)"],"f":[["case",12],[" ",17],["variableDecl",7],["(",17],["VariableDeclSyntax",18,95],[")",17]],"s":[["case",12],[" ",17],["variableDecl",7],["(",17],["VariableDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","versionTuple(_:)"],"f":[["case",12],[" ",17],["versionTuple",7],["(",17],["VersionTupleSyntax",18,97],[")",17]],"s":[["case",12],[" ",17],["versionTuple",7],["(",17],["VersionTupleSyntax",18],[")",17]]},{"p":["SyntaxEnum","accessorBlock(_:)"],"f":[["case",12],[" ",17],["accessorBlock",7],["(",17],["AccessorBlockSyntax",18,99],[")",17]],"s":[["case",12],[" ",17],["accessorBlock",7],["(",17],["AccessorBlockSyntax",18],[")",17]]},{"p":["SyntaxEnum","asTypePattern(_:)"],"f":[["case",12],[" ",17],["asTypePattern",7],["(",17],["AsTypePatternSyntax",18,101],[")",17]],"s":[["case",12],[" ",17],["asTypePattern",7],["(",17],["AsTypePatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","attributeList(_:)"],"f":[["case",12],[" ",17],["attributeList",7],["(",17],["AttributeListSyntax",18,103],[")",17]],"s":[["case",12],[" ",17],["attributeList",7],["(",17],["AttributeListSyntax",18],[")",17]]},{"p":["SyntaxEnum","catchItemList(_:)"],"f":[["case",12],[" ",17],["catchItemList",7],["(",17],["CatchItemListSyntax",18,105],[")",17]],"s":[["case",12],[" ",17],["catchItemList",7],["(",17],["CatchItemListSyntax",18],[")",17]]},{"p":["SyntaxEnum","codeBlockItem(_:)"],"f":[["case",12],[" ",17],["codeBlockItem",7],["(",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["case",12],[" ",17],["codeBlockItem",7],["(",17],["CodeBlockItemSyntax",18],[")",17]]},{"p":["SyntaxEnum","extensionDecl(_:)"],"f":[["case",12],[" ",17],["extensionDecl",7],["(",17],["ExtensionDeclSyntax",18,109],[")",17]],"s":[["case",12],[" ",17],["extensionDecl",7],["(",17],["ExtensionDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","inheritedType(_:)"],"f":[["case",12],[" ",17],["inheritedType",7],["(",17],["InheritedTypeSyntax",18,111],[")",17]],"s":[["case",12],[" ",17],["inheritedType",7],["(",17],["InheritedTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","isTypePattern(_:)"],"f":[["case",12],[" ",17],["isTypePattern",7],["(",17],["IsTypePatternSyntax",18,113],[")",17]],"s":[["case",12],[" ",17],["isTypePattern",7],["(",17],["IsTypePatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","objcNamePiece(_:)"],"f":[["case",12],[" ",17],["objcNamePiece",7],["(",17],["ObjcNamePieceSyntax",18,115],[")",17]],"s":[["case",12],[" ",17],["objcNamePiece",7],["(",17],["ObjcNamePieceSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundFileExpr(_:)"],"f":[["case",12],[" ",17],["poundFileExpr",7],["(",17],["PoundFileExprSyntax",18,117],[")",17]],"s":[["case",12],[" ",17],["poundFileExpr",7],["(",17],["PoundFileExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundLineExpr(_:)"],"f":[["case",12],[" ",17],["poundLineExpr",7],["(",17],["PoundLineExprSyntax",18,119],[")",17]],"s":[["case",12],[" ",17],["poundLineExpr",7],["(",17],["PoundLineExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","stringSegment(_:)"],"f":[["case",12],[" ",17],["stringSegment",7],["(",17],["StringSegmentSyntax",18,121],[")",17]],"s":[["case",12],[" ",17],["stringSegment",7],["(",17],["StringSegmentSyntax",18],[")",17]]},{"p":["SyntaxEnum","subscriptDecl(_:)"],"f":[["case",12],[" ",17],["subscriptDecl",7],["(",17],["SubscriptDeclSyntax",18,123],[")",17]],"s":[["case",12],[" ",17],["subscriptDecl",7],["(",17],["SubscriptDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","subscriptExpr(_:)"],"f":[["case",12],[" ",17],["subscriptExpr",7],["(",17],["SubscriptExprSyntax",18,125],[")",17]],"s":[["case",12],[" ",17],["subscriptExpr",7],["(",17],["SubscriptExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","typealiasDecl(_:)"],"f":[["case",12],[" ",17],["typealiasDecl",7],["(",17],["TypealiasDeclSyntax",18,127],[")",17]],"s":[["case",12],[" ",17],["typealiasDecl",7],["(",17],["TypealiasDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","assignmentExpr(_:)"],"f":[["case",12],[" ",17],["assignmentExpr",7],["(",17],["AssignmentExprSyntax",18,129],[")",17]],"s":[["case",12],[" ",17],["assignmentExpr",7],["(",17],["AssignmentExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","attributedType(_:)"],"f":[["case",12],[" ",17],["attributedType",7],["(",17],["AttributedTypeSyntax",18,131],[")",17]],"s":[["case",12],[" ",17],["attributedType",7],["(",17],["AttributedTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","dictionaryExpr(_:)"],"f":[["case",12],[" ",17],["dictionaryExpr",7],["(",17],["DictionaryExprSyntax",18,133],[")",17]],"s":[["case",12],[" ",17],["dictionaryExpr",7],["(",17],["DictionaryExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","dictionaryType(_:)"],"f":[["case",12],[" ",17],["dictionaryType",7],["(",17],["DictionaryTypeSyntax",18,135],[")",17]],"s":[["case",12],[" ",17],["dictionaryType",7],["(",17],["DictionaryTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","expressionStmt(_:)"],"f":[["case",12],[" ",17],["expressionStmt",7],["(",17],["ExpressionStmtSyntax",18,137],[")",17]],"s":[["case",12],[" ",17],["expressionStmt",7],["(",17],["ExpressionStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","identifierExpr(_:)"],"f":[["case",12],[" ",17],["identifierExpr",7],["(",17],["IdentifierExprSyntax",18,139],[")",17]],"s":[["case",12],[" ",17],["identifierExpr",7],["(",17],["IdentifierExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","identifierList(_:)"],"f":[["case",12],[" ",17],["identifierList",7],["(",17],["IdentifierListSyntax",18,141],[")",17]],"s":[["case",12],[" ",17],["identifierList",7],["(",17],["IdentifierListSyntax",18],[")",17]]},{"p":["SyntaxEnum","ifConfigClause(_:)"],"f":[["case",12],[" ",17],["ifConfigClause",7],["(",17],["IfConfigClauseSyntax",18,143],[")",17]],"s":[["case",12],[" ",17],["ifConfigClause",7],["(",17],["IfConfigClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","memberDeclList(_:)"],"f":[["case",12],[" ",17],["memberDeclList",7],["(",17],["MemberDeclListSyntax",18,145],[")",17]],"s":[["case",12],[" ",17],["memberDeclList",7],["(",17],["MemberDeclListSyntax",18],[")",17]]},{"p":["SyntaxEnum","nilLiteralExpr(_:)"],"f":[["case",12],[" ",17],["nilLiteralExpr",7],["(",17],["NilLiteralExprSyntax",18,147],[")",17]],"s":[["case",12],[" ",17],["nilLiteralExpr",7],["(",17],["NilLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","patternBinding(_:)"],"f":[["case",12],[" ",17],["patternBinding",7],["(",17],["PatternBindingSyntax",18,149],[")",17]],"s":[["case",12],[" ",17],["patternBinding",7],["(",17],["PatternBindingSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundErrorDecl(_:)"],"f":[["case",12],[" ",17],["poundErrorDecl",7],["(",17],["PoundErrorDeclSyntax",18,151],[")",17]],"s":[["case",12],[" ",17],["poundErrorDecl",7],["(",17],["PoundErrorDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","specializeExpr(_:)"],"f":[["case",12],[" ",17],["specializeExpr",7],["(",17],["SpecializeExprSyntax",18,153],[")",17]],"s":[["case",12],[" ",17],["specializeExpr",7],["(",17],["SpecializeExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","switchCaseList(_:)"],"f":[["case",12],[" ",17],["switchCaseList",7],["(",17],["SwitchCaseListSyntax",18,155],[")",17]],"s":[["case",12],[" ",17],["switchCaseList",7],["(",17],["SwitchCaseListSyntax",18],[")",17]]},{"p":["SyntaxEnum","typeAnnotation(_:)"],"f":[["case",12],[" ",17],["typeAnnotation",7],["(",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["case",12],[" ",17],["typeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],[")",17]]},{"p":["SyntaxEnum","unknownPattern(_:)"],"f":[["case",12],[" ",17],["unknownPattern",7],["(",17],["UnknownPatternSyntax",18,159],[")",17]],"s":[["case",12],[" ",17],["unknownPattern",7],["(",17],["UnknownPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","catchClauseList(_:)"],"f":[["case",12],[" ",17],["catchClauseList",7],["(",17],["CatchClauseListSyntax",18,160],[")",17]],"s":[["case",12],[" ",17],["catchClauseList",7],["(",17],["CatchClauseListSyntax",18],[")",17]]},{"p":["SyntaxEnum","compositionType(_:)"],"f":[["case",12],[" ",17],["compositionType",7],["(",17],["CompositionTypeSyntax",18,162],[")",17]],"s":[["case",12],[" ",17],["compositionType",7],["(",17],["CompositionTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","customAttribute(_:)"],"f":[["case",12],[" ",17],["customAttribute",7],["(",17],["CustomAttributeSyntax",18,164],[")",17]],"s":[["case",12],[" ",17],["customAttribute",7],["(",17],["CustomAttributeSyntax",18],[")",17]]},{"p":["SyntaxEnum","declarationStmt(_:)"],"f":[["case",12],[" ",17],["declarationStmt",7],["(",17],["DeclarationStmtSyntax",18,166],[")",17]],"s":[["case",12],[" ",17],["declarationStmt",7],["(",17],["DeclarationStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","enumCaseElement(_:)"],"f":[["case",12],[" ",17],["enumCaseElement",7],["(",17],["EnumCaseElementSyntax",18,168],[")",17]],"s":[["case",12],[" ",17],["enumCaseElement",7],["(",17],["EnumCaseElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","enumCasePattern(_:)"],"f":[["case",12],[" ",17],["enumCasePattern",7],["(",17],["EnumCasePatternSyntax",18,170],[")",17]],"s":[["case",12],[" ",17],["enumCasePattern",7],["(",17],["EnumCasePatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","fallthroughStmt(_:)"],"f":[["case",12],[" ",17],["fallthroughStmt",7],["(",17],["FallthroughStmtSyntax",18,172],[")",17]],"s":[["case",12],[" ",17],["fallthroughStmt",7],["(",17],["FallthroughStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","forcedValueExpr(_:)"],"f":[["case",12],[" ",17],["forcedValueExpr",7],["(",17],["ForcedValueExprSyntax",18,174],[")",17]],"s":[["case",12],[" ",17],["forcedValueExpr",7],["(",17],["ForcedValueExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericArgument(_:)"],"f":[["case",12],[" ",17],["genericArgument",7],["(",17],["GenericArgumentSyntax",18,176],[")",17]],"s":[["case",12],[" ",17],["genericArgument",7],["(",17],["GenericArgumentSyntax",18],[")",17]]},{"p":["SyntaxEnum","initializerDecl(_:)"],"f":[["case",12],[" ",17],["initializerDecl",7],["(",17],["InitializerDeclSyntax",18,178],[")",17]],"s":[["case",12],[" ",17],["initializerDecl",7],["(",17],["InitializerDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","keyPathBaseExpr(_:)"],"f":[["case",12],[" ",17],["keyPathBaseExpr",7],["(",17],["KeyPathBaseExprSyntax",18,180],[")",17]],"s":[["case",12],[" ",17],["keyPathBaseExpr",7],["(",17],["KeyPathBaseExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","memberDeclBlock(_:)"],"f":[["case",12],[" ",17],["memberDeclBlock",7],["(",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["case",12],[" ",17],["memberDeclBlock",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]]},{"p":["SyntaxEnum","objcKeyPathExpr(_:)"],"f":[["case",12],[" ",17],["objcKeyPathExpr",7],["(",17],["ObjcKeyPathExprSyntax",18,184],[")",17]],"s":[["case",12],[" ",17],["objcKeyPathExpr",7],["(",17],["ObjcKeyPathExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","optionalPattern(_:)"],"f":[["case",12],[" ",17],["optionalPattern",7],["(",17],["OptionalPatternSyntax",18,186],[")",17]],"s":[["case",12],[" ",17],["optionalPattern",7],["(",17],["OptionalPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","parameterClause(_:)"],"f":[["case",12],[" ",17],["parameterClause",7],["(",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["case",12],[" ",17],["parameterClause",7],["(",17],["ParameterClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundAssertStmt(_:)"],"f":[["case",12],[" ",17],["poundAssertStmt",7],["(",17],["PoundAssertStmtSyntax",18,190],[")",17]],"s":[["case",12],[" ",17],["poundAssertStmt",7],["(",17],["PoundAssertStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundColumnExpr(_:)"],"f":[["case",12],[" ",17],["poundColumnExpr",7],["(",17],["PoundColumnExprSyntax",18,192],[")",17]],"s":[["case",12],[" ",17],["poundColumnExpr",7],["(",17],["PoundColumnExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundFileIDExpr(_:)"],"f":[["case",12],[" ",17],["poundFileIDExpr",7],["(",17],["PoundFileIDExprSyntax",18,194],[")",17]],"s":[["case",12],[" ",17],["poundFileIDExpr",7],["(",17],["PoundFileIDExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","repeatWhileStmt(_:)"],"f":[["case",12],[" ",17],["repeatWhileStmt",7],["(",17],["RepeatWhileStmtSyntax",18,196],[")",17]],"s":[["case",12],[" ",17],["repeatWhileStmt",7],["(",17],["RepeatWhileStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","switchCaseLabel(_:)"],"f":[["case",12],[" ",17],["switchCaseLabel",7],["(",17],["SwitchCaseLabelSyntax",18,198],[")",17]],"s":[["case",12],[" ",17],["switchCaseLabel",7],["(",17],["SwitchCaseLabelSyntax",18],[")",17]]},{"p":["SyntaxEnum","wildcardPattern(_:)"],"f":[["case",12],[" ",17],["wildcardPattern",7],["(",17],["WildcardPatternSyntax",18,200],[")",17]],"s":[["case",12],[" ",17],["wildcardPattern",7],["(",17],["WildcardPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","arrayElementList(_:)"],"f":[["case",12],[" ",17],["arrayElementList",7],["(",17],["ArrayElementListSyntax",18,202],[")",17]],"s":[["case",12],[" ",17],["arrayElementList",7],["(",17],["ArrayElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","closureParamList(_:)"],"f":[["case",12],[" ",17],["closureParamList",7],["(",17],["ClosureParamListSyntax",18,204],[")",17]],"s":[["case",12],[" ",17],["closureParamList",7],["(",17],["ClosureParamListSyntax",18],[")",17]]},{"p":["SyntaxEnum","closureSignature(_:)"],"f":[["case",12],[" ",17],["closureSignature",7],["(",17],["ClosureSignatureSyntax",18,206],[")",17]],"s":[["case",12],[" ",17],["closureSignature",7],["(",17],["ClosureSignatureSyntax",18],[")",17]]},{"p":["SyntaxEnum","conditionElement(_:)"],"f":[["case",12],[" ",17],["conditionElement",7],["(",17],["ConditionElementSyntax",18,208],[")",17]],"s":[["case",12],[" ",17],["conditionElement",7],["(",17],["ConditionElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","declNameArgument(_:)"],"f":[["case",12],[" ",17],["declNameArgument",7],["(",17],["DeclNameArgumentSyntax",18,210],[")",17]],"s":[["case",12],[" ",17],["declNameArgument",7],["(",17],["DeclNameArgumentSyntax",18],[")",17]]},{"p":["SyntaxEnum","floatLiteralExpr(_:)"],"f":[["case",12],[" ",17],["floatLiteralExpr",7],["(",17],["FloatLiteralExprSyntax",18,212],[")",17]],"s":[["case",12],[" ",17],["floatLiteralExpr",7],["(",17],["FloatLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionCallExpr(_:)"],"f":[["case",12],[" ",17],["functionCallExpr",7],["(",17],["FunctionCallExprSyntax",18,214],[")",17]],"s":[["case",12],[" ",17],["functionCallExpr",7],["(",17],["FunctionCallExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionDeclName(_:)"],"f":[["case",12],[" ",17],["functionDeclName",7],["(",17],["FunctionDeclNameSyntax",18,216],[")",17]],"s":[["case",12],[" ",17],["functionDeclName",7],["(",17],["FunctionDeclNameSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericParameter(_:)"],"f":[["case",12],[" ",17],["genericParameter",7],["(",17],["GenericParameterSyntax",18,218],[")",17]],"s":[["case",12],[" ",17],["genericParameter",7],["(",17],["GenericParameterSyntax",18],[")",17]]},{"p":["SyntaxEnum","memberAccessExpr(_:)"],"f":[["case",12],[" ",17],["memberAccessExpr",7],["(",17],["MemberAccessExprSyntax",18,220],[")",17]],"s":[["case",12],[" ",17],["memberAccessExpr",7],["(",17],["MemberAccessExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","objcSelectorExpr(_:)"],"f":[["case",12],[" ",17],["objcSelectorExpr",7],["(",17],["ObjcSelectorExprSyntax",18,222],[")",17]],"s":[["case",12],[" ",17],["objcSelectorExpr",7],["(",17],["ObjcSelectorExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","postfixUnaryExpr(_:)"],"f":[["case",12],[" ",17],["postfixUnaryExpr",7],["(",17],["PostfixUnaryExprSyntax",18,224],[")",17]],"s":[["case",12],[" ",17],["postfixUnaryExpr",7],["(",17],["PostfixUnaryExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundWarningDecl(_:)"],"f":[["case",12],[" ",17],["poundWarningDecl",7],["(",17],["PoundWarningDeclSyntax",18,226],[")",17]],"s":[["case",12],[" ",17],["poundWarningDecl",7],["(",17],["PoundWarningDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","regexLiteralExpr(_:)"],"f":[["case",12],[" ",17],["regexLiteralExpr",7],["(",17],["RegexLiteralExprSyntax",18,228],[")",17]],"s":[["case",12],[" ",17],["regexLiteralExpr",7],["(",17],["RegexLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","tupleExprElement(_:)"],"f":[["case",12],[" ",17],["tupleExprElement",7],["(",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["case",12],[" ",17],["tupleExprElement",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","tupleTypeElement(_:)"],"f":[["case",12],[" ",17],["tupleTypeElement",7],["(",17],["TupleTypeElementSyntax",18,232],[")",17]],"s":[["case",12],[" ",17],["tupleTypeElement",7],["(",17],["TupleTypeElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","accessorParameter(_:)"],"f":[["case",12],[" ",17],["accessorParameter",7],["(",17],["AccessorParameterSyntax",18,234],[")",17]],"s":[["case",12],[" ",17],["accessorParameter",7],["(",17],["AccessorParameterSyntax",18],[")",17]]},{"p":["SyntaxEnum","availabilityEntry(_:)"],"f":[["case",12],[" ",17],["availabilityEntry",7],["(",17],["AvailabilityEntrySyntax",18,236],[")",17]],"s":[["case",12],[" ",17],["availabilityEntry",7],["(",17],["AvailabilityEntrySyntax",18],[")",17]]},{"p":["SyntaxEnum","codeBlockItemList(_:)"],"f":[["case",12],[" ",17],["codeBlockItemList",7],["(",17],["CodeBlockItemListSyntax",18,238],[")",17]],"s":[["case",12],[" ",17],["codeBlockItemList",7],["(",17],["CodeBlockItemListSyntax",18],[")",17]]},{"p":["SyntaxEnum","declNameArguments(_:)"],"f":[["case",12],[" ",17],["declNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["case",12],[" ",17],["declNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["SyntaxEnum","deinitializerDecl(_:)"],"f":[["case",12],[" ",17],["deinitializerDecl",7],["(",17],["DeinitializerDeclSyntax",18,242],[")",17]],"s":[["case",12],[" ",17],["deinitializerDecl",7],["(",17],["DeinitializerDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","dictionaryElement(_:)"],"f":[["case",12],[" ",17],["dictionaryElement",7],["(",17],["DictionaryElementSyntax",18,244],[")",17]],"s":[["case",12],[" ",17],["dictionaryElement",7],["(",17],["DictionaryElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","expressionPattern(_:)"],"f":[["case",12],[" ",17],["expressionPattern",7],["(",17],["ExpressionPatternSyntax",18,246],[")",17]],"s":[["case",12],[" ",17],["expressionPattern",7],["(",17],["ExpressionPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","expressionSegment(_:)"],"f":[["case",12],[" ",17],["expressionSegment",7],["(",17],["ExpressionSegmentSyntax",18,248],[")",17]],"s":[["case",12],[" ",17],["expressionSegment",7],["(",17],["ExpressionSegmentSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionParameter(_:)"],"f":[["case",12],[" ",17],["functionParameter",7],["(",17],["FunctionParameterSyntax",18,250],[")",17]],"s":[["case",12],[" ",17],["functionParameter",7],["(",17],["FunctionParameterSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionSignature(_:)"],"f":[["case",12],[" ",17],["functionSignature",7],["(",17],["FunctionSignatureSyntax",18,252],[")",17]],"s":[["case",12],[" ",17],["functionSignature",7],["(",17],["FunctionSignatureSyntax",18],[")",17]]},{"p":["SyntaxEnum","identifierPattern(_:)"],"f":[["case",12],[" ",17],["identifierPattern",7],["(",17],["IdentifierPatternSyntax",18,254],[")",17]],"s":[["case",12],[" ",17],["identifierPattern",7],["(",17],["IdentifierPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","inheritedTypeList(_:)"],"f":[["case",12],[" ",17],["inheritedTypeList",7],["(",17],["InheritedTypeListSyntax",18,256],[")",17]],"s":[["case",12],[" ",17],["inheritedTypeList",7],["(",17],["InheritedTypeListSyntax",18],[")",17]]},{"p":["SyntaxEnum","initializerClause(_:)"],"f":[["case",12],[" ",17],["initializerClause",7],["(",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["case",12],[" ",17],["initializerClause",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","nonEmptyTokenList(_:)"],"f":[["case",12],[" ",17],["nonEmptyTokenList",7],["(",17],["NonEmptyTokenListSyntax",18,260],[")",17]],"s":[["case",12],[" ",17],["nonEmptyTokenList",7],["(",17],["NonEmptyTokenListSyntax",18],[")",17]]},{"p":["SyntaxEnum","objCSelectorPiece(_:)"],"f":[["case",12],[" ",17],["objCSelectorPiece",7],["(",17],["ObjCSelectorPieceSyntax",18,262],[")",17]],"s":[["case",12],[" ",17],["objCSelectorPiece",7],["(",17],["ObjCSelectorPieceSyntax",18],[")",17]]},{"p":["SyntaxEnum","objectLiteralExpr(_:)"],"f":[["case",12],[" ",17],["objectLiteralExpr",7],["(",17],["ObjectLiteralExprSyntax",18,264],[")",17]],"s":[["case",12],[" ",17],["objectLiteralExpr",7],["(",17],["ObjectLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundFilePathExpr(_:)"],"f":[["case",12],[" ",17],["poundFilePathExpr",7],["(",17],["PoundFilePathExprSyntax",18,266],[")",17]],"s":[["case",12],[" ",17],["poundFilePathExpr",7],["(",17],["PoundFilePathExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundFunctionExpr(_:)"],"f":[["case",12],[" ",17],["poundFunctionExpr",7],["(",17],["PoundFunctionExprSyntax",18,268],[")",17]],"s":[["case",12],[" ",17],["poundFunctionExpr",7],["(",17],["PoundFunctionExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","qualifiedDeclName(_:)"],"f":[["case",12],[" ",17],["qualifiedDeclName",7],["(",17],["QualifiedDeclNameSyntax",18,270],[")",17]],"s":[["case",12],[" ",17],["qualifiedDeclName",7],["(",17],["QualifiedDeclNameSyntax",18],[")",17]]},{"p":["SyntaxEnum","stringLiteralExpr(_:)"],"f":[["case",12],[" ",17],["stringLiteralExpr",7],["(",17],["StringLiteralExprSyntax",18,272],[")",17]],"s":[["case",12],[" ",17],["stringLiteralExpr",7],["(",17],["StringLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","associatedtypeDecl(_:)"],"f":[["case",12],[" ",17],["associatedtypeDecl",7],["(",17],["AssociatedtypeDeclSyntax",18,274],[")",17]],"s":[["case",12],[" ",17],["associatedtypeDecl",7],["(",17],["AssociatedtypeDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","binaryOperatorExpr(_:)"],"f":[["case",12],[" ",17],["binaryOperatorExpr",7],["(",17],["BinaryOperatorExprSyntax",18,276],[")",17]],"s":[["case",12],[" ",17],["binaryOperatorExpr",7],["(",17],["BinaryOperatorExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","booleanLiteralExpr(_:)"],"f":[["case",12],[" ",17],["booleanLiteralExpr",7],["(",17],["BooleanLiteralExprSyntax",18,278],[")",17]],"s":[["case",12],[" ",17],["booleanLiteralExpr",7],["(",17],["BooleanLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","closureCaptureItem(_:)"],"f":[["case",12],[" ",17],["closureCaptureItem",7],["(",17],["ClosureCaptureItemSyntax",18,280],[")",17]],"s":[["case",12],[" ",17],["closureCaptureItem",7],["(",17],["ClosureCaptureItemSyntax",18],[")",17]]},{"p":["SyntaxEnum","elseIfContinuation(_:)"],"f":[["case",12],[" ",17],["elseIfContinuation",7],["(",17],["ElseIfContinuationSyntax",18,282],[")",17]],"s":[["case",12],[" ",17],["elseIfContinuation",7],["(",17],["ElseIfContinuationSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericRequirement(_:)"],"f":[["case",12],[" ",17],["genericRequirement",7],["(",17],["GenericRequirementSyntax",18,284],[")",17]],"s":[["case",12],[" ",17],["genericRequirement",7],["(",17],["GenericRequirementSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericWhereClause(_:)"],"f":[["case",12],[" ",17],["genericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["case",12],[" ",17],["genericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","ifConfigClauseList(_:)"],"f":[["case",12],[" ",17],["ifConfigClauseList",7],["(",17],["IfConfigClauseListSyntax",18,288],[")",17]],"s":[["case",12],[" ",17],["ifConfigClauseList",7],["(",17],["IfConfigClauseListSyntax",18],[")",17]]},{"p":["SyntaxEnum","integerLiteralExpr(_:)"],"f":[["case",12],[" ",17],["integerLiteralExpr",7],["(",17],["IntegerLiteralExprSyntax",18,290],[")",17]],"s":[["case",12],[" ",17],["integerLiteralExpr",7],["(",17],["IntegerLiteralExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","memberDeclListItem(_:)"],"f":[["case",12],[" ",17],["memberDeclListItem",7],["(",17],["MemberDeclListItemSyntax",18,292],[")",17]],"s":[["case",12],[" ",17],["memberDeclListItem",7],["(",17],["MemberDeclListItemSyntax",18],[")",17]]},{"p":["SyntaxEnum","patternBindingList(_:)"],"f":[["case",12],[" ",17],["patternBindingList",7],["(",17],["PatternBindingListSyntax",18,294],[")",17]],"s":[["case",12],[" ",17],["patternBindingList",7],["(",17],["PatternBindingListSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundDsohandleExpr(_:)"],"f":[["case",12],[" ",17],["poundDsohandleExpr",7],["(",17],["PoundDsohandleExprSyntax",18,296],[")",17]],"s":[["case",12],[" ",17],["poundDsohandleExpr",7],["(",17],["PoundDsohandleExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","prefixOperatorExpr(_:)"],"f":[["case",12],[" ",17],["prefixOperatorExpr",7],["(",17],["PrefixOperatorExprSyntax",18,298],[")",17]],"s":[["case",12],[" ",17],["prefixOperatorExpr",7],["(",17],["PrefixOperatorExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","switchDefaultLabel(_:)"],"f":[["case",12],[" ",17],["switchDefaultLabel",7],["(",17],["SwitchDefaultLabelSyntax",18,300],[")",17]],"s":[["case",12],[" ",17],["switchDefaultLabel",7],["(",17],["SwitchDefaultLabelSyntax",18],[")",17]]},{"p":["SyntaxEnum","accessLevelModifier(_:)"],"f":[["case",12],[" ",17],["accessLevelModifier",7],["(",17],["AccessLevelModifierSyntax",18,302],[")",17]],"s":[["case",12],[" ",17],["accessLevelModifier",7],["(",17],["AccessLevelModifierSyntax",18],[")",17]]},{"p":["SyntaxEnum","accessPathComponent(_:)"],"f":[["case",12],[" ",17],["accessPathComponent",7],["(",17],["AccessPathComponentSyntax",18,304],[")",17]],"s":[["case",12],[" ",17],["accessPathComponent",7],["(",17],["AccessPathComponentSyntax",18],[")",17]]},{"p":["SyntaxEnum","enumCaseElementList(_:)"],"f":[["case",12],[" ",17],["enumCaseElementList",7],["(",17],["EnumCaseElementListSyntax",18,306],[")",17]],"s":[["case",12],[" ",17],["enumCaseElementList",7],["(",17],["EnumCaseElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericArgumentList(_:)"],"f":[["case",12],[" ",17],["genericArgumentList",7],["(",17],["GenericArgumentListSyntax",18,308],[")",17]],"s":[["case",12],[" ",17],["genericArgumentList",7],["(",17],["GenericArgumentListSyntax",18],[")",17]]},{"p":["SyntaxEnum","postfixIfConfigExpr(_:)"],"f":[["case",12],[" ",17],["postfixIfConfigExpr",7],["(",17],["PostfixIfConfigExprSyntax",18,310],[")",17]],"s":[["case",12],[" ",17],["postfixIfConfigExpr",7],["(",17],["PostfixIfConfigExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundSourceLocation(_:)"],"f":[["case",12],[" ",17],["poundSourceLocation",7],["(",17],["PoundSourceLocationSyntax",18,312],[")",17]],"s":[["case",12],[" ",17],["poundSourceLocation",7],["(",17],["PoundSourceLocationSyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupDecl(_:)"],"f":[["case",12],[" ",17],["precedenceGroupDecl",7],["(",17],["PrecedenceGroupDeclSyntax",18,314],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupDecl",7],["(",17],["PrecedenceGroupDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","sameTypeRequirement(_:)"],"f":[["case",12],[" ",17],["sameTypeRequirement",7],["(",17],["SameTypeRequirementSyntax",18,316],[")",17]],"s":[["case",12],[" ",17],["sameTypeRequirement",7],["(",17],["SameTypeRequirementSyntax",18],[")",17]]},{"p":["SyntaxEnum","targetFunctionEntry(_:)"],"f":[["case",12],[" ",17],["targetFunctionEntry",7],["(",17],["TargetFunctionEntrySyntax",18,318],[")",17]],"s":[["case",12],[" ",17],["targetFunctionEntry",7],["(",17],["TargetFunctionEntrySyntax",18],[")",17]]},{"p":["SyntaxEnum","tuplePatternElement(_:)"],"f":[["case",12],[" ",17],["tuplePatternElement",7],["(",17],["TuplePatternElementSyntax",18,320],[")",17]],"s":[["case",12],[" ",17],["tuplePatternElement",7],["(",17],["TuplePatternElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","valueBindingPattern(_:)"],"f":[["case",12],[" ",17],["valueBindingPattern",7],["(",17],["ValueBindingPatternSyntax",18,322],[")",17]],"s":[["case",12],[" ",17],["valueBindingPattern",7],["(",17],["ValueBindingPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","availabilityArgument(_:)"],"f":[["case",12],[" ",17],["availabilityArgument",7],["(",17],["AvailabilityArgumentSyntax",18,324],[")",17]],"s":[["case",12],[" ",17],["availabilityArgument",7],["(",17],["AvailabilityArgumentSyntax",18],[")",17]]},{"p":["SyntaxEnum","availabilitySpecList(_:)"],"f":[["case",12],[" ",17],["availabilitySpecList",7],["(",17],["AvailabilitySpecListSyntax",18,326],[")",17]],"s":[["case",12],[" ",17],["availabilitySpecList",7],["(",17],["AvailabilitySpecListSyntax",18],[")",17]]},{"p":["SyntaxEnum","classRestrictionType(_:)"],"f":[["case",12],[" ",17],["classRestrictionType",7],["(",17],["ClassRestrictionTypeSyntax",18,328],[")",17]],"s":[["case",12],[" ",17],["classRestrictionType",7],["(",17],["ClassRestrictionTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","conditionElementList(_:)"],"f":[["case",12],[" ",17],["conditionElementList",7],["(",17],["ConditionElementListSyntax",18,330],[")",17]],"s":[["case",12],[" ",17],["conditionElementList",7],["(",17],["ConditionElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","declNameArgumentList(_:)"],"f":[["case",12],[" ",17],["declNameArgumentList",7],["(",17],["DeclNameArgumentListSyntax",18,332],[")",17]],"s":[["case",12],[" ",17],["declNameArgumentList",7],["(",17],["DeclNameArgumentListSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericParameterList(_:)"],"f":[["case",12],[" ",17],["genericParameterList",7],["(",17],["GenericParameterListSyntax",18,334],[")",17]],"s":[["case",12],[" ",17],["genericParameterList",7],["(",17],["GenericParameterListSyntax",18],[")",17]]},{"p":["SyntaxEnum","memberTypeIdentifier(_:)"],"f":[["case",12],[" ",17],["memberTypeIdentifier",7],["(",17],["MemberTypeIdentifierSyntax",18,336],[")",17]],"s":[["case",12],[" ",17],["memberTypeIdentifier",7],["(",17],["MemberTypeIdentifierSyntax",18],[")",17]]},{"p":["SyntaxEnum","optionalChainingExpr(_:)"],"f":[["case",12],[" ",17],["optionalChainingExpr",7],["(",17],["OptionalChainingExprSyntax",18,338],[")",17]],"s":[["case",12],[" ",17],["optionalChainingExpr",7],["(",17],["OptionalChainingExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","simpleTypeIdentifier(_:)"],"f":[["case",12],[" ",17],["simpleTypeIdentifier",7],["(",17],["SimpleTypeIdentifierSyntax",18,340],[")",17]],"s":[["case",12],[" ",17],["simpleTypeIdentifier",7],["(",17],["SimpleTypeIdentifierSyntax",18],[")",17]]},{"p":["SyntaxEnum","tupleExprElementList(_:)"],"f":[["case",12],[" ",17],["tupleExprElementList",7],["(",17],["TupleExprElementListSyntax",18,342],[")",17]],"s":[["case",12],[" ",17],["tupleExprElementList",7],["(",17],["TupleExprElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","tupleTypeElementList(_:)"],"f":[["case",12],[" ",17],["tupleTypeElementList",7],["(",17],["TupleTypeElementListSyntax",18,344],[")",17]],"s":[["case",12],[" ",17],["tupleTypeElementList",7],["(",17],["TupleTypeElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","availabilityCondition(_:)"],"f":[["case",12],[" ",17],["availabilityCondition",7],["(",17],["AvailabilityConditionSyntax",18,346],[")",17]],"s":[["case",12],[" ",17],["availabilityCondition",7],["(",17],["AvailabilityConditionSyntax",18],[")",17]]},{"p":["SyntaxEnum","dictionaryElementList(_:)"],"f":[["case",12],[" ",17],["dictionaryElementList",7],["(",17],["DictionaryElementListSyntax",18,348],[")",17]],"s":[["case",12],[" ",17],["dictionaryElementList",7],["(",17],["DictionaryElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","discardAssignmentExpr(_:)"],"f":[["case",12],[" ",17],["discardAssignmentExpr",7],["(",17],["DiscardAssignmentExprSyntax",18,350],[")",17]],"s":[["case",12],[" ",17],["discardAssignmentExpr",7],["(",17],["DiscardAssignmentExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","editorPlaceholderExpr(_:)"],"f":[["case",12],[" ",17],["editorPlaceholderExpr",7],["(",17],["EditorPlaceholderExprSyntax",18,352],[")",17]],"s":[["case",12],[" ",17],["editorPlaceholderExpr",7],["(",17],["EditorPlaceholderExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","functionParameterList(_:)"],"f":[["case",12],[" ",17],["functionParameterList",7],["(",17],["FunctionParameterListSyntax",18,354],[")",17]],"s":[["case",12],[" ",17],["functionParameterList",7],["(",17],["FunctionParameterListSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericArgumentClause(_:)"],"f":[["case",12],[" ",17],["genericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18,356],[")",17]],"s":[["case",12],[" ",17],["genericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","primaryAssociatedType(_:)"],"f":[["case",12],[" ",17],["primaryAssociatedType",7],["(",17],["PrimaryAssociatedTypeSyntax",18,358],[")",17]],"s":[["case",12],[" ",17],["primaryAssociatedType",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","stringLiteralSegments(_:)"],"f":[["case",12],[" ",17],["stringLiteralSegments",7],["(",17],["StringLiteralSegmentsSyntax",18,360],[")",17]],"s":[["case",12],[" ",17],["stringLiteralSegments",7],["(",17],["StringLiteralSegmentsSyntax",18],[")",17]]},{"p":["SyntaxEnum","symbolicReferenceExpr(_:)"],"f":[["case",12],[" ",17],["symbolicReferenceExpr",7],["(",17],["SymbolicReferenceExprSyntax",18,362],[")",17]],"s":[["case",12],[" ",17],["symbolicReferenceExpr",7],["(",17],["SymbolicReferenceExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","typeInheritanceClause(_:)"],"f":[["case",12],[" ",17],["typeInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18,364],[")",17]],"s":[["case",12],[" ",17],["typeInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","typeInitializerClause(_:)"],"f":[["case",12],[" ",17],["typeInitializerClause",7],["(",17],["TypeInitializerClauseSyntax",18,366],[")",17]],"s":[["case",12],[" ",17],["typeInitializerClause",7],["(",17],["TypeInitializerClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","unresolvedPatternExpr(_:)"],"f":[["case",12],[" ",17],["unresolvedPatternExpr",7],["(",17],["UnresolvedPatternExprSyntax",18,368],[")",17]],"s":[["case",12],[" ",17],["unresolvedPatternExpr",7],["(",17],["UnresolvedPatternExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","closureCaptureItemList(_:)"],"f":[["case",12],[" ",17],["closureCaptureItemList",7],["(",17],["ClosureCaptureItemListSyntax",18,370],[")",17]],"s":[["case",12],[" ",17],["closureCaptureItemList",7],["(",17],["ClosureCaptureItemListSyntax",18],[")",17]]},{"p":["SyntaxEnum","compositionTypeElement(_:)"],"f":[["case",12],[" ",17],["compositionTypeElement",7],["(",17],["CompositionTypeElementSyntax",18,372],[")",17]],"s":[["case",12],[" ",17],["compositionTypeElement",7],["(",17],["CompositionTypeElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","conformanceRequirement(_:)"],"f":[["case",12],[" ",17],["conformanceRequirement",7],["(",17],["ConformanceRequirementSyntax",18,374],[")",17]],"s":[["case",12],[" ",17],["conformanceRequirement",7],["(",17],["ConformanceRequirementSyntax",18],[")",17]]},{"p":["SyntaxEnum","differentiabilityParam(_:)"],"f":[["case",12],[" ",17],["differentiabilityParam",7],["(",17],["DifferentiabilityParamSyntax",18,376],[")",17]],"s":[["case",12],[" ",17],["differentiabilityParam",7],["(",17],["DifferentiabilityParamSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericParameterClause(_:)"],"f":[["case",12],[" ",17],["genericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18,378],[")",17]],"s":[["case",12],[" ",17],["genericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","genericRequirementList(_:)"],"f":[["case",12],[" ",17],["genericRequirementList",7],["(",17],["GenericRequirementListSyntax",18,380],[")",17]],"s":[["case",12],[" ",17],["genericRequirementList",7],["(",17],["GenericRequirementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","labeledSpecializeEntry(_:)"],"f":[["case",12],[" ",17],["labeledSpecializeEntry",7],["(",17],["LabeledSpecializeEntrySyntax",18,382],[")",17]],"s":[["case",12],[" ",17],["labeledSpecializeEntry",7],["(",17],["LabeledSpecializeEntrySyntax",18],[")",17]]},{"p":["SyntaxEnum","closureCaptureSignature(_:)"],"f":[["case",12],[" ",17],["closureCaptureSignature",7],["(",17],["ClosureCaptureSignatureSyntax",18,384],[")",17]],"s":[["case",12],[" ",17],["closureCaptureSignature",7],["(",17],["ClosureCaptureSignatureSyntax",18],[")",17]]},{"p":["SyntaxEnum","differentiabilityParams(_:)"],"f":[["case",12],[" ",17],["differentiabilityParams",7],["(",17],["DifferentiabilityParamsSyntax",18,386],[")",17]],"s":[["case",12],[" ",17],["differentiabilityParams",7],["(",17],["DifferentiabilityParamsSyntax",18],[")",17]]},{"p":["SyntaxEnum","poundSourceLocationArgs(_:)"],"f":[["case",12],[" ",17],["poundSourceLocationArgs",7],["(",17],["PoundSourceLocationArgsSyntax",18,388],[")",17]],"s":[["case",12],[" ",17],["poundSourceLocationArgs",7],["(",17],["PoundSourceLocationArgsSyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupNameList(_:)"],"f":[["case",12],[" ",17],["precedenceGroupNameList",7],["(",17],["PrecedenceGroupNameListSyntax",18,390],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupNameList",7],["(",17],["PrecedenceGroupNameListSyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupRelation(_:)"],"f":[["case",12],[" ",17],["precedenceGroupRelation",7],["(",17],["PrecedenceGroupRelationSyntax",18,392],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupRelation",7],["(",17],["PrecedenceGroupRelationSyntax",18],[")",17]]},{"p":["SyntaxEnum","tuplePatternElementList(_:)"],"f":[["case",12],[" ",17],["tuplePatternElementList",7],["(",17],["TuplePatternElementListSyntax",18,394],[")",17]],"s":[["case",12],[" ",17],["tuplePatternElementList",7],["(",17],["TuplePatternElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","unavailabilityCondition(_:)"],"f":[["case",12],[" ",17],["unavailabilityCondition",7],["(",17],["UnavailabilityConditionSyntax",18,396],[")",17]],"s":[["case",12],[" ",17],["unavailabilityCondition",7],["(",17],["UnavailabilityConditionSyntax",18],[")",17]]},{"p":["SyntaxEnum","matchingPatternCondition(_:)"],"f":[["case",12],[" ",17],["matchingPatternCondition",7],["(",17],["MatchingPatternConditionSyntax",18,398],[")",17]],"s":[["case",12],[" ",17],["matchingPatternCondition",7],["(",17],["MatchingPatternConditionSyntax",18],[")",17]]},{"p":["SyntaxEnum","optionalBindingCondition(_:)"],"f":[["case",12],[" ",17],["optionalBindingCondition",7],["(",17],["OptionalBindingConditionSyntax",18,400],[")",17]],"s":[["case",12],[" ",17],["optionalBindingCondition",7],["(",17],["OptionalBindingConditionSyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupAssignment(_:)"],"f":[["case",12],[" ",17],["precedenceGroupAssignment",7],["(",17],["PrecedenceGroupAssignmentSyntax",18,402],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupAssignment",7],["(",17],["PrecedenceGroupAssignmentSyntax",18],[")",17]]},{"p":["SyntaxEnum","primaryAssociatedTypeList(_:)"],"f":[["case",12],[" ",17],["primaryAssociatedTypeList",7],["(",17],["PrimaryAssociatedTypeListSyntax",18,404],[")",17]],"s":[["case",12],[" ",17],["primaryAssociatedTypeList",7],["(",17],["PrimaryAssociatedTypeListSyntax",18],[")",17]]},{"p":["SyntaxEnum","compositionTypeElementList(_:)"],"f":[["case",12],[" ",17],["compositionTypeElementList",7],["(",17],["CompositionTypeElementListSyntax",18,406],[")",17]],"s":[["case",12],[" ",17],["compositionTypeElementList",7],["(",17],["CompositionTypeElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","differentiabilityParamList(_:)"],"f":[["case",12],[" ",17],["differentiabilityParamList",7],["(",17],["DifferentiabilityParamListSyntax",18,408],[")",17]],"s":[["case",12],[" ",17],["differentiabilityParamList",7],["(",17],["DifferentiabilityParamListSyntax",18],[")",17]]},{"p":["SyntaxEnum","operatorPrecedenceAndTypes(_:)"],"f":[["case",12],[" ",17],["operatorPrecedenceAndTypes",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18,410],[")",17]],"s":[["case",12],[" ",17],["operatorPrecedenceAndTypes",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupNameElement(_:)"],"f":[["case",12],[" ",17],["precedenceGroupNameElement",7],["(",17],["PrecedenceGroupNameElementSyntax",18,412],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupNameElement",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","availabilityLabeledArgument(_:)"],"f":[["case",12],[" ",17],["availabilityLabeledArgument",7],["(",17],["AvailabilityLabeledArgumentSyntax",18,414],[")",17]],"s":[["case",12],[" ",17],["availabilityLabeledArgument",7],["(",17],["AvailabilityLabeledArgumentSyntax",18],[")",17]]},{"p":["SyntaxEnum","specializeAttributeSpecList(_:)"],"f":[["case",12],[" ",17],["specializeAttributeSpecList",7],["(",17],["SpecializeAttributeSpecListSyntax",18,416],[")",17]],"s":[["case",12],[" ",17],["specializeAttributeSpecList",7],["(",17],["SpecializeAttributeSpecListSyntax",18],[")",17]]},{"p":["SyntaxEnum","implementsAttributeArguments(_:)"],"f":[["case",12],[" ",17],["implementsAttributeArguments",7],["(",17],["ImplementsAttributeArgumentsSyntax",18,418],[")",17]],"s":[["case",12],[" ",17],["implementsAttributeArguments",7],["(",17],["ImplementsAttributeArgumentsSyntax",18],[")",17]]},{"p":["SyntaxEnum","namedAttributeStringArgument(_:)"],"f":[["case",12],[" ",17],["namedAttributeStringArgument",7],["(",17],["NamedAttributeStringArgumentSyntax",18,420],[")",17]],"s":[["case",12],[" ",17],["namedAttributeStringArgument",7],["(",17],["NamedAttributeStringArgumentSyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupAssociativity(_:)"],"f":[["case",12],[" ",17],["precedenceGroupAssociativity",7],["(",17],["PrecedenceGroupAssociativitySyntax",18,422],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupAssociativity",7],["(",17],["PrecedenceGroupAssociativitySyntax",18],[")",17]]},{"p":["SyntaxEnum","precedenceGroupAttributeList(_:)"],"f":[["case",12],[" ",17],["precedenceGroupAttributeList",7],["(",17],["PrecedenceGroupAttributeListSyntax",18,424],[")",17]],"s":[["case",12],[" ",17],["precedenceGroupAttributeList",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],[")",17]]},{"p":["SyntaxEnum","differentiabilityParamsClause(_:)"],"f":[["case",12],[" ",17],["differentiabilityParamsClause",7],["(",17],["DifferentiabilityParamsClauseSyntax",18,426],[")",17]],"s":[["case",12],[" ",17],["differentiabilityParamsClause",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[")",17]]},{"p":["SyntaxEnum","availabilityVersionRestriction(_:)"],"f":[["case",12],[" ",17],["availabilityVersionRestriction",7],["(",17],["AvailabilityVersionRestrictionSyntax",18,428],[")",17]],"s":[["case",12],[" ",17],["availabilityVersionRestriction",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],[")",17]]},{"p":["SyntaxEnum","multipleTrailingClosureElement(_:)"],"f":[["case",12],[" ",17],["multipleTrailingClosureElement",7],["(",17],["MultipleTrailingClosureElementSyntax",18,430],[")",17]],"s":[["case",12],[" ",17],["multipleTrailingClosureElement",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[")",17]]},{"p":["SyntaxEnum","implicitlyUnwrappedOptionalType(_:)"],"f":[["case",12],[" ",17],["implicitlyUnwrappedOptionalType",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,432],[")",17]],"s":[["case",12],[" ",17],["implicitlyUnwrappedOptionalType",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","differentiableAttributeArguments(_:)"],"f":[["case",12],[" ",17],["differentiableAttributeArguments",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18,434],[")",17]],"s":[["case",12],[" ",17],["differentiableAttributeArguments",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18],[")",17]]},{"p":["SyntaxEnum","multipleTrailingClosureElementList(_:)"],"f":[["case",12],[" ",17],["multipleTrailingClosureElementList",7],["(",17],["MultipleTrailingClosureElementListSyntax",18,436],[")",17]],"s":[["case",12],[" ",17],["multipleTrailingClosureElementList",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],[")",17]]},{"p":["SyntaxEnum","derivativeRegistrationAttributeArguments(_:)"],"f":[["case",12],[" ",17],["derivativeRegistrationAttributeArguments",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438],[")",17]],"s":[["case",12],[" ",17],["derivativeRegistrationAttributeArguments",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],[")",17]]},{"p":["SyntaxEnum","decl(_:)"],"f":[["case",12],[" ",17],["decl",7],["(",17],["UnknownDeclSyntax",18,47],[")",17]],"s":[["case",12],[" ",17],["decl",7],["(",17],["UnknownDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","expr(_:)"],"f":[["case",12],[" ",17],["expr",7],["(",17],["UnknownExprSyntax",18,48],[")",17]],"s":[["case",12],[" ",17],["expr",7],["(",17],["UnknownExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","stmt(_:)"],"f":[["case",12],[" ",17],["stmt",7],["(",17],["UnknownStmtSyntax",18,49],[")",17]],"s":[["case",12],[" ",17],["stmt",7],["(",17],["UnknownStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","type(_:)"],"f":[["case",12],[" ",17],["type",7],["(",17],["UnknownTypeSyntax",18,50],[")",17]],"s":[["case",12],[" ",17],["type",7],["(",17],["UnknownTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","token(_:)"],"f":[["case",12],[" ",17],["token",7],["(",17],["TokenSyntax",18,444],[")",17]],"s":[["case",12],[" ",17],["token",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SyntaxEnum","asExpr(_:)"],"f":[["case",12],[" ",17],["asExpr",7],["(",17],["AsExprSyntax",18,445],[")",17]],"s":[["case",12],[" ",17],["asExpr",7],["(",17],["AsExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","doStmt(_:)"],"f":[["case",12],[" ",17],["doStmt",7],["(",17],["DoStmtSyntax",18,447],[")",17]],"s":[["case",12],[" ",17],["doStmt",7],["(",17],["DoStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","ifStmt(_:)"],"f":[["case",12],[" ",17],["ifStmt",7],["(",17],["IfStmtSyntax",18,449],[")",17]],"s":[["case",12],[" ",17],["ifStmt",7],["(",17],["IfStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","isExpr(_:)"],"f":[["case",12],[" ",17],["isExpr",7],["(",17],["IsExprSyntax",18,451],[")",17]],"s":[["case",12],[" ",17],["isExpr",7],["(",17],["IsExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","pattern(_:)"],"f":[["case",12],[" ",17],["pattern",7],["(",17],["UnknownPatternSyntax",18,159],[")",17]],"s":[["case",12],[" ",17],["pattern",7],["(",17],["UnknownPatternSyntax",18],[")",17]]},{"p":["SyntaxEnum","tryExpr(_:)"],"f":[["case",12],[" ",17],["tryExpr",7],["(",17],["TryExprSyntax",18,454],[")",17]],"s":[["case",12],[" ",17],["tryExpr",7],["(",17],["TryExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","unknown(_:)"],"f":[["case",12],[" ",17],["unknown",7],["(",17],["UnknownSyntax",18,456],[")",17]],"s":[["case",12],[" ",17],["unknown",7],["(",17],["UnknownSyntax",18],[")",17]]},{"p":["SyntaxEnum","caseItem(_:)"],"f":[["case",12],[" ",17],["caseItem",7],["(",17],["CaseItemSyntax",18,457],[")",17]],"s":[["case",12],[" ",17],["caseItem",7],["(",17],["CaseItemSyntax",18],[")",17]]},{"p":["SyntaxEnum","declName(_:)"],"f":[["case",12],[" ",17],["declName",7],["(",17],["DeclNameSyntax",18,459],[")",17]],"s":[["case",12],[" ",17],["declName",7],["(",17],["DeclNameSyntax",18],[")",17]]},{"p":["SyntaxEnum","enumDecl(_:)"],"f":[["case",12],[" ",17],["enumDecl",7],["(",17],["EnumDeclSyntax",18,461],[")",17]],"s":[["case",12],[" ",17],["enumDecl",7],["(",17],["EnumDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","exprList(_:)"],"f":[["case",12],[" ",17],["exprList",7],["(",17],["ExprListSyntax",18,463],[")",17]],"s":[["case",12],[" ",17],["exprList",7],["(",17],["ExprListSyntax",18],[")",17]]},{"p":["SyntaxEnum","objcName(_:)"],"f":[["case",12],[" ",17],["objcName",7],["(",17],["ObjcNameSyntax",18,465],[")",17]],"s":[["case",12],[" ",17],["objcName",7],["(",17],["ObjcNameSyntax",18],[")",17]]},{"p":["SyntaxEnum","someType(_:)"],"f":[["case",12],[" ",17],["someType",7],["(",17],["SomeTypeSyntax",18,467],[")",17]],"s":[["case",12],[" ",17],["someType",7],["(",17],["SomeTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","typeExpr(_:)"],"f":[["case",12],[" ",17],["typeExpr",7],["(",17],["TypeExprSyntax",18,469],[")",17]],"s":[["case",12],[" ",17],["typeExpr",7],["(",17],["TypeExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","arrayExpr(_:)"],"f":[["case",12],[" ",17],["arrayExpr",7],["(",17],["ArrayExprSyntax",18,471],[")",17]],"s":[["case",12],[" ",17],["arrayExpr",7],["(",17],["ArrayExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","arrayType(_:)"],"f":[["case",12],[" ",17],["arrayType",7],["(",17],["ArrayTypeSyntax",18,473],[")",17]],"s":[["case",12],[" ",17],["arrayType",7],["(",17],["ArrayTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","arrowExpr(_:)"],"f":[["case",12],[" ",17],["arrowExpr",7],["(",17],["ArrowExprSyntax",18,475],[")",17]],"s":[["case",12],[" ",17],["arrowExpr",7],["(",17],["ArrowExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","attribute(_:)"],"f":[["case",12],[" ",17],["attribute",7],["(",17],["AttributeSyntax",18,477],[")",17]],"s":[["case",12],[" ",17],["attribute",7],["(",17],["AttributeSyntax",18],[")",17]]},{"p":["SyntaxEnum","awaitExpr(_:)"],"f":[["case",12],[" ",17],["awaitExpr",7],["(",17],["AwaitExprSyntax",18,479],[")",17]],"s":[["case",12],[" ",17],["awaitExpr",7],["(",17],["AwaitExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","breakStmt(_:)"],"f":[["case",12],[" ",17],["breakStmt",7],["(",17],["BreakStmtSyntax",18,481],[")",17]],"s":[["case",12],[" ",17],["breakStmt",7],["(",17],["BreakStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","catchItem(_:)"],"f":[["case",12],[" ",17],["catchItem",7],["(",17],["CatchItemSyntax",18,483],[")",17]],"s":[["case",12],[" ",17],["catchItem",7],["(",17],["CatchItemSyntax",18],[")",17]]},{"p":["SyntaxEnum","classDecl(_:)"],"f":[["case",12],[" ",17],["classDecl",7],["(",17],["ClassDeclSyntax",18,485],[")",17]],"s":[["case",12],[" ",17],["classDecl",7],["(",17],["ClassDeclSyntax",18],[")",17]]},{"p":["SyntaxEnum","codeBlock(_:)"],"f":[["case",12],[" ",17],["codeBlock",7],["(",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["case",12],[" ",17],["codeBlock",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["SyntaxEnum","deferStmt(_:)"],"f":[["case",12],[" ",17],["deferStmt",7],["(",17],["DeferStmtSyntax",18,489],[")",17]],"s":[["case",12],[" ",17],["deferStmt",7],["(",17],["DeferStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","elseBlock(_:)"],"f":[["case",12],[" ",17],["elseBlock",7],["(",17],["ElseBlockSyntax",18,491],[")",17]],"s":[["case",12],[" ",17],["elseBlock",7],["(",17],["ElseBlockSyntax",18],[")",17]]},{"p":["SyntaxEnum","forInStmt(_:)"],"f":[["case",12],[" ",17],["forInStmt",7],["(",17],["ForInStmtSyntax",18,493],[")",17]],"s":[["case",12],[" ",17],["forInStmt",7],["(",17],["ForInStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","guardStmt(_:)"],"f":[["case",12],[" ",17],["guardStmt",7],["(",17],["GuardStmtSyntax",18,495],[")",17]],"s":[["case",12],[" ",17],["guardStmt",7],["(",17],["GuardStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","inOutExpr(_:)"],"f":[["case",12],[" ",17],["inOutExpr",7],["(",17],["InOutExprSyntax",18,497],[")",17]],"s":[["case",12],[" ",17],["inOutExpr",7],["(",17],["InOutExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","throwStmt(_:)"],"f":[["case",12],[" ",17],["throwStmt",7],["(",17],["ThrowStmtSyntax",18,499],[")",17]],"s":[["case",12],[" ",17],["throwStmt",7],["(",17],["ThrowStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","tokenList(_:)"],"f":[["case",12],[" ",17],["tokenList",7],["(",17],["TokenListSyntax",18,501],[")",17]],"s":[["case",12],[" ",17],["tokenList",7],["(",17],["TokenListSyntax",18],[")",17]]},{"p":["SyntaxEnum","tupleExpr(_:)"],"f":[["case",12],[" ",17],["tupleExpr",7],["(",17],["TupleExprSyntax",18,503],[")",17]],"s":[["case",12],[" ",17],["tupleExpr",7],["(",17],["TupleExprSyntax",18],[")",17]]},{"p":["SyntaxEnum","tupleType(_:)"],"f":[["case",12],[" ",17],["tupleType",7],["(",17],["TupleTypeSyntax",18,505],[")",17]],"s":[["case",12],[" ",17],["tupleType",7],["(",17],["TupleTypeSyntax",18],[")",17]]},{"p":["SyntaxEnum","whileStmt(_:)"],"f":[["case",12],[" ",17],["whileStmt",7],["(",17],["WhileStmtSyntax",18,507],[")",17]],"s":[["case",12],[" ",17],["whileStmt",7],["(",17],["WhileStmtSyntax",18],[")",17]]},{"p":["SyntaxEnum","yieldList(_:)"],"f":[["case",12],[" ",17],["yieldList",7],["(",17],["YieldListSyntax",18,509],[")",17]],"s":[["case",12],[" ",17],["yieldList",7],["(",17],["YieldListSyntax",18],[")",17]]},{"p":["SyntaxEnum","yieldStmt(_:)"],"f":[["case",12],[" ",17],["yieldStmt",7],["(",17],["YieldStmtSyntax",18,511],[")",17]],"s":[["case",12],[" ",17],["yieldStmt",7],["(",17],["YieldStmtSyntax",18],[")",17]]},{"p":["TriviaPiece","garbageText(_:)"],"f":[["case",12],[" ",17],["garbageText",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["garbageText",7],["(",17],["String",18],[")",17]],"d":"Any skipped garbage text."},{"p":["TriviaPiece","lineComment(_:)"],"f":[["case",12],[" ",17],["lineComment",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["lineComment",7],["(",17],["String",18],[")",17]],"d":"A developer line comment, starting with '//'"},{"p":["TriviaPiece","blockComment(_:)"],"f":[["case",12],[" ",17],["blockComment",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["blockComment",7],["(",17],["String",18],[")",17]],"d":"A developer block comment, starting with '/*' and ending with '*/'."},{"p":["TriviaPiece","verticalTabs(_:)"],"f":[["case",12],[" ",17],["verticalTabs",7],["(",17],["Int",18,7706],[")",17]],"s":[["case",12],[" ",17],["verticalTabs",7],["(",17],["Int",18],[")",17]],"d":"A vertical tab '\\v' character."},{"p":["TriviaPiece","docLineComment(_:)"],"f":[["case",12],[" ",17],["docLineComment",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["docLineComment",7],["(",17],["String",18],[")",17]],"d":"A documentation line comment, starting with '///'."},{"p":["TriviaPiece","carriageReturns(_:)"],"f":[["case",12],[" ",17],["carriageReturns",7],["(",17],["Int",18,7706],[")",17]],"s":[["case",12],[" ",17],["carriageReturns",7],["(",17],["Int",18],[")",17]],"d":"A newline '\\r' character."},{"p":["TriviaPiece","docBlockComment(_:)"],"f":[["case",12],[" ",17],["docBlockComment",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["docBlockComment",7],["(",17],["String",18],[")",17]],"d":"A documentation block comment, starting with '/**' and ending with '*/'."},{"p":["TriviaPiece","carriageReturnLineFeeds(_:)"],"f":[["case",12],[" ",17],["carriageReturnLineFeeds",7],["(",17],["Int",18,7706],[")",17]],"s":[["case",12],[" ",17],["carriageReturnLineFeeds",7],["(",17],["Int",18],[")",17]],"d":"A newline consists of contiguous '\\r' and '\\n' characters."},{"p":["TriviaPiece","tabs(_:)"],"f":[["case",12],[" ",17],["tabs",7],["(",17],["Int",18,7706],[")",17]],"s":[["case",12],[" ",17],["tabs",7],["(",17],["Int",18],[")",17]],"d":"A tab '\\t' character."},{"p":["TriviaPiece","spaces(_:)"],"f":[["case",12],[" ",17],["spaces",7],["(",17],["Int",18,7706],[")",17]],"s":[["case",12],[" ",17],["spaces",7],["(",17],["Int",18],[")",17]],"d":"A space ' ' character."},{"p":["TriviaPiece","newlines(_:)"],"f":[["case",12],[" ",17],["newlines",7],["(",17],["Int",18,7706],[")",17]],"s":[["case",12],[" ",17],["newlines",7],["(",17],["Int",18],[")",17]],"d":"A newline '\\n' character."},{"p":["TriviaPiece","formfeeds(_:)"],"f":[["case",12],[" ",17],["formfeeds",7],["(",17],["Int",18,7706],[")",17]],"s":[["case",12],[" ",17],["formfeeds",7],["(",17],["Int",18],[")",17]],"d":"A form-feed 'f' character."},{"p":["SourcePresence","missing"],"f":[["case",12],[" ",17],["missing",7]],"s":[["case",12],[" ",17],["missing",7]],"d":"The syntax was expected or optional, but not found in the source."},{"p":["SourcePresence","present"],"f":[["case",12],[" ",17],["present",7]],"s":[["case",12],[" ",17],["present",7]],"d":"The syntax was authored by a human and found, or was generated."},{"p":["TokenKind","anyKeyword"],"f":[["case",12],[" ",17],["anyKeyword",7]],"s":[["case",12],[" ",17],["anyKeyword",7]]},{"p":["TokenKind","forKeyword"],"f":[["case",12],[" ",17],["forKeyword",7]],"s":[["case",12],[" ",17],["forKeyword",7]]},{"p":["TokenKind","identifier(_:)"],"f":[["case",12],[" ",17],["identifier",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["identifier",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","letKeyword"],"f":[["case",12],[" ",17],["letKeyword",7]],"s":[["case",12],[" ",17],["letKeyword",7]]},{"p":["TokenKind","nilKeyword"],"f":[["case",12],[" ",17],["nilKeyword",7]],"s":[["case",12],[" ",17],["nilKeyword",7]]},{"p":["TokenKind","rightAngle"],"f":[["case",12],[" ",17],["rightAngle",7]],"s":[["case",12],[" ",17],["rightAngle",7]]},{"p":["TokenKind","rightBrace"],"f":[["case",12],[" ",17],["rightBrace",7]],"s":[["case",12],[" ",17],["rightBrace",7]]},{"p":["TokenKind","rightParen"],"f":[["case",12],[" ",17],["rightParen",7]],"s":[["case",12],[" ",17],["rightParen",7]]},{"p":["TokenKind","tryKeyword"],"f":[["case",12],[" ",17],["tryKeyword",7]],"s":[["case",12],[" ",17],["tryKeyword",7]]},{"p":["TokenKind","varKeyword"],"f":[["case",12],[" ",17],["varKeyword",7]],"s":[["case",12],[" ",17],["varKeyword",7]]},{"p":["TokenKind","caseKeyword"],"f":[["case",12],[" ",17],["caseKeyword",7]],"s":[["case",12],[" ",17],["caseKeyword",7]]},{"p":["TokenKind","elseKeyword"],"f":[["case",12],[" ",17],["elseKeyword",7]],"s":[["case",12],[" ",17],["elseKeyword",7]]},{"p":["TokenKind","enumKeyword"],"f":[["case",12],[" ",17],["enumKeyword",7]],"s":[["case",12],[" ",17],["enumKeyword",7]]},{"p":["TokenKind","funcKeyword"],"f":[["case",12],[" ",17],["funcKeyword",7]],"s":[["case",12],[" ",17],["funcKeyword",7]]},{"p":["TokenKind","initKeyword"],"f":[["case",12],[" ",17],["initKeyword",7]],"s":[["case",12],[" ",17],["initKeyword",7]]},{"p":["TokenKind","selfKeyword"],"f":[["case",12],[" ",17],["selfKeyword",7]],"s":[["case",12],[" ",17],["selfKeyword",7]]},{"p":["TokenKind","singleQuote"],"f":[["case",12],[" ",17],["singleQuote",7]],"s":[["case",12],[" ",17],["singleQuote",7]]},{"p":["TokenKind","stringQuote"],"f":[["case",12],[" ",17],["stringQuote",7]],"s":[["case",12],[" ",17],["stringQuote",7]]},{"p":["TokenKind","trueKeyword"],"f":[["case",12],[" ",17],["trueKeyword",7]],"s":[["case",12],[" ",17],["trueKeyword",7]]},{"p":["TokenKind","breakKeyword"],"f":[["case",12],[" ",17],["breakKeyword",7]],"s":[["case",12],[" ",17],["breakKeyword",7]]},{"p":["TokenKind","catchKeyword"],"f":[["case",12],[" ",17],["catchKeyword",7]],"s":[["case",12],[" ",17],["catchKeyword",7]]},{"p":["TokenKind","classKeyword"],"f":[["case",12],[" ",17],["classKeyword",7]],"s":[["case",12],[" ",17],["classKeyword",7]]},{"p":["TokenKind","deferKeyword"],"f":[["case",12],[" ",17],["deferKeyword",7]],"s":[["case",12],[" ",17],["deferKeyword",7]]},{"p":["TokenKind","falseKeyword"],"f":[["case",12],[" ",17],["falseKeyword",7]],"s":[["case",12],[" ",17],["falseKeyword",7]]},{"p":["TokenKind","guardKeyword"],"f":[["case",12],[" ",17],["guardKeyword",7]],"s":[["case",12],[" ",17],["guardKeyword",7]]},{"p":["TokenKind","inoutKeyword"],"f":[["case",12],[" ",17],["inoutKeyword",7]],"s":[["case",12],[" ",17],["inoutKeyword",7]]},{"p":["TokenKind","prefixPeriod"],"f":[["case",12],[" ",17],["prefixPeriod",7]],"s":[["case",12],[" ",17],["prefixPeriod",7]]},{"p":["TokenKind","regexLiteral(_:)"],"f":[["case",12],[" ",17],["regexLiteral",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["regexLiteral",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","superKeyword"],"f":[["case",12],[" ",17],["superKeyword",7]],"s":[["case",12],[" ",17],["superKeyword",7]]},{"p":["TokenKind","throwKeyword"],"f":[["case",12],[" ",17],["throwKeyword",7]],"s":[["case",12],[" ",17],["throwKeyword",7]]},{"p":["TokenKind","whereKeyword"],"f":[["case",12],[" ",17],["whereKeyword",7]],"s":[["case",12],[" ",17],["whereKeyword",7]]},{"p":["TokenKind","whileKeyword"],"f":[["case",12],[" ",17],["whileKeyword",7]],"s":[["case",12],[" ",17],["whileKeyword",7]]},{"p":["TokenKind","deinitKeyword"],"f":[["case",12],[" ",17],["deinitKeyword",7]],"s":[["case",12],[" ",17],["deinitKeyword",7]]},{"p":["TokenKind","importKeyword"],"f":[["case",12],[" ",17],["importKeyword",7]],"s":[["case",12],[" ",17],["importKeyword",7]]},{"p":["TokenKind","publicKeyword"],"f":[["case",12],[" ",17],["publicKeyword",7]],"s":[["case",12],[" ",17],["publicKeyword",7]]},{"p":["TokenKind","repeatKeyword"],"f":[["case",12],[" ",17],["repeatKeyword",7]],"s":[["case",12],[" ",17],["repeatKeyword",7]]},{"p":["TokenKind","returnKeyword"],"f":[["case",12],[" ",17],["returnKeyword",7]],"s":[["case",12],[" ",17],["returnKeyword",7]]},{"p":["TokenKind","staticKeyword"],"f":[["case",12],[" ",17],["staticKeyword",7]],"s":[["case",12],[" ",17],["staticKeyword",7]]},{"p":["TokenKind","stringLiteral(_:)"],"f":[["case",12],[" ",17],["stringLiteral",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["stringLiteral",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","stringSegment(_:)"],"f":[["case",12],[" ",17],["stringSegment",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["stringSegment",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","structKeyword"],"f":[["case",12],[" ",17],["structKeyword",7]],"s":[["case",12],[" ",17],["structKeyword",7]]},{"p":["TokenKind","switchKeyword"],"f":[["case",12],[" ",17],["switchKeyword",7]],"s":[["case",12],[" ",17],["switchKeyword",7]]},{"p":["TokenKind","throwsKeyword"],"f":[["case",12],[" ",17],["throwsKeyword",7]],"s":[["case",12],[" ",17],["throwsKeyword",7]]},{"p":["TokenKind","defaultKeyword"],"f":[["case",12],[" ",17],["defaultKeyword",7]],"s":[["case",12],[" ",17],["defaultKeyword",7]]},{"p":["TokenKind","integerLiteral(_:)"],"f":[["case",12],[" ",17],["integerLiteral",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["integerLiteral",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","poundIfKeyword"],"f":[["case",12],[" ",17],["poundIfKeyword",7]],"s":[["case",12],[" ",17],["poundIfKeyword",7]]},{"p":["TokenKind","prefixOperator(_:)"],"f":[["case",12],[" ",17],["prefixOperator",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["prefixOperator",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","privateKeyword"],"f":[["case",12],[" ",17],["privateKeyword",7]],"s":[["case",12],[" ",17],["privateKeyword",7]]},{"p":["TokenKind","continueKeyword"],"f":[["case",12],[" ",17],["continueKeyword",7]],"s":[["case",12],[" ",17],["continueKeyword",7]]},{"p":["TokenKind","exclamationMark"],"f":[["case",12],[" ",17],["exclamationMark",7]],"s":[["case",12],[" ",17],["exclamationMark",7]]},{"p":["TokenKind","floatingLiteral(_:)"],"f":[["case",12],[" ",17],["floatingLiteral",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["floatingLiteral",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","internalKeyword"],"f":[["case",12],[" ",17],["internalKeyword",7]],"s":[["case",12],[" ",17],["internalKeyword",7]]},{"p":["TokenKind","operatorKeyword"],"f":[["case",12],[" ",17],["operatorKeyword",7]],"s":[["case",12],[" ",17],["operatorKeyword",7]]},{"p":["TokenKind","postfixOperator(_:)"],"f":[["case",12],[" ",17],["postfixOperator",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["postfixOperator",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","prefixAmpersand"],"f":[["case",12],[" ",17],["prefixAmpersand",7]],"s":[["case",12],[" ",17],["prefixAmpersand",7]]},{"p":["TokenKind","protocolKeyword"],"f":[["case",12],[" ",17],["protocolKeyword",7]],"s":[["case",12],[" ",17],["protocolKeyword",7]]},{"p":["TokenKind","rethrowsKeyword"],"f":[["case",12],[" ",17],["rethrowsKeyword",7]],"s":[["case",12],[" ",17],["rethrowsKeyword",7]]},{"p":["TokenKind","wildcardKeyword"],"f":[["case",12],[" ",17],["wildcardKeyword",7]],"s":[["case",12],[" ",17],["wildcardKeyword",7]]},{"p":["TokenKind","dollarIdentifier(_:)"],"f":[["case",12],[" ",17],["dollarIdentifier",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["dollarIdentifier",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","extensionKeyword"],"f":[["case",12],[" ",17],["extensionKeyword",7]],"s":[["case",12],[" ",17],["extensionKeyword",7]]},{"p":["TokenKind","poundElseKeyword"],"f":[["case",12],[" ",17],["poundElseKeyword",7]],"s":[["case",12],[" ",17],["poundElseKeyword",7]]},{"p":["TokenKind","poundFileKeyword"],"f":[["case",12],[" ",17],["poundFileKeyword",7]],"s":[["case",12],[" ",17],["poundFileKeyword",7]]},{"p":["TokenKind","poundLineKeyword"],"f":[["case",12],[" ",17],["poundLineKeyword",7]],"s":[["case",12],[" ",17],["poundLineKeyword",7]]},{"p":["TokenKind","subscriptKeyword"],"f":[["case",12],[" ",17],["subscriptKeyword",7]],"s":[["case",12],[" ",17],["subscriptKeyword",7]]},{"p":["TokenKind","typealiasKeyword"],"f":[["case",12],[" ",17],["typealiasKeyword",7]],"s":[["case",12],[" ",17],["typealiasKeyword",7]]},{"p":["TokenKind","contextualKeyword(_:)"],"f":[["case",12],[" ",17],["contextualKeyword",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["contextualKeyword",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","infixQuestionMark"],"f":[["case",12],[" ",17],["infixQuestionMark",7]],"s":[["case",12],[" ",17],["infixQuestionMark",7]]},{"p":["TokenKind","leftSquareBracket"],"f":[["case",12],[" ",17],["leftSquareBracket",7]],"s":[["case",12],[" ",17],["leftSquareBracket",7]]},{"p":["TokenKind","poundEndifKeyword"],"f":[["case",12],[" ",17],["poundEndifKeyword",7]],"s":[["case",12],[" ",17],["poundEndifKeyword",7]]},{"p":["TokenKind","poundErrorKeyword"],"f":[["case",12],[" ",17],["poundErrorKeyword",7]],"s":[["case",12],[" ",17],["poundErrorKeyword",7]]},{"p":["TokenKind","capitalSelfKeyword"],"f":[["case",12],[" ",17],["capitalSelfKeyword",7]],"s":[["case",12],[" ",17],["capitalSelfKeyword",7]]},{"p":["TokenKind","fallthroughKeyword"],"f":[["case",12],[" ",17],["fallthroughKeyword",7]],"s":[["case",12],[" ",17],["fallthroughKeyword",7]]},{"p":["TokenKind","fileprivateKeyword"],"f":[["case",12],[" ",17],["fileprivateKeyword",7]],"s":[["case",12],[" ",17],["fileprivateKeyword",7]]},{"p":["TokenKind","poundAssertKeyword"],"f":[["case",12],[" ",17],["poundAssertKeyword",7]],"s":[["case",12],[" ",17],["poundAssertKeyword",7]]},{"p":["TokenKind","poundColumnKeyword"],"f":[["case",12],[" ",17],["poundColumnKeyword",7]],"s":[["case",12],[" ",17],["poundColumnKeyword",7]]},{"p":["TokenKind","poundElseifKeyword"],"f":[["case",12],[" ",17],["poundElseifKeyword",7]],"s":[["case",12],[" ",17],["poundElseifKeyword",7]]},{"p":["TokenKind","poundFileIDKeyword"],"f":[["case",12],[" ",17],["poundFileIDKeyword",7]],"s":[["case",12],[" ",17],["poundFileIDKeyword",7]]},{"p":["TokenKind","rawStringDelimiter(_:)"],"f":[["case",12],[" ",17],["rawStringDelimiter",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["rawStringDelimiter",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","rightSquareBracket"],"f":[["case",12],[" ",17],["rightSquareBracket",7]],"s":[["case",12],[" ",17],["rightSquareBracket",7]]},{"p":["TokenKind","postfixQuestionMark"],"f":[["case",12],[" ",17],["postfixQuestionMark",7]],"s":[["case",12],[" ",17],["postfixQuestionMark",7]]},{"p":["TokenKind","poundKeyPathKeyword"],"f":[["case",12],[" ",17],["poundKeyPathKeyword",7]],"s":[["case",12],[" ",17],["poundKeyPathKeyword",7]]},{"p":["TokenKind","poundWarningKeyword"],"f":[["case",12],[" ",17],["poundWarningKeyword",7]],"s":[["case",12],[" ",17],["poundWarningKeyword",7]]},{"p":["TokenKind","multilineStringQuote"],"f":[["case",12],[" ",17],["multilineStringQuote",7]],"s":[["case",12],[" ",17],["multilineStringQuote",7]]},{"p":["TokenKind","poundFilePathKeyword"],"f":[["case",12],[" ",17],["poundFilePathKeyword",7]],"s":[["case",12],[" ",17],["poundFilePathKeyword",7]]},{"p":["TokenKind","poundFunctionKeyword"],"f":[["case",12],[" ",17],["poundFunctionKeyword",7]],"s":[["case",12],[" ",17],["poundFunctionKeyword",7]]},{"p":["TokenKind","poundSelectorKeyword"],"f":[["case",12],[" ",17],["poundSelectorKeyword",7]],"s":[["case",12],[" ",17],["poundSelectorKeyword",7]]},{"p":["TokenKind","spacedBinaryOperator(_:)"],"f":[["case",12],[" ",17],["spacedBinaryOperator",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["spacedBinaryOperator",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","associatedtypeKeyword"],"f":[["case",12],[" ",17],["associatedtypeKeyword",7]],"s":[["case",12],[" ",17],["associatedtypeKeyword",7]]},{"p":["TokenKind","poundAvailableKeyword"],"f":[["case",12],[" ",17],["poundAvailableKeyword",7]],"s":[["case",12],[" ",17],["poundAvailableKeyword",7]]},{"p":["TokenKind","poundDsohandleKeyword"],"f":[["case",12],[" ",17],["poundDsohandleKeyword",7]],"s":[["case",12],[" ",17],["poundDsohandleKeyword",7]]},{"p":["TokenKind","precedencegroupKeyword"],"f":[["case",12],[" ",17],["precedencegroupKeyword",7]],"s":[["case",12],[" ",17],["precedencegroupKeyword",7]]},{"p":["TokenKind","unspacedBinaryOperator(_:)"],"f":[["case",12],[" ",17],["unspacedBinaryOperator",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["unspacedBinaryOperator",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","poundFileLiteralKeyword"],"f":[["case",12],[" ",17],["poundFileLiteralKeyword",7]],"s":[["case",12],[" ",17],["poundFileLiteralKeyword",7]]},{"p":["TokenKind","poundUnavailableKeyword"],"f":[["case",12],[" ",17],["poundUnavailableKeyword",7]],"s":[["case",12],[" ",17],["poundUnavailableKeyword",7]]},{"p":["TokenKind","poundColorLiteralKeyword"],"f":[["case",12],[" ",17],["poundColorLiteralKeyword",7]],"s":[["case",12],[" ",17],["poundColorLiteralKeyword",7]]},{"p":["TokenKind","poundImageLiteralKeyword"],"f":[["case",12],[" ",17],["poundImageLiteralKeyword",7]],"s":[["case",12],[" ",17],["poundImageLiteralKeyword",7]]},{"p":["TokenKind","stringInterpolationAnchor"],"f":[["case",12],[" ",17],["stringInterpolationAnchor",7]],"s":[["case",12],[" ",17],["stringInterpolationAnchor",7]]},{"p":["TokenKind","poundSourceLocationKeyword"],"f":[["case",12],[" ",17],["poundSourceLocationKeyword",7]],"s":[["case",12],[" ",17],["poundSourceLocationKeyword",7]]},{"p":["TokenKind","eof"],"f":[["case",12],[" ",17],["eof",7]],"s":[["case",12],[" ",17],["eof",7]]},{"p":["TokenKind","arrow"],"f":[["case",12],[" ",17],["arrow",7]],"s":[["case",12],[" ",17],["arrow",7]]},{"p":["TokenKind","colon"],"f":[["case",12],[" ",17],["colon",7]],"s":[["case",12],[" ",17],["colon",7]]},{"p":["TokenKind","comma"],"f":[["case",12],[" ",17],["comma",7]],"s":[["case",12],[" ",17],["comma",7]]},{"p":["TokenKind","equal"],"f":[["case",12],[" ",17],["equal",7]],"s":[["case",12],[" ",17],["equal",7]]},{"p":["TokenKind","pound"],"f":[["case",12],[" ",17],["pound",7]],"s":[["case",12],[" ",17],["pound",7]]},{"p":["TokenKind","yield"],"f":[["case",12],[" ",17],["yield",7]],"s":[["case",12],[" ",17],["yield",7]]},{"p":["TokenKind","atSign"],"f":[["case",12],[" ",17],["atSign",7]],"s":[["case",12],[" ",17],["atSign",7]]},{"p":["TokenKind","period"],"f":[["case",12],[" ",17],["period",7]],"s":[["case",12],[" ",17],["period",7]]},{"p":["TokenKind","unknown(_:)"],"f":[["case",12],[" ",17],["unknown",7],["(",17],["String",18,7655],[")",17]],"s":[["case",12],[" ",17],["unknown",7],["(",17],["String",18],[")",17]]},{"p":["TokenKind","backtick"],"f":[["case",12],[" ",17],["backtick",7]],"s":[["case",12],[" ",17],["backtick",7]]},{"p":["TokenKind","ellipsis"],"f":[["case",12],[" ",17],["ellipsis",7]],"s":[["case",12],[" ",17],["ellipsis",7]]},{"p":["TokenKind","asKeyword"],"f":[["case",12],[" ",17],["asKeyword",7]],"s":[["case",12],[" ",17],["asKeyword",7]]},{"p":["TokenKind","backslash"],"f":[["case",12],[" ",17],["backslash",7]],"s":[["case",12],[" ",17],["backslash",7]]},{"p":["TokenKind","doKeyword"],"f":[["case",12],[" ",17],["doKeyword",7]],"s":[["case",12],[" ",17],["doKeyword",7]]},{"p":["TokenKind","ifKeyword"],"f":[["case",12],[" ",17],["ifKeyword",7]],"s":[["case",12],[" ",17],["ifKeyword",7]]},{"p":["TokenKind","inKeyword"],"f":[["case",12],[" ",17],["inKeyword",7]],"s":[["case",12],[" ",17],["inKeyword",7]]},{"p":["TokenKind","isKeyword"],"f":[["case",12],[" ",17],["isKeyword",7]],"s":[["case",12],[" ",17],["isKeyword",7]]},{"p":["TokenKind","leftAngle"],"f":[["case",12],[" ",17],["leftAngle",7]],"s":[["case",12],[" ",17],["leftAngle",7]]},{"p":["TokenKind","leftBrace"],"f":[["case",12],[" ",17],["leftBrace",7]],"s":[["case",12],[" ",17],["leftBrace",7]]},{"p":["TokenKind","leftParen"],"f":[["case",12],[" ",17],["leftParen",7]],"s":[["case",12],[" ",17],["leftParen",7]]},{"p":["TokenKind","semicolon"],"f":[["case",12],[" ",17],["semicolon",7]],"s":[["case",12],[" ",17],["semicolon",7]]},{"p":["AccessPathSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessPathSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["ImportDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ImportDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ImportDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ImportDeclSyntaxBuilder",18,28],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ImportDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ImportDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ImportDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ImportDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["ReturnStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ReturnStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ReturnStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ReturnStmtSyntaxBuilder",18,30],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ReturnStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ReturnStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ReturnStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ReturnStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["SourceFileSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SourceFileSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SourceFileSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SourceFileSyntaxBuilder",18,32],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SourceFileSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SourceFileSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SourceFileSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SourceFileSyntax` with all the fields populated in the builder\n           closure."},{"p":["StructDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `StructDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["StructDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["StructDeclSyntaxBuilder",18,34],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["StructDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `StructDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `StructDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `StructDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["SwitchCaseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SwitchCaseSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SwitchCaseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SwitchCaseSyntaxBuilder",18,36],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SwitchCaseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SwitchCaseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SwitchCaseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SwitchCaseSyntax` with all the fields populated in the builder\n           closure."},{"p":["SwitchStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SwitchStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SwitchStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SwitchStmtSyntaxBuilder",18,38],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SwitchStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SwitchStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SwitchStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SwitchStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["CatchClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CatchClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["CatchClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CatchClauseSyntaxBuilder",18,40],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CatchClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CatchClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CatchClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CatchClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["ClosureExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ClosureExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClosureExprSyntaxBuilder",18,42],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClosureExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClosureExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClosureExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClosureExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["KeyPathExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `KeyPathExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["KeyPathExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["KeyPathExprSyntaxBuilder",18,44],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["KeyPathExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `KeyPathExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `KeyPathExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `KeyPathExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["TernaryExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TernaryExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TernaryExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TernaryExprSyntaxBuilder",18,46],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TernaryExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TernaryExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TernaryExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TernaryExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["UnknownDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnknownDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["UnknownExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnknownExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["UnknownStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnknownStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["UnknownTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnknownTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["WhereClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `WhereClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["WhereClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["WhereClauseSyntaxBuilder",18,52],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["WhereClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `WhereClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `WhereClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `WhereClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["AccessorDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessorDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AccessorDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AccessorDeclSyntaxBuilder",18,54],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AccessorDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AccessorDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AccessorDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AccessorDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["AccessorListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessorListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["ArrayElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ArrayElementSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ArrayElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ArrayElementSyntaxBuilder",18,58],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ArrayElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ArrayElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ArrayElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ArrayElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["CaseItemListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CaseItemListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["ClosureParamSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureParamSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ClosureParamSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClosureParamSyntaxBuilder",18,62],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClosureParamSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClosureParamSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClosureParamSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClosureParamSyntax` with all the fields populated in the builder\n           closure."},{"p":["ContinueStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ContinueStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ContinueStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ContinueStmtSyntaxBuilder",18,64],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ContinueStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ContinueStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ContinueStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ContinueStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeclModifierSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclModifierSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DeclModifierSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeclModifierSyntaxBuilder",18,66],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeclModifierSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeclModifierSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeclModifierSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeclModifierSyntax` with all the fields populated in the builder\n           closure."},{"p":["EnumCaseDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `EnumCaseDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["EnumCaseDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["EnumCaseDeclSyntaxBuilder",18,68],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["EnumCaseDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `EnumCaseDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `EnumCaseDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `EnumCaseDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["FunctionDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FunctionDeclSyntaxBuilder",18,70],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FunctionDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FunctionDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FunctionDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FunctionDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["FunctionTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FunctionTypeSyntaxBuilder",18,72],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FunctionTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FunctionTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FunctionTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FunctionTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["IfConfigDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IfConfigDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["IfConfigDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IfConfigDeclSyntaxBuilder",18,74],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IfConfigDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IfConfigDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IfConfigDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IfConfigDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["MetatypeTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MetatypeTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["MetatypeTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MetatypeTypeSyntaxBuilder",18,76],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MetatypeTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MetatypeTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MetatypeTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MetatypeTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["ModifierListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ModifierListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["ObjCSelectorSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjCSelectorSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["OperatorDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `OperatorDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["OperatorDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["OperatorDeclSyntaxBuilder",18,82],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["OperatorDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `OperatorDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `OperatorDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `OperatorDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["OptionalTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `OptionalTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["OptionalTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["OptionalTypeSyntaxBuilder",18,84],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["OptionalTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `OptionalTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `OptionalTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `OptionalTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["ProtocolDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ProtocolDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ProtocolDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ProtocolDeclSyntaxBuilder",18,86],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ProtocolDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ProtocolDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ProtocolDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ProtocolDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["ReturnClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ReturnClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ReturnClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ReturnClauseSyntaxBuilder",18,88],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ReturnClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ReturnClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ReturnClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ReturnClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["SequenceExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SequenceExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SequenceExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SequenceExprSyntaxBuilder",18,90],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SequenceExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SequenceExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SequenceExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SequenceExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["SuperRefExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SuperRefExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SuperRefExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SuperRefExprSyntaxBuilder",18,92],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SuperRefExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SuperRefExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SuperRefExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SuperRefExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["TuplePatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TuplePatternSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TuplePatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TuplePatternSyntaxBuilder",18,94],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TuplePatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TuplePatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TuplePatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TuplePatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["VariableDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `VariableDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["VariableDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["VariableDeclSyntaxBuilder",18,96],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["VariableDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `VariableDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `VariableDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `VariableDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["VersionTupleSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `VersionTupleSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["VersionTupleSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["VersionTupleSyntaxBuilder",18,98],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["VersionTupleSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `VersionTupleSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `VersionTupleSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `VersionTupleSyntax` with all the fields populated in the builder\n           closure."},{"p":["AccessorBlockSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessorBlockSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AccessorBlockSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AccessorBlockSyntaxBuilder",18,100],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AccessorBlockSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AccessorBlockSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AccessorBlockSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AccessorBlockSyntax` with all the fields populated in the builder\n           closure."},{"p":["AsTypePatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AsTypePatternSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AsTypePatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AsTypePatternSyntaxBuilder",18,102],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AsTypePatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AsTypePatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AsTypePatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AsTypePatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["AttributeListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AttributeListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["CatchItemListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CatchItemListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["CodeBlockItemSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CodeBlockItemSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["CodeBlockItemSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CodeBlockItemSyntaxBuilder",18,108],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CodeBlockItemSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CodeBlockItemSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CodeBlockItemSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CodeBlockItemSyntax` with all the fields populated in the builder\n           closure."},{"p":["ExtensionDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ExtensionDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ExtensionDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ExtensionDeclSyntaxBuilder",18,110],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ExtensionDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ExtensionDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ExtensionDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ExtensionDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["InheritedTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `InheritedTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["InheritedTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["InheritedTypeSyntaxBuilder",18,112],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["InheritedTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `InheritedTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `InheritedTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `InheritedTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["IsTypePatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IsTypePatternSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["IsTypePatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IsTypePatternSyntaxBuilder",18,114],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IsTypePatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IsTypePatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IsTypePatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IsTypePatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["ObjcNamePieceSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjcNamePieceSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ObjcNamePieceSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ObjcNamePieceSyntaxBuilder",18,116],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ObjcNamePieceSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ObjcNamePieceSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ObjcNamePieceSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ObjcNamePieceSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundFileExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundFileExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PoundFileExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundFileExprSyntaxBuilder",18,118],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundFileExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundFileExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundFileExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundFileExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundLineExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundLineExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PoundLineExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundLineExprSyntaxBuilder",18,120],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundLineExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundLineExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundLineExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundLineExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["StringSegmentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `StringSegmentSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["StringSegmentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["StringSegmentSyntaxBuilder",18,122],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["StringSegmentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `StringSegmentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `StringSegmentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `StringSegmentSyntax` with all the fields populated in the builder\n           closure."},{"p":["SubscriptDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SubscriptDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SubscriptDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SubscriptDeclSyntaxBuilder",18,124],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SubscriptDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SubscriptDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SubscriptDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SubscriptDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["SubscriptExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SubscriptExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SubscriptExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SubscriptExprSyntaxBuilder",18,126],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SubscriptExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SubscriptExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SubscriptExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SubscriptExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["TypealiasDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TypealiasDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TypealiasDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TypealiasDeclSyntaxBuilder",18,128],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TypealiasDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TypealiasDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TypealiasDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TypealiasDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["AssignmentExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AssignmentExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AssignmentExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AssignmentExprSyntaxBuilder",18,130],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AssignmentExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AssignmentExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AssignmentExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AssignmentExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["AttributedTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AttributedTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AttributedTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AttributedTypeSyntaxBuilder",18,132],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AttributedTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AttributedTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AttributedTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AttributedTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["DictionaryExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DictionaryExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DictionaryExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DictionaryExprSyntaxBuilder",18,134],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DictionaryExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DictionaryExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DictionaryExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DictionaryExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["DictionaryTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DictionaryTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DictionaryTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DictionaryTypeSyntaxBuilder",18,136],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DictionaryTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DictionaryTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DictionaryTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DictionaryTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["ExpressionStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ExpressionStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ExpressionStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ExpressionStmtSyntaxBuilder",18,138],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ExpressionStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ExpressionStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ExpressionStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ExpressionStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["IdentifierExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IdentifierExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["IdentifierExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IdentifierExprSyntaxBuilder",18,140],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IdentifierExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IdentifierExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IdentifierExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IdentifierExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["IdentifierListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IdentifierListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["IfConfigClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IfConfigClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["IfConfigClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IfConfigClauseSyntaxBuilder",18,144],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IfConfigClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IfConfigClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IfConfigClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IfConfigClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["MemberDeclListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MemberDeclListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["NilLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `NilLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["NilLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["NilLiteralExprSyntaxBuilder",18,148],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["NilLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `NilLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `NilLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `NilLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PatternBindingSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PatternBindingSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PatternBindingSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PatternBindingSyntaxBuilder",18,150],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PatternBindingSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PatternBindingSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PatternBindingSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PatternBindingSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundErrorDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundErrorDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PoundErrorDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundErrorDeclSyntaxBuilder",18,152],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundErrorDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundErrorDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundErrorDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundErrorDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["SpecializeExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SpecializeExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SpecializeExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SpecializeExprSyntaxBuilder",18,154],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SpecializeExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SpecializeExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SpecializeExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SpecializeExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["SwitchCaseListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SwitchCaseListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["TypeAnnotationSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TypeAnnotationSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TypeAnnotationSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TypeAnnotationSyntaxBuilder",18,158],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TypeAnnotationSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TypeAnnotationSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TypeAnnotationSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TypeAnnotationSyntax` with all the fields populated in the builder\n           closure."},{"p":["UnknownPatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnknownPatternSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["CatchClauseListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CatchClauseListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["CompositionTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CompositionTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["CompositionTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CompositionTypeSyntaxBuilder",18,163],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CompositionTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CompositionTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CompositionTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CompositionTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["CustomAttributeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CustomAttributeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["CustomAttributeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CustomAttributeSyntaxBuilder",18,165],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CustomAttributeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CustomAttributeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CustomAttributeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CustomAttributeSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeclarationStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclarationStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DeclarationStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeclarationStmtSyntaxBuilder",18,167],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeclarationStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeclarationStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeclarationStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeclarationStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["EnumCaseElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `EnumCaseElementSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["EnumCaseElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["EnumCaseElementSyntaxBuilder",18,169],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["EnumCaseElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `EnumCaseElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `EnumCaseElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `EnumCaseElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["EnumCasePatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `EnumCasePatternSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["EnumCasePatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["EnumCasePatternSyntaxBuilder",18,171],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["EnumCasePatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `EnumCasePatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `EnumCasePatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `EnumCasePatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["FallthroughStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FallthroughStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["FallthroughStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FallthroughStmtSyntaxBuilder",18,173],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FallthroughStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FallthroughStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FallthroughStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FallthroughStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["ForcedValueExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ForcedValueExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ForcedValueExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ForcedValueExprSyntaxBuilder",18,175],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ForcedValueExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ForcedValueExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ForcedValueExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ForcedValueExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["GenericArgumentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericArgumentSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["GenericArgumentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GenericArgumentSyntaxBuilder",18,177],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GenericArgumentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GenericArgumentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GenericArgumentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GenericArgumentSyntax` with all the fields populated in the builder\n           closure."},{"p":["InitializerDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `InitializerDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["InitializerDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["InitializerDeclSyntaxBuilder",18,179],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["InitializerDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `InitializerDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `InitializerDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `InitializerDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["KeyPathBaseExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `KeyPathBaseExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["KeyPathBaseExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["KeyPathBaseExprSyntaxBuilder",18,181],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["KeyPathBaseExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `KeyPathBaseExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `KeyPathBaseExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `KeyPathBaseExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["MemberDeclBlockSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MemberDeclBlockSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["MemberDeclBlockSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MemberDeclBlockSyntaxBuilder",18,183],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MemberDeclBlockSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MemberDeclBlockSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MemberDeclBlockSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MemberDeclBlockSyntax` with all the fields populated in the builder\n           closure."},{"p":["ObjcKeyPathExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjcKeyPathExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ObjcKeyPathExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ObjcKeyPathExprSyntaxBuilder",18,185],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ObjcKeyPathExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ObjcKeyPathExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ObjcKeyPathExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ObjcKeyPathExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["OptionalPatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `OptionalPatternSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["OptionalPatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["OptionalPatternSyntaxBuilder",18,187],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["OptionalPatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `OptionalPatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `OptionalPatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `OptionalPatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["ParameterClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ParameterClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ParameterClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ParameterClauseSyntaxBuilder",18,189],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ParameterClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ParameterClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ParameterClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ParameterClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundAssertStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundAssertStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PoundAssertStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundAssertStmtSyntaxBuilder",18,191],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundAssertStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundAssertStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundAssertStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundAssertStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundColumnExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundColumnExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PoundColumnExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundColumnExprSyntaxBuilder",18,193],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundColumnExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundColumnExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundColumnExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundColumnExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundFileIDExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundFileIDExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PoundFileIDExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundFileIDExprSyntaxBuilder",18,195],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundFileIDExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundFileIDExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundFileIDExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundFileIDExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["RepeatWhileStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `RepeatWhileStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["RepeatWhileStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["RepeatWhileStmtSyntaxBuilder",18,197],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["RepeatWhileStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `RepeatWhileStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `RepeatWhileStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `RepeatWhileStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["SwitchCaseLabelSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SwitchCaseLabelSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SwitchCaseLabelSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SwitchCaseLabelSyntaxBuilder",18,199],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SwitchCaseLabelSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SwitchCaseLabelSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SwitchCaseLabelSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SwitchCaseLabelSyntax` with all the fields populated in the builder\n           closure."},{"p":["WildcardPatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `WildcardPatternSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["WildcardPatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["WildcardPatternSyntaxBuilder",18,201],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["WildcardPatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `WildcardPatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `WildcardPatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `WildcardPatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["ArrayElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ArrayElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["ClosureParamListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureParamListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["ClosureSignatureSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureSignatureSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ClosureSignatureSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClosureSignatureSyntaxBuilder",18,207],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClosureSignatureSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClosureSignatureSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClosureSignatureSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClosureSignatureSyntax` with all the fields populated in the builder\n           closure."},{"p":["ConditionElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ConditionElementSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ConditionElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ConditionElementSyntaxBuilder",18,209],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ConditionElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ConditionElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ConditionElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ConditionElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeclNameArgumentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclNameArgumentSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DeclNameArgumentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeclNameArgumentSyntaxBuilder",18,211],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeclNameArgumentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeclNameArgumentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeclNameArgumentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeclNameArgumentSyntax` with all the fields populated in the builder\n           closure."},{"p":["FloatLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FloatLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["FloatLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FloatLiteralExprSyntaxBuilder",18,213],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FloatLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FloatLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FloatLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FloatLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionCallExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionCallExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["FunctionCallExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FunctionCallExprSyntaxBuilder",18,215],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FunctionCallExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FunctionCallExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FunctionCallExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FunctionCallExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionDeclNameSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionDeclNameSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["FunctionDeclNameSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FunctionDeclNameSyntaxBuilder",18,217],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FunctionDeclNameSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FunctionDeclNameSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FunctionDeclNameSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FunctionDeclNameSyntax` with all the fields populated in the builder\n           closure."},{"p":["GenericParameterSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericParameterSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["GenericParameterSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GenericParameterSyntaxBuilder",18,219],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GenericParameterSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GenericParameterSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GenericParameterSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GenericParameterSyntax` with all the fields populated in the builder\n           closure."},{"p":["MemberAccessExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MemberAccessExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["MemberAccessExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MemberAccessExprSyntaxBuilder",18,221],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MemberAccessExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MemberAccessExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MemberAccessExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MemberAccessExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["ObjcSelectorExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjcSelectorExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ObjcSelectorExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ObjcSelectorExprSyntaxBuilder",18,223],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ObjcSelectorExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ObjcSelectorExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ObjcSelectorExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ObjcSelectorExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PostfixUnaryExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PostfixUnaryExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PostfixUnaryExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PostfixUnaryExprSyntaxBuilder",18,225],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PostfixUnaryExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PostfixUnaryExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PostfixUnaryExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PostfixUnaryExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundWarningDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundWarningDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PoundWarningDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundWarningDeclSyntaxBuilder",18,227],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundWarningDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundWarningDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundWarningDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundWarningDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["RegexLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `RegexLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["RegexLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["RegexLiteralExprSyntaxBuilder",18,229],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["RegexLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `RegexLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `RegexLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `RegexLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["TupleExprElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TupleExprElementSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TupleExprElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TupleExprElementSyntaxBuilder",18,231],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TupleExprElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TupleExprElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TupleExprElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TupleExprElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["TupleTypeElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TupleTypeElementSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TupleTypeElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TupleTypeElementSyntaxBuilder",18,233],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TupleTypeElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TupleTypeElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TupleTypeElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TupleTypeElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["AccessorParameterSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessorParameterSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AccessorParameterSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AccessorParameterSyntaxBuilder",18,235],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AccessorParameterSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AccessorParameterSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AccessorParameterSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AccessorParameterSyntax` with all the fields populated in the builder\n           closure."},{"p":["AvailabilityEntrySyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AvailabilityEntrySyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AvailabilityEntrySyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AvailabilityEntrySyntaxBuilder",18,237],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AvailabilityEntrySyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AvailabilityEntrySyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AvailabilityEntrySyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AvailabilityEntrySyntax` with all the fields populated in the builder\n           closure."},{"p":["CodeBlockItemListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CodeBlockItemListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["DeclNameArgumentsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclNameArgumentsSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DeclNameArgumentsSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeclNameArgumentsSyntaxBuilder",18,241],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeclNameArgumentsSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeclNameArgumentsSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeclNameArgumentsSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeclNameArgumentsSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeinitializerDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeinitializerDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DeinitializerDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeinitializerDeclSyntaxBuilder",18,243],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeinitializerDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeinitializerDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeinitializerDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeinitializerDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["DictionaryElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DictionaryElementSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DictionaryElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DictionaryElementSyntaxBuilder",18,245],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DictionaryElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DictionaryElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DictionaryElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DictionaryElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["ExpressionPatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ExpressionPatternSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ExpressionPatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ExpressionPatternSyntaxBuilder",18,247],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ExpressionPatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ExpressionPatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ExpressionPatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ExpressionPatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["ExpressionSegmentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ExpressionSegmentSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ExpressionSegmentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ExpressionSegmentSyntaxBuilder",18,249],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ExpressionSegmentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ExpressionSegmentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ExpressionSegmentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ExpressionSegmentSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionParameterSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionParameterSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["FunctionParameterSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FunctionParameterSyntaxBuilder",18,251],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FunctionParameterSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FunctionParameterSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FunctionParameterSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FunctionParameterSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionSignatureSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionSignatureSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["FunctionSignatureSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["FunctionSignatureSyntaxBuilder",18,253],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["FunctionSignatureSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `FunctionSignatureSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `FunctionSignatureSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `FunctionSignatureSyntax` with all the fields populated in the builder\n           closure."},{"p":["IdentifierPatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IdentifierPatternSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["IdentifierPatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IdentifierPatternSyntaxBuilder",18,255],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IdentifierPatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IdentifierPatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IdentifierPatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IdentifierPatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["InheritedTypeListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `InheritedTypeListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["InitializerClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `InitializerClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["InitializerClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["InitializerClauseSyntaxBuilder",18,259],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["InitializerClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `InitializerClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `InitializerClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `InitializerClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["NonEmptyTokenListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `NonEmptyTokenListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["ObjCSelectorPieceSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjCSelectorPieceSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ObjCSelectorPieceSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ObjCSelectorPieceSyntaxBuilder",18,263],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ObjCSelectorPieceSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ObjCSelectorPieceSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ObjCSelectorPieceSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ObjCSelectorPieceSyntax` with all the fields populated in the builder\n           closure."},{"p":["ObjectLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjectLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ObjectLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ObjectLiteralExprSyntaxBuilder",18,265],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ObjectLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ObjectLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ObjectLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ObjectLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundFilePathExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundFilePathExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PoundFilePathExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundFilePathExprSyntaxBuilder",18,267],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundFilePathExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundFilePathExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundFilePathExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundFilePathExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundFunctionExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundFunctionExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PoundFunctionExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundFunctionExprSyntaxBuilder",18,269],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundFunctionExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundFunctionExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundFunctionExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundFunctionExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["QualifiedDeclNameSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `QualifiedDeclNameSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["QualifiedDeclNameSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["QualifiedDeclNameSyntaxBuilder",18,271],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["QualifiedDeclNameSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `QualifiedDeclNameSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `QualifiedDeclNameSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `QualifiedDeclNameSyntax` with all the fields populated in the builder\n           closure."},{"p":["StringLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `StringLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["StringLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["StringLiteralExprSyntaxBuilder",18,273],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["StringLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `StringLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `StringLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `StringLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["AssociatedtypeDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AssociatedtypeDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AssociatedtypeDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AssociatedtypeDeclSyntaxBuilder",18,275],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AssociatedtypeDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AssociatedtypeDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AssociatedtypeDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AssociatedtypeDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["BinaryOperatorExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `BinaryOperatorExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["BinaryOperatorExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["BinaryOperatorExprSyntaxBuilder",18,277],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["BinaryOperatorExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `BinaryOperatorExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `BinaryOperatorExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `BinaryOperatorExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["BooleanLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `BooleanLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["BooleanLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["BooleanLiteralExprSyntaxBuilder",18,279],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["BooleanLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `BooleanLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `BooleanLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `BooleanLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["ClosureCaptureItemSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureCaptureItemSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ClosureCaptureItemSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClosureCaptureItemSyntaxBuilder",18,281],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClosureCaptureItemSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClosureCaptureItemSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClosureCaptureItemSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClosureCaptureItemSyntax` with all the fields populated in the builder\n           closure."},{"p":["ElseIfContinuationSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ElseIfContinuationSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ElseIfContinuationSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ElseIfContinuationSyntaxBuilder",18,283],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ElseIfContinuationSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ElseIfContinuationSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ElseIfContinuationSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ElseIfContinuationSyntax` with all the fields populated in the builder\n           closure."},{"p":["GenericRequirementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericRequirementSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["GenericRequirementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GenericRequirementSyntaxBuilder",18,285],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GenericRequirementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GenericRequirementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GenericRequirementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GenericRequirementSyntax` with all the fields populated in the builder\n           closure."},{"p":["GenericWhereClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericWhereClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["GenericWhereClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GenericWhereClauseSyntaxBuilder",18,287],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GenericWhereClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GenericWhereClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GenericWhereClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GenericWhereClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["IfConfigClauseListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IfConfigClauseListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["IntegerLiteralExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IntegerLiteralExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["IntegerLiteralExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IntegerLiteralExprSyntaxBuilder",18,291],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IntegerLiteralExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IntegerLiteralExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IntegerLiteralExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IntegerLiteralExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["MemberDeclListItemSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MemberDeclListItemSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["MemberDeclListItemSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MemberDeclListItemSyntaxBuilder",18,293],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MemberDeclListItemSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MemberDeclListItemSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MemberDeclListItemSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MemberDeclListItemSyntax` with all the fields populated in the builder\n           closure."},{"p":["PatternBindingListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PatternBindingListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["PoundDsohandleExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundDsohandleExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PoundDsohandleExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundDsohandleExprSyntaxBuilder",18,297],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundDsohandleExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundDsohandleExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundDsohandleExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundDsohandleExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrefixOperatorExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrefixOperatorExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PrefixOperatorExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrefixOperatorExprSyntaxBuilder",18,299],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrefixOperatorExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrefixOperatorExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrefixOperatorExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrefixOperatorExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["SwitchDefaultLabelSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SwitchDefaultLabelSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SwitchDefaultLabelSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SwitchDefaultLabelSyntaxBuilder",18,301],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SwitchDefaultLabelSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SwitchDefaultLabelSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SwitchDefaultLabelSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SwitchDefaultLabelSyntax` with all the fields populated in the builder\n           closure."},{"p":["AccessLevelModifierSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessLevelModifierSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AccessLevelModifierSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AccessLevelModifierSyntaxBuilder",18,303],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AccessLevelModifierSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AccessLevelModifierSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AccessLevelModifierSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AccessLevelModifierSyntax` with all the fields populated in the builder\n           closure."},{"p":["AccessPathComponentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AccessPathComponentSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AccessPathComponentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AccessPathComponentSyntaxBuilder",18,305],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AccessPathComponentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AccessPathComponentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AccessPathComponentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AccessPathComponentSyntax` with all the fields populated in the builder\n           closure."},{"p":["EnumCaseElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `EnumCaseElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["GenericArgumentListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericArgumentListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["PostfixIfConfigExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PostfixIfConfigExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PostfixIfConfigExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PostfixIfConfigExprSyntaxBuilder",18,311],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PostfixIfConfigExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PostfixIfConfigExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PostfixIfConfigExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PostfixIfConfigExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundSourceLocationSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundSourceLocationSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PoundSourceLocationSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundSourceLocationSyntaxBuilder",18,313],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundSourceLocationSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundSourceLocationSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundSourceLocationSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundSourceLocationSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrecedenceGroupDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PrecedenceGroupDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrecedenceGroupDeclSyntaxBuilder",18,315],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrecedenceGroupDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrecedenceGroupDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrecedenceGroupDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrecedenceGroupDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["SameTypeRequirementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SameTypeRequirementSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SameTypeRequirementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SameTypeRequirementSyntaxBuilder",18,317],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SameTypeRequirementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SameTypeRequirementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SameTypeRequirementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SameTypeRequirementSyntax` with all the fields populated in the builder\n           closure."},{"p":["TargetFunctionEntrySyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TargetFunctionEntrySyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TargetFunctionEntrySyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TargetFunctionEntrySyntaxBuilder",18,319],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TargetFunctionEntrySyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TargetFunctionEntrySyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TargetFunctionEntrySyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TargetFunctionEntrySyntax` with all the fields populated in the builder\n           closure."},{"p":["TuplePatternElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TuplePatternElementSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TuplePatternElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TuplePatternElementSyntaxBuilder",18,321],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TuplePatternElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TuplePatternElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TuplePatternElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TuplePatternElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["ValueBindingPatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ValueBindingPatternSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ValueBindingPatternSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ValueBindingPatternSyntaxBuilder",18,323],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ValueBindingPatternSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ValueBindingPatternSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ValueBindingPatternSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ValueBindingPatternSyntax` with all the fields populated in the builder\n           closure."},{"p":["AvailabilityArgumentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AvailabilityArgumentSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AvailabilityArgumentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AvailabilityArgumentSyntaxBuilder",18,325],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AvailabilityArgumentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AvailabilityArgumentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AvailabilityArgumentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AvailabilityArgumentSyntax` with all the fields populated in the builder\n           closure."},{"p":["AvailabilitySpecListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AvailabilitySpecListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["ClassRestrictionTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClassRestrictionTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ClassRestrictionTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClassRestrictionTypeSyntaxBuilder",18,329],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClassRestrictionTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClassRestrictionTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClassRestrictionTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClassRestrictionTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["ConditionElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ConditionElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["DeclNameArgumentListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclNameArgumentListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["GenericParameterListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericParameterListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["MemberTypeIdentifierSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MemberTypeIdentifierSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["MemberTypeIdentifierSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MemberTypeIdentifierSyntaxBuilder",18,337],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MemberTypeIdentifierSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MemberTypeIdentifierSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MemberTypeIdentifierSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MemberTypeIdentifierSyntax` with all the fields populated in the builder\n           closure."},{"p":["OptionalChainingExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `OptionalChainingExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["OptionalChainingExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["OptionalChainingExprSyntaxBuilder",18,339],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["OptionalChainingExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `OptionalChainingExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `OptionalChainingExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `OptionalChainingExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["SimpleTypeIdentifierSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SimpleTypeIdentifierSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SimpleTypeIdentifierSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SimpleTypeIdentifierSyntaxBuilder",18,341],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SimpleTypeIdentifierSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SimpleTypeIdentifierSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SimpleTypeIdentifierSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SimpleTypeIdentifierSyntax` with all the fields populated in the builder\n           closure."},{"p":["TupleExprElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TupleExprElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["TupleTypeElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TupleTypeElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["AvailabilityConditionSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AvailabilityConditionSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AvailabilityConditionSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AvailabilityConditionSyntaxBuilder",18,347],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AvailabilityConditionSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AvailabilityConditionSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AvailabilityConditionSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AvailabilityConditionSyntax` with all the fields populated in the builder\n           closure."},{"p":["DictionaryElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DictionaryElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["DiscardAssignmentExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DiscardAssignmentExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DiscardAssignmentExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DiscardAssignmentExprSyntaxBuilder",18,351],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DiscardAssignmentExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DiscardAssignmentExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DiscardAssignmentExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DiscardAssignmentExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["EditorPlaceholderExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `EditorPlaceholderExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["EditorPlaceholderExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["EditorPlaceholderExprSyntaxBuilder",18,353],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["EditorPlaceholderExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `EditorPlaceholderExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `EditorPlaceholderExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `EditorPlaceholderExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["FunctionParameterListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `FunctionParameterListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["GenericArgumentClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericArgumentClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["GenericArgumentClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GenericArgumentClauseSyntaxBuilder",18,357],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GenericArgumentClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GenericArgumentClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GenericArgumentClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GenericArgumentClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrimaryAssociatedTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrimaryAssociatedTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PrimaryAssociatedTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrimaryAssociatedTypeSyntaxBuilder",18,359],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrimaryAssociatedTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrimaryAssociatedTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrimaryAssociatedTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrimaryAssociatedTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["StringLiteralSegmentsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `StringLiteralSegmentsSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["SymbolicReferenceExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SymbolicReferenceExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SymbolicReferenceExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SymbolicReferenceExprSyntaxBuilder",18,363],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SymbolicReferenceExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SymbolicReferenceExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SymbolicReferenceExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SymbolicReferenceExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["TypeInheritanceClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TypeInheritanceClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TypeInheritanceClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TypeInheritanceClauseSyntaxBuilder",18,365],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TypeInheritanceClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TypeInheritanceClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TypeInheritanceClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TypeInheritanceClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["TypeInitializerClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TypeInitializerClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TypeInitializerClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TypeInitializerClauseSyntaxBuilder",18,367],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TypeInitializerClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TypeInitializerClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TypeInitializerClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TypeInitializerClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["UnresolvedPatternExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnresolvedPatternExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["UnresolvedPatternExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["UnresolvedPatternExprSyntaxBuilder",18,369],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["UnresolvedPatternExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `UnresolvedPatternExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `UnresolvedPatternExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `UnresolvedPatternExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["ClosureCaptureItemListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureCaptureItemListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["CompositionTypeElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CompositionTypeElementSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["CompositionTypeElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CompositionTypeElementSyntaxBuilder",18,373],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CompositionTypeElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CompositionTypeElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CompositionTypeElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CompositionTypeElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["ConformanceRequirementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ConformanceRequirementSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ConformanceRequirementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ConformanceRequirementSyntaxBuilder",18,375],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ConformanceRequirementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ConformanceRequirementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ConformanceRequirementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ConformanceRequirementSyntax` with all the fields populated in the builder\n           closure."},{"p":["DifferentiabilityParamSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DifferentiabilityParamSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DifferentiabilityParamSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DifferentiabilityParamSyntaxBuilder",18,377],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DifferentiabilityParamSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DifferentiabilityParamSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DifferentiabilityParamSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DifferentiabilityParamSyntax` with all the fields populated in the builder\n           closure."},{"p":["GenericParameterClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericParameterClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["GenericParameterClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GenericParameterClauseSyntaxBuilder",18,379],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GenericParameterClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GenericParameterClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GenericParameterClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GenericParameterClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["GenericRequirementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GenericRequirementListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["LabeledSpecializeEntrySyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `LabeledSpecializeEntrySyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["LabeledSpecializeEntrySyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["LabeledSpecializeEntrySyntaxBuilder",18,383],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["LabeledSpecializeEntrySyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `LabeledSpecializeEntrySyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `LabeledSpecializeEntrySyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `LabeledSpecializeEntrySyntax` with all the fields populated in the builder\n           closure."},{"p":["ClosureCaptureSignatureSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClosureCaptureSignatureSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ClosureCaptureSignatureSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClosureCaptureSignatureSyntaxBuilder",18,385],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClosureCaptureSignatureSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClosureCaptureSignatureSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClosureCaptureSignatureSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClosureCaptureSignatureSyntax` with all the fields populated in the builder\n           closure."},{"p":["DifferentiabilityParamsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DifferentiabilityParamsSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DifferentiabilityParamsSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DifferentiabilityParamsSyntaxBuilder",18,387],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DifferentiabilityParamsSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DifferentiabilityParamsSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DifferentiabilityParamsSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DifferentiabilityParamsSyntax` with all the fields populated in the builder\n           closure."},{"p":["PoundSourceLocationArgsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PoundSourceLocationArgsSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PoundSourceLocationArgsSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PoundSourceLocationArgsSyntaxBuilder",18,389],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PoundSourceLocationArgsSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PoundSourceLocationArgsSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PoundSourceLocationArgsSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PoundSourceLocationArgsSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrecedenceGroupNameListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupNameListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["PrecedenceGroupRelationSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupRelationSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PrecedenceGroupRelationSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrecedenceGroupRelationSyntaxBuilder",18,393],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrecedenceGroupRelationSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrecedenceGroupRelationSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrecedenceGroupRelationSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrecedenceGroupRelationSyntax` with all the fields populated in the builder\n           closure."},{"p":["TuplePatternElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TuplePatternElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["UnavailabilityConditionSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `UnavailabilityConditionSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["UnavailabilityConditionSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["UnavailabilityConditionSyntaxBuilder",18,397],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["UnavailabilityConditionSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `UnavailabilityConditionSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `UnavailabilityConditionSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `UnavailabilityConditionSyntax` with all the fields populated in the builder\n           closure."},{"p":["MatchingPatternConditionSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MatchingPatternConditionSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["MatchingPatternConditionSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MatchingPatternConditionSyntaxBuilder",18,399],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MatchingPatternConditionSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MatchingPatternConditionSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MatchingPatternConditionSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MatchingPatternConditionSyntax` with all the fields populated in the builder\n           closure."},{"p":["OptionalBindingConditionSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `OptionalBindingConditionSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["OptionalBindingConditionSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["OptionalBindingConditionSyntaxBuilder",18,401],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["OptionalBindingConditionSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `OptionalBindingConditionSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `OptionalBindingConditionSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `OptionalBindingConditionSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrecedenceGroupAssignmentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupAssignmentSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PrecedenceGroupAssignmentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrecedenceGroupAssignmentSyntaxBuilder",18,403],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrecedenceGroupAssignmentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrecedenceGroupAssignmentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrecedenceGroupAssignmentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrecedenceGroupAssignmentSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrimaryAssociatedTypeListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrimaryAssociatedTypeListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["CompositionTypeElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CompositionTypeElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["DifferentiabilityParamListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DifferentiabilityParamListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["OperatorPrecedenceAndTypesSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `OperatorPrecedenceAndTypesSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["OperatorPrecedenceAndTypesSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["OperatorPrecedenceAndTypesSyntaxBuilder",18,411],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["OperatorPrecedenceAndTypesSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `OperatorPrecedenceAndTypesSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `OperatorPrecedenceAndTypesSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `OperatorPrecedenceAndTypesSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrecedenceGroupNameElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupNameElementSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PrecedenceGroupNameElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrecedenceGroupNameElementSyntaxBuilder",18,413],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrecedenceGroupNameElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrecedenceGroupNameElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrecedenceGroupNameElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrecedenceGroupNameElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["AvailabilityLabeledArgumentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AvailabilityLabeledArgumentSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AvailabilityLabeledArgumentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AvailabilityLabeledArgumentSyntaxBuilder",18,415],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AvailabilityLabeledArgumentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AvailabilityLabeledArgumentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AvailabilityLabeledArgumentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AvailabilityLabeledArgumentSyntax` with all the fields populated in the builder\n           closure."},{"p":["SpecializeAttributeSpecListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SpecializeAttributeSpecListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["ImplementsAttributeArgumentsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ImplementsAttributeArgumentsSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ImplementsAttributeArgumentsSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ImplementsAttributeArgumentsSyntaxBuilder",18,419],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ImplementsAttributeArgumentsSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ImplementsAttributeArgumentsSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ImplementsAttributeArgumentsSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ImplementsAttributeArgumentsSyntax` with all the fields populated in the builder\n           closure."},{"p":["NamedAttributeStringArgumentSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `NamedAttributeStringArgumentSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["NamedAttributeStringArgumentSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["NamedAttributeStringArgumentSyntaxBuilder",18,421],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["NamedAttributeStringArgumentSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `NamedAttributeStringArgumentSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `NamedAttributeStringArgumentSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `NamedAttributeStringArgumentSyntax` with all the fields populated in the builder\n           closure."},{"p":["PrecedenceGroupAssociativitySyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupAssociativitySyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PrecedenceGroupAssociativitySyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["PrecedenceGroupAssociativitySyntaxBuilder",18,423],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["PrecedenceGroupAssociativitySyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `PrecedenceGroupAssociativitySyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `PrecedenceGroupAssociativitySyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `PrecedenceGroupAssociativitySyntax` with all the fields populated in the builder\n           closure."},{"p":["PrecedenceGroupAttributeListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PrecedenceGroupAttributeListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["DifferentiabilityParamsClauseSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DifferentiabilityParamsClauseSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DifferentiabilityParamsClauseSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DifferentiabilityParamsClauseSyntaxBuilder",18,427],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DifferentiabilityParamsClauseSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DifferentiabilityParamsClauseSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DifferentiabilityParamsClauseSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DifferentiabilityParamsClauseSyntax` with all the fields populated in the builder\n           closure."},{"p":["AvailabilityVersionRestrictionSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AvailabilityVersionRestrictionSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AvailabilityVersionRestrictionSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AvailabilityVersionRestrictionSyntaxBuilder",18,429],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AvailabilityVersionRestrictionSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AvailabilityVersionRestrictionSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AvailabilityVersionRestrictionSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AvailabilityVersionRestrictionSyntax` with all the fields populated in the builder\n           closure."},{"p":["MultipleTrailingClosureElementSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MultipleTrailingClosureElementSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["MultipleTrailingClosureElementSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["MultipleTrailingClosureElementSyntaxBuilder",18,431],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["MultipleTrailingClosureElementSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `MultipleTrailingClosureElementSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `MultipleTrailingClosureElementSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `MultipleTrailingClosureElementSyntax` with all the fields populated in the builder\n           closure."},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ImplicitlyUnwrappedOptionalTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder",18,433],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ImplicitlyUnwrappedOptionalTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ImplicitlyUnwrappedOptionalTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ImplicitlyUnwrappedOptionalTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["DifferentiableAttributeArgumentsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DifferentiableAttributeArgumentsSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DifferentiableAttributeArgumentsSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DifferentiableAttributeArgumentsSyntaxBuilder",18,435],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DifferentiableAttributeArgumentsSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DifferentiableAttributeArgumentsSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DifferentiableAttributeArgumentsSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DifferentiableAttributeArgumentsSyntax` with all the fields populated in the builder\n           closure."},{"p":["MultipleTrailingClosureElementListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `MultipleTrailingClosureElementListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DerivativeRegistrationAttributeArgumentsSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DerivativeRegistrationAttributeArgumentsSyntaxBuilder",18,439],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DerivativeRegistrationAttributeArgumentsSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DerivativeRegistrationAttributeArgumentsSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DerivativeRegistrationAttributeArgumentsSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DerivativeRegistrationAttributeArgumentsSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DeclSyntax","init(_:)"],"f":[["init",10],["?<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],["?) ",17],["where",12],[" ",17],["S",18],[" : ",17],["DeclSyntaxProtocol",18,5]],"s":[["init",10],["?<",17],["S",0],[">(",17],["S",18],["?)",17]],"c":[["S",1,"DeclSyntaxProtocol",5]],"g":[["S",0,0]],"d":"Create a `DeclSyntax` node from a specialized optional syntax node."},{"p":["DeclSyntax","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["DeclSyntaxProtocol",18,5]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"DeclSyntaxProtocol",5]],"g":[["S",0,0]],"d":"Create a `DeclSyntax` node from a specialized syntax node."},{"p":["ExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ExprSyntax","init(_:)"],"f":[["init",10],["?<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],["?) ",17],["where",12],[" ",17],["S",18],[" : ",17],["ExprSyntaxProtocol",18,6]],"s":[["init",10],["?<",17],["S",0],[">(",17],["S",18],["?)",17]],"c":[["S",1,"ExprSyntaxProtocol",6]],"g":[["S",0,0]],"d":"Create a `ExprSyntax` node from a specialized optional syntax node."},{"p":["ExprSyntax","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["ExprSyntaxProtocol",18,6]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"ExprSyntaxProtocol",6]],"g":[["S",0,0]],"d":"Create a `ExprSyntax` node from a specialized syntax node."},{"p":["StmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `StmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["StmtSyntax","init(_:)"],"f":[["init",10],["?<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],["?) ",17],["where",12],[" ",17],["S",18],[" : ",17],["StmtSyntaxProtocol",18,7]],"s":[["init",10],["?<",17],["S",0],[">(",17],["S",18],["?)",17]],"c":[["S",1,"StmtSyntaxProtocol",7]],"g":[["S",0,0]],"d":"Create a `StmtSyntax` node from a specialized optional syntax node."},{"p":["StmtSyntax","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["StmtSyntaxProtocol",18,7]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"StmtSyntaxProtocol",7]],"g":[["S",0,0]],"d":"Create a `StmtSyntax` node from a specialized syntax node."},{"p":["TypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TypeSyntax","init(_:)"],"f":[["init",10],["?<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],["?) ",17],["where",12],[" ",17],["S",18],[" : ",17],["TypeSyntaxProtocol",18,8]],"s":[["init",10],["?<",17],["S",0],[">(",17],["S",18],["?)",17]],"c":[["S",1,"TypeSyntaxProtocol",8]],"g":[["S",0,0]],"d":"Create a `TypeSyntax` node from a specialized optional syntax node."},{"p":["TypeSyntax","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["TypeSyntaxProtocol",18,8]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"TypeSyntaxProtocol",8]],"g":[["S",0,0]],"d":"Create a `TypeSyntax` node from a specialized syntax node."},{"p":["TokenSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TokenSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AsExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AsExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AsExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AsExprSyntaxBuilder",18,446],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AsExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AsExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AsExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AsExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["DoStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DoStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DoStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DoStmtSyntaxBuilder",18,448],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DoStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DoStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DoStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DoStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["IfStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IfStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["IfStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IfStmtSyntaxBuilder",18,450],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IfStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IfStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IfStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IfStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["IsExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `IsExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["IsExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["IsExprSyntaxBuilder",18,452],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["IsExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `IsExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `IsExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `IsExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["PatternSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `PatternSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["PatternSyntax","init(_:)"],"f":[["init",10],["?<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],["?) ",17],["where",12],[" ",17],["S",18],[" : ",17],["PatternSyntaxProtocol",18,11]],"s":[["init",10],["?<",17],["S",0],[">(",17],["S",18],["?)",17]],"c":[["S",1,"PatternSyntaxProtocol",11]],"g":[["S",0,0]],"d":"Create a `PatternSyntax` node from a specialized optional syntax node."},{"p":["PatternSyntax","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["PatternSyntaxProtocol",18,11]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"PatternSyntaxProtocol",11]],"g":[["S",0,0]],"d":"Create a `PatternSyntax` node from a specialized syntax node."},{"p":["TryExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TryExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TryExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TryExprSyntaxBuilder",18,455],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TryExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TryExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TryExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TryExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["UnknownSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Convert the given `Syntax` node to an `UnknownSyntax` if possible. Return\n`nil` if the conversion is not possible.","o":1410},{"p":["CaseItemSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CaseItemSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["CaseItemSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CaseItemSyntaxBuilder",18,458],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CaseItemSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CaseItemSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CaseItemSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CaseItemSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeclNameSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeclNameSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DeclNameSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeclNameSyntaxBuilder",18,460],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeclNameSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeclNameSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeclNameSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeclNameSyntax` with all the fields populated in the builder\n           closure."},{"p":["EnumDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `EnumDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["EnumDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["EnumDeclSyntaxBuilder",18,462],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["EnumDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `EnumDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `EnumDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `EnumDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["ExprListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ExprListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["ObjcNameSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ObjcNameSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["SomeTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `SomeTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["SomeTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["SomeTypeSyntaxBuilder",18,468],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["SomeTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `SomeTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `SomeTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `SomeTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["TypeExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TypeExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TypeExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TypeExprSyntaxBuilder",18,470],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TypeExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TypeExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TypeExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TypeExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["ArrayExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ArrayExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ArrayExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ArrayExprSyntaxBuilder",18,472],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ArrayExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ArrayExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ArrayExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ArrayExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["ArrayTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ArrayTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ArrayTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ArrayTypeSyntaxBuilder",18,474],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ArrayTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ArrayTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ArrayTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ArrayTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["ArrowExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ArrowExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ArrowExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ArrowExprSyntaxBuilder",18,476],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ArrowExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ArrowExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ArrowExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ArrowExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["AttributeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AttributeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AttributeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AttributeSyntaxBuilder",18,478],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AttributeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AttributeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AttributeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AttributeSyntax` with all the fields populated in the builder\n           closure."},{"p":["AwaitExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `AwaitExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["AwaitExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["AwaitExprSyntaxBuilder",18,480],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["AwaitExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `AwaitExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `AwaitExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `AwaitExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["BreakStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `BreakStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["BreakStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["BreakStmtSyntaxBuilder",18,482],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["BreakStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `BreakStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `BreakStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `BreakStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["CatchItemSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CatchItemSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["CatchItemSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CatchItemSyntaxBuilder",18,484],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CatchItemSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CatchItemSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CatchItemSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CatchItemSyntax` with all the fields populated in the builder\n           closure."},{"p":["ClassDeclSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ClassDeclSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ClassDeclSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ClassDeclSyntaxBuilder",18,486],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ClassDeclSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ClassDeclSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ClassDeclSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ClassDeclSyntax` with all the fields populated in the builder\n           closure."},{"p":["CodeBlockSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `CodeBlockSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["CodeBlockSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["CodeBlockSyntaxBuilder",18,488],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["CodeBlockSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `CodeBlockSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `CodeBlockSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `CodeBlockSyntax` with all the fields populated in the builder\n           closure."},{"p":["DeferStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `DeferStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["DeferStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["DeferStmtSyntaxBuilder",18,490],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["DeferStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `DeferStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `DeferStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `DeferStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["ElseBlockSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ElseBlockSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ElseBlockSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ElseBlockSyntaxBuilder",18,492],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ElseBlockSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ElseBlockSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ElseBlockSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ElseBlockSyntax` with all the fields populated in the builder\n           closure."},{"p":["ForInStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ForInStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ForInStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ForInStmtSyntaxBuilder",18,494],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ForInStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ForInStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ForInStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ForInStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["GuardStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `GuardStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["GuardStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["GuardStmtSyntaxBuilder",18,496],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["GuardStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `GuardStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `GuardStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `GuardStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["InOutExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `InOutExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["InOutExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["InOutExprSyntaxBuilder",18,498],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["InOutExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `InOutExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `InOutExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `InOutExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["ThrowStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `ThrowStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["ThrowStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["ThrowStmtSyntaxBuilder",18,500],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["ThrowStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `ThrowStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `ThrowStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `ThrowStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["TokenListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TokenListSyntax` if possible. Returns \n`nil` if the conversion is not possible.","o":1410},{"p":["TupleExprSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TupleExprSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TupleExprSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TupleExprSyntaxBuilder",18,504],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TupleExprSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TupleExprSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TupleExprSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TupleExprSyntax` with all the fields populated in the builder\n           closure."},{"p":["TupleTypeSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `TupleTypeSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["TupleTypeSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["TupleTypeSyntaxBuilder",18,506],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["TupleTypeSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `TupleTypeSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `TupleTypeSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `TupleTypeSyntax` with all the fields populated in the builder\n           closure."},{"p":["WhileStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `WhileStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["WhileStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["WhileStmtSyntaxBuilder",18,508],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["WhileStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `WhileStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `WhileStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `WhileStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["YieldListSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `YieldListSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["YieldListSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["YieldListSyntaxBuilder",18,510],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["YieldListSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `YieldListSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `YieldListSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `YieldListSyntax` with all the fields populated in the builder\n           closure."},{"p":["YieldStmtSyntax","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to a `YieldStmtSyntax` if possible. Returns\n`nil` if the conversion is not possible.","o":1410},{"p":["YieldStmtSyntax","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["build",2],[": (",17],["inout",12],[" ",17],["YieldStmtSyntaxBuilder",18,512],[") -> ",17],["Void",18,7776],[")",17]],"s":[["init",10],["((",17],["inout",12],[" ",17],["YieldStmtSyntaxBuilder",18],[") -> ",17],["Void",18],[")",17]],"d":"Creates a `YieldStmtSyntax` using the provided build function.\n- Parameter:\n  - build: A closure that will be invoked in order to initialize\n           the fields of the syntax node.\n           This closure is passed a `YieldStmtSyntaxBuilder` which you can use to\n           incrementally build the structure of the node.\n- Returns: A `YieldStmtSyntax` with all the fields populated in the builder\n           closure."},{"p":["Syntax","init(fromProtocol:)"],"f":[["init",10],["?(",17],["fromProtocol",1],[" ",17],["syntax",2],[": ",17],["SyntaxProtocol",18,15],["?)",17]],"s":[["init",10],["?(",17],["fromProtocol",1],[": ",17],["SyntaxProtocol",18],["?)",17]]},{"p":["Syntax","init(fromProtocol:)"],"f":[["init",10],["(",17],["fromProtocol",1],[" ",17],["syntax",2],[": ",17],["SyntaxProtocol",18,15],[")",17]],"s":[["init",10],["(",17],["fromProtocol",1],[": ",17],["SyntaxProtocol",18],[")",17]]},{"p":["Syntax","init(_:)"],"f":[["init",10],["?<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],["?) ",17],["where",12],[" ",17],["S",18],[" : ",17],["SyntaxProtocol",18,15]],"s":[["init",10],["?<",17],["S",0],[">(",17],["S",18],["?)",17]],"c":[["S",1,"SyntaxProtocol",15]],"g":[["S",0,0]],"d":"Create a `Syntax` node from a specialized optional syntax node."},{"p":["Syntax","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntax",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["SyntaxProtocol",18,15]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"SyntaxProtocol",15]],"g":[["S",0,0]],"d":"Create a `Syntax` node from a specialized syntax node.","o":1410},{"p":["SyntaxChildrenIndex","init(nilLiteral:)"],"f":[["init",10],["(",17],["nilLiteral",1],[": ())",17]],"s":[["init",10],["(",17],["nilLiteral",1],[": ())",17]],"o":7771},{"p":["SyntaxClassifications","init(_:in:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[", ",17],["in",1],[" ",17],["relRange",2],[": ",17],["ByteSourceRange",18,528],[")",17]],"s":[["init",10],["(",17],["Syntax",18],[", ",17],["in",1],[": ",17],["ByteSourceRange",18],[")",17]]},{"p":["SyntaxVisitor","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["SyntaxProtocol","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["syntaxNode",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["?(",17],["Syntax",18],[")",17]],"d":"Converts the given `Syntax` node to this type. Returns `nil` if the\nconversion is not possible."},{"p":["SyntaxRewriter","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["SourceEdit","init(range:replacementLength:)"],"f":[["init",10],["(",17],["range",1],[": ",17],["ByteSourceRange",18,528],[", ",17],["replacementLength",1],[": ",17],["Int",18,7706],[")",17]],"s":[["init",10],["(",17],["range",1],[": ",17],["ByteSourceRange",18],[", ",17],["replacementLength",1],[": ",17],["Int",18],[")",17]]},{"p":["SourceEdit","init(offset:length:replacementLength:)"],"f":[["init",10],["(",17],["offset",1],[": ",17],["Int",18,7706],[", ",17],["length",1],[": ",17],["Int",18,7706],[", ",17],["replacementLength",1],[": ",17],["Int",18,7706],[")",17]],"s":[["init",10],["(",17],["offset",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[", ",17],["replacementLength",1],[": ",17],["Int",18],[")",17]]},{"p":["SourceRange","init(from:)"],"f":[["init",10],["(",17],["from",1],[" ",17],["decoder",2],[": ",17],["Decoder",18,7782],[") ",17],["throws",12]],"s":[["init",10],["(",17],["from",1],[": ",17],["Decoder",18],[") ",17],["throws",12]],"o":7705},{"p":["SourceRange","init(start:end:)"],"f":[["init",10],["(",17],["start",1],[": ",17],["SourceLocation",18,527],[", ",17],["end",1],[": ",17],["SourceLocation",18,527],[")",17]],"s":[["init",10],["(",17],["start",1],[": ",17],["SourceLocation",18],[", ",17],["end",1],[": ",17],["SourceLocation",18],[")",17]]},{"p":["SourceLength","init(utf8Length:)"],"f":[["init",10],["(",17],["utf8Length",1],[": ",17],["Int",18,7706],[")",17]],"s":[["init",10],["(",17],["utf8Length",1],[": ",17],["Int",18],[")",17]]},{"p":["SourceLength","init(of:)"],"f":[["init",10],["(",17],["of",1],[" ",17],["text",2],[": ",17],["String",18,7655],[")",17]],"s":[["init",10],["(",17],["of",1],[": ",17],["String",18],[")",17]],"d":"Construct the source length of a given text"},{"p":["TokenSequence","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["(",17],["Syntax",18],[")",17]]},{"p":["SourceLocation","init(from:)"],"f":[["init",10],["(",17],["from",1],[" ",17],["decoder",2],[": ",17],["Decoder",18,7782],[") ",17],["throws",12]],"s":[["init",10],["(",17],["from",1],[": ",17],["Decoder",18],[") ",17],["throws",12]],"o":7705},{"p":["SourceLocation","init(line:column:offset:file:)"],"f":[["init",10],["(",17],["line",1],[": ",17],["Int",18,7706],[", ",17],["column",1],[": ",17],["Int",18,7706],[", ",17],["offset",1],[": ",17],["Int",18,7706],[", ",17],["file",1],[": ",17],["String",18,7655],[")",17]],"s":[["init",10],["(",17],["line",1],[": ",17],["Int",18],[", ",17],["column",1],[": ",17],["Int",18],[", ",17],["offset",1],[": ",17],["Int",18],[", ",17],["file",1],[": ",17],["String",18],[")",17]]},{"p":["SourceLocation","init(offset:converter:)"],"f":[["init",10],["(",17],["offset",1],[": ",17],["Int",18,7706],[", ",17],["converter",1],[": ",17],["SourceLocationConverter",18,539],["? = nil)",17]],"s":[["init",10],["(",17],["offset",1],[": ",17],["Int",18],[", ",17],["converter",1],[": ",17],["SourceLocationConverter",18],["?)",17]],"d":"Initialize SourceLocation with a utf8 offset.\nIf a SourceLocationConverter is given, line, column and file will be populated;\notherwise they will be nil."},{"p":["SourcePresence","init(rawValue:)"],"f":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18,7655],[")",17]],"s":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18],[")",17]],"o":7700},{"p":["ByteSourceRange","init(offset:length:)"],"f":[["init",10],["(",17],["offset",1],[": ",17],["Int",18,7706],[", ",17],["length",1],[": ",17],["Int",18,7706],[")",17]],"s":[["init",10],["(",17],["offset",1],[": ",17],["Int",18],[", ",17],["length",1],[": ",17],["Int",18],[")",17]]},{"p":["ConcurrentEdits","init(concurrent:)"],"f":[["init",10],["(",17],["concurrent",1],[": [",17],["SourceEdit",18,522],["]) ",17],["throws",12]],"s":[["init",10],["(",17],["concurrent",1],[": [",17],["SourceEdit",18],["]) ",17],["throws",12]],"d":"Initialize this struct from edits that are already in a concurrent form\nand are guaranteed to satisfy the requirements posed above."},{"p":["ConcurrentEdits","init(fromSequential:)"],"f":[["init",10],["(",17],["fromSequential",1],[" ",17],["sequentialEdits",2],[": [",17],["SourceEdit",18,522],["])",17]],"s":[["init",10],["(",17],["fromSequential",1],[": [",17],["SourceEdit",18],["])",17]],"d":"Create concurrent from a set of sequential edits. Sequential edits are\napplied one after the other. Applying the first edit results in an\nintermediate string to which the second edit is applied etc. For example\napplying\n - insert 'x' at offset 0\n - insert 'y' at offset 1\n - insert 'z' at offset 2\n to '012345' results in 'xyz012345'."},{"p":["ConcurrentEdits","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["single",2],[": ",17],["SourceEdit",18,522],[")",17]],"s":[["init",10],["(",17],["SourceEdit",18],[")",17]],"d":"Construct a concurrent edits struct from a single edit. For a single edit,\nthere is no differentiation between being it being applied concurrently\nor sequentially."},{"p":["AbsolutePosition","init(utf8Offset:)"],"f":[["init",10],["(",17],["utf8Offset",1],[": ",17],["Int",18,7706],[")",17]],"s":[["init",10],["(",17],["utf8Offset",1],[": ",17],["Int",18],[")",17]]},{"p":["ReversedTokenSequence","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["init",10],["(",17],["Syntax",18],[")",17]]},{"p":["IncrementalParseLookup","init(transition:)"],"f":[["init",10],["(",17],["transition",1],[": ",17],["IncrementalParseTransition",18,540],[")",17]],"s":[["init",10],["(",17],["transition",1],[": ",17],["IncrementalParseTransition",18],[")",17]]},{"p":["SourceLocationConverter","init(file:tree:)"],"f":[["init",10],["(",17],["file",1],[": ",17],["String",18,7655],[", ",17],["tree",1],[": ",17],["SourceFileSyntax",18,31],[")",17]],"s":[["init",10],["(",17],["file",1],[": ",17],["String",18],[", ",17],["tree",1],[": ",17],["SourceFileSyntax",18],[")",17]],"d":"- Parameters:\n  - file: The file path associated with the syntax tree.\n  - tree: The syntax tree to convert positions to line/columns for."},{"p":["SourceLocationConverter","init(file:source:)"],"f":[["init",10],["(",17],["file",1],[": ",17],["String",18,7655],[", ",17],["source",1],[": ",17],["String",18,7655],[")",17]],"s":[["init",10],["(",17],["file",1],[": ",17],["String",18],[", ",17],["source",1],[": ",17],["String",18],[")",17]],"d":"- Parameters:\n  - file: The file path associated with the syntax tree.\n  - source: The source code to convert positions to line/columns for."},{"p":["IncrementalParseTransition","init(previousTree:edits:reusedNodeDelegate:)"],"f":[["init",10],["(",17],["previousTree",1],[": ",17],["SourceFileSyntax",18,31],[", ",17],["edits",1],[": ",17],["ConcurrentEdits",18,529],[", ",17],["reusedNodeDelegate",1],[": ",17],["IncrementalParseReusedNodeDelegate",18,16],["? = nil)",17]],"s":[["init",10],["(",17],["previousTree",1],[": ",17],["SourceFileSyntax",18],[", ",17],["edits",1],[": ",17],["ConcurrentEdits",18],[", ",17],["reusedNodeDelegate",1],[": ",17],["IncrementalParseReusedNodeDelegate",18],["?)",17]],"d":"- Parameters:\n  - previousTree: The previous tree to do lookups on.\n  - edits: The edits that have occurred since the last parse that resulted\n           in the new source that is about to be parsed.\n  - reusedNodeDelegate: Optional delegate to accept information about the\n                        reused regions and nodes."},{"p":["IncrementalParseTransition","init(previousTree:edits:reusedNodeDelegate:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["previousTree",1],[": ",17],["SourceFileSyntax",18,31],[", ",17],["edits",1],[": [",17],["SourceEdit",18,522],["], ",17],["reusedNodeDelegate",1],[": ",17],["IncrementalParseReusedNodeDelegate",18,16],["? = nil)",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["previousTree",1],[": ",17],["SourceFileSyntax",18],[", ",17],["edits",1],[": [",17],["SourceEdit",18],["], ",17],["reusedNodeDelegate",1],[": ",17],["IncrementalParseReusedNodeDelegate",18],["?)",17]],"a":{"a":{"d":true,"m":"Use the initializer taking 'ConcurrentEdits' instead"}},"d":"- Parameters:\n  - previousTree: The previous tree to do lookups on.\n  - edits: The edits that have occurred since the last parse that resulted\n           in the new source that is about to be parsed. There is a strict\n           requirement for the array of edits to:\n             1. not be overlapping.\n             2. should be in increasing source offset order.\n  - reusedNodeDelegate: Optional delegate to accept information about the\n                        reused regions and nodes."},{"p":["IncrementalParseReusedNodeCollector","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["Trivia","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["TriviaPiece",18,22],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["TriviaPiece",18],["...)",17]],"d":"Creates Trivia from the provided pieces.","o":7773},{"p":["Trivia","init(pieces:)"],"f":[["init",10],["(",17],["pieces",1],[": [",17],["TriviaPiece",18,22],["])",17]],"s":[["init",10],["(",17],["pieces",1],[": [",17],["TriviaPiece",18],["])",17]],"d":"Creates Trivia with the provided underlying pieces."},{"p":["AccessPathSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["AccessPathComponentSyntax",18,304],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["AccessPathComponentSyntax",18]],"o":7758},{"p":["AccessorListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["AccessorDeclSyntax",18,53],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["AccessorDeclSyntax",18]],"o":7758},{"p":["CaseItemListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["CaseItemSyntax",18,457],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["CaseItemSyntax",18]],"o":7758},{"p":["ModifierListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["DeclModifierSyntax",18,65],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["DeclModifierSyntax",18]],"o":7758},{"p":["ObjCSelectorSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["ObjCSelectorPieceSyntax",18,262],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ObjCSelectorPieceSyntax",18]],"o":7758},{"p":["AttributeListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Syntax",18,513],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["Syntax",18]],"o":7758},{"p":["CatchItemListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["CatchItemSyntax",18,483],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["CatchItemSyntax",18]],"o":7758},{"p":["IdentifierListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["TokenSyntax",18]],"o":7758},{"p":["MemberDeclListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["MemberDeclListItemSyntax",18,292],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["MemberDeclListItemSyntax",18]],"o":7758},{"p":["SwitchCaseListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Syntax",18,513],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["Syntax",18]],"o":7758},{"p":["CatchClauseListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["CatchClauseSyntax",18,39],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["CatchClauseSyntax",18]],"o":7758},{"p":["ArrayElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["ArrayElementSyntax",18,57],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ArrayElementSyntax",18]],"o":7758},{"p":["ClosureParamListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["ClosureParamSyntax",18,61],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ClosureParamSyntax",18]],"o":7758},{"p":["CodeBlockItemListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["CodeBlockItemSyntax",18,107],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["CodeBlockItemSyntax",18]],"o":7758},{"p":["InheritedTypeListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["InheritedTypeSyntax",18,111],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["InheritedTypeSyntax",18]],"o":7758},{"p":["NonEmptyTokenListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["TokenSyntax",18]],"o":7758},{"p":["IfConfigClauseListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["IfConfigClauseSyntax",18,143],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["IfConfigClauseSyntax",18]],"o":7758},{"p":["PatternBindingListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["PatternBindingSyntax",18,149],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["PatternBindingSyntax",18]],"o":7758},{"p":["EnumCaseElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["EnumCaseElementSyntax",18,168],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["EnumCaseElementSyntax",18]],"o":7758},{"p":["GenericArgumentListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["GenericArgumentSyntax",18,176],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["GenericArgumentSyntax",18]],"o":7758},{"p":["AvailabilitySpecListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["AvailabilityArgumentSyntax",18,324],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["AvailabilityArgumentSyntax",18]],"o":7758},{"p":["ConditionElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["ConditionElementSyntax",18,208],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ConditionElementSyntax",18]],"o":7758},{"p":["DeclNameArgumentListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["DeclNameArgumentSyntax",18,210],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["DeclNameArgumentSyntax",18]],"o":7758},{"p":["GenericParameterListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["GenericParameterSyntax",18,218],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["GenericParameterSyntax",18]],"o":7758},{"p":["TupleExprElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["TupleExprElementSyntax",18,230],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["TupleExprElementSyntax",18]],"o":7758},{"p":["TupleTypeElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["TupleTypeElementSyntax",18,232],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["TupleTypeElementSyntax",18]],"o":7758},{"p":["DictionaryElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["DictionaryElementSyntax",18,244],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["DictionaryElementSyntax",18]],"o":7758},{"p":["FunctionParameterListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["FunctionParameterSyntax",18,250],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["FunctionParameterSyntax",18]],"o":7758},{"p":["StringLiteralSegmentsSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Syntax",18,513],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["Syntax",18]],"o":7758},{"p":["ClosureCaptureItemListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["ClosureCaptureItemSyntax",18,280],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ClosureCaptureItemSyntax",18]],"o":7758},{"p":["GenericRequirementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["GenericRequirementSyntax",18,284],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["GenericRequirementSyntax",18]],"o":7758},{"p":["PrecedenceGroupNameListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["PrecedenceGroupNameElementSyntax",18,412],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["PrecedenceGroupNameElementSyntax",18]],"o":7758},{"p":["TuplePatternElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["TuplePatternElementSyntax",18,320],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["TuplePatternElementSyntax",18]],"o":7758},{"p":["PrimaryAssociatedTypeListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["PrimaryAssociatedTypeSyntax",18,358],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["PrimaryAssociatedTypeSyntax",18]],"o":7758},{"p":["CompositionTypeElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["CompositionTypeElementSyntax",18,372],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["CompositionTypeElementSyntax",18]],"o":7758},{"p":["DifferentiabilityParamListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["DifferentiabilityParamSyntax",18,376],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["DifferentiabilityParamSyntax",18]],"o":7758},{"p":["SpecializeAttributeSpecListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Syntax",18,513],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["Syntax",18]],"o":7758},{"p":["PrecedenceGroupAttributeListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Syntax",18,513],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["Syntax",18]],"o":7758},{"p":["MultipleTrailingClosureElementListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["MultipleTrailingClosureElementSyntax",18,430],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["MultipleTrailingClosureElementSyntax",18]],"o":7758},{"p":["ExprListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ExprSyntax",18]],"o":7758},{"p":["ObjcNameSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["ObjcNamePieceSyntax",18,115],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["ObjcNamePieceSyntax",18]],"o":7758},{"p":["TokenListSyntax","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["TokenSyntax",18]],"o":7758},{"p":["SyntaxChildren","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Syntax",18,513],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SyntaxChildrenIndex",18],[") -> ",17],["Syntax",18]],"o":7758},{"p":["Trivia","subscript(_:)"],"f":[["subscript",10],["(",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["TriviaPiece",18,22],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["Int",18],[") -> ",17],["TriviaPiece",18]],"o":7758},{"p":["SourceLength","zero"],"f":[["static",12],[" ",17],["let",12],[" ",17],["zero",7],[": ",17],["SourceLength",18,524]],"s":[["static",12],[" ",17],["let",12],[" ",17],["zero",7],[": ",17],["SourceLength",18]],"d":"A zero-length source length"},{"p":["Trivia","zero"],"f":[["static",12],[" ",17],["var",12],[" ",17],["zero",7],[": ",17],["Trivia",18,534],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["zero",7],[": ",17],["Trivia",18]],"d":"Creates Trivia with no pieces."},{"p":["AccessPathSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["AccessPathSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AccessPathSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `AccessPathSyntax`."},{"p":["AccessPathSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AccessPathSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `AccessPathSyntax`."},{"p":["AccessPathSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["AccessPathSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["ImportDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["ImportDeclSyntax","importKind"],"f":[["var",12],[" ",17],["importKind",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["importKind",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ImportDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ImportDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ImportDeclSyntax","path"],"f":[["var",12],[" ",17],["path",7],[": ",17],["AccessPathSyntax",18,25],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["path",7],[": ",17],["AccessPathSyntax",18]]},{"p":["ImportDeclSyntax","importTok"],"f":[["var",12],[" ",17],["importTok",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["importTok",7],[": ",17],["TokenSyntax",18]]},{"p":["ImportDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["ReturnStmtSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18],["?",17]]},{"p":["ReturnStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ReturnStmtSyntax","returnKeyword"],"f":[["var",12],[" ",17],["returnKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["returnKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ReturnStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SourceFileSyntax","statements"],"f":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18,238],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18]],"o":1868},{"p":["SourceFileSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SourceFileSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SourceFileSyntax","eofToken"],"f":[["var",12],[" ",17],["eofToken",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["eofToken",7],[": ",17],["TokenSyntax",18]]},{"p":["StructDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]],"o":2791},{"p":["StructDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]],"o":1811},{"p":["StructDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["StructDeclSyntax","structKeyword"],"f":[["var",12],[" ",17],["structKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["structKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["StructDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["StructDeclSyntax","inheritanceClause"],"f":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,364],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]]},{"p":["StructDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["StructDeclSyntax","genericParameterClause"],"f":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,378],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["StructDeclSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18,182],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18]],"o":2792},{"p":["StructDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]],"o":2793},{"p":["SwitchCaseSyntax","statements"],"f":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18,238],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18]],"o":1868},{"p":["SwitchCaseSyntax","unknownAttr"],"f":[["var",12],[" ",17],["unknownAttr",7],[": ",17],["AttributeSyntax",18,477],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["unknownAttr",7],[": ",17],["AttributeSyntax",18],["?",17]]},{"p":["SwitchCaseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SwitchCaseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SwitchCaseSyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["Syntax",18]]},{"p":["SwitchStmtSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["SwitchStmtSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2689},{"p":["SwitchStmtSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]],"o":2667},{"p":["SwitchStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SwitchStmtSyntax","switchKeyword"],"f":[["var",12],[" ",17],["switchKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["switchKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["SwitchStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SwitchStmtSyntax","cases"],"f":[["var",12],[" ",17],["cases",7],[": ",17],["SwitchCaseListSyntax",18,155],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["cases",7],[": ",17],["SwitchCaseListSyntax",18]]},{"p":["SwitchStmtSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2690},{"p":["SwitchStmtSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]],"o":2668},{"p":["CatchClauseSyntax","catchItems"],"f":[["var",12],[" ",17],["catchItems",7],[": ",17],["CatchItemListSyntax",18,105],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["catchItems",7],[": ",17],["CatchItemListSyntax",18],["?",17]]},{"p":["CatchClauseSyntax","catchKeyword"],"f":[["var",12],[" ",17],["catchKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["catchKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["CatchClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["CatchClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CatchClauseSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]],"o":1787},{"p":["ClosureExprSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]],"o":2667},{"p":["ClosureExprSyntax","statements"],"f":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18,238],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18]],"o":1868},{"p":["ClosureExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ClosureExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ClosureExprSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]],"o":2668},{"p":["ClosureExprSyntax","signature"],"f":[["var",12],[" ",17],["signature",7],[": ",17],["ClosureSignatureSyntax",18,206],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["signature",7],[": ",17],["ClosureSignatureSyntax",18],["?",17]]},{"p":["KeyPathExprSyntax","rootExpr"],"f":[["var",12],[" ",17],["rootExpr",7],[": ",17],["ExprSyntax",18,441],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rootExpr",7],[": ",17],["ExprSyntax",18],["?",17]]},{"p":["KeyPathExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["KeyPathExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["KeyPathExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["KeyPathExprSyntax","backslash"],"f":[["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18]]},{"p":["TernaryExprSyntax","firstChoice"],"f":[["var",12],[" ",17],["firstChoice",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["firstChoice",7],[": ",17],["ExprSyntax",18]]},{"p":["TernaryExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TernaryExprSyntax","questionMark"],"f":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18]]},{"p":["TernaryExprSyntax","secondChoice"],"f":[["var",12],[" ",17],["secondChoice",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["secondChoice",7],[": ",17],["ExprSyntax",18]]},{"p":["TernaryExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TernaryExprSyntax","conditionExpression"],"f":[["var",12],[" ",17],["conditionExpression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["conditionExpression",7],[": ",17],["ExprSyntax",18]]},{"p":["TernaryExprSyntax","colonMark"],"f":[["var",12],[" ",17],["colonMark",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colonMark",7],[": ",17],["TokenSyntax",18]]},{"p":["UnknownDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["UnknownDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["UnknownExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["UnknownExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["UnknownStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["UnknownStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["UnknownTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["UnknownTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["WhereClauseSyntax","guardResult"],"f":[["var",12],[" ",17],["guardResult",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["guardResult",7],[": ",17],["ExprSyntax",18]]},{"p":["WhereClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["WhereClauseSyntax","whereKeyword"],"f":[["var",12],[" ",17],["whereKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whereKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["WhereClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AccessorDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["AccessorDeclSyntax","accessorKind"],"f":[["var",12],[" ",17],["accessorKind",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["accessorKind",7],[": ",17],["TokenSyntax",18]]},{"p":["AccessorDeclSyntax","asyncKeyword"],"f":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessorDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AccessorDeclSyntax","throwsKeyword"],"f":[["var",12],[" ",17],["throwsKeyword",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwsKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessorDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AccessorDeclSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18],["?",17]]},{"p":["AccessorDeclSyntax","modifier"],"f":[["var",12],[" ",17],["modifier",7],[": ",17],["DeclModifierSyntax",18,65],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifier",7],[": ",17],["DeclModifierSyntax",18],["?",17]]},{"p":["AccessorDeclSyntax","parameter"],"f":[["var",12],[" ",17],["parameter",7],[": ",17],["AccessorParameterSyntax",18,234],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["parameter",7],[": ",17],["AccessorParameterSyntax",18],["?",17]]},{"p":["AccessorListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["AccessorListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AccessorListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `AccessorListSyntax`."},{"p":["AccessorListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AccessorListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `AccessorListSyntax`."},{"p":["AccessorListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["AccessorListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["ArrayElementSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["ArrayElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ArrayElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["ArrayElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CaseItemListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["CaseItemListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["CaseItemListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `CaseItemListSyntax`."},{"p":["CaseItemListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CaseItemListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `CaseItemListSyntax`."},{"p":["CaseItemListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["CaseItemListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["ClosureParamSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ClosureParamSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["ClosureParamSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ClosureParamSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["ContinueStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ContinueStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ContinueStmtSyntax","continueKeyword"],"f":[["var",12],[" ",17],["continueKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["continueKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ContinueStmtSyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DeclModifierSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DeclModifierSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DeclModifierSyntax","detailLeftParen"],"f":[["var",12],[" ",17],["detailLeftParen",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["detailLeftParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DeclModifierSyntax","detailRightParen"],"f":[["var",12],[" ",17],["detailRightParen",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["detailRightParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DeclModifierSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["DeclModifierSyntax","detail"],"f":[["var",12],[" ",17],["detail",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["detail",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["EnumCaseDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]],"d":"\nThe attributes applied to the case declaration.\n"},{"p":["EnumCaseDeclSyntax","caseKeyword"],"f":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18]],"d":"The `case` keyword for this case."},{"p":["EnumCaseDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["EnumCaseDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["EnumCaseDeclSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["EnumCaseElementListSyntax",18,306],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["EnumCaseElementListSyntax",18]],"d":"The elements this case declares."},{"p":["EnumCaseDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]],"d":"\nThe declaration modifiers applied to the case declaration.\n"},{"p":["FunctionDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["FunctionDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]],"o":1811},{"p":["FunctionDeclSyntax","funcKeyword"],"f":[["var",12],[" ",17],["funcKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["funcKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["FunctionDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["FunctionDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["FunctionDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["FunctionDeclSyntax","genericParameterClause"],"f":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,378],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["FunctionDeclSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18],["?",17]]},{"p":["FunctionDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["FunctionDeclSyntax","signature"],"f":[["var",12],[" ",17],["signature",7],[": ",17],["FunctionSignatureSyntax",18,252],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["signature",7],[": ",17],["FunctionSignatureSyntax",18]]},{"p":["FunctionTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["FunctionTypeSyntax","returnType"],"f":[["var",12],[" ",17],["returnType",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["returnType",7],[": ",17],["TypeSyntax",18]]},{"p":["FunctionTypeSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["FunctionTypeSyntax","asyncKeyword"],"f":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["FunctionTypeSyntax","throwsOrRethrowsKeyword"],"f":[["var",12],[" ",17],["throwsOrRethrowsKeyword",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwsOrRethrowsKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionTypeSyntax","arrow"],"f":[["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18]]},{"p":["FunctionTypeSyntax","arguments"],"f":[["var",12],[" ",17],["arguments",7],[": ",17],["TupleTypeElementListSyntax",18,344],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arguments",7],[": ",17],["TupleTypeElementListSyntax",18]]},{"p":["FunctionTypeSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["IfConfigDeclSyntax","poundEndif"],"f":[["var",12],[" ",17],["poundEndif",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundEndif",7],[": ",17],["TokenSyntax",18]]},{"p":["IfConfigDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["IfConfigDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["IfConfigDeclSyntax","clauses"],"f":[["var",12],[" ",17],["clauses",7],[": ",17],["IfConfigClauseListSyntax",18,288],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["clauses",7],[": ",17],["IfConfigClauseListSyntax",18]]},{"p":["MetatypeTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["MetatypeTypeSyntax","baseType"],"f":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18]]},{"p":["MetatypeTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["MetatypeTypeSyntax","typeOrProtocol"],"f":[["var",12],[" ",17],["typeOrProtocol",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeOrProtocol",7],[": ",17],["TokenSyntax",18]]},{"p":["MetatypeTypeSyntax","period"],"f":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18]]},{"p":["ModifierListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["ModifierListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ModifierListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ModifierListSyntax`."},{"p":["ModifierListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ModifierListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ModifierListSyntax`."},{"p":["ModifierListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["ModifierListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["ObjCSelectorSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["ObjCSelectorSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ObjCSelectorSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ObjCSelectorSyntax`."},{"p":["ObjCSelectorSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ObjCSelectorSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ObjCSelectorSyntax`."},{"p":["ObjCSelectorSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["ObjCSelectorSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["OperatorDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]],"d":"\nThe attributes applied to the 'operator' declaration.\n"},{"p":["OperatorDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]],"o":1811},{"p":["OperatorDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["OperatorDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["OperatorDeclSyntax","operatorKeyword"],"f":[["var",12],[" ",17],["operatorKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["operatorKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["OperatorDeclSyntax","operatorPrecedenceAndTypes"],"f":[["var",12],[" ",17],["operatorPrecedenceAndTypes",7],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,410],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["operatorPrecedenceAndTypes",7],[": ",17],["OperatorPrecedenceAndTypesSyntax",18],["?",17]],"d":"\nOptionally specify a precedence group and designated types.\n"},{"p":["OperatorDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]],"d":"\nThe declaration modifiers applied to the 'operator'\ndeclaration.\n"},{"p":["OptionalTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["OptionalTypeSyntax","wrappedType"],"f":[["var",12],[" ",17],["wrappedType",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["wrappedType",7],[": ",17],["TypeSyntax",18]]},{"p":["OptionalTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["OptionalTypeSyntax","questionMark"],"f":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18]]},{"p":["ProtocolDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]],"o":2791},{"p":["ProtocolDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]],"o":1811},{"p":["ProtocolDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ProtocolDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ProtocolDeclSyntax","protocolKeyword"],"f":[["var",12],[" ",17],["protocolKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["protocolKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ProtocolDeclSyntax","inheritanceClause"],"f":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,364],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]]},{"p":["ProtocolDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["ProtocolDeclSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18,182],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18]],"o":2792},{"p":["ProtocolDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]],"o":2793},{"p":["ReturnClauseSyntax","returnType"],"f":[["var",12],[" ",17],["returnType",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["returnType",7],[": ",17],["TypeSyntax",18]]},{"p":["ReturnClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ReturnClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ReturnClauseSyntax","arrow"],"f":[["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18]]},{"p":["SequenceExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SequenceExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SequenceExprSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["ExprListSyntax",18,463],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["ExprListSyntax",18]]},{"p":["SuperRefExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SuperRefExprSyntax","superKeyword"],"f":[["var",12],[" ",17],["superKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["superKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["SuperRefExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TuplePatternSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["TuplePatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TuplePatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TuplePatternSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["TuplePatternElementListSyntax",18,394],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["TuplePatternElementListSyntax",18]]},{"p":["TuplePatternSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["VariableDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["VariableDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["VariableDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["VariableDeclSyntax","letOrVarKeyword"],"f":[["var",12],[" ",17],["letOrVarKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["letOrVarKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["VariableDeclSyntax","bindings"],"f":[["var",12],[" ",17],["bindings",7],[": ",17],["PatternBindingListSyntax",18,294],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["bindings",7],[": ",17],["PatternBindingListSyntax",18]]},{"p":["VariableDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["VersionTupleSyntax","patchVersion"],"f":[["var",12],[" ",17],["patchVersion",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["patchVersion",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nThe patch version if specified.\n"},{"p":["VersionTupleSyntax","majorMinor"],"f":[["var",12],[" ",17],["majorMinor",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["majorMinor",7],[": ",17],["Syntax",18]],"d":"\nIn case the version consists only of the major version, an\ninteger literal that specifies the major version. In case\nthe version consists of major and minor version number, a\nfloating literal in which the decimal part is interpreted\nas the minor version.\n"},{"p":["VersionTupleSyntax","patchPeriod"],"f":[["var",12],[" ",17],["patchPeriod",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["patchPeriod",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nIf the version contains a patch number, the period\nseparating the minor from the patch number.\n"},{"p":["VersionTupleSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["VersionTupleSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AccessorBlockSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]],"o":2667},{"p":["AccessorBlockSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AccessorBlockSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AccessorBlockSyntax","accessors"],"f":[["var",12],[" ",17],["accessors",7],[": ",17],["AccessorListSyntax",18,55],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["accessors",7],[": ",17],["AccessorListSyntax",18]]},{"p":["AccessorBlockSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]],"o":2668},{"p":["AsTypePatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AsTypePatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AsTypePatternSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18]]},{"p":["AsTypePatternSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["AsTypePatternSyntax","asKeyword"],"f":[["var",12],[" ",17],["asKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["AttributeListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["AttributeListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AttributeListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `AttributeListSyntax`."},{"p":["AttributeListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AttributeListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `AttributeListSyntax`."},{"p":["AttributeListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["AttributeListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["CatchItemListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["CatchItemListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["CatchItemListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `CatchItemListSyntax`."},{"p":["CatchItemListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CatchItemListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `CatchItemListSyntax`."},{"p":["CatchItemListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["CatchItemListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["CodeBlockItemSyntax","errorTokens"],"f":[["var",12],[" ",17],["errorTokens",7],[": ",17],["Syntax",18,513],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["errorTokens",7],[": ",17],["Syntax",18],["?",17]]},{"p":["CodeBlockItemSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["CodeBlockItemSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CodeBlockItemSyntax","item"],"f":[["var",12],[" ",17],["item",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["item",7],[": ",17],["Syntax",18]],"d":"The underlying node inside the code block."},{"p":["CodeBlockItemSyntax","semicolon"],"f":[["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nIf present, the trailing semicolon at the end of the item.\n"},{"p":["ExtensionDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]],"o":2791},{"p":["ExtensionDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ExtensionDeclSyntax","extendedType"],"f":[["var",12],[" ",17],["extendedType",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["extendedType",7],[": ",17],["TypeSyntax",18]]},{"p":["ExtensionDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ExtensionDeclSyntax","extensionKeyword"],"f":[["var",12],[" ",17],["extensionKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["extensionKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ExtensionDeclSyntax","inheritanceClause"],"f":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,364],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]]},{"p":["ExtensionDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["ExtensionDeclSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18,182],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18]],"o":2792},{"p":["ExtensionDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]],"o":2793},{"p":["InheritedTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["InheritedTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["InheritedTypeSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["InheritedTypeSyntax","typeName"],"f":[["var",12],[" ",17],["typeName",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeName",7],[": ",17],["TypeSyntax",18]]},{"p":["IsTypePatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["IsTypePatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["IsTypePatternSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18]]},{"p":["IsTypePatternSyntax","isKeyword"],"f":[["var",12],[" ",17],["isKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["isKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjcNamePieceSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ObjcNamePieceSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ObjcNamePieceSyntax","dot"],"f":[["var",12],[" ",17],["dot",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["dot",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ObjcNamePieceSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["ParenthesizedSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["ParenthesizedSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundFileExprSyntax","poundFile"],"f":[["var",12],[" ",17],["poundFile",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundFile",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundFileExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PoundFileExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PoundLineExprSyntax","poundLine"],"f":[["var",12],[" ",17],["poundLine",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundLine",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundLineExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PoundLineExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["StringSegmentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["StringSegmentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["StringSegmentSyntax","content"],"f":[["var",12],[" ",17],["content",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["content",7],[": ",17],["TokenSyntax",18]]},{"p":["SubscriptDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["SubscriptDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SubscriptDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SubscriptDeclSyntax","subscriptKeyword"],"f":[["var",12],[" ",17],["subscriptKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["subscriptKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["SubscriptDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["SubscriptDeclSyntax","genericParameterClause"],"f":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,378],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["SubscriptDeclSyntax","result"],"f":[["var",12],[" ",17],["result",7],[": ",17],["ReturnClauseSyntax",18,87],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["result",7],[": ",17],["ReturnClauseSyntax",18]]},{"p":["SubscriptDeclSyntax","indices"],"f":[["var",12],[" ",17],["indices",7],[": ",17],["ParameterClauseSyntax",18,188],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["indices",7],[": ",17],["ParameterClauseSyntax",18]]},{"p":["SubscriptDeclSyntax","accessor"],"f":[["var",12],[" ",17],["accessor",7],[": ",17],["Syntax",18,513],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["accessor",7],[": ",17],["Syntax",18],["?",17]]},{"p":["SubscriptDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["SubscriptExprSyntax","leftBracket"],"f":[["var",12],[" ",17],["leftBracket",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["SubscriptExprSyntax","argumentList"],"f":[["var",12],[" ",17],["argumentList",7],[": ",17],["TupleExprElementListSyntax",18,342],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["argumentList",7],[": ",17],["TupleExprElementListSyntax",18]]},{"p":["SubscriptExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SubscriptExprSyntax","rightBracket"],"f":[["var",12],[" ",17],["rightBracket",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["SubscriptExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SubscriptExprSyntax","trailingClosure"],"f":[["var",12],[" ",17],["trailingClosure",7],[": ",17],["ClosureExprSyntax",18,41],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingClosure",7],[": ",17],["ClosureExprSyntax",18],["?",17]]},{"p":["SubscriptExprSyntax","calledExpression"],"f":[["var",12],[" ",17],["calledExpression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["calledExpression",7],[": ",17],["ExprSyntax",18]]},{"p":["SubscriptExprSyntax","additionalTrailingClosures"],"f":[["var",12],[" ",17],["additionalTrailingClosures",7],[": ",17],["MultipleTrailingClosureElementListSyntax",18,436],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["additionalTrailingClosures",7],[": ",17],["MultipleTrailingClosureElementListSyntax",18],["?",17]]},{"p":["TypealiasDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["TypealiasDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]],"o":1811},{"p":["TypealiasDeclSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["TypeInitializerClauseSyntax",18,366],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["TypeInitializerClauseSyntax",18],["?",17]]},{"p":["TypealiasDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TypealiasDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TypealiasDeclSyntax","typealiasKeyword"],"f":[["var",12],[" ",17],["typealiasKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typealiasKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["TypealiasDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["TypealiasDeclSyntax","genericParameterClause"],"f":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,378],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["TypealiasDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["WithCodeBlockSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]]},{"p":["AssignmentExprSyntax","assignToken"],"f":[["var",12],[" ",17],["assignToken",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["assignToken",7],[": ",17],["TokenSyntax",18]]},{"p":["AssignmentExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AssignmentExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AttributedTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AttributedTypeSyntax","baseType"],"f":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18]]},{"p":["AttributedTypeSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["AttributedTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AttributedTypeSyntax","specifier"],"f":[["var",12],[" ",17],["specifier",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["specifier",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DictionaryExprSyntax","leftSquare"],"f":[["var",12],[" ",17],["leftSquare",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftSquare",7],[": ",17],["TokenSyntax",18]]},{"p":["DictionaryExprSyntax","rightSquare"],"f":[["var",12],[" ",17],["rightSquare",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightSquare",7],[": ",17],["TokenSyntax",18]]},{"p":["DictionaryExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DictionaryExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DictionaryExprSyntax","content"],"f":[["var",12],[" ",17],["content",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["content",7],[": ",17],["Syntax",18]]},{"p":["DictionaryTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DictionaryTypeSyntax","keyType"],"f":[["var",12],[" ",17],["keyType",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["keyType",7],[": ",17],["TypeSyntax",18]]},{"p":["DictionaryTypeSyntax","valueType"],"f":[["var",12],[" ",17],["valueType",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["valueType",7],[": ",17],["TypeSyntax",18]]},{"p":["DictionaryTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DictionaryTypeSyntax","leftSquareBracket"],"f":[["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["DictionaryTypeSyntax","rightSquareBracket"],"f":[["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["DictionaryTypeSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["ExpressionStmtSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["ExpressionStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ExpressionStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["IdentifiedDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["IdentifierExprSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["IdentifierExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["IdentifierExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["IdentifierExprSyntax","declNameArguments"],"f":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]]},{"p":["IdentifierListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["IdentifierListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["IdentifierListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `IdentifierListSyntax`."},{"p":["IdentifierListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["IdentifierListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `IdentifierListSyntax`."},{"p":["IdentifierListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["IdentifierListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["IfConfigClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["IfConfigClauseSyntax","poundKeyword"],"f":[["var",12],[" ",17],["poundKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["IfConfigClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["IfConfigClauseSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["Syntax",18]]},{"p":["IfConfigClauseSyntax","condition"],"f":[["var",12],[" ",17],["condition",7],[": ",17],["ExprSyntax",18,441],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["condition",7],[": ",17],["ExprSyntax",18],["?",17]]},{"p":["MemberDeclListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["MemberDeclListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["MemberDeclListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `MemberDeclListSyntax`."},{"p":["MemberDeclListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["MemberDeclListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `MemberDeclListSyntax`."},{"p":["MemberDeclListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["MemberDeclListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["NilLiteralExprSyntax","nilKeyword"],"f":[["var",12],[" ",17],["nilKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["nilKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["NilLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["NilLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PatternBindingSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18,258],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18],["?",17]]},{"p":["PatternBindingSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PatternBindingSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["PatternBindingSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PatternBindingSyntax","typeAnnotation"],"f":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18,157],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18],["?",17]]},{"p":["PatternBindingSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["PatternBindingSyntax","accessor"],"f":[["var",12],[" ",17],["accessor",7],[": ",17],["Syntax",18,513],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["accessor",7],[": ",17],["Syntax",18],["?",17]]},{"p":["PoundErrorDeclSyntax","poundError"],"f":[["var",12],[" ",17],["poundError",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundError",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundErrorDeclSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["PoundErrorDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PoundErrorDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PoundErrorDeclSyntax","message"],"f":[["var",12],[" ",17],["message",7],[": ",17],["StringLiteralExprSyntax",18,272],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["message",7],[": ",17],["StringLiteralExprSyntax",18]]},{"p":["PoundErrorDeclSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["SpecializeExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["SpecializeExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SpecializeExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SpecializeExprSyntax","genericArgumentClause"],"f":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18,356],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18]]},{"p":["SwitchCaseListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["SwitchCaseListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SwitchCaseListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `SwitchCaseListSyntax`."},{"p":["SwitchCaseListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SwitchCaseListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `SwitchCaseListSyntax`."},{"p":["SwitchCaseListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["SwitchCaseListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["TypeAnnotationSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TypeAnnotationSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TypeAnnotationSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18]]},{"p":["TypeAnnotationSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["UnknownPatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["UnknownPatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["WithStatementsSyntax","statements"],"f":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18,238],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18]]},{"p":["CatchClauseListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["CatchClauseListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["CatchClauseListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `CatchClauseListSyntax`."},{"p":["CatchClauseListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CatchClauseListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `CatchClauseListSyntax`."},{"p":["CatchClauseListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["CatchClauseListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["CompositionTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CompositionTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["CompositionTypeSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["CompositionTypeElementListSyntax",18,406],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["CompositionTypeElementListSyntax",18]]},{"p":["CustomAttributeSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["CustomAttributeSyntax","atSignToken"],"f":[["var",12],[" ",17],["atSignToken",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["atSignToken",7],[": ",17],["TokenSyntax",18]],"d":"The `@` sign."},{"p":["CustomAttributeSyntax","argumentList"],"f":[["var",12],[" ",17],["argumentList",7],[": ",17],["TupleExprElementListSyntax",18,342],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["argumentList",7],[": ",17],["TupleExprElementListSyntax",18],["?",17]]},{"p":["CustomAttributeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["CustomAttributeSyntax","attributeName"],"f":[["var",12],[" ",17],["attributeName",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributeName",7],[": ",17],["TypeSyntax",18]],"d":"The name of the attribute."},{"p":["CustomAttributeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CustomAttributeSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DeclarationStmtSyntax","declaration"],"f":[["var",12],[" ",17],["declaration",7],[": ",17],["DeclSyntax",18,440],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declaration",7],[": ",17],["DeclSyntax",18]]},{"p":["DeclarationStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DeclarationStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["EnumCaseElementSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]],"d":"The name of this case."},{"p":["EnumCaseElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["EnumCaseElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nThe trailing comma of this element, if the case has\nmultiple elements.\n","o":2184},{"p":["EnumCaseElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["EnumCaseElementSyntax","associatedValue"],"f":[["var",12],[" ",17],["associatedValue",7],[": ",17],["ParameterClauseSyntax",18,188],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["associatedValue",7],[": ",17],["ParameterClauseSyntax",18],["?",17]],"d":"The set of associated values of the case."},{"p":["EnumCaseElementSyntax","rawValue"],"f":[["var",12],[" ",17],["rawValue",7],[": ",17],["InitializerClauseSyntax",18,258],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rawValue",7],[": ",17],["InitializerClauseSyntax",18],["?",17]],"d":"\nThe raw value of this enum element, if present.\n"},{"p":["EnumCasePatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["EnumCasePatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["EnumCasePatternSyntax","associatedTuple"],"f":[["var",12],[" ",17],["associatedTuple",7],[": ",17],["TuplePatternSyntax",18,93],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["associatedTuple",7],[": ",17],["TuplePatternSyntax",18],["?",17]]},{"p":["EnumCasePatternSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,443],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18],["?",17]]},{"p":["EnumCasePatternSyntax","period"],"f":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18]]},{"p":["EnumCasePatternSyntax","caseName"],"f":[["var",12],[" ",17],["caseName",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["caseName",7],[": ",17],["TokenSyntax",18]]},{"p":["FallthroughStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["FallthroughStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["FallthroughStmtSyntax","fallthroughKeyword"],"f":[["var",12],[" ",17],["fallthroughKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["fallthroughKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ForcedValueExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["ForcedValueExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ForcedValueExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ForcedValueExprSyntax","exclamationMark"],"f":[["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericArgumentSyntax","argumentType"],"f":[["var",12],[" ",17],["argumentType",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["argumentType",7],[": ",17],["TypeSyntax",18]]},{"p":["GenericArgumentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["GenericArgumentSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["GenericArgumentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["InitializerDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["InitializerDeclSyntax","parameters"],"f":[["var",12],[" ",17],["parameters",7],[": ",17],["ParameterClauseSyntax",18,188],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["parameters",7],[": ",17],["ParameterClauseSyntax",18]]},{"p":["InitializerDeclSyntax","initKeyword"],"f":[["var",12],[" ",17],["initKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["InitializerDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["InitializerDeclSyntax","optionalMark"],"f":[["var",12],[" ",17],["optionalMark",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["optionalMark",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["InitializerDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["InitializerDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["InitializerDeclSyntax","genericParameterClause"],"f":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,378],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["InitializerDeclSyntax","throwsOrRethrowsKeyword"],"f":[["var",12],[" ",17],["throwsOrRethrowsKeyword",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwsOrRethrowsKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["InitializerDeclSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18],["?",17]]},{"p":["InitializerDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["KeyPathBaseExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["KeyPathBaseExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["KeyPathBaseExprSyntax","period"],"f":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18]]},{"p":["MemberDeclBlockSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]],"o":2667},{"p":["MemberDeclBlockSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["MemberDeclBlockSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["MemberDeclBlockSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclListSyntax",18,145],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclListSyntax",18]]},{"p":["MemberDeclBlockSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]],"o":2668},{"p":["ObjcKeyPathExprSyntax","keyPath"],"f":[["var",12],[" ",17],["keyPath",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["keyPath",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjcKeyPathExprSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["ObjcKeyPathExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ObjcKeyPathExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ObjcKeyPathExprSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["ObjcNameSyntax",18,465],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["ObjcNameSyntax",18]]},{"p":["ObjcKeyPathExprSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["OptionalPatternSyntax","subPattern"],"f":[["var",12],[" ",17],["subPattern",7],[": ",17],["PatternSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["subPattern",7],[": ",17],["PatternSyntax",18]]},{"p":["OptionalPatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["OptionalPatternSyntax","questionMark"],"f":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18]]},{"p":["OptionalPatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ParameterClauseSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["ParameterClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ParameterClauseSyntax","parameterList"],"f":[["var",12],[" ",17],["parameterList",7],[": ",17],["FunctionParameterListSyntax",18,354],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["parameterList",7],[": ",17],["FunctionParameterListSyntax",18]]},{"p":["ParameterClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ParameterClauseSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["PoundAssertStmtSyntax","poundAssert"],"f":[["var",12],[" ",17],["poundAssert",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundAssert",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundAssertStmtSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundAssertStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PoundAssertStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PoundAssertStmtSyntax","comma"],"f":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"The comma after the assertion condition."},{"p":["PoundAssertStmtSyntax","message"],"f":[["var",12],[" ",17],["message",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["message",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"The assertion message."},{"p":["PoundAssertStmtSyntax","condition"],"f":[["var",12],[" ",17],["condition",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["condition",7],[": ",17],["ExprSyntax",18]],"d":"The assertion condition."},{"p":["PoundAssertStmtSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundColumnExprSyntax","poundColumn"],"f":[["var",12],[" ",17],["poundColumn",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundColumn",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundColumnExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PoundColumnExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PoundFileIDExprSyntax","poundFileID"],"f":[["var",12],[" ",17],["poundFileID",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundFileID",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundFileIDExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PoundFileIDExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["RepeatWhileStmtSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2689},{"p":["RepeatWhileStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["RepeatWhileStmtSyntax","whileKeyword"],"f":[["var",12],[" ",17],["whileKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whileKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["RepeatWhileStmtSyntax","repeatKeyword"],"f":[["var",12],[" ",17],["repeatKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["repeatKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["RepeatWhileStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["RepeatWhileStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]],"o":1787},{"p":["RepeatWhileStmtSyntax","condition"],"f":[["var",12],[" ",17],["condition",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["condition",7],[": ",17],["ExprSyntax",18]]},{"p":["RepeatWhileStmtSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2690},{"p":["SwitchCaseLabelSyntax","caseKeyword"],"f":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["SwitchCaseLabelSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SwitchCaseLabelSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SwitchCaseLabelSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["SwitchCaseLabelSyntax","caseItems"],"f":[["var",12],[" ",17],["caseItems",7],[": ",17],["CaseItemListSyntax",18,59],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["caseItems",7],[": ",17],["CaseItemListSyntax",18]]},{"p":["WildcardPatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["WildcardPatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["WildcardPatternSyntax","typeAnnotation"],"f":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18,157],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18],["?",17]]},{"p":["WildcardPatternSyntax","wildcard"],"f":[["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18]]},{"p":["ArrayElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["ArrayElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ArrayElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ArrayElementListSyntax`."},{"p":["ArrayElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ArrayElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ArrayElementListSyntax`."},{"p":["ArrayElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["ArrayElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["ClosureParamListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["ClosureParamListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ClosureParamListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ClosureParamListSyntax`."},{"p":["ClosureParamListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ClosureParamListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ClosureParamListSyntax`."},{"p":["ClosureParamListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["ClosureParamListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["ClosureSignatureSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["ClosureSignatureSyntax","asyncKeyword"],"f":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ClosureSignatureSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ClosureSignatureSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ClosureSignatureSyntax","inTok"],"f":[["var",12],[" ",17],["inTok",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inTok",7],[": ",17],["TokenSyntax",18]]},{"p":["ClosureSignatureSyntax","input"],"f":[["var",12],[" ",17],["input",7],[": ",17],["Syntax",18,513],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["input",7],[": ",17],["Syntax",18],["?",17]]},{"p":["ClosureSignatureSyntax","output"],"f":[["var",12],[" ",17],["output",7],[": ",17],["ReturnClauseSyntax",18,87],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["output",7],[": ",17],["ReturnClauseSyntax",18],["?",17]]},{"p":["ClosureSignatureSyntax","capture"],"f":[["var",12],[" ",17],["capture",7],[": ",17],["ClosureCaptureSignatureSyntax",18,384],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["capture",7],[": ",17],["ClosureCaptureSignatureSyntax",18],["?",17]]},{"p":["ClosureSignatureSyntax","throwsTok"],"f":[["var",12],[" ",17],["throwsTok",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwsTok",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ConditionElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ConditionElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["ConditionElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ConditionElementSyntax","condition"],"f":[["var",12],[" ",17],["condition",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["condition",7],[": ",17],["Syntax",18]]},{"p":["DeclNameArgumentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DeclNameArgumentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DeclNameArgumentSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["DeclNameArgumentSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["FloatLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["FloatLiteralExprSyntax","floatingDigits"],"f":[["var",12],[" ",17],["floatingDigits",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["floatingDigits",7],[": ",17],["TokenSyntax",18]]},{"p":["FloatLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["FunctionCallExprSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionCallExprSyntax","argumentList"],"f":[["var",12],[" ",17],["argumentList",7],[": ",17],["TupleExprElementListSyntax",18,342],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["argumentList",7],[": ",17],["TupleExprElementListSyntax",18]]},{"p":["FunctionCallExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["FunctionCallExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["FunctionCallExprSyntax","trailingClosure"],"f":[["var",12],[" ",17],["trailingClosure",7],[": ",17],["ClosureExprSyntax",18,41],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingClosure",7],[": ",17],["ClosureExprSyntax",18],["?",17]]},{"p":["FunctionCallExprSyntax","calledExpression"],"f":[["var",12],[" ",17],["calledExpression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["calledExpression",7],[": ",17],["ExprSyntax",18]]},{"p":["FunctionCallExprSyntax","additionalTrailingClosures"],"f":[["var",12],[" ",17],["additionalTrailingClosures",7],[": ",17],["MultipleTrailingClosureElementListSyntax",18,436],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["additionalTrailingClosures",7],[": ",17],["MultipleTrailingClosureElementListSyntax",18],["?",17]]},{"p":["FunctionCallExprSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionDeclNameSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["FunctionDeclNameSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["FunctionDeclNameSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["Syntax",18]],"d":"\nThe base name of the referenced function.\n"},{"p":["FunctionDeclNameSyntax","arguments"],"f":[["var",12],[" ",17],["arguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]],"d":"\nThe argument labels of the referenced function, optionally\nspecified.\n"},{"p":["GenericParameterSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["GenericParameterSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["GenericParameterSyntax","inheritedType"],"f":[["var",12],[" ",17],["inheritedType",7],[": ",17],["TypeSyntax",18,443],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritedType",7],[": ",17],["TypeSyntax",18],["?",17]]},{"p":["GenericParameterSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["GenericParameterSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["GenericParameterSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericParameterSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["MemberAccessExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["MemberAccessExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["MemberAccessExprSyntax","declNameArguments"],"f":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]]},{"p":["MemberAccessExprSyntax","dot"],"f":[["var",12],[" ",17],["dot",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["dot",7],[": ",17],["TokenSyntax",18]]},{"p":["MemberAccessExprSyntax","base"],"f":[["var",12],[" ",17],["base",7],[": ",17],["ExprSyntax",18,441],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["base",7],[": ",17],["ExprSyntax",18],["?",17]]},{"p":["MemberAccessExprSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjcSelectorExprSyntax","poundSelector"],"f":[["var",12],[" ",17],["poundSelector",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundSelector",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjcSelectorExprSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["ObjcSelectorExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ObjcSelectorExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ObjcSelectorExprSyntax","kind"],"f":[["var",12],[" ",17],["kind",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["kind",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ObjcSelectorExprSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["ExprSyntax",18]]},{"p":["ObjcSelectorExprSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ObjcSelectorExprSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["PostfixUnaryExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["PostfixUnaryExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PostfixUnaryExprSyntax","operatorToken"],"f":[["var",12],[" ",17],["operatorToken",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["operatorToken",7],[": ",17],["TokenSyntax",18]]},{"p":["PostfixUnaryExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PoundWarningDeclSyntax","poundWarning"],"f":[["var",12],[" ",17],["poundWarning",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundWarning",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundWarningDeclSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["PoundWarningDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PoundWarningDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PoundWarningDeclSyntax","message"],"f":[["var",12],[" ",17],["message",7],[": ",17],["StringLiteralExprSyntax",18,272],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["message",7],[": ",17],["StringLiteralExprSyntax",18]]},{"p":["PoundWarningDeclSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["RegexLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["RegexLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["RegexLiteralExprSyntax","regex"],"f":[["var",12],[" ",17],["regex",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["regex",7],[": ",17],["TokenSyntax",18]]},{"p":["TupleExprElementSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["TupleExprElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TupleExprElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["TupleExprElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TupleExprElementSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleExprElementSyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleTypeElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TupleTypeElementSyntax","secondName"],"f":[["var",12],[" ",17],["secondName",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["secondName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleTypeElementSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18,258],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18],["?",17]]},{"p":["TupleTypeElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TupleTypeElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["TupleTypeElementSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleTypeElementSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18]]},{"p":["TupleTypeElementSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleTypeElementSyntax","inOut"],"f":[["var",12],[" ",17],["inOut",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inOut",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["TupleTypeElementSyntax","ellipsis"],"f":[["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessorParameterSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["AccessorParameterSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AccessorParameterSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AccessorParameterSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["AccessorParameterSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["AvailabilityEntrySyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AvailabilityEntrySyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AvailabilityEntrySyntax","availabilityList"],"f":[["var",12],[" ",17],["availabilityList",7],[": ",17],["AvailabilitySpecListSyntax",18,326],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["availabilityList",7],[": ",17],["AvailabilitySpecListSyntax",18]]},{"p":["AvailabilityEntrySyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"The colon separating the label and the value"},{"p":["AvailabilityEntrySyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18]],"d":"The label of the argument"},{"p":["AvailabilityEntrySyntax","semicolon"],"f":[["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18]]},{"p":["CodeBlockItemListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["CodeBlockItemListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["CodeBlockItemListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `CodeBlockItemListSyntax`."},{"p":["CodeBlockItemListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CodeBlockItemListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `CodeBlockItemListSyntax`."},{"p":["CodeBlockItemListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["CodeBlockItemListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["DeclNameArgumentsSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["DeclNameArgumentsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DeclNameArgumentsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DeclNameArgumentsSyntax","arguments"],"f":[["var",12],[" ",17],["arguments",7],[": ",17],["DeclNameArgumentListSyntax",18,332],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arguments",7],[": ",17],["DeclNameArgumentListSyntax",18]]},{"p":["DeclNameArgumentsSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["DeinitializerDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["DeinitializerDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DeinitializerDeclSyntax","deinitKeyword"],"f":[["var",12],[" ",17],["deinitKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["deinitKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["DeinitializerDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DeinitializerDeclSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]]},{"p":["DeinitializerDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["DictionaryElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DictionaryElementSyntax","keyExpression"],"f":[["var",12],[" ",17],["keyExpression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["keyExpression",7],[": ",17],["ExprSyntax",18]]},{"p":["DictionaryElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["DictionaryElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DictionaryElementSyntax","valueExpression"],"f":[["var",12],[" ",17],["valueExpression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["valueExpression",7],[": ",17],["ExprSyntax",18]]},{"p":["DictionaryElementSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["ExpressionPatternSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["ExpressionPatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ExpressionPatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ExpressionSegmentSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["ExpressionSegmentSyntax","expressions"],"f":[["var",12],[" ",17],["expressions",7],[": ",17],["TupleExprElementListSyntax",18,342],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expressions",7],[": ",17],["TupleExprElementListSyntax",18]]},{"p":["ExpressionSegmentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ExpressionSegmentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ExpressionSegmentSyntax","backslash"],"f":[["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18]]},{"p":["ExpressionSegmentSyntax","delimiter"],"f":[["var",12],[" ",17],["delimiter",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["delimiter",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ExpressionSegmentSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["FunctionParameterSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["FunctionParameterSyntax","secondName"],"f":[["var",12],[" ",17],["secondName",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["secondName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionParameterSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["FunctionParameterSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["FunctionParameterSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["FunctionParameterSyntax","defaultArgument"],"f":[["var",12],[" ",17],["defaultArgument",7],[": ",17],["InitializerClauseSyntax",18,258],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["defaultArgument",7],[": ",17],["InitializerClauseSyntax",18],["?",17]]},{"p":["FunctionParameterSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,443],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18],["?",17]]},{"p":["FunctionParameterSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionParameterSyntax","ellipsis"],"f":[["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionParameterSyntax","firstName"],"f":[["var",12],[" ",17],["firstName",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["firstName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionSignatureSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["FunctionSignatureSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["FunctionSignatureSyntax","asyncOrReasyncKeyword"],"f":[["var",12],[" ",17],["asyncOrReasyncKeyword",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asyncOrReasyncKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionSignatureSyntax","throwsOrRethrowsKeyword"],"f":[["var",12],[" ",17],["throwsOrRethrowsKeyword",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwsOrRethrowsKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["FunctionSignatureSyntax","input"],"f":[["var",12],[" ",17],["input",7],[": ",17],["ParameterClauseSyntax",18,188],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["input",7],[": ",17],["ParameterClauseSyntax",18]]},{"p":["FunctionSignatureSyntax","output"],"f":[["var",12],[" ",17],["output",7],[": ",17],["ReturnClauseSyntax",18,87],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["output",7],[": ",17],["ReturnClauseSyntax",18],["?",17]]},{"p":["IdentifierPatternSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["IdentifierPatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["IdentifierPatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["InheritedTypeListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["InheritedTypeListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["InheritedTypeListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["InheritedTypeListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `InheritedTypeListSyntax`."},{"p":["InheritedTypeListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `InheritedTypeListSyntax`."},{"p":["InheritedTypeListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["InheritedTypeListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["InitializerClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["InitializerClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["InitializerClauseSyntax","equal"],"f":[["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18]]},{"p":["InitializerClauseSyntax","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["value",7],[": ",17],["ExprSyntax",18]]},{"p":["NonEmptyTokenListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["NonEmptyTokenListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["NonEmptyTokenListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `NonEmptyTokenListSyntax`."},{"p":["NonEmptyTokenListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["NonEmptyTokenListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `NonEmptyTokenListSyntax`."},{"p":["NonEmptyTokenListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["NonEmptyTokenListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["ObjCSelectorPieceSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ObjCSelectorPieceSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ObjCSelectorPieceSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ObjCSelectorPieceSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ObjectLiteralExprSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["ObjectLiteralExprSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["ObjectLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ObjectLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ObjectLiteralExprSyntax","arguments"],"f":[["var",12],[" ",17],["arguments",7],[": ",17],["TupleExprElementListSyntax",18,342],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arguments",7],[": ",17],["TupleExprElementListSyntax",18]]},{"p":["ObjectLiteralExprSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["PoundFilePathExprSyntax","poundFilePath"],"f":[["var",12],[" ",17],["poundFilePath",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundFilePath",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundFilePathExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PoundFilePathExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PoundFunctionExprSyntax","poundFunction"],"f":[["var",12],[" ",17],["poundFunction",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundFunction",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundFunctionExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PoundFunctionExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["QualifiedDeclNameSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["QualifiedDeclNameSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["QualifiedDeclNameSyntax","dot"],"f":[["var",12],[" ",17],["dot",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["dot",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["QualifiedDeclNameSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]],"d":"\nThe base name of the referenced function.\n"},{"p":["QualifiedDeclNameSyntax","baseType"],"f":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18,443],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18],["?",17]],"d":"\nThe base type of the qualified name, optionally specified.\n"},{"p":["QualifiedDeclNameSyntax","arguments"],"f":[["var",12],[" ",17],["arguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]],"d":"\nThe argument labels of the referenced function, optionally\nspecified.\n"},{"p":["StringLiteralExprSyntax","closeQuote"],"f":[["var",12],[" ",17],["closeQuote",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["closeQuote",7],[": ",17],["TokenSyntax",18]]},{"p":["StringLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["StringLiteralExprSyntax","openDelimiter"],"f":[["var",12],[" ",17],["openDelimiter",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["openDelimiter",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["StringLiteralExprSyntax","closeDelimiter"],"f":[["var",12],[" ",17],["closeDelimiter",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["closeDelimiter",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["StringLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["StringLiteralExprSyntax","segments"],"f":[["var",12],[" ",17],["segments",7],[": ",17],["StringLiteralSegmentsSyntax",18,360],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["segments",7],[": ",17],["StringLiteralSegmentsSyntax",18]]},{"p":["StringLiteralExprSyntax","openQuote"],"f":[["var",12],[" ",17],["openQuote",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["openQuote",7],[": ",17],["TokenSyntax",18]]},{"p":["WithTrailingCommaSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AssociatedtypeDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["AssociatedtypeDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]],"o":1811},{"p":["AssociatedtypeDeclSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["TypeInitializerClauseSyntax",18,366],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["TypeInitializerClauseSyntax",18],["?",17]]},{"p":["AssociatedtypeDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AssociatedtypeDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AssociatedtypeDeclSyntax","inheritanceClause"],"f":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,364],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]]},{"p":["AssociatedtypeDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["AssociatedtypeDeclSyntax","associatedtypeKeyword"],"f":[["var",12],[" ",17],["associatedtypeKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["associatedtypeKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["AssociatedtypeDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["BinaryOperatorExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["BinaryOperatorExprSyntax","operatorToken"],"f":[["var",12],[" ",17],["operatorToken",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["operatorToken",7],[": ",17],["TokenSyntax",18]]},{"p":["BinaryOperatorExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["BooleanLiteralExprSyntax","booleanLiteral"],"f":[["var",12],[" ",17],["booleanLiteral",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["booleanLiteral",7],[": ",17],["TokenSyntax",18]]},{"p":["BooleanLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["BooleanLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ClosureCaptureItemSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["ClosureCaptureItemSyntax","assignToken"],"f":[["var",12],[" ",17],["assignToken",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["assignToken",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ClosureCaptureItemSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ClosureCaptureItemSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["ClosureCaptureItemSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ClosureCaptureItemSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ClosureCaptureItemSyntax","specifier"],"f":[["var",12],[" ",17],["specifier",7],[": ",17],["TokenListSyntax",18,501],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["specifier",7],[": ",17],["TokenListSyntax",18],["?",17]]},{"p":["ElseIfContinuationSyntax","ifStatement"],"f":[["var",12],[" ",17],["ifStatement",7],[": ",17],["IfStmtSyntax",18,449],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ifStatement",7],[": ",17],["IfStmtSyntax",18]]},{"p":["ElseIfContinuationSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ElseIfContinuationSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["GenericRequirementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["GenericRequirementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["GenericRequirementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["GenericRequirementSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["Syntax",18]]},{"p":["GenericWhereClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["GenericWhereClauseSyntax","whereKeyword"],"f":[["var",12],[" ",17],["whereKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whereKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericWhereClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["GenericWhereClauseSyntax","requirementList"],"f":[["var",12],[" ",17],["requirementList",7],[": ",17],["GenericRequirementListSyntax",18,380],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["requirementList",7],[": ",17],["GenericRequirementListSyntax",18]]},{"p":["IfConfigClauseListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["IfConfigClauseListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["IfConfigClauseListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `IfConfigClauseListSyntax`."},{"p":["IfConfigClauseListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["IfConfigClauseListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `IfConfigClauseListSyntax`."},{"p":["IfConfigClauseListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["IfConfigClauseListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["IntegerLiteralExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["IntegerLiteralExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["IntegerLiteralExprSyntax","digits"],"f":[["var",12],[" ",17],["digits",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["digits",7],[": ",17],["TokenSyntax",18]]},{"p":["MemberDeclListItemSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["MemberDeclListItemSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["MemberDeclListItemSyntax","decl"],"f":[["var",12],[" ",17],["decl",7],[": ",17],["DeclSyntax",18,440],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["decl",7],[": ",17],["DeclSyntax",18]],"d":"The declaration of the type member."},{"p":["MemberDeclListItemSyntax","semicolon"],"f":[["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"An optional trailing semicolon."},{"p":["PatternBindingListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["PatternBindingListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PatternBindingListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `PatternBindingListSyntax`."},{"p":["PatternBindingListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PatternBindingListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `PatternBindingListSyntax`."},{"p":["PatternBindingListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["PatternBindingListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["PoundDsohandleExprSyntax","poundDsohandle"],"f":[["var",12],[" ",17],["poundDsohandle",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundDsohandle",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundDsohandleExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PoundDsohandleExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PrefixOperatorExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PrefixOperatorExprSyntax","operatorToken"],"f":[["var",12],[" ",17],["operatorToken",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["operatorToken",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["PrefixOperatorExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PrefixOperatorExprSyntax","postfixExpression"],"f":[["var",12],[" ",17],["postfixExpression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["postfixExpression",7],[": ",17],["ExprSyntax",18]]},{"p":["SwitchDefaultLabelSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SwitchDefaultLabelSyntax","defaultKeyword"],"f":[["var",12],[" ",17],["defaultKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["defaultKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["SwitchDefaultLabelSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SwitchDefaultLabelSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["AccessLevelModifierSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessLevelModifierSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AccessLevelModifierSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AccessLevelModifierSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["AccessLevelModifierSyntax","modifier"],"f":[["var",12],[" ",17],["modifier",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifier",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessLevelModifierSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessPathComponentSyntax","trailingDot"],"f":[["var",12],[" ",17],["trailingDot",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingDot",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AccessPathComponentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AccessPathComponentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AccessPathComponentSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["EnumCaseElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["EnumCaseElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["EnumCaseElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `EnumCaseElementListSyntax`."},{"p":["EnumCaseElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["EnumCaseElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `EnumCaseElementListSyntax`."},{"p":["EnumCaseElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["EnumCaseElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["GenericArgumentListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["GenericArgumentListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["GenericArgumentListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `GenericArgumentListSyntax`."},{"p":["GenericArgumentListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["GenericArgumentListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `GenericArgumentListSyntax`."},{"p":["GenericArgumentListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["GenericArgumentListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["PostfixIfConfigExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PostfixIfConfigExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PostfixIfConfigExprSyntax","base"],"f":[["var",12],[" ",17],["base",7],[": ",17],["ExprSyntax",18,441],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["base",7],[": ",17],["ExprSyntax",18],["?",17]]},{"p":["PostfixIfConfigExprSyntax","config"],"f":[["var",12],[" ",17],["config",7],[": ",17],["IfConfigDeclSyntax",18,73],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["config",7],[": ",17],["IfConfigDeclSyntax",18]]},{"p":["PoundSourceLocationSyntax","poundSourceLocation"],"f":[["var",12],[" ",17],["poundSourceLocation",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundSourceLocation",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["PoundSourceLocationSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PoundSourceLocationSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PoundSourceLocationSyntax","args"],"f":[["var",12],[" ",17],["args",7],[": ",17],["PoundSourceLocationArgsSyntax",18,388],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["args",7],[": ",17],["PoundSourceLocationArgsSyntax",18],["?",17]]},{"p":["PoundSourceLocationSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["PrecedenceGroupDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]],"d":"\nThe attributes applied to the 'precedencegroup' declaration.\n"},{"p":["PrecedenceGroupDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]],"d":"\nThe name of this precedence group.\n","o":1811},{"p":["PrecedenceGroupDeclSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PrecedenceGroupDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PrecedenceGroupDeclSyntax","groupAttributes"],"f":[["var",12],[" ",17],["groupAttributes",7],[": ",17],["PrecedenceGroupAttributeListSyntax",18,424],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["groupAttributes",7],[": ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"\nThe characteristics of this precedence group.\n"},{"p":["PrecedenceGroupDeclSyntax","precedencegroupKeyword"],"f":[["var",12],[" ",17],["precedencegroupKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["precedencegroupKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupDeclSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]],"d":"\nThe declaration modifiers applied to the 'precedencegroup'\ndeclaration.\n"},{"p":["SameTypeRequirementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SameTypeRequirementSyntax","leftTypeIdentifier"],"f":[["var",12],[" ",17],["leftTypeIdentifier",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftTypeIdentifier",7],[": ",17],["TypeSyntax",18]]},{"p":["SameTypeRequirementSyntax","rightTypeIdentifier"],"f":[["var",12],[" ",17],["rightTypeIdentifier",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightTypeIdentifier",7],[": ",17],["TypeSyntax",18]]},{"p":["SameTypeRequirementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SameTypeRequirementSyntax","equalityToken"],"f":[["var",12],[" ",17],["equalityToken",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["equalityToken",7],[": ",17],["TokenSyntax",18]]},{"p":["TargetFunctionEntrySyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TargetFunctionEntrySyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nA trailing comma if this argument is followed by another one\n","o":2184},{"p":["TargetFunctionEntrySyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TargetFunctionEntrySyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"The colon separating the label and the value"},{"p":["TargetFunctionEntrySyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18]],"d":"The label of the argument"},{"p":["TargetFunctionEntrySyntax","delcname"],"f":[["var",12],[" ",17],["delcname",7],[": ",17],["DeclNameSyntax",18,459],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["delcname",7],[": ",17],["DeclNameSyntax",18]],"d":"The value for this argument"},{"p":["TuplePatternElementSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2689},{"p":["TuplePatternElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TuplePatternElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["TuplePatternElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TuplePatternElementSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["TuplePatternElementSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2690},{"p":["ValueBindingPatternSyntax","valuePattern"],"f":[["var",12],[" ",17],["valuePattern",7],[": ",17],["PatternSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["valuePattern",7],[": ",17],["PatternSyntax",18]]},{"p":["ValueBindingPatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ValueBindingPatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ValueBindingPatternSyntax","letOrVarKeyword"],"f":[["var",12],[" ",17],["letOrVarKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["letOrVarKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["AvailabilityArgumentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AvailabilityArgumentSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nA trailing comma if the argument is followed by another\nargument\n"},{"p":["AvailabilityArgumentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AvailabilityArgumentSyntax","entry"],"f":[["var",12],[" ",17],["entry",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["entry",7],[": ",17],["Syntax",18]],"d":"The actual argument"},{"p":["AvailabilitySpecListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["AvailabilitySpecListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AvailabilitySpecListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `AvailabilitySpecListSyntax`."},{"p":["AvailabilitySpecListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AvailabilitySpecListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `AvailabilitySpecListSyntax`."},{"p":["AvailabilitySpecListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["AvailabilitySpecListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["ClassRestrictionTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ClassRestrictionTypeSyntax","classKeyword"],"f":[["var",12],[" ",17],["classKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["classKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ClassRestrictionTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ConditionElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["ConditionElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ConditionElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ConditionElementListSyntax`."},{"p":["ConditionElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ConditionElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ConditionElementListSyntax`."},{"p":["ConditionElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["ConditionElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["DeclNameArgumentListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["DeclNameArgumentListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DeclNameArgumentListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `DeclNameArgumentListSyntax`."},{"p":["DeclNameArgumentListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DeclNameArgumentListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `DeclNameArgumentListSyntax`."},{"p":["DeclNameArgumentListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["DeclNameArgumentListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["GenericParameterListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["GenericParameterListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["GenericParameterListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `GenericParameterListSyntax`."},{"p":["GenericParameterListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["GenericParameterListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `GenericParameterListSyntax`."},{"p":["GenericParameterListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["GenericParameterListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["MemberTypeIdentifierSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["MemberTypeIdentifierSyntax","baseType"],"f":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18]]},{"p":["MemberTypeIdentifierSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["MemberTypeIdentifierSyntax","genericArgumentClause"],"f":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18,356],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18],["?",17]]},{"p":["MemberTypeIdentifierSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["MemberTypeIdentifierSyntax","period"],"f":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18]]},{"p":["OptionalChainingExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["OptionalChainingExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["OptionalChainingExprSyntax","questionMark"],"f":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["questionMark",7],[": ",17],["TokenSyntax",18]]},{"p":["OptionalChainingExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SimpleTypeIdentifierSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SimpleTypeIdentifierSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SimpleTypeIdentifierSyntax","genericArgumentClause"],"f":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18,356],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18],["?",17]]},{"p":["SimpleTypeIdentifierSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["TupleExprElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["TupleExprElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TupleExprElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `TupleExprElementListSyntax`."},{"p":["TupleExprElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TupleExprElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `TupleExprElementListSyntax`."},{"p":["TupleExprElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["TupleExprElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["TupleTypeElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TupleTypeElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["TupleTypeElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TupleTypeElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `TupleTypeElementListSyntax`."},{"p":["TupleTypeElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `TupleTypeElementListSyntax`."},{"p":["TupleTypeElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["TupleTypeElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["AvailabilityConditionSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["AvailabilityConditionSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AvailabilityConditionSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AvailabilityConditionSyntax","availabilitySpec"],"f":[["var",12],[" ",17],["availabilitySpec",7],[": ",17],["AvailabilitySpecListSyntax",18,326],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["availabilitySpec",7],[": ",17],["AvailabilitySpecListSyntax",18]]},{"p":["AvailabilityConditionSyntax","poundAvailableKeyword"],"f":[["var",12],[" ",17],["poundAvailableKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundAvailableKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["AvailabilityConditionSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["DictionaryElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["DictionaryElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DictionaryElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `DictionaryElementListSyntax`."},{"p":["DictionaryElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DictionaryElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `DictionaryElementListSyntax`."},{"p":["DictionaryElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["DictionaryElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["DiscardAssignmentExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DiscardAssignmentExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DiscardAssignmentExprSyntax","wildcard"],"f":[["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18]]},{"p":["EditorPlaceholderExprSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["EditorPlaceholderExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["EditorPlaceholderExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["FunctionParameterListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["FunctionParameterListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["FunctionParameterListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `FunctionParameterListSyntax`."},{"p":["FunctionParameterListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["FunctionParameterListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `FunctionParameterListSyntax`."},{"p":["FunctionParameterListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["FunctionParameterListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["GenericArgumentClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["GenericArgumentClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["GenericArgumentClauseSyntax","leftAngleBracket"],"f":[["var",12],[" ",17],["leftAngleBracket",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftAngleBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericArgumentClauseSyntax","rightAngleBracket"],"f":[["var",12],[" ",17],["rightAngleBracket",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightAngleBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericArgumentClauseSyntax","arguments"],"f":[["var",12],[" ",17],["arguments",7],[": ",17],["GenericArgumentListSyntax",18,308],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arguments",7],[": ",17],["GenericArgumentListSyntax",18]]},{"p":["PrimaryAssociatedTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PrimaryAssociatedTypeSyntax","inheritedType"],"f":[["var",12],[" ",17],["inheritedType",7],[": ",17],["TypeSyntax",18,443],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritedType",7],[": ",17],["TypeSyntax",18],["?",17]]},{"p":["PrimaryAssociatedTypeSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["PrimaryAssociatedTypeSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["TypeInitializerClauseSyntax",18,366],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["TypeInitializerClauseSyntax",18],["?",17]]},{"p":["PrimaryAssociatedTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PrimaryAssociatedTypeSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["PrimaryAssociatedTypeSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["PrimaryAssociatedTypeSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["StringLiteralSegmentsSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["StringLiteralSegmentsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["StringLiteralSegmentsSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `StringLiteralSegmentsSyntax`."},{"p":["StringLiteralSegmentsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["StringLiteralSegmentsSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `StringLiteralSegmentsSyntax`."},{"p":["StringLiteralSegmentsSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["StringLiteralSegmentsSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["SymbolicReferenceExprSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]]},{"p":["SymbolicReferenceExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SymbolicReferenceExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SymbolicReferenceExprSyntax","genericArgumentClause"],"f":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18,356],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18],["?",17]]},{"p":["TypeInheritanceClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TypeInheritanceClauseSyntax","inheritedTypeCollection"],"f":[["var",12],[" ",17],["inheritedTypeCollection",7],[": ",17],["InheritedTypeListSyntax",18,256],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritedTypeCollection",7],[": ",17],["InheritedTypeListSyntax",18]]},{"p":["TypeInheritanceClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TypeInheritanceClauseSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["TypeInitializerClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TypeInitializerClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TypeInitializerClauseSyntax","equal"],"f":[["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18]]},{"p":["TypeInitializerClauseSyntax","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["value",7],[": ",17],["TypeSyntax",18]]},{"p":["UnresolvedPatternExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["UnresolvedPatternExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["UnresolvedPatternExprSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["ClosureCaptureItemListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["ClosureCaptureItemListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ClosureCaptureItemListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ClosureCaptureItemListSyntax`."},{"p":["ClosureCaptureItemListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ClosureCaptureItemListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ClosureCaptureItemListSyntax`."},{"p":["ClosureCaptureItemListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["ClosureCaptureItemListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["CompositionTypeElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CompositionTypeElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["CompositionTypeElementSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18]]},{"p":["CompositionTypeElementSyntax","ampersand"],"f":[["var",12],[" ",17],["ampersand",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ampersand",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ConformanceRequirementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ConformanceRequirementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ConformanceRequirementSyntax","leftTypeIdentifier"],"f":[["var",12],[" ",17],["leftTypeIdentifier",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftTypeIdentifier",7],[": ",17],["TypeSyntax",18]]},{"p":["ConformanceRequirementSyntax","rightTypeIdentifier"],"f":[["var",12],[" ",17],["rightTypeIdentifier",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightTypeIdentifier",7],[": ",17],["TypeSyntax",18]]},{"p":["ConformanceRequirementSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["DifferentiabilityParamSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DifferentiabilityParamSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["DifferentiabilityParamSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DifferentiabilityParamSyntax","parameter"],"f":[["var",12],[" ",17],["parameter",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["parameter",7],[": ",17],["Syntax",18]]},{"p":["GenericParameterClauseSyntax","genericParameterList"],"f":[["var",12],[" ",17],["genericParameterList",7],[": ",17],["GenericParameterListSyntax",18,334],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterList",7],[": ",17],["GenericParameterListSyntax",18]]},{"p":["GenericParameterClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["GenericParameterClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["GenericParameterClauseSyntax","leftAngleBracket"],"f":[["var",12],[" ",17],["leftAngleBracket",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftAngleBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericParameterClauseSyntax","rightAngleBracket"],"f":[["var",12],[" ",17],["rightAngleBracket",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightAngleBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["GenericRequirementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["GenericRequirementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["GenericRequirementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `GenericRequirementListSyntax`."},{"p":["GenericRequirementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["GenericRequirementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `GenericRequirementListSyntax`."},{"p":["GenericRequirementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["GenericRequirementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["LabeledSpecializeEntrySyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["LabeledSpecializeEntrySyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nA trailing comma if this argument is followed by another one\n","o":2184},{"p":["LabeledSpecializeEntrySyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["LabeledSpecializeEntrySyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"The colon separating the label and the value"},{"p":["LabeledSpecializeEntrySyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18]],"d":"The label of the argument"},{"p":["LabeledSpecializeEntrySyntax","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["value",7],[": ",17],["TokenSyntax",18]],"d":"The value for this argument"},{"p":["ClosureCaptureSignatureSyntax","leftSquare"],"f":[["var",12],[" ",17],["leftSquare",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftSquare",7],[": ",17],["TokenSyntax",18]]},{"p":["ClosureCaptureSignatureSyntax","rightSquare"],"f":[["var",12],[" ",17],["rightSquare",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightSquare",7],[": ",17],["TokenSyntax",18]]},{"p":["ClosureCaptureSignatureSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ClosureCaptureSignatureSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ClosureCaptureSignatureSyntax","items"],"f":[["var",12],[" ",17],["items",7],[": ",17],["ClosureCaptureItemListSyntax",18,370],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["items",7],[": ",17],["ClosureCaptureItemListSyntax",18],["?",17]]},{"p":["DifferentiabilityParamsSyntax","diffParams"],"f":[["var",12],[" ",17],["diffParams",7],[": ",17],["DifferentiabilityParamListSyntax",18,408],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["diffParams",7],[": ",17],["DifferentiabilityParamListSyntax",18]],"d":"The parameters for differentiation."},{"p":["DifferentiabilityParamsSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["DifferentiabilityParamsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DifferentiabilityParamsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DifferentiabilityParamsSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","lineNumber"],"f":[["var",12],[" ",17],["lineNumber",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["lineNumber",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PoundSourceLocationArgsSyntax","fileArgColon"],"f":[["var",12],[" ",17],["fileArgColon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["fileArgColon",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","fileArgLabel"],"f":[["var",12],[" ",17],["fileArgLabel",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["fileArgLabel",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","lineArgColon"],"f":[["var",12],[" ",17],["lineArgColon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["lineArgColon",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","lineArgLabel"],"f":[["var",12],[" ",17],["lineArgLabel",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["lineArgLabel",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PoundSourceLocationArgsSyntax","comma"],"f":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18]]},{"p":["PoundSourceLocationArgsSyntax","fileName"],"f":[["var",12],[" ",17],["fileName",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["fileName",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupNameListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["PrecedenceGroupNameListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PrecedenceGroupNameListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `PrecedenceGroupNameListSyntax`."},{"p":["PrecedenceGroupNameListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PrecedenceGroupNameListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `PrecedenceGroupNameListSyntax`."},{"p":["PrecedenceGroupNameListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["PrecedenceGroupNameListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["PrecedenceGroupRelationSyntax","higherThanOrLowerThan"],"f":[["var",12],[" ",17],["higherThanOrLowerThan",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["higherThanOrLowerThan",7],[": ",17],["TokenSyntax",18]],"d":"\nThe relation to specified other precedence groups.\n"},{"p":["PrecedenceGroupRelationSyntax","otherNames"],"f":[["var",12],[" ",17],["otherNames",7],[": ",17],["PrecedenceGroupNameListSyntax",18,390],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["otherNames",7],[": ",17],["PrecedenceGroupNameListSyntax",18]],"d":"\nThe name of other precedence group to which this precedence\ngroup relates.\n"},{"p":["PrecedenceGroupRelationSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PrecedenceGroupRelationSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PrecedenceGroupRelationSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["TuplePatternElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["TuplePatternElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TuplePatternElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `TuplePatternElementListSyntax`."},{"p":["TuplePatternElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TuplePatternElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `TuplePatternElementListSyntax`."},{"p":["TuplePatternElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["TuplePatternElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["UnavailabilityConditionSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["UnavailabilityConditionSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["UnavailabilityConditionSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["UnavailabilityConditionSyntax","availabilitySpec"],"f":[["var",12],[" ",17],["availabilitySpec",7],[": ",17],["AvailabilitySpecListSyntax",18,326],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["availabilitySpec",7],[": ",17],["AvailabilitySpecListSyntax",18]]},{"p":["UnavailabilityConditionSyntax","poundUnavailableKeyword"],"f":[["var",12],[" ",17],["poundUnavailableKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["poundUnavailableKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["UnavailabilityConditionSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["MatchingPatternConditionSyntax","caseKeyword"],"f":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["MatchingPatternConditionSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18,258],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18]]},{"p":["MatchingPatternConditionSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["MatchingPatternConditionSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["MatchingPatternConditionSyntax","typeAnnotation"],"f":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18,157],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18],["?",17]]},{"p":["MatchingPatternConditionSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["OptionalBindingConditionSyntax","initializer"],"f":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18,258],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["initializer",7],[": ",17],["InitializerClauseSyntax",18]]},{"p":["OptionalBindingConditionSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["OptionalBindingConditionSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["OptionalBindingConditionSyntax","typeAnnotation"],"f":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18,157],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18],["?",17]]},{"p":["OptionalBindingConditionSyntax","letOrVarKeyword"],"f":[["var",12],[" ",17],["letOrVarKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["letOrVarKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["OptionalBindingConditionSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["PrecedenceGroupAssignmentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PrecedenceGroupAssignmentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PrecedenceGroupAssignmentSyntax","assignmentKeyword"],"f":[["var",12],[" ",17],["assignmentKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["assignmentKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupAssignmentSyntax","flag"],"f":[["var",12],[" ",17],["flag",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["flag",7],[": ",17],["TokenSyntax",18]],"d":"\nWhen true, an operator in the corresponding precedence group\nuses the same grouping rules during optional chaining as the\nassignment operators from the standard library. Otherwise,\noperators in the precedence group follows the same optional\nchaining rules as operators that don't perform assignment.\n"},{"p":["PrecedenceGroupAssignmentSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["PrimaryAssociatedTypeListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PrimaryAssociatedTypeListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["PrimaryAssociatedTypeListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PrimaryAssociatedTypeListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `PrimaryAssociatedTypeListSyntax`."},{"p":["PrimaryAssociatedTypeListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `PrimaryAssociatedTypeListSyntax`."},{"p":["PrimaryAssociatedTypeListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["PrimaryAssociatedTypeListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["CompositionTypeElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CompositionTypeElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["CompositionTypeElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["CompositionTypeElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `CompositionTypeElementListSyntax`."},{"p":["CompositionTypeElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `CompositionTypeElementListSyntax`."},{"p":["CompositionTypeElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["CompositionTypeElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["DifferentiabilityParamListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["DifferentiabilityParamListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DifferentiabilityParamListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `DifferentiabilityParamListSyntax`."},{"p":["DifferentiabilityParamListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DifferentiabilityParamListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `DifferentiabilityParamListSyntax`."},{"p":["DifferentiabilityParamListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["DifferentiabilityParamListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["OperatorPrecedenceAndTypesSyntax","precedenceGroupAndDesignatedTypes"],"f":[["var",12],[" ",17],["precedenceGroupAndDesignatedTypes",7],[": ",17],["IdentifierListSyntax",18,141],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["precedenceGroupAndDesignatedTypes",7],[": ",17],["IdentifierListSyntax",18]],"d":"\nThe precedence group and designated types for this operator\n"},{"p":["OperatorPrecedenceAndTypesSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["OperatorPrecedenceAndTypesSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["OperatorPrecedenceAndTypesSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupNameElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PrecedenceGroupNameElementSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["PrecedenceGroupNameElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PrecedenceGroupNameElementSyntax","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["TokenSyntax",18]]},{"p":["AvailabilityLabeledArgumentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AvailabilityLabeledArgumentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AvailabilityLabeledArgumentSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"The colon separating label and value"},{"p":["AvailabilityLabeledArgumentSyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18]],"d":"The label of the argument"},{"p":["AvailabilityLabeledArgumentSyntax","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["value",7],[": ",17],["Syntax",18]],"d":"The value of this labeled argument"},{"p":["SpecializeAttributeSpecListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["SpecializeAttributeSpecListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SpecializeAttributeSpecListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `SpecializeAttributeSpecListSyntax`."},{"p":["SpecializeAttributeSpecListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SpecializeAttributeSpecListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `SpecializeAttributeSpecListSyntax`."},{"p":["SpecializeAttributeSpecListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["SpecializeAttributeSpecListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["ImplementsAttributeArgumentsSyntax","declNameArguments"],"f":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]],"d":"\nThe argument labels of the protocol's requirement if it\nis a function requirement.\n"},{"p":["ImplementsAttributeArgumentsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ImplementsAttributeArgumentsSyntax","declBaseName"],"f":[["var",12],[" ",17],["declBaseName",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declBaseName",7],[": ",17],["Syntax",18]],"d":"\nThe base name of the protocol's requirement.\n"},{"p":["ImplementsAttributeArgumentsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ImplementsAttributeArgumentsSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["SimpleTypeIdentifierSyntax",18,340],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["SimpleTypeIdentifierSyntax",18]],"d":"\nThe type for which the method with this attribute\nimplements a requirement.\n"},{"p":["ImplementsAttributeArgumentsSyntax","comma"],"f":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18]],"d":"\nThe comma separating the type and method name\n"},{"p":["NamedAttributeStringArgumentSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["NamedAttributeStringArgumentSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["NamedAttributeStringArgumentSyntax","stringOrDeclname"],"f":[["var",12],[" ",17],["stringOrDeclname",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["stringOrDeclname",7],[": ",17],["Syntax",18]]},{"p":["NamedAttributeStringArgumentSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"The colon separating the label and the value"},{"p":["NamedAttributeStringArgumentSyntax","nameTok"],"f":[["var",12],[" ",17],["nameTok",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["nameTok",7],[": ",17],["TokenSyntax",18]],"d":"The label of the argument"},{"p":["PrecedenceGroupAssociativitySyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PrecedenceGroupAssociativitySyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PrecedenceGroupAssociativitySyntax","associativityKeyword"],"f":[["var",12],[" ",17],["associativityKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["associativityKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupAssociativitySyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["PrecedenceGroupAssociativitySyntax","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["value",7],[": ",17],["TokenSyntax",18]],"d":"\nOperators that are `left`-associative group left-to-right.\nOperators that are `right`-associative group right-to-left.\nOperators that are specified with an associativity of `none`\ndon't associate at all\n"},{"p":["PrecedenceGroupAttributeListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["PrecedenceGroupAttributeListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["PrecedenceGroupAttributeListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `PrecedenceGroupAttributeListSyntax`."},{"p":["PrecedenceGroupAttributeListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["PrecedenceGroupAttributeListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `PrecedenceGroupAttributeListSyntax`."},{"p":["PrecedenceGroupAttributeListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["PrecedenceGroupAttributeListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["DifferentiabilityParamsClauseSyntax","parameters"],"f":[["var",12],[" ",17],["parameters",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["parameters",7],[": ",17],["Syntax",18]]},{"p":["DifferentiabilityParamsClauseSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DifferentiabilityParamsClauseSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DifferentiabilityParamsClauseSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"\nThe colon separating \"wrt\" and the parameter list.\n"},{"p":["DifferentiabilityParamsClauseSyntax","wrtLabel"],"f":[["var",12],[" ",17],["wrtLabel",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["wrtLabel",7],[": ",17],["TokenSyntax",18]],"d":"The \"wrt\" label."},{"p":["AvailabilityVersionRestrictionSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AvailabilityVersionRestrictionSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AvailabilityVersionRestrictionSyntax","version"],"f":[["var",12],[" ",17],["version",7],[": ",17],["VersionTupleSyntax",18,97],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["version",7],[": ",17],["VersionTupleSyntax",18],["?",17]]},{"p":["AvailabilityVersionRestrictionSyntax","platform"],"f":[["var",12],[" ",17],["platform",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["platform",7],[": ",17],["TokenSyntax",18]],"d":"\nThe name of the OS on which the availability should be\nrestricted or 'swift' if the availability should be\nrestricted based on a Swift version.\n"},{"p":["MultipleTrailingClosureElementSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["MultipleTrailingClosureElementSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["MultipleTrailingClosureElementSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]]},{"p":["MultipleTrailingClosureElementSyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18]]},{"p":["MultipleTrailingClosureElementSyntax","closure"],"f":[["var",12],[" ",17],["closure",7],[": ",17],["ClosureExprSyntax",18,41],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["closure",7],[": ",17],["ClosureExprSyntax",18]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","wrappedType"],"f":[["var",12],[" ",17],["wrappedType",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["wrappedType",7],[": ",17],["TypeSyntax",18]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","exclamationMark"],"f":[["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18]]},{"p":["DifferentiableAttributeArgumentsSyntax","diffParams"],"f":[["var",12],[" ",17],["diffParams",7],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["diffParams",7],[": ",17],["DifferentiabilityParamsClauseSyntax",18],["?",17]]},{"p":["DifferentiableAttributeArgumentsSyntax","whereClause"],"f":[["var",12],[" ",17],["whereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["DifferentiableAttributeArgumentsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DifferentiableAttributeArgumentsSyntax","diffKindComma"],"f":[["var",12],[" ",17],["diffKindComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["diffKindComma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nThe comma following the differentiability kind, if it exists.\n"},{"p":["DifferentiableAttributeArgumentsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DifferentiableAttributeArgumentsSyntax","diffParamsComma"],"f":[["var",12],[" ",17],["diffParamsComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["diffParamsComma",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nThe comma following the differentiability parameters clause,\nif it exists.\n"},{"p":["DifferentiableAttributeArgumentsSyntax","diffKind"],"f":[["var",12],[" ",17],["diffKind",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["diffKind",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["MultipleTrailingClosureElementListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["MultipleTrailingClosureElementListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["MultipleTrailingClosureElementListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `MultipleTrailingClosureElementListSyntax`."},{"p":["MultipleTrailingClosureElementListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["MultipleTrailingClosureElementListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `MultipleTrailingClosureElementListSyntax`."},{"p":["MultipleTrailingClosureElementListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["MultipleTrailingClosureElementListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","diffParams"],"f":[["var",12],[" ",17],["diffParams",7],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["diffParams",7],[": ",17],["DifferentiabilityParamsClauseSyntax",18],["?",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","accessorKind"],"f":[["var",12],[" ",17],["accessorKind",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["accessorKind",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"The accessor name."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","originalDeclName"],"f":[["var",12],[" ",17],["originalDeclName",7],[": ",17],["QualifiedDeclNameSyntax",18,270],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["originalDeclName",7],[": ",17],["QualifiedDeclNameSyntax",18]],"d":"The referenced original declaration name."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","colon"],"f":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"\nThe colon separating the \"of\" label and the original\ndeclaration name.\n"},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","comma"],"f":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","period"],"f":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nThe period separating the original declaration name and the\naccessor name.\n"},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","ofLabel"],"f":[["var",12],[" ",17],["ofLabel",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ofLabel",7],[": ",17],["TokenSyntax",18]],"d":"The \"of\" label."},{"p":["DeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"d":"Reconstructs the real syntax type for this type from the node's kind and\nprovides a mirror that reflects this type.","o":7764},{"p":["DeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"d":"Reconstructs the real syntax type for this type from the node's kind and\nprovides a mirror that reflects this type.","o":7764},{"p":["ExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["StmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"d":"Reconstructs the real syntax type for this type from the node's kind and\nprovides a mirror that reflects this type.","o":7764},{"p":["StmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"d":"Reconstructs the real syntax type for this type from the node's kind and\nprovides a mirror that reflects this type.","o":7764},{"p":["TokenSyntax","totalLength"],"f":[["var",12],[" ",17],["totalLength",7],[": ",17],["SourceLength",18,524],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["totalLength",7],[": ",17],["SourceLength",18]],"d":"The length of this node including all of its trivia."},{"p":["TokenSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TokenSyntax","contentLength"],"f":[["var",12],[" ",17],["contentLength",7],[": ",17],["SourceLength",18,524],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["contentLength",7],[": ",17],["SourceLength",18]],"d":"The length this node takes up spelled out in the source, excluding its\nleading or trailing trivia."},{"p":["TokenSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18]],"d":"The leading trivia (spaces, newlines, etc.) associated with this token."},{"p":["TokenSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TokenSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this token."},{"p":["TokenSyntax","leadingTriviaLength"],"f":[["var",12],[" ",17],["leadingTriviaLength",7],[": ",17],["SourceLength",18,524],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTriviaLength",7],[": ",17],["SourceLength",18]],"d":"The length this node's leading trivia takes up spelled out in source."},{"p":["TokenSyntax","tokenClassification"],"f":[["var",12],[" ",17],["tokenClassification",7],[": ",17],["SyntaxClassifiedRange",18,518],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["tokenClassification",7],[": ",17],["SyntaxClassifiedRange",18]],"d":"The `SyntaxClassifiedRange` for the token text, excluding trivia."},{"p":["TokenSyntax","trailingTriviaLength"],"f":[["var",12],[" ",17],["trailingTriviaLength",7],[": ",17],["SourceLength",18,524],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTriviaLength",7],[": ",17],["SourceLength",18]],"d":"The length this node's trailing trivia takes up spelled out in source."},{"p":["TokenSyntax","text"],"f":[["var",12],[" ",17],["text",7],[": ",17],["String",18,7655],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["text",7],[": ",17],["String",18]],"d":"The text of the token as written in the source code."},{"p":["TokenSyntax","presence"],"f":[["var",12],[" ",17],["presence",7],[": ",17],["SourcePresence",18,23],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["presence",7],[": ",17],["SourcePresence",18]]},{"p":["TokenSyntax","tokenKind"],"f":[["var",12],[" ",17],["tokenKind",7],[": ",17],["TokenKind",18,24],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["tokenKind",7],[": ",17],["TokenKind",18]],"d":"The kind of token this node represents."},{"p":["AsExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AsExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AsExprSyntax","questionOrExclamationMark"],"f":[["var",12],[" ",17],["questionOrExclamationMark",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["questionOrExclamationMark",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["AsExprSyntax","asTok"],"f":[["var",12],[" ",17],["asTok",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asTok",7],[": ",17],["TokenSyntax",18]]},{"p":["AsExprSyntax","typeName"],"f":[["var",12],[" ",17],["typeName",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeName",7],[": ",17],["TypeSyntax",18]]},{"p":["BracedSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["BracedSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]]},{"p":["DoStmtSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2689},{"p":["DoStmtSyntax","catchClauses"],"f":[["var",12],[" ",17],["catchClauses",7],[": ",17],["CatchClauseListSyntax",18,160],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["catchClauses",7],[": ",17],["CatchClauseListSyntax",18],["?",17]]},{"p":["DoStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DoStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DoStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]],"o":1787},{"p":["DoStmtSyntax","doKeyword"],"f":[["var",12],[" ",17],["doKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["doKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["DoStmtSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2690},{"p":["IfStmtSyntax","conditions"],"f":[["var",12],[" ",17],["conditions",7],[": ",17],["ConditionElementListSyntax",18,330],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["conditions",7],[": ",17],["ConditionElementListSyntax",18]]},{"p":["IfStmtSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2689},{"p":["IfStmtSyntax","elseKeyword"],"f":[["var",12],[" ",17],["elseKeyword",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elseKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["IfStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["IfStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["IfStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]],"o":1787},{"p":["IfStmtSyntax","elseBody"],"f":[["var",12],[" ",17],["elseBody",7],[": ",17],["Syntax",18,513],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elseBody",7],[": ",17],["Syntax",18],["?",17]]},{"p":["IfStmtSyntax","ifKeyword"],"f":[["var",12],[" ",17],["ifKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ifKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["IfStmtSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2690},{"p":["IsExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["IsExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["IsExprSyntax","isTok"],"f":[["var",12],[" ",17],["isTok",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["isTok",7],[": ",17],["TokenSyntax",18]]},{"p":["IsExprSyntax","typeName"],"f":[["var",12],[" ",17],["typeName",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeName",7],[": ",17],["TypeSyntax",18]]},{"p":["LabeledSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["LabeledSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["PatternSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"d":"Reconstructs the real syntax type for this type from the node's kind and\nprovides a mirror that reflects this type.","o":7764},{"p":["PatternSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TryExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["TryExprSyntax","tryKeyword"],"f":[["var",12],[" ",17],["tryKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["tryKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["TryExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TryExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TryExprSyntax","questionOrExclamationMark"],"f":[["var",12],[" ",17],["questionOrExclamationMark",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["questionOrExclamationMark",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["UnknownSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["UnknownSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CaseItemSyntax","whereClause"],"f":[["var",12],[" ",17],["whereClause",7],[": ",17],["WhereClauseSyntax",18,51],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whereClause",7],[": ",17],["WhereClauseSyntax",18],["?",17]]},{"p":["CaseItemSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["CaseItemSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["CaseItemSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CaseItemSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["DeclNameSyntax","declNameArguments"],"f":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]],"d":"\nThe argument labels of the protocol's requirement if it\nis a function requirement.\n"},{"p":["DeclNameSyntax","declBaseName"],"f":[["var",12],[" ",17],["declBaseName",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["declBaseName",7],[": ",17],["Syntax",18]],"d":"\nThe base name of the protocol's requirement.\n"},{"p":["DeclNameSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DeclNameSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["EnumDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]],"d":"\nThe attributes applied to the enum declaration.\n"},{"p":["EnumDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]],"d":"\nThe name of this enum.\n","o":1811},{"p":["EnumDeclSyntax","enumKeyword"],"f":[["var",12],[" ",17],["enumKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["enumKeyword",7],[": ",17],["TokenSyntax",18]],"d":"\nThe `enum` keyword for this declaration.\n"},{"p":["EnumDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["EnumDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["EnumDeclSyntax","genericParameters"],"f":[["var",12],[" ",17],["genericParameters",7],[": ",17],["GenericParameterClauseSyntax",18,378],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameters",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]],"d":"\nThe generic parameters, if any, for this enum.\n"},{"p":["EnumDeclSyntax","inheritanceClause"],"f":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,364],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]],"d":"\nThe inheritance clause describing conformances or raw\nvalues for this enum.\n"},{"p":["EnumDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]],"d":"\nThe `where` clause that applies to the generic parameters of\nthis enum.\n"},{"p":["EnumDeclSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18,182],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18]],"d":"\nThe cases and other members of this enum.\n"},{"p":["EnumDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]],"d":"\nThe declaration modifiers applied to the enum declaration.\n"},{"p":["ExprListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["ExprListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ExprListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ExprListSyntax`."},{"p":["ExprListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ExprListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ExprListSyntax`."},{"p":["ExprListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["ExprListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["ObjcNameSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["ObjcNameSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ObjcNameSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `ObjcNameSyntax`."},{"p":["ObjcNameSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ObjcNameSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `ObjcNameSyntax`."},{"p":["ObjcNameSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["ObjcNameSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["SomeTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SomeTypeSyntax","baseType"],"f":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["baseType",7],[": ",17],["TypeSyntax",18]]},{"p":["SomeTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SomeTypeSyntax","someSpecifier"],"f":[["var",12],[" ",17],["someSpecifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["someSpecifier",7],[": ",17],["TokenSyntax",18]]},{"p":["TypeExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TypeExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TypeExprSyntax","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["TypeSyntax",18]]},{"p":["ArrayExprSyntax","leftSquare"],"f":[["var",12],[" ",17],["leftSquare",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftSquare",7],[": ",17],["TokenSyntax",18]]},{"p":["ArrayExprSyntax","rightSquare"],"f":[["var",12],[" ",17],["rightSquare",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightSquare",7],[": ",17],["TokenSyntax",18]]},{"p":["ArrayExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ArrayExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ArrayExprSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["ArrayElementListSyntax",18,202],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["ArrayElementListSyntax",18]]},{"p":["ArrayTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ArrayTypeSyntax","elementType"],"f":[["var",12],[" ",17],["elementType",7],[": ",17],["TypeSyntax",18,443],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elementType",7],[": ",17],["TypeSyntax",18]]},{"p":["ArrayTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ArrayTypeSyntax","leftSquareBracket"],"f":[["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["ArrayTypeSyntax","rightSquareBracket"],"f":[["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18]]},{"p":["ArrowExprSyntax","arrowToken"],"f":[["var",12],[" ",17],["arrowToken",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["arrowToken",7],[": ",17],["TokenSyntax",18]]},{"p":["ArrowExprSyntax","throwsToken"],"f":[["var",12],[" ",17],["throwsToken",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwsToken",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ArrowExprSyntax","asyncKeyword"],"f":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["asyncKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ArrowExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ArrowExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AttributeSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nIf the attribute takes arguments, the closing parenthesis.\n"},{"p":["AttributeSyntax","atSignToken"],"f":[["var",12],[" ",17],["atSignToken",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["atSignToken",7],[": ",17],["TokenSyntax",18]],"d":"The `@` sign."},{"p":["AttributeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AttributeSyntax","attributeName"],"f":[["var",12],[" ",17],["attributeName",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributeName",7],[": ",17],["TokenSyntax",18]],"d":"The name of the attribute."},{"p":["AttributeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["AttributeSyntax","argument"],"f":[["var",12],[" ",17],["argument",7],[": ",17],["Syntax",18,513],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["argument",7],[": ",17],["Syntax",18],["?",17]],"d":"\nThe arguments of the attribute. In case the attribute\ntakes multiple arguments, they are gather in the\nappropriate takes first.\n"},{"p":["AttributeSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"\nIf the attribute takes arguments, the opening parenthesis.\n"},{"p":["AttributeSyntax","tokenList"],"f":[["var",12],[" ",17],["tokenList",7],[": ",17],["TokenListSyntax",18,501],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["tokenList",7],[": ",17],["TokenListSyntax",18],["?",17]]},{"p":["AwaitExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["AwaitExprSyntax","awaitKeyword"],"f":[["var",12],[" ",17],["awaitKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["awaitKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["AwaitExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["AwaitExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["BreakStmtSyntax","breakKeyword"],"f":[["var",12],[" ",17],["breakKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["breakKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["BreakStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["BreakStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["BreakStmtSyntax","label"],"f":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["label",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["CatchItemSyntax","whereClause"],"f":[["var",12],[" ",17],["whereClause",7],[": ",17],["WhereClauseSyntax",18,51],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whereClause",7],[": ",17],["WhereClauseSyntax",18],["?",17]]},{"p":["CatchItemSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["CatchItemSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2184},{"p":["CatchItemSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CatchItemSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,453],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18],["?",17]]},{"p":["ClassDeclSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]],"o":2791},{"p":["ClassDeclSyntax","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["TokenSyntax",18]],"o":1811},{"p":["ClassDeclSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ClassDeclSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ClassDeclSyntax","inheritanceClause"],"f":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,364],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]]},{"p":["ClassDeclSyntax","genericWhereClause"],"f":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["ClassDeclSyntax","classOrActorKeyword"],"f":[["var",12],[" ",17],["classOrActorKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["classOrActorKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ClassDeclSyntax","genericParameterClause"],"f":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,378],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["genericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["ClassDeclSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18,182],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18]],"o":2792},{"p":["ClassDeclSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]],"o":2793},{"p":["CodeBlockSyntax","rightBrace"],"f":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]],"o":2667},{"p":["CodeBlockSyntax","statements"],"f":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18,238],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["statements",7],[": ",17],["CodeBlockItemListSyntax",18]],"o":1868},{"p":["CodeBlockSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["CodeBlockSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["CodeBlockSyntax","leftBrace"],"f":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]],"o":2668},{"p":["DeclGroupSyntax","attributes"],"f":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["attributes",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["DeclGroupSyntax","members"],"f":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18,182],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["members",7],[": ",17],["MemberDeclBlockSyntax",18]]},{"p":["DeclGroupSyntax","modifiers"],"f":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["modifiers",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["DeferStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["DeferStmtSyntax","deferKeyword"],"f":[["var",12],[" ",17],["deferKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["deferKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["DeferStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["DeferStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]],"o":1787},{"p":["ElseBlockSyntax","elseKeyword"],"f":[["var",12],[" ",17],["elseKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elseKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ElseBlockSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ElseBlockSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ElseBlockSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]],"o":1787},{"p":["ForInStmtSyntax","forKeyword"],"f":[["var",12],[" ",17],["forKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["forKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ForInStmtSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2689},{"p":["ForInStmtSyntax","tryKeyword"],"f":[["var",12],[" ",17],["tryKeyword",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["tryKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ForInStmtSyntax","caseKeyword"],"f":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["caseKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ForInStmtSyntax","whereClause"],"f":[["var",12],[" ",17],["whereClause",7],[": ",17],["WhereClauseSyntax",18,51],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whereClause",7],[": ",17],["WhereClauseSyntax",18],["?",17]]},{"p":["ForInStmtSyntax","awaitKeyword"],"f":[["var",12],[" ",17],["awaitKeyword",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["awaitKeyword",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["ForInStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ForInStmtSyntax","sequenceExpr"],"f":[["var",12],[" ",17],["sequenceExpr",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["sequenceExpr",7],[": ",17],["ExprSyntax",18]]},{"p":["ForInStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["ForInStmtSyntax","typeAnnotation"],"f":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18,157],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["typeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18],["?",17]]},{"p":["ForInStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]],"o":1787},{"p":["ForInStmtSyntax","pattern"],"f":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18,453],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["pattern",7],[": ",17],["PatternSyntax",18]]},{"p":["ForInStmtSyntax","inKeyword"],"f":[["var",12],[" ",17],["inKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["inKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ForInStmtSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2690},{"p":["GuardStmtSyntax","conditions"],"f":[["var",12],[" ",17],["conditions",7],[": ",17],["ConditionElementListSyntax",18,330],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["conditions",7],[": ",17],["ConditionElementListSyntax",18]]},{"p":["GuardStmtSyntax","elseKeyword"],"f":[["var",12],[" ",17],["elseKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elseKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["GuardStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["GuardStmtSyntax","guardKeyword"],"f":[["var",12],[" ",17],["guardKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["guardKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["GuardStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["GuardStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]],"o":1787},{"p":["InOutExprSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["InOutExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["InOutExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["InOutExprSyntax","ampersand"],"f":[["var",12],[" ",17],["ampersand",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["ampersand",7],[": ",17],["TokenSyntax",18]]},{"p":["ThrowStmtSyntax","expression"],"f":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18,441],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["expression",7],[": ",17],["ExprSyntax",18]]},{"p":["ThrowStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["ThrowStmtSyntax","throwKeyword"],"f":[["var",12],[" ",17],["throwKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["throwKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["ThrowStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TokenListSyntax","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["TokenListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TokenListSyntax","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia (spaces, newlines, etc.) associated with this `TokenListSyntax`."},{"p":["TokenListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TokenListSyntax","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia (spaces, newlines, etc.) associated with this `TokenListSyntax`."},{"p":["TokenListSyntax","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection.","o":7723},{"p":["TokenListSyntax","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["TupleExprSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["TupleExprSyntax","elementList"],"f":[["var",12],[" ",17],["elementList",7],[": ",17],["TupleExprElementListSyntax",18,342],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elementList",7],[": ",17],["TupleExprElementListSyntax",18]]},{"p":["TupleExprSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TupleExprSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TupleExprSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["TupleTypeSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["TupleTypeSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"o":1749},{"p":["TupleTypeSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["TupleTypeSyntax","elements"],"f":[["var",12],[" ",17],["elements",7],[": ",17],["TupleTypeElementListSyntax",18,344],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elements",7],[": ",17],["TupleTypeElementListSyntax",18]]},{"p":["TupleTypeSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"o":1750},{"p":["WhileStmtSyntax","conditions"],"f":[["var",12],[" ",17],["conditions",7],[": ",17],["ConditionElementListSyntax",18,330],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["conditions",7],[": ",17],["ConditionElementListSyntax",18]]},{"p":["WhileStmtSyntax","labelColon"],"f":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelColon",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2689},{"p":["WhileStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["WhileStmtSyntax","whileKeyword"],"f":[["var",12],[" ",17],["whileKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["whileKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["WhileStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["WhileStmtSyntax","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18,487],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["CodeBlockSyntax",18]],"o":1787},{"p":["WhileStmtSyntax","labelName"],"f":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["labelName",7],[": ",17],["TokenSyntax",18],["?",17]],"o":2690},{"p":["YieldListSyntax","elementList"],"f":[["var",12],[" ",17],["elementList",7],[": ",17],["ExprListSyntax",18,463],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["elementList",7],[": ",17],["ExprListSyntax",18]]},{"p":["YieldListSyntax","rightParen"],"f":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]]},{"p":["YieldListSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["YieldListSyntax","trailingComma"],"f":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingComma",7],[": ",17],["TokenSyntax",18],["?",17]]},{"p":["YieldListSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["YieldListSyntax","leftParen"],"f":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]]},{"p":["YieldStmtSyntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["YieldStmtSyntax","yieldKeyword"],"f":[["var",12],[" ",17],["yieldKeyword",7],[": ",17],["TokenSyntax",18,444],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["yieldKeyword",7],[": ",17],["TokenSyntax",18]]},{"p":["YieldStmtSyntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["YieldStmtSyntax","yields"],"f":[["var",12],[" ",17],["yields",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["yields",7],[": ",17],["Syntax",18]]},{"p":["Syntax","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"d":"Reconstructs the real syntax type for this type from the node's kind and\nprovides a mirror that reflects this type.","o":7764},{"p":["Syntax","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"o":3372},{"p":["SyntaxCollection","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements, `present` or `missing`, in this collection."},{"p":["SyntaxVerifierError","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,7655],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":7768},{"p":["SyntaxClassifiedRange","kind"],"f":[["var",12],[" ",17],["kind",7],[": ",17],["SyntaxClassification",18,18]],"s":[["var",12],[" ",17],["kind",7],[": ",17],["SyntaxClassification",18]]},{"p":["SyntaxClassifiedRange","range"],"f":[["var",12],[" ",17],["range",7],[": ",17],["ByteSourceRange",18,528]],"s":[["var",12],[" ",17],["range",7],[": ",17],["ByteSourceRange",18]]},{"p":["SyntaxClassifiedRange","length"],"f":[["var",12],[" ",17],["length",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["length",7],[": ",17],["Int",18]]},{"p":["SyntaxClassifiedRange","offset"],"f":[["var",12],[" ",17],["offset",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["offset",7],[": ",17],["Int",18]]},{"p":["SyntaxClassifiedRange","endOffset"],"f":[["var",12],[" ",17],["endOffset",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endOffset",7],[": ",17],["Int",18]]},{"p":["SyntaxNode","asSyntax"],"f":[["var",12],[" ",17],["asSyntax",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSyntax",7],[": ",17],["Syntax",18]],"d":"Converts this node to a `Syntax` object.\n\nThis operation results in wrapping this node and all of its parents into\n`Syntax` objects. There's a cost associated with it that should be taken\ninto account before used inside performance critical code."},{"p":["SyntaxNode","asCaseItem"],"f":[["var",12],[" ",17],["asCaseItem",7],[": ",17],["CaseItemSyntax",18,457],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCaseItem",7],[": ",17],["CaseItemSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeclName"],"f":[["var",12],[" ",17],["asDeclName",7],[": ",17],["DeclNameSyntax",18,459],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeclName",7],[": ",17],["DeclNameSyntax",18],["?",17]]},{"p":["SyntaxNode","asEnumDecl"],"f":[["var",12],[" ",17],["asEnumDecl",7],[": ",17],["EnumDeclSyntax",18,461],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asEnumDecl",7],[": ",17],["EnumDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asExprList"],"f":[["var",12],[" ",17],["asExprList",7],[": ",17],["ExprListSyntax",18,463],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asExprList",7],[": ",17],["ExprListSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjcName"],"f":[["var",12],[" ",17],["asObjcName",7],[": ",17],["ObjcNameSyntax",18,465],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjcName",7],[": ",17],["ObjcNameSyntax",18],["?",17]]},{"p":["SyntaxNode","asSomeType"],"f":[["var",12],[" ",17],["asSomeType",7],[": ",17],["SomeTypeSyntax",18,467],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSomeType",7],[": ",17],["SomeTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asTypeExpr"],"f":[["var",12],[" ",17],["asTypeExpr",7],[": ",17],["TypeExprSyntax",18,469],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTypeExpr",7],[": ",17],["TypeExprSyntax",18],["?",17]]},{"p":["SyntaxNode","isCaseItem"],"f":[["var",12],[" ",17],["isCaseItem",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCaseItem",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeclName"],"f":[["var",12],[" ",17],["isDeclName",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeclName",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isEnumDecl"],"f":[["var",12],[" ",17],["isEnumDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEnumDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isExprList"],"f":[["var",12],[" ",17],["isExprList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isExprList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjcName"],"f":[["var",12],[" ",17],["isObjcName",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjcName",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSomeType"],"f":[["var",12],[" ",17],["isSomeType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSomeType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTypeExpr"],"f":[["var",12],[" ",17],["isTypeExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTypeExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asArrayExpr"],"f":[["var",12],[" ",17],["asArrayExpr",7],[": ",17],["ArrayExprSyntax",18,471],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asArrayExpr",7],[": ",17],["ArrayExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asArrayType"],"f":[["var",12],[" ",17],["asArrayType",7],[": ",17],["ArrayTypeSyntax",18,473],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asArrayType",7],[": ",17],["ArrayTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asArrowExpr"],"f":[["var",12],[" ",17],["asArrowExpr",7],[": ",17],["ArrowExprSyntax",18,475],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asArrowExpr",7],[": ",17],["ArrowExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asAttribute"],"f":[["var",12],[" ",17],["asAttribute",7],[": ",17],["AttributeSyntax",18,477],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAttribute",7],[": ",17],["AttributeSyntax",18],["?",17]]},{"p":["SyntaxNode","asAwaitExpr"],"f":[["var",12],[" ",17],["asAwaitExpr",7],[": ",17],["AwaitExprSyntax",18,479],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAwaitExpr",7],[": ",17],["AwaitExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asBreakStmt"],"f":[["var",12],[" ",17],["asBreakStmt",7],[": ",17],["BreakStmtSyntax",18,481],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asBreakStmt",7],[": ",17],["BreakStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asCatchItem"],"f":[["var",12],[" ",17],["asCatchItem",7],[": ",17],["CatchItemSyntax",18,483],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCatchItem",7],[": ",17],["CatchItemSyntax",18],["?",17]]},{"p":["SyntaxNode","asClassDecl"],"f":[["var",12],[" ",17],["asClassDecl",7],[": ",17],["ClassDeclSyntax",18,485],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClassDecl",7],[": ",17],["ClassDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asCodeBlock"],"f":[["var",12],[" ",17],["asCodeBlock",7],[": ",17],["CodeBlockSyntax",18,487],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCodeBlock",7],[": ",17],["CodeBlockSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeferStmt"],"f":[["var",12],[" ",17],["asDeferStmt",7],[": ",17],["DeferStmtSyntax",18,489],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeferStmt",7],[": ",17],["DeferStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asElseBlock"],"f":[["var",12],[" ",17],["asElseBlock",7],[": ",17],["ElseBlockSyntax",18,491],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asElseBlock",7],[": ",17],["ElseBlockSyntax",18],["?",17]]},{"p":["SyntaxNode","asForInStmt"],"f":[["var",12],[" ",17],["asForInStmt",7],[": ",17],["ForInStmtSyntax",18,493],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asForInStmt",7],[": ",17],["ForInStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asGuardStmt"],"f":[["var",12],[" ",17],["asGuardStmt",7],[": ",17],["GuardStmtSyntax",18,495],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGuardStmt",7],[": ",17],["GuardStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asInOutExpr"],"f":[["var",12],[" ",17],["asInOutExpr",7],[": ",17],["InOutExprSyntax",18,497],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asInOutExpr",7],[": ",17],["InOutExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asThrowStmt"],"f":[["var",12],[" ",17],["asThrowStmt",7],[": ",17],["ThrowStmtSyntax",18,499],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asThrowStmt",7],[": ",17],["ThrowStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asTokenList"],"f":[["var",12],[" ",17],["asTokenList",7],[": ",17],["TokenListSyntax",18,501],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTokenList",7],[": ",17],["TokenListSyntax",18],["?",17]]},{"p":["SyntaxNode","asTupleExpr"],"f":[["var",12],[" ",17],["asTupleExpr",7],[": ",17],["TupleExprSyntax",18,503],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTupleExpr",7],[": ",17],["TupleExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asTupleType"],"f":[["var",12],[" ",17],["asTupleType",7],[": ",17],["TupleTypeSyntax",18,505],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTupleType",7],[": ",17],["TupleTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asWhileStmt"],"f":[["var",12],[" ",17],["asWhileStmt",7],[": ",17],["WhileStmtSyntax",18,507],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asWhileStmt",7],[": ",17],["WhileStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asYieldList"],"f":[["var",12],[" ",17],["asYieldList",7],[": ",17],["YieldListSyntax",18,509],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asYieldList",7],[": ",17],["YieldListSyntax",18],["?",17]]},{"p":["SyntaxNode","asYieldStmt"],"f":[["var",12],[" ",17],["asYieldStmt",7],[": ",17],["YieldStmtSyntax",18,511],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asYieldStmt",7],[": ",17],["YieldStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,7655],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"d":"A source-accurate description of this node.","o":7768},{"p":["SyntaxNode","endPosition"],"f":[["var",12],[" ",17],["endPosition",7],[": ",17],["AbsolutePosition",18,530],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endPosition",7],[": ",17],["AbsolutePosition",18]],"d":"The end position of this node, including its trivia."},{"p":["SyntaxNode","isArrayExpr"],"f":[["var",12],[" ",17],["isArrayExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isArrayExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isArrayType"],"f":[["var",12],[" ",17],["isArrayType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isArrayType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isArrowExpr"],"f":[["var",12],[" ",17],["isArrowExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isArrowExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAttribute"],"f":[["var",12],[" ",17],["isAttribute",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAttribute",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAwaitExpr"],"f":[["var",12],[" ",17],["isAwaitExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAwaitExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isBreakStmt"],"f":[["var",12],[" ",17],["isBreakStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isBreakStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCatchItem"],"f":[["var",12],[" ",17],["isCatchItem",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCatchItem",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClassDecl"],"f":[["var",12],[" ",17],["isClassDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClassDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCodeBlock"],"f":[["var",12],[" ",17],["isCodeBlock",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCodeBlock",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeferStmt"],"f":[["var",12],[" ",17],["isDeferStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeferStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isElseBlock"],"f":[["var",12],[" ",17],["isElseBlock",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isElseBlock",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isForInStmt"],"f":[["var",12],[" ",17],["isForInStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isForInStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGuardStmt"],"f":[["var",12],[" ",17],["isGuardStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGuardStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isInOutExpr"],"f":[["var",12],[" ",17],["isInOutExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isInOutExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isThrowStmt"],"f":[["var",12],[" ",17],["isThrowStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isThrowStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTokenList"],"f":[["var",12],[" ",17],["isTokenList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTokenList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTupleExpr"],"f":[["var",12],[" ",17],["isTupleExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTupleExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTupleType"],"f":[["var",12],[" ",17],["isTupleType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTupleType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isWhileStmt"],"f":[["var",12],[" ",17],["isWhileStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isWhileStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isYieldList"],"f":[["var",12],[" ",17],["isYieldList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isYieldList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isYieldStmt"],"f":[["var",12],[" ",17],["isYieldStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isYieldStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","totalLength"],"f":[["var",12],[" ",17],["totalLength",7],[": ",17],["SourceLength",18,524],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["totalLength",7],[": ",17],["SourceLength",18]],"d":"The length of this node including all of its trivia."},{"p":["SyntaxNode","asAccessPath"],"f":[["var",12],[" ",17],["asAccessPath",7],[": ",17],["AccessPathSyntax",18,25],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessPath",7],[": ",17],["AccessPathSyntax",18],["?",17]]},{"p":["SyntaxNode","asImportDecl"],"f":[["var",12],[" ",17],["asImportDecl",7],[": ",17],["ImportDeclSyntax",18,27],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asImportDecl",7],[": ",17],["ImportDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asReturnStmt"],"f":[["var",12],[" ",17],["asReturnStmt",7],[": ",17],["ReturnStmtSyntax",18,29],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asReturnStmt",7],[": ",17],["ReturnStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asSourceFile"],"f":[["var",12],[" ",17],["asSourceFile",7],[": ",17],["SourceFileSyntax",18,31],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSourceFile",7],[": ",17],["SourceFileSyntax",18],["?",17]]},{"p":["SyntaxNode","asStructDecl"],"f":[["var",12],[" ",17],["asStructDecl",7],[": ",17],["StructDeclSyntax",18,33],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asStructDecl",7],[": ",17],["StructDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asSwitchCase"],"f":[["var",12],[" ",17],["asSwitchCase",7],[": ",17],["SwitchCaseSyntax",18,35],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSwitchCase",7],[": ",17],["SwitchCaseSyntax",18],["?",17]]},{"p":["SyntaxNode","asSwitchStmt"],"f":[["var",12],[" ",17],["asSwitchStmt",7],[": ",17],["SwitchStmtSyntax",18,37],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSwitchStmt",7],[": ",17],["SwitchStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","isAccessPath"],"f":[["var",12],[" ",17],["isAccessPath",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessPath",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isImportDecl"],"f":[["var",12],[" ",17],["isImportDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isImportDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isReturnStmt"],"f":[["var",12],[" ",17],["isReturnStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isReturnStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSourceFile"],"f":[["var",12],[" ",17],["isSourceFile",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSourceFile",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isStructDecl"],"f":[["var",12],[" ",17],["isStructDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isStructDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSwitchCase"],"f":[["var",12],[" ",17],["isSwitchCase",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSwitchCase",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSwitchStmt"],"f":[["var",12],[" ",17],["isSwitchStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSwitchStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asCatchClause"],"f":[["var",12],[" ",17],["asCatchClause",7],[": ",17],["CatchClauseSyntax",18,39],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCatchClause",7],[": ",17],["CatchClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asClosureExpr"],"f":[["var",12],[" ",17],["asClosureExpr",7],[": ",17],["ClosureExprSyntax",18,41],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureExpr",7],[": ",17],["ClosureExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asKeyPathExpr"],"f":[["var",12],[" ",17],["asKeyPathExpr",7],[": ",17],["KeyPathExprSyntax",18,43],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asKeyPathExpr",7],[": ",17],["KeyPathExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asTernaryExpr"],"f":[["var",12],[" ",17],["asTernaryExpr",7],[": ",17],["TernaryExprSyntax",18,45],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTernaryExpr",7],[": ",17],["TernaryExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnknownDecl"],"f":[["var",12],[" ",17],["asUnknownDecl",7],[": ",17],["UnknownDeclSyntax",18,47],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnknownDecl",7],[": ",17],["UnknownDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnknownExpr"],"f":[["var",12],[" ",17],["asUnknownExpr",7],[": ",17],["UnknownExprSyntax",18,48],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnknownExpr",7],[": ",17],["UnknownExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnknownStmt"],"f":[["var",12],[" ",17],["asUnknownStmt",7],[": ",17],["UnknownStmtSyntax",18,49],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnknownStmt",7],[": ",17],["UnknownStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnknownType"],"f":[["var",12],[" ",17],["asUnknownType",7],[": ",17],["UnknownTypeSyntax",18,50],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnknownType",7],[": ",17],["UnknownTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asWhereClause"],"f":[["var",12],[" ",17],["asWhereClause",7],[": ",17],["WhereClauseSyntax",18,51],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asWhereClause",7],[": ",17],["WhereClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","isCatchClause"],"f":[["var",12],[" ",17],["isCatchClause",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCatchClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClosureExpr"],"f":[["var",12],[" ",17],["isClosureExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isKeyPathExpr"],"f":[["var",12],[" ",17],["isKeyPathExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isKeyPathExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTernaryExpr"],"f":[["var",12],[" ",17],["isTernaryExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTernaryExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnknownDecl"],"f":[["var",12],[" ",17],["isUnknownDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknownDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnknownExpr"],"f":[["var",12],[" ",17],["isUnknownExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknownExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnknownStmt"],"f":[["var",12],[" ",17],["isUnknownStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknownStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnknownType"],"f":[["var",12],[" ",17],["isUnknownType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknownType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isWhereClause"],"f":[["var",12],[" ",17],["isWhereClause",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isWhereClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAccessorDecl"],"f":[["var",12],[" ",17],["asAccessorDecl",7],[": ",17],["AccessorDeclSyntax",18,53],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessorDecl",7],[": ",17],["AccessorDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asAccessorList"],"f":[["var",12],[" ",17],["asAccessorList",7],[": ",17],["AccessorListSyntax",18,55],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessorList",7],[": ",17],["AccessorListSyntax",18],["?",17]]},{"p":["SyntaxNode","asArrayElement"],"f":[["var",12],[" ",17],["asArrayElement",7],[": ",17],["ArrayElementSyntax",18,57],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asArrayElement",7],[": ",17],["ArrayElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asCaseItemList"],"f":[["var",12],[" ",17],["asCaseItemList",7],[": ",17],["CaseItemListSyntax",18,59],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCaseItemList",7],[": ",17],["CaseItemListSyntax",18],["?",17]]},{"p":["SyntaxNode","asClosureParam"],"f":[["var",12],[" ",17],["asClosureParam",7],[": ",17],["ClosureParamSyntax",18,61],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureParam",7],[": ",17],["ClosureParamSyntax",18],["?",17]]},{"p":["SyntaxNode","asContinueStmt"],"f":[["var",12],[" ",17],["asContinueStmt",7],[": ",17],["ContinueStmtSyntax",18,63],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asContinueStmt",7],[": ",17],["ContinueStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeclModifier"],"f":[["var",12],[" ",17],["asDeclModifier",7],[": ",17],["DeclModifierSyntax",18,65],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeclModifier",7],[": ",17],["DeclModifierSyntax",18],["?",17]]},{"p":["SyntaxNode","asEnumCaseDecl"],"f":[["var",12],[" ",17],["asEnumCaseDecl",7],[": ",17],["EnumCaseDeclSyntax",18,67],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asEnumCaseDecl",7],[": ",17],["EnumCaseDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionDecl"],"f":[["var",12],[" ",17],["asFunctionDecl",7],[": ",17],["FunctionDeclSyntax",18,69],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionDecl",7],[": ",17],["FunctionDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionType"],"f":[["var",12],[" ",17],["asFunctionType",7],[": ",17],["FunctionTypeSyntax",18,71],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionType",7],[": ",17],["FunctionTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asIfConfigDecl"],"f":[["var",12],[" ",17],["asIfConfigDecl",7],[": ",17],["IfConfigDeclSyntax",18,73],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIfConfigDecl",7],[": ",17],["IfConfigDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asMetatypeType"],"f":[["var",12],[" ",17],["asMetatypeType",7],[": ",17],["MetatypeTypeSyntax",18,75],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMetatypeType",7],[": ",17],["MetatypeTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asModifierList"],"f":[["var",12],[" ",17],["asModifierList",7],[": ",17],["ModifierListSyntax",18,77],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asModifierList",7],[": ",17],["ModifierListSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjCSelector"],"f":[["var",12],[" ",17],["asObjCSelector",7],[": ",17],["ObjCSelectorSyntax",18,79],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjCSelector",7],[": ",17],["ObjCSelectorSyntax",18],["?",17]]},{"p":["SyntaxNode","asOperatorDecl"],"f":[["var",12],[" ",17],["asOperatorDecl",7],[": ",17],["OperatorDeclSyntax",18,81],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asOperatorDecl",7],[": ",17],["OperatorDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asOptionalType"],"f":[["var",12],[" ",17],["asOptionalType",7],[": ",17],["OptionalTypeSyntax",18,83],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asOptionalType",7],[": ",17],["OptionalTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asProtocolDecl"],"f":[["var",12],[" ",17],["asProtocolDecl",7],[": ",17],["ProtocolDeclSyntax",18,85],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asProtocolDecl",7],[": ",17],["ProtocolDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asReturnClause"],"f":[["var",12],[" ",17],["asReturnClause",7],[": ",17],["ReturnClauseSyntax",18,87],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asReturnClause",7],[": ",17],["ReturnClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asSequenceExpr"],"f":[["var",12],[" ",17],["asSequenceExpr",7],[": ",17],["SequenceExprSyntax",18,89],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSequenceExpr",7],[": ",17],["SequenceExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asSuperRefExpr"],"f":[["var",12],[" ",17],["asSuperRefExpr",7],[": ",17],["SuperRefExprSyntax",18,91],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSuperRefExpr",7],[": ",17],["SuperRefExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asTuplePattern"],"f":[["var",12],[" ",17],["asTuplePattern",7],[": ",17],["TuplePatternSyntax",18,93],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTuplePattern",7],[": ",17],["TuplePatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asVariableDecl"],"f":[["var",12],[" ",17],["asVariableDecl",7],[": ",17],["VariableDeclSyntax",18,95],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asVariableDecl",7],[": ",17],["VariableDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asVersionTuple"],"f":[["var",12],[" ",17],["asVersionTuple",7],[": ",17],["VersionTupleSyntax",18,97],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asVersionTuple",7],[": ",17],["VersionTupleSyntax",18],["?",17]]},{"p":["SyntaxNode","isAccessorDecl"],"f":[["var",12],[" ",17],["isAccessorDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessorDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAccessorList"],"f":[["var",12],[" ",17],["isAccessorList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessorList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isArrayElement"],"f":[["var",12],[" ",17],["isArrayElement",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isArrayElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCaseItemList"],"f":[["var",12],[" ",17],["isCaseItemList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCaseItemList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClosureParam"],"f":[["var",12],[" ",17],["isClosureParam",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureParam",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isContinueStmt"],"f":[["var",12],[" ",17],["isContinueStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isContinueStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeclModifier"],"f":[["var",12],[" ",17],["isDeclModifier",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeclModifier",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isEnumCaseDecl"],"f":[["var",12],[" ",17],["isEnumCaseDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEnumCaseDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionDecl"],"f":[["var",12],[" ",17],["isFunctionDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionType"],"f":[["var",12],[" ",17],["isFunctionType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIfConfigDecl"],"f":[["var",12],[" ",17],["isIfConfigDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIfConfigDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMetatypeType"],"f":[["var",12],[" ",17],["isMetatypeType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMetatypeType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isModifierList"],"f":[["var",12],[" ",17],["isModifierList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isModifierList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjCSelector"],"f":[["var",12],[" ",17],["isObjCSelector",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjCSelector",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isOperatorDecl"],"f":[["var",12],[" ",17],["isOperatorDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isOperatorDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isOptionalType"],"f":[["var",12],[" ",17],["isOptionalType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isOptionalType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isProtocolDecl"],"f":[["var",12],[" ",17],["isProtocolDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isProtocolDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isReturnClause"],"f":[["var",12],[" ",17],["isReturnClause",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isReturnClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSequenceExpr"],"f":[["var",12],[" ",17],["isSequenceExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSequenceExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSuperRefExpr"],"f":[["var",12],[" ",17],["isSuperRefExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSuperRefExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTuplePattern"],"f":[["var",12],[" ",17],["isTuplePattern",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTuplePattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isVariableDecl"],"f":[["var",12],[" ",17],["isVariableDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isVariableDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isVersionTuple"],"f":[["var",12],[" ",17],["isVersionTuple",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isVersionTuple",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAccessorBlock"],"f":[["var",12],[" ",17],["asAccessorBlock",7],[": ",17],["AccessorBlockSyntax",18,99],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessorBlock",7],[": ",17],["AccessorBlockSyntax",18],["?",17]]},{"p":["SyntaxNode","asAsTypePattern"],"f":[["var",12],[" ",17],["asAsTypePattern",7],[": ",17],["AsTypePatternSyntax",18,101],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAsTypePattern",7],[": ",17],["AsTypePatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asAttributeList"],"f":[["var",12],[" ",17],["asAttributeList",7],[": ",17],["AttributeListSyntax",18,103],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAttributeList",7],[": ",17],["AttributeListSyntax",18],["?",17]]},{"p":["SyntaxNode","asCatchItemList"],"f":[["var",12],[" ",17],["asCatchItemList",7],[": ",17],["CatchItemListSyntax",18,105],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCatchItemList",7],[": ",17],["CatchItemListSyntax",18],["?",17]]},{"p":["SyntaxNode","asCodeBlockItem"],"f":[["var",12],[" ",17],["asCodeBlockItem",7],[": ",17],["CodeBlockItemSyntax",18,107],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCodeBlockItem",7],[": ",17],["CodeBlockItemSyntax",18],["?",17]]},{"p":["SyntaxNode","asExtensionDecl"],"f":[["var",12],[" ",17],["asExtensionDecl",7],[": ",17],["ExtensionDeclSyntax",18,109],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asExtensionDecl",7],[": ",17],["ExtensionDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asInheritedType"],"f":[["var",12],[" ",17],["asInheritedType",7],[": ",17],["InheritedTypeSyntax",18,111],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asInheritedType",7],[": ",17],["InheritedTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asIsTypePattern"],"f":[["var",12],[" ",17],["asIsTypePattern",7],[": ",17],["IsTypePatternSyntax",18,113],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIsTypePattern",7],[": ",17],["IsTypePatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjcNamePiece"],"f":[["var",12],[" ",17],["asObjcNamePiece",7],[": ",17],["ObjcNamePieceSyntax",18,115],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjcNamePiece",7],[": ",17],["ObjcNamePieceSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundFileExpr"],"f":[["var",12],[" ",17],["asPoundFileExpr",7],[": ",17],["PoundFileExprSyntax",18,117],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundFileExpr",7],[": ",17],["PoundFileExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundLineExpr"],"f":[["var",12],[" ",17],["asPoundLineExpr",7],[": ",17],["PoundLineExprSyntax",18,119],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundLineExpr",7],[": ",17],["PoundLineExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asStringSegment"],"f":[["var",12],[" ",17],["asStringSegment",7],[": ",17],["StringSegmentSyntax",18,121],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asStringSegment",7],[": ",17],["StringSegmentSyntax",18],["?",17]]},{"p":["SyntaxNode","asSubscriptDecl"],"f":[["var",12],[" ",17],["asSubscriptDecl",7],[": ",17],["SubscriptDeclSyntax",18,123],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSubscriptDecl",7],[": ",17],["SubscriptDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asSubscriptExpr"],"f":[["var",12],[" ",17],["asSubscriptExpr",7],[": ",17],["SubscriptExprSyntax",18,125],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSubscriptExpr",7],[": ",17],["SubscriptExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asTypealiasDecl"],"f":[["var",12],[" ",17],["asTypealiasDecl",7],[": ",17],["TypealiasDeclSyntax",18,127],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTypealiasDecl",7],[": ",17],["TypealiasDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","isAccessorBlock"],"f":[["var",12],[" ",17],["isAccessorBlock",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessorBlock",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAsTypePattern"],"f":[["var",12],[" ",17],["isAsTypePattern",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAsTypePattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAttributeList"],"f":[["var",12],[" ",17],["isAttributeList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAttributeList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCatchItemList"],"f":[["var",12],[" ",17],["isCatchItemList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCatchItemList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCodeBlockItem"],"f":[["var",12],[" ",17],["isCodeBlockItem",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCodeBlockItem",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isExtensionDecl"],"f":[["var",12],[" ",17],["isExtensionDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isExtensionDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isInheritedType"],"f":[["var",12],[" ",17],["isInheritedType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isInheritedType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIsTypePattern"],"f":[["var",12],[" ",17],["isIsTypePattern",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIsTypePattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjcNamePiece"],"f":[["var",12],[" ",17],["isObjcNamePiece",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjcNamePiece",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundFileExpr"],"f":[["var",12],[" ",17],["isPoundFileExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundFileExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundLineExpr"],"f":[["var",12],[" ",17],["isPoundLineExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundLineExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isStringSegment"],"f":[["var",12],[" ",17],["isStringSegment",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isStringSegment",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSubscriptDecl"],"f":[["var",12],[" ",17],["isSubscriptDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSubscriptDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSubscriptExpr"],"f":[["var",12],[" ",17],["isSubscriptExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSubscriptExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTypealiasDecl"],"f":[["var",12],[" ",17],["isTypealiasDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTypealiasDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAssignmentExpr"],"f":[["var",12],[" ",17],["asAssignmentExpr",7],[": ",17],["AssignmentExprSyntax",18,129],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAssignmentExpr",7],[": ",17],["AssignmentExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asAttributedType"],"f":[["var",12],[" ",17],["asAttributedType",7],[": ",17],["AttributedTypeSyntax",18,131],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAttributedType",7],[": ",17],["AttributedTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asDictionaryExpr"],"f":[["var",12],[" ",17],["asDictionaryExpr",7],[": ",17],["DictionaryExprSyntax",18,133],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDictionaryExpr",7],[": ",17],["DictionaryExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asDictionaryType"],"f":[["var",12],[" ",17],["asDictionaryType",7],[": ",17],["DictionaryTypeSyntax",18,135],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDictionaryType",7],[": ",17],["DictionaryTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asExpressionStmt"],"f":[["var",12],[" ",17],["asExpressionStmt",7],[": ",17],["ExpressionStmtSyntax",18,137],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asExpressionStmt",7],[": ",17],["ExpressionStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asIdentifierExpr"],"f":[["var",12],[" ",17],["asIdentifierExpr",7],[": ",17],["IdentifierExprSyntax",18,139],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIdentifierExpr",7],[": ",17],["IdentifierExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asIdentifierList"],"f":[["var",12],[" ",17],["asIdentifierList",7],[": ",17],["IdentifierListSyntax",18,141],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIdentifierList",7],[": ",17],["IdentifierListSyntax",18],["?",17]]},{"p":["SyntaxNode","asIfConfigClause"],"f":[["var",12],[" ",17],["asIfConfigClause",7],[": ",17],["IfConfigClauseSyntax",18,143],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIfConfigClause",7],[": ",17],["IfConfigClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asMemberDeclList"],"f":[["var",12],[" ",17],["asMemberDeclList",7],[": ",17],["MemberDeclListSyntax",18,145],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMemberDeclList",7],[": ",17],["MemberDeclListSyntax",18],["?",17]]},{"p":["SyntaxNode","asNilLiteralExpr"],"f":[["var",12],[" ",17],["asNilLiteralExpr",7],[": ",17],["NilLiteralExprSyntax",18,147],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asNilLiteralExpr",7],[": ",17],["NilLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPatternBinding"],"f":[["var",12],[" ",17],["asPatternBinding",7],[": ",17],["PatternBindingSyntax",18,149],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPatternBinding",7],[": ",17],["PatternBindingSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundErrorDecl"],"f":[["var",12],[" ",17],["asPoundErrorDecl",7],[": ",17],["PoundErrorDeclSyntax",18,151],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundErrorDecl",7],[": ",17],["PoundErrorDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asSpecializeExpr"],"f":[["var",12],[" ",17],["asSpecializeExpr",7],[": ",17],["SpecializeExprSyntax",18,153],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSpecializeExpr",7],[": ",17],["SpecializeExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asSwitchCaseList"],"f":[["var",12],[" ",17],["asSwitchCaseList",7],[": ",17],["SwitchCaseListSyntax",18,155],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSwitchCaseList",7],[": ",17],["SwitchCaseListSyntax",18],["?",17]]},{"p":["SyntaxNode","asTypeAnnotation"],"f":[["var",12],[" ",17],["asTypeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18,157],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTypeAnnotation",7],[": ",17],["TypeAnnotationSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnknownPattern"],"f":[["var",12],[" ",17],["asUnknownPattern",7],[": ",17],["UnknownPatternSyntax",18,159],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnknownPattern",7],[": ",17],["UnknownPatternSyntax",18],["?",17]]},{"p":["SyntaxNode","isAssignmentExpr"],"f":[["var",12],[" ",17],["isAssignmentExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAssignmentExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAttributedType"],"f":[["var",12],[" ",17],["isAttributedType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAttributedType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDictionaryExpr"],"f":[["var",12],[" ",17],["isDictionaryExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDictionaryExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDictionaryType"],"f":[["var",12],[" ",17],["isDictionaryType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDictionaryType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isExpressionStmt"],"f":[["var",12],[" ",17],["isExpressionStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isExpressionStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIdentifierExpr"],"f":[["var",12],[" ",17],["isIdentifierExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIdentifierExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIdentifierList"],"f":[["var",12],[" ",17],["isIdentifierList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIdentifierList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIfConfigClause"],"f":[["var",12],[" ",17],["isIfConfigClause",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIfConfigClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMemberDeclList"],"f":[["var",12],[" ",17],["isMemberDeclList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMemberDeclList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isNilLiteralExpr"],"f":[["var",12],[" ",17],["isNilLiteralExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isNilLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPatternBinding"],"f":[["var",12],[" ",17],["isPatternBinding",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPatternBinding",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundErrorDecl"],"f":[["var",12],[" ",17],["isPoundErrorDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundErrorDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSpecializeExpr"],"f":[["var",12],[" ",17],["isSpecializeExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSpecializeExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSwitchCaseList"],"f":[["var",12],[" ",17],["isSwitchCaseList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSwitchCaseList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTypeAnnotation"],"f":[["var",12],[" ",17],["isTypeAnnotation",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTypeAnnotation",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnknownPattern"],"f":[["var",12],[" ",17],["isUnknownPattern",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknownPattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asCatchClauseList"],"f":[["var",12],[" ",17],["asCatchClauseList",7],[": ",17],["CatchClauseListSyntax",18,160],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCatchClauseList",7],[": ",17],["CatchClauseListSyntax",18],["?",17]]},{"p":["SyntaxNode","asCompositionType"],"f":[["var",12],[" ",17],["asCompositionType",7],[": ",17],["CompositionTypeSyntax",18,162],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCompositionType",7],[": ",17],["CompositionTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asCustomAttribute"],"f":[["var",12],[" ",17],["asCustomAttribute",7],[": ",17],["CustomAttributeSyntax",18,164],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCustomAttribute",7],[": ",17],["CustomAttributeSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeclarationStmt"],"f":[["var",12],[" ",17],["asDeclarationStmt",7],[": ",17],["DeclarationStmtSyntax",18,166],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeclarationStmt",7],[": ",17],["DeclarationStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asEnumCaseElement"],"f":[["var",12],[" ",17],["asEnumCaseElement",7],[": ",17],["EnumCaseElementSyntax",18,168],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asEnumCaseElement",7],[": ",17],["EnumCaseElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asEnumCasePattern"],"f":[["var",12],[" ",17],["asEnumCasePattern",7],[": ",17],["EnumCasePatternSyntax",18,170],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asEnumCasePattern",7],[": ",17],["EnumCasePatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asFallthroughStmt"],"f":[["var",12],[" ",17],["asFallthroughStmt",7],[": ",17],["FallthroughStmtSyntax",18,172],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFallthroughStmt",7],[": ",17],["FallthroughStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asForcedValueExpr"],"f":[["var",12],[" ",17],["asForcedValueExpr",7],[": ",17],["ForcedValueExprSyntax",18,174],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asForcedValueExpr",7],[": ",17],["ForcedValueExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericArgument"],"f":[["var",12],[" ",17],["asGenericArgument",7],[": ",17],["GenericArgumentSyntax",18,176],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericArgument",7],[": ",17],["GenericArgumentSyntax",18],["?",17]]},{"p":["SyntaxNode","asInitializerDecl"],"f":[["var",12],[" ",17],["asInitializerDecl",7],[": ",17],["InitializerDeclSyntax",18,178],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asInitializerDecl",7],[": ",17],["InitializerDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asKeyPathBaseExpr"],"f":[["var",12],[" ",17],["asKeyPathBaseExpr",7],[": ",17],["KeyPathBaseExprSyntax",18,180],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asKeyPathBaseExpr",7],[": ",17],["KeyPathBaseExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asMemberDeclBlock"],"f":[["var",12],[" ",17],["asMemberDeclBlock",7],[": ",17],["MemberDeclBlockSyntax",18,182],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMemberDeclBlock",7],[": ",17],["MemberDeclBlockSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjcKeyPathExpr"],"f":[["var",12],[" ",17],["asObjcKeyPathExpr",7],[": ",17],["ObjcKeyPathExprSyntax",18,184],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjcKeyPathExpr",7],[": ",17],["ObjcKeyPathExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asOptionalPattern"],"f":[["var",12],[" ",17],["asOptionalPattern",7],[": ",17],["OptionalPatternSyntax",18,186],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asOptionalPattern",7],[": ",17],["OptionalPatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asParameterClause"],"f":[["var",12],[" ",17],["asParameterClause",7],[": ",17],["ParameterClauseSyntax",18,188],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asParameterClause",7],[": ",17],["ParameterClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundAssertStmt"],"f":[["var",12],[" ",17],["asPoundAssertStmt",7],[": ",17],["PoundAssertStmtSyntax",18,190],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundAssertStmt",7],[": ",17],["PoundAssertStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundColumnExpr"],"f":[["var",12],[" ",17],["asPoundColumnExpr",7],[": ",17],["PoundColumnExprSyntax",18,192],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundColumnExpr",7],[": ",17],["PoundColumnExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundFileIDExpr"],"f":[["var",12],[" ",17],["asPoundFileIDExpr",7],[": ",17],["PoundFileIDExprSyntax",18,194],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundFileIDExpr",7],[": ",17],["PoundFileIDExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asRepeatWhileStmt"],"f":[["var",12],[" ",17],["asRepeatWhileStmt",7],[": ",17],["RepeatWhileStmtSyntax",18,196],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asRepeatWhileStmt",7],[": ",17],["RepeatWhileStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asSwitchCaseLabel"],"f":[["var",12],[" ",17],["asSwitchCaseLabel",7],[": ",17],["SwitchCaseLabelSyntax",18,198],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSwitchCaseLabel",7],[": ",17],["SwitchCaseLabelSyntax",18],["?",17]]},{"p":["SyntaxNode","asWildcardPattern"],"f":[["var",12],[" ",17],["asWildcardPattern",7],[": ",17],["WildcardPatternSyntax",18,200],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asWildcardPattern",7],[": ",17],["WildcardPatternSyntax",18],["?",17]]},{"p":["SyntaxNode","isCatchClauseList"],"f":[["var",12],[" ",17],["isCatchClauseList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCatchClauseList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCompositionType"],"f":[["var",12],[" ",17],["isCompositionType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCompositionType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCustomAttribute"],"f":[["var",12],[" ",17],["isCustomAttribute",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCustomAttribute",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeclarationStmt"],"f":[["var",12],[" ",17],["isDeclarationStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeclarationStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isEnumCaseElement"],"f":[["var",12],[" ",17],["isEnumCaseElement",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEnumCaseElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isEnumCasePattern"],"f":[["var",12],[" ",17],["isEnumCasePattern",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEnumCasePattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFallthroughStmt"],"f":[["var",12],[" ",17],["isFallthroughStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFallthroughStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isForcedValueExpr"],"f":[["var",12],[" ",17],["isForcedValueExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isForcedValueExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericArgument"],"f":[["var",12],[" ",17],["isGenericArgument",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericArgument",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isInitializerDecl"],"f":[["var",12],[" ",17],["isInitializerDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isInitializerDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isKeyPathBaseExpr"],"f":[["var",12],[" ",17],["isKeyPathBaseExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isKeyPathBaseExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMemberDeclBlock"],"f":[["var",12],[" ",17],["isMemberDeclBlock",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMemberDeclBlock",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjcKeyPathExpr"],"f":[["var",12],[" ",17],["isObjcKeyPathExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjcKeyPathExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isOptionalPattern"],"f":[["var",12],[" ",17],["isOptionalPattern",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isOptionalPattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isParameterClause"],"f":[["var",12],[" ",17],["isParameterClause",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isParameterClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundAssertStmt"],"f":[["var",12],[" ",17],["isPoundAssertStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundAssertStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundColumnExpr"],"f":[["var",12],[" ",17],["isPoundColumnExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundColumnExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundFileIDExpr"],"f":[["var",12],[" ",17],["isPoundFileIDExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundFileIDExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isRepeatWhileStmt"],"f":[["var",12],[" ",17],["isRepeatWhileStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isRepeatWhileStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSwitchCaseLabel"],"f":[["var",12],[" ",17],["isSwitchCaseLabel",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSwitchCaseLabel",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isWildcardPattern"],"f":[["var",12],[" ",17],["isWildcardPattern",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isWildcardPattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asArrayElementList"],"f":[["var",12],[" ",17],["asArrayElementList",7],[": ",17],["ArrayElementListSyntax",18,202],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asArrayElementList",7],[": ",17],["ArrayElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asClosureParamList"],"f":[["var",12],[" ",17],["asClosureParamList",7],[": ",17],["ClosureParamListSyntax",18,204],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureParamList",7],[": ",17],["ClosureParamListSyntax",18],["?",17]]},{"p":["SyntaxNode","asClosureSignature"],"f":[["var",12],[" ",17],["asClosureSignature",7],[": ",17],["ClosureSignatureSyntax",18,206],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureSignature",7],[": ",17],["ClosureSignatureSyntax",18],["?",17]]},{"p":["SyntaxNode","asConditionElement"],"f":[["var",12],[" ",17],["asConditionElement",7],[": ",17],["ConditionElementSyntax",18,208],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asConditionElement",7],[": ",17],["ConditionElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeclNameArgument"],"f":[["var",12],[" ",17],["asDeclNameArgument",7],[": ",17],["DeclNameArgumentSyntax",18,210],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeclNameArgument",7],[": ",17],["DeclNameArgumentSyntax",18],["?",17]]},{"p":["SyntaxNode","asFloatLiteralExpr"],"f":[["var",12],[" ",17],["asFloatLiteralExpr",7],[": ",17],["FloatLiteralExprSyntax",18,212],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFloatLiteralExpr",7],[": ",17],["FloatLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionCallExpr"],"f":[["var",12],[" ",17],["asFunctionCallExpr",7],[": ",17],["FunctionCallExprSyntax",18,214],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionCallExpr",7],[": ",17],["FunctionCallExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionDeclName"],"f":[["var",12],[" ",17],["asFunctionDeclName",7],[": ",17],["FunctionDeclNameSyntax",18,216],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionDeclName",7],[": ",17],["FunctionDeclNameSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericParameter"],"f":[["var",12],[" ",17],["asGenericParameter",7],[": ",17],["GenericParameterSyntax",18,218],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericParameter",7],[": ",17],["GenericParameterSyntax",18],["?",17]]},{"p":["SyntaxNode","asMemberAccessExpr"],"f":[["var",12],[" ",17],["asMemberAccessExpr",7],[": ",17],["MemberAccessExprSyntax",18,220],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMemberAccessExpr",7],[": ",17],["MemberAccessExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjcSelectorExpr"],"f":[["var",12],[" ",17],["asObjcSelectorExpr",7],[": ",17],["ObjcSelectorExprSyntax",18,222],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjcSelectorExpr",7],[": ",17],["ObjcSelectorExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPostfixUnaryExpr"],"f":[["var",12],[" ",17],["asPostfixUnaryExpr",7],[": ",17],["PostfixUnaryExprSyntax",18,224],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPostfixUnaryExpr",7],[": ",17],["PostfixUnaryExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundWarningDecl"],"f":[["var",12],[" ",17],["asPoundWarningDecl",7],[": ",17],["PoundWarningDeclSyntax",18,226],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundWarningDecl",7],[": ",17],["PoundWarningDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asRegexLiteralExpr"],"f":[["var",12],[" ",17],["asRegexLiteralExpr",7],[": ",17],["RegexLiteralExprSyntax",18,228],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asRegexLiteralExpr",7],[": ",17],["RegexLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asTupleExprElement"],"f":[["var",12],[" ",17],["asTupleExprElement",7],[": ",17],["TupleExprElementSyntax",18,230],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTupleExprElement",7],[": ",17],["TupleExprElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asTupleTypeElement"],"f":[["var",12],[" ",17],["asTupleTypeElement",7],[": ",17],["TupleTypeElementSyntax",18,232],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTupleTypeElement",7],[": ",17],["TupleTypeElementSyntax",18],["?",17]]},{"p":["SyntaxNode","isArrayElementList"],"f":[["var",12],[" ",17],["isArrayElementList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isArrayElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClosureParamList"],"f":[["var",12],[" ",17],["isClosureParamList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureParamList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClosureSignature"],"f":[["var",12],[" ",17],["isClosureSignature",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureSignature",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isConditionElement"],"f":[["var",12],[" ",17],["isConditionElement",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isConditionElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeclNameArgument"],"f":[["var",12],[" ",17],["isDeclNameArgument",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeclNameArgument",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFloatLiteralExpr"],"f":[["var",12],[" ",17],["isFloatLiteralExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFloatLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionCallExpr"],"f":[["var",12],[" ",17],["isFunctionCallExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionCallExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionDeclName"],"f":[["var",12],[" ",17],["isFunctionDeclName",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionDeclName",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericParameter"],"f":[["var",12],[" ",17],["isGenericParameter",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericParameter",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMemberAccessExpr"],"f":[["var",12],[" ",17],["isMemberAccessExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMemberAccessExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjcSelectorExpr"],"f":[["var",12],[" ",17],["isObjcSelectorExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjcSelectorExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPostfixUnaryExpr"],"f":[["var",12],[" ",17],["isPostfixUnaryExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPostfixUnaryExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundWarningDecl"],"f":[["var",12],[" ",17],["isPoundWarningDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundWarningDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isRegexLiteralExpr"],"f":[["var",12],[" ",17],["isRegexLiteralExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isRegexLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTupleExprElement"],"f":[["var",12],[" ",17],["isTupleExprElement",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTupleExprElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTupleTypeElement"],"f":[["var",12],[" ",17],["isTupleTypeElement",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTupleTypeElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAccessorParameter"],"f":[["var",12],[" ",17],["asAccessorParameter",7],[": ",17],["AccessorParameterSyntax",18,234],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessorParameter",7],[": ",17],["AccessorParameterSyntax",18],["?",17]]},{"p":["SyntaxNode","asAvailabilityEntry"],"f":[["var",12],[" ",17],["asAvailabilityEntry",7],[": ",17],["AvailabilityEntrySyntax",18,236],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAvailabilityEntry",7],[": ",17],["AvailabilityEntrySyntax",18],["?",17]]},{"p":["SyntaxNode","asCodeBlockItemList"],"f":[["var",12],[" ",17],["asCodeBlockItemList",7],[": ",17],["CodeBlockItemListSyntax",18,238],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCodeBlockItemList",7],[": ",17],["CodeBlockItemListSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeclNameArguments"],"f":[["var",12],[" ",17],["asDeclNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18,240],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeclNameArguments",7],[": ",17],["DeclNameArgumentsSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeinitializerDecl"],"f":[["var",12],[" ",17],["asDeinitializerDecl",7],[": ",17],["DeinitializerDeclSyntax",18,242],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeinitializerDecl",7],[": ",17],["DeinitializerDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asDictionaryElement"],"f":[["var",12],[" ",17],["asDictionaryElement",7],[": ",17],["DictionaryElementSyntax",18,244],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDictionaryElement",7],[": ",17],["DictionaryElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asExpressionPattern"],"f":[["var",12],[" ",17],["asExpressionPattern",7],[": ",17],["ExpressionPatternSyntax",18,246],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asExpressionPattern",7],[": ",17],["ExpressionPatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asExpressionSegment"],"f":[["var",12],[" ",17],["asExpressionSegment",7],[": ",17],["ExpressionSegmentSyntax",18,248],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asExpressionSegment",7],[": ",17],["ExpressionSegmentSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionParameter"],"f":[["var",12],[" ",17],["asFunctionParameter",7],[": ",17],["FunctionParameterSyntax",18,250],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionParameter",7],[": ",17],["FunctionParameterSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionSignature"],"f":[["var",12],[" ",17],["asFunctionSignature",7],[": ",17],["FunctionSignatureSyntax",18,252],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionSignature",7],[": ",17],["FunctionSignatureSyntax",18],["?",17]]},{"p":["SyntaxNode","asIdentifierPattern"],"f":[["var",12],[" ",17],["asIdentifierPattern",7],[": ",17],["IdentifierPatternSyntax",18,254],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIdentifierPattern",7],[": ",17],["IdentifierPatternSyntax",18],["?",17]]},{"p":["SyntaxNode","asInheritedTypeList"],"f":[["var",12],[" ",17],["asInheritedTypeList",7],[": ",17],["InheritedTypeListSyntax",18,256],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asInheritedTypeList",7],[": ",17],["InheritedTypeListSyntax",18],["?",17]]},{"p":["SyntaxNode","asInitializerClause"],"f":[["var",12],[" ",17],["asInitializerClause",7],[": ",17],["InitializerClauseSyntax",18,258],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asInitializerClause",7],[": ",17],["InitializerClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asNonEmptyTokenList"],"f":[["var",12],[" ",17],["asNonEmptyTokenList",7],[": ",17],["NonEmptyTokenListSyntax",18,260],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asNonEmptyTokenList",7],[": ",17],["NonEmptyTokenListSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjCSelectorPiece"],"f":[["var",12],[" ",17],["asObjCSelectorPiece",7],[": ",17],["ObjCSelectorPieceSyntax",18,262],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjCSelectorPiece",7],[": ",17],["ObjCSelectorPieceSyntax",18],["?",17]]},{"p":["SyntaxNode","asObjectLiteralExpr"],"f":[["var",12],[" ",17],["asObjectLiteralExpr",7],[": ",17],["ObjectLiteralExprSyntax",18,264],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asObjectLiteralExpr",7],[": ",17],["ObjectLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundFilePathExpr"],"f":[["var",12],[" ",17],["asPoundFilePathExpr",7],[": ",17],["PoundFilePathExprSyntax",18,266],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundFilePathExpr",7],[": ",17],["PoundFilePathExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundFunctionExpr"],"f":[["var",12],[" ",17],["asPoundFunctionExpr",7],[": ",17],["PoundFunctionExprSyntax",18,268],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundFunctionExpr",7],[": ",17],["PoundFunctionExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asQualifiedDeclName"],"f":[["var",12],[" ",17],["asQualifiedDeclName",7],[": ",17],["QualifiedDeclNameSyntax",18,270],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asQualifiedDeclName",7],[": ",17],["QualifiedDeclNameSyntax",18],["?",17]]},{"p":["SyntaxNode","asStringLiteralExpr"],"f":[["var",12],[" ",17],["asStringLiteralExpr",7],[": ",17],["StringLiteralExprSyntax",18,272],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asStringLiteralExpr",7],[": ",17],["StringLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","isAccessorParameter"],"f":[["var",12],[" ",17],["isAccessorParameter",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessorParameter",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAvailabilityEntry"],"f":[["var",12],[" ",17],["isAvailabilityEntry",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAvailabilityEntry",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCodeBlockItemList"],"f":[["var",12],[" ",17],["isCodeBlockItemList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCodeBlockItemList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeclNameArguments"],"f":[["var",12],[" ",17],["isDeclNameArguments",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeclNameArguments",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeinitializerDecl"],"f":[["var",12],[" ",17],["isDeinitializerDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeinitializerDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDictionaryElement"],"f":[["var",12],[" ",17],["isDictionaryElement",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDictionaryElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isExpressionPattern"],"f":[["var",12],[" ",17],["isExpressionPattern",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isExpressionPattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isExpressionSegment"],"f":[["var",12],[" ",17],["isExpressionSegment",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isExpressionSegment",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionParameter"],"f":[["var",12],[" ",17],["isFunctionParameter",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionParameter",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionSignature"],"f":[["var",12],[" ",17],["isFunctionSignature",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionSignature",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIdentifierPattern"],"f":[["var",12],[" ",17],["isIdentifierPattern",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIdentifierPattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isInheritedTypeList"],"f":[["var",12],[" ",17],["isInheritedTypeList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isInheritedTypeList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isInitializerClause"],"f":[["var",12],[" ",17],["isInitializerClause",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isInitializerClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isNonEmptyTokenList"],"f":[["var",12],[" ",17],["isNonEmptyTokenList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isNonEmptyTokenList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjCSelectorPiece"],"f":[["var",12],[" ",17],["isObjCSelectorPiece",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjCSelectorPiece",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isObjectLiteralExpr"],"f":[["var",12],[" ",17],["isObjectLiteralExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isObjectLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundFilePathExpr"],"f":[["var",12],[" ",17],["isPoundFilePathExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundFilePathExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundFunctionExpr"],"f":[["var",12],[" ",17],["isPoundFunctionExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundFunctionExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isQualifiedDeclName"],"f":[["var",12],[" ",17],["isQualifiedDeclName",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isQualifiedDeclName",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isStringLiteralExpr"],"f":[["var",12],[" ",17],["isStringLiteralExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isStringLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAssociatedtypeDecl"],"f":[["var",12],[" ",17],["asAssociatedtypeDecl",7],[": ",17],["AssociatedtypeDeclSyntax",18,274],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAssociatedtypeDecl",7],[": ",17],["AssociatedtypeDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asBinaryOperatorExpr"],"f":[["var",12],[" ",17],["asBinaryOperatorExpr",7],[": ",17],["BinaryOperatorExprSyntax",18,276],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asBinaryOperatorExpr",7],[": ",17],["BinaryOperatorExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asBooleanLiteralExpr"],"f":[["var",12],[" ",17],["asBooleanLiteralExpr",7],[": ",17],["BooleanLiteralExprSyntax",18,278],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asBooleanLiteralExpr",7],[": ",17],["BooleanLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asClosureCaptureItem"],"f":[["var",12],[" ",17],["asClosureCaptureItem",7],[": ",17],["ClosureCaptureItemSyntax",18,280],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureCaptureItem",7],[": ",17],["ClosureCaptureItemSyntax",18],["?",17]]},{"p":["SyntaxNode","asElseIfContinuation"],"f":[["var",12],[" ",17],["asElseIfContinuation",7],[": ",17],["ElseIfContinuationSyntax",18,282],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asElseIfContinuation",7],[": ",17],["ElseIfContinuationSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericRequirement"],"f":[["var",12],[" ",17],["asGenericRequirement",7],[": ",17],["GenericRequirementSyntax",18,284],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericRequirement",7],[": ",17],["GenericRequirementSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericWhereClause"],"f":[["var",12],[" ",17],["asGenericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18,286],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericWhereClause",7],[": ",17],["GenericWhereClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asIfConfigClauseList"],"f":[["var",12],[" ",17],["asIfConfigClauseList",7],[": ",17],["IfConfigClauseListSyntax",18,288],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIfConfigClauseList",7],[": ",17],["IfConfigClauseListSyntax",18],["?",17]]},{"p":["SyntaxNode","asIntegerLiteralExpr"],"f":[["var",12],[" ",17],["asIntegerLiteralExpr",7],[": ",17],["IntegerLiteralExprSyntax",18,290],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIntegerLiteralExpr",7],[": ",17],["IntegerLiteralExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asMemberDeclListItem"],"f":[["var",12],[" ",17],["asMemberDeclListItem",7],[": ",17],["MemberDeclListItemSyntax",18,292],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMemberDeclListItem",7],[": ",17],["MemberDeclListItemSyntax",18],["?",17]]},{"p":["SyntaxNode","asPatternBindingList"],"f":[["var",12],[" ",17],["asPatternBindingList",7],[": ",17],["PatternBindingListSyntax",18,294],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPatternBindingList",7],[": ",17],["PatternBindingListSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundDsohandleExpr"],"f":[["var",12],[" ",17],["asPoundDsohandleExpr",7],[": ",17],["PoundDsohandleExprSyntax",18,296],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundDsohandleExpr",7],[": ",17],["PoundDsohandleExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrefixOperatorExpr"],"f":[["var",12],[" ",17],["asPrefixOperatorExpr",7],[": ",17],["PrefixOperatorExprSyntax",18,298],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrefixOperatorExpr",7],[": ",17],["PrefixOperatorExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asSwitchDefaultLabel"],"f":[["var",12],[" ",17],["asSwitchDefaultLabel",7],[": ",17],["SwitchDefaultLabelSyntax",18,300],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSwitchDefaultLabel",7],[": ",17],["SwitchDefaultLabelSyntax",18],["?",17]]},{"p":["SyntaxNode","isAssociatedtypeDecl"],"f":[["var",12],[" ",17],["isAssociatedtypeDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAssociatedtypeDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isBinaryOperatorExpr"],"f":[["var",12],[" ",17],["isBinaryOperatorExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isBinaryOperatorExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isBooleanLiteralExpr"],"f":[["var",12],[" ",17],["isBooleanLiteralExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isBooleanLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClosureCaptureItem"],"f":[["var",12],[" ",17],["isClosureCaptureItem",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureCaptureItem",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isElseIfContinuation"],"f":[["var",12],[" ",17],["isElseIfContinuation",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isElseIfContinuation",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericRequirement"],"f":[["var",12],[" ",17],["isGenericRequirement",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericRequirement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericWhereClause"],"f":[["var",12],[" ",17],["isGenericWhereClause",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericWhereClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIfConfigClauseList"],"f":[["var",12],[" ",17],["isIfConfigClauseList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIfConfigClauseList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIntegerLiteralExpr"],"f":[["var",12],[" ",17],["isIntegerLiteralExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIntegerLiteralExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMemberDeclListItem"],"f":[["var",12],[" ",17],["isMemberDeclListItem",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMemberDeclListItem",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPatternBindingList"],"f":[["var",12],[" ",17],["isPatternBindingList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPatternBindingList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundDsohandleExpr"],"f":[["var",12],[" ",17],["isPoundDsohandleExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundDsohandleExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrefixOperatorExpr"],"f":[["var",12],[" ",17],["isPrefixOperatorExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrefixOperatorExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSwitchDefaultLabel"],"f":[["var",12],[" ",17],["isSwitchDefaultLabel",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSwitchDefaultLabel",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAccessLevelModifier"],"f":[["var",12],[" ",17],["asAccessLevelModifier",7],[": ",17],["AccessLevelModifierSyntax",18,302],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessLevelModifier",7],[": ",17],["AccessLevelModifierSyntax",18],["?",17]]},{"p":["SyntaxNode","asAccessPathComponent"],"f":[["var",12],[" ",17],["asAccessPathComponent",7],[": ",17],["AccessPathComponentSyntax",18,304],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAccessPathComponent",7],[": ",17],["AccessPathComponentSyntax",18],["?",17]]},{"p":["SyntaxNode","asEnumCaseElementList"],"f":[["var",12],[" ",17],["asEnumCaseElementList",7],[": ",17],["EnumCaseElementListSyntax",18,306],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asEnumCaseElementList",7],[": ",17],["EnumCaseElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericArgumentList"],"f":[["var",12],[" ",17],["asGenericArgumentList",7],[": ",17],["GenericArgumentListSyntax",18,308],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericArgumentList",7],[": ",17],["GenericArgumentListSyntax",18],["?",17]]},{"p":["SyntaxNode","asPostfixIfConfigExpr"],"f":[["var",12],[" ",17],["asPostfixIfConfigExpr",7],[": ",17],["PostfixIfConfigExprSyntax",18,310],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPostfixIfConfigExpr",7],[": ",17],["PostfixIfConfigExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundSourceLocation"],"f":[["var",12],[" ",17],["asPoundSourceLocation",7],[": ",17],["PoundSourceLocationSyntax",18,312],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundSourceLocation",7],[": ",17],["PoundSourceLocationSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrecedenceGroupDecl"],"f":[["var",12],[" ",17],["asPrecedenceGroupDecl",7],[": ",17],["PrecedenceGroupDeclSyntax",18,314],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupDecl",7],[": ",17],["PrecedenceGroupDeclSyntax",18],["?",17]]},{"p":["SyntaxNode","asSameTypeRequirement"],"f":[["var",12],[" ",17],["asSameTypeRequirement",7],[": ",17],["SameTypeRequirementSyntax",18,316],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSameTypeRequirement",7],[": ",17],["SameTypeRequirementSyntax",18],["?",17]]},{"p":["SyntaxNode","asTargetFunctionEntry"],"f":[["var",12],[" ",17],["asTargetFunctionEntry",7],[": ",17],["TargetFunctionEntrySyntax",18,318],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTargetFunctionEntry",7],[": ",17],["TargetFunctionEntrySyntax",18],["?",17]]},{"p":["SyntaxNode","asTuplePatternElement"],"f":[["var",12],[" ",17],["asTuplePatternElement",7],[": ",17],["TuplePatternElementSyntax",18,320],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTuplePatternElement",7],[": ",17],["TuplePatternElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asValueBindingPattern"],"f":[["var",12],[" ",17],["asValueBindingPattern",7],[": ",17],["ValueBindingPatternSyntax",18,322],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asValueBindingPattern",7],[": ",17],["ValueBindingPatternSyntax",18],["?",17]]},{"p":["SyntaxNode","isAccessLevelModifier"],"f":[["var",12],[" ",17],["isAccessLevelModifier",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessLevelModifier",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAccessPathComponent"],"f":[["var",12],[" ",17],["isAccessPathComponent",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAccessPathComponent",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isEnumCaseElementList"],"f":[["var",12],[" ",17],["isEnumCaseElementList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEnumCaseElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericArgumentList"],"f":[["var",12],[" ",17],["isGenericArgumentList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericArgumentList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPostfixIfConfigExpr"],"f":[["var",12],[" ",17],["isPostfixIfConfigExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPostfixIfConfigExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundSourceLocation"],"f":[["var",12],[" ",17],["isPoundSourceLocation",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundSourceLocation",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrecedenceGroupDecl"],"f":[["var",12],[" ",17],["isPrecedenceGroupDecl",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupDecl",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSameTypeRequirement"],"f":[["var",12],[" ",17],["isSameTypeRequirement",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSameTypeRequirement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTargetFunctionEntry"],"f":[["var",12],[" ",17],["isTargetFunctionEntry",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTargetFunctionEntry",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTuplePatternElement"],"f":[["var",12],[" ",17],["isTuplePatternElement",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTuplePatternElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isValueBindingPattern"],"f":[["var",12],[" ",17],["isValueBindingPattern",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isValueBindingPattern",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAvailabilityArgument"],"f":[["var",12],[" ",17],["asAvailabilityArgument",7],[": ",17],["AvailabilityArgumentSyntax",18,324],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAvailabilityArgument",7],[": ",17],["AvailabilityArgumentSyntax",18],["?",17]]},{"p":["SyntaxNode","asAvailabilitySpecList"],"f":[["var",12],[" ",17],["asAvailabilitySpecList",7],[": ",17],["AvailabilitySpecListSyntax",18,326],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAvailabilitySpecList",7],[": ",17],["AvailabilitySpecListSyntax",18],["?",17]]},{"p":["SyntaxNode","asClassRestrictionType"],"f":[["var",12],[" ",17],["asClassRestrictionType",7],[": ",17],["ClassRestrictionTypeSyntax",18,328],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClassRestrictionType",7],[": ",17],["ClassRestrictionTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asConditionElementList"],"f":[["var",12],[" ",17],["asConditionElementList",7],[": ",17],["ConditionElementListSyntax",18,330],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asConditionElementList",7],[": ",17],["ConditionElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asDeclNameArgumentList"],"f":[["var",12],[" ",17],["asDeclNameArgumentList",7],[": ",17],["DeclNameArgumentListSyntax",18,332],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDeclNameArgumentList",7],[": ",17],["DeclNameArgumentListSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericParameterList"],"f":[["var",12],[" ",17],["asGenericParameterList",7],[": ",17],["GenericParameterListSyntax",18,334],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericParameterList",7],[": ",17],["GenericParameterListSyntax",18],["?",17]]},{"p":["SyntaxNode","asMemberTypeIdentifier"],"f":[["var",12],[" ",17],["asMemberTypeIdentifier",7],[": ",17],["MemberTypeIdentifierSyntax",18,336],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMemberTypeIdentifier",7],[": ",17],["MemberTypeIdentifierSyntax",18],["?",17]]},{"p":["SyntaxNode","asOptionalChainingExpr"],"f":[["var",12],[" ",17],["asOptionalChainingExpr",7],[": ",17],["OptionalChainingExprSyntax",18,338],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asOptionalChainingExpr",7],[": ",17],["OptionalChainingExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asSimpleTypeIdentifier"],"f":[["var",12],[" ",17],["asSimpleTypeIdentifier",7],[": ",17],["SimpleTypeIdentifierSyntax",18,340],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSimpleTypeIdentifier",7],[": ",17],["SimpleTypeIdentifierSyntax",18],["?",17]]},{"p":["SyntaxNode","asTupleExprElementList"],"f":[["var",12],[" ",17],["asTupleExprElementList",7],[": ",17],["TupleExprElementListSyntax",18,342],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTupleExprElementList",7],[": ",17],["TupleExprElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asTupleTypeElementList"],"f":[["var",12],[" ",17],["asTupleTypeElementList",7],[": ",17],["TupleTypeElementListSyntax",18,344],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTupleTypeElementList",7],[": ",17],["TupleTypeElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","isAvailabilityArgument"],"f":[["var",12],[" ",17],["isAvailabilityArgument",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAvailabilityArgument",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isAvailabilitySpecList"],"f":[["var",12],[" ",17],["isAvailabilitySpecList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAvailabilitySpecList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isClassRestrictionType"],"f":[["var",12],[" ",17],["isClassRestrictionType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClassRestrictionType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isConditionElementList"],"f":[["var",12],[" ",17],["isConditionElementList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isConditionElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDeclNameArgumentList"],"f":[["var",12],[" ",17],["isDeclNameArgumentList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDeclNameArgumentList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericParameterList"],"f":[["var",12],[" ",17],["isGenericParameterList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericParameterList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMemberTypeIdentifier"],"f":[["var",12],[" ",17],["isMemberTypeIdentifier",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMemberTypeIdentifier",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isOptionalChainingExpr"],"f":[["var",12],[" ",17],["isOptionalChainingExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isOptionalChainingExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSimpleTypeIdentifier"],"f":[["var",12],[" ",17],["isSimpleTypeIdentifier",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSimpleTypeIdentifier",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTupleExprElementList"],"f":[["var",12],[" ",17],["isTupleExprElementList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTupleExprElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTupleTypeElementList"],"f":[["var",12],[" ",17],["isTupleTypeElementList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTupleTypeElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAvailabilityCondition"],"f":[["var",12],[" ",17],["asAvailabilityCondition",7],[": ",17],["AvailabilityConditionSyntax",18,346],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAvailabilityCondition",7],[": ",17],["AvailabilityConditionSyntax",18],["?",17]]},{"p":["SyntaxNode","asDictionaryElementList"],"f":[["var",12],[" ",17],["asDictionaryElementList",7],[": ",17],["DictionaryElementListSyntax",18,348],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDictionaryElementList",7],[": ",17],["DictionaryElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asDiscardAssignmentExpr"],"f":[["var",12],[" ",17],["asDiscardAssignmentExpr",7],[": ",17],["DiscardAssignmentExprSyntax",18,350],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDiscardAssignmentExpr",7],[": ",17],["DiscardAssignmentExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asEditorPlaceholderExpr"],"f":[["var",12],[" ",17],["asEditorPlaceholderExpr",7],[": ",17],["EditorPlaceholderExprSyntax",18,352],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asEditorPlaceholderExpr",7],[": ",17],["EditorPlaceholderExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asFunctionParameterList"],"f":[["var",12],[" ",17],["asFunctionParameterList",7],[": ",17],["FunctionParameterListSyntax",18,354],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asFunctionParameterList",7],[": ",17],["FunctionParameterListSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericArgumentClause"],"f":[["var",12],[" ",17],["asGenericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18,356],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericArgumentClause",7],[": ",17],["GenericArgumentClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrimaryAssociatedType"],"f":[["var",12],[" ",17],["asPrimaryAssociatedType",7],[": ",17],["PrimaryAssociatedTypeSyntax",18,358],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrimaryAssociatedType",7],[": ",17],["PrimaryAssociatedTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","asStringLiteralSegments"],"f":[["var",12],[" ",17],["asStringLiteralSegments",7],[": ",17],["StringLiteralSegmentsSyntax",18,360],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asStringLiteralSegments",7],[": ",17],["StringLiteralSegmentsSyntax",18],["?",17]]},{"p":["SyntaxNode","asSymbolicReferenceExpr"],"f":[["var",12],[" ",17],["asSymbolicReferenceExpr",7],[": ",17],["SymbolicReferenceExprSyntax",18,362],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSymbolicReferenceExpr",7],[": ",17],["SymbolicReferenceExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asTypeInheritanceClause"],"f":[["var",12],[" ",17],["asTypeInheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18,364],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTypeInheritanceClause",7],[": ",17],["TypeInheritanceClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asTypeInitializerClause"],"f":[["var",12],[" ",17],["asTypeInitializerClause",7],[": ",17],["TypeInitializerClauseSyntax",18,366],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTypeInitializerClause",7],[": ",17],["TypeInitializerClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnresolvedPatternExpr"],"f":[["var",12],[" ",17],["asUnresolvedPatternExpr",7],[": ",17],["UnresolvedPatternExprSyntax",18,368],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnresolvedPatternExpr",7],[": ",17],["UnresolvedPatternExprSyntax",18],["?",17]]},{"p":["SyntaxNode","isAvailabilityCondition"],"f":[["var",12],[" ",17],["isAvailabilityCondition",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAvailabilityCondition",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDictionaryElementList"],"f":[["var",12],[" ",17],["isDictionaryElementList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDictionaryElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDiscardAssignmentExpr"],"f":[["var",12],[" ",17],["isDiscardAssignmentExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDiscardAssignmentExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isEditorPlaceholderExpr"],"f":[["var",12],[" ",17],["isEditorPlaceholderExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEditorPlaceholderExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isFunctionParameterList"],"f":[["var",12],[" ",17],["isFunctionParameterList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isFunctionParameterList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericArgumentClause"],"f":[["var",12],[" ",17],["isGenericArgumentClause",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericArgumentClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrimaryAssociatedType"],"f":[["var",12],[" ",17],["isPrimaryAssociatedType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrimaryAssociatedType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isStringLiteralSegments"],"f":[["var",12],[" ",17],["isStringLiteralSegments",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isStringLiteralSegments",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSymbolicReferenceExpr"],"f":[["var",12],[" ",17],["isSymbolicReferenceExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSymbolicReferenceExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTypeInheritanceClause"],"f":[["var",12],[" ",17],["isTypeInheritanceClause",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTypeInheritanceClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTypeInitializerClause"],"f":[["var",12],[" ",17],["isTypeInitializerClause",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTypeInitializerClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnresolvedPatternExpr"],"f":[["var",12],[" ",17],["isUnresolvedPatternExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnresolvedPatternExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asClosureCaptureItemList"],"f":[["var",12],[" ",17],["asClosureCaptureItemList",7],[": ",17],["ClosureCaptureItemListSyntax",18,370],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureCaptureItemList",7],[": ",17],["ClosureCaptureItemListSyntax",18],["?",17]]},{"p":["SyntaxNode","asCompositionTypeElement"],"f":[["var",12],[" ",17],["asCompositionTypeElement",7],[": ",17],["CompositionTypeElementSyntax",18,372],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCompositionTypeElement",7],[": ",17],["CompositionTypeElementSyntax",18],["?",17]]},{"p":["SyntaxNode","asConformanceRequirement"],"f":[["var",12],[" ",17],["asConformanceRequirement",7],[": ",17],["ConformanceRequirementSyntax",18,374],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asConformanceRequirement",7],[": ",17],["ConformanceRequirementSyntax",18],["?",17]]},{"p":["SyntaxNode","asDifferentiabilityParam"],"f":[["var",12],[" ",17],["asDifferentiabilityParam",7],[": ",17],["DifferentiabilityParamSyntax",18,376],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDifferentiabilityParam",7],[": ",17],["DifferentiabilityParamSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericParameterClause"],"f":[["var",12],[" ",17],["asGenericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18,378],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericParameterClause",7],[": ",17],["GenericParameterClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","asGenericRequirementList"],"f":[["var",12],[" ",17],["asGenericRequirementList",7],[": ",17],["GenericRequirementListSyntax",18,380],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asGenericRequirementList",7],[": ",17],["GenericRequirementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asLabeledSpecializeEntry"],"f":[["var",12],[" ",17],["asLabeledSpecializeEntry",7],[": ",17],["LabeledSpecializeEntrySyntax",18,382],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asLabeledSpecializeEntry",7],[": ",17],["LabeledSpecializeEntrySyntax",18],["?",17]]},{"p":["SyntaxNode","isClosureCaptureItemList"],"f":[["var",12],[" ",17],["isClosureCaptureItemList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureCaptureItemList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isCompositionTypeElement"],"f":[["var",12],[" ",17],["isCompositionTypeElement",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCompositionTypeElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isConformanceRequirement"],"f":[["var",12],[" ",17],["isConformanceRequirement",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isConformanceRequirement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDifferentiabilityParam"],"f":[["var",12],[" ",17],["isDifferentiabilityParam",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDifferentiabilityParam",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericParameterClause"],"f":[["var",12],[" ",17],["isGenericParameterClause",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericParameterClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isGenericRequirementList"],"f":[["var",12],[" ",17],["isGenericRequirementList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isGenericRequirementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isLabeledSpecializeEntry"],"f":[["var",12],[" ",17],["isLabeledSpecializeEntry",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isLabeledSpecializeEntry",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asClosureCaptureSignature"],"f":[["var",12],[" ",17],["asClosureCaptureSignature",7],[": ",17],["ClosureCaptureSignatureSyntax",18,384],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asClosureCaptureSignature",7],[": ",17],["ClosureCaptureSignatureSyntax",18],["?",17]]},{"p":["SyntaxNode","asDifferentiabilityParams"],"f":[["var",12],[" ",17],["asDifferentiabilityParams",7],[": ",17],["DifferentiabilityParamsSyntax",18,386],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDifferentiabilityParams",7],[": ",17],["DifferentiabilityParamsSyntax",18],["?",17]]},{"p":["SyntaxNode","asPoundSourceLocationArgs"],"f":[["var",12],[" ",17],["asPoundSourceLocationArgs",7],[": ",17],["PoundSourceLocationArgsSyntax",18,388],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPoundSourceLocationArgs",7],[": ",17],["PoundSourceLocationArgsSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrecedenceGroupNameList"],"f":[["var",12],[" ",17],["asPrecedenceGroupNameList",7],[": ",17],["PrecedenceGroupNameListSyntax",18,390],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupNameList",7],[": ",17],["PrecedenceGroupNameListSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrecedenceGroupRelation"],"f":[["var",12],[" ",17],["asPrecedenceGroupRelation",7],[": ",17],["PrecedenceGroupRelationSyntax",18,392],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupRelation",7],[": ",17],["PrecedenceGroupRelationSyntax",18],["?",17]]},{"p":["SyntaxNode","asTuplePatternElementList"],"f":[["var",12],[" ",17],["asTuplePatternElementList",7],[": ",17],["TuplePatternElementListSyntax",18,394],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTuplePatternElementList",7],[": ",17],["TuplePatternElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnavailabilityCondition"],"f":[["var",12],[" ",17],["asUnavailabilityCondition",7],[": ",17],["UnavailabilityConditionSyntax",18,396],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnavailabilityCondition",7],[": ",17],["UnavailabilityConditionSyntax",18],["?",17]]},{"p":["SyntaxNode","isClosureCaptureSignature"],"f":[["var",12],[" ",17],["isClosureCaptureSignature",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isClosureCaptureSignature",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDifferentiabilityParams"],"f":[["var",12],[" ",17],["isDifferentiabilityParams",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDifferentiabilityParams",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPoundSourceLocationArgs"],"f":[["var",12],[" ",17],["isPoundSourceLocationArgs",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPoundSourceLocationArgs",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrecedenceGroupNameList"],"f":[["var",12],[" ",17],["isPrecedenceGroupNameList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupNameList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrecedenceGroupRelation"],"f":[["var",12],[" ",17],["isPrecedenceGroupRelation",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupRelation",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isTuplePatternElementList"],"f":[["var",12],[" ",17],["isTuplePatternElementList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTuplePatternElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnavailabilityCondition"],"f":[["var",12],[" ",17],["isUnavailabilityCondition",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnavailabilityCondition",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asMatchingPatternCondition"],"f":[["var",12],[" ",17],["asMatchingPatternCondition",7],[": ",17],["MatchingPatternConditionSyntax",18,398],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMatchingPatternCondition",7],[": ",17],["MatchingPatternConditionSyntax",18],["?",17]]},{"p":["SyntaxNode","asOptionalBindingCondition"],"f":[["var",12],[" ",17],["asOptionalBindingCondition",7],[": ",17],["OptionalBindingConditionSyntax",18,400],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asOptionalBindingCondition",7],[": ",17],["OptionalBindingConditionSyntax",18],["?",17]]},{"p":["SyntaxNode","isMatchingPatternCondition"],"f":[["var",12],[" ",17],["isMatchingPatternCondition",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMatchingPatternCondition",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isOptionalBindingCondition"],"f":[["var",12],[" ",17],["isOptionalBindingCondition",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isOptionalBindingCondition",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asPrecedenceGroupAssignment"],"f":[["var",12],[" ",17],["asPrecedenceGroupAssignment",7],[": ",17],["PrecedenceGroupAssignmentSyntax",18,402],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupAssignment",7],[": ",17],["PrecedenceGroupAssignmentSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrimaryAssociatedTypeList"],"f":[["var",12],[" ",17],["asPrimaryAssociatedTypeList",7],[": ",17],["PrimaryAssociatedTypeListSyntax",18,404],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrimaryAssociatedTypeList",7],[": ",17],["PrimaryAssociatedTypeListSyntax",18],["?",17]]},{"p":["SyntaxNode","isPrecedenceGroupAssignment"],"f":[["var",12],[" ",17],["isPrecedenceGroupAssignment",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupAssignment",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrimaryAssociatedTypeList"],"f":[["var",12],[" ",17],["isPrimaryAssociatedTypeList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrimaryAssociatedTypeList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asCompositionTypeElementList"],"f":[["var",12],[" ",17],["asCompositionTypeElementList",7],[": ",17],["CompositionTypeElementListSyntax",18,406],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asCompositionTypeElementList",7],[": ",17],["CompositionTypeElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","asDifferentiabilityParamList"],"f":[["var",12],[" ",17],["asDifferentiabilityParamList",7],[": ",17],["DifferentiabilityParamListSyntax",18,408],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDifferentiabilityParamList",7],[": ",17],["DifferentiabilityParamListSyntax",18],["?",17]]},{"p":["SyntaxNode","asOperatorPrecedenceAndTypes"],"f":[["var",12],[" ",17],["asOperatorPrecedenceAndTypes",7],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,410],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asOperatorPrecedenceAndTypes",7],[": ",17],["OperatorPrecedenceAndTypesSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrecedenceGroupNameElement"],"f":[["var",12],[" ",17],["asPrecedenceGroupNameElement",7],[": ",17],["PrecedenceGroupNameElementSyntax",18,412],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupNameElement",7],[": ",17],["PrecedenceGroupNameElementSyntax",18],["?",17]]},{"p":["SyntaxNode","isCompositionTypeElementList"],"f":[["var",12],[" ",17],["isCompositionTypeElementList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCompositionTypeElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDifferentiabilityParamList"],"f":[["var",12],[" ",17],["isDifferentiabilityParamList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDifferentiabilityParamList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isOperatorPrecedenceAndTypes"],"f":[["var",12],[" ",17],["isOperatorPrecedenceAndTypes",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isOperatorPrecedenceAndTypes",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrecedenceGroupNameElement"],"f":[["var",12],[" ",17],["isPrecedenceGroupNameElement",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupNameElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAvailabilityLabeledArgument"],"f":[["var",12],[" ",17],["asAvailabilityLabeledArgument",7],[": ",17],["AvailabilityLabeledArgumentSyntax",18,414],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAvailabilityLabeledArgument",7],[": ",17],["AvailabilityLabeledArgumentSyntax",18],["?",17]]},{"p":["SyntaxNode","asSpecializeAttributeSpecList"],"f":[["var",12],[" ",17],["asSpecializeAttributeSpecList",7],[": ",17],["SpecializeAttributeSpecListSyntax",18,416],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asSpecializeAttributeSpecList",7],[": ",17],["SpecializeAttributeSpecListSyntax",18],["?",17]]},{"p":["SyntaxNode","isAvailabilityLabeledArgument"],"f":[["var",12],[" ",17],["isAvailabilityLabeledArgument",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAvailabilityLabeledArgument",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isSpecializeAttributeSpecList"],"f":[["var",12],[" ",17],["isSpecializeAttributeSpecList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isSpecializeAttributeSpecList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","id"],"f":[["var",12],[" ",17],["id",7],[": ",17],["SyntaxIdentifier",18,514],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["id",7],[": ",17],["SyntaxIdentifier",18]],"d":"Returns a value representing the unique identity of the node."},{"p":["SyntaxNode","asImplementsAttributeArguments"],"f":[["var",12],[" ",17],["asImplementsAttributeArguments",7],[": ",17],["ImplementsAttributeArgumentsSyntax",18,418],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asImplementsAttributeArguments",7],[": ",17],["ImplementsAttributeArgumentsSyntax",18],["?",17]]},{"p":["SyntaxNode","asNamedAttributeStringArgument"],"f":[["var",12],[" ",17],["asNamedAttributeStringArgument",7],[": ",17],["NamedAttributeStringArgumentSyntax",18,420],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asNamedAttributeStringArgument",7],[": ",17],["NamedAttributeStringArgumentSyntax",18],["?",17]]},{"p":["SyntaxNode","asPrecedenceGroupAssociativity"],"f":[["var",12],[" ",17],["asPrecedenceGroupAssociativity",7],[": ",17],["PrecedenceGroupAssociativitySyntax",18,422],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupAssociativity",7],[": ",17],["PrecedenceGroupAssociativitySyntax",18],["?",17]]},{"p":["SyntaxNode","asPrecedenceGroupAttributeList"],"f":[["var",12],[" ",17],["asPrecedenceGroupAttributeList",7],[": ",17],["PrecedenceGroupAttributeListSyntax",18,424],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asPrecedenceGroupAttributeList",7],[": ",17],["PrecedenceGroupAttributeListSyntax",18],["?",17]]},{"p":["SyntaxNode","isImplementsAttributeArguments"],"f":[["var",12],[" ",17],["isImplementsAttributeArguments",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isImplementsAttributeArguments",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isNamedAttributeStringArgument"],"f":[["var",12],[" ",17],["isNamedAttributeStringArgument",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isNamedAttributeStringArgument",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrecedenceGroupAssociativity"],"f":[["var",12],[" ",17],["isPrecedenceGroupAssociativity",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupAssociativity",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isPrecedenceGroupAttributeList"],"f":[["var",12],[" ",17],["isPrecedenceGroupAttributeList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPrecedenceGroupAttributeList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asDifferentiabilityParamsClause"],"f":[["var",12],[" ",17],["asDifferentiabilityParamsClause",7],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDifferentiabilityParamsClause",7],[": ",17],["DifferentiabilityParamsClauseSyntax",18],["?",17]]},{"p":["SyntaxNode","isDifferentiabilityParamsClause"],"f":[["var",12],[" ",17],["isDifferentiabilityParamsClause",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDifferentiabilityParamsClause",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asAvailabilityVersionRestriction"],"f":[["var",12],[" ",17],["asAvailabilityVersionRestriction",7],[": ",17],["AvailabilityVersionRestrictionSyntax",18,428],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAvailabilityVersionRestriction",7],[": ",17],["AvailabilityVersionRestrictionSyntax",18],["?",17]]},{"p":["SyntaxNode","asMultipleTrailingClosureElement"],"f":[["var",12],[" ",17],["asMultipleTrailingClosureElement",7],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMultipleTrailingClosureElement",7],[": ",17],["MultipleTrailingClosureElementSyntax",18],["?",17]]},{"p":["SyntaxNode","isAvailabilityVersionRestriction"],"f":[["var",12],[" ",17],["isAvailabilityVersionRestriction",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAvailabilityVersionRestriction",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isMultipleTrailingClosureElement"],"f":[["var",12],[" ",17],["isMultipleTrailingClosureElement",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMultipleTrailingClosureElement",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asImplicitlyUnwrappedOptionalType"],"f":[["var",12],[" ",17],["asImplicitlyUnwrappedOptionalType",7],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,432],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asImplicitlyUnwrappedOptionalType",7],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],["?",17]]},{"p":["SyntaxNode","isImplicitlyUnwrappedOptionalType"],"f":[["var",12],[" ",17],["isImplicitlyUnwrappedOptionalType",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isImplicitlyUnwrappedOptionalType",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asDifferentiableAttributeArguments"],"f":[["var",12],[" ",17],["asDifferentiableAttributeArguments",7],[": ",17],["DifferentiableAttributeArgumentsSyntax",18,434],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDifferentiableAttributeArguments",7],[": ",17],["DifferentiableAttributeArgumentsSyntax",18],["?",17]]},{"p":["SyntaxNode","isDifferentiableAttributeArguments"],"f":[["var",12],[" ",17],["isDifferentiableAttributeArguments",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDifferentiableAttributeArguments",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asMultipleTrailingClosureElementList"],"f":[["var",12],[" ",17],["asMultipleTrailingClosureElementList",7],[": ",17],["MultipleTrailingClosureElementListSyntax",18,436],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asMultipleTrailingClosureElementList",7],[": ",17],["MultipleTrailingClosureElementListSyntax",18],["?",17]]},{"p":["SyntaxNode","isMultipleTrailingClosureElementList"],"f":[["var",12],[" ",17],["isMultipleTrailingClosureElementList",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMultipleTrailingClosureElementList",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","asDerivativeRegistrationAttributeArguments"],"f":[["var",12],[" ",17],["asDerivativeRegistrationAttributeArguments",7],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDerivativeRegistrationAttributeArguments",7],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],["?",17]]},{"p":["SyntaxNode","isDerivativeRegistrationAttributeArguments"],"f":[["var",12],[" ",17],["isDerivativeRegistrationAttributeArguments",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDerivativeRegistrationAttributeArguments",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","parent"],"f":[["var",12],[" ",17],["parent",7],[": ",17],["SyntaxNode",18,520],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["parent",7],[": ",17],["SyntaxNode",18],["?",17]],"d":"The parent of this syntax node, or `nil` if this node is the root."},{"p":["SyntaxNode","asAsExpr"],"f":[["var",12],[" ",17],["asAsExpr",7],[": ",17],["AsExprSyntax",18,445],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asAsExpr",7],[": ",17],["AsExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asDoStmt"],"f":[["var",12],[" ",17],["asDoStmt",7],[": ",17],["DoStmtSyntax",18,447],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asDoStmt",7],[": ",17],["DoStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asIfStmt"],"f":[["var",12],[" ",17],["asIfStmt",7],[": ",17],["IfStmtSyntax",18,449],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIfStmt",7],[": ",17],["IfStmtSyntax",18],["?",17]]},{"p":["SyntaxNode","asIsExpr"],"f":[["var",12],[" ",17],["asIsExpr",7],[": ",17],["IsExprSyntax",18,451],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asIsExpr",7],[": ",17],["IsExprSyntax",18],["?",17]]},{"p":["SyntaxNode","byteSize"],"f":[["var",12],[" ",17],["byteSize",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["byteSize",7],[": ",17],["Int",18]],"d":"The textual byte length of this node including leading and trailing trivia."},{"p":["SyntaxNode","isAsExpr"],"f":[["var",12],[" ",17],["isAsExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isAsExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isDoStmt"],"f":[["var",12],[" ",17],["isDoStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isDoStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIfStmt"],"f":[["var",12],[" ",17],["isIfStmt",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIfStmt",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isIsExpr"],"f":[["var",12],[" ",17],["isIsExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isIsExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","position"],"f":[["var",12],[" ",17],["position",7],[": ",17],["AbsolutePosition",18,530],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["position",7],[": ",17],["AbsolutePosition",18]],"d":"The absolute position of the starting point of this node."},{"p":["SyntaxNode","asTryExpr"],"f":[["var",12],[" ",17],["asTryExpr",7],[": ",17],["TryExprSyntax",18,454],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asTryExpr",7],[": ",17],["TryExprSyntax",18],["?",17]]},{"p":["SyntaxNode","asUnknown"],"f":[["var",12],[" ",17],["asUnknown",7],[": ",17],["UnknownSyntax",18,456],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["asUnknown",7],[": ",17],["UnknownSyntax",18],["?",17]]},{"p":["SyntaxNode","byteRange"],"f":[["var",12],[" ",17],["byteRange",7],[": ",17],["ByteSourceRange",18,528],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["byteRange",7],[": ",17],["ByteSourceRange",18]],"d":"The byte source range of this node including leading and trailing trivia."},{"p":["SyntaxNode","isTryExpr"],"f":[["var",12],[" ",17],["isTryExpr",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isTryExpr",7],[": ",17],["Bool",18]]},{"p":["SyntaxNode","isUnknown"],"f":[["var",12],[" ",17],["isUnknown",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknown",7],[": ",17],["Bool",18]]},{"p":["SyntaxChildren","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7708},{"p":["SyntaxChildren","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SyntaxChildrenIndex",18]],"o":7725},{"p":["SyntaxProtocol","syntaxNodeType"],"f":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18,15],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["syntaxNodeType",7],[": ",17],["SyntaxProtocol",18],[".Type",17]],"d":"Returns the underlying syntax node type."},{"p":["SyntaxProtocol","firstToken"],"f":[["var",12],[" ",17],["firstToken",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["firstToken",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"Returns the first token node that is part of this syntax node."},{"p":["SyntaxProtocol","isImplicit"],"f":[["var",12],[" ",17],["isImplicit",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isImplicit",7],[": ",17],["Bool",18]],"d":"When isImplicit is true, the syntax node doesn't include any\nunderlying tokens, e.g. an empty CodeBlockItemList."},{"p":["SyntaxProtocol","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,7655],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"d":"A source-accurate description of this node."},{"p":["SyntaxProtocol","endPosition"],"f":[["var",12],[" ",17],["endPosition",7],[": ",17],["AbsolutePosition",18,530],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endPosition",7],[": ",17],["AbsolutePosition",18]],"d":"The end position of this node, including its trivia."},{"p":["SyntaxProtocol","totalLength"],"f":[["var",12],[" ",17],["totalLength",7],[": ",17],["SourceLength",18,524],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["totalLength",7],[": ",17],["SourceLength",18]],"d":"The length of this node including all of its trivia."},{"p":["SyntaxProtocol","isCollection"],"f":[["var",12],[" ",17],["isCollection",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCollection",7],[": ",17],["Bool",18]],"d":"Whether or not this node represents an SyntaxCollection."},{"p":["SyntaxProtocol","contentLength"],"f":[["var",12],[" ",17],["contentLength",7],[": ",17],["SourceLength",18,524],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["contentLength",7],[": ",17],["SourceLength",18]],"d":"The length this node takes up spelled out in the source, excluding its\nleading or trailing trivia."},{"p":["SyntaxProtocol","indexInParent"],"f":[["var",12],[" ",17],["indexInParent",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["indexInParent",7],[": ",17],["Int",18]],"d":"The index of this node in the parent's children."},{"p":["SyntaxProtocol","leadingTrivia"],"f":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The leading trivia of this syntax node. Leading trivia is attached to\nthe first token syntax contained by this node. Without such token, this\nproperty will return nil."},{"p":["SyntaxProtocol","previousToken"],"f":[["var",12],[" ",17],["previousToken",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["previousToken",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"Recursively walks through the tree to find the token semantically before\nthis node."},{"p":["SyntaxProtocol","trailingTrivia"],"f":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18,534],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTrivia",7],[": ",17],["Trivia",18],["?",17]],"d":"The trailing trivia of this syntax node. Trailing trivia is attached to\nthe last token syntax contained by this node. Without such token, this\nproperty will return nil."},{"p":["SyntaxProtocol","classifications"],"f":[["var",12],[" ",17],["classifications",7],[": ",17],["SyntaxClassifications",18,516],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["classifications",7],[": ",17],["SyntaxClassifications",18]],"d":"Sequence of `SyntaxClassifiedRange`s for this syntax node.\n\nThe provided classified ranges are consecutive and cover the full source\ntext of the node. The ranges may also span multiple tokens, if multiple\nconsecutive tokens would have the same classification then a single classified\nrange is provided for all of them."},{"p":["SyntaxProtocol","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,7655],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"d":"Returns a description used by dump."},{"p":["SyntaxProtocol","leadingTriviaLength"],"f":[["var",12],[" ",17],["leadingTriviaLength",7],[": ",17],["SourceLength",18,524],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["leadingTriviaLength",7],[": ",17],["SourceLength",18]],"d":"The length this node's leading trivia takes up spelled out in source."},{"p":["SyntaxProtocol","trailingTriviaLength"],"f":[["var",12],[" ",17],["trailingTriviaLength",7],[": ",17],["SourceLength",18,524],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["trailingTriviaLength",7],[": ",17],["SourceLength",18]],"d":"The length this node's trailing trivia takes up spelled out in source."},{"p":["SyntaxProtocol","byteSizeAfterTrimmingTrivia"],"f":[["var",12],[" ",17],["byteSizeAfterTrimmingTrivia",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["byteSizeAfterTrimmingTrivia",7],[": ",17],["Int",18]],"d":"The textual byte length of this node exluding leading and trailing trivia."},{"p":["SyntaxProtocol","id"],"f":[["var",12],[" ",17],["id",7],[": ",17],["SyntaxIdentifier",18,514],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["id",7],[": ",17],["SyntaxIdentifier",18]],"d":"Returns a value representing the unique identity of the node."},{"p":["SyntaxProtocol","endPositionBeforeTrailingTrivia"],"f":[["var",12],[" ",17],["endPositionBeforeTrailingTrivia",7],[": ",17],["AbsolutePosition",18,530],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endPositionBeforeTrailingTrivia",7],[": ",17],["AbsolutePosition",18]],"d":"The end position of this node's content, before any trailing trivia."},{"p":["SyntaxProtocol","positionAfterSkippingLeadingTrivia"],"f":[["var",12],[" ",17],["positionAfterSkippingLeadingTrivia",7],[": ",17],["AbsolutePosition",18,530],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["positionAfterSkippingLeadingTrivia",7],[": ",17],["AbsolutePosition",18]],"d":"The absolute position of the starting point of this node, skipping any\nleading trivia attached to the first token syntax."},{"p":["SyntaxProtocol","root"],"f":[["var",12],[" ",17],["root",7],[": ",17],["Syntax",18,513],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["root",7],[": ",17],["Syntax",18]],"d":"The root of the tree in which this node resides."},{"p":["SyntaxProtocol","index"],"f":[["var",12],[" ",17],["index",7],[": ",17],["SyntaxChildrenIndex",18,515],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["index",7],[": ",17],["SyntaxChildrenIndex",18]],"d":"The index of this node in a `SyntaxChildren` collection."},{"p":["SyntaxProtocol","parent"],"f":[["var",12],[" ",17],["parent",7],[": ",17],["Syntax",18,513],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["parent",7],[": ",17],["Syntax",18],["?",17]],"d":"The parent of this syntax node, or `nil` if this node is the root."},{"p":["SyntaxProtocol","tokens"],"f":[["var",12],[" ",17],["tokens",7],[": ",17],["TokenSequence",18,525],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["tokens",7],[": ",17],["TokenSequence",18]],"d":"Sequence of tokens that are part of this Syntax node."},{"p":["SyntaxProtocol","isToken"],"f":[["var",12],[" ",17],["isToken",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isToken",7],[": ",17],["Bool",18]],"d":"Whether or not this node is a token one."},{"p":["SyntaxProtocol","byteSize"],"f":[["var",12],[" ",17],["byteSize",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["byteSize",7],[": ",17],["Int",18]],"d":"The textual byte length of this node including leading and trailing trivia."},{"p":["SyntaxProtocol","children"],"f":[["var",12],[" ",17],["children",7],[": ",17],["SyntaxChildren",18,521],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["children",7],[": ",17],["SyntaxChildren",18]],"d":"A sequence over the `present` children of this node."},{"p":["SyntaxProtocol","position"],"f":[["var",12],[" ",17],["position",7],[": ",17],["AbsolutePosition",18,530],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["position",7],[": ",17],["AbsolutePosition",18]],"d":"The absolute position of the starting point of this node. If the first token\nis with leading trivia, the position points to the start of the leading\ntrivia."},{"p":["SyntaxProtocol","byteRange"],"f":[["var",12],[" ",17],["byteRange",7],[": ",17],["ByteSourceRange",18,528],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["byteRange",7],[": ",17],["ByteSourceRange",18]],"d":"The byte source range of this node including leading and trailing trivia."},{"p":["SyntaxProtocol","hasParent"],"f":[["var",12],[" ",17],["hasParent",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["hasParent",7],[": ",17],["Bool",18]],"d":"Whether or not this node has a parent."},{"p":["SyntaxProtocol","isMissing"],"f":[["var",12],[" ",17],["isMissing",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isMissing",7],[": ",17],["Bool",18]],"d":"Whether or not this node is marked as `missing`."},{"p":["SyntaxProtocol","isPresent"],"f":[["var",12],[" ",17],["isPresent",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isPresent",7],[": ",17],["Bool",18]],"d":"Whether or not this node is marked as `present`."},{"p":["SyntaxProtocol","isUnknown"],"f":[["var",12],[" ",17],["isUnknown",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isUnknown",7],[": ",17],["Bool",18]],"d":"Whether or not this node represents an unknown node."},{"p":["SyntaxProtocol","lastToken"],"f":[["var",12],[" ",17],["lastToken",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["lastToken",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"Returns the last token node that is part of this syntax node."},{"p":["SyntaxProtocol","nextToken"],"f":[["var",12],[" ",17],["nextToken",7],[": ",17],["TokenSyntax",18,444],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["nextToken",7],[": ",17],["TokenSyntax",18],["?",17]],"d":"Recursively walks through the tree to find the next token semantically\nafter this node."},{"p":["SourceEdit","replacementRange"],"f":[["var",12],[" ",17],["replacementRange",7],[": ",17],["ByteSourceRange",18,528],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["replacementRange",7],[": ",17],["ByteSourceRange",18]],"d":"After the edit has been applied the range of the replacement text."},{"p":["SourceEdit","replacementLength"],"f":[["let",12],[" ",17],["replacementLength",7],[": ",17],["Int",18,7706]],"s":[["let",12],[" ",17],["replacementLength",7],[": ",17],["Int",18]],"d":"The length of the edit replacement in UTF8 bytes."},{"p":["SourceEdit","range"],"f":[["let",12],[" ",17],["range",7],[": ",17],["ByteSourceRange",18,528]],"s":[["let",12],[" ",17],["range",7],[": ",17],["ByteSourceRange",18]],"d":"The byte range of the original source buffer that the edit applies to."},{"p":["SourceEdit","length"],"f":[["var",12],[" ",17],["length",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["length",7],[": ",17],["Int",18]]},{"p":["SourceEdit","offset"],"f":[["var",12],[" ",17],["offset",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["offset",7],[": ",17],["Int",18]]},{"p":["SourceEdit","endOffset"],"f":[["var",12],[" ",17],["endOffset",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endOffset",7],[": ",17],["Int",18]]},{"p":["SourceRange","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,7655],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"o":7775},{"p":["SourceRange","end"],"f":[["let",12],[" ",17],["end",7],[": ",17],["SourceLocation",18,527]],"s":[["let",12],[" ",17],["end",7],[": ",17],["SourceLocation",18]],"d":"The beginning location in the source range."},{"p":["SourceRange","start"],"f":[["let",12],[" ",17],["start",7],[": ",17],["SourceLocation",18,527]],"s":[["let",12],[" ",17],["start",7],[": ",17],["SourceLocation",18]],"d":"The beginning location in the source range."},{"p":["TriviaPiece","sourceLength"],"f":[["var",12],[" ",17],["sourceLength",7],[": ",17],["SourceLength",18,524],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["sourceLength",7],[": ",17],["SourceLength",18]]},{"p":["TriviaPiece","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,7655],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"d":"Returns a description used by dump.","o":7775},{"p":["SourceLength","utf8Length"],"f":[["let",12],[" ",17],["utf8Length",7],[": ",17],["Int",18,7706]],"s":[["let",12],[" ",17],["utf8Length",7],[": ",17],["Int",18]]},{"p":["TokenSequence","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["SourceLocation","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,7655],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"o":7775},{"p":["SourceLocation","file"],"f":[["var",12],[" ",17],["file",7],[": ",17],["String",18,7655],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["file",7],[": ",17],["String",18],["?",17]],"d":"The file in which this location resides."},{"p":["SourceLocation","line"],"f":[["var",12],[" ",17],["line",7],[": ",17],["Int",18,7706],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["line",7],[": ",17],["Int",18],["?",17]],"d":"The line in the file where this location resides. 1-based."},{"p":["SourceLocation","column"],"f":[["var",12],[" ",17],["column",7],[": ",17],["Int",18,7706],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["column",7],[": ",17],["Int",18],["?",17]],"d":"The UTF-8 byte offset from the beginning of the line where this location\nresides. 1-based."},{"p":["SourceLocation","offset"],"f":[["let",12],[" ",17],["offset",7],[": ",17],["Int",18,7706]],"s":[["let",12],[" ",17],["offset",7],[": ",17],["Int",18]],"d":"The UTF-8 byte offset into the file where this location resides."},{"p":["ByteSourceRange","length"],"f":[["var",12],[" ",17],["length",7],[": ",17],["Int",18,7706]],"s":[["var",12],[" ",17],["length",7],[": ",17],["Int",18]]},{"p":["ByteSourceRange","offset"],"f":[["var",12],[" ",17],["offset",7],[": ",17],["Int",18,7706]],"s":[["var",12],[" ",17],["offset",7],[": ",17],["Int",18]]},{"p":["ByteSourceRange","isEmpty"],"f":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18]]},{"p":["ByteSourceRange","endOffset"],"f":[["var",12],[" ",17],["endOffset",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endOffset",7],[": ",17],["Int",18]]},{"p":["ConcurrentEdits","edits"],"f":[["let",12],[" ",17],["edits",7],[": [",17],["SourceEdit",18,522],["]",17]],"s":[["let",12],[" ",17],["edits",7],[": [",17],["SourceEdit",18],["]",17]],"d":"The raw concurrent edits. Are guaranteed to satisfy the requirements\nstated above."},{"p":["AbsolutePosition","utf8Offset"],"f":[["let",12],[" ",17],["utf8Offset",7],[": ",17],["Int",18,7706]],"s":[["let",12],[" ",17],["utf8Offset",7],[": ",17],["Int",18]]},{"p":["ReversedTokenSequence","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,7780],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"o":7764},{"p":["IncrementalParseReusedNodeCollector","rangeAndNodes"],"f":[["var",12],[" ",17],["rangeAndNodes",7],[": [(",17],["ByteSourceRange",18,528],[", ",17],["SyntaxNode",18,520],[")]",17]],"s":[["var",12],[" ",17],["rangeAndNodes",7],[": [(",17],["ByteSourceRange",18],[", ",17],["SyntaxNode",18],[")]",17]]},{"p":["Trivia","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["Int",18]],"o":7708},{"p":["Trivia","sourceLength"],"f":[["var",12],[" ",17],["sourceLength",7],[": ",17],["SourceLength",18,524],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["sourceLength",7],[": ",17],["SourceLength",18]]},{"p":["Trivia","byteSize"],"f":[["var",12],[" ",17],["byteSize",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["byteSize",7],[": ",17],["Int",18]],"d":"Get the byteSize of this trivia"},{"p":["Trivia","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18,7706],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18]],"o":7725},{"p":["TokenKind","isKeyword"],"f":[["var",12],[" ",17],["isKeyword",7],[": ",17],["Bool",18,7703],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isKeyword",7],[": ",17],["Bool",18]]},{"p":["SyntaxFactory","makeUnknownSyntax(tokens:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeUnknownSyntax",7],["(",17],["tokens",1],[": [",17],["TokenSyntax",18,444],["]) -> ",17],["UnknownSyntax",18,456]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeUnknownSyntax",7],["(",17],["tokens",1],[": [",17],["TokenSyntax",18],["]) -> ",17],["UnknownSyntax",18]]},{"p":["SyntaxFactory","makeAsExpr(asTok:questionOrExclamationMark:typeName:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAsExpr",7],["(",17],["asTok",1],[": ",17],["TokenSyntax",18,444],[", ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["typeName",1],[": ",17],["TypeSyntax",18,443],[") -> ",17],["AsExprSyntax",18,445]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAsExpr",7],["(",17],["asTok",1],[": ",17],["TokenSyntax",18],[", ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["typeName",1],[": ",17],["TypeSyntax",18],[") -> ",17],["AsExprSyntax",18]]},{"p":["SyntaxFactory","makeDoStmt(labelName:labelColon:doKeyword:body:catchClauses:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDoStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,487],[", ",17],["catchClauses",1],[": ",17],["CatchClauseListSyntax",18,160],["?) -> ",17],["DoStmtSyntax",18,447]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDoStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[", ",17],["catchClauses",1],[": ",17],["CatchClauseListSyntax",18],["?) -> ",17],["DoStmtSyntax",18]]},{"p":["SyntaxFactory","makeIfStmt(labelName:labelColon:ifKeyword:conditions:body:elseKeyword:elseBody:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIfStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["conditions",1],[": ",17],["ConditionElementListSyntax",18,330],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,487],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["elseBody",1],[": ",17],["Syntax",18,513],["?) -> ",17],["IfStmtSyntax",18,449]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIfStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["conditions",1],[": ",17],["ConditionElementListSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["elseBody",1],[": ",17],["Syntax",18],["?) -> ",17],["IfStmtSyntax",18]]},{"p":["SyntaxFactory","makeIsExpr(isTok:typeName:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIsExpr",7],["(",17],["isTok",1],[": ",17],["TokenSyntax",18,444],[", ",17],["typeName",1],[": ",17],["TypeSyntax",18,443],[") -> ",17],["IsExprSyntax",18,451]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIsExpr",7],["(",17],["isTok",1],[": ",17],["TokenSyntax",18],[", ",17],["typeName",1],[": ",17],["TypeSyntax",18],[") -> ",17],["IsExprSyntax",18]]},{"p":["SyntaxFactory","makeTryExpr(tryKeyword:questionOrExclamationMark:expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTryExpr",7],["(",17],["tryKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18,441],[") -> ",17],["TryExprSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTryExpr",7],["(",17],["tryKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["TryExprSyntax",18]]},{"p":["SyntaxFactory","makeUnknown(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeUnknown",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeUnknown",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeCaseItem(pattern:whereClause:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCaseItem",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18,453],[", ",17],["whereClause",1],[": ",17],["WhereClauseSyntax",18,51],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CaseItemSyntax",18,457]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCaseItem",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["whereClause",1],[": ",17],["WhereClauseSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["CaseItemSyntax",18]]},{"p":["SyntaxFactory","makeDeclName(declBaseName:declNameArguments:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclName",7],["(",17],["declBaseName",1],[": ",17],["Syntax",18,513],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["DeclNameSyntax",18,459]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclName",7],["(",17],["declBaseName",1],[": ",17],["Syntax",18],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["DeclNameSyntax",18]]},{"p":["SyntaxFactory","makeEnumDecl(attributes:modifiers:enumKeyword:identifier:genericParameters:inheritanceClause:genericWhereClause:members:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["enumKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["genericParameters",1],[": ",17],["GenericParameterClauseSyntax",18,378],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18,364],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["EnumDeclSyntax",18,461]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["enumKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameters",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18],[") -> ",17],["EnumDeclSyntax",18]]},{"p":["SyntaxFactory","makeExprList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExprList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExprSyntax",18,441],["]) -> ",17],["ExprListSyntax",18,463]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExprList",7],["([",17],["ExprSyntax",18],["]) -> ",17],["ExprListSyntax",18]]},{"p":["SyntaxFactory","makeObjcName(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcName",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ObjcNamePieceSyntax",18,115],["]) -> ",17],["ObjcNameSyntax",18,465]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcName",7],["([",17],["ObjcNamePieceSyntax",18],["]) -> ",17],["ObjcNameSyntax",18]]},{"p":["SyntaxFactory","makeSomeType(someSpecifier:baseType:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSomeType",7],["(",17],["someSpecifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["baseType",1],[": ",17],["TypeSyntax",18,443],[") -> ",17],["SomeTypeSyntax",18,467]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSomeType",7],["(",17],["someSpecifier",1],[": ",17],["TokenSyntax",18],[", ",17],["baseType",1],[": ",17],["TypeSyntax",18],[") -> ",17],["SomeTypeSyntax",18]]},{"p":["SyntaxFactory","makeTypeExpr(type:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeExpr",7],["(",17],["type",1],[": ",17],["TypeSyntax",18,443],[") -> ",17],["TypeExprSyntax",18,469]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeExpr",7],["(",17],["type",1],[": ",17],["TypeSyntax",18],[") -> ",17],["TypeExprSyntax",18]]},{"p":["SyntaxFactory","makeArrayExpr(leftSquare:elements:rightSquare:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayExpr",7],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,444],[", ",17],["elements",1],[": ",17],["ArrayElementListSyntax",18,202],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ArrayExprSyntax",18,471]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayExpr",7],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["ArrayElementListSyntax",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ArrayExprSyntax",18]]},{"p":["SyntaxFactory","makeArrayType(leftSquareBracket:elementType:rightSquareBracket:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayType",7],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18,444],[", ",17],["elementType",1],[": ",17],["TypeSyntax",18,443],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ArrayTypeSyntax",18,473]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayType",7],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["elementType",1],[": ",17],["TypeSyntax",18],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ArrayTypeSyntax",18]]},{"p":["SyntaxFactory","makeArrowExpr(asyncKeyword:throwsToken:arrowToken:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeArrowExpr",7],["(",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ArrowExprSyntax",18,475]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeArrowExpr",7],["(",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ArrowExprSyntax",18]]},{"p":["SyntaxFactory","makeAsKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeAttribute(atSignToken:attributeName:leftParen:argument:rightParen:tokenList:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAttribute",7],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18,444],[", ",17],["attributeName",1],[": ",17],["TokenSyntax",18,444],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["argument",1],[": ",17],["Syntax",18,513],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["tokenList",1],[": ",17],["TokenListSyntax",18,501],["?) -> ",17],["AttributeSyntax",18,477]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAttribute",7],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["attributeName",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argument",1],[": ",17],["Syntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["tokenList",1],[": ",17],["TokenListSyntax",18],["?) -> ",17],["AttributeSyntax",18]]},{"p":["SyntaxFactory","makeAwaitExpr(awaitKeyword:expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAwaitExpr",7],["(",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["expression",1],[": ",17],["ExprSyntax",18,441],[") -> ",17],["AwaitExprSyntax",18,479]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAwaitExpr",7],["(",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["AwaitExprSyntax",18]]},{"p":["SyntaxFactory","makeBreakStmt(breakKeyword:label:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBreakStmt",7],["(",17],["breakKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["label",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["BreakStmtSyntax",18,481]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBreakStmt",7],["(",17],["breakKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["label",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["BreakStmtSyntax",18]]},{"p":["SyntaxFactory","makeCatchItem(pattern:whereClause:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchItem",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18,453],["?, ",17],["whereClause",1],[": ",17],["WhereClauseSyntax",18,51],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CatchItemSyntax",18,483]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchItem",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18],["?, ",17],["whereClause",1],[": ",17],["WhereClauseSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["CatchItemSyntax",18]]},{"p":["SyntaxFactory","makeClassDecl(attributes:modifiers:classOrActorKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:members:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClassDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18,378],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18,364],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["ClassDeclSyntax",18,485]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClassDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18],[") -> ",17],["ClassDeclSyntax",18]]},{"p":["SyntaxFactory","makeCodeBlock(leftBrace:statements:rightBrace:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCodeBlock",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,444],[", ",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18,238],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["CodeBlockSyntax",18,487]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCodeBlock",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[") -> ",17],["CodeBlockSyntax",18]]},{"p":["SyntaxFactory","makeDeferStmt(deferKeyword:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeferStmt",7],["(",17],["deferKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,487],[") -> ",17],["DeferStmtSyntax",18,489]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeferStmt",7],["(",17],["deferKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["DeferStmtSyntax",18]]},{"p":["SyntaxFactory","makeDoKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDoKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDoKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeElseBlock(elseKeyword:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeElseBlock",7],["(",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,487],[") -> ",17],["ElseBlockSyntax",18,491]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeElseBlock",7],["(",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["ElseBlockSyntax",18]]},{"p":["SyntaxFactory","makeForInStmt(labelName:labelColon:forKeyword:tryKeyword:awaitKeyword:caseKeyword:pattern:typeAnnotation:inKeyword:sequenceExpr:whereClause:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeForInStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["pattern",1],[": ",17],["PatternSyntax",18,453],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18,157],["?, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["sequenceExpr",1],[": ",17],["ExprSyntax",18,441],[", ",17],["whereClause",1],[": ",17],["WhereClauseSyntax",18,51],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18,487],[") -> ",17],["ForInStmtSyntax",18,493]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeForInStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18],["?, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["sequenceExpr",1],[": ",17],["ExprSyntax",18],[", ",17],["whereClause",1],[": ",17],["WhereClauseSyntax",18],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["ForInStmtSyntax",18]]},{"p":["SyntaxFactory","makeGuardStmt(guardKeyword:conditions:elseKeyword:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGuardStmt",7],["(",17],["guardKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["conditions",1],[": ",17],["ConditionElementListSyntax",18,330],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,487],[") -> ",17],["GuardStmtSyntax",18,495]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGuardStmt",7],["(",17],["guardKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["conditions",1],[": ",17],["ConditionElementListSyntax",18],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["GuardStmtSyntax",18]]},{"p":["SyntaxFactory","makeIfKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeInKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeInOutExpr(ampersand:expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInOutExpr",7],["(",17],["ampersand",1],[": ",17],["TokenSyntax",18,444],[", ",17],["expression",1],[": ",17],["ExprSyntax",18,441],[") -> ",17],["InOutExprSyntax",18,497]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInOutExpr",7],["(",17],["ampersand",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["InOutExprSyntax",18]]},{"p":["SyntaxFactory","makeIsKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeThrowStmt(throwKeyword:expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeThrowStmt",7],["(",17],["throwKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["expression",1],[": ",17],["ExprSyntax",18,441],[") -> ",17],["ThrowStmtSyntax",18,499]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeThrowStmt",7],["(",17],["throwKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["ThrowStmtSyntax",18]]},{"p":["SyntaxFactory","makeTokenList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTokenList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,444],["]) -> ",17],["TokenListSyntax",18,501]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTokenList",7],["([",17],["TokenSyntax",18],["]) -> ",17],["TokenListSyntax",18]]},{"p":["SyntaxFactory","makeTupleExpr(leftParen:elementList:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleExpr",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["elementList",1],[": ",17],["TupleExprElementListSyntax",18,342],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["TupleExprSyntax",18,503]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleExpr",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementList",1],[": ",17],["TupleExprElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["TupleExprSyntax",18]]},{"p":["SyntaxFactory","makeTupleType(leftParen:elements:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleType",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["elements",1],[": ",17],["TupleTypeElementListSyntax",18,344],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["TupleTypeSyntax",18,505]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleType",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["TupleTypeElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["TupleTypeSyntax",18]]},{"p":["SyntaxFactory","makeTypeToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeWhileStmt(labelName:labelColon:whileKeyword:conditions:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeWhileStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["conditions",1],[": ",17],["ConditionElementListSyntax",18,330],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,487],[") -> ",17],["WhileStmtSyntax",18,507]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeWhileStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["conditions",1],[": ",17],["ConditionElementListSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["WhileStmtSyntax",18]]},{"p":["SyntaxFactory","makeYieldList(leftParen:elementList:trailingComma:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeYieldList",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["elementList",1],[": ",17],["ExprListSyntax",18,463],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["YieldListSyntax",18,509]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeYieldList",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementList",1],[": ",17],["ExprListSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["YieldListSyntax",18]]},{"p":["SyntaxFactory","makeYieldStmt(yieldKeyword:yields:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeYieldStmt",7],["(",17],["yieldKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["yields",1],[": ",17],["Syntax",18,513],[") -> ",17],["YieldStmtSyntax",18,511]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeYieldStmt",7],["(",17],["yieldKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["yields",1],[": ",17],["Syntax",18],[") -> ",17],["YieldStmtSyntax",18]]},{"p":["SyntaxFactory","makeAccessPath(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessPath",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["AccessPathComponentSyntax",18,304],["]) -> ",17],["AccessPathSyntax",18,25]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessPath",7],["([",17],["AccessPathComponentSyntax",18],["]) -> ",17],["AccessPathSyntax",18]]},{"p":["SyntaxFactory","makeAnyKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAnyKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAnyKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeArrowToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeArrowToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeArrowToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeColonToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeColonToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeColonToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeCommaToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCommaToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCommaToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeEqualToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEqualToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEqualToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeForKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeForKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeForKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeIdentifier(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifier",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifier",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeImportDecl(attributes:modifiers:importTok:importKind:path:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeImportDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["importTok",1],[": ",17],["TokenSyntax",18,444],[", ",17],["importKind",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["path",1],[": ",17],["AccessPathSyntax",18,25],[") -> ",17],["ImportDeclSyntax",18,27]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeImportDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["importTok",1],[": ",17],["TokenSyntax",18],[", ",17],["importKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["path",1],[": ",17],["AccessPathSyntax",18],[") -> ",17],["ImportDeclSyntax",18]]},{"p":["SyntaxFactory","makeLetKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeLetKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeLetKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeNilKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeNilKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeNilKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeReturnStmt(returnKeyword:expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeReturnStmt",7],["(",17],["returnKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["expression",1],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["ReturnStmtSyntax",18,29]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeReturnStmt",7],["(",17],["returnKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExprSyntax",18],["?) -> ",17],["ReturnStmtSyntax",18]]},{"p":["SyntaxFactory","makeSourceFile(statements:eofToken:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSourceFile",7],["(",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18,238],[", ",17],["eofToken",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["SourceFileSyntax",18,31]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSourceFile",7],["(",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18],[", ",17],["eofToken",1],[": ",17],["TokenSyntax",18],[") -> ",17],["SourceFileSyntax",18]]},{"p":["SyntaxFactory","makeStructDecl(attributes:modifiers:structKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:members:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStructDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["structKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18,378],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18,364],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["StructDeclSyntax",18,33]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStructDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["structKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18],[") -> ",17],["StructDeclSyntax",18]]},{"p":["SyntaxFactory","makeSwitchCase(unknownAttr:label:statements:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchCase",7],["(",17],["unknownAttr",1],[": ",17],["AttributeSyntax",18,477],["?, ",17],["label",1],[": ",17],["Syntax",18,513],[", ",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18,238],[") -> ",17],["SwitchCaseSyntax",18,35]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchCase",7],["(",17],["unknownAttr",1],[": ",17],["AttributeSyntax",18],["?, ",17],["label",1],[": ",17],["Syntax",18],[", ",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18],[") -> ",17],["SwitchCaseSyntax",18]]},{"p":["SyntaxFactory","makeSwitchStmt(labelName:labelColon:switchKeyword:expression:leftBrace:cases:rightBrace:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["expression",1],[": ",17],["ExprSyntax",18,441],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,444],[", ",17],["cases",1],[": ",17],["SwitchCaseListSyntax",18,155],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["SwitchStmtSyntax",18,37]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["cases",1],[": ",17],["SwitchCaseListSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[") -> ",17],["SwitchStmtSyntax",18]]},{"p":["SyntaxFactory","makeTryKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTryKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTryKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeVarKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeVarKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeVarKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeYieldToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeYieldToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeYieldToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeAtSignToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAtSignToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAtSignToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBlankAsExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAsExpr",7],["() -> ",17],["AsExprSyntax",18,445]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAsExpr",7],["() -> ",17],["AsExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankDoStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDoStmt",7],["() -> ",17],["DoStmtSyntax",18,447]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDoStmt",7],["() -> ",17],["DoStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankIfStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfStmt",7],["() -> ",17],["IfStmtSyntax",18,449]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfStmt",7],["() -> ",17],["IfStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankIsExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIsExpr",7],["() -> ",17],["IsExprSyntax",18,451]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIsExpr",7],["() -> ",17],["IsExprSyntax",18]]},{"p":["SyntaxFactory","makeCaseKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCaseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCaseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeCatchClause(catchKeyword:catchItems:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchClause",7],["(",17],["catchKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["catchItems",1],[": ",17],["CatchItemListSyntax",18,105],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18,487],[") -> ",17],["CatchClauseSyntax",18,39]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchClause",7],["(",17],["catchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["catchItems",1],[": ",17],["CatchItemListSyntax",18],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["CatchClauseSyntax",18]]},{"p":["SyntaxFactory","makeClosureExpr(leftBrace:signature:statements:rightBrace:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureExpr",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,444],[", ",17],["signature",1],[": ",17],["ClosureSignatureSyntax",18,206],["?, ",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18,238],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ClosureExprSyntax",18,41]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureExpr",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["signature",1],[": ",17],["ClosureSignatureSyntax",18],["?, ",17],["statements",1],[": ",17],["CodeBlockItemListSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ClosureExprSyntax",18]]},{"p":["SyntaxFactory","makeElseKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeElseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeElseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeEnumKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeFuncKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFuncKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFuncKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeInitKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInitKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInitKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeKeyPathExpr(backslash:rootExpr:expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeKeyPathExpr",7],["(",17],["backslash",1],[": ",17],["TokenSyntax",18,444],[", ",17],["rootExpr",1],[": ",17],["ExprSyntax",18,441],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18,441],[") -> ",17],["KeyPathExprSyntax",18,43]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeKeyPathExpr",7],["(",17],["backslash",1],[": ",17],["TokenSyntax",18],[", ",17],["rootExpr",1],[": ",17],["ExprSyntax",18],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["KeyPathExprSyntax",18]]},{"p":["SyntaxFactory","makePeriodToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePeriodToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePeriodToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSelfKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSelfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSelfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeTernaryExpr(conditionExpression:questionMark:firstChoice:colonMark:secondChoice:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTernaryExpr",7],["(",17],["conditionExpression",1],[": ",17],["ExprSyntax",18,441],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,444],[", ",17],["firstChoice",1],[": ",17],["ExprSyntax",18,441],[", ",17],["colonMark",1],[": ",17],["TokenSyntax",18,444],[", ",17],["secondChoice",1],[": ",17],["ExprSyntax",18,441],[") -> ",17],["TernaryExprSyntax",18,45]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTernaryExpr",7],["(",17],["conditionExpression",1],[": ",17],["ExprSyntax",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[", ",17],["firstChoice",1],[": ",17],["ExprSyntax",18],[", ",17],["colonMark",1],[": ",17],["TokenSyntax",18],[", ",17],["secondChoice",1],[": ",17],["ExprSyntax",18],[") -> ",17],["TernaryExprSyntax",18]]},{"p":["SyntaxFactory","makeTrueKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTrueKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTrueKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeWhereClause(whereKeyword:guardResult:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeWhereClause",7],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["guardResult",1],[": ",17],["ExprSyntax",18,441],[") -> ",17],["WhereClauseSyntax",18,51]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeWhereClause",7],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["guardResult",1],[": ",17],["ExprSyntax",18],[") -> ",17],["WhereClauseSyntax",18]]},{"p":["SyntaxFactory","makeAccessorDecl(attributes:modifier:accessorKind:parameter:asyncKeyword:throwsKeyword:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifier",1],[": ",17],["DeclModifierSyntax",18,65],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18,444],[", ",17],["parameter",1],[": ",17],["AccessorParameterSyntax",18,234],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifier",1],[": ",17],["DeclModifierSyntax",18],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18],[", ",17],["parameter",1],[": ",17],["AccessorParameterSyntax",18],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]]},{"p":["SyntaxFactory","makeAccessorList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["AccessorDeclSyntax",18,53],["]) -> ",17],["AccessorListSyntax",18,55]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorList",7],["([",17],["AccessorDeclSyntax",18],["]) -> ",17],["AccessorListSyntax",18]]},{"p":["SyntaxFactory","makeArrayElement(expression:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayElement",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,441],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ArrayElementSyntax",18,57]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayElement",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ArrayElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankTryExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTryExpr",7],["() -> ",17],["TryExprSyntax",18,454]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTryExpr",7],["() -> ",17],["TryExprSyntax",18]]},{"p":["SyntaxFactory","makeBreakKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBreakKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBreakKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeCaseItemList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCaseItemList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["CaseItemSyntax",18,457],["]) -> ",17],["CaseItemListSyntax",18,59]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCaseItemList",7],["([",17],["CaseItemSyntax",18],["]) -> ",17],["CaseItemListSyntax",18]]},{"p":["SyntaxFactory","makeCatchKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeClassKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClassKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClassKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeClosureParam(name:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureParam",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureParamSyntax",18,61]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureParam",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ClosureParamSyntax",18]]},{"p":["SyntaxFactory","makeContinueStmt(continueKeyword:label:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeContinueStmt",7],["(",17],["continueKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["label",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ContinueStmtSyntax",18,63]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeContinueStmt",7],["(",17],["continueKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["label",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ContinueStmtSyntax",18]]},{"p":["SyntaxFactory","makeDeclModifier(name:detailLeftParen:detail:detailRightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclModifier",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["detailLeftParen",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["detail",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["detailRightParen",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DeclModifierSyntax",18,65]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclModifier",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["detailLeftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["detail",1],[": ",17],["TokenSyntax",18],["?, ",17],["detailRightParen",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["DeclModifierSyntax",18]]},{"p":["SyntaxFactory","makeDeferKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeferKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeferKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeEnumCaseDecl(attributes:modifiers:caseKeyword:elements:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCaseDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["elements",1],[": ",17],["EnumCaseElementListSyntax",18,306],[") -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCaseDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["EnumCaseElementListSyntax",18],[") -> ",17],["EnumCaseDeclSyntax",18]]},{"p":["SyntaxFactory","makeFalseKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFalseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFalseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeFunctionDecl(attributes:modifiers:funcKeyword:identifier:genericParameterClause:signature:genericWhereClause:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["funcKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18,378],["?, ",17],["signature",1],[": ",17],["FunctionSignatureSyntax",18,252],[", ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["funcKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["signature",1],[": ",17],["FunctionSignatureSyntax",18],[", ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]]},{"p":["SyntaxFactory","makeFunctionType(leftParen:arguments:rightParen:asyncKeyword:throwsOrRethrowsKeyword:arrow:returnType:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionType",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["arguments",1],[": ",17],["TupleTypeElementListSyntax",18,344],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["arrow",1],[": ",17],["TokenSyntax",18,444],[", ",17],["returnType",1],[": ",17],["TypeSyntax",18,443],[") -> ",17],["FunctionTypeSyntax",18,71]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionType",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["TupleTypeElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["arrow",1],[": ",17],["TokenSyntax",18],[", ",17],["returnType",1],[": ",17],["TypeSyntax",18],[") -> ",17],["FunctionTypeSyntax",18]]},{"p":["SyntaxFactory","makeGuardKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGuardKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGuardKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeIfConfigDecl(clauses:poundEndif:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIfConfigDecl",7],["(",17],["clauses",1],[": ",17],["IfConfigClauseListSyntax",18,288],[", ",17],["poundEndif",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["IfConfigDeclSyntax",18,73]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIfConfigDecl",7],["(",17],["clauses",1],[": ",17],["IfConfigClauseListSyntax",18],[", ",17],["poundEndif",1],[": ",17],["TokenSyntax",18],[") -> ",17],["IfConfigDeclSyntax",18]]},{"p":["SyntaxFactory","makeInoutKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInoutKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInoutKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeMetatypeType(baseType:period:typeOrProtocol:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMetatypeType",7],["(",17],["baseType",1],[": ",17],["TypeSyntax",18,443],[", ",17],["period",1],[": ",17],["TokenSyntax",18,444],[", ",17],["typeOrProtocol",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["MetatypeTypeSyntax",18,75]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMetatypeType",7],["(",17],["baseType",1],[": ",17],["TypeSyntax",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["typeOrProtocol",1],[": ",17],["TokenSyntax",18],[") -> ",17],["MetatypeTypeSyntax",18]]},{"p":["SyntaxFactory","makeModifierList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeModifierList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["DeclModifierSyntax",18,65],["]) -> ",17],["ModifierListSyntax",18,77]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeModifierList",7],["([",17],["DeclModifierSyntax",18],["]) -> ",17],["ModifierListSyntax",18]]},{"p":["SyntaxFactory","makeObjCSelector(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjCSelector",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ObjCSelectorPieceSyntax",18,262],["]) -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjCSelector",7],["([",17],["ObjCSelectorPieceSyntax",18],["]) -> ",17],["ObjCSelectorSyntax",18]]},{"p":["SyntaxFactory","makeOperatorDecl(attributes:modifiers:operatorKeyword:identifier:operatorPrecedenceAndTypes:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOperatorDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["operatorPrecedenceAndTypes",1],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,410],["?) -> ",17],["OperatorDeclSyntax",18,81]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOperatorDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["operatorPrecedenceAndTypes",1],[": ",17],["OperatorPrecedenceAndTypesSyntax",18],["?) -> ",17],["OperatorDeclSyntax",18]]},{"p":["SyntaxFactory","makeOptionalType(wrappedType:questionMark:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalType",7],["(",17],["wrappedType",1],[": ",17],["TypeSyntax",18,443],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["OptionalTypeSyntax",18,83]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalType",7],["(",17],["wrappedType",1],[": ",17],["TypeSyntax",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[") -> ",17],["OptionalTypeSyntax",18]]},{"p":["SyntaxFactory","makeProtocolDecl(attributes:modifiers:protocolKeyword:identifier:inheritanceClause:genericWhereClause:members:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeProtocolDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18,364],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeProtocolDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18],[") -> ",17],["ProtocolDeclSyntax",18]]},{"p":["SyntaxFactory","makeRegexLiteral(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRegexLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRegexLiteral",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeReturnClause(arrow:returnType:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeReturnClause",7],["(",17],["arrow",1],[": ",17],["TokenSyntax",18,444],[", ",17],["returnType",1],[": ",17],["TypeSyntax",18,443],[") -> ",17],["ReturnClauseSyntax",18,87]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeReturnClause",7],["(",17],["arrow",1],[": ",17],["TokenSyntax",18],[", ",17],["returnType",1],[": ",17],["TypeSyntax",18],[") -> ",17],["ReturnClauseSyntax",18]]},{"p":["SyntaxFactory","makeSequenceExpr(elements:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSequenceExpr",7],["(",17],["elements",1],[": ",17],["ExprListSyntax",18,463],[") -> ",17],["SequenceExprSyntax",18,89]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSequenceExpr",7],["(",17],["elements",1],[": ",17],["ExprListSyntax",18],[") -> ",17],["SequenceExprSyntax",18]]},{"p":["SyntaxFactory","makeSuperKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSuperKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSuperKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSuperRefExpr(superKeyword:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSuperRefExpr",7],["(",17],["superKeyword",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["SuperRefExprSyntax",18,91]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSuperRefExpr",7],["(",17],["superKeyword",1],[": ",17],["TokenSyntax",18],[") -> ",17],["SuperRefExprSyntax",18]]},{"p":["SyntaxFactory","makeThrowKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeThrowKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeThrowKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeTuplePattern(leftParen:elements:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTuplePattern",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["elements",1],[": ",17],["TuplePatternElementListSyntax",18,394],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["TuplePatternSyntax",18,93]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTuplePattern",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["TuplePatternElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["TuplePatternSyntax",18]]},{"p":["SyntaxFactory","makeVariableDecl(attributes:modifiers:letOrVarKeyword:bindings:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeVariableDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["bindings",1],[": ",17],["PatternBindingListSyntax",18,294],[") -> ",17],["VariableDeclSyntax",18,95]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeVariableDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["bindings",1],[": ",17],["PatternBindingListSyntax",18],[") -> ",17],["VariableDeclSyntax",18]]},{"p":["SyntaxFactory","makeVariableExpr(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeVariableExpr",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["IdentifierExprSyntax",18,139]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeVariableExpr",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["IdentifierExprSyntax",18]]},{"p":["SyntaxFactory","makeVersionTuple(majorMinor:patchPeriod:patchVersion:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeVersionTuple",7],["(",17],["majorMinor",1],[": ",17],["Syntax",18,513],[", ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["patchVersion",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["VersionTupleSyntax",18,97]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeVersionTuple",7],["(",17],["majorMinor",1],[": ",17],["Syntax",18],[", ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18],["?, ",17],["patchVersion",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["VersionTupleSyntax",18]]},{"p":["SyntaxFactory","makeWhereKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeWhereKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeWhereKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeWhileKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeWhileKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeWhileKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeAccessorBlock(leftBrace:accessors:rightBrace:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorBlock",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,444],[", ",17],["accessors",1],[": ",17],["AccessorListSyntax",18,55],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["AccessorBlockSyntax",18,99]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorBlock",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["accessors",1],[": ",17],["AccessorListSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[") -> ",17],["AccessorBlockSyntax",18]]},{"p":["SyntaxFactory","makeAsTypePattern(pattern:asKeyword:type:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAsTypePattern",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18,453],[", ",17],["asKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["type",1],[": ",17],["TypeSyntax",18,443],[") -> ",17],["AsTypePatternSyntax",18,101]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAsTypePattern",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["asKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["type",1],[": ",17],["TypeSyntax",18],[") -> ",17],["AsTypePatternSyntax",18]]},{"p":["SyntaxFactory","makeAttributeList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAttributeList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["Syntax",18,513],["]) -> ",17],["AttributeListSyntax",18,103]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAttributeList",7],["([",17],["Syntax",18],["]) -> ",17],["AttributeListSyntax",18]]},{"p":["SyntaxFactory","makeBacktickToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBacktickToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBacktickToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBlankCaseItem()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCaseItem",7],["() -> ",17],["CaseItemSyntax",18,457]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCaseItem",7],["() -> ",17],["CaseItemSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeclName()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclName",7],["() -> ",17],["DeclNameSyntax",18,459]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclName",7],["() -> ",17],["DeclNameSyntax",18]]},{"p":["SyntaxFactory","makeBlankEnumDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumDecl",7],["() -> ",17],["EnumDeclSyntax",18,461]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumDecl",7],["() -> ",17],["EnumDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankExprList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExprList",7],["() -> ",17],["ExprListSyntax",18,463]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExprList",7],["() -> ",17],["ExprListSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjcName()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcName",7],["() -> ",17],["ObjcNameSyntax",18,465]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcName",7],["() -> ",17],["ObjcNameSyntax",18]]},{"p":["SyntaxFactory","makeBlankSomeType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSomeType",7],["() -> ",17],["SomeTypeSyntax",18,467]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSomeType",7],["() -> ",17],["SomeTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankTypeExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeExpr",7],["() -> ",17],["TypeExprSyntax",18,469]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeExpr",7],["() -> ",17],["TypeExprSyntax",18]]},{"p":["SyntaxFactory","makeCatchItemList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchItemList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["CatchItemSyntax",18,483],["]) -> ",17],["CatchItemListSyntax",18,105]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchItemList",7],["([",17],["CatchItemSyntax",18],["]) -> ",17],["CatchItemListSyntax",18]]},{"p":["SyntaxFactory","makeCodeBlockItem(item:semicolon:errorTokens:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCodeBlockItem",7],["(",17],["item",1],[": ",17],["Syntax",18,513],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["errorTokens",1],[": ",17],["Syntax",18,513],["?) -> ",17],["CodeBlockItemSyntax",18,107]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCodeBlockItem",7],["(",17],["item",1],[": ",17],["Syntax",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],["?, ",17],["errorTokens",1],[": ",17],["Syntax",18],["?) -> ",17],["CodeBlockItemSyntax",18]]},{"p":["SyntaxFactory","makeDeinitKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeinitKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeinitKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeEllipsisToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEllipsisToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEllipsisToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeExtensionDecl(attributes:modifiers:extensionKeyword:extendedType:inheritanceClause:genericWhereClause:members:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExtensionDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["extendedType",1],[": ",17],["TypeSyntax",18,443],[", ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18,364],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExtensionDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["extendedType",1],[": ",17],["TypeSyntax",18],[", ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["members",1],[": ",17],["MemberDeclBlockSyntax",18],[") -> ",17],["ExtensionDeclSyntax",18]]},{"p":["SyntaxFactory","makeImportKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeImportKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeImportKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeInheritedType(typeName:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInheritedType",7],["(",17],["typeName",1],[": ",17],["TypeSyntax",18,443],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["InheritedTypeSyntax",18,111]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInheritedType",7],["(",17],["typeName",1],[": ",17],["TypeSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["InheritedTypeSyntax",18]]},{"p":["SyntaxFactory","makeIsTypePattern(isKeyword:type:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIsTypePattern",7],["(",17],["isKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["type",1],[": ",17],["TypeSyntax",18,443],[") -> ",17],["IsTypePatternSyntax",18,113]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIsTypePattern",7],["(",17],["isKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["type",1],[": ",17],["TypeSyntax",18],[") -> ",17],["IsTypePatternSyntax",18]]},{"p":["SyntaxFactory","makeObjcNamePiece(name:dot:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcNamePiece",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["dot",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjcNamePieceSyntax",18,115]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcNamePiece",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["dot",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ObjcNamePieceSyntax",18]]},{"p":["SyntaxFactory","makePoundFileExpr(poundFile:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileExpr",7],["(",17],["poundFile",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PoundFileExprSyntax",18,117]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileExpr",7],["(",17],["poundFile",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundFileExprSyntax",18]]},{"p":["SyntaxFactory","makePoundLineExpr(poundLine:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundLineExpr",7],["(",17],["poundLine",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PoundLineExprSyntax",18,119]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundLineExpr",7],["(",17],["poundLine",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundLineExprSyntax",18]]},{"p":["SyntaxFactory","makeProtocolToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeProtocolToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeProtocolToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePublicKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePublicKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePublicKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeRepeatKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRepeatKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRepeatKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeReturnKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeReturnKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeReturnKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeStaticKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStaticKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStaticKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeStringLiteral(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteral",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeStringSegment(content:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringSegment",7],["(",17],["content",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["StringSegmentSyntax",18,121]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringSegment",7],["(",17],["content",1],[": ",17],["TokenSyntax",18],[") -> ",17],["StringSegmentSyntax",18]]},{"p":["SyntaxFactory","makeStringSegment(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringSegment",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringSegment",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeStructKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStructKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStructKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSubscriptDecl(attributes:modifiers:subscriptKeyword:genericParameterClause:indices:result:genericWhereClause:accessor:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSubscriptDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18,378],["?, ",17],["indices",1],[": ",17],["ParameterClauseSyntax",18,188],[", ",17],["result",1],[": ",17],["ReturnClauseSyntax",18,87],[", ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["accessor",1],[": ",17],["Syntax",18,513],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSubscriptDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["indices",1],[": ",17],["ParameterClauseSyntax",18],[", ",17],["result",1],[": ",17],["ReturnClauseSyntax",18],[", ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["accessor",1],[": ",17],["Syntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]]},{"p":["SyntaxFactory","makeSubscriptExpr(calledExpression:leftBracket:argumentList:rightBracket:trailingClosure:additionalTrailingClosures:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSubscriptExpr",7],["(",17],["calledExpression",1],[": ",17],["ExprSyntax",18,441],[", ",17],["leftBracket",1],[": ",17],["TokenSyntax",18,444],[", ",17],["argumentList",1],[": ",17],["TupleExprElementListSyntax",18,342],[", ",17],["rightBracket",1],[": ",17],["TokenSyntax",18,444],[", ",17],["trailingClosure",1],[": ",17],["ClosureExprSyntax",18,41],["?, ",17],["additionalTrailingClosures",1],[": ",17],["MultipleTrailingClosureElementListSyntax",18,436],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSubscriptExpr",7],["(",17],["calledExpression",1],[": ",17],["ExprSyntax",18],[", ",17],["leftBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["argumentList",1],[": ",17],["TupleExprElementListSyntax",18],[", ",17],["rightBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingClosure",1],[": ",17],["ClosureExprSyntax",18],["?, ",17],["additionalTrailingClosures",1],[": ",17],["MultipleTrailingClosureElementListSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]]},{"p":["SyntaxFactory","makeSwitchKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeThrowsKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeThrowsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeThrowsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeTypealiasDecl(attributes:modifiers:typealiasKeyword:identifier:genericParameterClause:initializer:genericWhereClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypealiasDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18,378],["?, ",17],["initializer",1],[": ",17],["TypeInitializerClauseSyntax",18,366],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypealiasDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["initializer",1],[": ",17],["TypeInitializerClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]]},{"p":["SyntaxFactory","makeVoidTupleType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeVoidTupleType",7],["() -> ",17],["TupleTypeSyntax",18,505]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeVoidTupleType",7],["() -> ",17],["TupleTypeSyntax",18]],"d":"MARK: Convenience APIs"},{"p":["SyntaxFactory","makeAssignmentExpr(assignToken:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAssignmentExpr",7],["(",17],["assignToken",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["AssignmentExprSyntax",18,129]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAssignmentExpr",7],["(",17],["assignToken",1],[": ",17],["TokenSyntax",18],[") -> ",17],["AssignmentExprSyntax",18]]},{"p":["SyntaxFactory","makeAttributedType(specifier:attributes:baseType:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAttributedType",7],["(",17],["specifier",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["baseType",1],[": ",17],["TypeSyntax",18,443],[") -> ",17],["AttributedTypeSyntax",18,131]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAttributedType",7],["(",17],["specifier",1],[": ",17],["TokenSyntax",18],["?, ",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["baseType",1],[": ",17],["TypeSyntax",18],[") -> ",17],["AttributedTypeSyntax",18]]},{"p":["SyntaxFactory","makeBackslashToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBackslashToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBackslashToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBinaryOperator(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBinaryOperator",7],["(",17],["_",1],[" ",17],["name",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBinaryOperator",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBlankArrayExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayExpr",7],["() -> ",17],["ArrayExprSyntax",18,471]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayExpr",7],["() -> ",17],["ArrayExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankArrayType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayType",7],["() -> ",17],["ArrayTypeSyntax",18,473]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayType",7],["() -> ",17],["ArrayTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankArrowExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrowExpr",7],["() -> ",17],["ArrowExprSyntax",18,475]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrowExpr",7],["() -> ",17],["ArrowExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankAttribute()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAttribute",7],["() -> ",17],["AttributeSyntax",18,477]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAttribute",7],["() -> ",17],["AttributeSyntax",18]]},{"p":["SyntaxFactory","makeBlankAwaitExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAwaitExpr",7],["() -> ",17],["AwaitExprSyntax",18,479]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAwaitExpr",7],["() -> ",17],["AwaitExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankBreakStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBreakStmt",7],["() -> ",17],["BreakStmtSyntax",18,481]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBreakStmt",7],["() -> ",17],["BreakStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankCatchItem()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchItem",7],["() -> ",17],["CatchItemSyntax",18,483]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchItem",7],["() -> ",17],["CatchItemSyntax",18]]},{"p":["SyntaxFactory","makeBlankClassDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClassDecl",7],["() -> ",17],["ClassDeclSyntax",18,485]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClassDecl",7],["() -> ",17],["ClassDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankCodeBlock()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCodeBlock",7],["() -> ",17],["CodeBlockSyntax",18,487]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCodeBlock",7],["() -> ",17],["CodeBlockSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeferStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeferStmt",7],["() -> ",17],["DeferStmtSyntax",18,489]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeferStmt",7],["() -> ",17],["DeferStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankElseBlock()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankElseBlock",7],["() -> ",17],["ElseBlockSyntax",18,491]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankElseBlock",7],["() -> ",17],["ElseBlockSyntax",18]]},{"p":["SyntaxFactory","makeBlankForInStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankForInStmt",7],["() -> ",17],["ForInStmtSyntax",18,493]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankForInStmt",7],["() -> ",17],["ForInStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankGuardStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGuardStmt",7],["() -> ",17],["GuardStmtSyntax",18,495]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGuardStmt",7],["() -> ",17],["GuardStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankInOutExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInOutExpr",7],["() -> ",17],["InOutExprSyntax",18,497]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInOutExpr",7],["() -> ",17],["InOutExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankThrowStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankThrowStmt",7],["() -> ",17],["ThrowStmtSyntax",18,499]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankThrowStmt",7],["() -> ",17],["ThrowStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankTokenList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTokenList",7],["() -> ",17],["TokenListSyntax",18,501]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTokenList",7],["() -> ",17],["TokenListSyntax",18]]},{"p":["SyntaxFactory","makeBlankTupleExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleExpr",7],["() -> ",17],["TupleExprSyntax",18,503]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleExpr",7],["() -> ",17],["TupleExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankTupleType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleType",7],["() -> ",17],["TupleTypeSyntax",18,505]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleType",7],["() -> ",17],["TupleTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankWhileStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankWhileStmt",7],["() -> ",17],["WhileStmtSyntax",18,507]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankWhileStmt",7],["() -> ",17],["WhileStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankYieldList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankYieldList",7],["() -> ",17],["YieldListSyntax",18,509]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankYieldList",7],["() -> ",17],["YieldListSyntax",18]]},{"p":["SyntaxFactory","makeBlankYieldStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankYieldStmt",7],["() -> ",17],["YieldStmtSyntax",18,511]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankYieldStmt",7],["() -> ",17],["YieldStmtSyntax",18]]},{"p":["SyntaxFactory","makeDefaultKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDefaultKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDefaultKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeDictionaryExpr(leftSquare:content:rightSquare:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryExpr",7],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,444],[", ",17],["content",1],[": ",17],["Syntax",18,513],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["DictionaryExprSyntax",18,133]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryExpr",7],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["content",1],[": ",17],["Syntax",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[") -> ",17],["DictionaryExprSyntax",18]]},{"p":["SyntaxFactory","makeDictionaryType(leftSquareBracket:keyType:colon:valueType:rightSquareBracket:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryType",7],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18,444],[", ",17],["keyType",1],[": ",17],["TypeSyntax",18,443],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["valueType",1],[": ",17],["TypeSyntax",18,443],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryType",7],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["keyType",1],[": ",17],["TypeSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["valueType",1],[": ",17],["TypeSyntax",18],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18],[") -> ",17],["DictionaryTypeSyntax",18]]},{"p":["SyntaxFactory","makeExpressionStmt(expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExpressionStmt",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,441],[") -> ",17],["ExpressionStmtSyntax",18,137]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExpressionStmt",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["ExpressionStmtSyntax",18]]},{"p":["SyntaxFactory","makeIdentifierExpr(identifier:declNameArguments:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifierExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["IdentifierExprSyntax",18,139]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifierExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["IdentifierExprSyntax",18]]},{"p":["SyntaxFactory","makeIdentifierList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifierList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,444],["]) -> ",17],["IdentifierListSyntax",18,141]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifierList",7],["([",17],["TokenSyntax",18],["]) -> ",17],["IdentifierListSyntax",18]]},{"p":["SyntaxFactory","makeIfConfigClause(poundKeyword:condition:elements:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIfConfigClause",7],["(",17],["poundKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["condition",1],[": ",17],["ExprSyntax",18,441],["?, ",17],["elements",1],[": ",17],["Syntax",18,513],[") -> ",17],["IfConfigClauseSyntax",18,143]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIfConfigClause",7],["(",17],["poundKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExprSyntax",18],["?, ",17],["elements",1],[": ",17],["Syntax",18],[") -> ",17],["IfConfigClauseSyntax",18]]},{"p":["SyntaxFactory","makeIntegerLiteral(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIntegerLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIntegerLiteral",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeLeftAngleToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftAngleToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftAngleToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeLeftBraceToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftBraceToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftBraceToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeLeftParenToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftParenToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftParenToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeMemberDeclList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberDeclList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["MemberDeclListItemSyntax",18,292],["]) -> ",17],["MemberDeclListSyntax",18,145]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberDeclList",7],["([",17],["MemberDeclListItemSyntax",18],["]) -> ",17],["MemberDeclListSyntax",18]]},{"p":["SyntaxFactory","makeNilLiteralExpr(nilKeyword:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeNilLiteralExpr",7],["(",17],["nilKeyword",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["NilLiteralExprSyntax",18,147]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeNilLiteralExpr",7],["(",17],["nilKeyword",1],[": ",17],["TokenSyntax",18],[") -> ",17],["NilLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makePatternBinding(pattern:typeAnnotation:initializer:accessor:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePatternBinding",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18,453],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18,157],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18,258],["?, ",17],["accessor",1],[": ",17],["Syntax",18,513],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PatternBindingSyntax",18,149]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePatternBinding",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18],["?, ",17],["accessor",1],[": ",17],["Syntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["PatternBindingSyntax",18]]},{"p":["SyntaxFactory","makePoundErrorDecl(poundError:leftParen:message:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundErrorDecl",7],["(",17],["poundError",1],[": ",17],["TokenSyntax",18,444],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["message",1],[": ",17],["StringLiteralExprSyntax",18,272],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PoundErrorDeclSyntax",18,151]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundErrorDecl",7],["(",17],["poundError",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["message",1],[": ",17],["StringLiteralExprSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundErrorDeclSyntax",18]]},{"p":["SyntaxFactory","makePoundIfKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundIfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundIfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrefixOperator(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixOperator",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrivateKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrivateKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrivateKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSemicolonToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSemicolonToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSemicolonToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSpecializeExpr(expression:genericArgumentClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSpecializeExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,441],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18,356],[") -> ",17],["SpecializeExprSyntax",18,153]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSpecializeExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18],[") -> ",17],["SpecializeExprSyntax",18]]},{"p":["SyntaxFactory","makeSwitchCaseList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchCaseList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["Syntax",18,513],["]) -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchCaseList",7],["([",17],["Syntax",18],["]) -> ",17],["SwitchCaseListSyntax",18]]},{"p":["SyntaxFactory","makeTypeAnnotation(colon:type:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeAnnotation",7],["(",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["type",1],[": ",17],["TypeSyntax",18,443],[") -> ",17],["TypeAnnotationSyntax",18,157]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeAnnotation",7],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["type",1],[": ",17],["TypeSyntax",18],[") -> ",17],["TypeAnnotationSyntax",18]]},{"p":["SyntaxFactory","makeTypeIdentifier(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeIdentifier",7],["(",17],["_",1],[" ",17],["name",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TypeSyntax",18,443]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeIdentifier",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessPath()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessPath",7],["() -> ",17],["AccessPathSyntax",18,25]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessPath",7],["() -> ",17],["AccessPathSyntax",18]]},{"p":["SyntaxFactory","makeBlankImportDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankImportDecl",7],["() -> ",17],["ImportDeclSyntax",18,27]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankImportDecl",7],["() -> ",17],["ImportDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankReturnStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankReturnStmt",7],["() -> ",17],["ReturnStmtSyntax",18,29]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankReturnStmt",7],["() -> ",17],["ReturnStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankSourceFile()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSourceFile",7],["() -> ",17],["SourceFileSyntax",18,31]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSourceFile",7],["() -> ",17],["SourceFileSyntax",18]]},{"p":["SyntaxFactory","makeBlankStructDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStructDecl",7],["() -> ",17],["StructDeclSyntax",18,33]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStructDecl",7],["() -> ",17],["StructDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankSwitchCase()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchCase",7],["() -> ",17],["SwitchCaseSyntax",18,35]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchCase",7],["() -> ",17],["SwitchCaseSyntax",18]]},{"p":["SyntaxFactory","makeBlankSwitchStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchStmt",7],["() -> ",17],["SwitchStmtSyntax",18,37]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchStmt",7],["() -> ",17],["SwitchStmtSyntax",18]]},{"p":["SyntaxFactory","makeCatchClauseList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchClauseList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["CatchClauseSyntax",18,39],["]) -> ",17],["CatchClauseListSyntax",18,160]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCatchClauseList",7],["([",17],["CatchClauseSyntax",18],["]) -> ",17],["CatchClauseListSyntax",18]]},{"p":["SyntaxFactory","makeCompositionType(elements:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCompositionType",7],["(",17],["elements",1],[": ",17],["CompositionTypeElementListSyntax",18,406],[") -> ",17],["CompositionTypeSyntax",18,162]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCompositionType",7],["(",17],["elements",1],[": ",17],["CompositionTypeElementListSyntax",18],[") -> ",17],["CompositionTypeSyntax",18]]},{"p":["SyntaxFactory","makeContinueKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeContinueKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeContinueKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeCustomAttribute(atSignToken:attributeName:leftParen:argumentList:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCustomAttribute",7],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18,444],[", ",17],["attributeName",1],[": ",17],["TypeSyntax",18,443],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["argumentList",1],[": ",17],["TupleExprElementListSyntax",18,342],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CustomAttributeSyntax",18,164]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCustomAttribute",7],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["attributeName",1],[": ",17],["TypeSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argumentList",1],[": ",17],["TupleExprElementListSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["CustomAttributeSyntax",18]]},{"p":["SyntaxFactory","makeDeclarationStmt(declaration:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclarationStmt",7],["(",17],["declaration",1],[": ",17],["DeclSyntax",18,440],[") -> ",17],["DeclarationStmtSyntax",18,166]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclarationStmt",7],["(",17],["declaration",1],[": ",17],["DeclSyntax",18],[") -> ",17],["DeclarationStmtSyntax",18]]},{"p":["SyntaxFactory","makeEnumCaseElement(identifier:associatedValue:rawValue:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCaseElement",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["associatedValue",1],[": ",17],["ParameterClauseSyntax",18,188],["?, ",17],["rawValue",1],[": ",17],["InitializerClauseSyntax",18,258],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["EnumCaseElementSyntax",18,168]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCaseElement",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["associatedValue",1],[": ",17],["ParameterClauseSyntax",18],["?, ",17],["rawValue",1],[": ",17],["InitializerClauseSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["EnumCaseElementSyntax",18]]},{"p":["SyntaxFactory","makeEnumCasePattern(type:period:caseName:associatedTuple:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCasePattern",7],["(",17],["type",1],[": ",17],["TypeSyntax",18,443],["?, ",17],["period",1],[": ",17],["TokenSyntax",18,444],[", ",17],["caseName",1],[": ",17],["TokenSyntax",18,444],[", ",17],["associatedTuple",1],[": ",17],["TuplePatternSyntax",18,93],["?) -> ",17],["EnumCasePatternSyntax",18,170]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCasePattern",7],["(",17],["type",1],[": ",17],["TypeSyntax",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["caseName",1],[": ",17],["TokenSyntax",18],[", ",17],["associatedTuple",1],[": ",17],["TuplePatternSyntax",18],["?) -> ",17],["EnumCasePatternSyntax",18]]},{"p":["SyntaxFactory","makeFallthroughStmt(fallthroughKeyword:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFallthroughStmt",7],["(",17],["fallthroughKeyword",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["FallthroughStmtSyntax",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFallthroughStmt",7],["(",17],["fallthroughKeyword",1],[": ",17],["TokenSyntax",18],[") -> ",17],["FallthroughStmtSyntax",18]]},{"p":["SyntaxFactory","makeFloatingLiteral(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFloatingLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFloatingLiteral",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeForcedValueExpr(expression:exclamationMark:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeForcedValueExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,441],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ForcedValueExprSyntax",18,174]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeForcedValueExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ForcedValueExprSyntax",18]]},{"p":["SyntaxFactory","makeGenericArgument(argumentType:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericArgument",7],["(",17],["argumentType",1],[": ",17],["TypeSyntax",18,443],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GenericArgumentSyntax",18,176]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericArgument",7],["(",17],["argumentType",1],[": ",17],["TypeSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["GenericArgumentSyntax",18]]},{"p":["SyntaxFactory","makeInitializerDecl(attributes:modifiers:initKeyword:optionalMark:genericParameterClause:parameters:throwsOrRethrowsKeyword:genericWhereClause:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInitializerDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["initKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["optionalMark",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18,378],["?, ",17],["parameters",1],[": ",17],["ParameterClauseSyntax",18,188],[", ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInitializerDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["initKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["optionalMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["genericParameterClause",1],[": ",17],["GenericParameterClauseSyntax",18],["?, ",17],["parameters",1],[": ",17],["ParameterClauseSyntax",18],[", ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?, ",17],["body",1],[": ",17],["CodeBlockSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]]},{"p":["SyntaxFactory","makeInternalKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInternalKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInternalKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeKeyPathBaseExpr(period:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeKeyPathBaseExpr",7],["(",17],["period",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["KeyPathBaseExprSyntax",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeKeyPathBaseExpr",7],["(",17],["period",1],[": ",17],["TokenSyntax",18],[") -> ",17],["KeyPathBaseExprSyntax",18]]},{"p":["SyntaxFactory","makeMemberDeclBlock(leftBrace:members:rightBrace:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberDeclBlock",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,444],[", ",17],["members",1],[": ",17],["MemberDeclListSyntax",18,145],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["MemberDeclBlockSyntax",18,182]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberDeclBlock",7],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["members",1],[": ",17],["MemberDeclListSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[") -> ",17],["MemberDeclBlockSyntax",18]]},{"p":["SyntaxFactory","makeObjcKeyPathExpr(keyPath:leftParen:name:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcKeyPathExpr",7],["(",17],["keyPath",1],[": ",17],["TokenSyntax",18,444],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["name",1],[": ",17],["ObjcNameSyntax",18,465],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcKeyPathExpr",7],["(",17],["keyPath",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["ObjcNameSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ObjcKeyPathExprSyntax",18]]},{"p":["SyntaxFactory","makeOperatorKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOperatorKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOperatorKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeOptionalPattern(subPattern:questionMark:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalPattern",7],["(",17],["subPattern",1],[": ",17],["PatternSyntax",18,453],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["OptionalPatternSyntax",18,186]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalPattern",7],["(",17],["subPattern",1],[": ",17],["PatternSyntax",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[") -> ",17],["OptionalPatternSyntax",18]]},{"p":["SyntaxFactory","makeParameterClause(leftParen:parameterList:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeParameterClause",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["parameterList",1],[": ",17],["FunctionParameterListSyntax",18,354],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ParameterClauseSyntax",18,188]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeParameterClause",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["parameterList",1],[": ",17],["FunctionParameterListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ParameterClauseSyntax",18]]},{"p":["SyntaxFactory","makePostfixOperator(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixOperator",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundAssertStmt(poundAssert:leftParen:condition:comma:message:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundAssertStmt",7],["(",17],["poundAssert",1],[": ",17],["TokenSyntax",18,444],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["condition",1],[": ",17],["ExprSyntax",18,441],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["message",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundAssertStmt",7],["(",17],["poundAssert",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExprSyntax",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["message",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundAssertStmtSyntax",18]]},{"p":["SyntaxFactory","makePoundColumnExpr(poundColumn:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundColumnExpr",7],["(",17],["poundColumn",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PoundColumnExprSyntax",18,192]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundColumnExpr",7],["(",17],["poundColumn",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundColumnExprSyntax",18]]},{"p":["SyntaxFactory","makePoundFileIDExpr(poundFileID:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileIDExpr",7],["(",17],["poundFileID",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PoundFileIDExprSyntax",18,194]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileIDExpr",7],["(",17],["poundFileID",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundFileIDExprSyntax",18]]},{"p":["SyntaxFactory","makeProtocolKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeProtocolKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeProtocolKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeRepeatWhileStmt(labelName:labelColon:repeatKeyword:body:whileKeyword:condition:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRepeatWhileStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,487],[", ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["condition",1],[": ",17],["ExprSyntax",18,441],[") -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRepeatWhileStmt",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[", ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExprSyntax",18],[") -> ",17],["RepeatWhileStmtSyntax",18]]},{"p":["SyntaxFactory","makeRethrowsKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRethrowsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRethrowsKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeRightAngleToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRightAngleToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRightAngleToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeRightBraceToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRightBraceToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRightBraceToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeRightParenToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRightParenToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRightParenToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSwitchCaseLabel(caseKeyword:caseItems:colon:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchCaseLabel",7],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["caseItems",1],[": ",17],["CaseItemListSyntax",18,59],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["SwitchCaseLabelSyntax",18,198]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchCaseLabel",7],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["caseItems",1],[": ",17],["CaseItemListSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[") -> ",17],["SwitchCaseLabelSyntax",18]]},{"p":["SyntaxFactory","makeWildcardKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeWildcardKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeWildcardKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeWildcardPattern(wildcard:typeAnnotation:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeWildcardPattern",7],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18,444],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18,157],["?) -> ",17],["WildcardPatternSyntax",18,200]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeWildcardPattern",7],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18],["?) -> ",17],["WildcardPatternSyntax",18]]},{"p":["SyntaxFactory","make__FILE__Keyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["make__FILE__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["make__FILE__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","make__LINE__Keyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["make__LINE__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["make__LINE__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeArrayElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ArrayElementSyntax",18,57],["]) -> ",17],["ArrayElementListSyntax",18,202]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeArrayElementList",7],["([",17],["ArrayElementSyntax",18],["]) -> ",17],["ArrayElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankCatchClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchClause",7],["() -> ",17],["CatchClauseSyntax",18,39]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchClause",7],["() -> ",17],["CatchClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureExpr",7],["() -> ",17],["ClosureExprSyntax",18,41]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureExpr",7],["() -> ",17],["ClosureExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankKeyPathExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankKeyPathExpr",7],["() -> ",17],["KeyPathExprSyntax",18,43]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankKeyPathExpr",7],["() -> ",17],["KeyPathExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankTernaryExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTernaryExpr",7],["() -> ",17],["TernaryExprSyntax",18,45]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTernaryExpr",7],["() -> ",17],["TernaryExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankUnknownDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownDecl",7],["() -> ",17],["UnknownDeclSyntax",18,47]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownDecl",7],["() -> ",17],["UnknownDeclSyntax",18]],"d":"MARK: Syntax Node Creation APIs"},{"p":["SyntaxFactory","makeBlankUnknownExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownExpr",7],["() -> ",17],["UnknownExprSyntax",18,48]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownExpr",7],["() -> ",17],["UnknownExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankUnknownStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownStmt",7],["() -> ",17],["UnknownStmtSyntax",18,49]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownStmt",7],["() -> ",17],["UnknownStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankUnknownType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownType",7],["() -> ",17],["UnknownTypeSyntax",18,50]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownType",7],["() -> ",17],["UnknownTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankWhereClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankWhereClause",7],["() -> ",17],["WhereClauseSyntax",18,51]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankWhereClause",7],["() -> ",17],["WhereClauseSyntax",18]]},{"p":["SyntaxFactory","makeClosureParamList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureParamList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ClosureParamSyntax",18,61],["]) -> ",17],["ClosureParamListSyntax",18,204]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureParamList",7],["([",17],["ClosureParamSyntax",18],["]) -> ",17],["ClosureParamListSyntax",18]]},{"p":["SyntaxFactory","makeClosureSignature(attributes:capture:input:asyncKeyword:throwsTok:output:inTok:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureSignature",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["capture",1],[": ",17],["ClosureCaptureSignatureSyntax",18,384],["?, ",17],["input",1],[": ",17],["Syntax",18,513],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["output",1],[": ",17],["ReturnClauseSyntax",18,87],["?, ",17],["inTok",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureSignature",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["capture",1],[": ",17],["ClosureCaptureSignatureSyntax",18],["?, ",17],["input",1],[": ",17],["Syntax",18],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18],["?, ",17],["output",1],[": ",17],["ReturnClauseSyntax",18],["?, ",17],["inTok",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ClosureSignatureSyntax",18]]},{"p":["SyntaxFactory","makeConditionElement(condition:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeConditionElement",7],["(",17],["condition",1],[": ",17],["Syntax",18,513],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ConditionElementSyntax",18,208]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeConditionElement",7],["(",17],["condition",1],[": ",17],["Syntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ConditionElementSyntax",18]]},{"p":["SyntaxFactory","makeDeclNameArgument(name:colon:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclNameArgument",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["DeclNameArgumentSyntax",18,210]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclNameArgument",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[") -> ",17],["DeclNameArgumentSyntax",18]]},{"p":["SyntaxFactory","makeDollarIdentifier(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDollarIdentifier",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDollarIdentifier",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeExtensionKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExtensionKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExtensionKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeFloatLiteralExpr(floatingDigits:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFloatLiteralExpr",7],["(",17],["floatingDigits",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["FloatLiteralExprSyntax",18,212]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFloatLiteralExpr",7],["(",17],["floatingDigits",1],[": ",17],["TokenSyntax",18],[") -> ",17],["FloatLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeFunctionCallExpr(calledExpression:leftParen:argumentList:rightParen:trailingClosure:additionalTrailingClosures:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionCallExpr",7],["(",17],["calledExpression",1],[": ",17],["ExprSyntax",18,441],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["argumentList",1],[": ",17],["TupleExprElementListSyntax",18,342],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["trailingClosure",1],[": ",17],["ClosureExprSyntax",18,41],["?, ",17],["additionalTrailingClosures",1],[": ",17],["MultipleTrailingClosureElementListSyntax",18,436],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionCallExpr",7],["(",17],["calledExpression",1],[": ",17],["ExprSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argumentList",1],[": ",17],["TupleExprElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["trailingClosure",1],[": ",17],["ClosureExprSyntax",18],["?, ",17],["additionalTrailingClosures",1],[": ",17],["MultipleTrailingClosureElementListSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]]},{"p":["SyntaxFactory","makeFunctionDeclName(name:arguments:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionDeclName",7],["(",17],["name",1],[": ",17],["Syntax",18,513],[", ",17],["arguments",1],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["FunctionDeclNameSyntax",18,216]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionDeclName",7],["(",17],["name",1],[": ",17],["Syntax",18],[", ",17],["arguments",1],[": ",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["FunctionDeclNameSyntax",18]]},{"p":["SyntaxFactory","makeGenericParameter(attributes:name:colon:inheritedType:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameter",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["inheritedType",1],[": ",17],["TypeSyntax",18,443],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GenericParameterSyntax",18,218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameter",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["inheritedType",1],[": ",17],["TypeSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["GenericParameterSyntax",18]]},{"p":["SyntaxFactory","makeGenericParameter(name:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameter",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["GenericParameterSyntax",18,218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameter",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],[") -> ",17],["GenericParameterSyntax",18]]},{"p":["SyntaxFactory","makeMemberAccessExpr(base:dot:name:declNameArguments:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberAccessExpr",7],["(",17],["base",1],[": ",17],["ExprSyntax",18,441],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18,444],[", ",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["MemberAccessExprSyntax",18,220]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberAccessExpr",7],["(",17],["base",1],[": ",17],["ExprSyntax",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["MemberAccessExprSyntax",18]]},{"p":["SyntaxFactory","makeObjcSelectorExpr(poundSelector:leftParen:kind:colon:name:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcSelectorExpr",7],["(",17],["poundSelector",1],[": ",17],["TokenSyntax",18,444],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["kind",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["name",1],[": ",17],["ExprSyntax",18,441],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjcSelectorExpr",7],["(",17],["poundSelector",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["kind",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["ExprSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ObjcSelectorExprSyntax",18]]},{"p":["SyntaxFactory","makePostfixUnaryExpr(expression:operatorToken:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixUnaryExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,441],[", ",17],["operatorToken",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PostfixUnaryExprSyntax",18,224]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixUnaryExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["operatorToken",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PostfixUnaryExprSyntax",18]]},{"p":["SyntaxFactory","makePoundElseKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundElseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundElseKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundFileKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundLineKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundLineKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundLineKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundWarningDecl(poundWarning:leftParen:message:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundWarningDecl",7],["(",17],["poundWarning",1],[": ",17],["TokenSyntax",18,444],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["message",1],[": ",17],["StringLiteralExprSyntax",18,272],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PoundWarningDeclSyntax",18,226]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundWarningDecl",7],["(",17],["poundWarning",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["message",1],[": ",17],["StringLiteralExprSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundWarningDeclSyntax",18]]},{"p":["SyntaxFactory","makeRegexLiteralExpr(regex:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRegexLiteralExpr",7],["(",17],["regex",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["RegexLiteralExprSyntax",18,228]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRegexLiteralExpr",7],["(",17],["regex",1],[": ",17],["TokenSyntax",18],[") -> ",17],["RegexLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeSingleQuoteToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSingleQuoteToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSingleQuoteToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeStringQuoteToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringQuoteToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringQuoteToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSubscriptKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSubscriptKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSubscriptKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeTupleExprElement(label:colon:expression:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleExprElement",7],["(",17],["label",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18,441],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleExprElementSyntax",18,230]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleExprElement",7],["(",17],["label",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["TupleExprElementSyntax",18]]},{"p":["SyntaxFactory","makeTupleTypeElement(name:colon:type:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElement",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["type",1],[": ",17],["TypeSyntax",18,443],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElement",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["type",1],[": ",17],["TypeSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]]},{"p":["SyntaxFactory","makeTupleTypeElement(type:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElement",7],["(",17],["type",1],[": ",17],["TypeSyntax",18,443],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElement",7],["(",17],["type",1],[": ",17],["TypeSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]]},{"p":["SyntaxFactory","makeTupleTypeElement(inOut:name:secondName:colon:type:ellipsis:initializer:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElement",7],["(",17],["inOut",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["name",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["type",1],[": ",17],["TypeSyntax",18,443],[", ",17],["ellipsis",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18,258],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElement",7],["(",17],["inOut",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["type",1],[": ",17],["TypeSyntax",18],[", ",17],["ellipsis",1],[": ",17],["TokenSyntax",18],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]]},{"p":["SyntaxFactory","makeTypealiasKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypealiasKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypealiasKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeAccessorParameter(leftParen:name:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorParameter",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["AccessorParameterSyntax",18,234]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessorParameter",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["AccessorParameterSyntax",18]]},{"p":["SyntaxFactory","makeAnyTypeIdentifier(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAnyTypeIdentifier",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TypeSyntax",18,443]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAnyTypeIdentifier",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TypeSyntax",18]]},{"p":["SyntaxFactory","makeAvailabilityEntry(label:colon:availabilityList:semicolon:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityEntry",7],["(",17],["label",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["availabilityList",1],[": ",17],["AvailabilitySpecListSyntax",18,326],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityEntry",7],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilityList",1],[": ",17],["AvailabilitySpecListSyntax",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],[") -> ",17],["AvailabilityEntrySyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessorDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorDecl",7],["() -> ",17],["AccessorDeclSyntax",18,53]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorDecl",7],["() -> ",17],["AccessorDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessorList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorList",7],["() -> ",17],["AccessorListSyntax",18,55]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorList",7],["() -> ",17],["AccessorListSyntax",18]]},{"p":["SyntaxFactory","makeBlankArrayElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayElement",7],["() -> ",17],["ArrayElementSyntax",18,57]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayElement",7],["() -> ",17],["ArrayElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankCaseItemList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCaseItemList",7],["() -> ",17],["CaseItemListSyntax",18,59]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCaseItemList",7],["() -> ",17],["CaseItemListSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureParam()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureParam",7],["() -> ",17],["ClosureParamSyntax",18,61]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureParam",7],["() -> ",17],["ClosureParamSyntax",18]]},{"p":["SyntaxFactory","makeBlankContinueStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankContinueStmt",7],["() -> ",17],["ContinueStmtSyntax",18,63]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankContinueStmt",7],["() -> ",17],["ContinueStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeclModifier()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclModifier",7],["() -> ",17],["DeclModifierSyntax",18,65]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclModifier",7],["() -> ",17],["DeclModifierSyntax",18]]},{"p":["SyntaxFactory","makeBlankEnumCaseDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCaseDecl",7],["() -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCaseDecl",7],["() -> ",17],["EnumCaseDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionDecl",7],["() -> ",17],["FunctionDeclSyntax",18,69]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionDecl",7],["() -> ",17],["FunctionDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionType",7],["() -> ",17],["FunctionTypeSyntax",18,71]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionType",7],["() -> ",17],["FunctionTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankIfConfigDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfConfigDecl",7],["() -> ",17],["IfConfigDeclSyntax",18,73]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfConfigDecl",7],["() -> ",17],["IfConfigDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankMetatypeType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMetatypeType",7],["() -> ",17],["MetatypeTypeSyntax",18,75]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMetatypeType",7],["() -> ",17],["MetatypeTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankModifierList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankModifierList",7],["() -> ",17],["ModifierListSyntax",18,77]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankModifierList",7],["() -> ",17],["ModifierListSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjCSelector()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjCSelector",7],["() -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjCSelector",7],["() -> ",17],["ObjCSelectorSyntax",18]]},{"p":["SyntaxFactory","makeBlankOperatorDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOperatorDecl",7],["() -> ",17],["OperatorDeclSyntax",18,81]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOperatorDecl",7],["() -> ",17],["OperatorDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankOptionalType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalType",7],["() -> ",17],["OptionalTypeSyntax",18,83]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalType",7],["() -> ",17],["OptionalTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankProtocolDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankProtocolDecl",7],["() -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankProtocolDecl",7],["() -> ",17],["ProtocolDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankReturnClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankReturnClause",7],["() -> ",17],["ReturnClauseSyntax",18,87]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankReturnClause",7],["() -> ",17],["ReturnClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankSequenceExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSequenceExpr",7],["() -> ",17],["SequenceExprSyntax",18,89]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSequenceExpr",7],["() -> ",17],["SequenceExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankSuperRefExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSuperRefExpr",7],["() -> ",17],["SuperRefExprSyntax",18,91]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSuperRefExpr",7],["() -> ",17],["SuperRefExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankTuplePattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTuplePattern",7],["() -> ",17],["TuplePatternSyntax",18,93]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTuplePattern",7],["() -> ",17],["TuplePatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankVariableDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankVariableDecl",7],["() -> ",17],["VariableDeclSyntax",18,95]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankVariableDecl",7],["() -> ",17],["VariableDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankVersionTuple()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankVersionTuple",7],["() -> ",17],["VersionTupleSyntax",18,97]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankVersionTuple",7],["() -> ",17],["VersionTupleSyntax",18]]},{"p":["SyntaxFactory","makeCodeBlockItemList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCodeBlockItemList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["CodeBlockItemSyntax",18,107],["]) -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCodeBlockItemList",7],["([",17],["CodeBlockItemSyntax",18],["]) -> ",17],["CodeBlockItemListSyntax",18]]},{"p":["SyntaxFactory","makeContextualKeyword(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeContextualKeyword",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeContextualKeyword",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeDeclNameArguments(leftParen:arguments:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclNameArguments",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["arguments",1],[": ",17],["DeclNameArgumentListSyntax",18,332],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["DeclNameArgumentsSyntax",18,240]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclNameArguments",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["DeclNameArgumentListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["DeclNameArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeDeinitializerDecl(attributes:modifiers:deinitKeyword:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeinitializerDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18,487],[") -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeinitializerDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["CodeBlockSyntax",18],[") -> ",17],["DeinitializerDeclSyntax",18]]},{"p":["SyntaxFactory","makeDictionaryElement(keyExpression:colon:valueExpression:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryElement",7],["(",17],["keyExpression",1],[": ",17],["ExprSyntax",18,441],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["valueExpression",1],[": ",17],["ExprSyntax",18,441],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DictionaryElementSyntax",18,244]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryElement",7],["(",17],["keyExpression",1],[": ",17],["ExprSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["valueExpression",1],[": ",17],["ExprSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["DictionaryElementSyntax",18]]},{"p":["SyntaxFactory","makeExpressionPattern(expression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExpressionPattern",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,441],[") -> ",17],["ExpressionPatternSyntax",18,246]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExpressionPattern",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["ExpressionPatternSyntax",18]]},{"p":["SyntaxFactory","makeExpressionSegment(backslash:delimiter:leftParen:expressions:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExpressionSegment",7],["(",17],["backslash",1],[": ",17],["TokenSyntax",18,444],[", ",17],["delimiter",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["expressions",1],[": ",17],["TupleExprElementListSyntax",18,342],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExpressionSegment",7],["(",17],["backslash",1],[": ",17],["TokenSyntax",18],[", ",17],["delimiter",1],[": ",17],["TokenSyntax",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["expressions",1],[": ",17],["TupleExprElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ExpressionSegmentSyntax",18]]},{"p":["SyntaxFactory","makeFunctionParameter(attributes:firstName:secondName:colon:type:ellipsis:defaultArgument:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionParameter",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["firstName",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["type",1],[": ",17],["TypeSyntax",18,443],["?, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["defaultArgument",1],[": ",17],["InitializerClauseSyntax",18,258],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionParameter",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["firstName",1],[": ",17],["TokenSyntax",18],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["type",1],[": ",17],["TypeSyntax",18],["?, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18],["?, ",17],["defaultArgument",1],[": ",17],["InitializerClauseSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]]},{"p":["SyntaxFactory","makeFunctionSignature(input:asyncOrReasyncKeyword:throwsOrRethrowsKeyword:output:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionSignature",7],["(",17],["input",1],[": ",17],["ParameterClauseSyntax",18,188],[", ",17],["asyncOrReasyncKeyword",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["output",1],[": ",17],["ReturnClauseSyntax",18,87],["?) -> ",17],["FunctionSignatureSyntax",18,252]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionSignature",7],["(",17],["input",1],[": ",17],["ParameterClauseSyntax",18],[", ",17],["asyncOrReasyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["output",1],[": ",17],["ReturnClauseSyntax",18],["?) -> ",17],["FunctionSignatureSyntax",18]]},{"p":["SyntaxFactory","makeIdentifierPattern(identifier:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifierPattern",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["IdentifierPatternSyntax",18,254]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIdentifierPattern",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[") -> ",17],["IdentifierPatternSyntax",18]]},{"p":["SyntaxFactory","makeInheritedTypeList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInheritedTypeList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["InheritedTypeSyntax",18,111],["]) -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInheritedTypeList",7],["([",17],["InheritedTypeSyntax",18],["]) -> ",17],["InheritedTypeListSyntax",18]]},{"p":["SyntaxFactory","makeInitializerClause(equal:value:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInitializerClause",7],["(",17],["equal",1],[": ",17],["TokenSyntax",18,444],[", ",17],["value",1],[": ",17],["ExprSyntax",18,441],[") -> ",17],["InitializerClauseSyntax",18,258]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInitializerClause",7],["(",17],["equal",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["ExprSyntax",18],[") -> ",17],["InitializerClauseSyntax",18]]},{"p":["SyntaxFactory","makeNonEmptyTokenList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeNonEmptyTokenList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,444],["]) -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeNonEmptyTokenList",7],["([",17],["TokenSyntax",18],["]) -> ",17],["NonEmptyTokenListSyntax",18]]},{"p":["SyntaxFactory","makeObjCSelectorPiece(name:colon:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjCSelectorPiece",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjCSelectorPieceSyntax",18,262]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjCSelectorPiece",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ObjCSelectorPieceSyntax",18]]},{"p":["SyntaxFactory","makeObjectLiteralExpr(identifier:leftParen:arguments:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeObjectLiteralExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["arguments",1],[": ",17],["TupleExprElementListSyntax",18,342],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeObjectLiteralExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["TupleExprElementListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ObjectLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makePoundEndifKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundEndifKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundEndifKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundErrorKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundErrorKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundErrorKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundFilePathExpr(poundFilePath:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFilePathExpr",7],["(",17],["poundFilePath",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PoundFilePathExprSyntax",18,266]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFilePathExpr",7],["(",17],["poundFilePath",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundFilePathExprSyntax",18]]},{"p":["SyntaxFactory","makePoundFunctionExpr(poundFunction:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFunctionExpr",7],["(",17],["poundFunction",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PoundFunctionExprSyntax",18,268]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFunctionExpr",7],["(",17],["poundFunction",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundFunctionExprSyntax",18]]},{"p":["SyntaxFactory","makePrefixPeriodToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixPeriodToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixPeriodToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeQualifiedDeclName(baseType:dot:name:arguments:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeQualifiedDeclName",7],["(",17],["baseType",1],[": ",17],["TypeSyntax",18,443],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["arguments",1],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["QualifiedDeclNameSyntax",18,270]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeQualifiedDeclName",7],["(",17],["baseType",1],[": ",17],["TypeSyntax",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["QualifiedDeclNameSyntax",18]]},{"p":["SyntaxFactory","makeStringLiteralExpr(openDelimiter:openQuote:segments:closeQuote:closeDelimiter:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteralExpr",7],["(",17],["openDelimiter",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["openQuote",1],[": ",17],["TokenSyntax",18,444],[", ",17],["segments",1],[": ",17],["StringLiteralSegmentsSyntax",18,360],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18,444],[", ",17],["closeDelimiter",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteralExpr",7],["(",17],["openDelimiter",1],[": ",17],["TokenSyntax",18],["?, ",17],["openQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["segments",1],[": ",17],["StringLiteralSegmentsSyntax",18],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["closeDelimiter",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["StringLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeStringLiteralExpr(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteralExpr",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteralExpr",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["StringLiteralExprSyntax",18]]},{"p":["SyntaxFactory","make__COLUMN__Keyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["make__COLUMN__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["make__COLUMN__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeAssociatedtypeDecl(attributes:modifiers:associatedtypeKeyword:identifier:inheritanceClause:initializer:genericWhereClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAssociatedtypeDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18,364],["?, ",17],["initializer",1],[": ",17],["TypeInitializerClauseSyntax",18,366],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAssociatedtypeDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["inheritanceClause",1],[": ",17],["TypeInheritanceClauseSyntax",18],["?, ",17],["initializer",1],[": ",17],["TypeInitializerClauseSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]]},{"p":["SyntaxFactory","makeBinaryOperatorExpr(operatorToken:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBinaryOperatorExpr",7],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["BinaryOperatorExprSyntax",18,276]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBinaryOperatorExpr",7],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18],[") -> ",17],["BinaryOperatorExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessorBlock()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorBlock",7],["() -> ",17],["AccessorBlockSyntax",18,99]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorBlock",7],["() -> ",17],["AccessorBlockSyntax",18]]},{"p":["SyntaxFactory","makeBlankAsTypePattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAsTypePattern",7],["() -> ",17],["AsTypePatternSyntax",18,101]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAsTypePattern",7],["() -> ",17],["AsTypePatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankAttributeList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAttributeList",7],["() -> ",17],["AttributeListSyntax",18,103]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAttributeList",7],["() -> ",17],["AttributeListSyntax",18]]},{"p":["SyntaxFactory","makeBlankCatchItemList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchItemList",7],["() -> ",17],["CatchItemListSyntax",18,105]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchItemList",7],["() -> ",17],["CatchItemListSyntax",18]]},{"p":["SyntaxFactory","makeBlankCodeBlockItem()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCodeBlockItem",7],["() -> ",17],["CodeBlockItemSyntax",18,107]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCodeBlockItem",7],["() -> ",17],["CodeBlockItemSyntax",18]]},{"p":["SyntaxFactory","makeBlankExtensionDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExtensionDecl",7],["() -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExtensionDecl",7],["() -> ",17],["ExtensionDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankInheritedType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInheritedType",7],["() -> ",17],["InheritedTypeSyntax",18,111]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInheritedType",7],["() -> ",17],["InheritedTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankIsTypePattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIsTypePattern",7],["() -> ",17],["IsTypePatternSyntax",18,113]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIsTypePattern",7],["() -> ",17],["IsTypePatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjcNamePiece()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcNamePiece",7],["() -> ",17],["ObjcNamePieceSyntax",18,115]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcNamePiece",7],["() -> ",17],["ObjcNamePieceSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundFileExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFileExpr",7],["() -> ",17],["PoundFileExprSyntax",18,117]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFileExpr",7],["() -> ",17],["PoundFileExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundLineExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundLineExpr",7],["() -> ",17],["PoundLineExprSyntax",18,119]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundLineExpr",7],["() -> ",17],["PoundLineExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankStringSegment()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStringSegment",7],["() -> ",17],["StringSegmentSyntax",18,121]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStringSegment",7],["() -> ",17],["StringSegmentSyntax",18]]},{"p":["SyntaxFactory","makeBlankSubscriptDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSubscriptDecl",7],["() -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSubscriptDecl",7],["() -> ",17],["SubscriptDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankSubscriptExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSubscriptExpr",7],["() -> ",17],["SubscriptExprSyntax",18,125]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSubscriptExpr",7],["() -> ",17],["SubscriptExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankTypealiasDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypealiasDecl",7],["() -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypealiasDecl",7],["() -> ",17],["TypealiasDeclSyntax",18]]},{"p":["SyntaxFactory","makeBooleanLiteralExpr(booleanLiteral:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBooleanLiteralExpr",7],["(",17],["booleanLiteral",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["BooleanLiteralExprSyntax",18,278]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBooleanLiteralExpr",7],["(",17],["booleanLiteral",1],[": ",17],["TokenSyntax",18],[") -> ",17],["BooleanLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeCapitalSelfKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCapitalSelfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCapitalSelfKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeClosureCaptureItem(specifier:name:assignToken:expression:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureCaptureItem",7],["(",17],["specifier",1],[": ",17],["TokenListSyntax",18,501],["?, ",17],["name",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["assignToken",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18,441],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureCaptureItem",7],["(",17],["specifier",1],[": ",17],["TokenListSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["assignToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["ClosureCaptureItemSyntax",18]]},{"p":["SyntaxFactory","makeElseIfContinuation(ifStatement:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeElseIfContinuation",7],["(",17],["ifStatement",1],[": ",17],["IfStmtSyntax",18,449],[") -> ",17],["ElseIfContinuationSyntax",18,282]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeElseIfContinuation",7],["(",17],["ifStatement",1],[": ",17],["IfStmtSyntax",18],[") -> ",17],["ElseIfContinuationSyntax",18]]},{"p":["SyntaxFactory","makeFallthroughKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFallthroughKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFallthroughKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeFileprivateKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFileprivateKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFileprivateKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeGenericRequirement(body:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericRequirement",7],["(",17],["body",1],[": ",17],["Syntax",18,513],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GenericRequirementSyntax",18,284]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericRequirement",7],["(",17],["body",1],[": ",17],["Syntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["GenericRequirementSyntax",18]]},{"p":["SyntaxFactory","makeGenericWhereClause(whereKeyword:requirementList:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericWhereClause",7],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["requirementList",1],[": ",17],["GenericRequirementListSyntax",18,380],[") -> ",17],["GenericWhereClauseSyntax",18,286]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericWhereClause",7],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["requirementList",1],[": ",17],["GenericRequirementListSyntax",18],[") -> ",17],["GenericWhereClauseSyntax",18]]},{"p":["SyntaxFactory","makeIfConfigClauseList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIfConfigClauseList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["IfConfigClauseSyntax",18,143],["]) -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIfConfigClauseList",7],["([",17],["IfConfigClauseSyntax",18],["]) -> ",17],["IfConfigClauseListSyntax",18]]},{"p":["SyntaxFactory","makeIntegerLiteralExpr(digits:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeIntegerLiteralExpr",7],["(",17],["digits",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["IntegerLiteralExprSyntax",18,290]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeIntegerLiteralExpr",7],["(",17],["digits",1],[": ",17],["TokenSyntax",18],[") -> ",17],["IntegerLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeMemberDeclListItem(decl:semicolon:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberDeclListItem",7],["(",17],["decl",1],[": ",17],["DeclSyntax",18,440],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["MemberDeclListItemSyntax",18,292]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberDeclListItem",7],["(",17],["decl",1],[": ",17],["DeclSyntax",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["MemberDeclListItemSyntax",18]]},{"p":["SyntaxFactory","makePatternBindingList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePatternBindingList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["PatternBindingSyntax",18,149],["]) -> ",17],["PatternBindingListSyntax",18,294]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePatternBindingList",7],["([",17],["PatternBindingSyntax",18],["]) -> ",17],["PatternBindingListSyntax",18]]},{"p":["SyntaxFactory","makePoundAssertKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundAssertKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundAssertKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundColumnKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundColumnKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundColumnKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundDsohandleExpr(poundDsohandle:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundDsohandleExpr",7],["(",17],["poundDsohandle",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PoundDsohandleExprSyntax",18,296]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundDsohandleExpr",7],["(",17],["poundDsohandle",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundDsohandleExprSyntax",18]]},{"p":["SyntaxFactory","makePoundElseifKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundElseifKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundElseifKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundFileIDKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileIDKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileIDKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrefixOperatorExpr(operatorToken:postfixExpression:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixOperatorExpr",7],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["postfixExpression",1],[": ",17],["ExprSyntax",18,441],[") -> ",17],["PrefixOperatorExprSyntax",18,298]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixOperatorExpr",7],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["postfixExpression",1],[": ",17],["ExprSyntax",18],[") -> ",17],["PrefixOperatorExprSyntax",18]]},{"p":["SyntaxFactory","makeRawStringDelimiter(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRawStringDelimiter",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRawStringDelimiter",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSelfTypeIdentifier(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSelfTypeIdentifier",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TypeSyntax",18,443]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSelfTypeIdentifier",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TypeSyntax",18]]},{"p":["SyntaxFactory","makeSwitchDefaultLabel(defaultKeyword:colon:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchDefaultLabel",7],["(",17],["defaultKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["SwitchDefaultLabelSyntax",18,300]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSwitchDefaultLabel",7],["(",17],["defaultKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[") -> ",17],["SwitchDefaultLabelSyntax",18]]},{"p":["SyntaxFactory","makeAccessLevelModifier(name:leftParen:modifier:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessLevelModifier",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["modifier",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessLevelModifierSyntax",18,302]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessLevelModifier",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["modifier",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["AccessLevelModifierSyntax",18]]},{"p":["SyntaxFactory","makeAccessPathComponent(name:trailingDot:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessPathComponent",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["trailingDot",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessPathComponentSyntax",18,304]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAccessPathComponent",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingDot",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["AccessPathComponentSyntax",18]]},{"p":["SyntaxFactory","makeBlankAssignmentExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAssignmentExpr",7],["() -> ",17],["AssignmentExprSyntax",18,129]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAssignmentExpr",7],["() -> ",17],["AssignmentExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankAttributedType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAttributedType",7],["() -> ",17],["AttributedTypeSyntax",18,131]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAttributedType",7],["() -> ",17],["AttributedTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankDictionaryExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryExpr",7],["() -> ",17],["DictionaryExprSyntax",18,133]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryExpr",7],["() -> ",17],["DictionaryExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankDictionaryType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryType",7],["() -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryType",7],["() -> ",17],["DictionaryTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankExpressionStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExpressionStmt",7],["() -> ",17],["ExpressionStmtSyntax",18,137]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExpressionStmt",7],["() -> ",17],["ExpressionStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankIdentifierExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIdentifierExpr",7],["() -> ",17],["IdentifierExprSyntax",18,139]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIdentifierExpr",7],["() -> ",17],["IdentifierExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankIdentifierList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIdentifierList",7],["() -> ",17],["IdentifierListSyntax",18,141]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIdentifierList",7],["() -> ",17],["IdentifierListSyntax",18]]},{"p":["SyntaxFactory","makeBlankIfConfigClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfConfigClause",7],["() -> ",17],["IfConfigClauseSyntax",18,143]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfConfigClause",7],["() -> ",17],["IfConfigClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankMemberDeclList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberDeclList",7],["() -> ",17],["MemberDeclListSyntax",18,145]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberDeclList",7],["() -> ",17],["MemberDeclListSyntax",18]]},{"p":["SyntaxFactory","makeBlankNilLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankNilLiteralExpr",7],["() -> ",17],["NilLiteralExprSyntax",18,147]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankNilLiteralExpr",7],["() -> ",17],["NilLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPatternBinding()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPatternBinding",7],["() -> ",17],["PatternBindingSyntax",18,149]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPatternBinding",7],["() -> ",17],["PatternBindingSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundErrorDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundErrorDecl",7],["() -> ",17],["PoundErrorDeclSyntax",18,151]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundErrorDecl",7],["() -> ",17],["PoundErrorDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankSpecializeExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSpecializeExpr",7],["() -> ",17],["SpecializeExprSyntax",18,153]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSpecializeExpr",7],["() -> ",17],["SpecializeExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankSwitchCaseList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchCaseList",7],["() -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchCaseList",7],["() -> ",17],["SwitchCaseListSyntax",18]]},{"p":["SyntaxFactory","makeBlankTypeAnnotation()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeAnnotation",7],["() -> ",17],["TypeAnnotationSyntax",18,157]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeAnnotation",7],["() -> ",17],["TypeAnnotationSyntax",18]]},{"p":["SyntaxFactory","makeBlankUnknownPattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownPattern",7],["() -> ",17],["UnknownPatternSyntax",18,159]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnknownPattern",7],["() -> ",17],["UnknownPatternSyntax",18]]},{"p":["SyntaxFactory","makeEnumCaseElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCaseElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["EnumCaseElementSyntax",18,168],["]) -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEnumCaseElementList",7],["([",17],["EnumCaseElementSyntax",18],["]) -> ",17],["EnumCaseElementListSyntax",18]]},{"p":["SyntaxFactory","makeGenericArgumentList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericArgumentList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["GenericArgumentSyntax",18,176],["]) -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericArgumentList",7],["([",17],["GenericArgumentSyntax",18],["]) -> ",17],["GenericArgumentListSyntax",18]]},{"p":["SyntaxFactory","makePostfixIfConfigExpr(base:config:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixIfConfigExpr",7],["(",17],["base",1],[": ",17],["ExprSyntax",18,441],["?, ",17],["config",1],[": ",17],["IfConfigDeclSyntax",18,73],[") -> ",17],["PostfixIfConfigExprSyntax",18,310]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixIfConfigExpr",7],["(",17],["base",1],[": ",17],["ExprSyntax",18],["?, ",17],["config",1],[": ",17],["IfConfigDeclSyntax",18],[") -> ",17],["PostfixIfConfigExprSyntax",18]]},{"p":["SyntaxFactory","makePoundKeyPathKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundKeyPathKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundKeyPathKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundSourceLocation(poundSourceLocation:leftParen:args:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSourceLocation",7],["(",17],["poundSourceLocation",1],[": ",17],["TokenSyntax",18,444],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["args",1],[": ",17],["PoundSourceLocationArgsSyntax",18,388],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PoundSourceLocationSyntax",18,312]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSourceLocation",7],["(",17],["poundSourceLocation",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["args",1],[": ",17],["PoundSourceLocationArgsSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundSourceLocationSyntax",18]]},{"p":["SyntaxFactory","makePoundWarningKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundWarningKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundWarningKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupDecl(attributes:modifiers:precedencegroupKeyword:identifier:leftBrace:groupAttributes:rightBrace:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18,77],["?, ",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,444],[", ",17],["groupAttributes",1],[": ",17],["PrecedenceGroupAttributeListSyntax",18,424],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupDecl",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["modifiers",1],[": ",17],["ModifierListSyntax",18],["?, ",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["groupAttributes",1],[": ",17],["PrecedenceGroupAttributeListSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PrecedenceGroupDeclSyntax",18]]},{"p":["SyntaxFactory","makeSameTypeRequirement(leftTypeIdentifier:equalityToken:rightTypeIdentifier:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSameTypeRequirement",7],["(",17],["leftTypeIdentifier",1],[": ",17],["TypeSyntax",18,443],[", ",17],["equalityToken",1],[": ",17],["TokenSyntax",18,444],[", ",17],["rightTypeIdentifier",1],[": ",17],["TypeSyntax",18,443],[") -> ",17],["SameTypeRequirementSyntax",18,316]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSameTypeRequirement",7],["(",17],["leftTypeIdentifier",1],[": ",17],["TypeSyntax",18],[", ",17],["equalityToken",1],[": ",17],["TokenSyntax",18],[", ",17],["rightTypeIdentifier",1],[": ",17],["TypeSyntax",18],[") -> ",17],["SameTypeRequirementSyntax",18]]},{"p":["SyntaxFactory","makeTargetFunctionEntry(label:colon:delcname:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTargetFunctionEntry",7],["(",17],["label",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["delcname",1],[": ",17],["DeclNameSyntax",18,459],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TargetFunctionEntrySyntax",18,318]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTargetFunctionEntry",7],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["delcname",1],[": ",17],["DeclNameSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["TargetFunctionEntrySyntax",18]]},{"p":["SyntaxFactory","makeTuplePatternElement(labelName:labelColon:pattern:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTuplePatternElement",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["pattern",1],[": ",17],["PatternSyntax",18,453],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TuplePatternElementSyntax",18,320]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTuplePatternElement",7],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["TuplePatternElementSyntax",18]]},{"p":["SyntaxFactory","makeValueBindingPattern(letOrVarKeyword:valuePattern:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeValueBindingPattern",7],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["valuePattern",1],[": ",17],["PatternSyntax",18,453],[") -> ",17],["ValueBindingPatternSyntax",18,322]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeValueBindingPattern",7],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["valuePattern",1],[": ",17],["PatternSyntax",18],[") -> ",17],["ValueBindingPatternSyntax",18]]},{"p":["SyntaxFactory","make__FUNCTION__Keyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["make__FUNCTION__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["make__FUNCTION__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeAvailabilityArgument(entry:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityArgument",7],["(",17],["entry",1],[": ",17],["Syntax",18,513],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AvailabilityArgumentSyntax",18,324]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityArgument",7],["(",17],["entry",1],[": ",17],["Syntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityArgumentSyntax",18]]},{"p":["SyntaxFactory","makeAvailabilitySpecList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilitySpecList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["AvailabilityArgumentSyntax",18,324],["]) -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilitySpecList",7],["([",17],["AvailabilityArgumentSyntax",18],["]) -> ",17],["AvailabilitySpecListSyntax",18]]},{"p":["SyntaxFactory","makeBlankCatchClauseList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchClauseList",7],["() -> ",17],["CatchClauseListSyntax",18,160]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCatchClauseList",7],["() -> ",17],["CatchClauseListSyntax",18]]},{"p":["SyntaxFactory","makeBlankCompositionType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCompositionType",7],["() -> ",17],["CompositionTypeSyntax",18,162]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCompositionType",7],["() -> ",17],["CompositionTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankCustomAttribute()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCustomAttribute",7],["() -> ",17],["CustomAttributeSyntax",18,164]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCustomAttribute",7],["() -> ",17],["CustomAttributeSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeclarationStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclarationStmt",7],["() -> ",17],["DeclarationStmtSyntax",18,166]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclarationStmt",7],["() -> ",17],["DeclarationStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankEnumCaseElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCaseElement",7],["() -> ",17],["EnumCaseElementSyntax",18,168]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCaseElement",7],["() -> ",17],["EnumCaseElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankEnumCasePattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCasePattern",7],["() -> ",17],["EnumCasePatternSyntax",18,170]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCasePattern",7],["() -> ",17],["EnumCasePatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankFallthroughStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFallthroughStmt",7],["() -> ",17],["FallthroughStmtSyntax",18,172]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFallthroughStmt",7],["() -> ",17],["FallthroughStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankForcedValueExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankForcedValueExpr",7],["() -> ",17],["ForcedValueExprSyntax",18,174]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankForcedValueExpr",7],["() -> ",17],["ForcedValueExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericArgument()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericArgument",7],["() -> ",17],["GenericArgumentSyntax",18,176]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericArgument",7],["() -> ",17],["GenericArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBlankInitializerDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInitializerDecl",7],["() -> ",17],["InitializerDeclSyntax",18,178]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInitializerDecl",7],["() -> ",17],["InitializerDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankKeyPathBaseExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExprSyntax",18,180]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankMemberDeclBlock()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberDeclBlock",7],["() -> ",17],["MemberDeclBlockSyntax",18,182]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberDeclBlock",7],["() -> ",17],["MemberDeclBlockSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjcKeyPathExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankOptionalPattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalPattern",7],["() -> ",17],["OptionalPatternSyntax",18,186]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalPattern",7],["() -> ",17],["OptionalPatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankParameterClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankParameterClause",7],["() -> ",17],["ParameterClauseSyntax",18,188]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankParameterClause",7],["() -> ",17],["ParameterClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundAssertStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundAssertStmt",7],["() -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundAssertStmt",7],["() -> ",17],["PoundAssertStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundColumnExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundColumnExpr",7],["() -> ",17],["PoundColumnExprSyntax",18,192]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundColumnExpr",7],["() -> ",17],["PoundColumnExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundFileIDExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExprSyntax",18,194]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankRepeatWhileStmt()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmtSyntax",18]]},{"p":["SyntaxFactory","makeBlankSwitchCaseLabel()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabelSyntax",18,198]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabelSyntax",18]]},{"p":["SyntaxFactory","makeBlankWildcardPattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankWildcardPattern",7],["() -> ",17],["WildcardPatternSyntax",18,200]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankWildcardPattern",7],["() -> ",17],["WildcardPatternSyntax",18]]},{"p":["SyntaxFactory","makeClassRestrictionType(classKeyword:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClassRestrictionType",7],["(",17],["classKeyword",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ClassRestrictionTypeSyntax",18,328]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClassRestrictionType",7],["(",17],["classKeyword",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ClassRestrictionTypeSyntax",18]]},{"p":["SyntaxFactory","makeConditionElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeConditionElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ConditionElementSyntax",18,208],["]) -> ",17],["ConditionElementListSyntax",18,330]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeConditionElementList",7],["([",17],["ConditionElementSyntax",18],["]) -> ",17],["ConditionElementListSyntax",18]]},{"p":["SyntaxFactory","makeDeclNameArgumentList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclNameArgumentList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["DeclNameArgumentSyntax",18,210],["]) -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDeclNameArgumentList",7],["([",17],["DeclNameArgumentSyntax",18],["]) -> ",17],["DeclNameArgumentListSyntax",18]]},{"p":["SyntaxFactory","makeExclamationMarkToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeExclamationMarkToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeExclamationMarkToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeGenericParameterList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameterList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["GenericParameterSyntax",18,218],["]) -> ",17],["GenericParameterListSyntax",18,334]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameterList",7],["([",17],["GenericParameterSyntax",18],["]) -> ",17],["GenericParameterListSyntax",18]]},{"p":["SyntaxFactory","makeMemberTypeIdentifier(baseType:period:name:genericArgumentClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberTypeIdentifier",7],["(",17],["baseType",1],[": ",17],["TypeSyntax",18,443],[", ",17],["period",1],[": ",17],["TokenSyntax",18,444],[", ",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18,356],["?) -> ",17],["MemberTypeIdentifierSyntax",18,336]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMemberTypeIdentifier",7],["(",17],["baseType",1],[": ",17],["TypeSyntax",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["MemberTypeIdentifierSyntax",18]]},{"p":["SyntaxFactory","makeOptionalChainingExpr(expression:questionMark:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalChainingExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18,441],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["OptionalChainingExprSyntax",18,338]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalChainingExpr",7],["(",17],["expression",1],[": ",17],["ExprSyntax",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[") -> ",17],["OptionalChainingExprSyntax",18]]},{"p":["SyntaxFactory","makePoundFilePathKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFilePathKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFilePathKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundFunctionKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFunctionKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFunctionKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundSelectorKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSelectorKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSelectorKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrefixAmpersandToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixAmpersandToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrefixAmpersandToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeSimpleTypeIdentifier(name:genericArgumentClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSimpleTypeIdentifier",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18,356],["?) -> ",17],["SimpleTypeIdentifierSyntax",18,340]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSimpleTypeIdentifier",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["SimpleTypeIdentifierSyntax",18]]},{"p":["SyntaxFactory","makeSpacedBinaryOperator(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSpacedBinaryOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSpacedBinaryOperator",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeTupleExprElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleExprElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TupleExprElementSyntax",18,230],["]) -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleExprElementList",7],["([",17],["TupleExprElementSyntax",18],["]) -> ",17],["TupleExprElementListSyntax",18]]},{"p":["SyntaxFactory","makeTupleTypeElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TupleTypeElementSyntax",18,232],["]) -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTupleTypeElementList",7],["([",17],["TupleTypeElementSyntax",18],["]) -> ",17],["TupleTypeElementListSyntax",18]]},{"p":["SyntaxFactory","makeAssociatedtypeKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAssociatedtypeKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAssociatedtypeKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]],"d":"MARK: Token Creation APIs"},{"p":["SyntaxFactory","makeAvailabilityCondition(poundAvailableKeyword:leftParen:availabilitySpec:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityCondition",7],["(",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["availabilitySpec",1],[": ",17],["AvailabilitySpecListSyntax",18,326],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["AvailabilityConditionSyntax",18,346]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityCondition",7],["(",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilitySpec",1],[": ",17],["AvailabilitySpecListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["AvailabilityConditionSyntax",18]]},{"p":["SyntaxFactory","makeBlankArrayElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayElementList",7],["() -> ",17],["ArrayElementListSyntax",18,202]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankArrayElementList",7],["() -> ",17],["ArrayElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureParamList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureParamList",7],["() -> ",17],["ClosureParamListSyntax",18,204]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureParamList",7],["() -> ",17],["ClosureParamListSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureSignature()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureSignature",7],["() -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureSignature",7],["() -> ",17],["ClosureSignatureSyntax",18]]},{"p":["SyntaxFactory","makeBlankConditionElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConditionElement",7],["() -> ",17],["ConditionElementSyntax",18,208]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConditionElement",7],["() -> ",17],["ConditionElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeclNameArgument()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclNameArgument",7],["() -> ",17],["DeclNameArgumentSyntax",18,210]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclNameArgument",7],["() -> ",17],["DeclNameArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBlankFloatLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExprSyntax",18,212]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionCallExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionCallExpr",7],["() -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionCallExpr",7],["() -> ",17],["FunctionCallExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionDeclName()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionDeclName",7],["() -> ",17],["FunctionDeclNameSyntax",18,216]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionDeclName",7],["() -> ",17],["FunctionDeclNameSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericParameter()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericParameter",7],["() -> ",17],["GenericParameterSyntax",18,218]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericParameter",7],["() -> ",17],["GenericParameterSyntax",18]]},{"p":["SyntaxFactory","makeBlankMemberAccessExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberAccessExpr",7],["() -> ",17],["MemberAccessExprSyntax",18,220]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberAccessExpr",7],["() -> ",17],["MemberAccessExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjcSelectorExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPostfixUnaryExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExprSyntax",18,224]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundWarningDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundWarningDecl",7],["() -> ",17],["PoundWarningDeclSyntax",18,226]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundWarningDecl",7],["() -> ",17],["PoundWarningDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankRegexLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExprSyntax",18,228]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankTupleExprElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleExprElement",7],["() -> ",17],["TupleExprElementSyntax",18,230]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleExprElement",7],["() -> ",17],["TupleExprElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankTupleTypeElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleTypeElement",7],["() -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleTypeElement",7],["() -> ",17],["TupleTypeElementSyntax",18]]},{"p":["SyntaxFactory","makeDictionaryElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["DictionaryElementSyntax",18,244],["]) -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDictionaryElementList",7],["([",17],["DictionaryElementSyntax",18],["]) -> ",17],["DictionaryElementListSyntax",18]]},{"p":["SyntaxFactory","makeDiscardAssignmentExpr(wildcard:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDiscardAssignmentExpr",7],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["DiscardAssignmentExprSyntax",18,350]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDiscardAssignmentExpr",7],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18],[") -> ",17],["DiscardAssignmentExprSyntax",18]]},{"p":["SyntaxFactory","makeEditorPlaceholderExpr(identifier:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeEditorPlaceholderExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["EditorPlaceholderExprSyntax",18,352]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeEditorPlaceholderExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[") -> ",17],["EditorPlaceholderExprSyntax",18]]},{"p":["SyntaxFactory","makeFunctionParameterList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionParameterList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["FunctionParameterSyntax",18,250],["]) -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeFunctionParameterList",7],["([",17],["FunctionParameterSyntax",18],["]) -> ",17],["FunctionParameterListSyntax",18]]},{"p":["SyntaxFactory","makeGenericArgumentClause(leftAngleBracket:arguments:rightAngleBracket:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericArgumentClause",7],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,444],[", ",17],["arguments",1],[": ",17],["GenericArgumentListSyntax",18,308],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["GenericArgumentClauseSyntax",18,356]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericArgumentClause",7],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["GenericArgumentListSyntax",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[") -> ",17],["GenericArgumentClauseSyntax",18]]},{"p":["SyntaxFactory","makePoundAvailableKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundAvailableKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundAvailableKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundDsohandleKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundDsohandleKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundDsohandleKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrimaryAssociatedType(attributes:name:colon:inheritedType:initializer:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrimaryAssociatedType",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18,103],["?, ",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["inheritedType",1],[": ",17],["TypeSyntax",18,443],["?, ",17],["initializer",1],[": ",17],["TypeInitializerClauseSyntax",18,366],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,358]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrimaryAssociatedType",7],["(",17],["attributes",1],[": ",17],["AttributeListSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["inheritedType",1],[": ",17],["TypeSyntax",18],["?, ",17],["initializer",1],[": ",17],["TypeInitializerClauseSyntax",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]]},{"p":["SyntaxFactory","makeStringLiteralSegments(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteralSegments",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["Syntax",18,513],["]) -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringLiteralSegments",7],["([",17],["Syntax",18],["]) -> ",17],["StringLiteralSegmentsSyntax",18]]},{"p":["SyntaxFactory","makeSymbolicReferenceExpr(identifier:genericArgumentClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSymbolicReferenceExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,444],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18,356],["?) -> ",17],["SymbolicReferenceExprSyntax",18,362]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSymbolicReferenceExpr",7],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["SymbolicReferenceExprSyntax",18]]},{"p":["SyntaxFactory","makeTypeInheritanceClause(colon:inheritedTypeCollection:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeInheritanceClause",7],["(",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["inheritedTypeCollection",1],[": ",17],["InheritedTypeListSyntax",18,256],[") -> ",17],["TypeInheritanceClauseSyntax",18,364]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeInheritanceClause",7],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["inheritedTypeCollection",1],[": ",17],["InheritedTypeListSyntax",18],[") -> ",17],["TypeInheritanceClauseSyntax",18]]},{"p":["SyntaxFactory","makeTypeInitializerClause(equal:value:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeInitializerClause",7],["(",17],["equal",1],[": ",17],["TokenSyntax",18,444],[", ",17],["value",1],[": ",17],["TypeSyntax",18,443],[") -> ",17],["TypeInitializerClauseSyntax",18,366]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTypeInitializerClause",7],["(",17],["equal",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["TypeSyntax",18],[") -> ",17],["TypeInitializerClauseSyntax",18]]},{"p":["SyntaxFactory","makeUnresolvedPatternExpr(pattern:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeUnresolvedPatternExpr",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18,453],[") -> ",17],["UnresolvedPatternExprSyntax",18,368]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeUnresolvedPatternExpr",7],["(",17],["pattern",1],[": ",17],["PatternSyntax",18],[") -> ",17],["UnresolvedPatternExprSyntax",18]]},{"p":["SyntaxFactory","make__DSO_HANDLE__Keyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["make__DSO_HANDLE__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["make__DSO_HANDLE__Keyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessorParameter()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorParameter",7],["() -> ",17],["AccessorParameterSyntax",18,234]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessorParameter",7],["() -> ",17],["AccessorParameterSyntax",18]]},{"p":["SyntaxFactory","makeBlankAvailabilityEntry()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityEntry",7],["() -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityEntry",7],["() -> ",17],["AvailabilityEntrySyntax",18]]},{"p":["SyntaxFactory","makeBlankCodeBlockItemList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCodeBlockItemList",7],["() -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCodeBlockItemList",7],["() -> ",17],["CodeBlockItemListSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeclNameArguments()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclNameArguments",7],["() -> ",17],["DeclNameArgumentsSyntax",18,240]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclNameArguments",7],["() -> ",17],["DeclNameArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeinitializerDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeinitializerDecl",7],["() -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeinitializerDecl",7],["() -> ",17],["DeinitializerDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankDictionaryElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryElement",7],["() -> ",17],["DictionaryElementSyntax",18,244]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryElement",7],["() -> ",17],["DictionaryElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankExpressionPattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExpressionPattern",7],["() -> ",17],["ExpressionPatternSyntax",18,246]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExpressionPattern",7],["() -> ",17],["ExpressionPatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankExpressionSegment()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExpressionSegment",7],["() -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankExpressionSegment",7],["() -> ",17],["ExpressionSegmentSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionParameter()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionParameter",7],["() -> ",17],["FunctionParameterSyntax",18,250]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionParameter",7],["() -> ",17],["FunctionParameterSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionSignature()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionSignature",7],["() -> ",17],["FunctionSignatureSyntax",18,252]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionSignature",7],["() -> ",17],["FunctionSignatureSyntax",18]]},{"p":["SyntaxFactory","makeBlankIdentifierPattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIdentifierPattern",7],["() -> ",17],["IdentifierPatternSyntax",18,254]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIdentifierPattern",7],["() -> ",17],["IdentifierPatternSyntax",18]]},{"p":["SyntaxFactory","makeBlankInheritedTypeList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInheritedTypeList",7],["() -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInheritedTypeList",7],["() -> ",17],["InheritedTypeListSyntax",18]]},{"p":["SyntaxFactory","makeBlankInitializerClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInitializerClause",7],["() -> ",17],["InitializerClauseSyntax",18,258]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankInitializerClause",7],["() -> ",17],["InitializerClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankNonEmptyTokenList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenListSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjCSelectorPiece()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPieceSyntax",18,262]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPieceSyntax",18]]},{"p":["SyntaxFactory","makeBlankObjectLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundFilePathExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExprSyntax",18,266]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundFunctionExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExprSyntax",18,268]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankQualifiedDeclName()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankQualifiedDeclName",7],["() -> ",17],["QualifiedDeclNameSyntax",18,270]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankQualifiedDeclName",7],["() -> ",17],["QualifiedDeclNameSyntax",18]]},{"p":["SyntaxFactory","makeBlankStringLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStringLiteralExpr",7],["() -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStringLiteralExpr",7],["() -> ",17],["StringLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeClosureCaptureItemList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureCaptureItemList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ClosureCaptureItemSyntax",18,280],["]) -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureCaptureItemList",7],["([",17],["ClosureCaptureItemSyntax",18],["]) -> ",17],["ClosureCaptureItemListSyntax",18]]},{"p":["SyntaxFactory","makeCompositionTypeElement(type:ampersand:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCompositionTypeElement",7],["(",17],["type",1],[": ",17],["TypeSyntax",18,443],[", ",17],["ampersand",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CompositionTypeElementSyntax",18,372]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCompositionTypeElement",7],["(",17],["type",1],[": ",17],["TypeSyntax",18],[", ",17],["ampersand",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["CompositionTypeElementSyntax",18]]},{"p":["SyntaxFactory","makeConformanceRequirement(leftTypeIdentifier:colon:rightTypeIdentifier:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeConformanceRequirement",7],["(",17],["leftTypeIdentifier",1],[": ",17],["TypeSyntax",18,443],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["rightTypeIdentifier",1],[": ",17],["TypeSyntax",18,443],[") -> ",17],["ConformanceRequirementSyntax",18,374]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeConformanceRequirement",7],["(",17],["leftTypeIdentifier",1],[": ",17],["TypeSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["rightTypeIdentifier",1],[": ",17],["TypeSyntax",18],[") -> ",17],["ConformanceRequirementSyntax",18]]},{"p":["SyntaxFactory","makeDifferentiabilityParam(parameter:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParam",7],["(",17],["parameter",1],[": ",17],["Syntax",18,513],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DifferentiabilityParamSyntax",18,376]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParam",7],["(",17],["parameter",1],[": ",17],["Syntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["DifferentiabilityParamSyntax",18]]},{"p":["SyntaxFactory","makeGenericParameterClause(leftAngleBracket:genericParameterList:rightAngleBracket:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameterClause",7],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,444],[", ",17],["genericParameterList",1],[": ",17],["GenericParameterListSyntax",18,334],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["GenericParameterClauseSyntax",18,378]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericParameterClause",7],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterList",1],[": ",17],["GenericParameterListSyntax",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[") -> ",17],["GenericParameterClauseSyntax",18]]},{"p":["SyntaxFactory","makeGenericRequirementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericRequirementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["GenericRequirementSyntax",18,284],["]) -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeGenericRequirementList",7],["([",17],["GenericRequirementSyntax",18],["]) -> ",17],["GenericRequirementListSyntax",18]]},{"p":["SyntaxFactory","makeInfixQuestionMarkToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeInfixQuestionMarkToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeInfixQuestionMarkToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeLabeledSpecializeEntry(label:colon:value:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeLabeledSpecializeEntry",7],["(",17],["label",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["value",1],[": ",17],["TokenSyntax",18,444],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["LabeledSpecializeEntrySyntax",18,382]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeLabeledSpecializeEntry",7],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["LabeledSpecializeEntrySyntax",18]]},{"p":["SyntaxFactory","makeLeftSquareBracketToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftSquareBracketToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeLeftSquareBracketToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrecedencegroupKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedencegroupKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedencegroupKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeUnspacedBinaryOperator(_:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeUnspacedBinaryOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeUnspacedBinaryOperator",7],["(",17],["String",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBlankAssociatedtypeDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankBinaryOperatorExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExprSyntax",18,276]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankBooleanLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExprSyntax",18,278]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureCaptureItem()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItemSyntax",18]]},{"p":["SyntaxFactory","makeBlankElseIfContinuation()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankElseIfContinuation",7],["() -> ",17],["ElseIfContinuationSyntax",18,282]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankElseIfContinuation",7],["() -> ",17],["ElseIfContinuationSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericRequirement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericRequirement",7],["() -> ",17],["GenericRequirementSyntax",18,284]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericRequirement",7],["() -> ",17],["GenericRequirementSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericWhereClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericWhereClause",7],["() -> ",17],["GenericWhereClauseSyntax",18,286]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericWhereClause",7],["() -> ",17],["GenericWhereClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankIfConfigClauseList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfConfigClauseList",7],["() -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIfConfigClauseList",7],["() -> ",17],["IfConfigClauseListSyntax",18]]},{"p":["SyntaxFactory","makeBlankIntegerLiteralExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExprSyntax",18,290]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankMemberDeclListItem()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberDeclListItem",7],["() -> ",17],["MemberDeclListItemSyntax",18,292]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberDeclListItem",7],["() -> ",17],["MemberDeclListItemSyntax",18]]},{"p":["SyntaxFactory","makeBlankPatternBindingList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPatternBindingList",7],["() -> ",17],["PatternBindingListSyntax",18,294]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPatternBindingList",7],["() -> ",17],["PatternBindingListSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundDsohandleExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExprSyntax",18,296]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrefixOperatorExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExprSyntax",18,298]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankSwitchDefaultLabel()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabelSyntax",18,300]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabelSyntax",18]]},{"p":["SyntaxFactory","makeClosureCaptureSignature(leftSquare:items:rightSquare:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureCaptureSignature",7],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,444],[", ",17],["items",1],[": ",17],["ClosureCaptureItemListSyntax",18,370],["?, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ClosureCaptureSignatureSyntax",18,384]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClosureCaptureSignature",7],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["items",1],[": ",17],["ClosureCaptureItemListSyntax",18],["?, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ClosureCaptureSignatureSyntax",18]]},{"p":["SyntaxFactory","makeDifferentiabilityParams(leftParen:diffParams:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParams",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["diffParams",1],[": ",17],["DifferentiabilityParamListSyntax",18,408],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["DifferentiabilityParamsSyntax",18,386]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParams",7],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["diffParams",1],[": ",17],["DifferentiabilityParamListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["DifferentiabilityParamsSyntax",18]]},{"p":["SyntaxFactory","makePoundFileLiteralKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileLiteralKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundFileLiteralKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundSourceLocationArgs(fileArgLabel:fileArgColon:fileName:comma:lineArgLabel:lineArgColon:lineNumber:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSourceLocationArgs",7],["(",17],["fileArgLabel",1],[": ",17],["TokenSyntax",18,444],[", ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["fileName",1],[": ",17],["TokenSyntax",18,444],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,444],[", ",17],["lineArgLabel",1],[": ",17],["TokenSyntax",18,444],[", ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["lineNumber",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PoundSourceLocationArgsSyntax",18,388]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSourceLocationArgs",7],["(",17],["fileArgLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["fileName",1],[": ",17],["TokenSyntax",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],[", ",17],["lineArgLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["lineNumber",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PoundSourceLocationArgsSyntax",18]]},{"p":["SyntaxFactory","makePoundUnavailableKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundUnavailableKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundUnavailableKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupNameList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupNameList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["PrecedenceGroupNameElementSyntax",18,412],["]) -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupNameList",7],["([",17],["PrecedenceGroupNameElementSyntax",18],["]) -> ",17],["PrecedenceGroupNameListSyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupRelation(higherThanOrLowerThan:colon:otherNames:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupRelation",7],["(",17],["higherThanOrLowerThan",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["otherNames",1],[": ",17],["PrecedenceGroupNameListSyntax",18,390],[") -> ",17],["PrecedenceGroupRelationSyntax",18,392]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupRelation",7],["(",17],["higherThanOrLowerThan",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["otherNames",1],[": ",17],["PrecedenceGroupNameListSyntax",18],[") -> ",17],["PrecedenceGroupRelationSyntax",18]]},{"p":["SyntaxFactory","makeRightSquareBracketToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeRightSquareBracketToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeRightSquareBracketToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeTuplePatternElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeTuplePatternElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TuplePatternElementSyntax",18,320],["]) -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeTuplePatternElementList",7],["([",17],["TuplePatternElementSyntax",18],["]) -> ",17],["TuplePatternElementListSyntax",18]]},{"p":["SyntaxFactory","makeUnavailabilityCondition(poundUnavailableKeyword:leftParen:availabilitySpec:rightParen:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeUnavailabilityCondition",7],["(",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,444],[", ",17],["availabilitySpec",1],[": ",17],["AvailabilitySpecListSyntax",18,326],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["UnavailabilityConditionSyntax",18,396]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeUnavailabilityCondition",7],["(",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilitySpec",1],[": ",17],["AvailabilitySpecListSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[") -> ",17],["UnavailabilityConditionSyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessLevelModifier()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessLevelModifier",7],["() -> ",17],["AccessLevelModifierSyntax",18,302]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessLevelModifier",7],["() -> ",17],["AccessLevelModifierSyntax",18]]},{"p":["SyntaxFactory","makeBlankAccessPathComponent()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessPathComponent",7],["() -> ",17],["AccessPathComponentSyntax",18,304]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAccessPathComponent",7],["() -> ",17],["AccessPathComponentSyntax",18]]},{"p":["SyntaxFactory","makeBlankEnumCaseElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCaseElementList",7],["() -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEnumCaseElementList",7],["() -> ",17],["EnumCaseElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericArgumentList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericArgumentList",7],["() -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericArgumentList",7],["() -> ",17],["GenericArgumentListSyntax",18]]},{"p":["SyntaxFactory","makeBlankPostfixIfConfigExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExprSyntax",18,310]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundSourceLocation()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundSourceLocation",7],["() -> ",17],["PoundSourceLocationSyntax",18,312]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundSourceLocation",7],["() -> ",17],["PoundSourceLocationSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupDecl()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDeclSyntax",18]]},{"p":["SyntaxFactory","makeBlankSameTypeRequirement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSameTypeRequirement",7],["() -> ",17],["SameTypeRequirementSyntax",18,316]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSameTypeRequirement",7],["() -> ",17],["SameTypeRequirementSyntax",18]]},{"p":["SyntaxFactory","makeBlankTargetFunctionEntry()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntrySyntax",18,318]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntrySyntax",18]]},{"p":["SyntaxFactory","makeBlankTuplePatternElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTuplePatternElement",7],["() -> ",17],["TuplePatternElementSyntax",18,320]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTuplePatternElement",7],["() -> ",17],["TuplePatternElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankValueBindingPattern()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankValueBindingPattern",7],["() -> ",17],["ValueBindingPatternSyntax",18,322]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankValueBindingPattern",7],["() -> ",17],["ValueBindingPatternSyntax",18]]},{"p":["SyntaxFactory","makeMatchingPatternCondition(caseKeyword:pattern:typeAnnotation:initializer:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMatchingPatternCondition",7],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["pattern",1],[": ",17],["PatternSyntax",18,453],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18,157],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18,258],[") -> ",17],["MatchingPatternConditionSyntax",18,398]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMatchingPatternCondition",7],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18],[") -> ",17],["MatchingPatternConditionSyntax",18]]},{"p":["SyntaxFactory","makeOptionalBindingCondition(letOrVarKeyword:pattern:typeAnnotation:initializer:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalBindingCondition",7],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["pattern",1],[": ",17],["PatternSyntax",18,453],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18,157],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18,258],[") -> ",17],["OptionalBindingConditionSyntax",18,400]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOptionalBindingCondition",7],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["pattern",1],[": ",17],["PatternSyntax",18],[", ",17],["typeAnnotation",1],[": ",17],["TypeAnnotationSyntax",18],["?, ",17],["initializer",1],[": ",17],["InitializerClauseSyntax",18],[") -> ",17],["OptionalBindingConditionSyntax",18]]},{"p":["SyntaxFactory","makePostfixQuestionMarkToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixQuestionMarkToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePostfixQuestionMarkToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundColorLiteralKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundColorLiteralKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundColorLiteralKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePoundImageLiteralKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundImageLiteralKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundImageLiteralKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBlankAvailabilityArgument()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityArgument",7],["() -> ",17],["AvailabilityArgumentSyntax",18,324]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityArgument",7],["() -> ",17],["AvailabilityArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBlankAvailabilitySpecList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecListSyntax",18]]},{"p":["SyntaxFactory","makeBlankClassRestrictionType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClassRestrictionType",7],["() -> ",17],["ClassRestrictionTypeSyntax",18,328]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClassRestrictionType",7],["() -> ",17],["ClassRestrictionTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankConditionElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConditionElementList",7],["() -> ",17],["ConditionElementListSyntax",18,330]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConditionElementList",7],["() -> ",17],["ConditionElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankDeclNameArgumentList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentListSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericParameterList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericParameterList",7],["() -> ",17],["GenericParameterListSyntax",18,334]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericParameterList",7],["() -> ",17],["GenericParameterListSyntax",18]]},{"p":["SyntaxFactory","makeBlankMemberTypeIdentifier()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifierSyntax",18,336]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifierSyntax",18]]},{"p":["SyntaxFactory","makeBlankOptionalChainingExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExprSyntax",18,338]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankSimpleTypeIdentifier()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifierSyntax",18,340]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifierSyntax",18]]},{"p":["SyntaxFactory","makeBlankTupleExprElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleExprElementList",7],["() -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleExprElementList",7],["() -> ",17],["TupleExprElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankTupleTypeElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleTypeElementList",7],["() -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTupleTypeElementList",7],["() -> ",17],["TupleTypeElementListSyntax",18]]},{"p":["SyntaxFactory","makeMultilineStringQuoteToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMultilineStringQuoteToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMultilineStringQuoteToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupAssignment(assignmentKeyword:colon:flag:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupAssignment",7],["(",17],["assignmentKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["flag",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PrecedenceGroupAssignmentSyntax",18,402]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupAssignment",7],["(",17],["assignmentKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["flag",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PrecedenceGroupAssignmentSyntax",18]]},{"p":["SyntaxFactory","makePrimaryAssociatedTypeList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrimaryAssociatedTypeList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["PrimaryAssociatedTypeSyntax",18,358],["]) -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrimaryAssociatedTypeList",7],["([",17],["PrimaryAssociatedTypeSyntax",18],["]) -> ",17],["PrimaryAssociatedTypeListSyntax",18]]},{"p":["SyntaxFactory","makeBlankAvailabilityCondition()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityCondition",7],["() -> ",17],["AvailabilityConditionSyntax",18,346]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityCondition",7],["() -> ",17],["AvailabilityConditionSyntax",18]]},{"p":["SyntaxFactory","makeBlankDictionaryElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryElementList",7],["() -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDictionaryElementList",7],["() -> ",17],["DictionaryElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankDiscardAssignmentExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExprSyntax",18,350]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankEditorPlaceholderExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExprSyntax",18,352]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankFunctionParameterList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionParameterList",7],["() -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankFunctionParameterList",7],["() -> ",17],["FunctionParameterListSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericArgumentClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericArgumentClause",7],["() -> ",17],["GenericArgumentClauseSyntax",18,356]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericArgumentClause",7],["() -> ",17],["GenericArgumentClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrimaryAssociatedType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedTypeSyntax",18,358]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankStringLiteralSegments()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStringLiteralSegments",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankStringLiteralSegments",7],["() -> ",17],["StringLiteralSegmentsSyntax",18]]},{"p":["SyntaxFactory","makeBlankSymbolicReferenceExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExprSyntax",18,362]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExprSyntax",18]]},{"p":["SyntaxFactory","makeBlankTypeInheritanceClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClauseSyntax",18,364]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankTypeInitializerClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeInitializerClause",7],["() -> ",17],["TypeInitializerClauseSyntax",18,366]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTypeInitializerClause",7],["() -> ",17],["TypeInitializerClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankUnresolvedPatternExpr()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExprSyntax",18,368]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExprSyntax",18]]},{"p":["SyntaxFactory","makeCompositionTypeElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeCompositionTypeElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["CompositionTypeElementSyntax",18,372],["]) -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeCompositionTypeElementList",7],["([",17],["CompositionTypeElementSyntax",18],["]) -> ",17],["CompositionTypeElementListSyntax",18]]},{"p":["SyntaxFactory","makeDifferentiabilityParamList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParamList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["DifferentiabilityParamSyntax",18,376],["]) -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParamList",7],["([",17],["DifferentiabilityParamSyntax",18],["]) -> ",17],["DifferentiabilityParamListSyntax",18]]},{"p":["SyntaxFactory","makeOperatorPrecedenceAndTypes(colon:precedenceGroupAndDesignatedTypes:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeOperatorPrecedenceAndTypes",7],["(",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["precedenceGroupAndDesignatedTypes",1],[": ",17],["IdentifierListSyntax",18,141],[") -> ",17],["OperatorPrecedenceAndTypesSyntax",18,410]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeOperatorPrecedenceAndTypes",7],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["precedenceGroupAndDesignatedTypes",1],[": ",17],["IdentifierListSyntax",18],[") -> ",17],["OperatorPrecedenceAndTypesSyntax",18]]},{"p":["SyntaxFactory","makePoundSourceLocationKeyword(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSourceLocationKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePoundSourceLocationKeyword",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupNameElement(name:trailingComma:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupNameElement",7],["(",17],["name",1],[": ",17],["TokenSyntax",18,444],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupNameElementSyntax",18,412]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupNameElement",7],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupNameElementSyntax",18]]},{"p":["SyntaxFactory","makeAvailabilityLabeledArgument(label:colon:value:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityLabeledArgument",7],["(",17],["label",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["value",1],[": ",17],["Syntax",18,513],[") -> ",17],["AvailabilityLabeledArgumentSyntax",18,414]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityLabeledArgument",7],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["Syntax",18],[") -> ",17],["AvailabilityLabeledArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureCaptureItemList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemListSyntax",18]]},{"p":["SyntaxFactory","makeBlankCompositionTypeElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCompositionTypeElement",7],["() -> ",17],["CompositionTypeElementSyntax",18,372]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCompositionTypeElement",7],["() -> ",17],["CompositionTypeElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankConformanceRequirement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConformanceRequirement",7],["() -> ",17],["ConformanceRequirementSyntax",18,374]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankConformanceRequirement",7],["() -> ",17],["ConformanceRequirementSyntax",18]]},{"p":["SyntaxFactory","makeBlankDifferentiabilityParam()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParamSyntax",18,376]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParamSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericParameterClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericParameterClause",7],["() -> ",17],["GenericParameterClauseSyntax",18,378]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericParameterClause",7],["() -> ",17],["GenericParameterClauseSyntax",18]]},{"p":["SyntaxFactory","makeBlankGenericRequirementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericRequirementList",7],["() -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankGenericRequirementList",7],["() -> ",17],["GenericRequirementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankLabeledSpecializeEntry()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntrySyntax",18,382]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntrySyntax",18]]},{"p":["SyntaxFactory","makeSpecializeAttributeSpecList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeSpecializeAttributeSpecList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["Syntax",18,513],["]) -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeSpecializeAttributeSpecList",7],["([",17],["Syntax",18],["]) -> ",17],["SpecializeAttributeSpecListSyntax",18]]},{"p":["SyntaxFactory","makeBlankClosureCaptureSignature()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignatureSyntax",18,384]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignatureSyntax",18]]},{"p":["SyntaxFactory","makeBlankDifferentiabilityParams()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParamsSyntax",18,386]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParamsSyntax",18]]},{"p":["SyntaxFactory","makeBlankPoundSourceLocationArgs()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgsSyntax",18,388]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgsSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupNameList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupRelation()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelationSyntax",18,392]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelationSyntax",18]]},{"p":["SyntaxFactory","makeBlankTuplePatternElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTuplePatternElementList",7],["() -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankTuplePatternElementList",7],["() -> ",17],["TuplePatternElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankUnavailabilityCondition()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnavailabilityCondition",7],["() -> ",17],["UnavailabilityConditionSyntax",18,396]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankUnavailabilityCondition",7],["() -> ",17],["UnavailabilityConditionSyntax",18]]},{"p":["SyntaxFactory","makeImplementsAttributeArguments(type:comma:declBaseName:declNameArguments:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeImplementsAttributeArguments",7],["(",17],["type",1],[": ",17],["SimpleTypeIdentifierSyntax",18,340],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,444],[", ",17],["declBaseName",1],[": ",17],["Syntax",18,513],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18,418]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeImplementsAttributeArguments",7],["(",17],["type",1],[": ",17],["SimpleTypeIdentifierSyntax",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],[", ",17],["declBaseName",1],[": ",17],["Syntax",18],[", ",17],["declNameArguments",1],[": ",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeNamedAttributeStringArgument(nameTok:colon:stringOrDeclname:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeNamedAttributeStringArgument",7],["(",17],["nameTok",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["stringOrDeclname",1],[": ",17],["Syntax",18,513],[") -> ",17],["NamedAttributeStringArgumentSyntax",18,420]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeNamedAttributeStringArgument",7],["(",17],["nameTok",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["stringOrDeclname",1],[": ",17],["Syntax",18],[") -> ",17],["NamedAttributeStringArgumentSyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupAssociativity(associativityKeyword:colon:value:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupAssociativity",7],["(",17],["associativityKeyword",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["value",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["PrecedenceGroupAssociativitySyntax",18,422]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupAssociativity",7],["(",17],["associativityKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["TokenSyntax",18],[") -> ",17],["PrecedenceGroupAssociativitySyntax",18]]},{"p":["SyntaxFactory","makePrecedenceGroupAttributeList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupAttributeList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["Syntax",18,513],["]) -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makePrecedenceGroupAttributeList",7],["([",17],["Syntax",18],["]) -> ",17],["PrecedenceGroupAttributeListSyntax",18]]},{"p":["SyntaxFactory","makeBlankMatchingPatternCondition()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMatchingPatternCondition",7],["() -> ",17],["MatchingPatternConditionSyntax",18,398]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMatchingPatternCondition",7],["() -> ",17],["MatchingPatternConditionSyntax",18]]},{"p":["SyntaxFactory","makeBlankOptionalBindingCondition()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalBindingCondition",7],["() -> ",17],["OptionalBindingConditionSyntax",18,400]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOptionalBindingCondition",7],["() -> ",17],["OptionalBindingConditionSyntax",18]]},{"p":["SyntaxFactory","makeDifferentiabilityParamsClause(wrtLabel:colon:parameters:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParamsClause",7],["(",17],["wrtLabel",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["parameters",1],[": ",17],["Syntax",18,513],[") -> ",17],["DifferentiabilityParamsClauseSyntax",18,426]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiabilityParamsClause",7],["(",17],["wrtLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["parameters",1],[": ",17],["Syntax",18],[") -> ",17],["DifferentiabilityParamsClauseSyntax",18]]},{"p":["SyntaxFactory","makeAvailabilityVersionRestriction(platform:version:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityVersionRestriction",7],["(",17],["platform",1],[": ",17],["TokenSyntax",18,444],[", ",17],["version",1],[": ",17],["VersionTupleSyntax",18,97],["?) -> ",17],["AvailabilityVersionRestrictionSyntax",18,428]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeAvailabilityVersionRestriction",7],["(",17],["platform",1],[": ",17],["TokenSyntax",18],[", ",17],["version",1],[": ",17],["VersionTupleSyntax",18],["?) -> ",17],["AvailabilityVersionRestrictionSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupAssignment()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignmentSyntax",18,402]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignmentSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrimaryAssociatedTypeList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18]]},{"p":["SyntaxFactory","makeMultipleTrailingClosureElement(label:colon:closure:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMultipleTrailingClosureElement",7],["(",17],["label",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["closure",1],[": ",17],["ClosureExprSyntax",18,41],[") -> ",17],["MultipleTrailingClosureElementSyntax",18,430]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMultipleTrailingClosureElement",7],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["closure",1],[": ",17],["ClosureExprSyntax",18],[") -> ",17],["MultipleTrailingClosureElementSyntax",18]]},{"p":["SyntaxFactory","makeStringInterpolationAnchorToken(leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeStringInterpolationAnchorToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeStringInterpolationAnchorToken",7],["(",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxFactory","makeBlankCompositionTypeElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankDifferentiabilityParamList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamListSyntax",18]]},{"p":["SyntaxFactory","makeBlankOperatorPrecedenceAndTypes()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypesSyntax",18,410]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypesSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupNameElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElementSyntax",18,412]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElementSyntax",18]]},{"p":["SyntaxFactory","makeImplicitlyUnwrappedOptionalType(wrappedType:exclamationMark:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeImplicitlyUnwrappedOptionalType",7],["(",17],["wrappedType",1],[": ",17],["TypeSyntax",18,443],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,432]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeImplicitlyUnwrappedOptionalType",7],["(",17],["wrappedType",1],[": ",17],["TypeSyntax",18],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18],[") -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankAvailabilityLabeledArgument()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgumentSyntax",18,414]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBlankSpecializeAttributeSpecList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18]]},{"p":["SyntaxFactory","makeDifferentiableAttributeArguments(diffKind:diffKindComma:diffParams:diffParamsComma:whereClause:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiableAttributeArguments",7],["(",17],["diffKind",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["diffParams",1],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],["?, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["whereClause",1],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18,434]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDifferentiableAttributeArguments",7],["(",17],["diffKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffParams",1],[": ",17],["DifferentiabilityParamsClauseSyntax",18],["?, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["whereClause",1],[": ",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeBlankImplementsAttributeArguments()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArgumentsSyntax",18,418]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeBlankNamedAttributeStringArgument()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgumentSyntax",18,420]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgumentSyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupAssociativity()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativitySyntax",18,422]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativitySyntax",18]]},{"p":["SyntaxFactory","makeBlankPrecedenceGroupAttributeList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18]]},{"p":["SyntaxFactory","makeBlankDifferentiabilityParamsClause()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClauseSyntax",18,426]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClauseSyntax",18]]},{"p":["SyntaxFactory","makeMultipleTrailingClosureElementList(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeMultipleTrailingClosureElementList",7],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["MultipleTrailingClosureElementSyntax",18,430],["]) -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeMultipleTrailingClosureElementList",7],["([",17],["MultipleTrailingClosureElementSyntax",18],["]) -> ",17],["MultipleTrailingClosureElementListSyntax",18]]},{"p":["SyntaxFactory","makeBlankAvailabilityVersionRestriction()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestrictionSyntax",18,428]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestrictionSyntax",18]]},{"p":["SyntaxFactory","makeBlankMultipleTrailingClosureElement()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElementSyntax",18,430]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElementSyntax",18]]},{"p":["SyntaxFactory","makeBlankImplicitlyUnwrappedOptionalType()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,432]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18]]},{"p":["SyntaxFactory","makeBlankDifferentiableAttributeArguments()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArgumentsSyntax",18,434]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeBlankMultipleTrailingClosureElementList()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18]]},{"p":["SyntaxFactory","makeDerivativeRegistrationAttributeArguments(ofLabel:colon:originalDeclName:period:accessorKind:comma:diffParams:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeDerivativeRegistrationAttributeArguments",7],["(",17],["ofLabel",1],[": ",17],["TokenSyntax",18,444],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,444],[", ",17],["originalDeclName",1],[": ",17],["QualifiedDeclNameSyntax",18,270],[", ",17],["period",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18,444],["?, ",17],["diffParams",1],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeDerivativeRegistrationAttributeArguments",7],["(",17],["ofLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["originalDeclName",1],[": ",17],["QualifiedDeclNameSyntax",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffParams",1],[": ",17],["DifferentiabilityParamsClauseSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeBlankDerivativeRegistrationAttributeArguments()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeBlankDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]]},{"p":["SyntaxFactory","makeToken(_:presence:leadingTrivia:trailingTrivia:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeToken",7],["(",17],["_",1],[" ",17],["kind",2],[": ",17],["TokenKind",18,24],[", ",17],["presence",1],[": ",17],["SourcePresence",18,23],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,534],[" = [], ",17],["trailingTrivia",1],[": ",17],["Trivia",18,534],[" = []) -> ",17],["TokenSyntax",18,444]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeToken",7],["(",17],["TokenKind",18],[", ",17],["presence",1],[": ",17],["SourcePresence",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],[", ",17],["trailingTrivia",1],[": ",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]]},{"p":["SyntaxVerifier","verify(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["verify",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[") ",17],["throws",12]],"s":[["static",12],[" ",17],["func",12],[" ",17],["verify",7],["(",17],["Syntax",18],[") ",17],["throws",12]]},{"p":["Trivia","garbageText(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["garbageText",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[") -> ",17],["Trivia",18,534]],"s":[["static",12],[" ",17],["func",12],[" ",17],["garbageText",7],["(",17],["String",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for GarbageText."},{"p":["Trivia","lineComment(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["lineComment",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[") -> ",17],["Trivia",18,534]],"s":[["static",12],[" ",17],["func",12],[" ",17],["lineComment",7],["(",17],["String",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for LineComment."},{"p":["Trivia","blockComment(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["blockComment",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[") -> ",17],["Trivia",18,534]],"s":[["static",12],[" ",17],["func",12],[" ",17],["blockComment",7],["(",17],["String",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for BlockComment."},{"p":["Trivia","verticalTabs(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["verticalTabs",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7706],[") -> ",17],["Trivia",18,534]],"s":[["static",12],[" ",17],["func",12],[" ",17],["verticalTabs",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of '\\u{2B7F}' characters."},{"p":["Trivia","docLineComment(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["docLineComment",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[") -> ",17],["Trivia",18,534]],"s":[["static",12],[" ",17],["func",12],[" ",17],["docLineComment",7],["(",17],["String",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for DocLineComment."},{"p":["Trivia","carriageReturns(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["carriageReturns",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7706],[") -> ",17],["Trivia",18,534]],"s":[["static",12],[" ",17],["func",12],[" ",17],["carriageReturns",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of '\\r' characters."},{"p":["Trivia","docBlockComment(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["docBlockComment",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,7655],[") -> ",17],["Trivia",18,534]],"s":[["static",12],[" ",17],["func",12],[" ",17],["docBlockComment",7],["(",17],["String",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for DocBlockComment."},{"p":["Trivia","carriageReturnLineFeeds(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["carriageReturnLineFeeds",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7706],[") -> ",17],["Trivia",18,534]],"s":[["static",12],[" ",17],["func",12],[" ",17],["carriageReturnLineFeeds",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of '\\r\\n' characters."},{"p":["Trivia","tabs(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["tabs",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7706],[") -> ",17],["Trivia",18,534]],"s":[["static",12],[" ",17],["func",12],[" ",17],["tabs",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of '\\t' characters."},{"p":["Trivia","spaces(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["spaces",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7706],[") -> ",17],["Trivia",18,534]],"s":[["static",12],[" ",17],["func",12],[" ",17],["spaces",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of ' ' characters."},{"p":["Trivia","newlines(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["newlines",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7706],[") -> ",17],["Trivia",18,534]],"s":[["static",12],[" ",17],["func",12],[" ",17],["newlines",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of '\\n' characters."},{"p":["Trivia","formfeeds(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["formfeeds",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,7706],[") -> ",17],["Trivia",18,534]],"s":[["static",12],[" ",17],["func",12],[" ",17],["formfeeds",7],["(",17],["Int",18],[") -> ",17],["Trivia",18]],"d":"Return a piece of trivia for some number of '\\u{240C}' characters."},{"p":["AccessPathSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["AccessPathComponentSyntax",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `AccessPathSyntax` with that element prepended to the\n           beginning."},{"p":["AccessPathSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AccessPathSyntax",18,25],[".",17],["Iterator",18,26]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AccessPathSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["AccessPathSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by removing the last element.\n\n- Returns: A new `AccessPathSyntax` with the last element removed."},{"p":["AccessPathSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by removing the first element.\n\n- Returns: A new `AccessPathSyntax` with the first element removed."},{"p":["AccessPathSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AccessPathSyntax",18]],"d":"Returns a new `AccessPathSyntax` with all trivia removed."},{"p":["AccessPathSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Returns a new `AccessPathSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["AccessPathSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Returns a new `AccessPathSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["AccessPathSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AccessPathSyntax",18]],"d":"Returns a new `AccessPathSyntax` with its leading trivia removed."},{"p":["AccessPathSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AccessPathSyntax",18]],"d":"Returns a new `AccessPathSyntax` with its trailing trivia removed."},{"p":["AccessPathSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["AccessPathSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["AccessPathSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["AccessPathComponentSyntax",18,304],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["AccessPathComponentSyntax",18],["?",17]],"o":7760},{"p":["AccessPathSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["AccessPathSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `AccessPathSyntax` with the element at the provided index\n           removed."},{"p":["AccessPathSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["appending",7],["(",17],["AccessPathComponentSyntax",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `AccessPathSyntax` with that element appended to the end."},{"p":["AccessPathSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AccessPathComponentSyntax",18,304],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["AccessPathComponentSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `AccessPathSyntax` with that element appended to the end."},{"p":["AccessPathSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["AccessPathSyntax",18,25]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["AccessPathComponentSyntax",18],[") -> ",17],["AccessPathSyntax",18]],"d":"Creates a new `AccessPathSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `AccessPathSyntax` with the new element at the provided index."},{"p":["ImportDeclSyntax","withImportTok(_:)"],"f":[["func",12],[" ",17],["withImportTok",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["withImportTok",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ImportDeclSyntax",18]],"d":"Returns a copy of the receiver with its `importTok` replaced.\n- param newChild: The new `importTok` to replace the node's\n                  current `importTok`, if present."},{"p":["ImportDeclSyntax","withImportKind(_:)"],"f":[["func",12],[" ",17],["withImportKind",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["withImportKind",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ImportDeclSyntax",18]],"d":"Returns a copy of the receiver with its `importKind` replaced.\n- param newChild: The new `importKind` to replace the node's\n                  current `importKind`, if present."},{"p":["ImportDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["ImportDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["ImportDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["ImportDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["ImportDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["ImportDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["ImportDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["ImportDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["ImportDeclSyntax","addPathComponent(_:)"],"f":[["func",12],[" ",17],["addPathComponent",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["addPathComponent",7],["(",17],["AccessPathComponentSyntax",18],[") -> ",17],["ImportDeclSyntax",18]],"d":"Adds the provided `PathComponent` to the node's `path`\ncollection.\n- param element: The new `PathComponent` to add to the node's\n                 `path` collection.\n- returns: A copy of the receiver with the provided `PathComponent`\n           appended to its `path` collection."},{"p":["ImportDeclSyntax","withPath(_:)"],"f":[["func",12],[" ",17],["withPath",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AccessPathSyntax",18,25],["?) -> ",17],["ImportDeclSyntax",18,27]],"s":[["func",12],[" ",17],["withPath",7],["(",17],["AccessPathSyntax",18],["?) -> ",17],["ImportDeclSyntax",18]],"d":"Returns a copy of the receiver with its `path` replaced.\n- param newChild: The new `path` to replace the node's\n                  current `path`, if present."},{"p":["ImportDeclSyntaxBuilder","useImportTok(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useImportTok",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useImportTok",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ImportDeclSyntaxBuilder","useImportKind(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useImportKind",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useImportKind",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ImportDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["ImportDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["ImportDeclSyntaxBuilder","addPathComponent(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addPathComponent",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["AccessPathComponentSyntax",18,304],[")",17]],"s":[["func",12],[" ",17],["addPathComponent",7],["(",17],["AccessPathComponentSyntax",18],[")",17]]},{"p":["ReturnStmtSyntax","withReturnKeyword(_:)"],"f":[["func",12],[" ",17],["withReturnKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ReturnStmtSyntax",18,29]],"s":[["func",12],[" ",17],["withReturnKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ReturnStmtSyntax",18]],"d":"Returns a copy of the receiver with its `returnKeyword` replaced.\n- param newChild: The new `returnKeyword` to replace the node's\n                  current `returnKeyword`, if present."},{"p":["ReturnStmtSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["ReturnStmtSyntax",18,29]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ReturnStmtSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ReturnStmtSyntaxBuilder","useReturnKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useReturnKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useReturnKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ReturnStmtSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["SourceFileSyntax","addStatement(_:)"],"f":[["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["SourceFileSyntax",18,31]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["SourceFileSyntax",18]],"d":"Adds the provided `Statement` to the node's `statements`\ncollection.\n- param element: The new `Statement` to add to the node's\n                 `statements` collection.\n- returns: A copy of the receiver with the provided `Statement`\n           appended to its `statements` collection."},{"p":["SourceFileSyntax","withEOFToken(_:)"],"f":[["func",12],[" ",17],["withEOFToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SourceFileSyntax",18,31]],"s":[["func",12],[" ",17],["withEOFToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SourceFileSyntax",18]],"d":"Returns a copy of the receiver with its `eofToken` replaced.\n- param newChild: The new `eofToken` to replace the node's\n                  current `eofToken`, if present."},{"p":["SourceFileSyntax","withStatements(_:)"],"f":[["func",12],[" ",17],["withStatements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockItemListSyntax",18,238],["?) -> ",17],["SourceFileSyntax",18,31]],"s":[["func",12],[" ",17],["withStatements",7],["(",17],["CodeBlockItemListSyntax",18],["?) -> ",17],["SourceFileSyntax",18]],"d":"Returns a copy of the receiver with its `statements` replaced.\n- param newChild: The new `statements` to replace the node's\n                  current `statements`, if present.","o":4663},{"p":["SourceFileSyntaxBuilder","useEOFToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEOFToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useEOFToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SourceFileSyntaxBuilder","addStatement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[")",17]]},{"p":["StructDeclSyntax","withStructKeyword(_:)"],"f":[["func",12],[" ",17],["withStructKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withStructKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `structKeyword` replaced.\n- param newChild: The new `structKeyword` to replace the node's\n                  current `structKeyword`, if present."},{"p":["StructDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["StructDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["StructDeclSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclBlockSyntax",18,182],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclBlockSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `members` replaced.\n- param newChild: The new `members` to replace the node's\n                  current `members`, if present.","o":6100},{"p":["StructDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["StructDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["StructDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present.","o":6101},{"p":["StructDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present.","o":6102},{"p":["StructDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present.","o":4573},{"p":["StructDeclSyntax","withInheritanceClause(_:)"],"f":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `inheritanceClause` replaced.\n- param newChild: The new `inheritanceClause` to replace the node's\n                  current `inheritanceClause`, if present."},{"p":["StructDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["StructDeclSyntax","withGenericParameterClause(_:)"],"f":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,378],["?) -> ",17],["StructDeclSyntax",18,33]],"s":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["StructDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterClause` replaced.\n- param newChild: The new `genericParameterClause` to replace the node's\n                  current `genericParameterClause`, if present."},{"p":["StructDeclSyntaxBuilder","useStructKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useStructKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useStructKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","useMembers(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMembers",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["useMembers",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","useInheritanceClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritanceClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],[")",17]],"s":[["func",12],[" ",17],["useInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["StructDeclSyntaxBuilder","useGenericParameterClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,378],[")",17]],"s":[["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["SwitchCaseSyntax","addStatement(_:)"],"f":[["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["SwitchCaseSyntax",18,35]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["SwitchCaseSyntax",18]],"d":"Adds the provided `Statement` to the node's `statements`\ncollection.\n- param element: The new `Statement` to add to the node's\n                 `statements` collection.\n- returns: A copy of the receiver with the provided `Statement`\n           appended to its `statements` collection."},{"p":["SwitchCaseSyntax","withStatements(_:)"],"f":[["func",12],[" ",17],["withStatements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockItemListSyntax",18,238],["?) -> ",17],["SwitchCaseSyntax",18,35]],"s":[["func",12],[" ",17],["withStatements",7],["(",17],["CodeBlockItemListSyntax",18],["?) -> ",17],["SwitchCaseSyntax",18]],"d":"Returns a copy of the receiver with its `statements` replaced.\n- param newChild: The new `statements` to replace the node's\n                  current `statements`, if present.","o":4663},{"p":["SwitchCaseSyntax","withUnknownAttr(_:)"],"f":[["func",12],[" ",17],["withUnknownAttr",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeSyntax",18,477],["?) -> ",17],["SwitchCaseSyntax",18,35]],"s":[["func",12],[" ",17],["withUnknownAttr",7],["(",17],["AttributeSyntax",18],["?) -> ",17],["SwitchCaseSyntax",18]],"d":"Returns a copy of the receiver with its `unknownAttr` replaced.\n- param newChild: The new `unknownAttr` to replace the node's\n                  current `unknownAttr`, if present."},{"p":["SwitchCaseSyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["SwitchCaseSyntax",18,35]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["Syntax",18],["?) -> ",17],["SwitchCaseSyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["SwitchCaseSyntaxBuilder","addStatement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[")",17]]},{"p":["SwitchCaseSyntaxBuilder","useUnknownAttr(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useUnknownAttr",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeSyntax",18,477],[")",17]],"s":[["func",12],[" ",17],["useUnknownAttr",7],["(",17],["AttributeSyntax",18],[")",17]]},{"p":["SwitchCaseSyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["Syntax",18],[")",17]]},{"p":["SwitchStmtSyntax","withSwitchKeyword(_:)"],"f":[["func",12],[" ",17],["withSwitchKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withSwitchKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `switchKeyword` replaced.\n- param newChild: The new `switchKeyword` to replace the node's\n                  current `switchKeyword`, if present."},{"p":["SwitchStmtSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present.","o":5949},{"p":["SwitchStmtSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `leftBrace` replaced.\n- param newChild: The new `leftBrace` to replace the node's\n                  current `leftBrace`, if present.","o":5917},{"p":["SwitchStmtSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["SwitchStmtSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present.","o":5950},{"p":["SwitchStmtSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `rightBrace` replaced.\n- param newChild: The new `rightBrace` to replace the node's\n                  current `rightBrace`, if present.","o":5918},{"p":["SwitchStmtSyntax","addCase(_:)"],"f":[["func",12],[" ",17],["addCase",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["addCase",7],["(",17],["Syntax",18],[") -> ",17],["SwitchStmtSyntax",18]],"d":"Adds the provided `Case` to the node's `cases`\ncollection.\n- param element: The new `Case` to add to the node's\n                 `cases` collection.\n- returns: A copy of the receiver with the provided `Case`\n           appended to its `cases` collection."},{"p":["SwitchStmtSyntax","withCases(_:)"],"f":[["func",12],[" ",17],["withCases",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["SwitchCaseListSyntax",18,155],["?) -> ",17],["SwitchStmtSyntax",18,37]],"s":[["func",12],[" ",17],["withCases",7],["(",17],["SwitchCaseListSyntax",18],["?) -> ",17],["SwitchStmtSyntax",18]],"d":"Returns a copy of the receiver with its `cases` replaced.\n- param newChild: The new `cases` to replace the node's\n                  current `cases`, if present."},{"p":["SwitchStmtSyntaxBuilder","useSwitchKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSwitchKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useSwitchKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchStmtSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchStmtSyntaxBuilder","useLeftBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchStmtSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["SwitchStmtSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchStmtSyntaxBuilder","useRightBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchStmtSyntaxBuilder","addCase(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCase",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addCase",7],["(",17],["Syntax",18],[")",17]]},{"p":["CatchClauseSyntax","addCatchItem(_:)"],"f":[["func",12],[" ",17],["addCatchItem",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CatchItemSyntax",18,483],[") -> ",17],["CatchClauseSyntax",18,39]],"s":[["func",12],[" ",17],["addCatchItem",7],["(",17],["CatchItemSyntax",18],[") -> ",17],["CatchClauseSyntax",18]],"d":"Adds the provided `CatchItem` to the node's `catchItems`\ncollection.\n- param element: The new `CatchItem` to add to the node's\n                 `catchItems` collection.\n- returns: A copy of the receiver with the provided `CatchItem`\n           appended to its `catchItems` collection."},{"p":["CatchClauseSyntax","withCatchItems(_:)"],"f":[["func",12],[" ",17],["withCatchItems",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CatchItemListSyntax",18,105],["?) -> ",17],["CatchClauseSyntax",18,39]],"s":[["func",12],[" ",17],["withCatchItems",7],["(",17],["CatchItemListSyntax",18],["?) -> ",17],["CatchClauseSyntax",18]],"d":"Returns a copy of the receiver with its `catchItems` replaced.\n- param newChild: The new `catchItems` to replace the node's\n                  current `catchItems`, if present."},{"p":["CatchClauseSyntax","withCatchKeyword(_:)"],"f":[["func",12],[" ",17],["withCatchKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CatchClauseSyntax",18,39]],"s":[["func",12],[" ",17],["withCatchKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CatchClauseSyntax",18]],"d":"Returns a copy of the receiver with its `catchKeyword` replaced.\n- param newChild: The new `catchKeyword` to replace the node's\n                  current `catchKeyword`, if present."},{"p":["CatchClauseSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["CatchClauseSyntax",18,39]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["CatchClauseSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present.","o":4545},{"p":["CatchClauseSyntaxBuilder","addCatchItem(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCatchItem",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CatchItemSyntax",18,483],[")",17]],"s":[["func",12],[" ",17],["addCatchItem",7],["(",17],["CatchItemSyntax",18],[")",17]]},{"p":["CatchClauseSyntaxBuilder","useCatchKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCatchKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useCatchKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CatchClauseSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["ClosureExprSyntax","addStatement(_:)"],"f":[["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["ClosureExprSyntax",18,41]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["ClosureExprSyntax",18]],"d":"Adds the provided `Statement` to the node's `statements`\ncollection.\n- param element: The new `Statement` to add to the node's\n                 `statements` collection.\n- returns: A copy of the receiver with the provided `Statement`\n           appended to its `statements` collection."},{"p":["ClosureExprSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureExprSyntax",18,41]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftBrace` replaced.\n- param newChild: The new `leftBrace` to replace the node's\n                  current `leftBrace`, if present.","o":5917},{"p":["ClosureExprSyntax","withSignature(_:)"],"f":[["func",12],[" ",17],["withSignature",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ClosureSignatureSyntax",18,206],["?) -> ",17],["ClosureExprSyntax",18,41]],"s":[["func",12],[" ",17],["withSignature",7],["(",17],["ClosureSignatureSyntax",18],["?) -> ",17],["ClosureExprSyntax",18]],"d":"Returns a copy of the receiver with its `signature` replaced.\n- param newChild: The new `signature` to replace the node's\n                  current `signature`, if present."},{"p":["ClosureExprSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureExprSyntax",18,41]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightBrace` replaced.\n- param newChild: The new `rightBrace` to replace the node's\n                  current `rightBrace`, if present.","o":5918},{"p":["ClosureExprSyntax","withStatements(_:)"],"f":[["func",12],[" ",17],["withStatements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockItemListSyntax",18,238],["?) -> ",17],["ClosureExprSyntax",18,41]],"s":[["func",12],[" ",17],["withStatements",7],["(",17],["CodeBlockItemListSyntax",18],["?) -> ",17],["ClosureExprSyntax",18]],"d":"Returns a copy of the receiver with its `statements` replaced.\n- param newChild: The new `statements` to replace the node's\n                  current `statements`, if present.","o":4663},{"p":["ClosureExprSyntaxBuilder","addStatement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[")",17]]},{"p":["ClosureExprSyntaxBuilder","useLeftBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureExprSyntaxBuilder","useSignature(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSignature",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureSignatureSyntax",18,206],[")",17]],"s":[["func",12],[" ",17],["useSignature",7],["(",17],["ClosureSignatureSyntax",18],[")",17]]},{"p":["ClosureExprSyntaxBuilder","useRightBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["KeyPathExprSyntax","withRootExpr(_:)"],"f":[["func",12],[" ",17],["withRootExpr",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["KeyPathExprSyntax",18,43]],"s":[["func",12],[" ",17],["withRootExpr",7],["(",17],["ExprSyntax",18],["?) -> ",17],["KeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `rootExpr` replaced.\n- param newChild: The new `rootExpr` to replace the node's\n                  current `rootExpr`, if present."},{"p":["KeyPathExprSyntax","withBackslash(_:)"],"f":[["func",12],[" ",17],["withBackslash",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["KeyPathExprSyntax",18,43]],"s":[["func",12],[" ",17],["withBackslash",7],["(",17],["TokenSyntax",18],["?) -> ",17],["KeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `backslash` replaced.\n- param newChild: The new `backslash` to replace the node's\n                  current `backslash`, if present."},{"p":["KeyPathExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["KeyPathExprSyntax",18,43]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["KeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["KeyPathExprSyntaxBuilder","useRootExpr(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRootExpr",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useRootExpr",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["KeyPathExprSyntaxBuilder","useBackslash(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBackslash",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useBackslash",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["KeyPathExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["TernaryExprSyntax","withColonMark(_:)"],"f":[["func",12],[" ",17],["withColonMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TernaryExprSyntax",18,45]],"s":[["func",12],[" ",17],["withColonMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TernaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `colonMark` replaced.\n- param newChild: The new `colonMark` to replace the node's\n                  current `colonMark`, if present."},{"p":["TernaryExprSyntax","withFirstChoice(_:)"],"f":[["func",12],[" ",17],["withFirstChoice",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["TernaryExprSyntax",18,45]],"s":[["func",12],[" ",17],["withFirstChoice",7],["(",17],["ExprSyntax",18],["?) -> ",17],["TernaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `firstChoice` replaced.\n- param newChild: The new `firstChoice` to replace the node's\n                  current `firstChoice`, if present."},{"p":["TernaryExprSyntax","withQuestionMark(_:)"],"f":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TernaryExprSyntax",18,45]],"s":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TernaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `questionMark` replaced.\n- param newChild: The new `questionMark` to replace the node's\n                  current `questionMark`, if present."},{"p":["TernaryExprSyntax","withSecondChoice(_:)"],"f":[["func",12],[" ",17],["withSecondChoice",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["TernaryExprSyntax",18,45]],"s":[["func",12],[" ",17],["withSecondChoice",7],["(",17],["ExprSyntax",18],["?) -> ",17],["TernaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `secondChoice` replaced.\n- param newChild: The new `secondChoice` to replace the node's\n                  current `secondChoice`, if present."},{"p":["TernaryExprSyntax","withConditionExpression(_:)"],"f":[["func",12],[" ",17],["withConditionExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["TernaryExprSyntax",18,45]],"s":[["func",12],[" ",17],["withConditionExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["TernaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `conditionExpression` replaced.\n- param newChild: The new `conditionExpression` to replace the node's\n                  current `conditionExpression`, if present."},{"p":["TernaryExprSyntaxBuilder","useColonMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColonMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColonMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TernaryExprSyntaxBuilder","useFirstChoice(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFirstChoice",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useFirstChoice",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["TernaryExprSyntaxBuilder","useQuestionMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useQuestionMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useQuestionMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TernaryExprSyntaxBuilder","useSecondChoice(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSecondChoice",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useSecondChoice",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["TernaryExprSyntaxBuilder","useConditionExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useConditionExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useConditionExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["WhereClauseSyntax","withWhereKeyword(_:)"],"f":[["func",12],[" ",17],["withWhereKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["WhereClauseSyntax",18,51]],"s":[["func",12],[" ",17],["withWhereKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["WhereClauseSyntax",18]],"d":"Returns a copy of the receiver with its `whereKeyword` replaced.\n- param newChild: The new `whereKeyword` to replace the node's\n                  current `whereKeyword`, if present."},{"p":["WhereClauseSyntax","withGuardResult(_:)"],"f":[["func",12],[" ",17],["withGuardResult",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["WhereClauseSyntax",18,51]],"s":[["func",12],[" ",17],["withGuardResult",7],["(",17],["ExprSyntax",18],["?) -> ",17],["WhereClauseSyntax",18]],"d":"Returns a copy of the receiver with its `guardResult` replaced.\n- param newChild: The new `guardResult` to replace the node's\n                  current `guardResult`, if present."},{"p":["WhereClauseSyntaxBuilder","useWhereKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhereKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useWhereKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WhereClauseSyntaxBuilder","useGuardResult(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGuardResult",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useGuardResult",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["AccessorDeclSyntax","withAccessorKind(_:)"],"f":[["func",12],[" ",17],["withAccessorKind",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withAccessorKind",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `accessorKind` replaced.\n- param newChild: The new `accessorKind` to replace the node's\n                  current `accessorKind`, if present."},{"p":["AccessorDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["AccessorDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["AccessorDeclSyntax","withModifier(_:)"],"f":[["func",12],[" ",17],["withModifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclModifierSyntax",18,65],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withModifier",7],["(",17],["DeclModifierSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifier` replaced.\n- param newChild: The new `modifier` to replace the node's\n                  current `modifier`, if present."},{"p":["AccessorDeclSyntax","withParameter(_:)"],"f":[["func",12],[" ",17],["withParameter",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AccessorParameterSyntax",18,234],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withParameter",7],["(",17],["AccessorParameterSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `parameter` replaced.\n- param newChild: The new `parameter` to replace the node's\n                  current `parameter`, if present."},{"p":["AccessorDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["AccessorDeclSyntax","withAsyncKeyword(_:)"],"f":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `asyncKeyword` replaced.\n- param newChild: The new `asyncKeyword` to replace the node's\n                  current `asyncKeyword`, if present."},{"p":["AccessorDeclSyntax","withThrowsKeyword(_:)"],"f":[["func",12],[" ",17],["withThrowsKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withThrowsKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `throwsKeyword` replaced.\n- param newChild: The new `throwsKeyword` to replace the node's\n                  current `throwsKeyword`, if present."},{"p":["AccessorDeclSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["AccessorDeclSyntax",18,53]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["AccessorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["AccessorDeclSyntaxBuilder","useAccessorKind(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAccessorKind",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAccessorKind",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorDeclSyntaxBuilder","useModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useModifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["useModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["AccessorDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["AccessorDeclSyntaxBuilder","useParameter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useParameter",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorParameterSyntax",18,234],[")",17]],"s":[["func",12],[" ",17],["useParameter",7],["(",17],["AccessorParameterSyntax",18],[")",17]]},{"p":["AccessorDeclSyntaxBuilder","useAsyncKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorDeclSyntaxBuilder","useThrowsKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowsKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useThrowsKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorDeclSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["AccessorListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["AccessorDeclSyntax",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `AccessorListSyntax` with that element prepended to the\n           beginning."},{"p":["AccessorListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AccessorListSyntax",18,55],[".",17],["Iterator",18,56]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AccessorListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["AccessorListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by removing the last element.\n\n- Returns: A new `AccessorListSyntax` with the last element removed."},{"p":["AccessorListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by removing the first element.\n\n- Returns: A new `AccessorListSyntax` with the first element removed."},{"p":["AccessorListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AccessorListSyntax",18]],"d":"Returns a new `AccessorListSyntax` with all trivia removed."},{"p":["AccessorListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Returns a new `AccessorListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["AccessorListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Returns a new `AccessorListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["AccessorListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AccessorListSyntax",18]],"d":"Returns a new `AccessorListSyntax` with its leading trivia removed."},{"p":["AccessorListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AccessorListSyntax",18]],"d":"Returns a new `AccessorListSyntax` with its trailing trivia removed."},{"p":["AccessorListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["AccessorListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["AccessorListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["AccessorDeclSyntax",18,53],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["AccessorDeclSyntax",18],["?",17]],"o":7760},{"p":["AccessorListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["AccessorListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `AccessorListSyntax` with the element at the provided index\n           removed."},{"p":["AccessorListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["appending",7],["(",17],["AccessorDeclSyntax",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `AccessorListSyntax` with that element appended to the end."},{"p":["AccessorListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AccessorDeclSyntax",18,53],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["AccessorDeclSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `AccessorListSyntax` with that element appended to the end."},{"p":["AccessorListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["AccessorListSyntax",18,55]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["AccessorDeclSyntax",18],[") -> ",17],["AccessorListSyntax",18]],"d":"Creates a new `AccessorListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `AccessorListSyntax` with the new element at the provided index."},{"p":["ArrayElementSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["ArrayElementSyntax",18,57]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ArrayElementSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ArrayElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ArrayElementSyntax",18,57]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrayElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["ArrayElementSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ArrayElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CaseItemListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CaseItemSyntax",18,457],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["CaseItemSyntax",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `CaseItemListSyntax` with that element prepended to the\n           beginning."},{"p":["CaseItemListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CaseItemListSyntax",18,59],[".",17],["Iterator",18,60]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CaseItemListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["CaseItemListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by removing the last element.\n\n- Returns: A new `CaseItemListSyntax` with the last element removed."},{"p":["CaseItemListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by removing the first element.\n\n- Returns: A new `CaseItemListSyntax` with the first element removed."},{"p":["CaseItemListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CaseItemListSyntax",18]],"d":"Returns a new `CaseItemListSyntax` with all trivia removed."},{"p":["CaseItemListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Returns a new `CaseItemListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["CaseItemListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Returns a new `CaseItemListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["CaseItemListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CaseItemListSyntax",18]],"d":"Returns a new `CaseItemListSyntax` with its leading trivia removed."},{"p":["CaseItemListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CaseItemListSyntax",18]],"d":"Returns a new `CaseItemListSyntax` with its trailing trivia removed."},{"p":["CaseItemListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["CaseItemListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["CaseItemListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["CaseItemSyntax",18,457],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["CaseItemSyntax",18],["?",17]],"o":7760},{"p":["CaseItemListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["CaseItemListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `CaseItemListSyntax` with the element at the provided index\n           removed."},{"p":["CaseItemListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CaseItemSyntax",18,457],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["appending",7],["(",17],["CaseItemSyntax",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `CaseItemListSyntax` with that element appended to the end."},{"p":["CaseItemListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CaseItemSyntax",18,457],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["CaseItemSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `CaseItemListSyntax` with that element appended to the end."},{"p":["CaseItemListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["CaseItemSyntax",18,457],[") -> ",17],["CaseItemListSyntax",18,59]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["CaseItemSyntax",18],[") -> ",17],["CaseItemListSyntax",18]],"d":"Creates a new `CaseItemListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `CaseItemListSyntax` with the new element at the provided index."},{"p":["ClosureParamSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureParamSyntax",18,61]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureParamSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["ClosureParamSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureParamSyntax",18,61]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureParamSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["ClosureParamSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureParamSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ContinueStmtSyntax","withContinueKeyword(_:)"],"f":[["func",12],[" ",17],["withContinueKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ContinueStmtSyntax",18,63]],"s":[["func",12],[" ",17],["withContinueKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ContinueStmtSyntax",18]],"d":"Returns a copy of the receiver with its `continueKeyword` replaced.\n- param newChild: The new `continueKeyword` to replace the node's\n                  current `continueKeyword`, if present."},{"p":["ContinueStmtSyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ContinueStmtSyntax",18,63]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ContinueStmtSyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["ContinueStmtSyntaxBuilder","useContinueKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useContinueKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useContinueKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ContinueStmtSyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclModifierSyntax","withDetail(_:)"],"f":[["func",12],[" ",17],["withDetail",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DeclModifierSyntax",18,65]],"s":[["func",12],[" ",17],["withDetail",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclModifierSyntax",18]],"d":"Returns a copy of the receiver with its `detail` replaced.\n- param newChild: The new `detail` to replace the node's\n                  current `detail`, if present."},{"p":["DeclModifierSyntax","withDetailLeftParen(_:)"],"f":[["func",12],[" ",17],["withDetailLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DeclModifierSyntax",18,65]],"s":[["func",12],[" ",17],["withDetailLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclModifierSyntax",18]],"d":"Returns a copy of the receiver with its `detailLeftParen` replaced.\n- param newChild: The new `detailLeftParen` to replace the node's\n                  current `detailLeftParen`, if present."},{"p":["DeclModifierSyntax","withDetailRightParen(_:)"],"f":[["func",12],[" ",17],["withDetailRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DeclModifierSyntax",18,65]],"s":[["func",12],[" ",17],["withDetailRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclModifierSyntax",18]],"d":"Returns a copy of the receiver with its `detailRightParen` replaced.\n- param newChild: The new `detailRightParen` to replace the node's\n                  current `detailRightParen`, if present."},{"p":["DeclModifierSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DeclModifierSyntax",18,65]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclModifierSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["DeclModifierSyntaxBuilder","useDetailLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDetailLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDetailLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclModifierSyntaxBuilder","useDetailRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDetailRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDetailRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclModifierSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclModifierSyntaxBuilder","useDetail(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDetail",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDetail",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumCaseDeclSyntax","withCaseKeyword(_:)"],"f":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumCaseDeclSyntax",18]],"d":"Returns a copy of the receiver with its `caseKeyword` replaced.\n- param newChild: The new `caseKeyword` to replace the node's\n                  current `caseKeyword`, if present."},{"p":["EnumCaseDeclSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["EnumCaseElementSyntax",18],[") -> ",17],["EnumCaseDeclSyntax",18]],"d":"Adds the provided `Element` to the node's `elements`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elements` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elements` collection."},{"p":["EnumCaseDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["EnumCaseDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["EnumCaseDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["EnumCaseDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["EnumCaseDeclSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["EnumCaseElementListSyntax",18,306],["?) -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["EnumCaseElementListSyntax",18],["?) -> ",17],["EnumCaseDeclSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["EnumCaseDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["EnumCaseDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["EnumCaseDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["EnumCaseDeclSyntax",18,67]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["EnumCaseDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["EnumCaseDeclSyntaxBuilder","useCaseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCaseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useCaseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumCaseDeclSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["EnumCaseElementSyntax",18,168],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["EnumCaseElementSyntax",18],[")",17]]},{"p":["EnumCaseDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["EnumCaseDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["FunctionDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["FunctionDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["FunctionDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["FunctionDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["FunctionDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["FunctionDeclSyntax","withSignature(_:)"],"f":[["func",12],[" ",17],["withSignature",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["FunctionSignatureSyntax",18,252],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withSignature",7],["(",17],["FunctionSignatureSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `signature` replaced.\n- param newChild: The new `signature` to replace the node's\n                  current `signature`, if present."},{"p":["FunctionDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["FunctionDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present.","o":4573},{"p":["FunctionDeclSyntax","withFuncKeyword(_:)"],"f":[["func",12],[" ",17],["withFuncKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withFuncKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `funcKeyword` replaced.\n- param newChild: The new `funcKeyword` to replace the node's\n                  current `funcKeyword`, if present."},{"p":["FunctionDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["FunctionDeclSyntax","withGenericParameterClause(_:)"],"f":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,378],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterClause` replaced.\n- param newChild: The new `genericParameterClause` to replace the node's\n                  current `genericParameterClause`, if present."},{"p":["FunctionDeclSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["FunctionDeclSyntax",18,69]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["FunctionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["FunctionDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","useSignature(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSignature",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionSignatureSyntax",18,252],[")",17]],"s":[["func",12],[" ",17],["useSignature",7],["(",17],["FunctionSignatureSyntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","useFuncKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFuncKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useFuncKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","useGenericParameterClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,378],[")",17]],"s":[["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["FunctionDeclSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["FunctionTypeSyntax","withReturnType(_:)"],"f":[["func",12],[" ",17],["withReturnType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withReturnType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `returnType` replaced.\n- param newChild: The new `returnType` to replace the node's\n                  current `returnType`, if present."},{"p":["FunctionTypeSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["FunctionTypeSyntax",18]],"d":"Adds the provided `Argument` to the node's `arguments`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `arguments` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `arguments` collection."},{"p":["FunctionTypeSyntax","withArguments(_:)"],"f":[["func",12],[" ",17],["withArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleTypeElementListSyntax",18,344],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withArguments",7],["(",17],["TupleTypeElementListSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `arguments` replaced.\n- param newChild: The new `arguments` to replace the node's\n                  current `arguments`, if present."},{"p":["FunctionTypeSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["FunctionTypeSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["FunctionTypeSyntax","withAsyncKeyword(_:)"],"f":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `asyncKeyword` replaced.\n- param newChild: The new `asyncKeyword` to replace the node's\n                  current `asyncKeyword`, if present."},{"p":["FunctionTypeSyntax","withThrowsOrRethrowsKeyword(_:)"],"f":[["func",12],[" ",17],["withThrowsOrRethrowsKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withThrowsOrRethrowsKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `throwsOrRethrowsKeyword` replaced.\n- param newChild: The new `throwsOrRethrowsKeyword` to replace the node's\n                  current `throwsOrRethrowsKeyword`, if present."},{"p":["FunctionTypeSyntax","withArrow(_:)"],"f":[["func",12],[" ",17],["withArrow",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionTypeSyntax",18,71]],"s":[["func",12],[" ",17],["withArrow",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `arrow` replaced.\n- param newChild: The new `arrow` to replace the node's\n                  current `arrow`, if present."},{"p":["FunctionTypeSyntaxBuilder","useReturnType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useReturnType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useReturnType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["FunctionTypeSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleTypeElementSyntax",18,232],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleTypeElementSyntax",18],[")",17]]},{"p":["FunctionTypeSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionTypeSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionTypeSyntaxBuilder","useAsyncKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionTypeSyntaxBuilder","useThrowsOrRethrowsKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowsOrRethrowsKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useThrowsOrRethrowsKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionTypeSyntaxBuilder","useArrow(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArrow",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useArrow",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IfConfigDeclSyntax","withClauses(_:)"],"f":[["func",12],[" ",17],["withClauses",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["IfConfigClauseListSyntax",18,288],["?) -> ",17],["IfConfigDeclSyntax",18,73]],"s":[["func",12],[" ",17],["withClauses",7],["(",17],["IfConfigClauseListSyntax",18],["?) -> ",17],["IfConfigDeclSyntax",18]],"d":"Returns a copy of the receiver with its `clauses` replaced.\n- param newChild: The new `clauses` to replace the node's\n                  current `clauses`, if present."},{"p":["IfConfigDeclSyntax","withPoundEndif(_:)"],"f":[["func",12],[" ",17],["withPoundEndif",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["IfConfigDeclSyntax",18,73]],"s":[["func",12],[" ",17],["withPoundEndif",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IfConfigDeclSyntax",18]],"d":"Returns a copy of the receiver with its `poundEndif` replaced.\n- param newChild: The new `poundEndif` to replace the node's\n                  current `poundEndif`, if present."},{"p":["IfConfigDeclSyntax","addClause(_:)"],"f":[["func",12],[" ",17],["addClause",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["IfConfigDeclSyntax",18,73]],"s":[["func",12],[" ",17],["addClause",7],["(",17],["IfConfigClauseSyntax",18],[") -> ",17],["IfConfigDeclSyntax",18]],"d":"Adds the provided `Clause` to the node's `clauses`\ncollection.\n- param element: The new `Clause` to add to the node's\n                 `clauses` collection.\n- returns: A copy of the receiver with the provided `Clause`\n           appended to its `clauses` collection."},{"p":["IfConfigDeclSyntaxBuilder","usePoundEndif(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundEndif",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundEndif",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IfConfigDeclSyntaxBuilder","addClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addClause",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["IfConfigClauseSyntax",18,143],[")",17]],"s":[["func",12],[" ",17],["addClause",7],["(",17],["IfConfigClauseSyntax",18],[")",17]]},{"p":["MetatypeTypeSyntax","withTypeOrProtocol(_:)"],"f":[["func",12],[" ",17],["withTypeOrProtocol",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["MetatypeTypeSyntax",18,75]],"s":[["func",12],[" ",17],["withTypeOrProtocol",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MetatypeTypeSyntax",18]],"d":"Returns a copy of the receiver with its `typeOrProtocol` replaced.\n- param newChild: The new `typeOrProtocol` to replace the node's\n                  current `typeOrProtocol`, if present."},{"p":["MetatypeTypeSyntax","withBaseType(_:)"],"f":[["func",12],[" ",17],["withBaseType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["MetatypeTypeSyntax",18,75]],"s":[["func",12],[" ",17],["withBaseType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["MetatypeTypeSyntax",18]],"d":"Returns a copy of the receiver with its `baseType` replaced.\n- param newChild: The new `baseType` to replace the node's\n                  current `baseType`, if present."},{"p":["MetatypeTypeSyntax","withPeriod(_:)"],"f":[["func",12],[" ",17],["withPeriod",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["MetatypeTypeSyntax",18,75]],"s":[["func",12],[" ",17],["withPeriod",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MetatypeTypeSyntax",18]],"d":"Returns a copy of the receiver with its `period` replaced.\n- param newChild: The new `period` to replace the node's\n                  current `period`, if present."},{"p":["MetatypeTypeSyntaxBuilder","useTypeOrProtocol(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeOrProtocol",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTypeOrProtocol",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MetatypeTypeSyntaxBuilder","useBaseType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBaseType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useBaseType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["MetatypeTypeSyntaxBuilder","usePeriod(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePeriod",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePeriod",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ModifierListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ModifierListSyntax` with that element prepended to the\n           beginning."},{"p":["ModifierListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ModifierListSyntax",18,77],[".",17],["Iterator",18,78]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ModifierListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["ModifierListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by removing the last element.\n\n- Returns: A new `ModifierListSyntax` with the last element removed."},{"p":["ModifierListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by removing the first element.\n\n- Returns: A new `ModifierListSyntax` with the first element removed."},{"p":["ModifierListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ModifierListSyntax",18]],"d":"Returns a new `ModifierListSyntax` with all trivia removed."},{"p":["ModifierListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Returns a new `ModifierListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ModifierListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Returns a new `ModifierListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ModifierListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ModifierListSyntax",18]],"d":"Returns a new `ModifierListSyntax` with its leading trivia removed."},{"p":["ModifierListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ModifierListSyntax",18]],"d":"Returns a new `ModifierListSyntax` with its trailing trivia removed."},{"p":["ModifierListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["ModifierListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["ModifierListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["DeclModifierSyntax",18,65],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["DeclModifierSyntax",18],["?",17]],"o":7760},{"p":["ModifierListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["ModifierListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ModifierListSyntax` with the element at the provided index\n           removed."},{"p":["ModifierListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["appending",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ModifierListSyntax` with that element appended to the end."},{"p":["ModifierListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DeclModifierSyntax",18,65],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["DeclModifierSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ModifierListSyntax` with that element appended to the end."},{"p":["ModifierListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ModifierListSyntax",18,77]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["DeclModifierSyntax",18],[") -> ",17],["ModifierListSyntax",18]],"d":"Creates a new `ModifierListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ModifierListSyntax` with the new element at the provided index."},{"p":["ObjCSelectorSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ObjCSelectorPieceSyntax",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ObjCSelectorSyntax` with that element prepended to the\n           beginning."},{"p":["ObjCSelectorSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ObjCSelectorSyntax",18,79],[".",17],["Iterator",18,80]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ObjCSelectorSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["ObjCSelectorSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by removing the last element.\n\n- Returns: A new `ObjCSelectorSyntax` with the last element removed."},{"p":["ObjCSelectorSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by removing the first element.\n\n- Returns: A new `ObjCSelectorSyntax` with the first element removed."},{"p":["ObjCSelectorSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ObjCSelectorSyntax",18]],"d":"Returns a new `ObjCSelectorSyntax` with all trivia removed."},{"p":["ObjCSelectorSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Returns a new `ObjCSelectorSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ObjCSelectorSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Returns a new `ObjCSelectorSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ObjCSelectorSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ObjCSelectorSyntax",18]],"d":"Returns a new `ObjCSelectorSyntax` with its leading trivia removed."},{"p":["ObjCSelectorSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ObjCSelectorSyntax",18]],"d":"Returns a new `ObjCSelectorSyntax` with its trailing trivia removed."},{"p":["ObjCSelectorSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["ObjCSelectorSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["ObjCSelectorSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ObjCSelectorPieceSyntax",18,262],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ObjCSelectorPieceSyntax",18],["?",17]],"o":7760},{"p":["ObjCSelectorSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["ObjCSelectorSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ObjCSelectorSyntax` with the element at the provided index\n           removed."},{"p":["ObjCSelectorSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ObjCSelectorPieceSyntax",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ObjCSelectorSyntax` with that element appended to the end."},{"p":["ObjCSelectorSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ObjCSelectorPieceSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ObjCSelectorSyntax` with that element appended to the end."},{"p":["ObjCSelectorSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[") -> ",17],["ObjCSelectorSyntax",18,79]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ObjCSelectorPieceSyntax",18],[") -> ",17],["ObjCSelectorSyntax",18]],"d":"Creates a new `ObjCSelectorSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ObjCSelectorSyntax` with the new element at the provided index."},{"p":["OperatorDeclSyntax","withOperatorPrecedenceAndTypes(_:)"],"f":[["func",12],[" ",17],["withOperatorPrecedenceAndTypes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,410],["?) -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["withOperatorPrecedenceAndTypes",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],["?) -> ",17],["OperatorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `operatorPrecedenceAndTypes` replaced.\n- param newChild: The new `operatorPrecedenceAndTypes` to replace the node's\n                  current `operatorPrecedenceAndTypes`, if present."},{"p":["OperatorDeclSyntax","withOperatorKeyword(_:)"],"f":[["func",12],[" ",17],["withOperatorKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["withOperatorKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OperatorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `operatorKeyword` replaced.\n- param newChild: The new `operatorKeyword` to replace the node's\n                  current `operatorKeyword`, if present."},{"p":["OperatorDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["OperatorDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["OperatorDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["OperatorDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["OperatorDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["OperatorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["OperatorDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["OperatorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["OperatorDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["OperatorDeclSyntax",18,81]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OperatorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present.","o":4573},{"p":["OperatorDeclSyntaxBuilder","useOperatorPrecedenceAndTypes(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOperatorPrecedenceAndTypes",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,410],[")",17]],"s":[["func",12],[" ",17],["useOperatorPrecedenceAndTypes",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[")",17]]},{"p":["OperatorDeclSyntaxBuilder","useOperatorKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOperatorKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useOperatorKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["OperatorDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["OperatorDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["OperatorDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["OptionalTypeSyntax","withWrappedType(_:)"],"f":[["func",12],[" ",17],["withWrappedType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["OptionalTypeSyntax",18,83]],"s":[["func",12],[" ",17],["withWrappedType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["OptionalTypeSyntax",18]],"d":"Returns a copy of the receiver with its `wrappedType` replaced.\n- param newChild: The new `wrappedType` to replace the node's\n                  current `wrappedType`, if present."},{"p":["OptionalTypeSyntax","withQuestionMark(_:)"],"f":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["OptionalTypeSyntax",18,83]],"s":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OptionalTypeSyntax",18]],"d":"Returns a copy of the receiver with its `questionMark` replaced.\n- param newChild: The new `questionMark` to replace the node's\n                  current `questionMark`, if present."},{"p":["OptionalTypeSyntaxBuilder","useWrappedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWrappedType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useWrappedType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["OptionalTypeSyntaxBuilder","useQuestionMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useQuestionMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useQuestionMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ProtocolDeclSyntax","withProtocolKeyword(_:)"],"f":[["func",12],[" ",17],["withProtocolKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withProtocolKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `protocolKeyword` replaced.\n- param newChild: The new `protocolKeyword` to replace the node's\n                  current `protocolKeyword`, if present."},{"p":["ProtocolDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["ProtocolDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["ProtocolDeclSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclBlockSyntax",18,182],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclBlockSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `members` replaced.\n- param newChild: The new `members` to replace the node's\n                  current `members`, if present.","o":6100},{"p":["ProtocolDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["ProtocolDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["ProtocolDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present.","o":6101},{"p":["ProtocolDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present.","o":6102},{"p":["ProtocolDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present.","o":4573},{"p":["ProtocolDeclSyntax","withInheritanceClause(_:)"],"f":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `inheritanceClause` replaced.\n- param newChild: The new `inheritanceClause` to replace the node's\n                  current `inheritanceClause`, if present."},{"p":["ProtocolDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["ProtocolDeclSyntax",18,85]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["ProtocolDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["ProtocolDeclSyntaxBuilder","useProtocolKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useProtocolKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useProtocolKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ProtocolDeclSyntaxBuilder","useMembers(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMembers",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["useMembers",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]]},{"p":["ProtocolDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["ProtocolDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["ProtocolDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ProtocolDeclSyntaxBuilder","useInheritanceClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritanceClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],[")",17]],"s":[["func",12],[" ",17],["useInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["ProtocolDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["ReturnClauseSyntax","withReturnType(_:)"],"f":[["func",12],[" ",17],["withReturnType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["ReturnClauseSyntax",18,87]],"s":[["func",12],[" ",17],["withReturnType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["ReturnClauseSyntax",18]],"d":"Returns a copy of the receiver with its `returnType` replaced.\n- param newChild: The new `returnType` to replace the node's\n                  current `returnType`, if present."},{"p":["ReturnClauseSyntax","withArrow(_:)"],"f":[["func",12],[" ",17],["withArrow",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ReturnClauseSyntax",18,87]],"s":[["func",12],[" ",17],["withArrow",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ReturnClauseSyntax",18]],"d":"Returns a copy of the receiver with its `arrow` replaced.\n- param newChild: The new `arrow` to replace the node's\n                  current `arrow`, if present."},{"p":["ReturnClauseSyntaxBuilder","useReturnType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useReturnType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useReturnType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ReturnClauseSyntaxBuilder","useArrow(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArrow",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useArrow",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SequenceExprSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ExprSyntax",18,441],[") -> ",17],["SequenceExprSyntax",18,89]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["ExprSyntax",18],[") -> ",17],["SequenceExprSyntax",18]],"d":"Adds the provided `Element` to the node's `elements`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elements` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elements` collection."},{"p":["SequenceExprSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprListSyntax",18,463],["?) -> ",17],["SequenceExprSyntax",18,89]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["ExprListSyntax",18],["?) -> ",17],["SequenceExprSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["SequenceExprSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["SuperRefExprSyntax","withSuperKeyword(_:)"],"f":[["func",12],[" ",17],["withSuperKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SuperRefExprSyntax",18,91]],"s":[["func",12],[" ",17],["withSuperKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SuperRefExprSyntax",18]],"d":"Returns a copy of the receiver with its `superKeyword` replaced.\n- param newChild: The new `superKeyword` to replace the node's\n                  current `superKeyword`, if present."},{"p":["SuperRefExprSyntaxBuilder","useSuperKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSuperKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useSuperKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TuplePatternSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["TuplePatternSyntax",18,93]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["TuplePatternElementSyntax",18],[") -> ",17],["TuplePatternSyntax",18]],"d":"Adds the provided `Element` to the node's `elements`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elements` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elements` collection."},{"p":["TuplePatternSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TuplePatternElementListSyntax",18,394],["?) -> ",17],["TuplePatternSyntax",18,93]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["TuplePatternElementListSyntax",18],["?) -> ",17],["TuplePatternSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["TuplePatternSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TuplePatternSyntax",18,93]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TuplePatternSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["TuplePatternSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TuplePatternSyntax",18,93]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TuplePatternSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["TuplePatternSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TuplePatternElementSyntax",18,320],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["TuplePatternElementSyntax",18],[")",17]]},{"p":["TuplePatternSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TuplePatternSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["VariableDeclSyntax","addBinding(_:)"],"f":[["func",12],[" ",17],["addBinding",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["addBinding",7],["(",17],["PatternBindingSyntax",18],[") -> ",17],["VariableDeclSyntax",18]],"d":"Adds the provided `Binding` to the node's `bindings`\ncollection.\n- param element: The new `Binding` to add to the node's\n                 `bindings` collection.\n- returns: A copy of the receiver with the provided `Binding`\n           appended to its `bindings` collection."},{"p":["VariableDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["VariableDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["VariableDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["VariableDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["VariableDeclSyntax","withBindings(_:)"],"f":[["func",12],[" ",17],["withBindings",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternBindingListSyntax",18,294],["?) -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["withBindings",7],["(",17],["PatternBindingListSyntax",18],["?) -> ",17],["VariableDeclSyntax",18]],"d":"Returns a copy of the receiver with its `bindings` replaced.\n- param newChild: The new `bindings` to replace the node's\n                  current `bindings`, if present."},{"p":["VariableDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["VariableDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["VariableDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["VariableDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["VariableDeclSyntax","withLetOrVarKeyword(_:)"],"f":[["func",12],[" ",17],["withLetOrVarKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["VariableDeclSyntax",18,95]],"s":[["func",12],[" ",17],["withLetOrVarKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["VariableDeclSyntax",18]],"d":"Returns a copy of the receiver with its `letOrVarKeyword` replaced.\n- param newChild: The new `letOrVarKeyword` to replace the node's\n                  current `letOrVarKeyword`, if present."},{"p":["VariableDeclSyntaxBuilder","addBinding(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addBinding",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["PatternBindingSyntax",18,149],[")",17]],"s":[["func",12],[" ",17],["addBinding",7],["(",17],["PatternBindingSyntax",18],[")",17]]},{"p":["VariableDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["VariableDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["VariableDeclSyntaxBuilder","useLetOrVarKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLetOrVarKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLetOrVarKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["VersionTupleSyntax","withPatchVersion(_:)"],"f":[["func",12],[" ",17],["withPatchVersion",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["VersionTupleSyntax",18,97]],"s":[["func",12],[" ",17],["withPatchVersion",7],["(",17],["TokenSyntax",18],["?) -> ",17],["VersionTupleSyntax",18]],"d":"Returns a copy of the receiver with its `patchVersion` replaced.\n- param newChild: The new `patchVersion` to replace the node's\n                  current `patchVersion`, if present."},{"p":["VersionTupleSyntax","withMajorMinor(_:)"],"f":[["func",12],[" ",17],["withMajorMinor",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["VersionTupleSyntax",18,97]],"s":[["func",12],[" ",17],["withMajorMinor",7],["(",17],["Syntax",18],["?) -> ",17],["VersionTupleSyntax",18]],"d":"Returns a copy of the receiver with its `majorMinor` replaced.\n- param newChild: The new `majorMinor` to replace the node's\n                  current `majorMinor`, if present."},{"p":["VersionTupleSyntax","withPatchPeriod(_:)"],"f":[["func",12],[" ",17],["withPatchPeriod",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["VersionTupleSyntax",18,97]],"s":[["func",12],[" ",17],["withPatchPeriod",7],["(",17],["TokenSyntax",18],["?) -> ",17],["VersionTupleSyntax",18]],"d":"Returns a copy of the receiver with its `patchPeriod` replaced.\n- param newChild: The new `patchPeriod` to replace the node's\n                  current `patchPeriod`, if present."},{"p":["VersionTupleSyntaxBuilder","usePatchVersion(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePatchVersion",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePatchVersion",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["VersionTupleSyntaxBuilder","useMajorMinor(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMajorMinor",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useMajorMinor",7],["(",17],["Syntax",18],[")",17]]},{"p":["VersionTupleSyntaxBuilder","usePatchPeriod(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePatchPeriod",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePatchPeriod",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorBlockSyntax","addAccessor(_:)"],"f":[["func",12],[" ",17],["addAccessor",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["AccessorBlockSyntax",18,99]],"s":[["func",12],[" ",17],["addAccessor",7],["(",17],["AccessorDeclSyntax",18],[") -> ",17],["AccessorBlockSyntax",18]],"d":"Adds the provided `Accessor` to the node's `accessors`\ncollection.\n- param element: The new `Accessor` to add to the node's\n                 `accessors` collection.\n- returns: A copy of the receiver with the provided `Accessor`\n           appended to its `accessors` collection."},{"p":["AccessorBlockSyntax","withAccessors(_:)"],"f":[["func",12],[" ",17],["withAccessors",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AccessorListSyntax",18,55],["?) -> ",17],["AccessorBlockSyntax",18,99]],"s":[["func",12],[" ",17],["withAccessors",7],["(",17],["AccessorListSyntax",18],["?) -> ",17],["AccessorBlockSyntax",18]],"d":"Returns a copy of the receiver with its `accessors` replaced.\n- param newChild: The new `accessors` to replace the node's\n                  current `accessors`, if present."},{"p":["AccessorBlockSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessorBlockSyntax",18,99]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorBlockSyntax",18]],"d":"Returns a copy of the receiver with its `leftBrace` replaced.\n- param newChild: The new `leftBrace` to replace the node's\n                  current `leftBrace`, if present.","o":5917},{"p":["AccessorBlockSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessorBlockSyntax",18,99]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorBlockSyntax",18]],"d":"Returns a copy of the receiver with its `rightBrace` replaced.\n- param newChild: The new `rightBrace` to replace the node's\n                  current `rightBrace`, if present.","o":5918},{"p":["AccessorBlockSyntaxBuilder","addAccessor(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAccessor",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["AccessorDeclSyntax",18,53],[")",17]],"s":[["func",12],[" ",17],["addAccessor",7],["(",17],["AccessorDeclSyntax",18],[")",17]]},{"p":["AccessorBlockSyntaxBuilder","useLeftBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorBlockSyntaxBuilder","useRightBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AsTypePatternSyntax","withAsKeyword(_:)"],"f":[["func",12],[" ",17],["withAsKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AsTypePatternSyntax",18,101]],"s":[["func",12],[" ",17],["withAsKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AsTypePatternSyntax",18]],"d":"Returns a copy of the receiver with its `asKeyword` replaced.\n- param newChild: The new `asKeyword` to replace the node's\n                  current `asKeyword`, if present."},{"p":["AsTypePatternSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["AsTypePatternSyntax",18,101]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["AsTypePatternSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["AsTypePatternSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,453],["?) -> ",17],["AsTypePatternSyntax",18,101]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["AsTypePatternSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["AsTypePatternSyntaxBuilder","useAsKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAsKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AsTypePatternSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["AsTypePatternSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["AttributeListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["Syntax",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `AttributeListSyntax` with that element prepended to the\n           beginning."},{"p":["AttributeListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AttributeListSyntax",18,103],[".",17],["Iterator",18,104]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AttributeListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["AttributeListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by removing the last element.\n\n- Returns: A new `AttributeListSyntax` with the last element removed."},{"p":["AttributeListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by removing the first element.\n\n- Returns: A new `AttributeListSyntax` with the first element removed."},{"p":["AttributeListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AttributeListSyntax",18]],"d":"Returns a new `AttributeListSyntax` with all trivia removed."},{"p":["AttributeListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Returns a new `AttributeListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["AttributeListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Returns a new `AttributeListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["AttributeListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AttributeListSyntax",18]],"d":"Returns a new `AttributeListSyntax` with its leading trivia removed."},{"p":["AttributeListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AttributeListSyntax",18]],"d":"Returns a new `AttributeListSyntax` with its trailing trivia removed."},{"p":["AttributeListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["AttributeListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["AttributeListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18,513],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18],["?",17]],"o":7760},{"p":["AttributeListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["AttributeListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `AttributeListSyntax` with the element at the provided index\n           removed."},{"p":["AttributeListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["appending",7],["(",17],["Syntax",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `AttributeListSyntax` with that element appended to the end."},{"p":["AttributeListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["Syntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `AttributeListSyntax` with that element appended to the end."},{"p":["AttributeListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["AttributeListSyntax",18,103]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["Syntax",18],[") -> ",17],["AttributeListSyntax",18]],"d":"Creates a new `AttributeListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `AttributeListSyntax` with the new element at the provided index."},{"p":["CatchItemListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CatchItemSyntax",18,483],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["CatchItemSyntax",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `CatchItemListSyntax` with that element prepended to the\n           beginning."},{"p":["CatchItemListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CatchItemListSyntax",18,105],[".",17],["Iterator",18,106]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CatchItemListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["CatchItemListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by removing the last element.\n\n- Returns: A new `CatchItemListSyntax` with the last element removed."},{"p":["CatchItemListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by removing the first element.\n\n- Returns: A new `CatchItemListSyntax` with the first element removed."},{"p":["CatchItemListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CatchItemListSyntax",18]],"d":"Returns a new `CatchItemListSyntax` with all trivia removed."},{"p":["CatchItemListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Returns a new `CatchItemListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["CatchItemListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Returns a new `CatchItemListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["CatchItemListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CatchItemListSyntax",18]],"d":"Returns a new `CatchItemListSyntax` with its leading trivia removed."},{"p":["CatchItemListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CatchItemListSyntax",18]],"d":"Returns a new `CatchItemListSyntax` with its trailing trivia removed."},{"p":["CatchItemListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["CatchItemListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["CatchItemListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["CatchItemSyntax",18,483],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["CatchItemSyntax",18],["?",17]],"o":7760},{"p":["CatchItemListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["CatchItemListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `CatchItemListSyntax` with the element at the provided index\n           removed."},{"p":["CatchItemListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CatchItemSyntax",18,483],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["appending",7],["(",17],["CatchItemSyntax",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `CatchItemListSyntax` with that element appended to the end."},{"p":["CatchItemListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CatchItemSyntax",18,483],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["CatchItemSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `CatchItemListSyntax` with that element appended to the end."},{"p":["CatchItemListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["CatchItemSyntax",18,483],[") -> ",17],["CatchItemListSyntax",18,105]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["CatchItemSyntax",18],[") -> ",17],["CatchItemListSyntax",18]],"d":"Creates a new `CatchItemListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `CatchItemListSyntax` with the new element at the provided index."},{"p":["CodeBlockItemSyntax","withItem(_:)"],"f":[["func",12],[" ",17],["withItem",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["CodeBlockItemSyntax",18,107]],"s":[["func",12],[" ",17],["withItem",7],["(",17],["Syntax",18],["?) -> ",17],["CodeBlockItemSyntax",18]],"d":"Returns a copy of the receiver with its `item` replaced.\n- param newChild: The new `item` to replace the node's\n                  current `item`, if present."},{"p":["CodeBlockItemSyntax","withSemicolon(_:)"],"f":[["func",12],[" ",17],["withSemicolon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CodeBlockItemSyntax",18,107]],"s":[["func",12],[" ",17],["withSemicolon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CodeBlockItemSyntax",18]],"d":"Returns a copy of the receiver with its `semicolon` replaced.\n- param newChild: The new `semicolon` to replace the node's\n                  current `semicolon`, if present."},{"p":["CodeBlockItemSyntax","withErrorTokens(_:)"],"f":[["func",12],[" ",17],["withErrorTokens",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["CodeBlockItemSyntax",18,107]],"s":[["func",12],[" ",17],["withErrorTokens",7],["(",17],["Syntax",18],["?) -> ",17],["CodeBlockItemSyntax",18]],"d":"Returns a copy of the receiver with its `errorTokens` replaced.\n- param newChild: The new `errorTokens` to replace the node's\n                  current `errorTokens`, if present."},{"p":["CodeBlockItemSyntaxBuilder","useItem(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useItem",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useItem",7],["(",17],["Syntax",18],[")",17]]},{"p":["CodeBlockItemSyntaxBuilder","useSemicolon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSemicolon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useSemicolon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CodeBlockItemSyntaxBuilder","useErrorTokens(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useErrorTokens",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useErrorTokens",7],["(",17],["Syntax",18],[")",17]]},{"p":["ExtensionDeclSyntax","withExtensionKeyword(_:)"],"f":[["func",12],[" ",17],["withExtensionKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withExtensionKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `extensionKeyword` replaced.\n- param newChild: The new `extensionKeyword` to replace the node's\n                  current `extensionKeyword`, if present."},{"p":["ExtensionDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["ExtensionDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["ExtensionDeclSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclBlockSyntax",18,182],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclBlockSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `members` replaced.\n- param newChild: The new `members` to replace the node's\n                  current `members`, if present.","o":6100},{"p":["ExtensionDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["ExtensionDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["ExtensionDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present.","o":6101},{"p":["ExtensionDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present.","o":6102},{"p":["ExtensionDeclSyntax","withExtendedType(_:)"],"f":[["func",12],[" ",17],["withExtendedType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withExtendedType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `extendedType` replaced.\n- param newChild: The new `extendedType` to replace the node's\n                  current `extendedType`, if present."},{"p":["ExtensionDeclSyntax","withInheritanceClause(_:)"],"f":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `inheritanceClause` replaced.\n- param newChild: The new `inheritanceClause` to replace the node's\n                  current `inheritanceClause`, if present."},{"p":["ExtensionDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["ExtensionDeclSyntax",18,109]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["ExtensionDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["ExtensionDeclSyntaxBuilder","useExtensionKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExtensionKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useExtensionKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ExtensionDeclSyntaxBuilder","useMembers(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMembers",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["useMembers",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]]},{"p":["ExtensionDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["ExtensionDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["ExtensionDeclSyntaxBuilder","useExtendedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExtendedType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useExtendedType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ExtensionDeclSyntaxBuilder","useInheritanceClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritanceClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],[")",17]],"s":[["func",12],[" ",17],["useInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["ExtensionDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["InheritedTypeSyntax","withTypeName(_:)"],"f":[["func",12],[" ",17],["withTypeName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["InheritedTypeSyntax",18,111]],"s":[["func",12],[" ",17],["withTypeName",7],["(",17],["TypeSyntax",18],["?) -> ",17],["InheritedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `typeName` replaced.\n- param newChild: The new `typeName` to replace the node's\n                  current `typeName`, if present."},{"p":["InheritedTypeSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["InheritedTypeSyntax",18,111]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["InheritedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["InheritedTypeSyntaxBuilder","useTypeName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useTypeName",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["InheritedTypeSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IsTypePatternSyntax","withIsKeyword(_:)"],"f":[["func",12],[" ",17],["withIsKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["IsTypePatternSyntax",18,113]],"s":[["func",12],[" ",17],["withIsKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IsTypePatternSyntax",18]],"d":"Returns a copy of the receiver with its `isKeyword` replaced.\n- param newChild: The new `isKeyword` to replace the node's\n                  current `isKeyword`, if present."},{"p":["IsTypePatternSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["IsTypePatternSyntax",18,113]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["IsTypePatternSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["IsTypePatternSyntaxBuilder","useIsKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIsKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIsKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IsTypePatternSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ObjcNamePieceSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjcNamePieceSyntax",18,115]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcNamePieceSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["ObjcNamePieceSyntax","withDot(_:)"],"f":[["func",12],[" ",17],["withDot",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjcNamePieceSyntax",18,115]],"s":[["func",12],[" ",17],["withDot",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcNamePieceSyntax",18]],"d":"Returns a copy of the receiver with its `dot` replaced.\n- param newChild: The new `dot` to replace the node's\n                  current `dot`, if present."},{"p":["ObjcNamePieceSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcNamePieceSyntaxBuilder","useDot(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDot",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDot",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ParenthesizedSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["ParenthesizedSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["PoundFileExprSyntax","withPoundFile(_:)"],"f":[["func",12],[" ",17],["withPoundFile",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundFileExprSyntax",18,117]],"s":[["func",12],[" ",17],["withPoundFile",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundFileExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundFile` replaced.\n- param newChild: The new `poundFile` to replace the node's\n                  current `poundFile`, if present."},{"p":["PoundFileExprSyntaxBuilder","usePoundFile(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundFile",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundFile",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundLineExprSyntax","withPoundLine(_:)"],"f":[["func",12],[" ",17],["withPoundLine",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundLineExprSyntax",18,119]],"s":[["func",12],[" ",17],["withPoundLine",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundLineExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundLine` replaced.\n- param newChild: The new `poundLine` to replace the node's\n                  current `poundLine`, if present."},{"p":["PoundLineExprSyntaxBuilder","usePoundLine(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundLine",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundLine",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StringSegmentSyntax","withContent(_:)"],"f":[["func",12],[" ",17],["withContent",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["StringSegmentSyntax",18,121]],"s":[["func",12],[" ",17],["withContent",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StringSegmentSyntax",18]],"d":"Returns a copy of the receiver with its `content` replaced.\n- param newChild: The new `content` to replace the node's\n                  current `content`, if present."},{"p":["StringSegmentSyntaxBuilder","useContent(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useContent",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useContent",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SubscriptDeclSyntax","withSubscriptKeyword(_:)"],"f":[["func",12],[" ",17],["withSubscriptKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withSubscriptKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `subscriptKeyword` replaced.\n- param newChild: The new `subscriptKeyword` to replace the node's\n                  current `subscriptKeyword`, if present."},{"p":["SubscriptDeclSyntax","withResult(_:)"],"f":[["func",12],[" ",17],["withResult",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ReturnClauseSyntax",18,87],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withResult",7],["(",17],["ReturnClauseSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `result` replaced.\n- param newChild: The new `result` to replace the node's\n                  current `result`, if present."},{"p":["SubscriptDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["SubscriptDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["SubscriptDeclSyntax","withIndices(_:)"],"f":[["func",12],[" ",17],["withIndices",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ParameterClauseSyntax",18,188],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withIndices",7],["(",17],["ParameterClauseSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `indices` replaced.\n- param newChild: The new `indices` to replace the node's\n                  current `indices`, if present."},{"p":["SubscriptDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["SubscriptDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["SubscriptDeclSyntax","withAccessor(_:)"],"f":[["func",12],[" ",17],["withAccessor",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withAccessor",7],["(",17],["Syntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `accessor` replaced.\n- param newChild: The new `accessor` to replace the node's\n                  current `accessor`, if present."},{"p":["SubscriptDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["SubscriptDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["SubscriptDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["SubscriptDeclSyntax","withGenericParameterClause(_:)"],"f":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,378],["?) -> ",17],["SubscriptDeclSyntax",18,123]],"s":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["SubscriptDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterClause` replaced.\n- param newChild: The new `genericParameterClause` to replace the node's\n                  current `genericParameterClause`, if present."},{"p":["SubscriptDeclSyntaxBuilder","useSubscriptKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSubscriptKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useSubscriptKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","useIndices(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIndices",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["func",12],[" ",17],["useIndices",7],["(",17],["ParameterClauseSyntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","useAccessor(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAccessor",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useAccessor",7],["(",17],["Syntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","useGenericParameterClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,378],[")",17]],"s":[["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["SubscriptDeclSyntaxBuilder","useResult(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useResult",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[")",17]],"s":[["func",12],[" ",17],["useResult",7],["(",17],["ReturnClauseSyntax",18],[")",17]]},{"p":["SubscriptExprSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["SubscriptExprSyntax",18]],"d":"Adds the provided `Argument` to the node's `argumentList`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `argumentList` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `argumentList` collection."},{"p":["SubscriptExprSyntax","withLeftBracket(_:)"],"f":[["func",12],[" ",17],["withLeftBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["withLeftBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftBracket` replaced.\n- param newChild: The new `leftBracket` to replace the node's\n                  current `leftBracket`, if present."},{"p":["SubscriptExprSyntax","withArgumentList(_:)"],"f":[["func",12],[" ",17],["withArgumentList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleExprElementListSyntax",18,342],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["withArgumentList",7],["(",17],["TupleExprElementListSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]],"d":"Returns a copy of the receiver with its `argumentList` replaced.\n- param newChild: The new `argumentList` to replace the node's\n                  current `argumentList`, if present."},{"p":["SubscriptExprSyntax","withRightBracket(_:)"],"f":[["func",12],[" ",17],["withRightBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["withRightBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightBracket` replaced.\n- param newChild: The new `rightBracket` to replace the node's\n                  current `rightBracket`, if present."},{"p":["SubscriptExprSyntax","withTrailingClosure(_:)"],"f":[["func",12],[" ",17],["withTrailingClosure",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ClosureExprSyntax",18,41],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["withTrailingClosure",7],["(",17],["ClosureExprSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]],"d":"Returns a copy of the receiver with its `trailingClosure` replaced.\n- param newChild: The new `trailingClosure` to replace the node's\n                  current `trailingClosure`, if present."},{"p":["SubscriptExprSyntax","withCalledExpression(_:)"],"f":[["func",12],[" ",17],["withCalledExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["withCalledExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]],"d":"Returns a copy of the receiver with its `calledExpression` replaced.\n- param newChild: The new `calledExpression` to replace the node's\n                  current `calledExpression`, if present."},{"p":["SubscriptExprSyntax","addAdditionalTrailingClosure(_:)"],"f":[["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],[") -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["SubscriptExprSyntax",18]],"d":"Adds the provided `AdditionalTrailingClosure` to the node's `additionalTrailingClosures`\ncollection.\n- param element: The new `AdditionalTrailingClosure` to add to the node's\n                 `additionalTrailingClosures` collection.\n- returns: A copy of the receiver with the provided `AdditionalTrailingClosure`\n           appended to its `additionalTrailingClosures` collection."},{"p":["SubscriptExprSyntax","withAdditionalTrailingClosures(_:)"],"f":[["func",12],[" ",17],["withAdditionalTrailingClosures",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,436],["?) -> ",17],["SubscriptExprSyntax",18,125]],"s":[["func",12],[" ",17],["withAdditionalTrailingClosures",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],["?) -> ",17],["SubscriptExprSyntax",18]],"d":"Returns a copy of the receiver with its `additionalTrailingClosures` replaced.\n- param newChild: The new `additionalTrailingClosures` to replace the node's\n                  current `additionalTrailingClosures`, if present."},{"p":["SubscriptExprSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["SubscriptExprSyntaxBuilder","useLeftBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SubscriptExprSyntaxBuilder","useRightBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SubscriptExprSyntaxBuilder","useTrailingClosure(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingClosure",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[")",17]],"s":[["func",12],[" ",17],["useTrailingClosure",7],["(",17],["ClosureExprSyntax",18],[")",17]]},{"p":["SubscriptExprSyntaxBuilder","useCalledExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCalledExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useCalledExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["SubscriptExprSyntaxBuilder","addAdditionalTrailingClosure(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],[")",17]],"s":[["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[")",17]]},{"p":["TypealiasDeclSyntax","withTypealiasKeyword(_:)"],"f":[["func",12],[" ",17],["withTypealiasKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withTypealiasKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `typealiasKeyword` replaced.\n- param newChild: The new `typealiasKeyword` to replace the node's\n                  current `typealiasKeyword`, if present."},{"p":["TypealiasDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["TypealiasDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["TypealiasDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["TypealiasDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["TypealiasDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["TypealiasDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["TypealiasDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present.","o":4573},{"p":["TypealiasDeclSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInitializerClauseSyntax",18,366],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["TypeInitializerClauseSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["TypealiasDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["TypealiasDeclSyntax","withGenericParameterClause(_:)"],"f":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,378],["?) -> ",17],["TypealiasDeclSyntax",18,127]],"s":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["TypealiasDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterClause` replaced.\n- param newChild: The new `genericParameterClause` to replace the node's\n                  current `genericParameterClause`, if present."},{"p":["TypealiasDeclSyntaxBuilder","useTypealiasKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypealiasKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTypealiasKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TypealiasDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["TypealiasDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["TypealiasDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TypealiasDeclSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,366],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["TypeInitializerClauseSyntax",18],[")",17]]},{"p":["TypealiasDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["TypealiasDeclSyntaxBuilder","useGenericParameterClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,378],[")",17]],"s":[["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["WithCodeBlockSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["Self",18]]},{"p":["AssignmentExprSyntax","withAssignToken(_:)"],"f":[["func",12],[" ",17],["withAssignToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AssignmentExprSyntax",18,129]],"s":[["func",12],[" ",17],["withAssignToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AssignmentExprSyntax",18]],"d":"Returns a copy of the receiver with its `assignToken` replaced.\n- param newChild: The new `assignToken` to replace the node's\n                  current `assignToken`, if present."},{"p":["AssignmentExprSyntaxBuilder","useAssignToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssignToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAssignToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AttributedTypeSyntax","withBaseType(_:)"],"f":[["func",12],[" ",17],["withBaseType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["AttributedTypeSyntax",18,131]],"s":[["func",12],[" ",17],["withBaseType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["AttributedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `baseType` replaced.\n- param newChild: The new `baseType` to replace the node's\n                  current `baseType`, if present."},{"p":["AttributedTypeSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["AttributedTypeSyntax",18,131]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["AttributedTypeSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["AttributedTypeSyntax","withSpecifier(_:)"],"f":[["func",12],[" ",17],["withSpecifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AttributedTypeSyntax",18,131]],"s":[["func",12],[" ",17],["withSpecifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AttributedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `specifier` replaced.\n- param newChild: The new `specifier` to replace the node's\n                  current `specifier`, if present."},{"p":["AttributedTypeSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["AttributedTypeSyntax",18,131]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["AttributedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["AttributedTypeSyntaxBuilder","useBaseType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBaseType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useBaseType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["AttributedTypeSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["AttributedTypeSyntaxBuilder","useSpecifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSpecifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useSpecifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DictionaryExprSyntax","withContent(_:)"],"f":[["func",12],[" ",17],["withContent",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["DictionaryExprSyntax",18,133]],"s":[["func",12],[" ",17],["withContent",7],["(",17],["Syntax",18],["?) -> ",17],["DictionaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `content` replaced.\n- param newChild: The new `content` to replace the node's\n                  current `content`, if present."},{"p":["DictionaryExprSyntax","withLeftSquare(_:)"],"f":[["func",12],[" ",17],["withLeftSquare",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DictionaryExprSyntax",18,133]],"s":[["func",12],[" ",17],["withLeftSquare",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftSquare` replaced.\n- param newChild: The new `leftSquare` to replace the node's\n                  current `leftSquare`, if present."},{"p":["DictionaryExprSyntax","withRightSquare(_:)"],"f":[["func",12],[" ",17],["withRightSquare",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DictionaryExprSyntax",18,133]],"s":[["func",12],[" ",17],["withRightSquare",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightSquare` replaced.\n- param newChild: The new `rightSquare` to replace the node's\n                  current `rightSquare`, if present."},{"p":["DictionaryExprSyntaxBuilder","useContent(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useContent",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useContent",7],["(",17],["Syntax",18],[")",17]]},{"p":["DictionaryExprSyntaxBuilder","useLeftSquare(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftSquare",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftSquare",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DictionaryExprSyntaxBuilder","useRightSquare(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightSquare",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightSquare",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DictionaryTypeSyntax","withKeyType(_:)"],"f":[["func",12],[" ",17],["withKeyType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["func",12],[" ",17],["withKeyType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["DictionaryTypeSyntax",18]],"d":"Returns a copy of the receiver with its `keyType` replaced.\n- param newChild: The new `keyType` to replace the node's\n                  current `keyType`, if present."},{"p":["DictionaryTypeSyntax","withValueType(_:)"],"f":[["func",12],[" ",17],["withValueType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["func",12],[" ",17],["withValueType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["DictionaryTypeSyntax",18]],"d":"Returns a copy of the receiver with its `valueType` replaced.\n- param newChild: The new `valueType` to replace the node's\n                  current `valueType`, if present."},{"p":["DictionaryTypeSyntax","withLeftSquareBracket(_:)"],"f":[["func",12],[" ",17],["withLeftSquareBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["func",12],[" ",17],["withLeftSquareBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryTypeSyntax",18]],"d":"Returns a copy of the receiver with its `leftSquareBracket` replaced.\n- param newChild: The new `leftSquareBracket` to replace the node's\n                  current `leftSquareBracket`, if present."},{"p":["DictionaryTypeSyntax","withRightSquareBracket(_:)"],"f":[["func",12],[" ",17],["withRightSquareBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["func",12],[" ",17],["withRightSquareBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryTypeSyntax",18]],"d":"Returns a copy of the receiver with its `rightSquareBracket` replaced.\n- param newChild: The new `rightSquareBracket` to replace the node's\n                  current `rightSquareBracket`, if present."},{"p":["DictionaryTypeSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DictionaryTypeSyntax",18,135]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryTypeSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["DictionaryTypeSyntaxBuilder","useKeyType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useKeyType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useKeyType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["DictionaryTypeSyntaxBuilder","useValueType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValueType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useValueType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["DictionaryTypeSyntaxBuilder","useLeftSquareBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftSquareBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftSquareBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DictionaryTypeSyntaxBuilder","useRightSquareBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightSquareBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightSquareBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DictionaryTypeSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ExpressionStmtSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["ExpressionStmtSyntax",18,137]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ExpressionStmtSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ExpressionStmtSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["IdentifiedDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["IdentifierExprSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["IdentifierExprSyntax",18,139]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IdentifierExprSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["IdentifierExprSyntax","withDeclNameArguments(_:)"],"f":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["IdentifierExprSyntax",18,139]],"s":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["IdentifierExprSyntax",18]],"d":"Returns a copy of the receiver with its `declNameArguments` replaced.\n- param newChild: The new `declNameArguments` to replace the node's\n                  current `declNameArguments`, if present."},{"p":["IdentifierExprSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IdentifierExprSyntaxBuilder","useDeclNameArguments(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["IdentifierListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["TokenSyntax",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `IdentifierListSyntax` with that element prepended to the\n           beginning."},{"p":["IdentifierListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["IdentifierListSyntax",18,141],[".",17],["Iterator",18,142]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["IdentifierListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["IdentifierListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by removing the last element.\n\n- Returns: A new `IdentifierListSyntax` with the last element removed."},{"p":["IdentifierListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by removing the first element.\n\n- Returns: A new `IdentifierListSyntax` with the first element removed."},{"p":["IdentifierListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["IdentifierListSyntax",18]],"d":"Returns a new `IdentifierListSyntax` with all trivia removed."},{"p":["IdentifierListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Returns a new `IdentifierListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["IdentifierListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Returns a new `IdentifierListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["IdentifierListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["IdentifierListSyntax",18]],"d":"Returns a new `IdentifierListSyntax` with its leading trivia removed."},{"p":["IdentifierListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["IdentifierListSyntax",18]],"d":"Returns a new `IdentifierListSyntax` with its trailing trivia removed."},{"p":["IdentifierListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["IdentifierListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["IdentifierListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18,444],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18],["?",17]],"o":7760},{"p":["IdentifierListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["IdentifierListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `IdentifierListSyntax` with the element at the provided index\n           removed."},{"p":["IdentifierListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TokenSyntax",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `IdentifierListSyntax` with that element appended to the end."},{"p":["IdentifierListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,444],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["TokenSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `IdentifierListSyntax` with that element appended to the end."},{"p":["IdentifierListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["IdentifierListSyntax",18,141]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["TokenSyntax",18],[") -> ",17],["IdentifierListSyntax",18]],"d":"Creates a new `IdentifierListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `IdentifierListSyntax` with the new element at the provided index."},{"p":["IfConfigClauseSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["IfConfigClauseSyntax",18,143]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["Syntax",18],["?) -> ",17],["IfConfigClauseSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["IfConfigClauseSyntax","withCondition(_:)"],"f":[["func",12],[" ",17],["withCondition",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["IfConfigClauseSyntax",18,143]],"s":[["func",12],[" ",17],["withCondition",7],["(",17],["ExprSyntax",18],["?) -> ",17],["IfConfigClauseSyntax",18]],"d":"Returns a copy of the receiver with its `condition` replaced.\n- param newChild: The new `condition` to replace the node's\n                  current `condition`, if present."},{"p":["IfConfigClauseSyntax","withPoundKeyword(_:)"],"f":[["func",12],[" ",17],["withPoundKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["IfConfigClauseSyntax",18,143]],"s":[["func",12],[" ",17],["withPoundKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IfConfigClauseSyntax",18]],"d":"Returns a copy of the receiver with its `poundKeyword` replaced.\n- param newChild: The new `poundKeyword` to replace the node's\n                  current `poundKeyword`, if present."},{"p":["IfConfigClauseSyntaxBuilder","useElements(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useElements",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useElements",7],["(",17],["Syntax",18],[")",17]]},{"p":["IfConfigClauseSyntaxBuilder","useCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCondition",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useCondition",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["IfConfigClauseSyntaxBuilder","usePoundKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberDeclListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["MemberDeclListItemSyntax",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `MemberDeclListSyntax` with that element prepended to the\n           beginning."},{"p":["MemberDeclListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["MemberDeclListSyntax",18,145],[".",17],["Iterator",18,146]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["MemberDeclListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["MemberDeclListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by removing the last element.\n\n- Returns: A new `MemberDeclListSyntax` with the last element removed."},{"p":["MemberDeclListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by removing the first element.\n\n- Returns: A new `MemberDeclListSyntax` with the first element removed."},{"p":["MemberDeclListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["MemberDeclListSyntax",18]],"d":"Returns a new `MemberDeclListSyntax` with all trivia removed."},{"p":["MemberDeclListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Returns a new `MemberDeclListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["MemberDeclListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Returns a new `MemberDeclListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["MemberDeclListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["MemberDeclListSyntax",18]],"d":"Returns a new `MemberDeclListSyntax` with its leading trivia removed."},{"p":["MemberDeclListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["MemberDeclListSyntax",18]],"d":"Returns a new `MemberDeclListSyntax` with its trailing trivia removed."},{"p":["MemberDeclListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["MemberDeclListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["MemberDeclListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["MemberDeclListItemSyntax",18,292],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["MemberDeclListItemSyntax",18],["?",17]],"o":7760},{"p":["MemberDeclListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["MemberDeclListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `MemberDeclListSyntax` with the element at the provided index\n           removed."},{"p":["MemberDeclListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["appending",7],["(",17],["MemberDeclListItemSyntax",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `MemberDeclListSyntax` with that element appended to the end."},{"p":["MemberDeclListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["MemberDeclListItemSyntax",18,292],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["MemberDeclListItemSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `MemberDeclListSyntax` with that element appended to the end."},{"p":["MemberDeclListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["MemberDeclListSyntax",18,145]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["MemberDeclListItemSyntax",18],[") -> ",17],["MemberDeclListSyntax",18]],"d":"Creates a new `MemberDeclListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `MemberDeclListSyntax` with the new element at the provided index."},{"p":["NilLiteralExprSyntax","withNilKeyword(_:)"],"f":[["func",12],[" ",17],["withNilKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["NilLiteralExprSyntax",18,147]],"s":[["func",12],[" ",17],["withNilKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["NilLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `nilKeyword` replaced.\n- param newChild: The new `nilKeyword` to replace the node's\n                  current `nilKeyword`, if present."},{"p":["NilLiteralExprSyntaxBuilder","useNilKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useNilKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useNilKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PatternBindingSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,453],["?) -> ",17],["PatternBindingSyntax",18,149]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["PatternBindingSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["PatternBindingSyntax","withAccessor(_:)"],"f":[["func",12],[" ",17],["withAccessor",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["PatternBindingSyntax",18,149]],"s":[["func",12],[" ",17],["withAccessor",7],["(",17],["Syntax",18],["?) -> ",17],["PatternBindingSyntax",18]],"d":"Returns a copy of the receiver with its `accessor` replaced.\n- param newChild: The new `accessor` to replace the node's\n                  current `accessor`, if present."},{"p":["PatternBindingSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InitializerClauseSyntax",18,258],["?) -> ",17],["PatternBindingSyntax",18,149]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["InitializerClauseSyntax",18],["?) -> ",17],["PatternBindingSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["PatternBindingSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PatternBindingSyntax",18,149]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PatternBindingSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["PatternBindingSyntax","withTypeAnnotation(_:)"],"f":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeAnnotationSyntax",18,157],["?) -> ",17],["PatternBindingSyntax",18,149]],"s":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],["?) -> ",17],["PatternBindingSyntax",18]],"d":"Returns a copy of the receiver with its `typeAnnotation` replaced.\n- param newChild: The new `typeAnnotation` to replace the node's\n                  current `typeAnnotation`, if present."},{"p":["PatternBindingSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["PatternBindingSyntaxBuilder","useAccessor(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAccessor",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useAccessor",7],["(",17],["Syntax",18],[")",17]]},{"p":["PatternBindingSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["PatternBindingSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PatternBindingSyntaxBuilder","useTypeAnnotation(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],[")",17]]},{"p":["PoundErrorDeclSyntax","withPoundError(_:)"],"f":[["func",12],[" ",17],["withPoundError",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundErrorDeclSyntax",18,151]],"s":[["func",12],[" ",17],["withPoundError",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundErrorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `poundError` replaced.\n- param newChild: The new `poundError` to replace the node's\n                  current `poundError`, if present."},{"p":["PoundErrorDeclSyntax","withMessage(_:)"],"f":[["func",12],[" ",17],["withMessage",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["StringLiteralExprSyntax",18,272],["?) -> ",17],["PoundErrorDeclSyntax",18,151]],"s":[["func",12],[" ",17],["withMessage",7],["(",17],["StringLiteralExprSyntax",18],["?) -> ",17],["PoundErrorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `message` replaced.\n- param newChild: The new `message` to replace the node's\n                  current `message`, if present."},{"p":["PoundErrorDeclSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundErrorDeclSyntax",18,151]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundErrorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["PoundErrorDeclSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundErrorDeclSyntax",18,151]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundErrorDeclSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["PoundErrorDeclSyntaxBuilder","usePoundError(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundError",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundError",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundErrorDeclSyntaxBuilder","useMessage(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMessage",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[")",17]],"s":[["func",12],[" ",17],["useMessage",7],["(",17],["StringLiteralExprSyntax",18],[")",17]]},{"p":["PoundErrorDeclSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundErrorDeclSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SpecializeExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["SpecializeExprSyntax",18,153]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["SpecializeExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["SpecializeExprSyntax","withGenericArgumentClause(_:)"],"f":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericArgumentClauseSyntax",18,356],["?) -> ",17],["SpecializeExprSyntax",18,153]],"s":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["SpecializeExprSyntax",18]],"d":"Returns a copy of the receiver with its `genericArgumentClause` replaced.\n- param newChild: The new `genericArgumentClause` to replace the node's\n                  current `genericArgumentClause`, if present."},{"p":["SpecializeExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["SpecializeExprSyntaxBuilder","useGenericArgumentClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,356],[")",17]],"s":[["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]]},{"p":["SwitchCaseListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["Syntax",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `SwitchCaseListSyntax` with that element prepended to the\n           beginning."},{"p":["SwitchCaseListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SwitchCaseListSyntax",18,155],[".",17],["Iterator",18,156]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SwitchCaseListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["SwitchCaseListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by removing the last element.\n\n- Returns: A new `SwitchCaseListSyntax` with the last element removed."},{"p":["SwitchCaseListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by removing the first element.\n\n- Returns: A new `SwitchCaseListSyntax` with the first element removed."},{"p":["SwitchCaseListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["SwitchCaseListSyntax",18]],"d":"Returns a new `SwitchCaseListSyntax` with all trivia removed."},{"p":["SwitchCaseListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Returns a new `SwitchCaseListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["SwitchCaseListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Returns a new `SwitchCaseListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["SwitchCaseListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["SwitchCaseListSyntax",18]],"d":"Returns a new `SwitchCaseListSyntax` with its leading trivia removed."},{"p":["SwitchCaseListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["SwitchCaseListSyntax",18]],"d":"Returns a new `SwitchCaseListSyntax` with its trailing trivia removed."},{"p":["SwitchCaseListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["SwitchCaseListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["SwitchCaseListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18,513],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18],["?",17]],"o":7760},{"p":["SwitchCaseListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["SwitchCaseListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `SwitchCaseListSyntax` with the element at the provided index\n           removed."},{"p":["SwitchCaseListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["appending",7],["(",17],["Syntax",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `SwitchCaseListSyntax` with that element appended to the end."},{"p":["SwitchCaseListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["Syntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `SwitchCaseListSyntax` with that element appended to the end."},{"p":["SwitchCaseListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["SwitchCaseListSyntax",18,155]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["Syntax",18],[") -> ",17],["SwitchCaseListSyntax",18]],"d":"Creates a new `SwitchCaseListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `SwitchCaseListSyntax` with the new element at the provided index."},{"p":["TypeAnnotationSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["TypeAnnotationSyntax",18,157]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["TypeAnnotationSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["TypeAnnotationSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TypeAnnotationSyntax",18,157]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TypeAnnotationSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["TypeAnnotationSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["TypeAnnotationSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WithStatementsSyntax","withStatements(_:)"],"f":[["func",12],[" ",17],["withStatements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockItemListSyntax",18,238],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withStatements",7],["(",17],["CodeBlockItemListSyntax",18],["?) -> ",17],["Self",18]]},{"p":["CatchClauseListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["CatchClauseSyntax",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `CatchClauseListSyntax` with that element prepended to the\n           beginning."},{"p":["CatchClauseListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CatchClauseListSyntax",18,160],[".",17],["Iterator",18,161]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CatchClauseListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["CatchClauseListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by removing the last element.\n\n- Returns: A new `CatchClauseListSyntax` with the last element removed."},{"p":["CatchClauseListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by removing the first element.\n\n- Returns: A new `CatchClauseListSyntax` with the first element removed."},{"p":["CatchClauseListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CatchClauseListSyntax",18]],"d":"Returns a new `CatchClauseListSyntax` with all trivia removed."},{"p":["CatchClauseListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Returns a new `CatchClauseListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["CatchClauseListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Returns a new `CatchClauseListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["CatchClauseListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CatchClauseListSyntax",18]],"d":"Returns a new `CatchClauseListSyntax` with its leading trivia removed."},{"p":["CatchClauseListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CatchClauseListSyntax",18]],"d":"Returns a new `CatchClauseListSyntax` with its trailing trivia removed."},{"p":["CatchClauseListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["CatchClauseListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["CatchClauseListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["CatchClauseSyntax",18,39],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["CatchClauseSyntax",18],["?",17]],"o":7760},{"p":["CatchClauseListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["CatchClauseListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `CatchClauseListSyntax` with the element at the provided index\n           removed."},{"p":["CatchClauseListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["appending",7],["(",17],["CatchClauseSyntax",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `CatchClauseListSyntax` with that element appended to the end."},{"p":["CatchClauseListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CatchClauseSyntax",18,39],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["CatchClauseSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `CatchClauseListSyntax` with that element appended to the end."},{"p":["CatchClauseListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["CatchClauseListSyntax",18,160]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["CatchClauseSyntax",18],[") -> ",17],["CatchClauseListSyntax",18]],"d":"Creates a new `CatchClauseListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `CatchClauseListSyntax` with the new element at the provided index."},{"p":["CompositionTypeSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CompositionTypeElementSyntax",18,372],[") -> ",17],["CompositionTypeSyntax",18,162]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["CompositionTypeElementSyntax",18],[") -> ",17],["CompositionTypeSyntax",18]],"d":"Adds the provided `Element` to the node's `elements`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elements` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elements` collection."},{"p":["CompositionTypeSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CompositionTypeElementListSyntax",18,406],["?) -> ",17],["CompositionTypeSyntax",18,162]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["CompositionTypeElementListSyntax",18],["?) -> ",17],["CompositionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["CompositionTypeSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CompositionTypeElementSyntax",18,372],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["CompositionTypeElementSyntax",18],[")",17]]},{"p":["CustomAttributeSyntax","withAttributeName(_:)"],"f":[["func",12],[" ",17],["withAttributeName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["CustomAttributeSyntax",18,164]],"s":[["func",12],[" ",17],["withAttributeName",7],["(",17],["TypeSyntax",18],["?) -> ",17],["CustomAttributeSyntax",18]],"d":"Returns a copy of the receiver with its `attributeName` replaced.\n- param newChild: The new `attributeName` to replace the node's\n                  current `attributeName`, if present."},{"p":["CustomAttributeSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["CustomAttributeSyntax",18,164]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["CustomAttributeSyntax",18]],"d":"Adds the provided `Argument` to the node's `argumentList`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `argumentList` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `argumentList` collection."},{"p":["CustomAttributeSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CustomAttributeSyntax",18,164]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CustomAttributeSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["CustomAttributeSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CustomAttributeSyntax",18,164]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CustomAttributeSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["CustomAttributeSyntax","withAtSignToken(_:)"],"f":[["func",12],[" ",17],["withAtSignToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CustomAttributeSyntax",18,164]],"s":[["func",12],[" ",17],["withAtSignToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CustomAttributeSyntax",18]],"d":"Returns a copy of the receiver with its `atSignToken` replaced.\n- param newChild: The new `atSignToken` to replace the node's\n                  current `atSignToken`, if present."},{"p":["CustomAttributeSyntax","withArgumentList(_:)"],"f":[["func",12],[" ",17],["withArgumentList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleExprElementListSyntax",18,342],["?) -> ",17],["CustomAttributeSyntax",18,164]],"s":[["func",12],[" ",17],["withArgumentList",7],["(",17],["TupleExprElementListSyntax",18],["?) -> ",17],["CustomAttributeSyntax",18]],"d":"Returns a copy of the receiver with its `argumentList` replaced.\n- param newChild: The new `argumentList` to replace the node's\n                  current `argumentList`, if present."},{"p":["CustomAttributeSyntaxBuilder","useAttributeName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAttributeName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useAttributeName",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["CustomAttributeSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["CustomAttributeSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CustomAttributeSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CustomAttributeSyntaxBuilder","useAtSignToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAtSignToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAtSignToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclarationStmtSyntax","withDeclaration(_:)"],"f":[["func",12],[" ",17],["withDeclaration",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclSyntax",18,440],["?) -> ",17],["DeclarationStmtSyntax",18,166]],"s":[["func",12],[" ",17],["withDeclaration",7],["(",17],["DeclSyntax",18],["?) -> ",17],["DeclarationStmtSyntax",18]],"d":"Returns a copy of the receiver with its `declaration` replaced.\n- param newChild: The new `declaration` to replace the node's\n                  current `declaration`, if present."},{"p":["DeclarationStmtSyntaxBuilder","useDeclaration(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclaration",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclSyntax",18,440],[")",17]],"s":[["func",12],[" ",17],["useDeclaration",7],["(",17],["DeclSyntax",18],[")",17]]},{"p":["EnumCaseElementSyntax","withRawValue(_:)"],"f":[["func",12],[" ",17],["withRawValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InitializerClauseSyntax",18,258],["?) -> ",17],["EnumCaseElementSyntax",18,168]],"s":[["func",12],[" ",17],["withRawValue",7],["(",17],["InitializerClauseSyntax",18],["?) -> ",17],["EnumCaseElementSyntax",18]],"d":"Returns a copy of the receiver with its `rawValue` replaced.\n- param newChild: The new `rawValue` to replace the node's\n                  current `rawValue`, if present."},{"p":["EnumCaseElementSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["EnumCaseElementSyntax",18,168]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumCaseElementSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["EnumCaseElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["EnumCaseElementSyntax",18,168]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumCaseElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["EnumCaseElementSyntax","withAssociatedValue(_:)"],"f":[["func",12],[" ",17],["withAssociatedValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ParameterClauseSyntax",18,188],["?) -> ",17],["EnumCaseElementSyntax",18,168]],"s":[["func",12],[" ",17],["withAssociatedValue",7],["(",17],["ParameterClauseSyntax",18],["?) -> ",17],["EnumCaseElementSyntax",18]],"d":"Returns a copy of the receiver with its `associatedValue` replaced.\n- param newChild: The new `associatedValue` to replace the node's\n                  current `associatedValue`, if present."},{"p":["EnumCaseElementSyntaxBuilder","useRawValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRawValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["useRawValue",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["EnumCaseElementSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumCaseElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumCaseElementSyntaxBuilder","useAssociatedValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssociatedValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["func",12],[" ",17],["useAssociatedValue",7],["(",17],["ParameterClauseSyntax",18],[")",17]]},{"p":["EnumCasePatternSyntax","withCaseName(_:)"],"f":[["func",12],[" ",17],["withCaseName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["EnumCasePatternSyntax",18,170]],"s":[["func",12],[" ",17],["withCaseName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumCasePatternSyntax",18]],"d":"Returns a copy of the receiver with its `caseName` replaced.\n- param newChild: The new `caseName` to replace the node's\n                  current `caseName`, if present."},{"p":["EnumCasePatternSyntax","withPeriod(_:)"],"f":[["func",12],[" ",17],["withPeriod",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["EnumCasePatternSyntax",18,170]],"s":[["func",12],[" ",17],["withPeriod",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumCasePatternSyntax",18]],"d":"Returns a copy of the receiver with its `period` replaced.\n- param newChild: The new `period` to replace the node's\n                  current `period`, if present."},{"p":["EnumCasePatternSyntax","withAssociatedTuple(_:)"],"f":[["func",12],[" ",17],["withAssociatedTuple",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TuplePatternSyntax",18,93],["?) -> ",17],["EnumCasePatternSyntax",18,170]],"s":[["func",12],[" ",17],["withAssociatedTuple",7],["(",17],["TuplePatternSyntax",18],["?) -> ",17],["EnumCasePatternSyntax",18]],"d":"Returns a copy of the receiver with its `associatedTuple` replaced.\n- param newChild: The new `associatedTuple` to replace the node's\n                  current `associatedTuple`, if present."},{"p":["EnumCasePatternSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["EnumCasePatternSyntax",18,170]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["EnumCasePatternSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["EnumCasePatternSyntaxBuilder","useCaseName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCaseName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useCaseName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumCasePatternSyntaxBuilder","useAssociatedTuple(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssociatedTuple",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternSyntax",18,93],[")",17]],"s":[["func",12],[" ",17],["useAssociatedTuple",7],["(",17],["TuplePatternSyntax",18],[")",17]]},{"p":["EnumCasePatternSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["EnumCasePatternSyntaxBuilder","usePeriod(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePeriod",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePeriod",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FallthroughStmtSyntax","withFallthroughKeyword(_:)"],"f":[["func",12],[" ",17],["withFallthroughKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FallthroughStmtSyntax",18,172]],"s":[["func",12],[" ",17],["withFallthroughKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FallthroughStmtSyntax",18]],"d":"Returns a copy of the receiver with its `fallthroughKeyword` replaced.\n- param newChild: The new `fallthroughKeyword` to replace the node's\n                  current `fallthroughKeyword`, if present."},{"p":["FallthroughStmtSyntaxBuilder","useFallthroughKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFallthroughKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useFallthroughKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForcedValueExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["ForcedValueExprSyntax",18,174]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ForcedValueExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ForcedValueExprSyntax","withExclamationMark(_:)"],"f":[["func",12],[" ",17],["withExclamationMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ForcedValueExprSyntax",18,174]],"s":[["func",12],[" ",17],["withExclamationMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForcedValueExprSyntax",18]],"d":"Returns a copy of the receiver with its `exclamationMark` replaced.\n- param newChild: The new `exclamationMark` to replace the node's\n                  current `exclamationMark`, if present."},{"p":["ForcedValueExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ForcedValueExprSyntaxBuilder","useExclamationMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExclamationMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useExclamationMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericArgumentSyntax","withArgumentType(_:)"],"f":[["func",12],[" ",17],["withArgumentType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["GenericArgumentSyntax",18,176]],"s":[["func",12],[" ",17],["withArgumentType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["GenericArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `argumentType` replaced.\n- param newChild: The new `argumentType` to replace the node's\n                  current `argumentType`, if present."},{"p":["GenericArgumentSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GenericArgumentSyntax",18,176]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["GenericArgumentSyntaxBuilder","useArgumentType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArgumentType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useArgumentType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["GenericArgumentSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InitializerDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["InitializerDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["InitializerDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["InitializerDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["InitializerDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["InitializerDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["InitializerDeclSyntax","withParameters(_:)"],"f":[["func",12],[" ",17],["withParameters",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ParameterClauseSyntax",18,188],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withParameters",7],["(",17],["ParameterClauseSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `parameters` replaced.\n- param newChild: The new `parameters` to replace the node's\n                  current `parameters`, if present."},{"p":["InitializerDeclSyntax","withInitKeyword(_:)"],"f":[["func",12],[" ",17],["withInitKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withInitKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `initKeyword` replaced.\n- param newChild: The new `initKeyword` to replace the node's\n                  current `initKeyword`, if present."},{"p":["InitializerDeclSyntax","withOptionalMark(_:)"],"f":[["func",12],[" ",17],["withOptionalMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withOptionalMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `optionalMark` replaced.\n- param newChild: The new `optionalMark` to replace the node's\n                  current `optionalMark`, if present."},{"p":["InitializerDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["InitializerDeclSyntax","withGenericParameterClause(_:)"],"f":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,378],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterClause` replaced.\n- param newChild: The new `genericParameterClause` to replace the node's\n                  current `genericParameterClause`, if present."},{"p":["InitializerDeclSyntax","withThrowsOrRethrowsKeyword(_:)"],"f":[["func",12],[" ",17],["withThrowsOrRethrowsKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withThrowsOrRethrowsKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `throwsOrRethrowsKeyword` replaced.\n- param newChild: The new `throwsOrRethrowsKeyword` to replace the node's\n                  current `throwsOrRethrowsKeyword`, if present."},{"p":["InitializerDeclSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["InitializerDeclSyntax",18,178]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["InitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["InitializerDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useParameters(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useParameters",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["func",12],[" ",17],["useParameters",7],["(",17],["ParameterClauseSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useInitKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useInitKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useOptionalMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOptionalMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useOptionalMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useGenericParameterClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,378],[")",17]],"s":[["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useThrowsOrRethrowsKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowsOrRethrowsKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useThrowsOrRethrowsKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InitializerDeclSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["KeyPathBaseExprSyntax","withPeriod(_:)"],"f":[["func",12],[" ",17],["withPeriod",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["KeyPathBaseExprSyntax",18,180]],"s":[["func",12],[" ",17],["withPeriod",7],["(",17],["TokenSyntax",18],["?) -> ",17],["KeyPathBaseExprSyntax",18]],"d":"Returns a copy of the receiver with its `period` replaced.\n- param newChild: The new `period` to replace the node's\n                  current `period`, if present."},{"p":["KeyPathBaseExprSyntaxBuilder","usePeriod(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePeriod",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePeriod",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberDeclBlockSyntax","addMember(_:)"],"f":[["func",12],[" ",17],["addMember",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["MemberDeclBlockSyntax",18,182]],"s":[["func",12],[" ",17],["addMember",7],["(",17],["MemberDeclListItemSyntax",18],[") -> ",17],["MemberDeclBlockSyntax",18]],"d":"Adds the provided `Member` to the node's `members`\ncollection.\n- param element: The new `Member` to add to the node's\n                 `members` collection.\n- returns: A copy of the receiver with the provided `Member`\n           appended to its `members` collection."},{"p":["MemberDeclBlockSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclListSyntax",18,145],["?) -> ",17],["MemberDeclBlockSyntax",18,182]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclListSyntax",18],["?) -> ",17],["MemberDeclBlockSyntax",18]],"d":"Returns a copy of the receiver with its `members` replaced.\n- param newChild: The new `members` to replace the node's\n                  current `members`, if present."},{"p":["MemberDeclBlockSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["MemberDeclBlockSyntax",18,182]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberDeclBlockSyntax",18]],"d":"Returns a copy of the receiver with its `leftBrace` replaced.\n- param newChild: The new `leftBrace` to replace the node's\n                  current `leftBrace`, if present.","o":5917},{"p":["MemberDeclBlockSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["MemberDeclBlockSyntax",18,182]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberDeclBlockSyntax",18]],"d":"Returns a copy of the receiver with its `rightBrace` replaced.\n- param newChild: The new `rightBrace` to replace the node's\n                  current `rightBrace`, if present.","o":5918},{"p":["MemberDeclBlockSyntaxBuilder","addMember(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addMember",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["MemberDeclListItemSyntax",18,292],[")",17]],"s":[["func",12],[" ",17],["addMember",7],["(",17],["MemberDeclListItemSyntax",18],[")",17]]},{"p":["MemberDeclBlockSyntaxBuilder","useLeftBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberDeclBlockSyntaxBuilder","useRightBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcKeyPathExprSyntax","withKeyPath(_:)"],"f":[["func",12],[" ",17],["withKeyPath",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["func",12],[" ",17],["withKeyPath",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcKeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `keyPath` replaced.\n- param newChild: The new `keyPath` to replace the node's\n                  current `keyPath`, if present."},{"p":["ObjcKeyPathExprSyntax","addNamePiece(_:)"],"f":[["func",12],[" ",17],["addNamePiece",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["func",12],[" ",17],["addNamePiece",7],["(",17],["ObjcNamePieceSyntax",18],[") -> ",17],["ObjcKeyPathExprSyntax",18]],"d":"Adds the provided `NamePiece` to the node's `name`\ncollection.\n- param element: The new `NamePiece` to add to the node's\n                 `name` collection.\n- returns: A copy of the receiver with the provided `NamePiece`\n           appended to its `name` collection."},{"p":["ObjcKeyPathExprSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcKeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["ObjcKeyPathExprSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcKeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["ObjcKeyPathExprSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ObjcNameSyntax",18,465],["?) -> ",17],["ObjcKeyPathExprSyntax",18,184]],"s":[["func",12],[" ",17],["withName",7],["(",17],["ObjcNameSyntax",18],["?) -> ",17],["ObjcKeyPathExprSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["ObjcKeyPathExprSyntaxBuilder","useKeyPath(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useKeyPath",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useKeyPath",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcKeyPathExprSyntaxBuilder","addNamePiece(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addNamePiece",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ObjcNamePieceSyntax",18,115],[")",17]],"s":[["func",12],[" ",17],["addNamePiece",7],["(",17],["ObjcNamePieceSyntax",18],[")",17]]},{"p":["ObjcKeyPathExprSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcKeyPathExprSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["OptionalPatternSyntax","withSubPattern(_:)"],"f":[["func",12],[" ",17],["withSubPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,453],["?) -> ",17],["OptionalPatternSyntax",18,186]],"s":[["func",12],[" ",17],["withSubPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["OptionalPatternSyntax",18]],"d":"Returns a copy of the receiver with its `subPattern` replaced.\n- param newChild: The new `subPattern` to replace the node's\n                  current `subPattern`, if present."},{"p":["OptionalPatternSyntax","withQuestionMark(_:)"],"f":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["OptionalPatternSyntax",18,186]],"s":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OptionalPatternSyntax",18]],"d":"Returns a copy of the receiver with its `questionMark` replaced.\n- param newChild: The new `questionMark` to replace the node's\n                  current `questionMark`, if present."},{"p":["OptionalPatternSyntaxBuilder","useSubPattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSubPattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useSubPattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["OptionalPatternSyntaxBuilder","useQuestionMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useQuestionMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useQuestionMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ParameterClauseSyntax","addParameter(_:)"],"f":[["func",12],[" ",17],["addParameter",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["ParameterClauseSyntax",18,188]],"s":[["func",12],[" ",17],["addParameter",7],["(",17],["FunctionParameterSyntax",18],[") -> ",17],["ParameterClauseSyntax",18]],"d":"Adds the provided `Parameter` to the node's `parameterList`\ncollection.\n- param element: The new `Parameter` to add to the node's\n                 `parameterList` collection.\n- returns: A copy of the receiver with the provided `Parameter`\n           appended to its `parameterList` collection."},{"p":["ParameterClauseSyntax","withParameterList(_:)"],"f":[["func",12],[" ",17],["withParameterList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["FunctionParameterListSyntax",18,354],["?) -> ",17],["ParameterClauseSyntax",18,188]],"s":[["func",12],[" ",17],["withParameterList",7],["(",17],["FunctionParameterListSyntax",18],["?) -> ",17],["ParameterClauseSyntax",18]],"d":"Returns a copy of the receiver with its `parameterList` replaced.\n- param newChild: The new `parameterList` to replace the node's\n                  current `parameterList`, if present."},{"p":["ParameterClauseSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ParameterClauseSyntax",18,188]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ParameterClauseSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["ParameterClauseSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ParameterClauseSyntax",18,188]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ParameterClauseSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["ParameterClauseSyntaxBuilder","addParameter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addParameter",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["FunctionParameterSyntax",18,250],[")",17]],"s":[["func",12],[" ",17],["addParameter",7],["(",17],["FunctionParameterSyntax",18],[")",17]]},{"p":["ParameterClauseSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ParameterClauseSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundAssertStmtSyntax","withPoundAssert(_:)"],"f":[["func",12],[" ",17],["withPoundAssert",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["func",12],[" ",17],["withPoundAssert",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundAssertStmtSyntax",18]],"d":"Returns a copy of the receiver with its `poundAssert` replaced.\n- param newChild: The new `poundAssert` to replace the node's\n                  current `poundAssert`, if present."},{"p":["PoundAssertStmtSyntax","withMessage(_:)"],"f":[["func",12],[" ",17],["withMessage",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["func",12],[" ",17],["withMessage",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundAssertStmtSyntax",18]],"d":"Returns a copy of the receiver with its `message` replaced.\n- param newChild: The new `message` to replace the node's\n                  current `message`, if present."},{"p":["PoundAssertStmtSyntax","withCondition(_:)"],"f":[["func",12],[" ",17],["withCondition",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["func",12],[" ",17],["withCondition",7],["(",17],["ExprSyntax",18],["?) -> ",17],["PoundAssertStmtSyntax",18]],"d":"Returns a copy of the receiver with its `condition` replaced.\n- param newChild: The new `condition` to replace the node's\n                  current `condition`, if present."},{"p":["PoundAssertStmtSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundAssertStmtSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["PoundAssertStmtSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundAssertStmtSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["PoundAssertStmtSyntax","withComma(_:)"],"f":[["func",12],[" ",17],["withComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundAssertStmtSyntax",18,190]],"s":[["func",12],[" ",17],["withComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundAssertStmtSyntax",18]],"d":"Returns a copy of the receiver with its `comma` replaced.\n- param newChild: The new `comma` to replace the node's\n                  current `comma`, if present."},{"p":["PoundAssertStmtSyntaxBuilder","usePoundAssert(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundAssert",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundAssert",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundAssertStmtSyntaxBuilder","useMessage(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMessage",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useMessage",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundAssertStmtSyntaxBuilder","useCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCondition",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useCondition",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["PoundAssertStmtSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundAssertStmtSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundAssertStmtSyntaxBuilder","useComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundColumnExprSyntax","withPoundColumn(_:)"],"f":[["func",12],[" ",17],["withPoundColumn",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundColumnExprSyntax",18,192]],"s":[["func",12],[" ",17],["withPoundColumn",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundColumnExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundColumn` replaced.\n- param newChild: The new `poundColumn` to replace the node's\n                  current `poundColumn`, if present."},{"p":["PoundColumnExprSyntaxBuilder","usePoundColumn(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundColumn",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundColumn",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundFileIDExprSyntax","withPoundFileID(_:)"],"f":[["func",12],[" ",17],["withPoundFileID",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundFileIDExprSyntax",18,194]],"s":[["func",12],[" ",17],["withPoundFileID",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundFileIDExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundFileID` replaced.\n- param newChild: The new `poundFileID` to replace the node's\n                  current `poundFileID`, if present."},{"p":["PoundFileIDExprSyntaxBuilder","usePoundFileID(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundFileID",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundFileID",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["RepeatWhileStmtSyntax","withRepeatKeyword(_:)"],"f":[["func",12],[" ",17],["withRepeatKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["func",12],[" ",17],["withRepeatKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["RepeatWhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `repeatKeyword` replaced.\n- param newChild: The new `repeatKeyword` to replace the node's\n                  current `repeatKeyword`, if present."},{"p":["RepeatWhileStmtSyntax","withWhileKeyword(_:)"],"f":[["func",12],[" ",17],["withWhileKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["func",12],[" ",17],["withWhileKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["RepeatWhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `whileKeyword` replaced.\n- param newChild: The new `whileKeyword` to replace the node's\n                  current `whileKeyword`, if present."},{"p":["RepeatWhileStmtSyntax","withCondition(_:)"],"f":[["func",12],[" ",17],["withCondition",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["func",12],[" ",17],["withCondition",7],["(",17],["ExprSyntax",18],["?) -> ",17],["RepeatWhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `condition` replaced.\n- param newChild: The new `condition` to replace the node's\n                  current `condition`, if present."},{"p":["RepeatWhileStmtSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["RepeatWhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present.","o":5949},{"p":["RepeatWhileStmtSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["RepeatWhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present.","o":5950},{"p":["RepeatWhileStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["RepeatWhileStmtSyntax",18,196]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["RepeatWhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present.","o":4545},{"p":["RepeatWhileStmtSyntaxBuilder","useRepeatKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRepeatKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRepeatKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["RepeatWhileStmtSyntaxBuilder","useWhileKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhileKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useWhileKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["RepeatWhileStmtSyntaxBuilder","useCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCondition",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useCondition",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["RepeatWhileStmtSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["RepeatWhileStmtSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["RepeatWhileStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["SwitchCaseLabelSyntax","addCaseItem(_:)"],"f":[["func",12],[" ",17],["addCaseItem",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CaseItemSyntax",18,457],[") -> ",17],["SwitchCaseLabelSyntax",18,198]],"s":[["func",12],[" ",17],["addCaseItem",7],["(",17],["CaseItemSyntax",18],[") -> ",17],["SwitchCaseLabelSyntax",18]],"d":"Adds the provided `CaseItem` to the node's `caseItems`\ncollection.\n- param element: The new `CaseItem` to add to the node's\n                 `caseItems` collection.\n- returns: A copy of the receiver with the provided `CaseItem`\n           appended to its `caseItems` collection."},{"p":["SwitchCaseLabelSyntax","withCaseItems(_:)"],"f":[["func",12],[" ",17],["withCaseItems",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CaseItemListSyntax",18,59],["?) -> ",17],["SwitchCaseLabelSyntax",18,198]],"s":[["func",12],[" ",17],["withCaseItems",7],["(",17],["CaseItemListSyntax",18],["?) -> ",17],["SwitchCaseLabelSyntax",18]],"d":"Returns a copy of the receiver with its `caseItems` replaced.\n- param newChild: The new `caseItems` to replace the node's\n                  current `caseItems`, if present."},{"p":["SwitchCaseLabelSyntax","withCaseKeyword(_:)"],"f":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SwitchCaseLabelSyntax",18,198]],"s":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchCaseLabelSyntax",18]],"d":"Returns a copy of the receiver with its `caseKeyword` replaced.\n- param newChild: The new `caseKeyword` to replace the node's\n                  current `caseKeyword`, if present."},{"p":["SwitchCaseLabelSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SwitchCaseLabelSyntax",18,198]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchCaseLabelSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["SwitchCaseLabelSyntaxBuilder","addCaseItem(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCaseItem",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CaseItemSyntax",18,457],[")",17]],"s":[["func",12],[" ",17],["addCaseItem",7],["(",17],["CaseItemSyntax",18],[")",17]]},{"p":["SwitchCaseLabelSyntaxBuilder","useCaseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCaseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useCaseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchCaseLabelSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WildcardPatternSyntax","withWildcard(_:)"],"f":[["func",12],[" ",17],["withWildcard",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["WildcardPatternSyntax",18,200]],"s":[["func",12],[" ",17],["withWildcard",7],["(",17],["TokenSyntax",18],["?) -> ",17],["WildcardPatternSyntax",18]],"d":"Returns a copy of the receiver with its `wildcard` replaced.\n- param newChild: The new `wildcard` to replace the node's\n                  current `wildcard`, if present."},{"p":["WildcardPatternSyntax","withTypeAnnotation(_:)"],"f":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeAnnotationSyntax",18,157],["?) -> ",17],["WildcardPatternSyntax",18,200]],"s":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],["?) -> ",17],["WildcardPatternSyntax",18]],"d":"Returns a copy of the receiver with its `typeAnnotation` replaced.\n- param newChild: The new `typeAnnotation` to replace the node's\n                  current `typeAnnotation`, if present."},{"p":["WildcardPatternSyntaxBuilder","useWildcard(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWildcard",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useWildcard",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WildcardPatternSyntaxBuilder","useTypeAnnotation(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],[")",17]]},{"p":["ArrayElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ArrayElementSyntax",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ArrayElementListSyntax` with that element prepended to the\n           beginning."},{"p":["ArrayElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ArrayElementListSyntax",18,202],[".",17],["Iterator",18,203]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ArrayElementListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["ArrayElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by removing the last element.\n\n- Returns: A new `ArrayElementListSyntax` with the last element removed."},{"p":["ArrayElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by removing the first element.\n\n- Returns: A new `ArrayElementListSyntax` with the first element removed."},{"p":["ArrayElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ArrayElementListSyntax",18]],"d":"Returns a new `ArrayElementListSyntax` with all trivia removed."},{"p":["ArrayElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Returns a new `ArrayElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ArrayElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Returns a new `ArrayElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ArrayElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ArrayElementListSyntax",18]],"d":"Returns a new `ArrayElementListSyntax` with its leading trivia removed."},{"p":["ArrayElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ArrayElementListSyntax",18]],"d":"Returns a new `ArrayElementListSyntax` with its trailing trivia removed."},{"p":["ArrayElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["ArrayElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["ArrayElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ArrayElementSyntax",18,57],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ArrayElementSyntax",18],["?",17]],"o":7760},{"p":["ArrayElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["ArrayElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ArrayElementListSyntax` with the element at the provided index\n           removed."},{"p":["ArrayElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ArrayElementSyntax",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ArrayElementListSyntax` with that element appended to the end."},{"p":["ArrayElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ArrayElementSyntax",18,57],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ArrayElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ArrayElementListSyntax` with that element appended to the end."},{"p":["ArrayElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["ArrayElementListSyntax",18,202]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ArrayElementSyntax",18],[") -> ",17],["ArrayElementListSyntax",18]],"d":"Creates a new `ArrayElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ArrayElementListSyntax` with the new element at the provided index."},{"p":["ClosureParamListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ClosureParamSyntax",18,61],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ClosureParamSyntax",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ClosureParamListSyntax` with that element prepended to the\n           beginning."},{"p":["ClosureParamListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ClosureParamListSyntax",18,204],[".",17],["Iterator",18,205]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ClosureParamListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["ClosureParamListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by removing the last element.\n\n- Returns: A new `ClosureParamListSyntax` with the last element removed."},{"p":["ClosureParamListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by removing the first element.\n\n- Returns: A new `ClosureParamListSyntax` with the first element removed."},{"p":["ClosureParamListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ClosureParamListSyntax",18]],"d":"Returns a new `ClosureParamListSyntax` with all trivia removed."},{"p":["ClosureParamListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Returns a new `ClosureParamListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ClosureParamListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Returns a new `ClosureParamListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ClosureParamListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ClosureParamListSyntax",18]],"d":"Returns a new `ClosureParamListSyntax` with its leading trivia removed."},{"p":["ClosureParamListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ClosureParamListSyntax",18]],"d":"Returns a new `ClosureParamListSyntax` with its trailing trivia removed."},{"p":["ClosureParamListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["ClosureParamListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["ClosureParamListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ClosureParamSyntax",18,61],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ClosureParamSyntax",18],["?",17]],"o":7760},{"p":["ClosureParamListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["ClosureParamListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ClosureParamListSyntax` with the element at the provided index\n           removed."},{"p":["ClosureParamListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ClosureParamSyntax",18,61],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ClosureParamSyntax",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ClosureParamListSyntax` with that element appended to the end."},{"p":["ClosureParamListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ClosureParamSyntax",18,61],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ClosureParamSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ClosureParamListSyntax` with that element appended to the end."},{"p":["ClosureParamListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ClosureParamSyntax",18,61],[") -> ",17],["ClosureParamListSyntax",18,204]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ClosureParamSyntax",18],[") -> ",17],["ClosureParamListSyntax",18]],"d":"Creates a new `ClosureParamListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ClosureParamListSyntax` with the new element at the provided index."},{"p":["ClosureSignatureSyntax","withOutput(_:)"],"f":[["func",12],[" ",17],["withOutput",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ReturnClauseSyntax",18,87],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withOutput",7],["(",17],["ReturnClauseSyntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `output` replaced.\n- param newChild: The new `output` to replace the node's\n                  current `output`, if present."},{"p":["ClosureSignatureSyntax","withCapture(_:)"],"f":[["func",12],[" ",17],["withCapture",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ClosureCaptureSignatureSyntax",18,384],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withCapture",7],["(",17],["ClosureCaptureSignatureSyntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `capture` replaced.\n- param newChild: The new `capture` to replace the node's\n                  current `capture`, if present."},{"p":["ClosureSignatureSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["ClosureSignatureSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["ClosureSignatureSyntax","withThrowsTok(_:)"],"f":[["func",12],[" ",17],["withThrowsTok",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withThrowsTok",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `throwsTok` replaced.\n- param newChild: The new `throwsTok` to replace the node's\n                  current `throwsTok`, if present."},{"p":["ClosureSignatureSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["ClosureSignatureSyntax","withAsyncKeyword(_:)"],"f":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `asyncKeyword` replaced.\n- param newChild: The new `asyncKeyword` to replace the node's\n                  current `asyncKeyword`, if present."},{"p":["ClosureSignatureSyntax","withInTok(_:)"],"f":[["func",12],[" ",17],["withInTok",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withInTok",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `inTok` replaced.\n- param newChild: The new `inTok` to replace the node's\n                  current `inTok`, if present."},{"p":["ClosureSignatureSyntax","withInput(_:)"],"f":[["func",12],[" ",17],["withInput",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["ClosureSignatureSyntax",18,206]],"s":[["func",12],[" ",17],["withInput",7],["(",17],["Syntax",18],["?) -> ",17],["ClosureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `input` replaced.\n- param newChild: The new `input` to replace the node's\n                  current `input`, if present."},{"p":["ClosureSignatureSyntaxBuilder","useCapture(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCapture",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureSignatureSyntax",18,384],[")",17]],"s":[["func",12],[" ",17],["useCapture",7],["(",17],["ClosureCaptureSignatureSyntax",18],[")",17]]},{"p":["ClosureSignatureSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["ClosureSignatureSyntaxBuilder","useThrowsTok(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowsTok",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useThrowsTok",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureSignatureSyntaxBuilder","useAsyncKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureSignatureSyntaxBuilder","useInTok(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInTok",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useInTok",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureSignatureSyntaxBuilder","useInput(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInput",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useInput",7],["(",17],["Syntax",18],[")",17]]},{"p":["ClosureSignatureSyntaxBuilder","useOutput(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOutput",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[")",17]],"s":[["func",12],[" ",17],["useOutput",7],["(",17],["ReturnClauseSyntax",18],[")",17]]},{"p":["ConditionElementSyntax","withCondition(_:)"],"f":[["func",12],[" ",17],["withCondition",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["ConditionElementSyntax",18,208]],"s":[["func",12],[" ",17],["withCondition",7],["(",17],["Syntax",18],["?) -> ",17],["ConditionElementSyntax",18]],"d":"Returns a copy of the receiver with its `condition` replaced.\n- param newChild: The new `condition` to replace the node's\n                  current `condition`, if present."},{"p":["ConditionElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ConditionElementSyntax",18,208]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ConditionElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["ConditionElementSyntaxBuilder","useCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCondition",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useCondition",7],["(",17],["Syntax",18],[")",17]]},{"p":["ConditionElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclNameArgumentSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DeclNameArgumentSyntax",18,210]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclNameArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["DeclNameArgumentSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DeclNameArgumentSyntax",18,210]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclNameArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["DeclNameArgumentSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclNameArgumentSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FloatLiteralExprSyntax","withFloatingDigits(_:)"],"f":[["func",12],[" ",17],["withFloatingDigits",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FloatLiteralExprSyntax",18,212]],"s":[["func",12],[" ",17],["withFloatingDigits",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FloatLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `floatingDigits` replaced.\n- param newChild: The new `floatingDigits` to replace the node's\n                  current `floatingDigits`, if present."},{"p":["FloatLiteralExprSyntaxBuilder","useFloatingDigits(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFloatingDigits",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useFloatingDigits",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionCallExprSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["FunctionCallExprSyntax",18]],"d":"Adds the provided `Argument` to the node's `argumentList`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `argumentList` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `argumentList` collection."},{"p":["FunctionCallExprSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["FunctionCallExprSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["FunctionCallExprSyntax","withArgumentList(_:)"],"f":[["func",12],[" ",17],["withArgumentList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleExprElementListSyntax",18,342],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["withArgumentList",7],["(",17],["TupleExprElementListSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]],"d":"Returns a copy of the receiver with its `argumentList` replaced.\n- param newChild: The new `argumentList` to replace the node's\n                  current `argumentList`, if present."},{"p":["FunctionCallExprSyntax","withTrailingClosure(_:)"],"f":[["func",12],[" ",17],["withTrailingClosure",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ClosureExprSyntax",18,41],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["withTrailingClosure",7],["(",17],["ClosureExprSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]],"d":"Returns a copy of the receiver with its `trailingClosure` replaced.\n- param newChild: The new `trailingClosure` to replace the node's\n                  current `trailingClosure`, if present."},{"p":["FunctionCallExprSyntax","withCalledExpression(_:)"],"f":[["func",12],[" ",17],["withCalledExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["withCalledExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]],"d":"Returns a copy of the receiver with its `calledExpression` replaced.\n- param newChild: The new `calledExpression` to replace the node's\n                  current `calledExpression`, if present."},{"p":["FunctionCallExprSyntax","addAdditionalTrailingClosure(_:)"],"f":[["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],[") -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["FunctionCallExprSyntax",18]],"d":"Adds the provided `AdditionalTrailingClosure` to the node's `additionalTrailingClosures`\ncollection.\n- param element: The new `AdditionalTrailingClosure` to add to the node's\n                 `additionalTrailingClosures` collection.\n- returns: A copy of the receiver with the provided `AdditionalTrailingClosure`\n           appended to its `additionalTrailingClosures` collection."},{"p":["FunctionCallExprSyntax","withAdditionalTrailingClosures(_:)"],"f":[["func",12],[" ",17],["withAdditionalTrailingClosures",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,436],["?) -> ",17],["FunctionCallExprSyntax",18,214]],"s":[["func",12],[" ",17],["withAdditionalTrailingClosures",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],["?) -> ",17],["FunctionCallExprSyntax",18]],"d":"Returns a copy of the receiver with its `additionalTrailingClosures` replaced.\n- param newChild: The new `additionalTrailingClosures` to replace the node's\n                  current `additionalTrailingClosures`, if present."},{"p":["FunctionCallExprSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["FunctionCallExprSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionCallExprSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionCallExprSyntaxBuilder","useTrailingClosure(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingClosure",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[")",17]],"s":[["func",12],[" ",17],["useTrailingClosure",7],["(",17],["ClosureExprSyntax",18],[")",17]]},{"p":["FunctionCallExprSyntaxBuilder","useCalledExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCalledExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useCalledExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["FunctionCallExprSyntaxBuilder","addAdditionalTrailingClosure(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],[")",17]],"s":[["func",12],[" ",17],["addAdditionalTrailingClosure",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[")",17]]},{"p":["FunctionDeclNameSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["FunctionDeclNameSyntax",18,216]],"s":[["func",12],[" ",17],["withName",7],["(",17],["Syntax",18],["?) -> ",17],["FunctionDeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["FunctionDeclNameSyntax","withArguments(_:)"],"f":[["func",12],[" ",17],["withArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["FunctionDeclNameSyntax",18,216]],"s":[["func",12],[" ",17],["withArguments",7],["(",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["FunctionDeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `arguments` replaced.\n- param newChild: The new `arguments` to replace the node's\n                  current `arguments`, if present."},{"p":["FunctionDeclNameSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["Syntax",18],[")",17]]},{"p":["FunctionDeclNameSyntaxBuilder","useArguments(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArguments",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["useArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["GenericParameterSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["GenericParameterSyntax",18,218]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["GenericParameterSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["GenericParameterSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["GenericParameterSyntax",18,218]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["GenericParameterSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["GenericParameterSyntax","withInheritedType(_:)"],"f":[["func",12],[" ",17],["withInheritedType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["GenericParameterSyntax",18,218]],"s":[["func",12],[" ",17],["withInheritedType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["GenericParameterSyntax",18]],"d":"Returns a copy of the receiver with its `inheritedType` replaced.\n- param newChild: The new `inheritedType` to replace the node's\n                  current `inheritedType`, if present."},{"p":["GenericParameterSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GenericParameterSyntax",18,218]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericParameterSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["GenericParameterSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GenericParameterSyntax",18,218]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericParameterSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["GenericParameterSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GenericParameterSyntax",18,218]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericParameterSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["GenericParameterSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["GenericParameterSyntaxBuilder","useInheritedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritedType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useInheritedType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["GenericParameterSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericParameterSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericParameterSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberAccessExprSyntax","withDeclNameArguments(_:)"],"f":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["MemberAccessExprSyntax",18,220]],"s":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["MemberAccessExprSyntax",18]],"d":"Returns a copy of the receiver with its `declNameArguments` replaced.\n- param newChild: The new `declNameArguments` to replace the node's\n                  current `declNameArguments`, if present."},{"p":["MemberAccessExprSyntax","withDot(_:)"],"f":[["func",12],[" ",17],["withDot",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["MemberAccessExprSyntax",18,220]],"s":[["func",12],[" ",17],["withDot",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberAccessExprSyntax",18]],"d":"Returns a copy of the receiver with its `dot` replaced.\n- param newChild: The new `dot` to replace the node's\n                  current `dot`, if present."},{"p":["MemberAccessExprSyntax","withBase(_:)"],"f":[["func",12],[" ",17],["withBase",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["MemberAccessExprSyntax",18,220]],"s":[["func",12],[" ",17],["withBase",7],["(",17],["ExprSyntax",18],["?) -> ",17],["MemberAccessExprSyntax",18]],"d":"Returns a copy of the receiver with its `base` replaced.\n- param newChild: The new `base` to replace the node's\n                  current `base`, if present."},{"p":["MemberAccessExprSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["MemberAccessExprSyntax",18,220]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberAccessExprSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["MemberAccessExprSyntaxBuilder","useDeclNameArguments(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["MemberAccessExprSyntaxBuilder","useDot(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDot",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDot",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberAccessExprSyntaxBuilder","useBase(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBase",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useBase",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["MemberAccessExprSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcSelectorExprSyntax","withPoundSelector(_:)"],"f":[["func",12],[" ",17],["withPoundSelector",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["func",12],[" ",17],["withPoundSelector",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcSelectorExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundSelector` replaced.\n- param newChild: The new `poundSelector` to replace the node's\n                  current `poundSelector`, if present."},{"p":["ObjcSelectorExprSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcSelectorExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["ObjcSelectorExprSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcSelectorExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["ObjcSelectorExprSyntax","withKind(_:)"],"f":[["func",12],[" ",17],["withKind",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["func",12],[" ",17],["withKind",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcSelectorExprSyntax",18]],"d":"Returns a copy of the receiver with its `kind` replaced.\n- param newChild: The new `kind` to replace the node's\n                  current `kind`, if present."},{"p":["ObjcSelectorExprSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["func",12],[" ",17],["withName",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ObjcSelectorExprSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["ObjcSelectorExprSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjcSelectorExprSyntax",18,222]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjcSelectorExprSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["ObjcSelectorExprSyntaxBuilder","usePoundSelector(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundSelector",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundSelector",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcSelectorExprSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcSelectorExprSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcSelectorExprSyntaxBuilder","useKind(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useKind",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useKind",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjcSelectorExprSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ObjcSelectorExprSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PostfixUnaryExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["PostfixUnaryExprSyntax",18,224]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["PostfixUnaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["PostfixUnaryExprSyntax","withOperatorToken(_:)"],"f":[["func",12],[" ",17],["withOperatorToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PostfixUnaryExprSyntax",18,224]],"s":[["func",12],[" ",17],["withOperatorToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PostfixUnaryExprSyntax",18]],"d":"Returns a copy of the receiver with its `operatorToken` replaced.\n- param newChild: The new `operatorToken` to replace the node's\n                  current `operatorToken`, if present."},{"p":["PostfixUnaryExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["PostfixUnaryExprSyntaxBuilder","useOperatorToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOperatorToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useOperatorToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundWarningDeclSyntax","withPoundWarning(_:)"],"f":[["func",12],[" ",17],["withPoundWarning",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundWarningDeclSyntax",18,226]],"s":[["func",12],[" ",17],["withPoundWarning",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundWarningDeclSyntax",18]],"d":"Returns a copy of the receiver with its `poundWarning` replaced.\n- param newChild: The new `poundWarning` to replace the node's\n                  current `poundWarning`, if present."},{"p":["PoundWarningDeclSyntax","withMessage(_:)"],"f":[["func",12],[" ",17],["withMessage",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["StringLiteralExprSyntax",18,272],["?) -> ",17],["PoundWarningDeclSyntax",18,226]],"s":[["func",12],[" ",17],["withMessage",7],["(",17],["StringLiteralExprSyntax",18],["?) -> ",17],["PoundWarningDeclSyntax",18]],"d":"Returns a copy of the receiver with its `message` replaced.\n- param newChild: The new `message` to replace the node's\n                  current `message`, if present."},{"p":["PoundWarningDeclSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundWarningDeclSyntax",18,226]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundWarningDeclSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["PoundWarningDeclSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundWarningDeclSyntax",18,226]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundWarningDeclSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["PoundWarningDeclSyntaxBuilder","usePoundWarning(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundWarning",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundWarning",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundWarningDeclSyntaxBuilder","useMessage(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMessage",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[")",17]],"s":[["func",12],[" ",17],["useMessage",7],["(",17],["StringLiteralExprSyntax",18],[")",17]]},{"p":["PoundWarningDeclSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundWarningDeclSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["RegexLiteralExprSyntax","withRegex(_:)"],"f":[["func",12],[" ",17],["withRegex",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["RegexLiteralExprSyntax",18,228]],"s":[["func",12],[" ",17],["withRegex",7],["(",17],["TokenSyntax",18],["?) -> ",17],["RegexLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `regex` replaced.\n- param newChild: The new `regex` to replace the node's\n                  current `regex`, if present."},{"p":["RegexLiteralExprSyntaxBuilder","useRegex(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRegex",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRegex",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleExprElementSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["TupleExprElementSyntax",18,230]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["TupleExprElementSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["TupleExprElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleExprElementSyntax",18,230]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleExprElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["TupleExprElementSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleExprElementSyntax",18,230]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleExprElementSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["TupleExprElementSyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleExprElementSyntax",18,230]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleExprElementSyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["TupleExprElementSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["TupleExprElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleExprElementSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleExprElementSyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["TupleTypeElementSyntax","withEllipsis(_:)"],"f":[["func",12],[" ",17],["withEllipsis",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withEllipsis",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `ellipsis` replaced.\n- param newChild: The new `ellipsis` to replace the node's\n                  current `ellipsis`, if present."},{"p":["TupleTypeElementSyntax","withSecondName(_:)"],"f":[["func",12],[" ",17],["withSecondName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withSecondName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `secondName` replaced.\n- param newChild: The new `secondName` to replace the node's\n                  current `secondName`, if present."},{"p":["TupleTypeElementSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InitializerClauseSyntax",18,258],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["InitializerClauseSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["TupleTypeElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["TupleTypeElementSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["TupleTypeElementSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["TupleTypeElementSyntax","withInOut(_:)"],"f":[["func",12],[" ",17],["withInOut",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleTypeElementSyntax",18,232]],"s":[["func",12],[" ",17],["withInOut",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `inOut` replaced.\n- param newChild: The new `inOut` to replace the node's\n                  current `inOut`, if present."},{"p":["TupleTypeElementSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useEllipsis(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEllipsis",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useEllipsis",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useSecondName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSecondName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useSecondName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeElementSyntaxBuilder","useInOut(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInOut",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useInOut",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorParameterSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessorParameterSyntax",18,234]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorParameterSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["AccessorParameterSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessorParameterSyntax",18,234]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorParameterSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["AccessorParameterSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessorParameterSyntax",18,234]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessorParameterSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["AccessorParameterSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorParameterSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessorParameterSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityEntrySyntax","addAvailability(_:)"],"f":[["func",12],[" ",17],["addAvailability",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["func",12],[" ",17],["addAvailability",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["AvailabilityEntrySyntax",18]],"d":"Adds the provided `Availability` to the node's `availabilityList`\ncollection.\n- param element: The new `Availability` to add to the node's\n                 `availabilityList` collection.\n- returns: A copy of the receiver with the provided `Availability`\n           appended to its `availabilityList` collection."},{"p":["AvailabilityEntrySyntax","withAvailabilityList(_:)"],"f":[["func",12],[" ",17],["withAvailabilityList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AvailabilitySpecListSyntax",18,326],["?) -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["func",12],[" ",17],["withAvailabilityList",7],["(",17],["AvailabilitySpecListSyntax",18],["?) -> ",17],["AvailabilityEntrySyntax",18]],"d":"Returns a copy of the receiver with its `availabilityList` replaced.\n- param newChild: The new `availabilityList` to replace the node's\n                  current `availabilityList`, if present."},{"p":["AvailabilityEntrySyntax","withSemicolon(_:)"],"f":[["func",12],[" ",17],["withSemicolon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["func",12],[" ",17],["withSemicolon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityEntrySyntax",18]],"d":"Returns a copy of the receiver with its `semicolon` replaced.\n- param newChild: The new `semicolon` to replace the node's\n                  current `semicolon`, if present."},{"p":["AvailabilityEntrySyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityEntrySyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["AvailabilityEntrySyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AvailabilityEntrySyntax",18,236]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityEntrySyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["AvailabilityEntrySyntaxBuilder","addAvailability(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAvailability",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[")",17]],"s":[["func",12],[" ",17],["addAvailability",7],["(",17],["AvailabilityArgumentSyntax",18],[")",17]]},{"p":["AvailabilityEntrySyntaxBuilder","useSemicolon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSemicolon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useSemicolon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityEntrySyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityEntrySyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CodeBlockItemListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `CodeBlockItemListSyntax` with that element prepended to the\n           beginning."},{"p":["CodeBlockItemListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CodeBlockItemListSyntax",18,238],[".",17],["Iterator",18,239]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CodeBlockItemListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["CodeBlockItemListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by removing the last element.\n\n- Returns: A new `CodeBlockItemListSyntax` with the last element removed."},{"p":["CodeBlockItemListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by removing the first element.\n\n- Returns: A new `CodeBlockItemListSyntax` with the first element removed."},{"p":["CodeBlockItemListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CodeBlockItemListSyntax",18]],"d":"Returns a new `CodeBlockItemListSyntax` with all trivia removed."},{"p":["CodeBlockItemListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Returns a new `CodeBlockItemListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["CodeBlockItemListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Returns a new `CodeBlockItemListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["CodeBlockItemListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CodeBlockItemListSyntax",18]],"d":"Returns a new `CodeBlockItemListSyntax` with its leading trivia removed."},{"p":["CodeBlockItemListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CodeBlockItemListSyntax",18]],"d":"Returns a new `CodeBlockItemListSyntax` with its trailing trivia removed."},{"p":["CodeBlockItemListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["CodeBlockItemListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["CodeBlockItemListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["CodeBlockItemSyntax",18,107],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["CodeBlockItemSyntax",18],["?",17]],"o":7760},{"p":["CodeBlockItemListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["CodeBlockItemListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `CodeBlockItemListSyntax` with the element at the provided index\n           removed."},{"p":["CodeBlockItemListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["appending",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `CodeBlockItemListSyntax` with that element appended to the end."},{"p":["CodeBlockItemListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CodeBlockItemSyntax",18,107],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["CodeBlockItemSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `CodeBlockItemListSyntax` with that element appended to the end."},{"p":["CodeBlockItemListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["CodeBlockItemListSyntax",18,238]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["CodeBlockItemSyntax",18],[") -> ",17],["CodeBlockItemListSyntax",18]],"d":"Creates a new `CodeBlockItemListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `CodeBlockItemListSyntax` with the new element at the provided index."},{"p":["DeclNameArgumentsSyntax","withArguments(_:)"],"f":[["func",12],[" ",17],["withArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentListSyntax",18,332],["?) -> ",17],["DeclNameArgumentsSyntax",18,240]],"s":[["func",12],[" ",17],["withArguments",7],["(",17],["DeclNameArgumentListSyntax",18],["?) -> ",17],["DeclNameArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `arguments` replaced.\n- param newChild: The new `arguments` to replace the node's\n                  current `arguments`, if present."},{"p":["DeclNameArgumentsSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["DeclNameArgumentsSyntax",18,240]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["DeclNameArgumentSyntax",18],[") -> ",17],["DeclNameArgumentsSyntax",18]],"d":"Adds the provided `Argument` to the node's `arguments`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `arguments` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `arguments` collection."},{"p":["DeclNameArgumentsSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DeclNameArgumentsSyntax",18,240]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclNameArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["DeclNameArgumentsSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DeclNameArgumentsSyntax",18,240]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeclNameArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["DeclNameArgumentsSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclNameArgumentSyntax",18,210],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["DeclNameArgumentSyntax",18],[")",17]]},{"p":["DeclNameArgumentsSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclNameArgumentsSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeinitializerDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["DeinitializerDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["DeinitializerDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["DeinitializerDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["DeinitializerDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["DeinitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["DeinitializerDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["DeinitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["DeinitializerDeclSyntax","withDeinitKeyword(_:)"],"f":[["func",12],[" ",17],["withDeinitKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["func",12],[" ",17],["withDeinitKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeinitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `deinitKeyword` replaced.\n- param newChild: The new `deinitKeyword` to replace the node's\n                  current `deinitKeyword`, if present."},{"p":["DeinitializerDeclSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["DeinitializerDeclSyntax",18,242]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["DeinitializerDeclSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["DeinitializerDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["DeinitializerDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["DeinitializerDeclSyntaxBuilder","useDeinitKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeinitKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDeinitKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeinitializerDeclSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["DictionaryElementSyntax","withKeyExpression(_:)"],"f":[["func",12],[" ",17],["withKeyExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["DictionaryElementSyntax",18,244]],"s":[["func",12],[" ",17],["withKeyExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["DictionaryElementSyntax",18]],"d":"Returns a copy of the receiver with its `keyExpression` replaced.\n- param newChild: The new `keyExpression` to replace the node's\n                  current `keyExpression`, if present."},{"p":["DictionaryElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DictionaryElementSyntax",18,244]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["DictionaryElementSyntax","withValueExpression(_:)"],"f":[["func",12],[" ",17],["withValueExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["DictionaryElementSyntax",18,244]],"s":[["func",12],[" ",17],["withValueExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["DictionaryElementSyntax",18]],"d":"Returns a copy of the receiver with its `valueExpression` replaced.\n- param newChild: The new `valueExpression` to replace the node's\n                  current `valueExpression`, if present."},{"p":["DictionaryElementSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DictionaryElementSyntax",18,244]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DictionaryElementSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["DictionaryElementSyntaxBuilder","useKeyExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useKeyExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useKeyExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["DictionaryElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DictionaryElementSyntaxBuilder","useValueExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValueExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useValueExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["DictionaryElementSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ExpressionPatternSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["ExpressionPatternSyntax",18,246]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ExpressionPatternSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ExpressionPatternSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ExpressionSegmentSyntax","addExpression(_:)"],"f":[["func",12],[" ",17],["addExpression",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["func",12],[" ",17],["addExpression",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["ExpressionSegmentSyntax",18]],"d":"Adds the provided `Expression` to the node's `expressions`\ncollection.\n- param element: The new `Expression` to add to the node's\n                 `expressions` collection.\n- returns: A copy of the receiver with the provided `Expression`\n           appended to its `expressions` collection."},{"p":["ExpressionSegmentSyntax","withBackslash(_:)"],"f":[["func",12],[" ",17],["withBackslash",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["func",12],[" ",17],["withBackslash",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ExpressionSegmentSyntax",18]],"d":"Returns a copy of the receiver with its `backslash` replaced.\n- param newChild: The new `backslash` to replace the node's\n                  current `backslash`, if present."},{"p":["ExpressionSegmentSyntax","withDelimiter(_:)"],"f":[["func",12],[" ",17],["withDelimiter",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["func",12],[" ",17],["withDelimiter",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ExpressionSegmentSyntax",18]],"d":"Returns a copy of the receiver with its `delimiter` replaced.\n- param newChild: The new `delimiter` to replace the node's\n                  current `delimiter`, if present."},{"p":["ExpressionSegmentSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ExpressionSegmentSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["ExpressionSegmentSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ExpressionSegmentSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["ExpressionSegmentSyntax","withExpressions(_:)"],"f":[["func",12],[" ",17],["withExpressions",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleExprElementListSyntax",18,342],["?) -> ",17],["ExpressionSegmentSyntax",18,248]],"s":[["func",12],[" ",17],["withExpressions",7],["(",17],["TupleExprElementListSyntax",18],["?) -> ",17],["ExpressionSegmentSyntax",18]],"d":"Returns a copy of the receiver with its `expressions` replaced.\n- param newChild: The new `expressions` to replace the node's\n                  current `expressions`, if present."},{"p":["ExpressionSegmentSyntaxBuilder","addExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addExpression",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["addExpression",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["ExpressionSegmentSyntaxBuilder","useBackslash(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBackslash",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useBackslash",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ExpressionSegmentSyntaxBuilder","useDelimiter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDelimiter",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDelimiter",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ExpressionSegmentSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ExpressionSegmentSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionParameterSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["FunctionParameterSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["FunctionParameterSyntax","withEllipsis(_:)"],"f":[["func",12],[" ",17],["withEllipsis",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withEllipsis",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `ellipsis` replaced.\n- param newChild: The new `ellipsis` to replace the node's\n                  current `ellipsis`, if present."},{"p":["FunctionParameterSyntax","withFirstName(_:)"],"f":[["func",12],[" ",17],["withFirstName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withFirstName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `firstName` replaced.\n- param newChild: The new `firstName` to replace the node's\n                  current `firstName`, if present."},{"p":["FunctionParameterSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["FunctionParameterSyntax","withSecondName(_:)"],"f":[["func",12],[" ",17],["withSecondName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withSecondName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `secondName` replaced.\n- param newChild: The new `secondName` to replace the node's\n                  current `secondName`, if present."},{"p":["FunctionParameterSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["FunctionParameterSyntax","withDefaultArgument(_:)"],"f":[["func",12],[" ",17],["withDefaultArgument",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InitializerClauseSyntax",18,258],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withDefaultArgument",7],["(",17],["InitializerClauseSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `defaultArgument` replaced.\n- param newChild: The new `defaultArgument` to replace the node's\n                  current `defaultArgument`, if present."},{"p":["FunctionParameterSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["FunctionParameterSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionParameterSyntax",18,250]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionParameterSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["FunctionParameterSyntaxBuilder","useEllipsis(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEllipsis",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useEllipsis",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","useFirstName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFirstName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useFirstName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","useSecondName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSecondName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useSecondName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","useDefaultArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDefaultArgument",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["useDefaultArgument",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["FunctionParameterSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionSignatureSyntax","withOutput(_:)"],"f":[["func",12],[" ",17],["withOutput",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ReturnClauseSyntax",18,87],["?) -> ",17],["FunctionSignatureSyntax",18,252]],"s":[["func",12],[" ",17],["withOutput",7],["(",17],["ReturnClauseSyntax",18],["?) -> ",17],["FunctionSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `output` replaced.\n- param newChild: The new `output` to replace the node's\n                  current `output`, if present."},{"p":["FunctionSignatureSyntax","withAsyncOrReasyncKeyword(_:)"],"f":[["func",12],[" ",17],["withAsyncOrReasyncKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionSignatureSyntax",18,252]],"s":[["func",12],[" ",17],["withAsyncOrReasyncKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `asyncOrReasyncKeyword` replaced.\n- param newChild: The new `asyncOrReasyncKeyword` to replace the node's\n                  current `asyncOrReasyncKeyword`, if present."},{"p":["FunctionSignatureSyntax","withThrowsOrRethrowsKeyword(_:)"],"f":[["func",12],[" ",17],["withThrowsOrRethrowsKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["FunctionSignatureSyntax",18,252]],"s":[["func",12],[" ",17],["withThrowsOrRethrowsKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["FunctionSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `throwsOrRethrowsKeyword` replaced.\n- param newChild: The new `throwsOrRethrowsKeyword` to replace the node's\n                  current `throwsOrRethrowsKeyword`, if present."},{"p":["FunctionSignatureSyntax","withInput(_:)"],"f":[["func",12],[" ",17],["withInput",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ParameterClauseSyntax",18,188],["?) -> ",17],["FunctionSignatureSyntax",18,252]],"s":[["func",12],[" ",17],["withInput",7],["(",17],["ParameterClauseSyntax",18],["?) -> ",17],["FunctionSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `input` replaced.\n- param newChild: The new `input` to replace the node's\n                  current `input`, if present."},{"p":["FunctionSignatureSyntaxBuilder","useAsyncOrReasyncKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsyncOrReasyncKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAsyncOrReasyncKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionSignatureSyntaxBuilder","useThrowsOrRethrowsKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowsOrRethrowsKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useThrowsOrRethrowsKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionSignatureSyntaxBuilder","useInput(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInput",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["func",12],[" ",17],["useInput",7],["(",17],["ParameterClauseSyntax",18],[")",17]]},{"p":["FunctionSignatureSyntaxBuilder","useOutput(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOutput",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[")",17]],"s":[["func",12],[" ",17],["useOutput",7],["(",17],["ReturnClauseSyntax",18],[")",17]]},{"p":["IdentifierPatternSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["IdentifierPatternSyntax",18,254]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IdentifierPatternSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["IdentifierPatternSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InheritedTypeListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["InheritedTypeSyntax",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `InheritedTypeListSyntax` with that element prepended to the\n           beginning."},{"p":["InheritedTypeListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["InheritedTypeListSyntax",18,256],[".",17],["Iterator",18,257]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["InheritedTypeListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["InheritedTypeListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by removing the last element.\n\n- Returns: A new `InheritedTypeListSyntax` with the last element removed."},{"p":["InheritedTypeListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by removing the first element.\n\n- Returns: A new `InheritedTypeListSyntax` with the first element removed."},{"p":["InheritedTypeListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["InheritedTypeListSyntax",18]],"d":"Returns a new `InheritedTypeListSyntax` with all trivia removed."},{"p":["InheritedTypeListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Returns a new `InheritedTypeListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["InheritedTypeListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Returns a new `InheritedTypeListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["InheritedTypeListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["InheritedTypeListSyntax",18]],"d":"Returns a new `InheritedTypeListSyntax` with its leading trivia removed."},{"p":["InheritedTypeListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["InheritedTypeListSyntax",18]],"d":"Returns a new `InheritedTypeListSyntax` with its trailing trivia removed."},{"p":["InheritedTypeListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["InheritedTypeListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["InheritedTypeListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["InheritedTypeSyntax",18,111],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["InheritedTypeSyntax",18],["?",17]],"o":7760},{"p":["InheritedTypeListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["InheritedTypeListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `InheritedTypeListSyntax` with the element at the provided index\n           removed."},{"p":["InheritedTypeListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["appending",7],["(",17],["InheritedTypeSyntax",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `InheritedTypeListSyntax` with that element appended to the end."},{"p":["InheritedTypeListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["InheritedTypeSyntax",18,111],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["InheritedTypeSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `InheritedTypeListSyntax` with that element appended to the end."},{"p":["InheritedTypeListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["InheritedTypeListSyntax",18,256]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["InheritedTypeSyntax",18],[") -> ",17],["InheritedTypeListSyntax",18]],"d":"Creates a new `InheritedTypeListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `InheritedTypeListSyntax` with the new element at the provided index."},{"p":["InitializerClauseSyntax","withEqual(_:)"],"f":[["func",12],[" ",17],["withEqual",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["InitializerClauseSyntax",18,258]],"s":[["func",12],[" ",17],["withEqual",7],["(",17],["TokenSyntax",18],["?) -> ",17],["InitializerClauseSyntax",18]],"d":"Returns a copy of the receiver with its `equal` replaced.\n- param newChild: The new `equal` to replace the node's\n                  current `equal`, if present."},{"p":["InitializerClauseSyntax","withValue(_:)"],"f":[["func",12],[" ",17],["withValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["InitializerClauseSyntax",18,258]],"s":[["func",12],[" ",17],["withValue",7],["(",17],["ExprSyntax",18],["?) -> ",17],["InitializerClauseSyntax",18]],"d":"Returns a copy of the receiver with its `value` replaced.\n- param newChild: The new `value` to replace the node's\n                  current `value`, if present."},{"p":["InitializerClauseSyntaxBuilder","useEqual(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEqual",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useEqual",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InitializerClauseSyntaxBuilder","useValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useValue",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["NonEmptyTokenListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["TokenSyntax",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `NonEmptyTokenListSyntax` with that element prepended to the\n           beginning."},{"p":["NonEmptyTokenListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260],[".",17],["Iterator",18,261]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["NonEmptyTokenListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["NonEmptyTokenListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by removing the last element.\n\n- Returns: A new `NonEmptyTokenListSyntax` with the last element removed."},{"p":["NonEmptyTokenListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by removing the first element.\n\n- Returns: A new `NonEmptyTokenListSyntax` with the first element removed."},{"p":["NonEmptyTokenListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Returns a new `NonEmptyTokenListSyntax` with all trivia removed."},{"p":["NonEmptyTokenListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Returns a new `NonEmptyTokenListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["NonEmptyTokenListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Returns a new `NonEmptyTokenListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["NonEmptyTokenListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Returns a new `NonEmptyTokenListSyntax` with its leading trivia removed."},{"p":["NonEmptyTokenListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Returns a new `NonEmptyTokenListSyntax` with its trailing trivia removed."},{"p":["NonEmptyTokenListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["NonEmptyTokenListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["NonEmptyTokenListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18,444],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18],["?",17]],"o":7760},{"p":["NonEmptyTokenListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["NonEmptyTokenListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `NonEmptyTokenListSyntax` with the element at the provided index\n           removed."},{"p":["NonEmptyTokenListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TokenSyntax",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `NonEmptyTokenListSyntax` with that element appended to the end."},{"p":["NonEmptyTokenListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,444],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["TokenSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `NonEmptyTokenListSyntax` with that element appended to the end."},{"p":["NonEmptyTokenListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["NonEmptyTokenListSyntax",18,260]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["TokenSyntax",18],[") -> ",17],["NonEmptyTokenListSyntax",18]],"d":"Creates a new `NonEmptyTokenListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `NonEmptyTokenListSyntax` with the new element at the provided index."},{"p":["ObjCSelectorPieceSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjCSelectorPieceSyntax",18,262]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjCSelectorPieceSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["ObjCSelectorPieceSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjCSelectorPieceSyntax",18,262]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjCSelectorPieceSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["ObjCSelectorPieceSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjCSelectorPieceSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjectLiteralExprSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["ObjectLiteralExprSyntax",18]],"d":"Adds the provided `Argument` to the node's `arguments`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `arguments` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `arguments` collection."},{"p":["ObjectLiteralExprSyntax","withArguments(_:)"],"f":[["func",12],[" ",17],["withArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleExprElementListSyntax",18,342],["?) -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["func",12],[" ",17],["withArguments",7],["(",17],["TupleExprElementListSyntax",18],["?) -> ",17],["ObjectLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `arguments` replaced.\n- param newChild: The new `arguments` to replace the node's\n                  current `arguments`, if present."},{"p":["ObjectLiteralExprSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjectLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["ObjectLiteralExprSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjectLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["ObjectLiteralExprSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ObjectLiteralExprSyntax",18,264]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ObjectLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["ObjectLiteralExprSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["ObjectLiteralExprSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjectLiteralExprSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ObjectLiteralExprSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundFilePathExprSyntax","withPoundFilePath(_:)"],"f":[["func",12],[" ",17],["withPoundFilePath",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundFilePathExprSyntax",18,266]],"s":[["func",12],[" ",17],["withPoundFilePath",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundFilePathExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundFilePath` replaced.\n- param newChild: The new `poundFilePath` to replace the node's\n                  current `poundFilePath`, if present."},{"p":["PoundFilePathExprSyntaxBuilder","usePoundFilePath(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundFilePath",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundFilePath",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundFunctionExprSyntax","withPoundFunction(_:)"],"f":[["func",12],[" ",17],["withPoundFunction",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundFunctionExprSyntax",18,268]],"s":[["func",12],[" ",17],["withPoundFunction",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundFunctionExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundFunction` replaced.\n- param newChild: The new `poundFunction` to replace the node's\n                  current `poundFunction`, if present."},{"p":["PoundFunctionExprSyntaxBuilder","usePoundFunction(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundFunction",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundFunction",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["QualifiedDeclNameSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["QualifiedDeclNameSyntax",18,270]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["QualifiedDeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["QualifiedDeclNameSyntax","withBaseType(_:)"],"f":[["func",12],[" ",17],["withBaseType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["QualifiedDeclNameSyntax",18,270]],"s":[["func",12],[" ",17],["withBaseType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["QualifiedDeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `baseType` replaced.\n- param newChild: The new `baseType` to replace the node's\n                  current `baseType`, if present."},{"p":["QualifiedDeclNameSyntax","withArguments(_:)"],"f":[["func",12],[" ",17],["withArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["QualifiedDeclNameSyntax",18,270]],"s":[["func",12],[" ",17],["withArguments",7],["(",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["QualifiedDeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `arguments` replaced.\n- param newChild: The new `arguments` to replace the node's\n                  current `arguments`, if present."},{"p":["QualifiedDeclNameSyntax","withDot(_:)"],"f":[["func",12],[" ",17],["withDot",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["QualifiedDeclNameSyntax",18,270]],"s":[["func",12],[" ",17],["withDot",7],["(",17],["TokenSyntax",18],["?) -> ",17],["QualifiedDeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `dot` replaced.\n- param newChild: The new `dot` to replace the node's\n                  current `dot`, if present."},{"p":["QualifiedDeclNameSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["QualifiedDeclNameSyntaxBuilder","useBaseType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBaseType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useBaseType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["QualifiedDeclNameSyntaxBuilder","useArguments(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArguments",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["useArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["QualifiedDeclNameSyntaxBuilder","useDot(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDot",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDot",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StringLiteralExprSyntax","addSegment(_:)"],"f":[["func",12],[" ",17],["addSegment",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["func",12],[" ",17],["addSegment",7],["(",17],["Syntax",18],[") -> ",17],["StringLiteralExprSyntax",18]],"d":"Adds the provided `Segment` to the node's `segments`\ncollection.\n- param element: The new `Segment` to add to the node's\n                 `segments` collection.\n- returns: A copy of the receiver with the provided `Segment`\n           appended to its `segments` collection."},{"p":["StringLiteralExprSyntax","withSegments(_:)"],"f":[["func",12],[" ",17],["withSegments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["StringLiteralSegmentsSyntax",18,360],["?) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["func",12],[" ",17],["withSegments",7],["(",17],["StringLiteralSegmentsSyntax",18],["?) -> ",17],["StringLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `segments` replaced.\n- param newChild: The new `segments` to replace the node's\n                  current `segments`, if present."},{"p":["StringLiteralExprSyntax","withOpenQuote(_:)"],"f":[["func",12],[" ",17],["withOpenQuote",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["func",12],[" ",17],["withOpenQuote",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StringLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `openQuote` replaced.\n- param newChild: The new `openQuote` to replace the node's\n                  current `openQuote`, if present."},{"p":["StringLiteralExprSyntax","withCloseQuote(_:)"],"f":[["func",12],[" ",17],["withCloseQuote",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["func",12],[" ",17],["withCloseQuote",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StringLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `closeQuote` replaced.\n- param newChild: The new `closeQuote` to replace the node's\n                  current `closeQuote`, if present."},{"p":["StringLiteralExprSyntax","withOpenDelimiter(_:)"],"f":[["func",12],[" ",17],["withOpenDelimiter",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["func",12],[" ",17],["withOpenDelimiter",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StringLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `openDelimiter` replaced.\n- param newChild: The new `openDelimiter` to replace the node's\n                  current `openDelimiter`, if present."},{"p":["StringLiteralExprSyntax","withCloseDelimiter(_:)"],"f":[["func",12],[" ",17],["withCloseDelimiter",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["StringLiteralExprSyntax",18,272]],"s":[["func",12],[" ",17],["withCloseDelimiter",7],["(",17],["TokenSyntax",18],["?) -> ",17],["StringLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `closeDelimiter` replaced.\n- param newChild: The new `closeDelimiter` to replace the node's\n                  current `closeDelimiter`, if present."},{"p":["StringLiteralExprSyntaxBuilder","addSegment(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addSegment",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addSegment",7],["(",17],["Syntax",18],[")",17]]},{"p":["StringLiteralExprSyntaxBuilder","useOpenQuote(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOpenQuote",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useOpenQuote",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StringLiteralExprSyntaxBuilder","useCloseQuote(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCloseQuote",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useCloseQuote",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StringLiteralExprSyntaxBuilder","useOpenDelimiter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOpenDelimiter",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useOpenDelimiter",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StringLiteralExprSyntaxBuilder","useCloseDelimiter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCloseDelimiter",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useCloseDelimiter",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WithTrailingCommaSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["AssociatedtypeDeclSyntax","withAssociatedtypeKeyword(_:)"],"f":[["func",12],[" ",17],["withAssociatedtypeKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withAssociatedtypeKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `associatedtypeKeyword` replaced.\n- param newChild: The new `associatedtypeKeyword` to replace the node's\n                  current `associatedtypeKeyword`, if present."},{"p":["AssociatedtypeDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["AssociatedtypeDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["AssociatedtypeDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["AssociatedtypeDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["AssociatedtypeDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present.","o":4573},{"p":["AssociatedtypeDeclSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInitializerClauseSyntax",18,366],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["TypeInitializerClauseSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["AssociatedtypeDeclSyntax","withInheritanceClause(_:)"],"f":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `inheritanceClause` replaced.\n- param newChild: The new `inheritanceClause` to replace the node's\n                  current `inheritanceClause`, if present."},{"p":["AssociatedtypeDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["AssociatedtypeDeclSyntax",18,274]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["AssociatedtypeDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["AssociatedtypeDeclSyntaxBuilder","useAssociatedtypeKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssociatedtypeKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAssociatedtypeKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AssociatedtypeDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["AssociatedtypeDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["AssociatedtypeDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AssociatedtypeDeclSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,366],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["TypeInitializerClauseSyntax",18],[")",17]]},{"p":["AssociatedtypeDeclSyntaxBuilder","useInheritanceClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritanceClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],[")",17]],"s":[["func",12],[" ",17],["useInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["AssociatedtypeDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["BinaryOperatorExprSyntax","withOperatorToken(_:)"],"f":[["func",12],[" ",17],["withOperatorToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["BinaryOperatorExprSyntax",18,276]],"s":[["func",12],[" ",17],["withOperatorToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["BinaryOperatorExprSyntax",18]],"d":"Returns a copy of the receiver with its `operatorToken` replaced.\n- param newChild: The new `operatorToken` to replace the node's\n                  current `operatorToken`, if present."},{"p":["BinaryOperatorExprSyntaxBuilder","useOperatorToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOperatorToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useOperatorToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["BooleanLiteralExprSyntax","withBooleanLiteral(_:)"],"f":[["func",12],[" ",17],["withBooleanLiteral",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["BooleanLiteralExprSyntax",18,278]],"s":[["func",12],[" ",17],["withBooleanLiteral",7],["(",17],["TokenSyntax",18],["?) -> ",17],["BooleanLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `booleanLiteral` replaced.\n- param newChild: The new `booleanLiteral` to replace the node's\n                  current `booleanLiteral`, if present."},{"p":["BooleanLiteralExprSyntaxBuilder","useBooleanLiteral(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBooleanLiteral",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useBooleanLiteral",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureItemSyntax","withSpecifier(_:)"],"f":[["func",12],[" ",17],["withSpecifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenListSyntax",18,501],["?) -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["func",12],[" ",17],["withSpecifier",7],["(",17],["TokenListSyntax",18],["?) -> ",17],["ClosureCaptureItemSyntax",18]],"d":"Returns a copy of the receiver with its `specifier` replaced.\n- param newChild: The new `specifier` to replace the node's\n                  current `specifier`, if present."},{"p":["ClosureCaptureItemSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ClosureCaptureItemSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ClosureCaptureItemSyntax","withAssignToken(_:)"],"f":[["func",12],[" ",17],["withAssignToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["func",12],[" ",17],["withAssignToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureCaptureItemSyntax",18]],"d":"Returns a copy of the receiver with its `assignToken` replaced.\n- param newChild: The new `assignToken` to replace the node's\n                  current `assignToken`, if present."},{"p":["ClosureCaptureItemSyntax","addSpecifierToken(_:)"],"f":[["func",12],[" ",17],["addSpecifierToken",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["func",12],[" ",17],["addSpecifierToken",7],["(",17],["TokenSyntax",18],[") -> ",17],["ClosureCaptureItemSyntax",18]],"d":"Adds the provided `SpecifierToken` to the node's `specifier`\ncollection.\n- param element: The new `SpecifierToken` to add to the node's\n                 `specifier` collection.\n- returns: A copy of the receiver with the provided `SpecifierToken`\n           appended to its `specifier` collection."},{"p":["ClosureCaptureItemSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureCaptureItemSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["ClosureCaptureItemSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureCaptureItemSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["ClosureCaptureItemSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ClosureCaptureItemSyntaxBuilder","useAssignToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssignToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAssignToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureItemSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureItemSyntaxBuilder","addSpecifierToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addSpecifierToken",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["addSpecifierToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureItemSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ElseIfContinuationSyntax","withIfStatement(_:)"],"f":[["func",12],[" ",17],["withIfStatement",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["IfStmtSyntax",18,449],["?) -> ",17],["ElseIfContinuationSyntax",18,282]],"s":[["func",12],[" ",17],["withIfStatement",7],["(",17],["IfStmtSyntax",18],["?) -> ",17],["ElseIfContinuationSyntax",18]],"d":"Returns a copy of the receiver with its `ifStatement` replaced.\n- param newChild: The new `ifStatement` to replace the node's\n                  current `ifStatement`, if present."},{"p":["ElseIfContinuationSyntaxBuilder","useIfStatement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIfStatement",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfStmtSyntax",18,449],[")",17]],"s":[["func",12],[" ",17],["useIfStatement",7],["(",17],["IfStmtSyntax",18],[")",17]]},{"p":["GenericRequirementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GenericRequirementSyntax",18,284]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["GenericRequirementSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["GenericRequirementSyntax",18,284]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["Syntax",18],["?) -> ",17],["GenericRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present."},{"p":["GenericRequirementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericRequirementSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["Syntax",18],[")",17]]},{"p":["GenericWhereClauseSyntax","withWhereKeyword(_:)"],"f":[["func",12],[" ",17],["withWhereKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GenericWhereClauseSyntax",18,286]],"s":[["func",12],[" ",17],["withWhereKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericWhereClauseSyntax",18]],"d":"Returns a copy of the receiver with its `whereKeyword` replaced.\n- param newChild: The new `whereKeyword` to replace the node's\n                  current `whereKeyword`, if present."},{"p":["GenericWhereClauseSyntax","addRequirement(_:)"],"f":[["func",12],[" ",17],["addRequirement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["GenericWhereClauseSyntax",18,286]],"s":[["func",12],[" ",17],["addRequirement",7],["(",17],["GenericRequirementSyntax",18],[") -> ",17],["GenericWhereClauseSyntax",18]],"d":"Adds the provided `Requirement` to the node's `requirementList`\ncollection.\n- param element: The new `Requirement` to add to the node's\n                 `requirementList` collection.\n- returns: A copy of the receiver with the provided `Requirement`\n           appended to its `requirementList` collection."},{"p":["GenericWhereClauseSyntax","withRequirementList(_:)"],"f":[["func",12],[" ",17],["withRequirementList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericRequirementListSyntax",18,380],["?) -> ",17],["GenericWhereClauseSyntax",18,286]],"s":[["func",12],[" ",17],["withRequirementList",7],["(",17],["GenericRequirementListSyntax",18],["?) -> ",17],["GenericWhereClauseSyntax",18]],"d":"Returns a copy of the receiver with its `requirementList` replaced.\n- param newChild: The new `requirementList` to replace the node's\n                  current `requirementList`, if present."},{"p":["GenericWhereClauseSyntaxBuilder","useWhereKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhereKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useWhereKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericWhereClauseSyntaxBuilder","addRequirement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addRequirement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["GenericRequirementSyntax",18,284],[")",17]],"s":[["func",12],[" ",17],["addRequirement",7],["(",17],["GenericRequirementSyntax",18],[")",17]]},{"p":["IfConfigClauseListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["IfConfigClauseSyntax",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `IfConfigClauseListSyntax` with that element prepended to the\n           beginning."},{"p":["IfConfigClauseListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["IfConfigClauseListSyntax",18,288],[".",17],["Iterator",18,289]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["IfConfigClauseListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["IfConfigClauseListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by removing the last element.\n\n- Returns: A new `IfConfigClauseListSyntax` with the last element removed."},{"p":["IfConfigClauseListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by removing the first element.\n\n- Returns: A new `IfConfigClauseListSyntax` with the first element removed."},{"p":["IfConfigClauseListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["IfConfigClauseListSyntax",18]],"d":"Returns a new `IfConfigClauseListSyntax` with all trivia removed."},{"p":["IfConfigClauseListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Returns a new `IfConfigClauseListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["IfConfigClauseListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Returns a new `IfConfigClauseListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["IfConfigClauseListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["IfConfigClauseListSyntax",18]],"d":"Returns a new `IfConfigClauseListSyntax` with its leading trivia removed."},{"p":["IfConfigClauseListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["IfConfigClauseListSyntax",18]],"d":"Returns a new `IfConfigClauseListSyntax` with its trailing trivia removed."},{"p":["IfConfigClauseListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["IfConfigClauseListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["IfConfigClauseListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["IfConfigClauseSyntax",18,143],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["IfConfigClauseSyntax",18],["?",17]],"o":7760},{"p":["IfConfigClauseListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["IfConfigClauseListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `IfConfigClauseListSyntax` with the element at the provided index\n           removed."},{"p":["IfConfigClauseListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["appending",7],["(",17],["IfConfigClauseSyntax",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `IfConfigClauseListSyntax` with that element appended to the end."},{"p":["IfConfigClauseListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["IfConfigClauseSyntax",18,143],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["IfConfigClauseSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `IfConfigClauseListSyntax` with that element appended to the end."},{"p":["IfConfigClauseListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["IfConfigClauseListSyntax",18,288]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["IfConfigClauseSyntax",18],[") -> ",17],["IfConfigClauseListSyntax",18]],"d":"Creates a new `IfConfigClauseListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `IfConfigClauseListSyntax` with the new element at the provided index."},{"p":["IntegerLiteralExprSyntax","withDigits(_:)"],"f":[["func",12],[" ",17],["withDigits",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["IntegerLiteralExprSyntax",18,290]],"s":[["func",12],[" ",17],["withDigits",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IntegerLiteralExprSyntax",18]],"d":"Returns a copy of the receiver with its `digits` replaced.\n- param newChild: The new `digits` to replace the node's\n                  current `digits`, if present."},{"p":["IntegerLiteralExprSyntaxBuilder","useDigits(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDigits",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDigits",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberDeclListItemSyntax","withDecl(_:)"],"f":[["func",12],[" ",17],["withDecl",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclSyntax",18,440],["?) -> ",17],["MemberDeclListItemSyntax",18,292]],"s":[["func",12],[" ",17],["withDecl",7],["(",17],["DeclSyntax",18],["?) -> ",17],["MemberDeclListItemSyntax",18]],"d":"Returns a copy of the receiver with its `decl` replaced.\n- param newChild: The new `decl` to replace the node's\n                  current `decl`, if present."},{"p":["MemberDeclListItemSyntax","withSemicolon(_:)"],"f":[["func",12],[" ",17],["withSemicolon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["MemberDeclListItemSyntax",18,292]],"s":[["func",12],[" ",17],["withSemicolon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberDeclListItemSyntax",18]],"d":"Returns a copy of the receiver with its `semicolon` replaced.\n- param newChild: The new `semicolon` to replace the node's\n                  current `semicolon`, if present."},{"p":["MemberDeclListItemSyntaxBuilder","useDecl(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDecl",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclSyntax",18,440],[")",17]],"s":[["func",12],[" ",17],["useDecl",7],["(",17],["DeclSyntax",18],[")",17]]},{"p":["MemberDeclListItemSyntaxBuilder","useSemicolon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSemicolon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useSemicolon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PatternBindingListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["PatternBindingSyntax",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `PatternBindingListSyntax` with that element prepended to the\n           beginning."},{"p":["PatternBindingListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PatternBindingListSyntax",18,294],[".",17],["Iterator",18,295]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PatternBindingListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["PatternBindingListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by removing the last element.\n\n- Returns: A new `PatternBindingListSyntax` with the last element removed."},{"p":["PatternBindingListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by removing the first element.\n\n- Returns: A new `PatternBindingListSyntax` with the first element removed."},{"p":["PatternBindingListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PatternBindingListSyntax",18]],"d":"Returns a new `PatternBindingListSyntax` with all trivia removed."},{"p":["PatternBindingListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Returns a new `PatternBindingListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["PatternBindingListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Returns a new `PatternBindingListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["PatternBindingListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PatternBindingListSyntax",18]],"d":"Returns a new `PatternBindingListSyntax` with its leading trivia removed."},{"p":["PatternBindingListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PatternBindingListSyntax",18]],"d":"Returns a new `PatternBindingListSyntax` with its trailing trivia removed."},{"p":["PatternBindingListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["PatternBindingListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["PatternBindingListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["PatternBindingSyntax",18,149],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["PatternBindingSyntax",18],["?",17]],"o":7760},{"p":["PatternBindingListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["PatternBindingListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `PatternBindingListSyntax` with the element at the provided index\n           removed."},{"p":["PatternBindingListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["appending",7],["(",17],["PatternBindingSyntax",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `PatternBindingListSyntax` with that element appended to the end."},{"p":["PatternBindingListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PatternBindingSyntax",18,149],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["PatternBindingSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `PatternBindingListSyntax` with that element appended to the end."},{"p":["PatternBindingListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["PatternBindingListSyntax",18,294]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["PatternBindingSyntax",18],[") -> ",17],["PatternBindingListSyntax",18]],"d":"Creates a new `PatternBindingListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `PatternBindingListSyntax` with the new element at the provided index."},{"p":["PoundDsohandleExprSyntax","withPoundDsohandle(_:)"],"f":[["func",12],[" ",17],["withPoundDsohandle",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundDsohandleExprSyntax",18,296]],"s":[["func",12],[" ",17],["withPoundDsohandle",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundDsohandleExprSyntax",18]],"d":"Returns a copy of the receiver with its `poundDsohandle` replaced.\n- param newChild: The new `poundDsohandle` to replace the node's\n                  current `poundDsohandle`, if present."},{"p":["PoundDsohandleExprSyntaxBuilder","usePoundDsohandle(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundDsohandle",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundDsohandle",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrefixOperatorExprSyntax","withOperatorToken(_:)"],"f":[["func",12],[" ",17],["withOperatorToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrefixOperatorExprSyntax",18,298]],"s":[["func",12],[" ",17],["withOperatorToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrefixOperatorExprSyntax",18]],"d":"Returns a copy of the receiver with its `operatorToken` replaced.\n- param newChild: The new `operatorToken` to replace the node's\n                  current `operatorToken`, if present."},{"p":["PrefixOperatorExprSyntax","withPostfixExpression(_:)"],"f":[["func",12],[" ",17],["withPostfixExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["PrefixOperatorExprSyntax",18,298]],"s":[["func",12],[" ",17],["withPostfixExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["PrefixOperatorExprSyntax",18]],"d":"Returns a copy of the receiver with its `postfixExpression` replaced.\n- param newChild: The new `postfixExpression` to replace the node's\n                  current `postfixExpression`, if present."},{"p":["PrefixOperatorExprSyntaxBuilder","useOperatorToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOperatorToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useOperatorToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrefixOperatorExprSyntaxBuilder","usePostfixExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePostfixExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["usePostfixExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["SwitchDefaultLabelSyntax","withDefaultKeyword(_:)"],"f":[["func",12],[" ",17],["withDefaultKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SwitchDefaultLabelSyntax",18,300]],"s":[["func",12],[" ",17],["withDefaultKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchDefaultLabelSyntax",18]],"d":"Returns a copy of the receiver with its `defaultKeyword` replaced.\n- param newChild: The new `defaultKeyword` to replace the node's\n                  current `defaultKeyword`, if present."},{"p":["SwitchDefaultLabelSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SwitchDefaultLabelSyntax",18,300]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SwitchDefaultLabelSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["SwitchDefaultLabelSyntaxBuilder","useDefaultKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDefaultKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDefaultKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SwitchDefaultLabelSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessLevelModifierSyntax","withModifier(_:)"],"f":[["func",12],[" ",17],["withModifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessLevelModifierSyntax",18,302]],"s":[["func",12],[" ",17],["withModifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessLevelModifierSyntax",18]],"d":"Returns a copy of the receiver with its `modifier` replaced.\n- param newChild: The new `modifier` to replace the node's\n                  current `modifier`, if present."},{"p":["AccessLevelModifierSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessLevelModifierSyntax",18,302]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessLevelModifierSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["AccessLevelModifierSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessLevelModifierSyntax",18,302]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessLevelModifierSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["AccessLevelModifierSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessLevelModifierSyntax",18,302]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessLevelModifierSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["AccessLevelModifierSyntaxBuilder","useModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useModifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useModifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessLevelModifierSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessLevelModifierSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessLevelModifierSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessPathComponentSyntax","withTrailingDot(_:)"],"f":[["func",12],[" ",17],["withTrailingDot",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessPathComponentSyntax",18,304]],"s":[["func",12],[" ",17],["withTrailingDot",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessPathComponentSyntax",18]],"d":"Returns a copy of the receiver with its `trailingDot` replaced.\n- param newChild: The new `trailingDot` to replace the node's\n                  current `trailingDot`, if present."},{"p":["AccessPathComponentSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AccessPathComponentSyntax",18,304]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AccessPathComponentSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["AccessPathComponentSyntaxBuilder","useTrailingDot(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingDot",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingDot",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AccessPathComponentSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumCaseElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["EnumCaseElementSyntax",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `EnumCaseElementListSyntax` with that element prepended to the\n           beginning."},{"p":["EnumCaseElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["EnumCaseElementListSyntax",18,306],[".",17],["Iterator",18,307]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["EnumCaseElementListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["EnumCaseElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by removing the last element.\n\n- Returns: A new `EnumCaseElementListSyntax` with the last element removed."},{"p":["EnumCaseElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by removing the first element.\n\n- Returns: A new `EnumCaseElementListSyntax` with the first element removed."},{"p":["EnumCaseElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["EnumCaseElementListSyntax",18]],"d":"Returns a new `EnumCaseElementListSyntax` with all trivia removed."},{"p":["EnumCaseElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Returns a new `EnumCaseElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["EnumCaseElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Returns a new `EnumCaseElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["EnumCaseElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["EnumCaseElementListSyntax",18]],"d":"Returns a new `EnumCaseElementListSyntax` with its leading trivia removed."},{"p":["EnumCaseElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["EnumCaseElementListSyntax",18]],"d":"Returns a new `EnumCaseElementListSyntax` with its trailing trivia removed."},{"p":["EnumCaseElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["EnumCaseElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["EnumCaseElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["EnumCaseElementSyntax",18,168],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["EnumCaseElementSyntax",18],["?",17]],"o":7760},{"p":["EnumCaseElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["EnumCaseElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `EnumCaseElementListSyntax` with the element at the provided index\n           removed."},{"p":["EnumCaseElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["appending",7],["(",17],["EnumCaseElementSyntax",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `EnumCaseElementListSyntax` with that element appended to the end."},{"p":["EnumCaseElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["EnumCaseElementSyntax",18,168],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["EnumCaseElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `EnumCaseElementListSyntax` with that element appended to the end."},{"p":["EnumCaseElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["EnumCaseElementListSyntax",18,306]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["EnumCaseElementSyntax",18],[") -> ",17],["EnumCaseElementListSyntax",18]],"d":"Creates a new `EnumCaseElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `EnumCaseElementListSyntax` with the new element at the provided index."},{"p":["GenericArgumentListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["GenericArgumentSyntax",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `GenericArgumentListSyntax` with that element prepended to the\n           beginning."},{"p":["GenericArgumentListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["GenericArgumentListSyntax",18,308],[".",17],["Iterator",18,309]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["GenericArgumentListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["GenericArgumentListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by removing the last element.\n\n- Returns: A new `GenericArgumentListSyntax` with the last element removed."},{"p":["GenericArgumentListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by removing the first element.\n\n- Returns: A new `GenericArgumentListSyntax` with the first element removed."},{"p":["GenericArgumentListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["GenericArgumentListSyntax",18]],"d":"Returns a new `GenericArgumentListSyntax` with all trivia removed."},{"p":["GenericArgumentListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Returns a new `GenericArgumentListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["GenericArgumentListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Returns a new `GenericArgumentListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["GenericArgumentListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["GenericArgumentListSyntax",18]],"d":"Returns a new `GenericArgumentListSyntax` with its leading trivia removed."},{"p":["GenericArgumentListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["GenericArgumentListSyntax",18]],"d":"Returns a new `GenericArgumentListSyntax` with its trailing trivia removed."},{"p":["GenericArgumentListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["GenericArgumentListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["GenericArgumentListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["GenericArgumentSyntax",18,176],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["GenericArgumentSyntax",18],["?",17]],"o":7760},{"p":["GenericArgumentListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["GenericArgumentListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `GenericArgumentListSyntax` with the element at the provided index\n           removed."},{"p":["GenericArgumentListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["appending",7],["(",17],["GenericArgumentSyntax",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `GenericArgumentListSyntax` with that element appended to the end."},{"p":["GenericArgumentListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericArgumentSyntax",18,176],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["GenericArgumentSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `GenericArgumentListSyntax` with that element appended to the end."},{"p":["GenericArgumentListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["GenericArgumentListSyntax",18,308]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["GenericArgumentSyntax",18],[") -> ",17],["GenericArgumentListSyntax",18]],"d":"Creates a new `GenericArgumentListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `GenericArgumentListSyntax` with the new element at the provided index."},{"p":["PostfixIfConfigExprSyntax","withConfig(_:)"],"f":[["func",12],[" ",17],["withConfig",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["IfConfigDeclSyntax",18,73],["?) -> ",17],["PostfixIfConfigExprSyntax",18,310]],"s":[["func",12],[" ",17],["withConfig",7],["(",17],["IfConfigDeclSyntax",18],["?) -> ",17],["PostfixIfConfigExprSyntax",18]],"d":"Returns a copy of the receiver with its `config` replaced.\n- param newChild: The new `config` to replace the node's\n                  current `config`, if present."},{"p":["PostfixIfConfigExprSyntax","withBase(_:)"],"f":[["func",12],[" ",17],["withBase",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["PostfixIfConfigExprSyntax",18,310]],"s":[["func",12],[" ",17],["withBase",7],["(",17],["ExprSyntax",18],["?) -> ",17],["PostfixIfConfigExprSyntax",18]],"d":"Returns a copy of the receiver with its `base` replaced.\n- param newChild: The new `base` to replace the node's\n                  current `base`, if present."},{"p":["PostfixIfConfigExprSyntaxBuilder","useConfig(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useConfig",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigDeclSyntax",18,73],[")",17]],"s":[["func",12],[" ",17],["useConfig",7],["(",17],["IfConfigDeclSyntax",18],[")",17]]},{"p":["PostfixIfConfigExprSyntaxBuilder","useBase(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBase",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useBase",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["PoundSourceLocationSyntax","withPoundSourceLocation(_:)"],"f":[["func",12],[" ",17],["withPoundSourceLocation",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundSourceLocationSyntax",18,312]],"s":[["func",12],[" ",17],["withPoundSourceLocation",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationSyntax",18]],"d":"Returns a copy of the receiver with its `poundSourceLocation` replaced.\n- param newChild: The new `poundSourceLocation` to replace the node's\n                  current `poundSourceLocation`, if present."},{"p":["PoundSourceLocationSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundSourceLocationSyntax",18,312]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["PoundSourceLocationSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundSourceLocationSyntax",18,312]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["PoundSourceLocationSyntax","withArgs(_:)"],"f":[["func",12],[" ",17],["withArgs",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PoundSourceLocationArgsSyntax",18,388],["?) -> ",17],["PoundSourceLocationSyntax",18,312]],"s":[["func",12],[" ",17],["withArgs",7],["(",17],["PoundSourceLocationArgsSyntax",18],["?) -> ",17],["PoundSourceLocationSyntax",18]],"d":"Returns a copy of the receiver with its `args` replaced.\n- param newChild: The new `args` to replace the node's\n                  current `args`, if present."},{"p":["PoundSourceLocationSyntaxBuilder","usePoundSourceLocation(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundSourceLocation",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundSourceLocation",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationSyntaxBuilder","useArgs(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArgs",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationArgsSyntax",18,388],[")",17]],"s":[["func",12],[" ",17],["useArgs",7],["(",17],["PoundSourceLocationArgsSyntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntax","addGroupAttribute(_:)"],"f":[["func",12],[" ",17],["addGroupAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["addGroupAttribute",7],["(",17],["Syntax",18],[") -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Adds the provided `GroupAttribute` to the node's `groupAttributes`\ncollection.\n- param element: The new `GroupAttribute` to add to the node's\n                 `groupAttributes` collection.\n- returns: A copy of the receiver with the provided `GroupAttribute`\n           appended to its `groupAttributes` collection."},{"p":["PrecedenceGroupDeclSyntax","withGroupAttributes(_:)"],"f":[["func",12],[" ",17],["withGroupAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PrecedenceGroupAttributeListSyntax",18,424],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withGroupAttributes",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `groupAttributes` replaced.\n- param newChild: The new `groupAttributes` to replace the node's\n                  current `groupAttributes`, if present."},{"p":["PrecedenceGroupDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["PrecedenceGroupDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["PrecedenceGroupDeclSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `leftBrace` replaced.\n- param newChild: The new `leftBrace` to replace the node's\n                  current `leftBrace`, if present."},{"p":["PrecedenceGroupDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["PrecedenceGroupDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["PrecedenceGroupDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present.","o":4573},{"p":["PrecedenceGroupDeclSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `rightBrace` replaced.\n- param newChild: The new `rightBrace` to replace the node's\n                  current `rightBrace`, if present."},{"p":["PrecedenceGroupDeclSyntax","withPrecedencegroupKeyword(_:)"],"f":[["func",12],[" ",17],["withPrecedencegroupKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupDeclSyntax",18,314]],"s":[["func",12],[" ",17],["withPrecedencegroupKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupDeclSyntax",18]],"d":"Returns a copy of the receiver with its `precedencegroupKeyword` replaced.\n- param newChild: The new `precedencegroupKeyword` to replace the node's\n                  current `precedencegroupKeyword`, if present."},{"p":["PrecedenceGroupDeclSyntaxBuilder","addGroupAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addGroupAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addGroupAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntaxBuilder","useLeftBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntaxBuilder","useRightBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupDeclSyntaxBuilder","usePrecedencegroupKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePrecedencegroupKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePrecedencegroupKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SameTypeRequirementSyntax","withLeftTypeIdentifier(_:)"],"f":[["func",12],[" ",17],["withLeftTypeIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["SameTypeRequirementSyntax",18,316]],"s":[["func",12],[" ",17],["withLeftTypeIdentifier",7],["(",17],["TypeSyntax",18],["?) -> ",17],["SameTypeRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `leftTypeIdentifier` replaced.\n- param newChild: The new `leftTypeIdentifier` to replace the node's\n                  current `leftTypeIdentifier`, if present."},{"p":["SameTypeRequirementSyntax","withRightTypeIdentifier(_:)"],"f":[["func",12],[" ",17],["withRightTypeIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["SameTypeRequirementSyntax",18,316]],"s":[["func",12],[" ",17],["withRightTypeIdentifier",7],["(",17],["TypeSyntax",18],["?) -> ",17],["SameTypeRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `rightTypeIdentifier` replaced.\n- param newChild: The new `rightTypeIdentifier` to replace the node's\n                  current `rightTypeIdentifier`, if present."},{"p":["SameTypeRequirementSyntax","withEqualityToken(_:)"],"f":[["func",12],[" ",17],["withEqualityToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SameTypeRequirementSyntax",18,316]],"s":[["func",12],[" ",17],["withEqualityToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SameTypeRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `equalityToken` replaced.\n- param newChild: The new `equalityToken` to replace the node's\n                  current `equalityToken`, if present."},{"p":["SameTypeRequirementSyntaxBuilder","useLeftTypeIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftTypeIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useLeftTypeIdentifier",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["SameTypeRequirementSyntaxBuilder","useRightTypeIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightTypeIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useRightTypeIdentifier",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["SameTypeRequirementSyntaxBuilder","useEqualityToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEqualityToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useEqualityToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TargetFunctionEntrySyntax","withDelcname(_:)"],"f":[["func",12],[" ",17],["withDelcname",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameSyntax",18,459],["?) -> ",17],["TargetFunctionEntrySyntax",18,318]],"s":[["func",12],[" ",17],["withDelcname",7],["(",17],["DeclNameSyntax",18],["?) -> ",17],["TargetFunctionEntrySyntax",18]],"d":"Returns a copy of the receiver with its `delcname` replaced.\n- param newChild: The new `delcname` to replace the node's\n                  current `delcname`, if present."},{"p":["TargetFunctionEntrySyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TargetFunctionEntrySyntax",18,318]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TargetFunctionEntrySyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["TargetFunctionEntrySyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TargetFunctionEntrySyntax",18,318]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TargetFunctionEntrySyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["TargetFunctionEntrySyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TargetFunctionEntrySyntax",18,318]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TargetFunctionEntrySyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["TargetFunctionEntrySyntaxBuilder","useDelcname(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDelcname",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameSyntax",18,459],[")",17]],"s":[["func",12],[" ",17],["useDelcname",7],["(",17],["DeclNameSyntax",18],[")",17]]},{"p":["TargetFunctionEntrySyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TargetFunctionEntrySyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TargetFunctionEntrySyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TuplePatternElementSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,453],["?) -> ",17],["TuplePatternElementSyntax",18,320]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["TuplePatternElementSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["TuplePatternElementSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TuplePatternElementSyntax",18,320]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TuplePatternElementSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present.","o":5949},{"p":["TuplePatternElementSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TuplePatternElementSyntax",18,320]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TuplePatternElementSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present.","o":5950},{"p":["TuplePatternElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TuplePatternElementSyntax",18,320]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TuplePatternElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["TuplePatternElementSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["TuplePatternElementSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TuplePatternElementSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TuplePatternElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ValueBindingPatternSyntax","withValuePattern(_:)"],"f":[["func",12],[" ",17],["withValuePattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,453],["?) -> ",17],["ValueBindingPatternSyntax",18,322]],"s":[["func",12],[" ",17],["withValuePattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["ValueBindingPatternSyntax",18]],"d":"Returns a copy of the receiver with its `valuePattern` replaced.\n- param newChild: The new `valuePattern` to replace the node's\n                  current `valuePattern`, if present."},{"p":["ValueBindingPatternSyntax","withLetOrVarKeyword(_:)"],"f":[["func",12],[" ",17],["withLetOrVarKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ValueBindingPatternSyntax",18,322]],"s":[["func",12],[" ",17],["withLetOrVarKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ValueBindingPatternSyntax",18]],"d":"Returns a copy of the receiver with its `letOrVarKeyword` replaced.\n- param newChild: The new `letOrVarKeyword` to replace the node's\n                  current `letOrVarKeyword`, if present."},{"p":["ValueBindingPatternSyntaxBuilder","useValuePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValuePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["useValuePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["ValueBindingPatternSyntaxBuilder","useLetOrVarKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLetOrVarKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLetOrVarKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityArgumentSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AvailabilityArgumentSyntax",18,324]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["AvailabilityArgumentSyntax","withEntry(_:)"],"f":[["func",12],[" ",17],["withEntry",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["AvailabilityArgumentSyntax",18,324]],"s":[["func",12],[" ",17],["withEntry",7],["(",17],["Syntax",18],["?) -> ",17],["AvailabilityArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `entry` replaced.\n- param newChild: The new `entry` to replace the node's\n                  current `entry`, if present."},{"p":["AvailabilityArgumentSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityArgumentSyntaxBuilder","useEntry(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEntry",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useEntry",7],["(",17],["Syntax",18],[")",17]]},{"p":["AvailabilitySpecListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `AvailabilitySpecListSyntax` with that element prepended to the\n           beginning."},{"p":["AvailabilitySpecListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326],[".",17],["Iterator",18,327]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AvailabilitySpecListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["AvailabilitySpecListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by removing the last element.\n\n- Returns: A new `AvailabilitySpecListSyntax` with the last element removed."},{"p":["AvailabilitySpecListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by removing the first element.\n\n- Returns: A new `AvailabilitySpecListSyntax` with the first element removed."},{"p":["AvailabilitySpecListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Returns a new `AvailabilitySpecListSyntax` with all trivia removed."},{"p":["AvailabilitySpecListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Returns a new `AvailabilitySpecListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["AvailabilitySpecListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Returns a new `AvailabilitySpecListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["AvailabilitySpecListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Returns a new `AvailabilitySpecListSyntax` with its leading trivia removed."},{"p":["AvailabilitySpecListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Returns a new `AvailabilitySpecListSyntax` with its trailing trivia removed."},{"p":["AvailabilitySpecListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["AvailabilitySpecListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["AvailabilitySpecListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["AvailabilityArgumentSyntax",18,324],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["AvailabilityArgumentSyntax",18],["?",17]],"o":7760},{"p":["AvailabilitySpecListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["AvailabilitySpecListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `AvailabilitySpecListSyntax` with the element at the provided index\n           removed."},{"p":["AvailabilitySpecListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["appending",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `AvailabilitySpecListSyntax` with that element appended to the end."},{"p":["AvailabilitySpecListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["AvailabilityArgumentSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `AvailabilitySpecListSyntax` with that element appended to the end."},{"p":["AvailabilitySpecListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["AvailabilitySpecListSyntax",18,326]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["AvailabilitySpecListSyntax",18]],"d":"Creates a new `AvailabilitySpecListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `AvailabilitySpecListSyntax` with the new element at the provided index."},{"p":["ClassRestrictionTypeSyntax","withClassKeyword(_:)"],"f":[["func",12],[" ",17],["withClassKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClassRestrictionTypeSyntax",18,328]],"s":[["func",12],[" ",17],["withClassKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClassRestrictionTypeSyntax",18]],"d":"Returns a copy of the receiver with its `classKeyword` replaced.\n- param newChild: The new `classKeyword` to replace the node's\n                  current `classKeyword`, if present."},{"p":["ClassRestrictionTypeSyntaxBuilder","useClassKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useClassKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useClassKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ConditionElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ConditionElementListSyntax` with that element prepended to the\n           beginning."},{"p":["ConditionElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ConditionElementListSyntax",18,330],[".",17],["Iterator",18,331]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ConditionElementListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["ConditionElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by removing the last element.\n\n- Returns: A new `ConditionElementListSyntax` with the last element removed."},{"p":["ConditionElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by removing the first element.\n\n- Returns: A new `ConditionElementListSyntax` with the first element removed."},{"p":["ConditionElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ConditionElementListSyntax",18]],"d":"Returns a new `ConditionElementListSyntax` with all trivia removed."},{"p":["ConditionElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Returns a new `ConditionElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ConditionElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Returns a new `ConditionElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ConditionElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ConditionElementListSyntax",18]],"d":"Returns a new `ConditionElementListSyntax` with its leading trivia removed."},{"p":["ConditionElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ConditionElementListSyntax",18]],"d":"Returns a new `ConditionElementListSyntax` with its trailing trivia removed."},{"p":["ConditionElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["ConditionElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["ConditionElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ConditionElementSyntax",18,208],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ConditionElementSyntax",18],["?",17]],"o":7760},{"p":["ConditionElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["ConditionElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ConditionElementListSyntax` with the element at the provided index\n           removed."},{"p":["ConditionElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ConditionElementListSyntax` with that element appended to the end."},{"p":["ConditionElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ConditionElementSyntax",18,208],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ConditionElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ConditionElementListSyntax` with that element appended to the end."},{"p":["ConditionElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["ConditionElementListSyntax",18,330]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ConditionElementSyntax",18],[") -> ",17],["ConditionElementListSyntax",18]],"d":"Creates a new `ConditionElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ConditionElementListSyntax` with the new element at the provided index."},{"p":["DeclNameArgumentListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["DeclNameArgumentSyntax",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `DeclNameArgumentListSyntax` with that element prepended to the\n           beginning."},{"p":["DeclNameArgumentListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["DeclNameArgumentListSyntax",18,332],[".",17],["Iterator",18,333]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["DeclNameArgumentListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["DeclNameArgumentListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by removing the last element.\n\n- Returns: A new `DeclNameArgumentListSyntax` with the last element removed."},{"p":["DeclNameArgumentListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by removing the first element.\n\n- Returns: A new `DeclNameArgumentListSyntax` with the first element removed."},{"p":["DeclNameArgumentListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Returns a new `DeclNameArgumentListSyntax` with all trivia removed."},{"p":["DeclNameArgumentListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Returns a new `DeclNameArgumentListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["DeclNameArgumentListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Returns a new `DeclNameArgumentListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["DeclNameArgumentListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Returns a new `DeclNameArgumentListSyntax` with its leading trivia removed."},{"p":["DeclNameArgumentListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Returns a new `DeclNameArgumentListSyntax` with its trailing trivia removed."},{"p":["DeclNameArgumentListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["DeclNameArgumentListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["DeclNameArgumentListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["DeclNameArgumentSyntax",18,210],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["DeclNameArgumentSyntax",18],["?",17]],"o":7760},{"p":["DeclNameArgumentListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["DeclNameArgumentListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `DeclNameArgumentListSyntax` with the element at the provided index\n           removed."},{"p":["DeclNameArgumentListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["func",12],[" ",17],["appending",7],["(",17],["DeclNameArgumentSyntax",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `DeclNameArgumentListSyntax` with that element appended to the end."},{"p":["DeclNameArgumentListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DeclNameArgumentSyntax",18,210],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["DeclNameArgumentSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `DeclNameArgumentListSyntax` with that element appended to the end."},{"p":["DeclNameArgumentListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["DeclNameArgumentListSyntax",18,332]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["DeclNameArgumentSyntax",18],[") -> ",17],["DeclNameArgumentListSyntax",18]],"d":"Creates a new `DeclNameArgumentListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `DeclNameArgumentListSyntax` with the new element at the provided index."},{"p":["GenericParameterListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["GenericParameterListSyntax",18,334]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["GenericParameterSyntax",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `GenericParameterListSyntax` with that element prepended to the\n           beginning."},{"p":["GenericParameterListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["GenericParameterListSyntax",18,334],[".",17],["Iterator",18,335]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["GenericParameterListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["GenericParameterListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["GenericParameterListSyntax",18,334]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by removing the last element.\n\n- Returns: A new `GenericParameterListSyntax` with the last element removed."},{"p":["GenericParameterListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["GenericParameterListSyntax",18,334]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by removing the first element.\n\n- Returns: A new `GenericParameterListSyntax` with the first element removed."},{"p":["GenericParameterListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["GenericParameterListSyntax",18,334]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["GenericParameterListSyntax",18]],"d":"Returns a new `GenericParameterListSyntax` with all trivia removed."},{"p":["GenericParameterListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["GenericParameterListSyntax",18,334]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Returns a new `GenericParameterListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["GenericParameterListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["GenericParameterListSyntax",18,334]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Returns a new `GenericParameterListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["GenericParameterListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["GenericParameterListSyntax",18,334]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["GenericParameterListSyntax",18]],"d":"Returns a new `GenericParameterListSyntax` with its leading trivia removed."},{"p":["GenericParameterListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["GenericParameterListSyntax",18,334]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["GenericParameterListSyntax",18]],"d":"Returns a new `GenericParameterListSyntax` with its trailing trivia removed."},{"p":["GenericParameterListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["GenericParameterListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["GenericParameterListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["GenericParameterSyntax",18,218],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["GenericParameterSyntax",18],["?",17]],"o":7760},{"p":["GenericParameterListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["GenericParameterListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["GenericParameterListSyntax",18,334]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `GenericParameterListSyntax` with the element at the provided index\n           removed."},{"p":["GenericParameterListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["GenericParameterListSyntax",18,334]],"s":[["func",12],[" ",17],["appending",7],["(",17],["GenericParameterSyntax",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `GenericParameterListSyntax` with that element appended to the end."},{"p":["GenericParameterListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericParameterSyntax",18,218],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["GenericParameterListSyntax",18,334]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["GenericParameterSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `GenericParameterListSyntax` with that element appended to the end."},{"p":["GenericParameterListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["GenericParameterListSyntax",18,334]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["GenericParameterSyntax",18],[") -> ",17],["GenericParameterListSyntax",18]],"d":"Creates a new `GenericParameterListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `GenericParameterListSyntax` with the new element at the provided index."},{"p":["MemberTypeIdentifierSyntax","withBaseType(_:)"],"f":[["func",12],[" ",17],["withBaseType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["MemberTypeIdentifierSyntax",18,336]],"s":[["func",12],[" ",17],["withBaseType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["MemberTypeIdentifierSyntax",18]],"d":"Returns a copy of the receiver with its `baseType` replaced.\n- param newChild: The new `baseType` to replace the node's\n                  current `baseType`, if present."},{"p":["MemberTypeIdentifierSyntax","withPeriod(_:)"],"f":[["func",12],[" ",17],["withPeriod",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["MemberTypeIdentifierSyntax",18,336]],"s":[["func",12],[" ",17],["withPeriod",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberTypeIdentifierSyntax",18]],"d":"Returns a copy of the receiver with its `period` replaced.\n- param newChild: The new `period` to replace the node's\n                  current `period`, if present."},{"p":["MemberTypeIdentifierSyntax","withGenericArgumentClause(_:)"],"f":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericArgumentClauseSyntax",18,356],["?) -> ",17],["MemberTypeIdentifierSyntax",18,336]],"s":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["MemberTypeIdentifierSyntax",18]],"d":"Returns a copy of the receiver with its `genericArgumentClause` replaced.\n- param newChild: The new `genericArgumentClause` to replace the node's\n                  current `genericArgumentClause`, if present."},{"p":["MemberTypeIdentifierSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["MemberTypeIdentifierSyntax",18,336]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MemberTypeIdentifierSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["MemberTypeIdentifierSyntaxBuilder","useBaseType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBaseType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useBaseType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["MemberTypeIdentifierSyntaxBuilder","useGenericArgumentClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,356],[")",17]],"s":[["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]]},{"p":["MemberTypeIdentifierSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MemberTypeIdentifierSyntaxBuilder","usePeriod(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePeriod",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePeriod",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["OptionalChainingExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["OptionalChainingExprSyntax",18,338]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["OptionalChainingExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["OptionalChainingExprSyntax","withQuestionMark(_:)"],"f":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["OptionalChainingExprSyntax",18,338]],"s":[["func",12],[" ",17],["withQuestionMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OptionalChainingExprSyntax",18]],"d":"Returns a copy of the receiver with its `questionMark` replaced.\n- param newChild: The new `questionMark` to replace the node's\n                  current `questionMark`, if present."},{"p":["OptionalChainingExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["OptionalChainingExprSyntaxBuilder","useQuestionMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useQuestionMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useQuestionMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SimpleTypeIdentifierSyntax","withGenericArgumentClause(_:)"],"f":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericArgumentClauseSyntax",18,356],["?) -> ",17],["SimpleTypeIdentifierSyntax",18,340]],"s":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["SimpleTypeIdentifierSyntax",18]],"d":"Returns a copy of the receiver with its `genericArgumentClause` replaced.\n- param newChild: The new `genericArgumentClause` to replace the node's\n                  current `genericArgumentClause`, if present."},{"p":["SimpleTypeIdentifierSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SimpleTypeIdentifierSyntax",18,340]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SimpleTypeIdentifierSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["SimpleTypeIdentifierSyntaxBuilder","useGenericArgumentClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,356],[")",17]],"s":[["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]]},{"p":["SimpleTypeIdentifierSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleExprElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `TupleExprElementListSyntax` with that element prepended to the\n           beginning."},{"p":["TupleExprElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TupleExprElementListSyntax",18,342],[".",17],["Iterator",18,343]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TupleExprElementListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["TupleExprElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by removing the last element.\n\n- Returns: A new `TupleExprElementListSyntax` with the last element removed."},{"p":["TupleExprElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by removing the first element.\n\n- Returns: A new `TupleExprElementListSyntax` with the first element removed."},{"p":["TupleExprElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TupleExprElementListSyntax",18]],"d":"Returns a new `TupleExprElementListSyntax` with all trivia removed."},{"p":["TupleExprElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Returns a new `TupleExprElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["TupleExprElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Returns a new `TupleExprElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["TupleExprElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TupleExprElementListSyntax",18]],"d":"Returns a new `TupleExprElementListSyntax` with its leading trivia removed."},{"p":["TupleExprElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TupleExprElementListSyntax",18]],"d":"Returns a new `TupleExprElementListSyntax` with its trailing trivia removed."},{"p":["TupleExprElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["TupleExprElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["TupleExprElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TupleExprElementSyntax",18,230],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TupleExprElementSyntax",18],["?",17]],"o":7760},{"p":["TupleExprElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["TupleExprElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `TupleExprElementListSyntax` with the element at the provided index\n           removed."},{"p":["TupleExprElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `TupleExprElementListSyntax` with that element appended to the end."},{"p":["TupleExprElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TupleExprElementSyntax",18,230],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["TupleExprElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `TupleExprElementListSyntax` with that element appended to the end."},{"p":["TupleExprElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["TupleExprElementListSyntax",18,342]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["TupleExprElementSyntax",18],[") -> ",17],["TupleExprElementListSyntax",18]],"d":"Creates a new `TupleExprElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `TupleExprElementListSyntax` with the new element at the provided index."},{"p":["TupleTypeElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `TupleTypeElementListSyntax` with that element prepended to the\n           beginning."},{"p":["TupleTypeElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TupleTypeElementListSyntax",18,344],[".",17],["Iterator",18,345]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TupleTypeElementListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["TupleTypeElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by removing the last element.\n\n- Returns: A new `TupleTypeElementListSyntax` with the last element removed."},{"p":["TupleTypeElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by removing the first element.\n\n- Returns: A new `TupleTypeElementListSyntax` with the first element removed."},{"p":["TupleTypeElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TupleTypeElementListSyntax",18]],"d":"Returns a new `TupleTypeElementListSyntax` with all trivia removed."},{"p":["TupleTypeElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Returns a new `TupleTypeElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["TupleTypeElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Returns a new `TupleTypeElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["TupleTypeElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TupleTypeElementListSyntax",18]],"d":"Returns a new `TupleTypeElementListSyntax` with its leading trivia removed."},{"p":["TupleTypeElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TupleTypeElementListSyntax",18]],"d":"Returns a new `TupleTypeElementListSyntax` with its trailing trivia removed."},{"p":["TupleTypeElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["TupleTypeElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["TupleTypeElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TupleTypeElementSyntax",18,232],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TupleTypeElementSyntax",18],["?",17]],"o":7760},{"p":["TupleTypeElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["TupleTypeElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `TupleTypeElementListSyntax` with the element at the provided index\n           removed."},{"p":["TupleTypeElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `TupleTypeElementListSyntax` with that element appended to the end."},{"p":["TupleTypeElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TupleTypeElementSyntax",18,232],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["TupleTypeElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `TupleTypeElementListSyntax` with that element appended to the end."},{"p":["TupleTypeElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["TupleTypeElementListSyntax",18,344]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["TupleTypeElementSyntax",18],[") -> ",17],["TupleTypeElementListSyntax",18]],"d":"Creates a new `TupleTypeElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `TupleTypeElementListSyntax` with the new element at the provided index."},{"p":["AvailabilityConditionSyntax","addAvailabilityArgument(_:)"],"f":[["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["AvailabilityConditionSyntax",18,346]],"s":[["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["AvailabilityConditionSyntax",18]],"d":"Adds the provided `AvailabilityArgument` to the node's `availabilitySpec`\ncollection.\n- param element: The new `AvailabilityArgument` to add to the node's\n                 `availabilitySpec` collection.\n- returns: A copy of the receiver with the provided `AvailabilityArgument`\n           appended to its `availabilitySpec` collection."},{"p":["AvailabilityConditionSyntax","withAvailabilitySpec(_:)"],"f":[["func",12],[" ",17],["withAvailabilitySpec",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AvailabilitySpecListSyntax",18,326],["?) -> ",17],["AvailabilityConditionSyntax",18,346]],"s":[["func",12],[" ",17],["withAvailabilitySpec",7],["(",17],["AvailabilitySpecListSyntax",18],["?) -> ",17],["AvailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `availabilitySpec` replaced.\n- param newChild: The new `availabilitySpec` to replace the node's\n                  current `availabilitySpec`, if present."},{"p":["AvailabilityConditionSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AvailabilityConditionSyntax",18,346]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["AvailabilityConditionSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AvailabilityConditionSyntax",18,346]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["AvailabilityConditionSyntax","withPoundAvailableKeyword(_:)"],"f":[["func",12],[" ",17],["withPoundAvailableKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AvailabilityConditionSyntax",18,346]],"s":[["func",12],[" ",17],["withPoundAvailableKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `poundAvailableKeyword` replaced.\n- param newChild: The new `poundAvailableKeyword` to replace the node's\n                  current `poundAvailableKeyword`, if present."},{"p":["AvailabilityConditionSyntaxBuilder","addAvailabilityArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[")",17]],"s":[["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["AvailabilityArgumentSyntax",18],[")",17]]},{"p":["AvailabilityConditionSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityConditionSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityConditionSyntaxBuilder","usePoundAvailableKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundAvailableKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundAvailableKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DictionaryElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DictionaryElementSyntax",18,244],[") -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["DictionaryElementSyntax",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `DictionaryElementListSyntax` with that element prepended to the\n           beginning."},{"p":["DictionaryElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["DictionaryElementListSyntax",18,348],[".",17],["Iterator",18,349]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["DictionaryElementListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["DictionaryElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by removing the last element.\n\n- Returns: A new `DictionaryElementListSyntax` with the last element removed."},{"p":["DictionaryElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by removing the first element.\n\n- Returns: A new `DictionaryElementListSyntax` with the first element removed."},{"p":["DictionaryElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["DictionaryElementListSyntax",18]],"d":"Returns a new `DictionaryElementListSyntax` with all trivia removed."},{"p":["DictionaryElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Returns a new `DictionaryElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["DictionaryElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Returns a new `DictionaryElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["DictionaryElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["DictionaryElementListSyntax",18]],"d":"Returns a new `DictionaryElementListSyntax` with its leading trivia removed."},{"p":["DictionaryElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["DictionaryElementListSyntax",18]],"d":"Returns a new `DictionaryElementListSyntax` with its trailing trivia removed."},{"p":["DictionaryElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["DictionaryElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["DictionaryElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["DictionaryElementSyntax",18,244],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["DictionaryElementSyntax",18],["?",17]],"o":7760},{"p":["DictionaryElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["DictionaryElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `DictionaryElementListSyntax` with the element at the provided index\n           removed."},{"p":["DictionaryElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DictionaryElementSyntax",18,244],[") -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["func",12],[" ",17],["appending",7],["(",17],["DictionaryElementSyntax",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `DictionaryElementListSyntax` with that element appended to the end."},{"p":["DictionaryElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DictionaryElementSyntax",18,244],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["DictionaryElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `DictionaryElementListSyntax` with that element appended to the end."},{"p":["DictionaryElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["DictionaryElementSyntax",18,244],[") -> ",17],["DictionaryElementListSyntax",18,348]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["DictionaryElementSyntax",18],[") -> ",17],["DictionaryElementListSyntax",18]],"d":"Creates a new `DictionaryElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `DictionaryElementListSyntax` with the new element at the provided index."},{"p":["DiscardAssignmentExprSyntax","withWildcard(_:)"],"f":[["func",12],[" ",17],["withWildcard",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DiscardAssignmentExprSyntax",18,350]],"s":[["func",12],[" ",17],["withWildcard",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DiscardAssignmentExprSyntax",18]],"d":"Returns a copy of the receiver with its `wildcard` replaced.\n- param newChild: The new `wildcard` to replace the node's\n                  current `wildcard`, if present."},{"p":["DiscardAssignmentExprSyntaxBuilder","useWildcard(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWildcard",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useWildcard",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EditorPlaceholderExprSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["EditorPlaceholderExprSyntax",18,352]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EditorPlaceholderExprSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["EditorPlaceholderExprSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["FunctionParameterListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["FunctionParameterSyntax",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `FunctionParameterListSyntax` with that element prepended to the\n           beginning."},{"p":["FunctionParameterListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["FunctionParameterListSyntax",18,354],[".",17],["Iterator",18,355]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["FunctionParameterListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["FunctionParameterListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by removing the last element.\n\n- Returns: A new `FunctionParameterListSyntax` with the last element removed."},{"p":["FunctionParameterListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by removing the first element.\n\n- Returns: A new `FunctionParameterListSyntax` with the first element removed."},{"p":["FunctionParameterListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["FunctionParameterListSyntax",18]],"d":"Returns a new `FunctionParameterListSyntax` with all trivia removed."},{"p":["FunctionParameterListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Returns a new `FunctionParameterListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["FunctionParameterListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Returns a new `FunctionParameterListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["FunctionParameterListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["FunctionParameterListSyntax",18]],"d":"Returns a new `FunctionParameterListSyntax` with its leading trivia removed."},{"p":["FunctionParameterListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["FunctionParameterListSyntax",18]],"d":"Returns a new `FunctionParameterListSyntax` with its trailing trivia removed."},{"p":["FunctionParameterListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["FunctionParameterListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["FunctionParameterListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["FunctionParameterSyntax",18,250],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["FunctionParameterSyntax",18],["?",17]],"o":7760},{"p":["FunctionParameterListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["FunctionParameterListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `FunctionParameterListSyntax` with the element at the provided index\n           removed."},{"p":["FunctionParameterListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["func",12],[" ",17],["appending",7],["(",17],["FunctionParameterSyntax",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `FunctionParameterListSyntax` with that element appended to the end."},{"p":["FunctionParameterListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["FunctionParameterSyntax",18,250],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["FunctionParameterSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `FunctionParameterListSyntax` with that element appended to the end."},{"p":["FunctionParameterListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["FunctionParameterListSyntax",18,354]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["FunctionParameterSyntax",18],[") -> ",17],["FunctionParameterListSyntax",18]],"d":"Creates a new `FunctionParameterListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `FunctionParameterListSyntax` with the new element at the provided index."},{"p":["GenericArgumentClauseSyntax","addArgument(_:)"],"f":[["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["GenericArgumentClauseSyntax",18,356]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["GenericArgumentSyntax",18],[") -> ",17],["GenericArgumentClauseSyntax",18]],"d":"Adds the provided `Argument` to the node's `arguments`\ncollection.\n- param element: The new `Argument` to add to the node's\n                 `arguments` collection.\n- returns: A copy of the receiver with the provided `Argument`\n           appended to its `arguments` collection."},{"p":["GenericArgumentClauseSyntax","withArguments(_:)"],"f":[["func",12],[" ",17],["withArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericArgumentListSyntax",18,308],["?) -> ",17],["GenericArgumentClauseSyntax",18,356]],"s":[["func",12],[" ",17],["withArguments",7],["(",17],["GenericArgumentListSyntax",18],["?) -> ",17],["GenericArgumentClauseSyntax",18]],"d":"Returns a copy of the receiver with its `arguments` replaced.\n- param newChild: The new `arguments` to replace the node's\n                  current `arguments`, if present."},{"p":["GenericArgumentClauseSyntax","withLeftAngleBracket(_:)"],"f":[["func",12],[" ",17],["withLeftAngleBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GenericArgumentClauseSyntax",18,356]],"s":[["func",12],[" ",17],["withLeftAngleBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericArgumentClauseSyntax",18]],"d":"Returns a copy of the receiver with its `leftAngleBracket` replaced.\n- param newChild: The new `leftAngleBracket` to replace the node's\n                  current `leftAngleBracket`, if present."},{"p":["GenericArgumentClauseSyntax","withRightAngleBracket(_:)"],"f":[["func",12],[" ",17],["withRightAngleBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GenericArgumentClauseSyntax",18,356]],"s":[["func",12],[" ",17],["withRightAngleBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericArgumentClauseSyntax",18]],"d":"Returns a copy of the receiver with its `rightAngleBracket` replaced.\n- param newChild: The new `rightAngleBracket` to replace the node's\n                  current `rightAngleBracket`, if present."},{"p":["GenericArgumentClauseSyntaxBuilder","addArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["GenericArgumentSyntax",18,176],[")",17]],"s":[["func",12],[" ",17],["addArgument",7],["(",17],["GenericArgumentSyntax",18],[")",17]]},{"p":["GenericArgumentClauseSyntaxBuilder","useLeftAngleBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftAngleBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftAngleBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericArgumentClauseSyntaxBuilder","useRightAngleBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightAngleBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightAngleBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeSyntax","withInheritedType(_:)"],"f":[["func",12],[" ",17],["withInheritedType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,358]],"s":[["func",12],[" ",17],["withInheritedType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `inheritedType` replaced.\n- param newChild: The new `inheritedType` to replace the node's\n                  current `inheritedType`, if present."},{"p":["PrimaryAssociatedTypeSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["PrimaryAssociatedTypeSyntax",18,358]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["PrimaryAssociatedTypeSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,358]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["PrimaryAssociatedTypeSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInitializerClauseSyntax",18,366],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,358]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["TypeInitializerClauseSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["PrimaryAssociatedTypeSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,358]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["PrimaryAssociatedTypeSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,358]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["PrimaryAssociatedTypeSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18,358]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrimaryAssociatedTypeSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["PrimaryAssociatedTypeSyntaxBuilder","useInheritedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritedType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useInheritedType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,366],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["TypeInitializerClauseSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["StringLiteralSegmentsSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["Syntax",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `StringLiteralSegmentsSyntax` with that element prepended to the\n           beginning."},{"p":["StringLiteralSegmentsSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,360],[".",17],["Iterator",18,361]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["StringLiteralSegmentsSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["StringLiteralSegmentsSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by removing the last element.\n\n- Returns: A new `StringLiteralSegmentsSyntax` with the last element removed."},{"p":["StringLiteralSegmentsSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by removing the first element.\n\n- Returns: A new `StringLiteralSegmentsSyntax` with the first element removed."},{"p":["StringLiteralSegmentsSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Returns a new `StringLiteralSegmentsSyntax` with all trivia removed."},{"p":["StringLiteralSegmentsSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Returns a new `StringLiteralSegmentsSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["StringLiteralSegmentsSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Returns a new `StringLiteralSegmentsSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["StringLiteralSegmentsSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Returns a new `StringLiteralSegmentsSyntax` with its leading trivia removed."},{"p":["StringLiteralSegmentsSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Returns a new `StringLiteralSegmentsSyntax` with its trailing trivia removed."},{"p":["StringLiteralSegmentsSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["StringLiteralSegmentsSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["StringLiteralSegmentsSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18,513],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18],["?",17]],"o":7760},{"p":["StringLiteralSegmentsSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["StringLiteralSegmentsSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `StringLiteralSegmentsSyntax` with the element at the provided index\n           removed."},{"p":["StringLiteralSegmentsSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["func",12],[" ",17],["appending",7],["(",17],["Syntax",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `StringLiteralSegmentsSyntax` with that element appended to the end."},{"p":["StringLiteralSegmentsSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["Syntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `StringLiteralSegmentsSyntax` with that element appended to the end."},{"p":["StringLiteralSegmentsSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["StringLiteralSegmentsSyntax",18,360]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["Syntax",18],[") -> ",17],["StringLiteralSegmentsSyntax",18]],"d":"Creates a new `StringLiteralSegmentsSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `StringLiteralSegmentsSyntax` with the new element at the provided index."},{"p":["SymbolicReferenceExprSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SymbolicReferenceExprSyntax",18,362]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SymbolicReferenceExprSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present."},{"p":["SymbolicReferenceExprSyntax","withGenericArgumentClause(_:)"],"f":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericArgumentClauseSyntax",18,356],["?) -> ",17],["SymbolicReferenceExprSyntax",18,362]],"s":[["func",12],[" ",17],["withGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],["?) -> ",17],["SymbolicReferenceExprSyntax",18]],"d":"Returns a copy of the receiver with its `genericArgumentClause` replaced.\n- param newChild: The new `genericArgumentClause` to replace the node's\n                  current `genericArgumentClause`, if present."},{"p":["SymbolicReferenceExprSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SymbolicReferenceExprSyntaxBuilder","useGenericArgumentClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,356],[")",17]],"s":[["func",12],[" ",17],["useGenericArgumentClause",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]]},{"p":["TypeInheritanceClauseSyntax","addInheritedType(_:)"],"f":[["func",12],[" ",17],["addInheritedType",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["TypeInheritanceClauseSyntax",18,364]],"s":[["func",12],[" ",17],["addInheritedType",7],["(",17],["InheritedTypeSyntax",18],[") -> ",17],["TypeInheritanceClauseSyntax",18]],"d":"Adds the provided `InheritedType` to the node's `inheritedTypeCollection`\ncollection.\n- param element: The new `InheritedType` to add to the node's\n                 `inheritedTypeCollection` collection.\n- returns: A copy of the receiver with the provided `InheritedType`\n           appended to its `inheritedTypeCollection` collection."},{"p":["TypeInheritanceClauseSyntax","withInheritedTypeCollection(_:)"],"f":[["func",12],[" ",17],["withInheritedTypeCollection",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InheritedTypeListSyntax",18,256],["?) -> ",17],["TypeInheritanceClauseSyntax",18,364]],"s":[["func",12],[" ",17],["withInheritedTypeCollection",7],["(",17],["InheritedTypeListSyntax",18],["?) -> ",17],["TypeInheritanceClauseSyntax",18]],"d":"Returns a copy of the receiver with its `inheritedTypeCollection` replaced.\n- param newChild: The new `inheritedTypeCollection` to replace the node's\n                  current `inheritedTypeCollection`, if present."},{"p":["TypeInheritanceClauseSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TypeInheritanceClauseSyntax",18,364]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TypeInheritanceClauseSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["TypeInheritanceClauseSyntaxBuilder","addInheritedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addInheritedType",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["InheritedTypeSyntax",18,111],[")",17]],"s":[["func",12],[" ",17],["addInheritedType",7],["(",17],["InheritedTypeSyntax",18],[")",17]]},{"p":["TypeInheritanceClauseSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TypeInitializerClauseSyntax","withEqual(_:)"],"f":[["func",12],[" ",17],["withEqual",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TypeInitializerClauseSyntax",18,366]],"s":[["func",12],[" ",17],["withEqual",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TypeInitializerClauseSyntax",18]],"d":"Returns a copy of the receiver with its `equal` replaced.\n- param newChild: The new `equal` to replace the node's\n                  current `equal`, if present."},{"p":["TypeInitializerClauseSyntax","withValue(_:)"],"f":[["func",12],[" ",17],["withValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["TypeInitializerClauseSyntax",18,366]],"s":[["func",12],[" ",17],["withValue",7],["(",17],["TypeSyntax",18],["?) -> ",17],["TypeInitializerClauseSyntax",18]],"d":"Returns a copy of the receiver with its `value` replaced.\n- param newChild: The new `value` to replace the node's\n                  current `value`, if present."},{"p":["TypeInitializerClauseSyntaxBuilder","useEqual(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEqual",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useEqual",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TypeInitializerClauseSyntaxBuilder","useValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useValue",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["UnresolvedPatternExprSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,453],["?) -> ",17],["UnresolvedPatternExprSyntax",18,368]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["UnresolvedPatternExprSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["UnresolvedPatternExprSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["ClosureCaptureItemListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ClosureCaptureItemListSyntax` with that element prepended to the\n           beginning."},{"p":["ClosureCaptureItemListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,370],[".",17],["Iterator",18,371]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ClosureCaptureItemListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["ClosureCaptureItemListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by removing the last element.\n\n- Returns: A new `ClosureCaptureItemListSyntax` with the last element removed."},{"p":["ClosureCaptureItemListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by removing the first element.\n\n- Returns: A new `ClosureCaptureItemListSyntax` with the first element removed."},{"p":["ClosureCaptureItemListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Returns a new `ClosureCaptureItemListSyntax` with all trivia removed."},{"p":["ClosureCaptureItemListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Returns a new `ClosureCaptureItemListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ClosureCaptureItemListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Returns a new `ClosureCaptureItemListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ClosureCaptureItemListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Returns a new `ClosureCaptureItemListSyntax` with its leading trivia removed."},{"p":["ClosureCaptureItemListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Returns a new `ClosureCaptureItemListSyntax` with its trailing trivia removed."},{"p":["ClosureCaptureItemListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["ClosureCaptureItemListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["ClosureCaptureItemListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ClosureCaptureItemSyntax",18,280],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ClosureCaptureItemSyntax",18],["?",17]],"o":7760},{"p":["ClosureCaptureItemListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["ClosureCaptureItemListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ClosureCaptureItemListSyntax` with the element at the provided index\n           removed."},{"p":["ClosureCaptureItemListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ClosureCaptureItemListSyntax` with that element appended to the end."},{"p":["ClosureCaptureItemListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ClosureCaptureItemSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ClosureCaptureItemListSyntax` with that element appended to the end."},{"p":["ClosureCaptureItemListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["ClosureCaptureItemListSyntax",18,370]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["ClosureCaptureItemListSyntax",18]],"d":"Creates a new `ClosureCaptureItemListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ClosureCaptureItemListSyntax` with the new element at the provided index."},{"p":["CompositionTypeElementSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["CompositionTypeElementSyntax",18,372]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["CompositionTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["CompositionTypeElementSyntax","withAmpersand(_:)"],"f":[["func",12],[" ",17],["withAmpersand",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CompositionTypeElementSyntax",18,372]],"s":[["func",12],[" ",17],["withAmpersand",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CompositionTypeElementSyntax",18]],"d":"Returns a copy of the receiver with its `ampersand` replaced.\n- param newChild: The new `ampersand` to replace the node's\n                  current `ampersand`, if present."},{"p":["CompositionTypeElementSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["CompositionTypeElementSyntaxBuilder","useAmpersand(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAmpersand",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAmpersand",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ConformanceRequirementSyntax","withLeftTypeIdentifier(_:)"],"f":[["func",12],[" ",17],["withLeftTypeIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["ConformanceRequirementSyntax",18,374]],"s":[["func",12],[" ",17],["withLeftTypeIdentifier",7],["(",17],["TypeSyntax",18],["?) -> ",17],["ConformanceRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `leftTypeIdentifier` replaced.\n- param newChild: The new `leftTypeIdentifier` to replace the node's\n                  current `leftTypeIdentifier`, if present."},{"p":["ConformanceRequirementSyntax","withRightTypeIdentifier(_:)"],"f":[["func",12],[" ",17],["withRightTypeIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["ConformanceRequirementSyntax",18,374]],"s":[["func",12],[" ",17],["withRightTypeIdentifier",7],["(",17],["TypeSyntax",18],["?) -> ",17],["ConformanceRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `rightTypeIdentifier` replaced.\n- param newChild: The new `rightTypeIdentifier` to replace the node's\n                  current `rightTypeIdentifier`, if present."},{"p":["ConformanceRequirementSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ConformanceRequirementSyntax",18,374]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ConformanceRequirementSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["ConformanceRequirementSyntaxBuilder","useLeftTypeIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftTypeIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useLeftTypeIdentifier",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ConformanceRequirementSyntaxBuilder","useRightTypeIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightTypeIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useRightTypeIdentifier",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ConformanceRequirementSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DifferentiabilityParamSyntax","withParameter(_:)"],"f":[["func",12],[" ",17],["withParameter",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["DifferentiabilityParamSyntax",18,376]],"s":[["func",12],[" ",17],["withParameter",7],["(",17],["Syntax",18],["?) -> ",17],["DifferentiabilityParamSyntax",18]],"d":"Returns a copy of the receiver with its `parameter` replaced.\n- param newChild: The new `parameter` to replace the node's\n                  current `parameter`, if present."},{"p":["DifferentiabilityParamSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DifferentiabilityParamSyntax",18,376]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiabilityParamSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["DifferentiabilityParamSyntaxBuilder","useParameter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useParameter",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useParameter",7],["(",17],["Syntax",18],[")",17]]},{"p":["DifferentiabilityParamSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericParameterClauseSyntax","addGenericParameter(_:)"],"f":[["func",12],[" ",17],["addGenericParameter",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["GenericParameterClauseSyntax",18,378]],"s":[["func",12],[" ",17],["addGenericParameter",7],["(",17],["GenericParameterSyntax",18],[") -> ",17],["GenericParameterClauseSyntax",18]],"d":"Adds the provided `GenericParameter` to the node's `genericParameterList`\ncollection.\n- param element: The new `GenericParameter` to add to the node's\n                 `genericParameterList` collection.\n- returns: A copy of the receiver with the provided `GenericParameter`\n           appended to its `genericParameterList` collection."},{"p":["GenericParameterClauseSyntax","withGenericParameterList(_:)"],"f":[["func",12],[" ",17],["withGenericParameterList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterListSyntax",18,334],["?) -> ",17],["GenericParameterClauseSyntax",18,378]],"s":[["func",12],[" ",17],["withGenericParameterList",7],["(",17],["GenericParameterListSyntax",18],["?) -> ",17],["GenericParameterClauseSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterList` replaced.\n- param newChild: The new `genericParameterList` to replace the node's\n                  current `genericParameterList`, if present."},{"p":["GenericParameterClauseSyntax","withLeftAngleBracket(_:)"],"f":[["func",12],[" ",17],["withLeftAngleBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GenericParameterClauseSyntax",18,378]],"s":[["func",12],[" ",17],["withLeftAngleBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericParameterClauseSyntax",18]],"d":"Returns a copy of the receiver with its `leftAngleBracket` replaced.\n- param newChild: The new `leftAngleBracket` to replace the node's\n                  current `leftAngleBracket`, if present."},{"p":["GenericParameterClauseSyntax","withRightAngleBracket(_:)"],"f":[["func",12],[" ",17],["withRightAngleBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GenericParameterClauseSyntax",18,378]],"s":[["func",12],[" ",17],["withRightAngleBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GenericParameterClauseSyntax",18]],"d":"Returns a copy of the receiver with its `rightAngleBracket` replaced.\n- param newChild: The new `rightAngleBracket` to replace the node's\n                  current `rightAngleBracket`, if present."},{"p":["GenericParameterClauseSyntaxBuilder","addGenericParameter(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addGenericParameter",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["GenericParameterSyntax",18,218],[")",17]],"s":[["func",12],[" ",17],["addGenericParameter",7],["(",17],["GenericParameterSyntax",18],[")",17]]},{"p":["GenericParameterClauseSyntaxBuilder","useLeftAngleBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftAngleBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftAngleBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericParameterClauseSyntaxBuilder","useRightAngleBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightAngleBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightAngleBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GenericRequirementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["GenericRequirementSyntax",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `GenericRequirementListSyntax` with that element prepended to the\n           beginning."},{"p":["GenericRequirementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["GenericRequirementListSyntax",18,380],[".",17],["Iterator",18,381]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["GenericRequirementListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["GenericRequirementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by removing the last element.\n\n- Returns: A new `GenericRequirementListSyntax` with the last element removed."},{"p":["GenericRequirementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by removing the first element.\n\n- Returns: A new `GenericRequirementListSyntax` with the first element removed."},{"p":["GenericRequirementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["GenericRequirementListSyntax",18]],"d":"Returns a new `GenericRequirementListSyntax` with all trivia removed."},{"p":["GenericRequirementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Returns a new `GenericRequirementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["GenericRequirementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Returns a new `GenericRequirementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["GenericRequirementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["GenericRequirementListSyntax",18]],"d":"Returns a new `GenericRequirementListSyntax` with its leading trivia removed."},{"p":["GenericRequirementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["GenericRequirementListSyntax",18]],"d":"Returns a new `GenericRequirementListSyntax` with its trailing trivia removed."},{"p":["GenericRequirementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["GenericRequirementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["GenericRequirementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["GenericRequirementSyntax",18,284],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["GenericRequirementSyntax",18],["?",17]],"o":7760},{"p":["GenericRequirementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["GenericRequirementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `GenericRequirementListSyntax` with the element at the provided index\n           removed."},{"p":["GenericRequirementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["func",12],[" ",17],["appending",7],["(",17],["GenericRequirementSyntax",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `GenericRequirementListSyntax` with that element appended to the end."},{"p":["GenericRequirementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["GenericRequirementSyntax",18,284],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["GenericRequirementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `GenericRequirementListSyntax` with that element appended to the end."},{"p":["GenericRequirementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["GenericRequirementListSyntax",18,380]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["GenericRequirementSyntax",18],[") -> ",17],["GenericRequirementListSyntax",18]],"d":"Creates a new `GenericRequirementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `GenericRequirementListSyntax` with the new element at the provided index."},{"p":["LabeledSpecializeEntrySyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["LabeledSpecializeEntrySyntax",18,382]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["LabeledSpecializeEntrySyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["LabeledSpecializeEntrySyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["LabeledSpecializeEntrySyntax",18,382]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["LabeledSpecializeEntrySyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["LabeledSpecializeEntrySyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["LabeledSpecializeEntrySyntax",18,382]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["LabeledSpecializeEntrySyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["LabeledSpecializeEntrySyntax","withValue(_:)"],"f":[["func",12],[" ",17],["withValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["LabeledSpecializeEntrySyntax",18,382]],"s":[["func",12],[" ",17],["withValue",7],["(",17],["TokenSyntax",18],["?) -> ",17],["LabeledSpecializeEntrySyntax",18]],"d":"Returns a copy of the receiver with its `value` replaced.\n- param newChild: The new `value` to replace the node's\n                  current `value`, if present."},{"p":["LabeledSpecializeEntrySyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["LabeledSpecializeEntrySyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["LabeledSpecializeEntrySyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["LabeledSpecializeEntrySyntaxBuilder","useValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useValue",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureSignatureSyntax","withLeftSquare(_:)"],"f":[["func",12],[" ",17],["withLeftSquare",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureCaptureSignatureSyntax",18,384]],"s":[["func",12],[" ",17],["withLeftSquare",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureCaptureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `leftSquare` replaced.\n- param newChild: The new `leftSquare` to replace the node's\n                  current `leftSquare`, if present."},{"p":["ClosureCaptureSignatureSyntax","withRightSquare(_:)"],"f":[["func",12],[" ",17],["withRightSquare",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClosureCaptureSignatureSyntax",18,384]],"s":[["func",12],[" ",17],["withRightSquare",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClosureCaptureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `rightSquare` replaced.\n- param newChild: The new `rightSquare` to replace the node's\n                  current `rightSquare`, if present."},{"p":["ClosureCaptureSignatureSyntax","addItem(_:)"],"f":[["func",12],[" ",17],["addItem",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["ClosureCaptureSignatureSyntax",18,384]],"s":[["func",12],[" ",17],["addItem",7],["(",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["ClosureCaptureSignatureSyntax",18]],"d":"Adds the provided `Item` to the node's `items`\ncollection.\n- param element: The new `Item` to add to the node's\n                 `items` collection.\n- returns: A copy of the receiver with the provided `Item`\n           appended to its `items` collection."},{"p":["ClosureCaptureSignatureSyntax","withItems(_:)"],"f":[["func",12],[" ",17],["withItems",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ClosureCaptureItemListSyntax",18,370],["?) -> ",17],["ClosureCaptureSignatureSyntax",18,384]],"s":[["func",12],[" ",17],["withItems",7],["(",17],["ClosureCaptureItemListSyntax",18],["?) -> ",17],["ClosureCaptureSignatureSyntax",18]],"d":"Returns a copy of the receiver with its `items` replaced.\n- param newChild: The new `items` to replace the node's\n                  current `items`, if present."},{"p":["ClosureCaptureSignatureSyntaxBuilder","useLeftSquare(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftSquare",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftSquare",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureSignatureSyntaxBuilder","useRightSquare(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightSquare",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightSquare",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClosureCaptureSignatureSyntaxBuilder","addItem(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addItem",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[")",17]],"s":[["func",12],[" ",17],["addItem",7],["(",17],["ClosureCaptureItemSyntax",18],[")",17]]},{"p":["DifferentiabilityParamsSyntax","addDifferentiabilityParam(_:)"],"f":[["func",12],[" ",17],["addDifferentiabilityParam",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DifferentiabilityParamSyntax",18,376],[") -> ",17],["DifferentiabilityParamsSyntax",18,386]],"s":[["func",12],[" ",17],["addDifferentiabilityParam",7],["(",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["DifferentiabilityParamsSyntax",18]],"d":"Adds the provided `DifferentiabilityParam` to the node's `diffParams`\ncollection.\n- param element: The new `DifferentiabilityParam` to add to the node's\n                 `diffParams` collection.\n- returns: A copy of the receiver with the provided `DifferentiabilityParam`\n           appended to its `diffParams` collection."},{"p":["DifferentiabilityParamsSyntax","withDiffParams(_:)"],"f":[["func",12],[" ",17],["withDiffParams",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DifferentiabilityParamListSyntax",18,408],["?) -> ",17],["DifferentiabilityParamsSyntax",18,386]],"s":[["func",12],[" ",17],["withDiffParams",7],["(",17],["DifferentiabilityParamListSyntax",18],["?) -> ",17],["DifferentiabilityParamsSyntax",18]],"d":"Returns a copy of the receiver with its `diffParams` replaced.\n- param newChild: The new `diffParams` to replace the node's\n                  current `diffParams`, if present."},{"p":["DifferentiabilityParamsSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DifferentiabilityParamsSyntax",18,386]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiabilityParamsSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["DifferentiabilityParamsSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DifferentiabilityParamsSyntax",18,386]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiabilityParamsSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["DifferentiabilityParamsSyntaxBuilder","addDifferentiabilityParam(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addDifferentiabilityParam",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DifferentiabilityParamSyntax",18,376],[")",17]],"s":[["func",12],[" ",17],["addDifferentiabilityParam",7],["(",17],["DifferentiabilityParamSyntax",18],[")",17]]},{"p":["DifferentiabilityParamsSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DifferentiabilityParamsSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntax","withFileName(_:)"],"f":[["func",12],[" ",17],["withFileName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,388]],"s":[["func",12],[" ",17],["withFileName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `fileName` replaced.\n- param newChild: The new `fileName` to replace the node's\n                  current `fileName`, if present."},{"p":["PoundSourceLocationArgsSyntax","withLineNumber(_:)"],"f":[["func",12],[" ",17],["withLineNumber",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,388]],"s":[["func",12],[" ",17],["withLineNumber",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `lineNumber` replaced.\n- param newChild: The new `lineNumber` to replace the node's\n                  current `lineNumber`, if present."},{"p":["PoundSourceLocationArgsSyntax","withFileArgColon(_:)"],"f":[["func",12],[" ",17],["withFileArgColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,388]],"s":[["func",12],[" ",17],["withFileArgColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `fileArgColon` replaced.\n- param newChild: The new `fileArgColon` to replace the node's\n                  current `fileArgColon`, if present."},{"p":["PoundSourceLocationArgsSyntax","withFileArgLabel(_:)"],"f":[["func",12],[" ",17],["withFileArgLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,388]],"s":[["func",12],[" ",17],["withFileArgLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `fileArgLabel` replaced.\n- param newChild: The new `fileArgLabel` to replace the node's\n                  current `fileArgLabel`, if present."},{"p":["PoundSourceLocationArgsSyntax","withLineArgColon(_:)"],"f":[["func",12],[" ",17],["withLineArgColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,388]],"s":[["func",12],[" ",17],["withLineArgColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `lineArgColon` replaced.\n- param newChild: The new `lineArgColon` to replace the node's\n                  current `lineArgColon`, if present."},{"p":["PoundSourceLocationArgsSyntax","withLineArgLabel(_:)"],"f":[["func",12],[" ",17],["withLineArgLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,388]],"s":[["func",12],[" ",17],["withLineArgLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `lineArgLabel` replaced.\n- param newChild: The new `lineArgLabel` to replace the node's\n                  current `lineArgLabel`, if present."},{"p":["PoundSourceLocationArgsSyntax","withComma(_:)"],"f":[["func",12],[" ",17],["withComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PoundSourceLocationArgsSyntax",18,388]],"s":[["func",12],[" ",17],["withComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PoundSourceLocationArgsSyntax",18]],"d":"Returns a copy of the receiver with its `comma` replaced.\n- param newChild: The new `comma` to replace the node's\n                  current `comma`, if present."},{"p":["PoundSourceLocationArgsSyntaxBuilder","useFileName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFileName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useFileName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntaxBuilder","useLineNumber(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLineNumber",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLineNumber",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntaxBuilder","useFileArgColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFileArgColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useFileArgColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntaxBuilder","useFileArgLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFileArgLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useFileArgLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntaxBuilder","useLineArgColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLineArgColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLineArgColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntaxBuilder","useLineArgLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLineArgLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLineArgLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PoundSourceLocationArgsSyntaxBuilder","useComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupNameListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,412],[") -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `PrecedenceGroupNameListSyntax` with that element prepended to the\n           beginning."},{"p":["PrecedenceGroupNameListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,390],[".",17],["Iterator",18,391]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["PrecedenceGroupNameListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by removing the last element.\n\n- Returns: A new `PrecedenceGroupNameListSyntax` with the last element removed."},{"p":["PrecedenceGroupNameListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by removing the first element.\n\n- Returns: A new `PrecedenceGroupNameListSyntax` with the first element removed."},{"p":["PrecedenceGroupNameListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Returns a new `PrecedenceGroupNameListSyntax` with all trivia removed."},{"p":["PrecedenceGroupNameListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Returns a new `PrecedenceGroupNameListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["PrecedenceGroupNameListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Returns a new `PrecedenceGroupNameListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["PrecedenceGroupNameListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Returns a new `PrecedenceGroupNameListSyntax` with its leading trivia removed."},{"p":["PrecedenceGroupNameListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Returns a new `PrecedenceGroupNameListSyntax` with its trailing trivia removed."},{"p":["PrecedenceGroupNameListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["PrecedenceGroupNameListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["PrecedenceGroupNameListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["PrecedenceGroupNameElementSyntax",18,412],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["PrecedenceGroupNameElementSyntax",18],["?",17]],"o":7760},{"p":["PrecedenceGroupNameListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["PrecedenceGroupNameListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `PrecedenceGroupNameListSyntax` with the element at the provided index\n           removed."},{"p":["PrecedenceGroupNameListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,412],[") -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["func",12],[" ",17],["appending",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `PrecedenceGroupNameListSyntax` with that element appended to the end."},{"p":["PrecedenceGroupNameListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,412],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `PrecedenceGroupNameListSyntax` with that element appended to the end."},{"p":["PrecedenceGroupNameListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,412],[") -> ",17],["PrecedenceGroupNameListSyntax",18,390]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["PrecedenceGroupNameListSyntax",18]],"d":"Creates a new `PrecedenceGroupNameListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `PrecedenceGroupNameListSyntax` with the new element at the provided index."},{"p":["PrecedenceGroupRelationSyntax","withHigherThanOrLowerThan(_:)"],"f":[["func",12],[" ",17],["withHigherThanOrLowerThan",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupRelationSyntax",18,392]],"s":[["func",12],[" ",17],["withHigherThanOrLowerThan",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupRelationSyntax",18]],"d":"Returns a copy of the receiver with its `higherThanOrLowerThan` replaced.\n- param newChild: The new `higherThanOrLowerThan` to replace the node's\n                  current `higherThanOrLowerThan`, if present."},{"p":["PrecedenceGroupRelationSyntax","addOtherName(_:)"],"f":[["func",12],[" ",17],["addOtherName",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,412],[") -> ",17],["PrecedenceGroupRelationSyntax",18,392]],"s":[["func",12],[" ",17],["addOtherName",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["PrecedenceGroupRelationSyntax",18]],"d":"Adds the provided `OtherName` to the node's `otherNames`\ncollection.\n- param element: The new `OtherName` to add to the node's\n                 `otherNames` collection.\n- returns: A copy of the receiver with the provided `OtherName`\n           appended to its `otherNames` collection."},{"p":["PrecedenceGroupRelationSyntax","withOtherNames(_:)"],"f":[["func",12],[" ",17],["withOtherNames",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PrecedenceGroupNameListSyntax",18,390],["?) -> ",17],["PrecedenceGroupRelationSyntax",18,392]],"s":[["func",12],[" ",17],["withOtherNames",7],["(",17],["PrecedenceGroupNameListSyntax",18],["?) -> ",17],["PrecedenceGroupRelationSyntax",18]],"d":"Returns a copy of the receiver with its `otherNames` replaced.\n- param newChild: The new `otherNames` to replace the node's\n                  current `otherNames`, if present."},{"p":["PrecedenceGroupRelationSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupRelationSyntax",18,392]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupRelationSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["PrecedenceGroupRelationSyntaxBuilder","useHigherThanOrLowerThan(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useHigherThanOrLowerThan",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useHigherThanOrLowerThan",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupRelationSyntaxBuilder","addOtherName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addOtherName",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,412],[")",17]],"s":[["func",12],[" ",17],["addOtherName",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[")",17]]},{"p":["PrecedenceGroupRelationSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TuplePatternElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["TuplePatternElementSyntax",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `TuplePatternElementListSyntax` with that element prepended to the\n           beginning."},{"p":["TuplePatternElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TuplePatternElementListSyntax",18,394],[".",17],["Iterator",18,395]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TuplePatternElementListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["TuplePatternElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by removing the last element.\n\n- Returns: A new `TuplePatternElementListSyntax` with the last element removed."},{"p":["TuplePatternElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by removing the first element.\n\n- Returns: A new `TuplePatternElementListSyntax` with the first element removed."},{"p":["TuplePatternElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TuplePatternElementListSyntax",18]],"d":"Returns a new `TuplePatternElementListSyntax` with all trivia removed."},{"p":["TuplePatternElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Returns a new `TuplePatternElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["TuplePatternElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Returns a new `TuplePatternElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["TuplePatternElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TuplePatternElementListSyntax",18]],"d":"Returns a new `TuplePatternElementListSyntax` with its leading trivia removed."},{"p":["TuplePatternElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TuplePatternElementListSyntax",18]],"d":"Returns a new `TuplePatternElementListSyntax` with its trailing trivia removed."},{"p":["TuplePatternElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["TuplePatternElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["TuplePatternElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TuplePatternElementSyntax",18,320],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TuplePatternElementSyntax",18],["?",17]],"o":7760},{"p":["TuplePatternElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["TuplePatternElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `TuplePatternElementListSyntax` with the element at the provided index\n           removed."},{"p":["TuplePatternElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TuplePatternElementSyntax",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `TuplePatternElementListSyntax` with that element appended to the end."},{"p":["TuplePatternElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TuplePatternElementSyntax",18,320],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["TuplePatternElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `TuplePatternElementListSyntax` with that element appended to the end."},{"p":["TuplePatternElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["TuplePatternElementListSyntax",18,394]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["TuplePatternElementSyntax",18],[") -> ",17],["TuplePatternElementListSyntax",18]],"d":"Creates a new `TuplePatternElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `TuplePatternElementListSyntax` with the new element at the provided index."},{"p":["UnavailabilityConditionSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["UnavailabilityConditionSyntax",18,396]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["UnavailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["UnavailabilityConditionSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["UnavailabilityConditionSyntax",18,396]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["UnavailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["UnavailabilityConditionSyntax","withAvailabilitySpec(_:)"],"f":[["func",12],[" ",17],["withAvailabilitySpec",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AvailabilitySpecListSyntax",18,326],["?) -> ",17],["UnavailabilityConditionSyntax",18,396]],"s":[["func",12],[" ",17],["withAvailabilitySpec",7],["(",17],["AvailabilitySpecListSyntax",18],["?) -> ",17],["UnavailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `availabilitySpec` replaced.\n- param newChild: The new `availabilitySpec` to replace the node's\n                  current `availabilitySpec`, if present."},{"p":["UnavailabilityConditionSyntax","addAvailabilityArgument(_:)"],"f":[["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["UnavailabilityConditionSyntax",18,396]],"s":[["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["UnavailabilityConditionSyntax",18]],"d":"Adds the provided `AvailabilityArgument` to the node's `availabilitySpec`\ncollection.\n- param element: The new `AvailabilityArgument` to add to the node's\n                 `availabilitySpec` collection.\n- returns: A copy of the receiver with the provided `AvailabilityArgument`\n           appended to its `availabilitySpec` collection."},{"p":["UnavailabilityConditionSyntax","withPoundUnavailableKeyword(_:)"],"f":[["func",12],[" ",17],["withPoundUnavailableKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["UnavailabilityConditionSyntax",18,396]],"s":[["func",12],[" ",17],["withPoundUnavailableKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["UnavailabilityConditionSyntax",18]],"d":"Returns a copy of the receiver with its `poundUnavailableKeyword` replaced.\n- param newChild: The new `poundUnavailableKeyword` to replace the node's\n                  current `poundUnavailableKeyword`, if present."},{"p":["UnavailabilityConditionSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["UnavailabilityConditionSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["UnavailabilityConditionSyntaxBuilder","addAvailabilityArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[")",17]],"s":[["func",12],[" ",17],["addAvailabilityArgument",7],["(",17],["AvailabilityArgumentSyntax",18],[")",17]]},{"p":["UnavailabilityConditionSyntaxBuilder","usePoundUnavailableKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePoundUnavailableKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePoundUnavailableKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MatchingPatternConditionSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,453],["?) -> ",17],["MatchingPatternConditionSyntax",18,398]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["MatchingPatternConditionSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["MatchingPatternConditionSyntax","withCaseKeyword(_:)"],"f":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["MatchingPatternConditionSyntax",18,398]],"s":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MatchingPatternConditionSyntax",18]],"d":"Returns a copy of the receiver with its `caseKeyword` replaced.\n- param newChild: The new `caseKeyword` to replace the node's\n                  current `caseKeyword`, if present."},{"p":["MatchingPatternConditionSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InitializerClauseSyntax",18,258],["?) -> ",17],["MatchingPatternConditionSyntax",18,398]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["InitializerClauseSyntax",18],["?) -> ",17],["MatchingPatternConditionSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["MatchingPatternConditionSyntax","withTypeAnnotation(_:)"],"f":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeAnnotationSyntax",18,157],["?) -> ",17],["MatchingPatternConditionSyntax",18,398]],"s":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],["?) -> ",17],["MatchingPatternConditionSyntax",18]],"d":"Returns a copy of the receiver with its `typeAnnotation` replaced.\n- param newChild: The new `typeAnnotation` to replace the node's\n                  current `typeAnnotation`, if present."},{"p":["MatchingPatternConditionSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["MatchingPatternConditionSyntaxBuilder","useCaseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCaseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useCaseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MatchingPatternConditionSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["MatchingPatternConditionSyntaxBuilder","useTypeAnnotation(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],[")",17]]},{"p":["OptionalBindingConditionSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,453],["?) -> ",17],["OptionalBindingConditionSyntax",18,400]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["OptionalBindingConditionSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["OptionalBindingConditionSyntax","withInitializer(_:)"],"f":[["func",12],[" ",17],["withInitializer",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["InitializerClauseSyntax",18,258],["?) -> ",17],["OptionalBindingConditionSyntax",18,400]],"s":[["func",12],[" ",17],["withInitializer",7],["(",17],["InitializerClauseSyntax",18],["?) -> ",17],["OptionalBindingConditionSyntax",18]],"d":"Returns a copy of the receiver with its `initializer` replaced.\n- param newChild: The new `initializer` to replace the node's\n                  current `initializer`, if present."},{"p":["OptionalBindingConditionSyntax","withTypeAnnotation(_:)"],"f":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeAnnotationSyntax",18,157],["?) -> ",17],["OptionalBindingConditionSyntax",18,400]],"s":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],["?) -> ",17],["OptionalBindingConditionSyntax",18]],"d":"Returns a copy of the receiver with its `typeAnnotation` replaced.\n- param newChild: The new `typeAnnotation` to replace the node's\n                  current `typeAnnotation`, if present."},{"p":["OptionalBindingConditionSyntax","withLetOrVarKeyword(_:)"],"f":[["func",12],[" ",17],["withLetOrVarKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["OptionalBindingConditionSyntax",18,400]],"s":[["func",12],[" ",17],["withLetOrVarKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OptionalBindingConditionSyntax",18]],"d":"Returns a copy of the receiver with its `letOrVarKeyword` replaced.\n- param newChild: The new `letOrVarKeyword` to replace the node's\n                  current `letOrVarKeyword`, if present."},{"p":["OptionalBindingConditionSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["OptionalBindingConditionSyntaxBuilder","useInitializer(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInitializer",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["useInitializer",7],["(",17],["InitializerClauseSyntax",18],[")",17]]},{"p":["OptionalBindingConditionSyntaxBuilder","useTypeAnnotation(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],[")",17]]},{"p":["OptionalBindingConditionSyntaxBuilder","useLetOrVarKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLetOrVarKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLetOrVarKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAssignmentSyntax","withAssignmentKeyword(_:)"],"f":[["func",12],[" ",17],["withAssignmentKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupAssignmentSyntax",18,402]],"s":[["func",12],[" ",17],["withAssignmentKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupAssignmentSyntax",18]],"d":"Returns a copy of the receiver with its `assignmentKeyword` replaced.\n- param newChild: The new `assignmentKeyword` to replace the node's\n                  current `assignmentKeyword`, if present."},{"p":["PrecedenceGroupAssignmentSyntax","withFlag(_:)"],"f":[["func",12],[" ",17],["withFlag",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupAssignmentSyntax",18,402]],"s":[["func",12],[" ",17],["withFlag",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupAssignmentSyntax",18]],"d":"Returns a copy of the receiver with its `flag` replaced.\n- param newChild: The new `flag` to replace the node's\n                  current `flag`, if present."},{"p":["PrecedenceGroupAssignmentSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupAssignmentSyntax",18,402]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupAssignmentSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["PrecedenceGroupAssignmentSyntaxBuilder","useAssignmentKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssignmentKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAssignmentKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAssignmentSyntaxBuilder","useFlag(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useFlag",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useFlag",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAssignmentSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrimaryAssociatedTypeListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,358],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with that element prepended to the\n           beginning."},{"p":["PrimaryAssociatedTypeListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,404],[".",17],["Iterator",18,405]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["PrimaryAssociatedTypeListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by removing the last element.\n\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with the last element removed."},{"p":["PrimaryAssociatedTypeListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by removing the first element.\n\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with the first element removed."},{"p":["PrimaryAssociatedTypeListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Returns a new `PrimaryAssociatedTypeListSyntax` with all trivia removed."},{"p":["PrimaryAssociatedTypeListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Returns a new `PrimaryAssociatedTypeListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["PrimaryAssociatedTypeListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Returns a new `PrimaryAssociatedTypeListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["PrimaryAssociatedTypeListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Returns a new `PrimaryAssociatedTypeListSyntax` with its leading trivia removed."},{"p":["PrimaryAssociatedTypeListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Returns a new `PrimaryAssociatedTypeListSyntax` with its trailing trivia removed."},{"p":["PrimaryAssociatedTypeListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["PrimaryAssociatedTypeListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["PrimaryAssociatedTypeListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["PrimaryAssociatedTypeSyntax",18,358],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["PrimaryAssociatedTypeSyntax",18],["?",17]],"o":7760},{"p":["PrimaryAssociatedTypeListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["PrimaryAssociatedTypeListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with the element at the provided index\n           removed."},{"p":["PrimaryAssociatedTypeListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,358],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["func",12],[" ",17],["appending",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with that element appended to the end."},{"p":["PrimaryAssociatedTypeListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,358],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with that element appended to the end."},{"p":["PrimaryAssociatedTypeListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,358],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18,404]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["PrimaryAssociatedTypeSyntax",18],[") -> ",17],["PrimaryAssociatedTypeListSyntax",18]],"d":"Creates a new `PrimaryAssociatedTypeListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `PrimaryAssociatedTypeListSyntax` with the new element at the provided index."},{"p":["CompositionTypeElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CompositionTypeElementSyntax",18,372],[") -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["CompositionTypeElementSyntax",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `CompositionTypeElementListSyntax` with that element prepended to the\n           beginning."},{"p":["CompositionTypeElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CompositionTypeElementListSyntax",18,406],[".",17],["Iterator",18,407]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CompositionTypeElementListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["CompositionTypeElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by removing the last element.\n\n- Returns: A new `CompositionTypeElementListSyntax` with the last element removed."},{"p":["CompositionTypeElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by removing the first element.\n\n- Returns: A new `CompositionTypeElementListSyntax` with the first element removed."},{"p":["CompositionTypeElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Returns a new `CompositionTypeElementListSyntax` with all trivia removed."},{"p":["CompositionTypeElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Returns a new `CompositionTypeElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["CompositionTypeElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Returns a new `CompositionTypeElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["CompositionTypeElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Returns a new `CompositionTypeElementListSyntax` with its leading trivia removed."},{"p":["CompositionTypeElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Returns a new `CompositionTypeElementListSyntax` with its trailing trivia removed."},{"p":["CompositionTypeElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["CompositionTypeElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["CompositionTypeElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["CompositionTypeElementSyntax",18,372],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["CompositionTypeElementSyntax",18],["?",17]],"o":7760},{"p":["CompositionTypeElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["CompositionTypeElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `CompositionTypeElementListSyntax` with the element at the provided index\n           removed."},{"p":["CompositionTypeElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CompositionTypeElementSyntax",18,372],[") -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["func",12],[" ",17],["appending",7],["(",17],["CompositionTypeElementSyntax",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `CompositionTypeElementListSyntax` with that element appended to the end."},{"p":["CompositionTypeElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["CompositionTypeElementSyntax",18,372],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["CompositionTypeElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `CompositionTypeElementListSyntax` with that element appended to the end."},{"p":["CompositionTypeElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["CompositionTypeElementSyntax",18,372],[") -> ",17],["CompositionTypeElementListSyntax",18,406]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["CompositionTypeElementSyntax",18],[") -> ",17],["CompositionTypeElementListSyntax",18]],"d":"Creates a new `CompositionTypeElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `CompositionTypeElementListSyntax` with the new element at the provided index."},{"p":["DifferentiabilityParamListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DifferentiabilityParamSyntax",18,376],[") -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `DifferentiabilityParamListSyntax` with that element prepended to the\n           beginning."},{"p":["DifferentiabilityParamListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,408],[".",17],["Iterator",18,409]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["DifferentiabilityParamListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["DifferentiabilityParamListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by removing the last element.\n\n- Returns: A new `DifferentiabilityParamListSyntax` with the last element removed."},{"p":["DifferentiabilityParamListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by removing the first element.\n\n- Returns: A new `DifferentiabilityParamListSyntax` with the first element removed."},{"p":["DifferentiabilityParamListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Returns a new `DifferentiabilityParamListSyntax` with all trivia removed."},{"p":["DifferentiabilityParamListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Returns a new `DifferentiabilityParamListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["DifferentiabilityParamListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Returns a new `DifferentiabilityParamListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["DifferentiabilityParamListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Returns a new `DifferentiabilityParamListSyntax` with its leading trivia removed."},{"p":["DifferentiabilityParamListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Returns a new `DifferentiabilityParamListSyntax` with its trailing trivia removed."},{"p":["DifferentiabilityParamListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["DifferentiabilityParamListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["DifferentiabilityParamListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["DifferentiabilityParamSyntax",18,376],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["DifferentiabilityParamSyntax",18],["?",17]],"o":7760},{"p":["DifferentiabilityParamListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["DifferentiabilityParamListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `DifferentiabilityParamListSyntax` with the element at the provided index\n           removed."},{"p":["DifferentiabilityParamListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DifferentiabilityParamSyntax",18,376],[") -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["func",12],[" ",17],["appending",7],["(",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `DifferentiabilityParamListSyntax` with that element appended to the end."},{"p":["DifferentiabilityParamListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["DifferentiabilityParamSyntax",18,376],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["DifferentiabilityParamSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `DifferentiabilityParamListSyntax` with that element appended to the end."},{"p":["DifferentiabilityParamListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["DifferentiabilityParamSyntax",18,376],[") -> ",17],["DifferentiabilityParamListSyntax",18,408]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["DifferentiabilityParamListSyntax",18]],"d":"Creates a new `DifferentiabilityParamListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `DifferentiabilityParamListSyntax` with the new element at the provided index."},{"p":["OperatorPrecedenceAndTypesSyntax","addPrecedenceGroupAndDesignatedType(_:)"],"f":[["func",12],[" ",17],["addPrecedenceGroupAndDesignatedType",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["OperatorPrecedenceAndTypesSyntax",18,410]],"s":[["func",12],[" ",17],["addPrecedenceGroupAndDesignatedType",7],["(",17],["TokenSyntax",18],[") -> ",17],["OperatorPrecedenceAndTypesSyntax",18]],"d":"Adds the provided `PrecedenceGroupAndDesignatedType` to the node's `precedenceGroupAndDesignatedTypes`\ncollection.\n- param element: The new `PrecedenceGroupAndDesignatedType` to add to the node's\n                 `precedenceGroupAndDesignatedTypes` collection.\n- returns: A copy of the receiver with the provided `PrecedenceGroupAndDesignatedType`\n           appended to its `precedenceGroupAndDesignatedTypes` collection."},{"p":["OperatorPrecedenceAndTypesSyntax","withPrecedenceGroupAndDesignatedTypes(_:)"],"f":[["func",12],[" ",17],["withPrecedenceGroupAndDesignatedTypes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["IdentifierListSyntax",18,141],["?) -> ",17],["OperatorPrecedenceAndTypesSyntax",18,410]],"s":[["func",12],[" ",17],["withPrecedenceGroupAndDesignatedTypes",7],["(",17],["IdentifierListSyntax",18],["?) -> ",17],["OperatorPrecedenceAndTypesSyntax",18]],"d":"Returns a copy of the receiver with its `precedenceGroupAndDesignatedTypes` replaced.\n- param newChild: The new `precedenceGroupAndDesignatedTypes` to replace the node's\n                  current `precedenceGroupAndDesignatedTypes`, if present."},{"p":["OperatorPrecedenceAndTypesSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["OperatorPrecedenceAndTypesSyntax",18,410]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["OperatorPrecedenceAndTypesSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["OperatorPrecedenceAndTypesSyntaxBuilder","addPrecedenceGroupAndDesignatedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addPrecedenceGroupAndDesignatedType",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["addPrecedenceGroupAndDesignatedType",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["OperatorPrecedenceAndTypesSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupNameElementSyntax","withName(_:)"],"f":[["func",12],[" ",17],["withName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupNameElementSyntax",18,412]],"s":[["func",12],[" ",17],["withName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupNameElementSyntax",18]],"d":"Returns a copy of the receiver with its `name` replaced.\n- param newChild: The new `name` to replace the node's\n                  current `name`, if present."},{"p":["PrecedenceGroupNameElementSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupNameElementSyntax",18,412]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupNameElementSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["PrecedenceGroupNameElementSyntaxBuilder","useName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupNameElementSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityLabeledArgumentSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AvailabilityLabeledArgumentSyntax",18,414]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityLabeledArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["AvailabilityLabeledArgumentSyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AvailabilityLabeledArgumentSyntax",18,414]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityLabeledArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["AvailabilityLabeledArgumentSyntax","withValue(_:)"],"f":[["func",12],[" ",17],["withValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["AvailabilityLabeledArgumentSyntax",18,414]],"s":[["func",12],[" ",17],["withValue",7],["(",17],["Syntax",18],["?) -> ",17],["AvailabilityLabeledArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `value` replaced.\n- param newChild: The new `value` to replace the node's\n                  current `value`, if present."},{"p":["AvailabilityLabeledArgumentSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityLabeledArgumentSyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityLabeledArgumentSyntaxBuilder","useValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useValue",7],["(",17],["Syntax",18],[")",17]]},{"p":["SpecializeAttributeSpecListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["Syntax",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `SpecializeAttributeSpecListSyntax` with that element prepended to the\n           beginning."},{"p":["SpecializeAttributeSpecListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,416],[".",17],["Iterator",18,417]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["SpecializeAttributeSpecListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by removing the last element.\n\n- Returns: A new `SpecializeAttributeSpecListSyntax` with the last element removed."},{"p":["SpecializeAttributeSpecListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by removing the first element.\n\n- Returns: A new `SpecializeAttributeSpecListSyntax` with the first element removed."},{"p":["SpecializeAttributeSpecListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Returns a new `SpecializeAttributeSpecListSyntax` with all trivia removed."},{"p":["SpecializeAttributeSpecListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Returns a new `SpecializeAttributeSpecListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["SpecializeAttributeSpecListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Returns a new `SpecializeAttributeSpecListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["SpecializeAttributeSpecListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Returns a new `SpecializeAttributeSpecListSyntax` with its leading trivia removed."},{"p":["SpecializeAttributeSpecListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Returns a new `SpecializeAttributeSpecListSyntax` with its trailing trivia removed."},{"p":["SpecializeAttributeSpecListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["SpecializeAttributeSpecListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["SpecializeAttributeSpecListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18,513],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18],["?",17]],"o":7760},{"p":["SpecializeAttributeSpecListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["SpecializeAttributeSpecListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `SpecializeAttributeSpecListSyntax` with the element at the provided index\n           removed."},{"p":["SpecializeAttributeSpecListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["func",12],[" ",17],["appending",7],["(",17],["Syntax",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `SpecializeAttributeSpecListSyntax` with that element appended to the end."},{"p":["SpecializeAttributeSpecListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["Syntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `SpecializeAttributeSpecListSyntax` with that element appended to the end."},{"p":["SpecializeAttributeSpecListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["SpecializeAttributeSpecListSyntax",18,416]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["Syntax",18],[") -> ",17],["SpecializeAttributeSpecListSyntax",18]],"d":"Creates a new `SpecializeAttributeSpecListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `SpecializeAttributeSpecListSyntax` with the new element at the provided index."},{"p":["ImplementsAttributeArgumentsSyntax","withDeclNameArguments(_:)"],"f":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18,418]],"s":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `declNameArguments` replaced.\n- param newChild: The new `declNameArguments` to replace the node's\n                  current `declNameArguments`, if present."},{"p":["ImplementsAttributeArgumentsSyntax","withDeclBaseName(_:)"],"f":[["func",12],[" ",17],["withDeclBaseName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18,418]],"s":[["func",12],[" ",17],["withDeclBaseName",7],["(",17],["Syntax",18],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `declBaseName` replaced.\n- param newChild: The new `declBaseName` to replace the node's\n                  current `declBaseName`, if present."},{"p":["ImplementsAttributeArgumentsSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["SimpleTypeIdentifierSyntax",18,340],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18,418]],"s":[["func",12],[" ",17],["withType",7],["(",17],["SimpleTypeIdentifierSyntax",18],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["ImplementsAttributeArgumentsSyntax","withComma(_:)"],"f":[["func",12],[" ",17],["withComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18,418]],"s":[["func",12],[" ",17],["withComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ImplementsAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `comma` replaced.\n- param newChild: The new `comma` to replace the node's\n                  current `comma`, if present."},{"p":["ImplementsAttributeArgumentsSyntaxBuilder","useDeclNameArguments(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["ImplementsAttributeArgumentsSyntaxBuilder","useDeclBaseName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclBaseName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useDeclBaseName",7],["(",17],["Syntax",18],[")",17]]},{"p":["ImplementsAttributeArgumentsSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SimpleTypeIdentifierSyntax",18,340],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["SimpleTypeIdentifierSyntax",18],[")",17]]},{"p":["ImplementsAttributeArgumentsSyntaxBuilder","useComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["NamedAttributeStringArgumentSyntax","withStringOrDeclname(_:)"],"f":[["func",12],[" ",17],["withStringOrDeclname",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["NamedAttributeStringArgumentSyntax",18,420]],"s":[["func",12],[" ",17],["withStringOrDeclname",7],["(",17],["Syntax",18],["?) -> ",17],["NamedAttributeStringArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `stringOrDeclname` replaced.\n- param newChild: The new `stringOrDeclname` to replace the node's\n                  current `stringOrDeclname`, if present."},{"p":["NamedAttributeStringArgumentSyntax","withNameTok(_:)"],"f":[["func",12],[" ",17],["withNameTok",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["NamedAttributeStringArgumentSyntax",18,420]],"s":[["func",12],[" ",17],["withNameTok",7],["(",17],["TokenSyntax",18],["?) -> ",17],["NamedAttributeStringArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `nameTok` replaced.\n- param newChild: The new `nameTok` to replace the node's\n                  current `nameTok`, if present."},{"p":["NamedAttributeStringArgumentSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["NamedAttributeStringArgumentSyntax",18,420]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["NamedAttributeStringArgumentSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["NamedAttributeStringArgumentSyntaxBuilder","useStringOrDeclname(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useStringOrDeclname",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useStringOrDeclname",7],["(",17],["Syntax",18],[")",17]]},{"p":["NamedAttributeStringArgumentSyntaxBuilder","useNameTok(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useNameTok",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useNameTok",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["NamedAttributeStringArgumentSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAssociativitySyntax","withAssociativityKeyword(_:)"],"f":[["func",12],[" ",17],["withAssociativityKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupAssociativitySyntax",18,422]],"s":[["func",12],[" ",17],["withAssociativityKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupAssociativitySyntax",18]],"d":"Returns a copy of the receiver with its `associativityKeyword` replaced.\n- param newChild: The new `associativityKeyword` to replace the node's\n                  current `associativityKeyword`, if present."},{"p":["PrecedenceGroupAssociativitySyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupAssociativitySyntax",18,422]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupAssociativitySyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["PrecedenceGroupAssociativitySyntax","withValue(_:)"],"f":[["func",12],[" ",17],["withValue",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["PrecedenceGroupAssociativitySyntax",18,422]],"s":[["func",12],[" ",17],["withValue",7],["(",17],["TokenSyntax",18],["?) -> ",17],["PrecedenceGroupAssociativitySyntax",18]],"d":"Returns a copy of the receiver with its `value` replaced.\n- param newChild: The new `value` to replace the node's\n                  current `value`, if present."},{"p":["PrecedenceGroupAssociativitySyntaxBuilder","useAssociativityKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAssociativityKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAssociativityKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAssociativitySyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAssociativitySyntaxBuilder","useValue(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useValue",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useValue",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["PrecedenceGroupAttributeListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["Syntax",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with that element prepended to the\n           beginning."},{"p":["PrecedenceGroupAttributeListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,424],[".",17],["Iterator",18,425]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["PrecedenceGroupAttributeListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by removing the last element.\n\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with the last element removed."},{"p":["PrecedenceGroupAttributeListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by removing the first element.\n\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with the first element removed."},{"p":["PrecedenceGroupAttributeListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Returns a new `PrecedenceGroupAttributeListSyntax` with all trivia removed."},{"p":["PrecedenceGroupAttributeListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Returns a new `PrecedenceGroupAttributeListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["PrecedenceGroupAttributeListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Returns a new `PrecedenceGroupAttributeListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["PrecedenceGroupAttributeListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Returns a new `PrecedenceGroupAttributeListSyntax` with its leading trivia removed."},{"p":["PrecedenceGroupAttributeListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Returns a new `PrecedenceGroupAttributeListSyntax` with its trailing trivia removed."},{"p":["PrecedenceGroupAttributeListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["PrecedenceGroupAttributeListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["PrecedenceGroupAttributeListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18,513],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Syntax",18],["?",17]],"o":7760},{"p":["PrecedenceGroupAttributeListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["PrecedenceGroupAttributeListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with the element at the provided index\n           removed."},{"p":["PrecedenceGroupAttributeListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["func",12],[" ",17],["appending",7],["(",17],["Syntax",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with that element appended to the end."},{"p":["PrecedenceGroupAttributeListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["Syntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with that element appended to the end."},{"p":["PrecedenceGroupAttributeListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["Syntax",18,513],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18,424]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["Syntax",18],[") -> ",17],["PrecedenceGroupAttributeListSyntax",18]],"d":"Creates a new `PrecedenceGroupAttributeListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `PrecedenceGroupAttributeListSyntax` with the new element at the provided index."},{"p":["DifferentiabilityParamsClauseSyntax","withWrtLabel(_:)"],"f":[["func",12],[" ",17],["withWrtLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DifferentiabilityParamsClauseSyntax",18,426]],"s":[["func",12],[" ",17],["withWrtLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiabilityParamsClauseSyntax",18]],"d":"Returns a copy of the receiver with its `wrtLabel` replaced.\n- param newChild: The new `wrtLabel` to replace the node's\n                  current `wrtLabel`, if present."},{"p":["DifferentiabilityParamsClauseSyntax","withParameters(_:)"],"f":[["func",12],[" ",17],["withParameters",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["DifferentiabilityParamsClauseSyntax",18,426]],"s":[["func",12],[" ",17],["withParameters",7],["(",17],["Syntax",18],["?) -> ",17],["DifferentiabilityParamsClauseSyntax",18]],"d":"Returns a copy of the receiver with its `parameters` replaced.\n- param newChild: The new `parameters` to replace the node's\n                  current `parameters`, if present."},{"p":["DifferentiabilityParamsClauseSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DifferentiabilityParamsClauseSyntax",18,426]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiabilityParamsClauseSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["DifferentiabilityParamsClauseSyntaxBuilder","useWrtLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWrtLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useWrtLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DifferentiabilityParamsClauseSyntaxBuilder","useParameters(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useParameters",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useParameters",7],["(",17],["Syntax",18],[")",17]]},{"p":["DifferentiabilityParamsClauseSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AvailabilityVersionRestrictionSyntax","withVersion(_:)"],"f":[["func",12],[" ",17],["withVersion",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["VersionTupleSyntax",18,97],["?) -> ",17],["AvailabilityVersionRestrictionSyntax",18,428]],"s":[["func",12],[" ",17],["withVersion",7],["(",17],["VersionTupleSyntax",18],["?) -> ",17],["AvailabilityVersionRestrictionSyntax",18]],"d":"Returns a copy of the receiver with its `version` replaced.\n- param newChild: The new `version` to replace the node's\n                  current `version`, if present."},{"p":["AvailabilityVersionRestrictionSyntax","withPlatform(_:)"],"f":[["func",12],[" ",17],["withPlatform",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AvailabilityVersionRestrictionSyntax",18,428]],"s":[["func",12],[" ",17],["withPlatform",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AvailabilityVersionRestrictionSyntax",18]],"d":"Returns a copy of the receiver with its `platform` replaced.\n- param newChild: The new `platform` to replace the node's\n                  current `platform`, if present."},{"p":["AvailabilityVersionRestrictionSyntaxBuilder","useVersion(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useVersion",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VersionTupleSyntax",18,97],[")",17]],"s":[["func",12],[" ",17],["useVersion",7],["(",17],["VersionTupleSyntax",18],[")",17]]},{"p":["AvailabilityVersionRestrictionSyntaxBuilder","usePlatform(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePlatform",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePlatform",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MultipleTrailingClosureElementSyntax","withClosure(_:)"],"f":[["func",12],[" ",17],["withClosure",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ClosureExprSyntax",18,41],["?) -> ",17],["MultipleTrailingClosureElementSyntax",18,430]],"s":[["func",12],[" ",17],["withClosure",7],["(",17],["ClosureExprSyntax",18],["?) -> ",17],["MultipleTrailingClosureElementSyntax",18]],"d":"Returns a copy of the receiver with its `closure` replaced.\n- param newChild: The new `closure` to replace the node's\n                  current `closure`, if present."},{"p":["MultipleTrailingClosureElementSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["MultipleTrailingClosureElementSyntax",18,430]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MultipleTrailingClosureElementSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["MultipleTrailingClosureElementSyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["MultipleTrailingClosureElementSyntax",18,430]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["MultipleTrailingClosureElementSyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["MultipleTrailingClosureElementSyntaxBuilder","useClosure(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useClosure",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[")",17]],"s":[["func",12],[" ",17],["useClosure",7],["(",17],["ClosureExprSyntax",18],[")",17]]},{"p":["MultipleTrailingClosureElementSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MultipleTrailingClosureElementSyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","withWrappedType(_:)"],"f":[["func",12],[" ",17],["withWrappedType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,432]],"s":[["func",12],[" ",17],["withWrappedType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18]],"d":"Returns a copy of the receiver with its `wrappedType` replaced.\n- param newChild: The new `wrappedType` to replace the node's\n                  current `wrappedType`, if present."},{"p":["ImplicitlyUnwrappedOptionalTypeSyntax","withExclamationMark(_:)"],"f":[["func",12],[" ",17],["withExclamationMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,432]],"s":[["func",12],[" ",17],["withExclamationMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18]],"d":"Returns a copy of the receiver with its `exclamationMark` replaced.\n- param newChild: The new `exclamationMark` to replace the node's\n                  current `exclamationMark`, if present."},{"p":["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder","useWrappedType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWrappedType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useWrappedType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ImplicitlyUnwrappedOptionalTypeSyntaxBuilder","useExclamationMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExclamationMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useExclamationMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DifferentiableAttributeArgumentsSyntax","withDiffKind(_:)"],"f":[["func",12],[" ",17],["withDiffKind",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18,434]],"s":[["func",12],[" ",17],["withDiffKind",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `diffKind` replaced.\n- param newChild: The new `diffKind` to replace the node's\n                  current `diffKind`, if present."},{"p":["DifferentiableAttributeArgumentsSyntax","withDiffParams(_:)"],"f":[["func",12],[" ",17],["withDiffParams",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18,434]],"s":[["func",12],[" ",17],["withDiffParams",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `diffParams` replaced.\n- param newChild: The new `diffParams` to replace the node's\n                  current `diffParams`, if present."},{"p":["DifferentiableAttributeArgumentsSyntax","withWhereClause(_:)"],"f":[["func",12],[" ",17],["withWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18,434]],"s":[["func",12],[" ",17],["withWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `whereClause` replaced.\n- param newChild: The new `whereClause` to replace the node's\n                  current `whereClause`, if present."},{"p":["DifferentiableAttributeArgumentsSyntax","withDiffKindComma(_:)"],"f":[["func",12],[" ",17],["withDiffKindComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18,434]],"s":[["func",12],[" ",17],["withDiffKindComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `diffKindComma` replaced.\n- param newChild: The new `diffKindComma` to replace the node's\n                  current `diffKindComma`, if present."},{"p":["DifferentiableAttributeArgumentsSyntax","withDiffParamsComma(_:)"],"f":[["func",12],[" ",17],["withDiffParamsComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18,434]],"s":[["func",12],[" ",17],["withDiffParamsComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DifferentiableAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `diffParamsComma` replaced.\n- param newChild: The new `diffParamsComma` to replace the node's\n                  current `diffParamsComma`, if present."},{"p":["DifferentiableAttributeArgumentsSyntaxBuilder","useDiffKind(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDiffKind",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDiffKind",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DifferentiableAttributeArgumentsSyntaxBuilder","useDiffParams(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDiffParams",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],[")",17]],"s":[["func",12],[" ",17],["useDiffParams",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[")",17]]},{"p":["DifferentiableAttributeArgumentsSyntaxBuilder","useWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["DifferentiableAttributeArgumentsSyntaxBuilder","useDiffKindComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDiffKindComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDiffKindComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DifferentiableAttributeArgumentsSyntaxBuilder","useDiffParamsComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDiffParamsComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDiffParamsComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["MultipleTrailingClosureElementListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Returns a new `MultipleTrailingClosureElementListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["MultipleTrailingClosureElementListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Returns a new `MultipleTrailingClosureElementListSyntax` with its trailing trivia removed."},{"p":["MultipleTrailingClosureElementListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with that element prepended to the\n           beginning."},{"p":["MultipleTrailingClosureElementListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,436],[".",17],["Iterator",18,437]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["MultipleTrailingClosureElementListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by removing the last element.\n\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with the last element removed."},{"p":["MultipleTrailingClosureElementListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by removing the first element.\n\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with the first element removed."},{"p":["MultipleTrailingClosureElementListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Returns a new `MultipleTrailingClosureElementListSyntax` with all trivia removed."},{"p":["MultipleTrailingClosureElementListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Returns a new `MultipleTrailingClosureElementListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["MultipleTrailingClosureElementListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Returns a new `MultipleTrailingClosureElementListSyntax` with its leading trivia removed."},{"p":["MultipleTrailingClosureElementListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["MultipleTrailingClosureElementListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["MultipleTrailingClosureElementListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["MultipleTrailingClosureElementSyntax",18,430],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["MultipleTrailingClosureElementSyntax",18],["?",17]],"o":7760},{"p":["MultipleTrailingClosureElementListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["MultipleTrailingClosureElementListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with the element at the provided index\n           removed."},{"p":["MultipleTrailingClosureElementListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["func",12],[" ",17],["appending",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with that element appended to the end."},{"p":["MultipleTrailingClosureElementListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with that element appended to the end."},{"p":["MultipleTrailingClosureElementListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18,436]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["MultipleTrailingClosureElementListSyntax",18]],"d":"Creates a new `MultipleTrailingClosureElementListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `MultipleTrailingClosureElementListSyntax` with the new element at the provided index."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withPeriod(_:)"],"f":[["func",12],[" ",17],["withPeriod",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438]],"s":[["func",12],[" ",17],["withPeriod",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `period` replaced.\n- param newChild: The new `period` to replace the node's\n                  current `period`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withOfLabel(_:)"],"f":[["func",12],[" ",17],["withOfLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438]],"s":[["func",12],[" ",17],["withOfLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `ofLabel` replaced.\n- param newChild: The new `ofLabel` to replace the node's\n                  current `ofLabel`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withDiffParams(_:)"],"f":[["func",12],[" ",17],["withDiffParams",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438]],"s":[["func",12],[" ",17],["withDiffParams",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `diffParams` replaced.\n- param newChild: The new `diffParams` to replace the node's\n                  current `diffParams`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withAccessorKind(_:)"],"f":[["func",12],[" ",17],["withAccessorKind",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438]],"s":[["func",12],[" ",17],["withAccessorKind",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `accessorKind` replaced.\n- param newChild: The new `accessorKind` to replace the node's\n                  current `accessorKind`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withOriginalDeclName(_:)"],"f":[["func",12],[" ",17],["withOriginalDeclName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["QualifiedDeclNameSyntax",18,270],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438]],"s":[["func",12],[" ",17],["withOriginalDeclName",7],["(",17],["QualifiedDeclNameSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `originalDeclName` replaced.\n- param newChild: The new `originalDeclName` to replace the node's\n                  current `originalDeclName`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withColon(_:)"],"f":[["func",12],[" ",17],["withColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438]],"s":[["func",12],[" ",17],["withColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `colon` replaced.\n- param newChild: The new `colon` to replace the node's\n                  current `colon`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntax","withComma(_:)"],"f":[["func",12],[" ",17],["withComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438]],"s":[["func",12],[" ",17],["withComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18]],"d":"Returns a copy of the receiver with its `comma` replaced.\n- param newChild: The new `comma` to replace the node's\n                  current `comma`, if present."},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","useOfLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOfLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useOfLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","useDiffParams(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDiffParams",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],[")",17]],"s":[["func",12],[" ",17],["useDiffParams",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[")",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","useAccessorKind(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAccessorKind",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAccessorKind",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","useOriginalDeclName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useOriginalDeclName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["QualifiedDeclNameSyntax",18,270],[")",17]],"s":[["func",12],[" ",17],["useOriginalDeclName",7],["(",17],["QualifiedDeclNameSyntax",18],[")",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","useColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","useComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DerivativeRegistrationAttributeArgumentsSyntaxBuilder","usePeriod(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePeriod",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["usePeriod",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclSyntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["DeclSyntaxProtocol",18,5],[".Protocol) -> ",17],["DeclSyntaxProtocol",18,5]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["DeclSyntaxProtocol",18],[".Protocol) -> ",17],["DeclSyntaxProtocol",18]],"d":"Return the non-type erased version of this syntax node.\nNote that this will incur an existential conversion."},{"p":["DeclSyntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["DeclSyntaxProtocol",18,5],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["DeclSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"a":{"a":{"d":true,"m":"Expression always evaluates to true"}},"d":"Syntax nodes always conform to `DeclSyntaxProtocol`. This API is just\nadded for consistency.\nNote that this will incur an existential conversion."},{"p":["DeclSyntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["S",18],["? ",17],["where",12],[" ",17],["S",18],[" : ",17],["DeclSyntaxProtocol",18,5]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["S",18],["?",17]],"c":[["S",1,"DeclSyntaxProtocol",5]],"g":[["S",0,0]]},{"p":["DeclSyntax","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["Bool",18,7703],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["DeclSyntaxProtocol",18,5]],"s":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["Bool",18]],"c":[["S",1,"DeclSyntaxProtocol",5]],"g":[["S",0,0]]},{"p":["ExprSyntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["ExprSyntaxProtocol",18,6],[".Protocol) -> ",17],["ExprSyntaxProtocol",18,6]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["ExprSyntaxProtocol",18],[".Protocol) -> ",17],["ExprSyntaxProtocol",18]],"d":"Return the non-type erased version of this syntax node.\nNote that this will incur an existential conversion."},{"p":["ExprSyntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["ExprSyntaxProtocol",18,6],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["ExprSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"a":{"a":{"d":true,"m":"Expression always evaluates to true"}},"d":"Syntax nodes always conform to `ExprSyntaxProtocol`. This API is just\nadded for consistency.\nNote that this will incur an existential conversion."},{"p":["ExprSyntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["S",18],["? ",17],["where",12],[" ",17],["S",18],[" : ",17],["ExprSyntaxProtocol",18,6]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["S",18],["?",17]],"c":[["S",1,"ExprSyntaxProtocol",6]],"g":[["S",0,0]]},{"p":["ExprSyntax","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["Bool",18,7703],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["ExprSyntaxProtocol",18,6]],"s":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["Bool",18]],"c":[["S",1,"ExprSyntaxProtocol",6]],"g":[["S",0,0]]},{"p":["StmtSyntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["StmtSyntaxProtocol",18,7],[".Protocol) -> ",17],["StmtSyntaxProtocol",18,7]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["StmtSyntaxProtocol",18],[".Protocol) -> ",17],["StmtSyntaxProtocol",18]],"d":"Return the non-type erased version of this syntax node.\nNote that this will incur an existential conversion."},{"p":["StmtSyntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["StmtSyntaxProtocol",18,7],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["StmtSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"a":{"a":{"d":true,"m":"Expression always evaluates to true"}},"d":"Syntax nodes always conform to `StmtSyntaxProtocol`. This API is just\nadded for consistency.\nNote that this will incur an existential conversion."},{"p":["StmtSyntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["S",18],["? ",17],["where",12],[" ",17],["S",18],[" : ",17],["StmtSyntaxProtocol",18,7]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["S",18],["?",17]],"c":[["S",1,"StmtSyntaxProtocol",7]],"g":[["S",0,0]]},{"p":["StmtSyntax","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["Bool",18,7703],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["StmtSyntaxProtocol",18,7]],"s":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["Bool",18]],"c":[["S",1,"StmtSyntaxProtocol",7]],"g":[["S",0,0]]},{"p":["TypeSyntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["TypeSyntaxProtocol",18,8],[".Protocol) -> ",17],["TypeSyntaxProtocol",18,8]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["TypeSyntaxProtocol",18],[".Protocol) -> ",17],["TypeSyntaxProtocol",18]],"d":"Return the non-type erased version of this syntax node.\nNote that this will incur an existential conversion."},{"p":["TypeSyntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["TypeSyntaxProtocol",18,8],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["TypeSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"a":{"a":{"d":true,"m":"Expression always evaluates to true"}},"d":"Syntax nodes always conform to `TypeSyntaxProtocol`. This API is just\nadded for consistency.\nNote that this will incur an existential conversion."},{"p":["TypeSyntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["S",18],["? ",17],["where",12],[" ",17],["S",18],[" : ",17],["TypeSyntaxProtocol",18,8]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["S",18],["?",17]],"c":[["S",1,"TypeSyntaxProtocol",8]],"g":[["S",0,0]]},{"p":["TypeSyntax","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["Bool",18,7703],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["TypeSyntaxProtocol",18,8]],"s":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["Bool",18]],"c":[["S",1,"TypeSyntaxProtocol",8]],"g":[["S",0,0]]},{"p":["TokenSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TokenSyntax",18,444]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TokenSyntax",18]],"d":"Returns a new TokenSyntax with all trivia removed."},{"p":["TokenSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["TokenSyntax",18,444]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]],"d":"Returns a new TokenSyntax with its leading trivia replaced\nby the provided trivia."},{"p":["TokenSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["TokenSyntax",18,444]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TokenSyntax",18]],"d":"Returns a new TokenSyntax with its trailing trivia replaced\nby the provided trivia."},{"p":["TokenSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TokenSyntax",18,444]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TokenSyntax",18]],"d":"Returns a new TokenSyntax with its leading trivia removed."},{"p":["TokenSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TokenSyntax",18,444]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TokenSyntax",18]],"d":"Returns a new TokenSyntax with its trailing trivia removed."},{"p":["TokenSyntax","withKind(_:)"],"f":[["func",12],[" ",17],["withKind",7],["(",17],["_",1],[" ",17],["tokenKind",2],[": ",17],["TokenKind",18,24],[") -> ",17],["TokenSyntax",18,444]],"s":[["func",12],[" ",17],["withKind",7],["(",17],["TokenKind",18],[") -> ",17],["TokenSyntax",18]],"d":"Returns a new TokenSyntax with its kind replaced\nby the provided token kind."},{"p":["AsExprSyntax","withAsTok(_:)"],"f":[["func",12],[" ",17],["withAsTok",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AsExprSyntax",18,445]],"s":[["func",12],[" ",17],["withAsTok",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AsExprSyntax",18]],"d":"Returns a copy of the receiver with its `asTok` replaced.\n- param newChild: The new `asTok` to replace the node's\n                  current `asTok`, if present."},{"p":["AsExprSyntax","withTypeName(_:)"],"f":[["func",12],[" ",17],["withTypeName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["AsExprSyntax",18,445]],"s":[["func",12],[" ",17],["withTypeName",7],["(",17],["TypeSyntax",18],["?) -> ",17],["AsExprSyntax",18]],"d":"Returns a copy of the receiver with its `typeName` replaced.\n- param newChild: The new `typeName` to replace the node's\n                  current `typeName`, if present."},{"p":["AsExprSyntax","withQuestionOrExclamationMark(_:)"],"f":[["func",12],[" ",17],["withQuestionOrExclamationMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AsExprSyntax",18,445]],"s":[["func",12],[" ",17],["withQuestionOrExclamationMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AsExprSyntax",18]],"d":"Returns a copy of the receiver with its `questionOrExclamationMark` replaced.\n- param newChild: The new `questionOrExclamationMark` to replace the node's\n                  current `questionOrExclamationMark`, if present."},{"p":["AsExprSyntaxBuilder","useAsTok(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsTok",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAsTok",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AsExprSyntaxBuilder","useTypeName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useTypeName",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["AsExprSyntaxBuilder","useQuestionOrExclamationMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useQuestionOrExclamationMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useQuestionOrExclamationMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["BracedSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["BracedSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["DoStmtSyntax","withDoKeyword(_:)"],"f":[["func",12],[" ",17],["withDoKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DoStmtSyntax",18,447]],"s":[["func",12],[" ",17],["withDoKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DoStmtSyntax",18]],"d":"Returns a copy of the receiver with its `doKeyword` replaced.\n- param newChild: The new `doKeyword` to replace the node's\n                  current `doKeyword`, if present."},{"p":["DoStmtSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DoStmtSyntax",18,447]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DoStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present.","o":5949},{"p":["DoStmtSyntax","addCatchClause(_:)"],"f":[["func",12],[" ",17],["addCatchClause",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["DoStmtSyntax",18,447]],"s":[["func",12],[" ",17],["addCatchClause",7],["(",17],["CatchClauseSyntax",18],[") -> ",17],["DoStmtSyntax",18]],"d":"Adds the provided `CatchClause` to the node's `catchClauses`\ncollection.\n- param element: The new `CatchClause` to add to the node's\n                 `catchClauses` collection.\n- returns: A copy of the receiver with the provided `CatchClause`\n           appended to its `catchClauses` collection."},{"p":["DoStmtSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DoStmtSyntax",18,447]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DoStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present.","o":5950},{"p":["DoStmtSyntax","withCatchClauses(_:)"],"f":[["func",12],[" ",17],["withCatchClauses",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CatchClauseListSyntax",18,160],["?) -> ",17],["DoStmtSyntax",18,447]],"s":[["func",12],[" ",17],["withCatchClauses",7],["(",17],["CatchClauseListSyntax",18],["?) -> ",17],["DoStmtSyntax",18]],"d":"Returns a copy of the receiver with its `catchClauses` replaced.\n- param newChild: The new `catchClauses` to replace the node's\n                  current `catchClauses`, if present."},{"p":["DoStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["DoStmtSyntax",18,447]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["DoStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present.","o":4545},{"p":["DoStmtSyntaxBuilder","useDoKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDoKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDoKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DoStmtSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DoStmtSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DoStmtSyntaxBuilder","addCatchClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCatchClause",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CatchClauseSyntax",18,39],[")",17]],"s":[["func",12],[" ",17],["addCatchClause",7],["(",17],["CatchClauseSyntax",18],[")",17]]},{"p":["DoStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["IfStmtSyntax","withIfKeyword(_:)"],"f":[["func",12],[" ",17],["withIfKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["IfStmtSyntax",18,449]],"s":[["func",12],[" ",17],["withIfKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `ifKeyword` replaced.\n- param newChild: The new `ifKeyword` to replace the node's\n                  current `ifKeyword`, if present."},{"p":["IfStmtSyntax","addCondition(_:)"],"f":[["func",12],[" ",17],["addCondition",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["IfStmtSyntax",18,449]],"s":[["func",12],[" ",17],["addCondition",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["IfStmtSyntax",18]],"d":"Adds the provided `Condition` to the node's `conditions`\ncollection.\n- param element: The new `Condition` to add to the node's\n                 `conditions` collection.\n- returns: A copy of the receiver with the provided `Condition`\n           appended to its `conditions` collection."},{"p":["IfStmtSyntax","withElseBody(_:)"],"f":[["func",12],[" ",17],["withElseBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["IfStmtSyntax",18,449]],"s":[["func",12],[" ",17],["withElseBody",7],["(",17],["Syntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `elseBody` replaced.\n- param newChild: The new `elseBody` to replace the node's\n                  current `elseBody`, if present."},{"p":["IfStmtSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["IfStmtSyntax",18,449]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present.","o":5949},{"p":["IfStmtSyntax","withConditions(_:)"],"f":[["func",12],[" ",17],["withConditions",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ConditionElementListSyntax",18,330],["?) -> ",17],["IfStmtSyntax",18,449]],"s":[["func",12],[" ",17],["withConditions",7],["(",17],["ConditionElementListSyntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `conditions` replaced.\n- param newChild: The new `conditions` to replace the node's\n                  current `conditions`, if present."},{"p":["IfStmtSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["IfStmtSyntax",18,449]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present.","o":5950},{"p":["IfStmtSyntax","withElseKeyword(_:)"],"f":[["func",12],[" ",17],["withElseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["IfStmtSyntax",18,449]],"s":[["func",12],[" ",17],["withElseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `elseKeyword` replaced.\n- param newChild: The new `elseKeyword` to replace the node's\n                  current `elseKeyword`, if present."},{"p":["IfStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["IfStmtSyntax",18,449]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["IfStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present.","o":4545},{"p":["IfStmtSyntaxBuilder","useIfKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIfKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIfKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IfStmtSyntaxBuilder","useElseBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useElseBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useElseBody",7],["(",17],["Syntax",18],[")",17]]},{"p":["IfStmtSyntaxBuilder","addCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCondition",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ConditionElementSyntax",18,208],[")",17]],"s":[["func",12],[" ",17],["addCondition",7],["(",17],["ConditionElementSyntax",18],[")",17]]},{"p":["IfStmtSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IfStmtSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IfStmtSyntaxBuilder","useElseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useElseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useElseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IfStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["IsExprSyntax","withIsTok(_:)"],"f":[["func",12],[" ",17],["withIsTok",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["IsExprSyntax",18,451]],"s":[["func",12],[" ",17],["withIsTok",7],["(",17],["TokenSyntax",18],["?) -> ",17],["IsExprSyntax",18]],"d":"Returns a copy of the receiver with its `isTok` replaced.\n- param newChild: The new `isTok` to replace the node's\n                  current `isTok`, if present."},{"p":["IsExprSyntax","withTypeName(_:)"],"f":[["func",12],[" ",17],["withTypeName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["IsExprSyntax",18,451]],"s":[["func",12],[" ",17],["withTypeName",7],["(",17],["TypeSyntax",18],["?) -> ",17],["IsExprSyntax",18]],"d":"Returns a copy of the receiver with its `typeName` replaced.\n- param newChild: The new `typeName` to replace the node's\n                  current `typeName`, if present."},{"p":["IsExprSyntaxBuilder","useIsTok(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIsTok",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIsTok",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["IsExprSyntaxBuilder","useTypeName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useTypeName",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["LabeledSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["LabeledSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["Self",18]]},{"p":["PatternSyntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["PatternSyntaxProtocol",18,11],[".Protocol) -> ",17],["PatternSyntaxProtocol",18,11]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["PatternSyntaxProtocol",18],[".Protocol) -> ",17],["PatternSyntaxProtocol",18]],"d":"Return the non-type erased version of this syntax node.\nNote that this will incur an existential conversion."},{"p":["PatternSyntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["PatternSyntaxProtocol",18,11],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["PatternSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"a":{"a":{"d":true,"m":"Expression always evaluates to true"}},"d":"Syntax nodes always conform to `PatternSyntaxProtocol`. This API is just\nadded for consistency.\nNote that this will incur an existential conversion."},{"p":["PatternSyntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["S",18],["? ",17],["where",12],[" ",17],["S",18],[" : ",17],["PatternSyntaxProtocol",18,11]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["S",18],["?",17]],"c":[["S",1,"PatternSyntaxProtocol",11]],"g":[["S",0,0]]},{"p":["PatternSyntax","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["Bool",18,7703],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["PatternSyntaxProtocol",18,11]],"s":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["Bool",18]],"c":[["S",1,"PatternSyntaxProtocol",11]],"g":[["S",0,0]]},{"p":["TryExprSyntax","withTryKeyword(_:)"],"f":[["func",12],[" ",17],["withTryKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TryExprSyntax",18,454]],"s":[["func",12],[" ",17],["withTryKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TryExprSyntax",18]],"d":"Returns a copy of the receiver with its `tryKeyword` replaced.\n- param newChild: The new `tryKeyword` to replace the node's\n                  current `tryKeyword`, if present."},{"p":["TryExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["TryExprSyntax",18,454]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["TryExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["TryExprSyntax","withQuestionOrExclamationMark(_:)"],"f":[["func",12],[" ",17],["withQuestionOrExclamationMark",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TryExprSyntax",18,454]],"s":[["func",12],[" ",17],["withQuestionOrExclamationMark",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TryExprSyntax",18]],"d":"Returns a copy of the receiver with its `questionOrExclamationMark` replaced.\n- param newChild: The new `questionOrExclamationMark` to replace the node's\n                  current `questionOrExclamationMark`, if present."},{"p":["TryExprSyntaxBuilder","useTryKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTryKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTryKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TryExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["TryExprSyntaxBuilder","useQuestionOrExclamationMark(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useQuestionOrExclamationMark",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useQuestionOrExclamationMark",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CaseItemSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,453],["?) -> ",17],["CaseItemSyntax",18,457]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["CaseItemSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["CaseItemSyntax","withWhereClause(_:)"],"f":[["func",12],[" ",17],["withWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["WhereClauseSyntax",18,51],["?) -> ",17],["CaseItemSyntax",18,457]],"s":[["func",12],[" ",17],["withWhereClause",7],["(",17],["WhereClauseSyntax",18],["?) -> ",17],["CaseItemSyntax",18]],"d":"Returns a copy of the receiver with its `whereClause` replaced.\n- param newChild: The new `whereClause` to replace the node's\n                  current `whereClause`, if present."},{"p":["CaseItemSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CaseItemSyntax",18,457]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CaseItemSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["CaseItemSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["CaseItemSyntaxBuilder","useWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[")",17]],"s":[["func",12],[" ",17],["useWhereClause",7],["(",17],["WhereClauseSyntax",18],[")",17]]},{"p":["CaseItemSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclNameSyntax","withDeclBaseName(_:)"],"f":[["func",12],[" ",17],["withDeclBaseName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["DeclNameSyntax",18,459]],"s":[["func",12],[" ",17],["withDeclBaseName",7],["(",17],["Syntax",18],["?) -> ",17],["DeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `declBaseName` replaced.\n- param newChild: The new `declBaseName` to replace the node's\n                  current `declBaseName`, if present."},{"p":["DeclNameSyntax","withDeclNameArguments(_:)"],"f":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["DeclNameArgumentsSyntax",18,240],["?) -> ",17],["DeclNameSyntax",18,459]],"s":[["func",12],[" ",17],["withDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],["?) -> ",17],["DeclNameSyntax",18]],"d":"Returns a copy of the receiver with its `declNameArguments` replaced.\n- param newChild: The new `declNameArguments` to replace the node's\n                  current `declNameArguments`, if present."},{"p":["DeclNameSyntaxBuilder","useDeclBaseName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclBaseName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useDeclBaseName",7],["(",17],["Syntax",18],[")",17]]},{"p":["DeclNameSyntaxBuilder","useDeclNameArguments(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["useDeclNameArguments",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]]},{"p":["EnumDeclSyntax","withEnumKeyword(_:)"],"f":[["func",12],[" ",17],["withEnumKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["EnumDeclSyntax",18,461]],"s":[["func",12],[" ",17],["withEnumKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `enumKeyword` replaced.\n- param newChild: The new `enumKeyword` to replace the node's\n                  current `enumKeyword`, if present."},{"p":["EnumDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["EnumDeclSyntax",18,461]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["EnumDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["EnumDeclSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclBlockSyntax",18,182],["?) -> ",17],["EnumDeclSyntax",18,461]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclBlockSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `members` replaced.\n- param newChild: The new `members` to replace the node's\n                  current `members`, if present."},{"p":["EnumDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["EnumDeclSyntax",18,461]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["EnumDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["EnumDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["EnumDeclSyntax",18,461]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present."},{"p":["EnumDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["EnumDeclSyntax",18,461]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present."},{"p":["EnumDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["EnumDeclSyntax",18,461]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present.","o":4573},{"p":["EnumDeclSyntax","withGenericParameters(_:)"],"f":[["func",12],[" ",17],["withGenericParameters",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,378],["?) -> ",17],["EnumDeclSyntax",18,461]],"s":[["func",12],[" ",17],["withGenericParameters",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameters` replaced.\n- param newChild: The new `genericParameters` to replace the node's\n                  current `genericParameters`, if present."},{"p":["EnumDeclSyntax","withInheritanceClause(_:)"],"f":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],["?) -> ",17],["EnumDeclSyntax",18,461]],"s":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `inheritanceClause` replaced.\n- param newChild: The new `inheritanceClause` to replace the node's\n                  current `inheritanceClause`, if present."},{"p":["EnumDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["EnumDeclSyntax",18,461]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["EnumDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["EnumDeclSyntaxBuilder","useEnumKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useEnumKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useEnumKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","useMembers(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMembers",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["useMembers",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","useGenericParameters(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameters",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,378],[")",17]],"s":[["func",12],[" ",17],["useGenericParameters",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","useInheritanceClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritanceClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],[")",17]],"s":[["func",12],[" ",17],["useInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["EnumDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["ExprListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ExprSyntax",18,441],[") -> ",17],["ExprListSyntax",18,463]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ExprSyntax",18],[") -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ExprListSyntax` with that element prepended to the\n           beginning."},{"p":["ExprListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ExprListSyntax",18,463],[".",17],["Iterator",18,464]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ExprListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["ExprListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ExprListSyntax",18,463]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by removing the last element.\n\n- Returns: A new `ExprListSyntax` with the last element removed."},{"p":["ExprListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ExprListSyntax",18,463]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by removing the first element.\n\n- Returns: A new `ExprListSyntax` with the first element removed."},{"p":["ExprListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ExprListSyntax",18,463]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ExprListSyntax",18]],"d":"Returns a new `ExprListSyntax` with all trivia removed."},{"p":["ExprListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ExprListSyntax",18,463]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ExprListSyntax",18]],"d":"Returns a new `ExprListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ExprListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ExprListSyntax",18,463]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ExprListSyntax",18]],"d":"Returns a new `ExprListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ExprListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ExprListSyntax",18,463]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ExprListSyntax",18]],"d":"Returns a new `ExprListSyntax` with its leading trivia removed."},{"p":["ExprListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ExprListSyntax",18,463]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ExprListSyntax",18]],"d":"Returns a new `ExprListSyntax` with its trailing trivia removed."},{"p":["ExprListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["ExprListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["ExprListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ExprSyntax",18,441],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ExprSyntax",18],["?",17]],"o":7760},{"p":["ExprListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["ExprListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ExprListSyntax",18,463]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ExprListSyntax` with the element at the provided index\n           removed."},{"p":["ExprListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ExprSyntax",18,441],[") -> ",17],["ExprListSyntax",18,463]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ExprSyntax",18],[") -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ExprListSyntax` with that element appended to the end."},{"p":["ExprListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ExprSyntax",18,441],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ExprListSyntax",18,463]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ExprSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ExprListSyntax` with that element appended to the end."},{"p":["ExprListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ExprSyntax",18,441],[") -> ",17],["ExprListSyntax",18,463]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ExprSyntax",18],[") -> ",17],["ExprListSyntax",18]],"d":"Creates a new `ExprListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ExprListSyntax` with the new element at the provided index."},{"p":["ObjcNameSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["ObjcNameSyntax",18,465]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["ObjcNamePieceSyntax",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `ObjcNameSyntax` with that element prepended to the\n           beginning."},{"p":["ObjcNameSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ObjcNameSyntax",18,465],[".",17],["Iterator",18,466]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ObjcNameSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["ObjcNameSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ObjcNameSyntax",18,465]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by removing the last element.\n\n- Returns: A new `ObjcNameSyntax` with the last element removed."},{"p":["ObjcNameSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ObjcNameSyntax",18,465]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by removing the first element.\n\n- Returns: A new `ObjcNameSyntax` with the first element removed."},{"p":["ObjcNameSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ObjcNameSyntax",18,465]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["ObjcNameSyntax",18]],"d":"Returns a new `ObjcNameSyntax` with all trivia removed."},{"p":["ObjcNameSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ObjcNameSyntax",18,465]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Returns a new `ObjcNameSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["ObjcNameSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["ObjcNameSyntax",18,465]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Returns a new `ObjcNameSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["ObjcNameSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ObjcNameSyntax",18,465]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["ObjcNameSyntax",18]],"d":"Returns a new `ObjcNameSyntax` with its leading trivia removed."},{"p":["ObjcNameSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ObjcNameSyntax",18,465]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["ObjcNameSyntax",18]],"d":"Returns a new `ObjcNameSyntax` with its trailing trivia removed."},{"p":["ObjcNameSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["ObjcNameSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["ObjcNameSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["ObjcNamePieceSyntax",18,115],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["ObjcNamePieceSyntax",18],["?",17]],"o":7760},{"p":["ObjcNameSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["ObjcNameSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ObjcNameSyntax",18,465]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `ObjcNameSyntax` with the element at the provided index\n           removed."},{"p":["ObjcNameSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["ObjcNameSyntax",18,465]],"s":[["func",12],[" ",17],["appending",7],["(",17],["ObjcNamePieceSyntax",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `ObjcNameSyntax` with that element appended to the end."},{"p":["ObjcNameSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["ObjcNamePieceSyntax",18,115],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["ObjcNameSyntax",18,465]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["ObjcNamePieceSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `ObjcNameSyntax` with that element appended to the end."},{"p":["ObjcNameSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["ObjcNameSyntax",18,465]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["ObjcNamePieceSyntax",18],[") -> ",17],["ObjcNameSyntax",18]],"d":"Creates a new `ObjcNameSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `ObjcNameSyntax` with the new element at the provided index."},{"p":["SomeTypeSyntax","withSomeSpecifier(_:)"],"f":[["func",12],[" ",17],["withSomeSpecifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["SomeTypeSyntax",18,467]],"s":[["func",12],[" ",17],["withSomeSpecifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["SomeTypeSyntax",18]],"d":"Returns a copy of the receiver with its `someSpecifier` replaced.\n- param newChild: The new `someSpecifier` to replace the node's\n                  current `someSpecifier`, if present."},{"p":["SomeTypeSyntax","withBaseType(_:)"],"f":[["func",12],[" ",17],["withBaseType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["SomeTypeSyntax",18,467]],"s":[["func",12],[" ",17],["withBaseType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["SomeTypeSyntax",18]],"d":"Returns a copy of the receiver with its `baseType` replaced.\n- param newChild: The new `baseType` to replace the node's\n                  current `baseType`, if present."},{"p":["SomeTypeSyntaxBuilder","useSomeSpecifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSomeSpecifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useSomeSpecifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["SomeTypeSyntaxBuilder","useBaseType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBaseType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useBaseType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["TypeExprSyntax","withType(_:)"],"f":[["func",12],[" ",17],["withType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["TypeExprSyntax",18,469]],"s":[["func",12],[" ",17],["withType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["TypeExprSyntax",18]],"d":"Returns a copy of the receiver with its `type` replaced.\n- param newChild: The new `type` to replace the node's\n                  current `type`, if present."},{"p":["TypeExprSyntaxBuilder","useType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ArrayExprSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["ArrayExprSyntax",18,471]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["ArrayElementSyntax",18],[") -> ",17],["ArrayExprSyntax",18]],"d":"Adds the provided `Element` to the node's `elements`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elements` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elements` collection."},{"p":["ArrayExprSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ArrayElementListSyntax",18,202],["?) -> ",17],["ArrayExprSyntax",18,471]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["ArrayElementListSyntax",18],["?) -> ",17],["ArrayExprSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["ArrayExprSyntax","withLeftSquare(_:)"],"f":[["func",12],[" ",17],["withLeftSquare",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ArrayExprSyntax",18,471]],"s":[["func",12],[" ",17],["withLeftSquare",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrayExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftSquare` replaced.\n- param newChild: The new `leftSquare` to replace the node's\n                  current `leftSquare`, if present."},{"p":["ArrayExprSyntax","withRightSquare(_:)"],"f":[["func",12],[" ",17],["withRightSquare",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ArrayExprSyntax",18,471]],"s":[["func",12],[" ",17],["withRightSquare",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrayExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightSquare` replaced.\n- param newChild: The new `rightSquare` to replace the node's\n                  current `rightSquare`, if present."},{"p":["ArrayExprSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ArrayElementSyntax",18,57],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["ArrayElementSyntax",18],[")",17]]},{"p":["ArrayExprSyntaxBuilder","useLeftSquare(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftSquare",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftSquare",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ArrayExprSyntaxBuilder","useRightSquare(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightSquare",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightSquare",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ArrayTypeSyntax","withElementType(_:)"],"f":[["func",12],[" ",17],["withElementType",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeSyntax",18,443],["?) -> ",17],["ArrayTypeSyntax",18,473]],"s":[["func",12],[" ",17],["withElementType",7],["(",17],["TypeSyntax",18],["?) -> ",17],["ArrayTypeSyntax",18]],"d":"Returns a copy of the receiver with its `elementType` replaced.\n- param newChild: The new `elementType` to replace the node's\n                  current `elementType`, if present."},{"p":["ArrayTypeSyntax","withLeftSquareBracket(_:)"],"f":[["func",12],[" ",17],["withLeftSquareBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ArrayTypeSyntax",18,473]],"s":[["func",12],[" ",17],["withLeftSquareBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrayTypeSyntax",18]],"d":"Returns a copy of the receiver with its `leftSquareBracket` replaced.\n- param newChild: The new `leftSquareBracket` to replace the node's\n                  current `leftSquareBracket`, if present."},{"p":["ArrayTypeSyntax","withRightSquareBracket(_:)"],"f":[["func",12],[" ",17],["withRightSquareBracket",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ArrayTypeSyntax",18,473]],"s":[["func",12],[" ",17],["withRightSquareBracket",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrayTypeSyntax",18]],"d":"Returns a copy of the receiver with its `rightSquareBracket` replaced.\n- param newChild: The new `rightSquareBracket` to replace the node's\n                  current `rightSquareBracket`, if present."},{"p":["ArrayTypeSyntaxBuilder","useElementType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useElementType",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeSyntax",18,443],[")",17]],"s":[["func",12],[" ",17],["useElementType",7],["(",17],["TypeSyntax",18],[")",17]]},{"p":["ArrayTypeSyntaxBuilder","useLeftSquareBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftSquareBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftSquareBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ArrayTypeSyntaxBuilder","useRightSquareBracket(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightSquareBracket",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightSquareBracket",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ArrowExprSyntax","withArrowToken(_:)"],"f":[["func",12],[" ",17],["withArrowToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ArrowExprSyntax",18,475]],"s":[["func",12],[" ",17],["withArrowToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrowExprSyntax",18]],"d":"Returns a copy of the receiver with its `arrowToken` replaced.\n- param newChild: The new `arrowToken` to replace the node's\n                  current `arrowToken`, if present."},{"p":["ArrowExprSyntax","withThrowsToken(_:)"],"f":[["func",12],[" ",17],["withThrowsToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ArrowExprSyntax",18,475]],"s":[["func",12],[" ",17],["withThrowsToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrowExprSyntax",18]],"d":"Returns a copy of the receiver with its `throwsToken` replaced.\n- param newChild: The new `throwsToken` to replace the node's\n                  current `throwsToken`, if present."},{"p":["ArrowExprSyntax","withAsyncKeyword(_:)"],"f":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ArrowExprSyntax",18,475]],"s":[["func",12],[" ",17],["withAsyncKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ArrowExprSyntax",18]],"d":"Returns a copy of the receiver with its `asyncKeyword` replaced.\n- param newChild: The new `asyncKeyword` to replace the node's\n                  current `asyncKeyword`, if present."},{"p":["ArrowExprSyntaxBuilder","useArrowToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArrowToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useArrowToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ArrowExprSyntaxBuilder","useThrowsToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowsToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useThrowsToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ArrowExprSyntaxBuilder","useAsyncKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAsyncKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AttributeSyntax","withAttributeName(_:)"],"f":[["func",12],[" ",17],["withAttributeName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AttributeSyntax",18,477]],"s":[["func",12],[" ",17],["withAttributeName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AttributeSyntax",18]],"d":"Returns a copy of the receiver with its `attributeName` replaced.\n- param newChild: The new `attributeName` to replace the node's\n                  current `attributeName`, if present."},{"p":["AttributeSyntax","withArgument(_:)"],"f":[["func",12],[" ",17],["withArgument",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["AttributeSyntax",18,477]],"s":[["func",12],[" ",17],["withArgument",7],["(",17],["Syntax",18],["?) -> ",17],["AttributeSyntax",18]],"d":"Returns a copy of the receiver with its `argument` replaced.\n- param newChild: The new `argument` to replace the node's\n                  current `argument`, if present."},{"p":["AttributeSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AttributeSyntax",18,477]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AttributeSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["AttributeSyntax","withTokenList(_:)"],"f":[["func",12],[" ",17],["withTokenList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenListSyntax",18,501],["?) -> ",17],["AttributeSyntax",18,477]],"s":[["func",12],[" ",17],["withTokenList",7],["(",17],["TokenListSyntax",18],["?) -> ",17],["AttributeSyntax",18]],"d":"Returns a copy of the receiver with its `tokenList` replaced.\n- param newChild: The new `tokenList` to replace the node's\n                  current `tokenList`, if present."},{"p":["AttributeSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AttributeSyntax",18,477]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AttributeSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["AttributeSyntax","withAtSignToken(_:)"],"f":[["func",12],[" ",17],["withAtSignToken",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AttributeSyntax",18,477]],"s":[["func",12],[" ",17],["withAtSignToken",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AttributeSyntax",18]],"d":"Returns a copy of the receiver with its `atSignToken` replaced.\n- param newChild: The new `atSignToken` to replace the node's\n                  current `atSignToken`, if present."},{"p":["AttributeSyntax","addToken(_:)"],"f":[["func",12],[" ",17],["addToken",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["AttributeSyntax",18,477]],"s":[["func",12],[" ",17],["addToken",7],["(",17],["TokenSyntax",18],[") -> ",17],["AttributeSyntax",18]],"d":"Adds the provided `Token` to the node's `tokenList`\ncollection.\n- param element: The new `Token` to add to the node's\n                 `tokenList` collection.\n- returns: A copy of the receiver with the provided `Token`\n           appended to its `tokenList` collection."},{"p":["AttributeSyntaxBuilder","useAttributeName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAttributeName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAttributeName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AttributeSyntaxBuilder","useArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useArgument",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useArgument",7],["(",17],["Syntax",18],[")",17]]},{"p":["AttributeSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AttributeSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AttributeSyntaxBuilder","useAtSignToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAtSignToken",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAtSignToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AttributeSyntaxBuilder","addToken(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addToken",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["addToken",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AwaitExprSyntax","withAwaitKeyword(_:)"],"f":[["func",12],[" ",17],["withAwaitKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["AwaitExprSyntax",18,479]],"s":[["func",12],[" ",17],["withAwaitKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["AwaitExprSyntax",18]],"d":"Returns a copy of the receiver with its `awaitKeyword` replaced.\n- param newChild: The new `awaitKeyword` to replace the node's\n                  current `awaitKeyword`, if present."},{"p":["AwaitExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["AwaitExprSyntax",18,479]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["AwaitExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["AwaitExprSyntaxBuilder","useAwaitKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAwaitKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAwaitKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["AwaitExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["BreakStmtSyntax","withBreakKeyword(_:)"],"f":[["func",12],[" ",17],["withBreakKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["BreakStmtSyntax",18,481]],"s":[["func",12],[" ",17],["withBreakKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["BreakStmtSyntax",18]],"d":"Returns a copy of the receiver with its `breakKeyword` replaced.\n- param newChild: The new `breakKeyword` to replace the node's\n                  current `breakKeyword`, if present."},{"p":["BreakStmtSyntax","withLabel(_:)"],"f":[["func",12],[" ",17],["withLabel",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["BreakStmtSyntax",18,481]],"s":[["func",12],[" ",17],["withLabel",7],["(",17],["TokenSyntax",18],["?) -> ",17],["BreakStmtSyntax",18]],"d":"Returns a copy of the receiver with its `label` replaced.\n- param newChild: The new `label` to replace the node's\n                  current `label`, if present."},{"p":["BreakStmtSyntaxBuilder","useBreakKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBreakKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useBreakKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["BreakStmtSyntaxBuilder","useLabel(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabel",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabel",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CatchItemSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,453],["?) -> ",17],["CatchItemSyntax",18,483]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["CatchItemSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["CatchItemSyntax","withWhereClause(_:)"],"f":[["func",12],[" ",17],["withWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["WhereClauseSyntax",18,51],["?) -> ",17],["CatchItemSyntax",18,483]],"s":[["func",12],[" ",17],["withWhereClause",7],["(",17],["WhereClauseSyntax",18],["?) -> ",17],["CatchItemSyntax",18]],"d":"Returns a copy of the receiver with its `whereClause` replaced.\n- param newChild: The new `whereClause` to replace the node's\n                  current `whereClause`, if present."},{"p":["CatchItemSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CatchItemSyntax",18,483]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CatchItemSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present.","o":5128},{"p":["CatchItemSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["CatchItemSyntaxBuilder","useWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[")",17]],"s":[["func",12],[" ",17],["useWhereClause",7],["(",17],["WhereClauseSyntax",18],[")",17]]},{"p":["CatchItemSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClassDeclSyntax","withClassOrActorKeyword(_:)"],"f":[["func",12],[" ",17],["withClassOrActorKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClassDeclSyntax",18,485]],"s":[["func",12],[" ",17],["withClassOrActorKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `classOrActorKeyword` replaced.\n- param newChild: The new `classOrActorKeyword` to replace the node's\n                  current `classOrActorKeyword`, if present."},{"p":["ClassDeclSyntax","addModifier(_:)"],"f":[["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["ClassDeclSyntax",18,485]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["ClassDeclSyntax",18]],"d":"Adds the provided `Modifier` to the node's `modifiers`\ncollection.\n- param element: The new `Modifier` to add to the node's\n                 `modifiers` collection.\n- returns: A copy of the receiver with the provided `Modifier`\n           appended to its `modifiers` collection."},{"p":["ClassDeclSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclBlockSyntax",18,182],["?) -> ",17],["ClassDeclSyntax",18,485]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclBlockSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `members` replaced.\n- param newChild: The new `members` to replace the node's\n                  current `members`, if present.","o":6100},{"p":["ClassDeclSyntax","addAttribute(_:)"],"f":[["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["Syntax",18,513],[") -> ",17],["ClassDeclSyntax",18,485]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[") -> ",17],["ClassDeclSyntax",18]],"d":"Adds the provided `Attribute` to the node's `attributes`\ncollection.\n- param element: The new `Attribute` to add to the node's\n                 `attributes` collection.\n- returns: A copy of the receiver with the provided `Attribute`\n           appended to its `attributes` collection."},{"p":["ClassDeclSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["ClassDeclSyntax",18,485]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `modifiers` replaced.\n- param newChild: The new `modifiers` to replace the node's\n                  current `modifiers`, if present.","o":6101},{"p":["ClassDeclSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["ClassDeclSyntax",18,485]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `attributes` replaced.\n- param newChild: The new `attributes` to replace the node's\n                  current `attributes`, if present.","o":6102},{"p":["ClassDeclSyntax","withIdentifier(_:)"],"f":[["func",12],[" ",17],["withIdentifier",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ClassDeclSyntax",18,485]],"s":[["func",12],[" ",17],["withIdentifier",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `identifier` replaced.\n- param newChild: The new `identifier` to replace the node's\n                  current `identifier`, if present.","o":4573},{"p":["ClassDeclSyntax","withInheritanceClause(_:)"],"f":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],["?) -> ",17],["ClassDeclSyntax",18,485]],"s":[["func",12],[" ",17],["withInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `inheritanceClause` replaced.\n- param newChild: The new `inheritanceClause` to replace the node's\n                  current `inheritanceClause`, if present."},{"p":["ClassDeclSyntax","withGenericWhereClause(_:)"],"f":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericWhereClauseSyntax",18,286],["?) -> ",17],["ClassDeclSyntax",18,485]],"s":[["func",12],[" ",17],["withGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericWhereClause` replaced.\n- param newChild: The new `genericWhereClause` to replace the node's\n                  current `genericWhereClause`, if present."},{"p":["ClassDeclSyntax","withGenericParameterClause(_:)"],"f":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["GenericParameterClauseSyntax",18,378],["?) -> ",17],["ClassDeclSyntax",18,485]],"s":[["func",12],[" ",17],["withGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],["?) -> ",17],["ClassDeclSyntax",18]],"d":"Returns a copy of the receiver with its `genericParameterClause` replaced.\n- param newChild: The new `genericParameterClause` to replace the node's\n                  current `genericParameterClause`, if present."},{"p":["ClassDeclSyntaxBuilder","useClassOrActorKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useClassOrActorKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useClassOrActorKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","useMembers(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useMembers",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["useMembers",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","addModifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addModifier",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["addModifier",7],["(",17],["DeclModifierSyntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","addAttribute(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addAttribute",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["addAttribute",7],["(",17],["Syntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","useIdentifier(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useIdentifier",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useIdentifier",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","useInheritanceClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInheritanceClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],[")",17]],"s":[["func",12],[" ",17],["useInheritanceClause",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","useGenericWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["useGenericWhereClause",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]]},{"p":["ClassDeclSyntaxBuilder","useGenericParameterClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,378],[")",17]],"s":[["func",12],[" ",17],["useGenericParameterClause",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]]},{"p":["CodeBlockSyntax","addStatement(_:)"],"f":[["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["CodeBlockSyntax",18,487]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["CodeBlockSyntax",18]],"d":"Adds the provided `Statement` to the node's `statements`\ncollection.\n- param element: The new `Statement` to add to the node's\n                 `statements` collection.\n- returns: A copy of the receiver with the provided `Statement`\n           appended to its `statements` collection."},{"p":["CodeBlockSyntax","withLeftBrace(_:)"],"f":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CodeBlockSyntax",18,487]],"s":[["func",12],[" ",17],["withLeftBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CodeBlockSyntax",18]],"d":"Returns a copy of the receiver with its `leftBrace` replaced.\n- param newChild: The new `leftBrace` to replace the node's\n                  current `leftBrace`, if present.","o":5917},{"p":["CodeBlockSyntax","withRightBrace(_:)"],"f":[["func",12],[" ",17],["withRightBrace",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["CodeBlockSyntax",18,487]],"s":[["func",12],[" ",17],["withRightBrace",7],["(",17],["TokenSyntax",18],["?) -> ",17],["CodeBlockSyntax",18]],"d":"Returns a copy of the receiver with its `rightBrace` replaced.\n- param newChild: The new `rightBrace` to replace the node's\n                  current `rightBrace`, if present.","o":5918},{"p":["CodeBlockSyntax","withStatements(_:)"],"f":[["func",12],[" ",17],["withStatements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockItemListSyntax",18,238],["?) -> ",17],["CodeBlockSyntax",18,487]],"s":[["func",12],[" ",17],["withStatements",7],["(",17],["CodeBlockItemListSyntax",18],["?) -> ",17],["CodeBlockSyntax",18]],"d":"Returns a copy of the receiver with its `statements` replaced.\n- param newChild: The new `statements` to replace the node's\n                  current `statements`, if present.","o":4663},{"p":["CodeBlockSyntaxBuilder","addStatement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addStatement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["func",12],[" ",17],["addStatement",7],["(",17],["CodeBlockItemSyntax",18],[")",17]]},{"p":["CodeBlockSyntaxBuilder","useLeftBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["CodeBlockSyntaxBuilder","useRightBrace(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightBrace",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightBrace",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeclGroupSyntax","withMembers(_:)"],"f":[["func",12],[" ",17],["withMembers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["MemberDeclBlockSyntax",18,182],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withMembers",7],["(",17],["MemberDeclBlockSyntax",18],["?) -> ",17],["Self",18]]},{"p":["DeclGroupSyntax","withModifiers(_:)"],"f":[["func",12],[" ",17],["withModifiers",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ModifierListSyntax",18,77],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withModifiers",7],["(",17],["ModifierListSyntax",18],["?) -> ",17],["Self",18]]},{"p":["DeclGroupSyntax","withAttributes(_:)"],"f":[["func",12],[" ",17],["withAttributes",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["AttributeListSyntax",18,103],["?) -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withAttributes",7],["(",17],["AttributeListSyntax",18],["?) -> ",17],["Self",18]]},{"p":["DeferStmtSyntax","withDeferKeyword(_:)"],"f":[["func",12],[" ",17],["withDeferKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["DeferStmtSyntax",18,489]],"s":[["func",12],[" ",17],["withDeferKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["DeferStmtSyntax",18]],"d":"Returns a copy of the receiver with its `deferKeyword` replaced.\n- param newChild: The new `deferKeyword` to replace the node's\n                  current `deferKeyword`, if present."},{"p":["DeferStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["DeferStmtSyntax",18,489]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["DeferStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present.","o":4545},{"p":["DeferStmtSyntaxBuilder","useDeferKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useDeferKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useDeferKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["DeferStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["ElseBlockSyntax","withElseKeyword(_:)"],"f":[["func",12],[" ",17],["withElseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ElseBlockSyntax",18,491]],"s":[["func",12],[" ",17],["withElseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ElseBlockSyntax",18]],"d":"Returns a copy of the receiver with its `elseKeyword` replaced.\n- param newChild: The new `elseKeyword` to replace the node's\n                  current `elseKeyword`, if present."},{"p":["ElseBlockSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["ElseBlockSyntax",18,491]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["ElseBlockSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present.","o":4545},{"p":["ElseBlockSyntaxBuilder","useElseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useElseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useElseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ElseBlockSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["ForInStmtSyntax","withForKeyword(_:)"],"f":[["func",12],[" ",17],["withForKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ForInStmtSyntax",18,493]],"s":[["func",12],[" ",17],["withForKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `forKeyword` replaced.\n- param newChild: The new `forKeyword` to replace the node's\n                  current `forKeyword`, if present."},{"p":["ForInStmtSyntax","withInKeyword(_:)"],"f":[["func",12],[" ",17],["withInKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ForInStmtSyntax",18,493]],"s":[["func",12],[" ",17],["withInKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `inKeyword` replaced.\n- param newChild: The new `inKeyword` to replace the node's\n                  current `inKeyword`, if present."},{"p":["ForInStmtSyntax","withPattern(_:)"],"f":[["func",12],[" ",17],["withPattern",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["PatternSyntax",18,453],["?) -> ",17],["ForInStmtSyntax",18,493]],"s":[["func",12],[" ",17],["withPattern",7],["(",17],["PatternSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `pattern` replaced.\n- param newChild: The new `pattern` to replace the node's\n                  current `pattern`, if present."},{"p":["ForInStmtSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ForInStmtSyntax",18,493]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present.","o":5949},{"p":["ForInStmtSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ForInStmtSyntax",18,493]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present.","o":5950},{"p":["ForInStmtSyntax","withTryKeyword(_:)"],"f":[["func",12],[" ",17],["withTryKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ForInStmtSyntax",18,493]],"s":[["func",12],[" ",17],["withTryKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `tryKeyword` replaced.\n- param newChild: The new `tryKeyword` to replace the node's\n                  current `tryKeyword`, if present."},{"p":["ForInStmtSyntax","withCaseKeyword(_:)"],"f":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ForInStmtSyntax",18,493]],"s":[["func",12],[" ",17],["withCaseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `caseKeyword` replaced.\n- param newChild: The new `caseKeyword` to replace the node's\n                  current `caseKeyword`, if present."},{"p":["ForInStmtSyntax","withWhereClause(_:)"],"f":[["func",12],[" ",17],["withWhereClause",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["WhereClauseSyntax",18,51],["?) -> ",17],["ForInStmtSyntax",18,493]],"s":[["func",12],[" ",17],["withWhereClause",7],["(",17],["WhereClauseSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `whereClause` replaced.\n- param newChild: The new `whereClause` to replace the node's\n                  current `whereClause`, if present."},{"p":["ForInStmtSyntax","withAwaitKeyword(_:)"],"f":[["func",12],[" ",17],["withAwaitKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ForInStmtSyntax",18,493]],"s":[["func",12],[" ",17],["withAwaitKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `awaitKeyword` replaced.\n- param newChild: The new `awaitKeyword` to replace the node's\n                  current `awaitKeyword`, if present."},{"p":["ForInStmtSyntax","withSequenceExpr(_:)"],"f":[["func",12],[" ",17],["withSequenceExpr",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["ForInStmtSyntax",18,493]],"s":[["func",12],[" ",17],["withSequenceExpr",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `sequenceExpr` replaced.\n- param newChild: The new `sequenceExpr` to replace the node's\n                  current `sequenceExpr`, if present."},{"p":["ForInStmtSyntax","withTypeAnnotation(_:)"],"f":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TypeAnnotationSyntax",18,157],["?) -> ",17],["ForInStmtSyntax",18,493]],"s":[["func",12],[" ",17],["withTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `typeAnnotation` replaced.\n- param newChild: The new `typeAnnotation` to replace the node's\n                  current `typeAnnotation`, if present."},{"p":["ForInStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["ForInStmtSyntax",18,493]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["ForInStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present.","o":4545},{"p":["ForInStmtSyntaxBuilder","useForKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useForKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useForKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useInKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useInKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useInKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","usePattern(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["usePattern",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternSyntax",18,453],[")",17]],"s":[["func",12],[" ",17],["usePattern",7],["(",17],["PatternSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useTryKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTryKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTryKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useCaseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useCaseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useCaseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useWhereClause(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhereClause",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[")",17]],"s":[["func",12],[" ",17],["useWhereClause",7],["(",17],["WhereClauseSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useAwaitKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAwaitKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAwaitKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useSequenceExpr(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useSequenceExpr",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useSequenceExpr",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useTypeAnnotation(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["useTypeAnnotation",7],["(",17],["TypeAnnotationSyntax",18],[")",17]]},{"p":["ForInStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["GuardStmtSyntax","withGuardKeyword(_:)"],"f":[["func",12],[" ",17],["withGuardKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GuardStmtSyntax",18,495]],"s":[["func",12],[" ",17],["withGuardKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GuardStmtSyntax",18]],"d":"Returns a copy of the receiver with its `guardKeyword` replaced.\n- param newChild: The new `guardKeyword` to replace the node's\n                  current `guardKeyword`, if present."},{"p":["GuardStmtSyntax","addCondition(_:)"],"f":[["func",12],[" ",17],["addCondition",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["GuardStmtSyntax",18,495]],"s":[["func",12],[" ",17],["addCondition",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["GuardStmtSyntax",18]],"d":"Adds the provided `Condition` to the node's `conditions`\ncollection.\n- param element: The new `Condition` to add to the node's\n                 `conditions` collection.\n- returns: A copy of the receiver with the provided `Condition`\n           appended to its `conditions` collection."},{"p":["GuardStmtSyntax","withConditions(_:)"],"f":[["func",12],[" ",17],["withConditions",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ConditionElementListSyntax",18,330],["?) -> ",17],["GuardStmtSyntax",18,495]],"s":[["func",12],[" ",17],["withConditions",7],["(",17],["ConditionElementListSyntax",18],["?) -> ",17],["GuardStmtSyntax",18]],"d":"Returns a copy of the receiver with its `conditions` replaced.\n- param newChild: The new `conditions` to replace the node's\n                  current `conditions`, if present."},{"p":["GuardStmtSyntax","withElseKeyword(_:)"],"f":[["func",12],[" ",17],["withElseKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["GuardStmtSyntax",18,495]],"s":[["func",12],[" ",17],["withElseKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["GuardStmtSyntax",18]],"d":"Returns a copy of the receiver with its `elseKeyword` replaced.\n- param newChild: The new `elseKeyword` to replace the node's\n                  current `elseKeyword`, if present."},{"p":["GuardStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["GuardStmtSyntax",18,495]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["GuardStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present.","o":4545},{"p":["GuardStmtSyntaxBuilder","useGuardKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useGuardKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useGuardKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GuardStmtSyntaxBuilder","addCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCondition",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ConditionElementSyntax",18,208],[")",17]],"s":[["func",12],[" ",17],["addCondition",7],["(",17],["ConditionElementSyntax",18],[")",17]]},{"p":["GuardStmtSyntaxBuilder","useElseKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useElseKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useElseKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["GuardStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["InOutExprSyntax","withAmpersand(_:)"],"f":[["func",12],[" ",17],["withAmpersand",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["InOutExprSyntax",18,497]],"s":[["func",12],[" ",17],["withAmpersand",7],["(",17],["TokenSyntax",18],["?) -> ",17],["InOutExprSyntax",18]],"d":"Returns a copy of the receiver with its `ampersand` replaced.\n- param newChild: The new `ampersand` to replace the node's\n                  current `ampersand`, if present."},{"p":["InOutExprSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["InOutExprSyntax",18,497]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["InOutExprSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["InOutExprSyntaxBuilder","useAmpersand(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useAmpersand",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useAmpersand",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["InOutExprSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["ThrowStmtSyntax","withThrowKeyword(_:)"],"f":[["func",12],[" ",17],["withThrowKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["ThrowStmtSyntax",18,499]],"s":[["func",12],[" ",17],["withThrowKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["ThrowStmtSyntax",18]],"d":"Returns a copy of the receiver with its `throwKeyword` replaced.\n- param newChild: The new `throwKeyword` to replace the node's\n                  current `throwKeyword`, if present."},{"p":["ThrowStmtSyntax","withExpression(_:)"],"f":[["func",12],[" ",17],["withExpression",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprSyntax",18,441],["?) -> ",17],["ThrowStmtSyntax",18,499]],"s":[["func",12],[" ",17],["withExpression",7],["(",17],["ExprSyntax",18],["?) -> ",17],["ThrowStmtSyntax",18]],"d":"Returns a copy of the receiver with its `expression` replaced.\n- param newChild: The new `expression` to replace the node's\n                  current `expression`, if present."},{"p":["ThrowStmtSyntaxBuilder","useThrowKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useThrowKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useThrowKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["ThrowStmtSyntaxBuilder","useExpression(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useExpression",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["useExpression",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["TokenListSyntax","prepending(_:)"],"f":[["func",12],[" ",17],["prepending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["TokenListSyntax",18,501]],"s":[["func",12],[" ",17],["prepending",7],["(",17],["TokenSyntax",18],[") -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by prepending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to prepend.\n- Returns: A new `TokenListSyntax` with that element prepended to the\n           beginning."},{"p":["TokenListSyntax","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TokenListSyntax",18,501],[".",17],["Iterator",18,502]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TokenListSyntax",18],[".",17],["Iterator",18]],"o":7660},{"p":["TokenListSyntax","removingLast()"],"f":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TokenListSyntax",18,501]],"s":[["func",12],[" ",17],["removingLast",7],["() -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by removing the last element.\n\n- Returns: A new `TokenListSyntax` with the last element removed."},{"p":["TokenListSyntax","removingFirst()"],"f":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TokenListSyntax",18,501]],"s":[["func",12],[" ",17],["removingFirst",7],["() -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by removing the first element.\n\n- Returns: A new `TokenListSyntax` with the first element removed."},{"p":["TokenListSyntax","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TokenListSyntax",18,501]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["TokenListSyntax",18]],"d":"Returns a new `TokenListSyntax` with all trivia removed."},{"p":["TokenListSyntax","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["TokenListSyntax",18,501]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TokenListSyntax",18]],"d":"Returns a new `TokenListSyntax` with its leading trivia replaced\nby the provided trivia."},{"p":["TokenListSyntax","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["TokenListSyntax",18,501]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["TokenListSyntax",18]],"d":"Returns a new `TokenListSyntax` with its trailing trivia replaced\nby the provided trivia."},{"p":["TokenListSyntax","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TokenListSyntax",18,501]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["TokenListSyntax",18]],"d":"Returns a new `TokenListSyntax` with its leading trivia removed."},{"p":["TokenListSyntax","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TokenListSyntax",18,501]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["TokenListSyntax",18]],"d":"Returns a new `TokenListSyntax` with its trailing trivia removed."},{"p":["TokenListSyntax","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["TokenListSyntax","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["TokenListSyntax","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18,444],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18],["?",17]],"o":7760},{"p":["TokenListSyntax","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["SyntaxChildrenIndex",18],[", ",17],["to",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Int",18]],"o":7627},{"p":["TokenListSyntax","removing(childAt:)"],"f":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["TokenListSyntax",18,501]],"s":[["func",12],[" ",17],["removing",7],["(",17],["childAt",1],[": ",17],["Int",18],[") -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by removing the syntax element at the\nprovided index.\n\n- Parameter index: The index of the element to remove from the collection.\n- Returns: A new `TokenListSyntax` with the element at the provided index\n           removed."},{"p":["TokenListSyntax","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["TokenListSyntax",18,501]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TokenSyntax",18],[") -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by appending the provided syntax element\nto the children.\n\n- Parameter syntax: The element to append.\n- Returns: A new `TokenListSyntax` with that element appended to the end."},{"p":["TokenListSyntax","inserting(_:at:)"],"f":[["func",12],[" ",17],["inserting",7],["(",17],["_",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,444],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[") -> ",17],["TokenListSyntax",18,501]],"s":[["func",12],[" ",17],["inserting",7],["(",17],["TokenSyntax",18],[", ",17],["at",1],[": ",17],["Int",18],[") -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by inserting the provided syntax element\nat the provided index in the children.\n\n- Parameters:\n  - syntax: The element to insert.\n  - index: The index at which to insert the element in the collection.\n\n- Returns: A new `TokenListSyntax` with that element appended to the end."},{"p":["TokenListSyntax","replacing(childAt:with:)"],"f":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[" ",17],["index",2],[": ",17],["Int",18,7706],[", ",17],["with",1],[" ",17],["syntax",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["TokenListSyntax",18,501]],"s":[["func",12],[" ",17],["replacing",7],["(",17],["childAt",1],[": ",17],["Int",18],[", ",17],["with",1],[": ",17],["TokenSyntax",18],[") -> ",17],["TokenListSyntax",18]],"d":"Creates a new `TokenListSyntax` by replacing the syntax element\nat the provided index.\n\n- Parameters:\n  - index: The index at which to replace the element in the collection.\n  - syntax: The element to replace with.\n\n- Returns: A new `TokenListSyntax` with the new element at the provided index."},{"p":["TupleExprSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["TupleExprSyntax",18,503]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["TupleExprSyntax",18]],"d":"Adds the provided `Element` to the node's `elementList`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elementList` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elementList` collection."},{"p":["TupleExprSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleExprSyntax",18,503]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleExprSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["TupleExprSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleExprSyntax",18,503]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleExprSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["TupleExprSyntax","withElementList(_:)"],"f":[["func",12],[" ",17],["withElementList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleExprElementListSyntax",18,342],["?) -> ",17],["TupleExprSyntax",18,503]],"s":[["func",12],[" ",17],["withElementList",7],["(",17],["TupleExprElementListSyntax",18],["?) -> ",17],["TupleExprSyntax",18]],"d":"Returns a copy of the receiver with its `elementList` replaced.\n- param newChild: The new `elementList` to replace the node's\n                  current `elementList`, if present."},{"p":["TupleExprSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["TupleExprElementSyntax",18],[")",17]]},{"p":["TupleExprSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleExprSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["TupleTypeSyntax",18,505]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["TupleTypeSyntax",18]],"d":"Adds the provided `Element` to the node's `elements`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elements` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elements` collection."},{"p":["TupleTypeSyntax","withElements(_:)"],"f":[["func",12],[" ",17],["withElements",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TupleTypeElementListSyntax",18,344],["?) -> ",17],["TupleTypeSyntax",18,505]],"s":[["func",12],[" ",17],["withElements",7],["(",17],["TupleTypeElementListSyntax",18],["?) -> ",17],["TupleTypeSyntax",18]],"d":"Returns a copy of the receiver with its `elements` replaced.\n- param newChild: The new `elements` to replace the node's\n                  current `elements`, if present."},{"p":["TupleTypeSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleTypeSyntax",18,505]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present.","o":4489},{"p":["TupleTypeSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["TupleTypeSyntax",18,505]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["TupleTypeSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present.","o":4490},{"p":["TupleTypeSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["TupleTypeElementSyntax",18,232],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["TupleTypeElementSyntax",18],[")",17]]},{"p":["TupleTypeSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["TupleTypeSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WhileStmtSyntax","withWhileKeyword(_:)"],"f":[["func",12],[" ",17],["withWhileKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["WhileStmtSyntax",18,507]],"s":[["func",12],[" ",17],["withWhileKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["WhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `whileKeyword` replaced.\n- param newChild: The new `whileKeyword` to replace the node's\n                  current `whileKeyword`, if present."},{"p":["WhileStmtSyntax","addCondition(_:)"],"f":[["func",12],[" ",17],["addCondition",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["WhileStmtSyntax",18,507]],"s":[["func",12],[" ",17],["addCondition",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["WhileStmtSyntax",18]],"d":"Adds the provided `Condition` to the node's `conditions`\ncollection.\n- param element: The new `Condition` to add to the node's\n                 `conditions` collection.\n- returns: A copy of the receiver with the provided `Condition`\n           appended to its `conditions` collection."},{"p":["WhileStmtSyntax","withLabelName(_:)"],"f":[["func",12],[" ",17],["withLabelName",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["WhileStmtSyntax",18,507]],"s":[["func",12],[" ",17],["withLabelName",7],["(",17],["TokenSyntax",18],["?) -> ",17],["WhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelName` replaced.\n- param newChild: The new `labelName` to replace the node's\n                  current `labelName`, if present.","o":5949},{"p":["WhileStmtSyntax","withConditions(_:)"],"f":[["func",12],[" ",17],["withConditions",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ConditionElementListSyntax",18,330],["?) -> ",17],["WhileStmtSyntax",18,507]],"s":[["func",12],[" ",17],["withConditions",7],["(",17],["ConditionElementListSyntax",18],["?) -> ",17],["WhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `conditions` replaced.\n- param newChild: The new `conditions` to replace the node's\n                  current `conditions`, if present."},{"p":["WhileStmtSyntax","withLabelColon(_:)"],"f":[["func",12],[" ",17],["withLabelColon",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["WhileStmtSyntax",18,507]],"s":[["func",12],[" ",17],["withLabelColon",7],["(",17],["TokenSyntax",18],["?) -> ",17],["WhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `labelColon` replaced.\n- param newChild: The new `labelColon` to replace the node's\n                  current `labelColon`, if present.","o":5950},{"p":["WhileStmtSyntax","withBody(_:)"],"f":[["func",12],[" ",17],["withBody",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["CodeBlockSyntax",18,487],["?) -> ",17],["WhileStmtSyntax",18,507]],"s":[["func",12],[" ",17],["withBody",7],["(",17],["CodeBlockSyntax",18],["?) -> ",17],["WhileStmtSyntax",18]],"d":"Returns a copy of the receiver with its `body` replaced.\n- param newChild: The new `body` to replace the node's\n                  current `body`, if present.","o":4545},{"p":["WhileStmtSyntaxBuilder","useWhileKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useWhileKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useWhileKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WhileStmtSyntaxBuilder","addCondition(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addCondition",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ConditionElementSyntax",18,208],[")",17]],"s":[["func",12],[" ",17],["addCondition",7],["(",17],["ConditionElementSyntax",18],[")",17]]},{"p":["WhileStmtSyntaxBuilder","useLabelName(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelName",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelName",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WhileStmtSyntaxBuilder","useLabelColon(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLabelColon",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLabelColon",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["WhileStmtSyntaxBuilder","useBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useBody",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["useBody",7],["(",17],["CodeBlockSyntax",18],[")",17]]},{"p":["YieldListSyntax","withElementList(_:)"],"f":[["func",12],[" ",17],["withElementList",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["ExprListSyntax",18,463],["?) -> ",17],["YieldListSyntax",18,509]],"s":[["func",12],[" ",17],["withElementList",7],["(",17],["ExprListSyntax",18],["?) -> ",17],["YieldListSyntax",18]],"d":"Returns a copy of the receiver with its `elementList` replaced.\n- param newChild: The new `elementList` to replace the node's\n                  current `elementList`, if present."},{"p":["YieldListSyntax","addElement(_:)"],"f":[["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["element",2],[": ",17],["ExprSyntax",18,441],[") -> ",17],["YieldListSyntax",18,509]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["ExprSyntax",18],[") -> ",17],["YieldListSyntax",18]],"d":"Adds the provided `Element` to the node's `elementList`\ncollection.\n- param element: The new `Element` to add to the node's\n                 `elementList` collection.\n- returns: A copy of the receiver with the provided `Element`\n           appended to its `elementList` collection."},{"p":["YieldListSyntax","withLeftParen(_:)"],"f":[["func",12],[" ",17],["withLeftParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["YieldListSyntax",18,509]],"s":[["func",12],[" ",17],["withLeftParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["YieldListSyntax",18]],"d":"Returns a copy of the receiver with its `leftParen` replaced.\n- param newChild: The new `leftParen` to replace the node's\n                  current `leftParen`, if present."},{"p":["YieldListSyntax","withRightParen(_:)"],"f":[["func",12],[" ",17],["withRightParen",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["YieldListSyntax",18,509]],"s":[["func",12],[" ",17],["withRightParen",7],["(",17],["TokenSyntax",18],["?) -> ",17],["YieldListSyntax",18]],"d":"Returns a copy of the receiver with its `rightParen` replaced.\n- param newChild: The new `rightParen` to replace the node's\n                  current `rightParen`, if present."},{"p":["YieldListSyntax","withTrailingComma(_:)"],"f":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["YieldListSyntax",18,509]],"s":[["func",12],[" ",17],["withTrailingComma",7],["(",17],["TokenSyntax",18],["?) -> ",17],["YieldListSyntax",18]],"d":"Returns a copy of the receiver with its `trailingComma` replaced.\n- param newChild: The new `trailingComma` to replace the node's\n                  current `trailingComma`, if present."},{"p":["YieldListSyntaxBuilder","addElement(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addElement",7],["(",17],["_",1],[" ",17],["elt",2],[": ",17],["ExprSyntax",18,441],[")",17]],"s":[["func",12],[" ",17],["addElement",7],["(",17],["ExprSyntax",18],[")",17]]},{"p":["YieldListSyntaxBuilder","useLeftParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useLeftParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useLeftParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["YieldListSyntaxBuilder","useRightParen(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useRightParen",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useRightParen",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["YieldListSyntaxBuilder","useTrailingComma(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useTrailingComma",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useTrailingComma",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["YieldStmtSyntax","withYieldKeyword(_:)"],"f":[["func",12],[" ",17],["withYieldKeyword",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["TokenSyntax",18,444],["?) -> ",17],["YieldStmtSyntax",18,511]],"s":[["func",12],[" ",17],["withYieldKeyword",7],["(",17],["TokenSyntax",18],["?) -> ",17],["YieldStmtSyntax",18]],"d":"Returns a copy of the receiver with its `yieldKeyword` replaced.\n- param newChild: The new `yieldKeyword` to replace the node's\n                  current `yieldKeyword`, if present."},{"p":["YieldStmtSyntax","withYields(_:)"],"f":[["func",12],[" ",17],["withYields",7],["(",17],["_",1],[" ",17],["newChild",2],[": ",17],["Syntax",18,513],["?) -> ",17],["YieldStmtSyntax",18,511]],"s":[["func",12],[" ",17],["withYields",7],["(",17],["Syntax",18],["?) -> ",17],["YieldStmtSyntax",18]],"d":"Returns a copy of the receiver with its `yields` replaced.\n- param newChild: The new `yields` to replace the node's\n                  current `yields`, if present."},{"p":["YieldStmtSyntaxBuilder","useYieldKeyword(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useYieldKeyword",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["useYieldKeyword",7],["(",17],["TokenSyntax",18],[")",17]]},{"p":["YieldStmtSyntaxBuilder","useYields(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["useYields",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["useYields",7],["(",17],["Syntax",18],[")",17]]},{"p":["Syntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["DeclSyntaxProtocol",18,5],[".Protocol) -> ",17],["DeclSyntaxProtocol",18,5],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["DeclSyntaxProtocol",18],[".Protocol) -> ",17],["DeclSyntaxProtocol",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \nDeclSyntaxProtocol. Otherwise return nil.\nNote that this will incur an existential conversion."},{"p":["Syntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["ExprSyntaxProtocol",18,6],[".Protocol) -> ",17],["ExprSyntaxProtocol",18,6],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["ExprSyntaxProtocol",18],[".Protocol) -> ",17],["ExprSyntaxProtocol",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \nExprSyntaxProtocol. Otherwise return nil.\nNote that this will incur an existential conversion."},{"p":["Syntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["StmtSyntaxProtocol",18,7],[".Protocol) -> ",17],["StmtSyntaxProtocol",18,7],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["StmtSyntaxProtocol",18],[".Protocol) -> ",17],["StmtSyntaxProtocol",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \nStmtSyntaxProtocol. Otherwise return nil.\nNote that this will incur an existential conversion."},{"p":["Syntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["TypeSyntaxProtocol",18,8],[".Protocol) -> ",17],["TypeSyntaxProtocol",18,8],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["TypeSyntaxProtocol",18],[".Protocol) -> ",17],["TypeSyntaxProtocol",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \nTypeSyntaxProtocol. Otherwise return nil.\nNote that this will incur an existential conversion."},{"p":["Syntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["PatternSyntaxProtocol",18,11],[".Protocol) -> ",17],["PatternSyntaxProtocol",18,11],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["PatternSyntaxProtocol",18],[".Protocol) -> ",17],["PatternSyntaxProtocol",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \nPatternSyntaxProtocol. Otherwise return nil.\nNote that this will incur an existential conversion."},{"p":["Syntax","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["SyntaxProtocol",18,15],[".Protocol) -> ",17],["SyntaxProtocol",18,15]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["SyntaxProtocol",18],[".Protocol) -> ",17],["SyntaxProtocol",18]],"d":"Return the non-type erased version of this syntax node.\nNote that this will incur an existential conversion."},{"p":["Syntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["DeclSyntaxProtocol",18,5],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["DeclSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \nDeclSyntaxProtocol. \nNote that this will incur an existential conversion."},{"p":["Syntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["ExprSyntaxProtocol",18,6],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["ExprSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \nExprSyntaxProtocol. \nNote that this will incur an existential conversion."},{"p":["Syntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["StmtSyntaxProtocol",18,7],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["StmtSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \nStmtSyntaxProtocol. \nNote that this will incur an existential conversion."},{"p":["Syntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["TypeSyntaxProtocol",18,8],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["TypeSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \nTypeSyntaxProtocol. \nNote that this will incur an existential conversion."},{"p":["Syntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["PatternSyntaxProtocol",18,11],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["PatternSyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \nPatternSyntaxProtocol. \nNote that this will incur an existential conversion."},{"p":["Syntax","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["SyntaxProtocol",18,15],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["SyntaxProtocol",18],[".Protocol) -> ",17],["Bool",18]],"a":{"a":{"d":true,"m":"Expression always evaluates to true"}},"d":"Syntax nodes always conform to SyntaxProtocol. This API is just added\nfor consistency.\nNote that this will incur an existential conversion."},{"p":["Syntax","endLocation(converter:afterTrailingTrivia:)"],"f":[["func",12],[" ",17],["endLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18,539],[", ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18,7703],[" = false) -> ",17],["SourceLocation",18,527]],"s":[["func",12],[" ",17],["endLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18],[", ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18],[") -> ",17],["SourceLocation",18]],"d":"The ending location, in the provided file, of this Syntax node.\n- Parameters:\n  - converter: The `SourceLocationConverter` that was previously\n    initialized using the root tree of this node.\n  - afterTrailingTrivia: Whether to skip trailing trivia when getting\n                         the node's location. Defaults to `false`."},{"p":["Syntax","sourceRange(converter:afterLeadingTrivia:afterTrailingTrivia:)"],"f":[["func",12],[" ",17],["sourceRange",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18,539],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18,7703],[" = true, ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18,7703],[" = false) -> ",17],["SourceRange",18,523]],"s":[["func",12],[" ",17],["sourceRange",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18],[", ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18],[") -> ",17],["SourceRange",18]],"d":"The source range, in the provided file, of this Syntax node.\n- Parameters:\n  - converter: The `SourceLocationConverter` that was previously\n    initialized using the root tree of this node.\n  - afterLeadingTrivia: Whether to skip leading trivia when getting\n                         the node's start location. Defaults to `true`.\n  - afterTrailingTrivia: Whether to skip trailing trivia when getting\n                         the node's end location. Defaults to `false`."},{"p":["Syntax","startLocation(converter:afterLeadingTrivia:)"],"f":[["func",12],[" ",17],["startLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18,539],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18,7703],[" = true) -> ",17],["SourceLocation",18,527]],"s":[["func",12],[" ",17],["startLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18],[") -> ",17],["SourceLocation",18]],"d":"The starting location, in the provided file, of this Syntax node.\n- Parameters:\n  - converter: The `SourceLocationConverter` that was previously\n    initialized using the root tree of this node.\n  - afterLeadingTrivia: Whether to skip leading trivia when getting\n                        the node's location. Defaults to `true`."},{"p":["Syntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["SyntaxEnum",18,20],[".Type) -> ",17],["SyntaxEnum",18,20]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["SyntaxEnum",18],[".Type) -> ",17],["SyntaxEnum",18]],"d":"Get an enum that can be used to exhaustively switch over all syntax nodes."},{"p":["Syntax","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["S",18],["? ",17],["where",12],[" ",17],["S",18],[" : ",17],["SyntaxProtocol",18,15]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["S",18],["?",17]],"c":[["S",1,"SyntaxProtocol",15]],"g":[["S",0,0]]},{"p":["Syntax","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["syntaxType",2],[": ",17],["S",18],[".Type) -> ",17],["Bool",18,7703],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["SyntaxProtocol",18,15]],"s":[["func",12],[" ",17],["`is`",7],["<",17],["S",0],[">(",17],["S",18],[".Type) -> ",17],["Bool",18]],"c":[["S",1,"SyntaxProtocol",15]],"g":[["S",0,0]]},{"p":["Syntax","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,7779],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"o":7621},{"p":["SyntaxAnyVisitor","visitAny(_:)"],"f":[["func",12],[" ",17],["visitAny",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visitAny",7],["(",17],["Syntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxAnyVisitor","visitAnyPost(_:)"],"f":[["func",12],[" ",17],["visitAnyPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["visitAnyPost",7],["(",17],["Syntax",18],[")",17]],"d":"The function called after visiting the node and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathSyntax",18,25],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessPathSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6722},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImportDeclSyntax",18,27],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImportDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6723},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnStmtSyntax",18,29],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ReturnStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6724},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SourceFileSyntax",18,31],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SourceFileSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6725},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StructDeclSyntax",18,33],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StructDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6726},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseSyntax",18,35],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6727},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchStmtSyntax",18,37],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6728},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6729},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6730},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathExprSyntax",18,43],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["KeyPathExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6731},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TernaryExprSyntax",18,45],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TernaryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6732},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownDeclSyntax",18,47],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6733},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownExprSyntax",18,48],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6734},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownStmtSyntax",18,49],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6735},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownTypeSyntax",18,50],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6736},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WhereClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6737},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6738},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorListSyntax",18,55],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6739},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6740},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemListSyntax",18,59],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CaseItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6741},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamSyntax",18,61],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureParamSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6742},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6743},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseDeclSyntax",18,67],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6744},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclSyntax",18,69],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6745},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionTypeSyntax",18,71],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6746},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigDeclSyntax",18,73],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6747},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MetatypeTypeSyntax",18,75],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MetatypeTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6748},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ModifierListSyntax",18,77],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ModifierListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6749},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorSyntax",18,79],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjCSelectorSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6750},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorDeclSyntax",18,81],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OperatorDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6751},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalTypeSyntax",18,83],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6752},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ProtocolDeclSyntax",18,85],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ProtocolDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6753},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ReturnClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6754},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SequenceExprSyntax",18,89],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SequenceExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6755},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SuperRefExprSyntax",18,91],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SuperRefExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6756},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternSyntax",18,93],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6757},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VariableDeclSyntax",18,95],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["VariableDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6758},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VersionTupleSyntax",18,97],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["VersionTupleSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6759},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorBlockSyntax",18,99],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6760},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsTypePatternSyntax",18,101],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AsTypePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6761},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeListSyntax",18,103],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6762},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemListSyntax",18,105],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6763},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6764},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExtensionDeclSyntax",18,109],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExtensionDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6765},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InheritedTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6766},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsTypePatternSyntax",18,113],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IsTypePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6767},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcNamePieceSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6768},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileExprSyntax",18,117],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFileExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6769},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundLineExprSyntax",18,119],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundLineExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6770},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringSegmentSyntax",18,121],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringSegmentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6771},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptDeclSyntax",18,123],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SubscriptDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6772},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptExprSyntax",18,125],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SubscriptExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6773},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypealiasDeclSyntax",18,127],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypealiasDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6774},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssignmentExprSyntax",18,129],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AssignmentExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6775},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributedTypeSyntax",18,131],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributedTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6776},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryExprSyntax",18,133],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6777},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryTypeSyntax",18,135],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6778},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionStmtSyntax",18,137],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6779},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierExprSyntax",18,139],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6780},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierListSyntax",18,141],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6781},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6782},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListSyntax",18,145],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6783},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NilLiteralExprSyntax",18,147],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NilLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6784},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PatternBindingSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6785},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundErrorDeclSyntax",18,151],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundErrorDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6786},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeExprSyntax",18,153],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SpecializeExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6787},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseListSyntax",18,155],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6788},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeAnnotationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6789},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownPatternSyntax",18,159],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6790},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseListSyntax",18,160],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchClauseListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6791},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeSyntax",18,162],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6792},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CustomAttributeSyntax",18,164],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CustomAttributeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6793},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclarationStmtSyntax",18,166],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclarationStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6794},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6795},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCasePatternSyntax",18,170],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCasePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6796},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FallthroughStmtSyntax",18,172],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FallthroughStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6797},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForcedValueExprSyntax",18,174],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ForcedValueExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6798},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6799},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerDeclSyntax",18,178],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InitializerDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6800},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathBaseExprSyntax",18,180],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["KeyPathBaseExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6801},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6802},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcKeyPathExprSyntax",18,184],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcKeyPathExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6803},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalPatternSyntax",18,186],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6804},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ParameterClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6805},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundAssertStmtSyntax",18,190],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundAssertStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6806},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundColumnExprSyntax",18,192],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundColumnExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6807},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileIDExprSyntax",18,194],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFileIDExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6808},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RepeatWhileStmtSyntax",18,196],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["RepeatWhileStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6809},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseLabelSyntax",18,198],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseLabelSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6810},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WildcardPatternSyntax",18,200],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WildcardPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6811},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementListSyntax",18,202],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6812},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamListSyntax",18,204],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureParamListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6813},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureSignatureSyntax",18,206],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureSignatureSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6814},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6815},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6816},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FloatLiteralExprSyntax",18,212],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FloatLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6817},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionCallExprSyntax",18,214],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionCallExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6818},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclNameSyntax",18,216],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionDeclNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6819},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6820},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberAccessExprSyntax",18,220],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberAccessExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6821},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcSelectorExprSyntax",18,222],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcSelectorExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6822},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixUnaryExprSyntax",18,224],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PostfixUnaryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6823},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundWarningDeclSyntax",18,226],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundWarningDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6824},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RegexLiteralExprSyntax",18,228],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["RegexLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6825},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6826},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6827},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorParameterSyntax",18,234],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorParameterSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6828},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityEntrySyntax",18,236],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityEntrySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6829},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemListSyntax",18,238],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6830},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6831},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeinitializerDeclSyntax",18,242],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeinitializerDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6832},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementSyntax",18,244],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6833},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionPatternSyntax",18,246],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6834},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionSegmentSyntax",18,248],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionSegmentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6835},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionParameterSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6836},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionSignatureSyntax",18,252],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionSignatureSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6837},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierPatternSyntax",18,254],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6838},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeListSyntax",18,256],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InheritedTypeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6839},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InitializerClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6840},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NonEmptyTokenListSyntax",18,260],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NonEmptyTokenListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6841},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjCSelectorPieceSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6842},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjectLiteralExprSyntax",18,264],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjectLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6843},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFilePathExprSyntax",18,266],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFilePathExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6844},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFunctionExprSyntax",18,268],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFunctionExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6845},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["QualifiedDeclNameSyntax",18,270],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["QualifiedDeclNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6846},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6847},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssociatedtypeDeclSyntax",18,274],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AssociatedtypeDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6848},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BinaryOperatorExprSyntax",18,276],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BinaryOperatorExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6849},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BooleanLiteralExprSyntax",18,278],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BooleanLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6850},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6851},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseIfContinuationSyntax",18,282],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ElseIfContinuationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6852},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericRequirementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6853},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericWhereClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6854},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseListSyntax",18,288],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigClauseListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6855},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IntegerLiteralExprSyntax",18,290],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IntegerLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6856},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclListItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6857},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingListSyntax",18,294],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PatternBindingListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6858},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundDsohandleExprSyntax",18,296],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundDsohandleExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6859},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrefixOperatorExprSyntax",18,298],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrefixOperatorExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6860},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchDefaultLabelSyntax",18,300],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchDefaultLabelSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6861},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessLevelModifierSyntax",18,302],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessLevelModifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6862},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessPathComponentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6863},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementListSyntax",18,306],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6864},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentListSyntax",18,308],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6865},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixIfConfigExprSyntax",18,310],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PostfixIfConfigExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6866},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationSyntax",18,312],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundSourceLocationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6867},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupDeclSyntax",18,314],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6868},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SameTypeRequirementSyntax",18,316],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SameTypeRequirementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6869},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TargetFunctionEntrySyntax",18,318],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TargetFunctionEntrySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6870},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6871},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ValueBindingPatternSyntax",18,322],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ValueBindingPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6872},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6873},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilitySpecListSyntax",18,326],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilitySpecListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6874},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassRestrictionTypeSyntax",18,328],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClassRestrictionTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6875},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementListSyntax",18,330],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConditionElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6876},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentListSyntax",18,332],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6877},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterListSyntax",18,334],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6878},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberTypeIdentifierSyntax",18,336],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberTypeIdentifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6879},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalChainingExprSyntax",18,338],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalChainingExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6880},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SimpleTypeIdentifierSyntax",18,340],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SimpleTypeIdentifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6881},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementListSyntax",18,342],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6882},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementListSyntax",18,344],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6883},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityConditionSyntax",18,346],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6884},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementListSyntax",18,348],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6885},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DiscardAssignmentExprSyntax",18,350],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DiscardAssignmentExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6886},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EditorPlaceholderExprSyntax",18,352],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EditorPlaceholderExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6887},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterListSyntax",18,354],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionParameterListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6888},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,356],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6889},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,358],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6890},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralSegmentsSyntax",18,360],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringLiteralSegmentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6891},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SymbolicReferenceExprSyntax",18,362],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SymbolicReferenceExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6892},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeInheritanceClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6893},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,366],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeInitializerClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6894},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnresolvedPatternExprSyntax",18,368],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnresolvedPatternExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6895},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemListSyntax",18,370],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6896},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementSyntax",18,372],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6897},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConformanceRequirementSyntax",18,374],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConformanceRequirementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6898},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamSyntax",18,376],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6899},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,378],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6900},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementListSyntax",18,380],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericRequirementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6901},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["LabeledSpecializeEntrySyntax",18,382],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["LabeledSpecializeEntrySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6902},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureSignatureSyntax",18,384],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureSignatureSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6903},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsSyntax",18,386],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6904},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationArgsSyntax",18,388],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundSourceLocationArgsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6905},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameListSyntax",18,390],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupNameListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6906},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupRelationSyntax",18,392],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupRelationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6907},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementListSyntax",18,394],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6908},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnavailabilityConditionSyntax",18,396],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnavailabilityConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6909},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MatchingPatternConditionSyntax",18,398],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MatchingPatternConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6910},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalBindingConditionSyntax",18,400],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalBindingConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6911},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssignmentSyntax",18,402],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAssignmentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6912},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeListSyntax",18,404],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6913},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementListSyntax",18,406],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6914},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamListSyntax",18,408],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6915},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,410],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6916},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,412],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6917},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityLabeledArgumentSyntax",18,414],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityLabeledArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6918},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeAttributeSpecListSyntax",18,416],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SpecializeAttributeSpecListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6919},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplementsAttributeArgumentsSyntax",18,418],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImplementsAttributeArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6920},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NamedAttributeStringArgumentSyntax",18,420],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NamedAttributeStringArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6921},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssociativitySyntax",18,422],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAssociativitySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6922},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAttributeListSyntax",18,424],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6923},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6924},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityVersionRestrictionSyntax",18,428],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6925},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6926},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,432],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6927},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiableAttributeArgumentsSyntax",18,434],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6928},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,436],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6929},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6930},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["token",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TokenSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6931},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsExprSyntax",18,445],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AsExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6932},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DoStmtSyntax",18,447],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DoStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6933},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfStmtSyntax",18,449],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6934},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsExprSyntax",18,451],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IsExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6935},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TryExprSyntax",18,454],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6936},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownSyntax",18,456],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6937},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemSyntax",18,457],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CaseItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6938},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameSyntax",18,459],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6939},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumDeclSyntax",18,461],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6940},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprListSyntax",18,463],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExprListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6941},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNameSyntax",18,465],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6942},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SomeTypeSyntax",18,467],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SomeTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6943},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeExprSyntax",18,469],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6944},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayExprSyntax",18,471],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6945},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayTypeSyntax",18,473],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6946},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrowExprSyntax",18,475],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrowExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6947},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeSyntax",18,477],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6948},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AwaitExprSyntax",18,479],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AwaitExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6949},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BreakStmtSyntax",18,481],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BreakStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6950},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemSyntax",18,483],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6951},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassDeclSyntax",18,485],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClassDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6952},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6953},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeferStmtSyntax",18,489],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeferStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6954},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseBlockSyntax",18,491],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ElseBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6955},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForInStmtSyntax",18,493],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ForInStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6956},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GuardStmtSyntax",18,495],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GuardStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6957},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InOutExprSyntax",18,497],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InOutExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6958},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ThrowStmtSyntax",18,499],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ThrowStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6959},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenListSyntax",18,501],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TokenListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6960},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprSyntax",18,503],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6961},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeSyntax",18,505],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6962},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhileStmtSyntax",18,507],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WhileStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6963},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldListSyntax",18,509],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["YieldListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6964},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldStmtSyntax",18,511],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["YieldStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6965},{"p":["SyntaxAnyVisitor","visit(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ContinueStmtSyntax",18,63],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ContinueStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6966},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathSyntax",18,25],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessPathSyntax",18],[")",17]],"o":6967},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImportDeclSyntax",18,27],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ImportDeclSyntax",18],[")",17]],"o":6968},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnStmtSyntax",18,29],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ReturnStmtSyntax",18],[")",17]],"o":6969},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SourceFileSyntax",18,31],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SourceFileSyntax",18],[")",17]],"o":6970},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StructDeclSyntax",18,33],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StructDeclSyntax",18],[")",17]],"o":6971},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseSyntax",18,35],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchCaseSyntax",18],[")",17]],"o":6972},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchStmtSyntax",18,37],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchStmtSyntax",18],[")",17]],"o":6973},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseSyntax",18,39],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchClauseSyntax",18],[")",17]],"o":6974},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureExprSyntax",18],[")",17]],"o":6975},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathExprSyntax",18,43],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["KeyPathExprSyntax",18],[")",17]],"o":6976},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TernaryExprSyntax",18,45],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TernaryExprSyntax",18],[")",17]],"o":6977},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownDeclSyntax",18,47],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownDeclSyntax",18],[")",17]],"o":6978},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownExprSyntax",18,48],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownExprSyntax",18],[")",17]],"o":6979},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownStmtSyntax",18,49],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownStmtSyntax",18],[")",17]],"o":6980},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownTypeSyntax",18,50],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownTypeSyntax",18],[")",17]],"o":6981},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["WhereClauseSyntax",18],[")",17]],"o":6982},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorDeclSyntax",18,53],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorDeclSyntax",18],[")",17]],"o":6983},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorListSyntax",18,55],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorListSyntax",18],[")",17]],"o":6984},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementSyntax",18,57],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayElementSyntax",18],[")",17]],"o":6985},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemListSyntax",18,59],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CaseItemListSyntax",18],[")",17]],"o":6986},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamSyntax",18,61],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureParamSyntax",18],[")",17]],"o":6987},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ContinueStmtSyntax",18,63],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ContinueStmtSyntax",18],[")",17]],"o":6988},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclModifierSyntax",18],[")",17]],"o":6989},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseDeclSyntax",18,67],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCaseDeclSyntax",18],[")",17]],"o":6990},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclSyntax",18,69],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionDeclSyntax",18],[")",17]],"o":6991},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionTypeSyntax",18,71],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionTypeSyntax",18],[")",17]],"o":6992},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigDeclSyntax",18,73],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfConfigDeclSyntax",18],[")",17]],"o":6993},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MetatypeTypeSyntax",18,75],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MetatypeTypeSyntax",18],[")",17]],"o":6994},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ModifierListSyntax",18,77],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ModifierListSyntax",18],[")",17]],"o":6995},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorSyntax",18,79],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjCSelectorSyntax",18],[")",17]],"o":6996},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorDeclSyntax",18,81],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OperatorDeclSyntax",18],[")",17]],"o":6997},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalTypeSyntax",18,83],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalTypeSyntax",18],[")",17]],"o":6998},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ProtocolDeclSyntax",18,85],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ProtocolDeclSyntax",18],[")",17]],"o":6999},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ReturnClauseSyntax",18],[")",17]],"o":7000},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SequenceExprSyntax",18,89],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SequenceExprSyntax",18],[")",17]],"o":7001},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SuperRefExprSyntax",18,91],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SuperRefExprSyntax",18],[")",17]],"o":7002},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternSyntax",18,93],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TuplePatternSyntax",18],[")",17]],"o":7003},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VariableDeclSyntax",18,95],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["VariableDeclSyntax",18],[")",17]],"o":7004},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VersionTupleSyntax",18,97],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["VersionTupleSyntax",18],[")",17]],"o":7005},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorBlockSyntax",18,99],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorBlockSyntax",18],[")",17]],"o":7006},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsTypePatternSyntax",18,101],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AsTypePatternSyntax",18],[")",17]],"o":7007},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeListSyntax",18,103],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AttributeListSyntax",18],[")",17]],"o":7008},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemListSyntax",18,105],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchItemListSyntax",18],[")",17]],"o":7009},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CodeBlockItemSyntax",18],[")",17]],"o":7010},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExtensionDeclSyntax",18,109],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExtensionDeclSyntax",18],[")",17]],"o":7011},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeSyntax",18,111],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InheritedTypeSyntax",18],[")",17]],"o":7012},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsTypePatternSyntax",18,113],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IsTypePatternSyntax",18],[")",17]],"o":7013},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNamePieceSyntax",18,115],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcNamePieceSyntax",18],[")",17]],"o":7014},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileExprSyntax",18,117],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFileExprSyntax",18],[")",17]],"o":7015},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundLineExprSyntax",18,119],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundLineExprSyntax",18],[")",17]],"o":7016},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringSegmentSyntax",18,121],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StringSegmentSyntax",18],[")",17]],"o":7017},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptDeclSyntax",18,123],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SubscriptDeclSyntax",18],[")",17]],"o":7018},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptExprSyntax",18,125],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SubscriptExprSyntax",18],[")",17]],"o":7019},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypealiasDeclSyntax",18,127],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypealiasDeclSyntax",18],[")",17]],"o":7020},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssignmentExprSyntax",18,129],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AssignmentExprSyntax",18],[")",17]],"o":7021},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributedTypeSyntax",18,131],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AttributedTypeSyntax",18],[")",17]],"o":7022},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryExprSyntax",18,133],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryExprSyntax",18],[")",17]],"o":7023},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryTypeSyntax",18,135],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryTypeSyntax",18],[")",17]],"o":7024},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionStmtSyntax",18,137],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExpressionStmtSyntax",18],[")",17]],"o":7025},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierExprSyntax",18,139],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IdentifierExprSyntax",18],[")",17]],"o":7026},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierListSyntax",18,141],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IdentifierListSyntax",18],[")",17]],"o":7027},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseSyntax",18,143],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfConfigClauseSyntax",18],[")",17]],"o":7028},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListSyntax",18,145],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberDeclListSyntax",18],[")",17]],"o":7029},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NilLiteralExprSyntax",18,147],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["NilLiteralExprSyntax",18],[")",17]],"o":7030},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingSyntax",18,149],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PatternBindingSyntax",18],[")",17]],"o":7031},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundErrorDeclSyntax",18,151],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundErrorDeclSyntax",18],[")",17]],"o":7032},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeExprSyntax",18,153],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SpecializeExprSyntax",18],[")",17]],"o":7033},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseListSyntax",18,155],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchCaseListSyntax",18],[")",17]],"o":7034},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeAnnotationSyntax",18],[")",17]],"o":7035},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownPatternSyntax",18,159],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownPatternSyntax",18],[")",17]],"o":7036},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseListSyntax",18,160],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchClauseListSyntax",18],[")",17]],"o":7037},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeSyntax",18,162],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CompositionTypeSyntax",18],[")",17]],"o":7038},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CustomAttributeSyntax",18,164],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CustomAttributeSyntax",18],[")",17]],"o":7039},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclarationStmtSyntax",18,166],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclarationStmtSyntax",18],[")",17]],"o":7040},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementSyntax",18,168],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCaseElementSyntax",18],[")",17]],"o":7041},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCasePatternSyntax",18,170],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCasePatternSyntax",18],[")",17]],"o":7042},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FallthroughStmtSyntax",18,172],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FallthroughStmtSyntax",18],[")",17]],"o":7043},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForcedValueExprSyntax",18,174],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ForcedValueExprSyntax",18],[")",17]],"o":7044},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentSyntax",18,176],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericArgumentSyntax",18],[")",17]],"o":7045},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerDeclSyntax",18,178],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InitializerDeclSyntax",18],[")",17]],"o":7046},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathBaseExprSyntax",18,180],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["KeyPathBaseExprSyntax",18],[")",17]],"o":7047},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]],"o":7048},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcKeyPathExprSyntax",18,184],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcKeyPathExprSyntax",18],[")",17]],"o":7049},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalPatternSyntax",18,186],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalPatternSyntax",18],[")",17]],"o":7050},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ParameterClauseSyntax",18],[")",17]],"o":7051},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundAssertStmtSyntax",18,190],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundAssertStmtSyntax",18],[")",17]],"o":7052},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundColumnExprSyntax",18,192],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundColumnExprSyntax",18],[")",17]],"o":7053},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileIDExprSyntax",18,194],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFileIDExprSyntax",18],[")",17]],"o":7054},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RepeatWhileStmtSyntax",18,196],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["RepeatWhileStmtSyntax",18],[")",17]],"o":7055},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseLabelSyntax",18,198],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchCaseLabelSyntax",18],[")",17]],"o":7056},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WildcardPatternSyntax",18,200],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["WildcardPatternSyntax",18],[")",17]],"o":7057},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementListSyntax",18,202],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayElementListSyntax",18],[")",17]],"o":7058},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamListSyntax",18,204],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureParamListSyntax",18],[")",17]],"o":7059},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureSignatureSyntax",18,206],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureSignatureSyntax",18],[")",17]],"o":7060},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementSyntax",18,208],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConditionElementSyntax",18],[")",17]],"o":7061},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentSyntax",18,210],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameArgumentSyntax",18],[")",17]],"o":7062},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FloatLiteralExprSyntax",18,212],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FloatLiteralExprSyntax",18],[")",17]],"o":7063},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionCallExprSyntax",18,214],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionCallExprSyntax",18],[")",17]],"o":7064},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclNameSyntax",18,216],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionDeclNameSyntax",18],[")",17]],"o":7065},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterSyntax",18,218],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericParameterSyntax",18],[")",17]],"o":7066},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberAccessExprSyntax",18,220],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberAccessExprSyntax",18],[")",17]],"o":7067},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcSelectorExprSyntax",18,222],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcSelectorExprSyntax",18],[")",17]],"o":7068},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixUnaryExprSyntax",18,224],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PostfixUnaryExprSyntax",18],[")",17]],"o":7069},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundWarningDeclSyntax",18,226],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundWarningDeclSyntax",18],[")",17]],"o":7070},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RegexLiteralExprSyntax",18,228],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["RegexLiteralExprSyntax",18],[")",17]],"o":7071},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleExprElementSyntax",18],[")",17]],"o":7072},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementSyntax",18,232],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleTypeElementSyntax",18],[")",17]],"o":7073},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorParameterSyntax",18,234],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorParameterSyntax",18],[")",17]],"o":7074},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityEntrySyntax",18,236],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityEntrySyntax",18],[")",17]],"o":7075},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemListSyntax",18,238],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CodeBlockItemListSyntax",18],[")",17]],"o":7076},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]],"o":7077},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeinitializerDeclSyntax",18,242],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeinitializerDeclSyntax",18],[")",17]],"o":7078},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementSyntax",18,244],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryElementSyntax",18],[")",17]],"o":7079},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionPatternSyntax",18,246],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExpressionPatternSyntax",18],[")",17]],"o":7080},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionSegmentSyntax",18,248],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExpressionSegmentSyntax",18],[")",17]],"o":7081},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterSyntax",18,250],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionParameterSyntax",18],[")",17]],"o":7082},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionSignatureSyntax",18,252],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionSignatureSyntax",18],[")",17]],"o":7083},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierPatternSyntax",18,254],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IdentifierPatternSyntax",18],[")",17]],"o":7084},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeListSyntax",18,256],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InheritedTypeListSyntax",18],[")",17]],"o":7085},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InitializerClauseSyntax",18],[")",17]],"o":7086},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NonEmptyTokenListSyntax",18,260],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["NonEmptyTokenListSyntax",18],[")",17]],"o":7087},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjCSelectorPieceSyntax",18],[")",17]],"o":7088},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjectLiteralExprSyntax",18,264],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjectLiteralExprSyntax",18],[")",17]],"o":7089},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFilePathExprSyntax",18,266],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFilePathExprSyntax",18],[")",17]],"o":7090},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFunctionExprSyntax",18,268],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFunctionExprSyntax",18],[")",17]],"o":7091},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["QualifiedDeclNameSyntax",18,270],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["QualifiedDeclNameSyntax",18],[")",17]],"o":7092},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StringLiteralExprSyntax",18],[")",17]],"o":7093},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssociatedtypeDeclSyntax",18,274],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AssociatedtypeDeclSyntax",18],[")",17]],"o":7094},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BinaryOperatorExprSyntax",18,276],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BinaryOperatorExprSyntax",18],[")",17]],"o":7095},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BooleanLiteralExprSyntax",18,278],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BooleanLiteralExprSyntax",18],[")",17]],"o":7096},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureCaptureItemSyntax",18],[")",17]],"o":7097},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseIfContinuationSyntax",18,282],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ElseIfContinuationSyntax",18],[")",17]],"o":7098},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementSyntax",18,284],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericRequirementSyntax",18],[")",17]],"o":7099},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]],"o":7100},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseListSyntax",18,288],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfConfigClauseListSyntax",18],[")",17]],"o":7101},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IntegerLiteralExprSyntax",18,290],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IntegerLiteralExprSyntax",18],[")",17]],"o":7102},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListItemSyntax",18,292],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberDeclListItemSyntax",18],[")",17]],"o":7103},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingListSyntax",18,294],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PatternBindingListSyntax",18],[")",17]],"o":7104},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundDsohandleExprSyntax",18,296],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundDsohandleExprSyntax",18],[")",17]],"o":7105},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrefixOperatorExprSyntax",18,298],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrefixOperatorExprSyntax",18],[")",17]],"o":7106},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchDefaultLabelSyntax",18,300],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchDefaultLabelSyntax",18],[")",17]],"o":7107},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessLevelModifierSyntax",18,302],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessLevelModifierSyntax",18],[")",17]],"o":7108},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathComponentSyntax",18,304],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessPathComponentSyntax",18],[")",17]],"o":7109},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementListSyntax",18,306],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCaseElementListSyntax",18],[")",17]],"o":7110},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentListSyntax",18,308],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericArgumentListSyntax",18],[")",17]],"o":7111},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixIfConfigExprSyntax",18,310],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PostfixIfConfigExprSyntax",18],[")",17]],"o":7112},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationSyntax",18,312],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundSourceLocationSyntax",18],[")",17]],"o":7113},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupDeclSyntax",18,314],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupDeclSyntax",18],[")",17]],"o":7114},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SameTypeRequirementSyntax",18,316],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SameTypeRequirementSyntax",18],[")",17]],"o":7115},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TargetFunctionEntrySyntax",18,318],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TargetFunctionEntrySyntax",18],[")",17]],"o":7116},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementSyntax",18,320],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TuplePatternElementSyntax",18],[")",17]],"o":7117},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ValueBindingPatternSyntax",18,322],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ValueBindingPatternSyntax",18],[")",17]],"o":7118},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityArgumentSyntax",18],[")",17]],"o":7119},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilitySpecListSyntax",18,326],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilitySpecListSyntax",18],[")",17]],"o":7120},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassRestrictionTypeSyntax",18,328],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClassRestrictionTypeSyntax",18],[")",17]],"o":7121},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementListSyntax",18,330],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConditionElementListSyntax",18],[")",17]],"o":7122},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentListSyntax",18,332],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameArgumentListSyntax",18],[")",17]],"o":7123},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterListSyntax",18,334],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericParameterListSyntax",18],[")",17]],"o":7124},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberTypeIdentifierSyntax",18,336],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberTypeIdentifierSyntax",18],[")",17]],"o":7125},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalChainingExprSyntax",18,338],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalChainingExprSyntax",18],[")",17]],"o":7126},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SimpleTypeIdentifierSyntax",18,340],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SimpleTypeIdentifierSyntax",18],[")",17]],"o":7127},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementListSyntax",18,342],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleExprElementListSyntax",18],[")",17]],"o":7128},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementListSyntax",18,344],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleTypeElementListSyntax",18],[")",17]],"o":7129},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityConditionSyntax",18,346],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityConditionSyntax",18],[")",17]],"o":7130},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementListSyntax",18,348],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryElementListSyntax",18],[")",17]],"o":7131},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DiscardAssignmentExprSyntax",18,350],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DiscardAssignmentExprSyntax",18],[")",17]],"o":7132},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EditorPlaceholderExprSyntax",18,352],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EditorPlaceholderExprSyntax",18],[")",17]],"o":7133},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterListSyntax",18,354],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionParameterListSyntax",18],[")",17]],"o":7134},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,356],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]],"o":7135},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,358],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[")",17]],"o":7136},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralSegmentsSyntax",18,360],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StringLiteralSegmentsSyntax",18],[")",17]],"o":7137},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SymbolicReferenceExprSyntax",18,362],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SymbolicReferenceExprSyntax",18],[")",17]],"o":7138},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]],"o":7139},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,366],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeInitializerClauseSyntax",18],[")",17]],"o":7140},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnresolvedPatternExprSyntax",18,368],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnresolvedPatternExprSyntax",18],[")",17]],"o":7141},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemListSyntax",18,370],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureCaptureItemListSyntax",18],[")",17]],"o":7142},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementSyntax",18,372],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CompositionTypeElementSyntax",18],[")",17]],"o":7143},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConformanceRequirementSyntax",18,374],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConformanceRequirementSyntax",18],[")",17]],"o":7144},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamSyntax",18,376],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamSyntax",18],[")",17]],"o":7145},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,378],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]],"o":7146},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementListSyntax",18,380],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericRequirementListSyntax",18],[")",17]],"o":7147},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["LabeledSpecializeEntrySyntax",18,382],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["LabeledSpecializeEntrySyntax",18],[")",17]],"o":7148},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureSignatureSyntax",18,384],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureCaptureSignatureSyntax",18],[")",17]],"o":7149},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsSyntax",18,386],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamsSyntax",18],[")",17]],"o":7150},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationArgsSyntax",18,388],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundSourceLocationArgsSyntax",18],[")",17]],"o":7151},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameListSyntax",18,390],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupNameListSyntax",18],[")",17]],"o":7152},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupRelationSyntax",18,392],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupRelationSyntax",18],[")",17]],"o":7153},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementListSyntax",18,394],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TuplePatternElementListSyntax",18],[")",17]],"o":7154},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnavailabilityConditionSyntax",18,396],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnavailabilityConditionSyntax",18],[")",17]],"o":7155},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MatchingPatternConditionSyntax",18,398],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MatchingPatternConditionSyntax",18],[")",17]],"o":7156},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalBindingConditionSyntax",18,400],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalBindingConditionSyntax",18],[")",17]],"o":7157},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssignmentSyntax",18,402],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupAssignmentSyntax",18],[")",17]],"o":7158},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeListSyntax",18,404],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrimaryAssociatedTypeListSyntax",18],[")",17]],"o":7159},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementListSyntax",18,406],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CompositionTypeElementListSyntax",18],[")",17]],"o":7160},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamListSyntax",18,408],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamListSyntax",18],[")",17]],"o":7161},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,410],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[")",17]],"o":7162},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,412],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[")",17]],"o":7163},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityLabeledArgumentSyntax",18,414],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityLabeledArgumentSyntax",18],[")",17]],"o":7164},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeAttributeSpecListSyntax",18,416],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SpecializeAttributeSpecListSyntax",18],[")",17]],"o":7165},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplementsAttributeArgumentsSyntax",18,418],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ImplementsAttributeArgumentsSyntax",18],[")",17]],"o":7166},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NamedAttributeStringArgumentSyntax",18,420],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["NamedAttributeStringArgumentSyntax",18],[")",17]],"o":7167},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssociativitySyntax",18,422],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupAssociativitySyntax",18],[")",17]],"o":7168},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAttributeListSyntax",18,424],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],[")",17]],"o":7169},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[")",17]],"o":7170},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityVersionRestrictionSyntax",18,428],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],[")",17]],"o":7171},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[")",17]],"o":7172},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,432],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],[")",17]],"o":7173},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiableAttributeArgumentsSyntax",18,434],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18],[")",17]],"o":7174},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,436],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],[")",17]],"o":7175},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],[")",17]],"o":7176},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TokenSyntax",18],[")",17]],"o":7177},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsExprSyntax",18,445],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AsExprSyntax",18],[")",17]],"o":7178},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DoStmtSyntax",18,447],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DoStmtSyntax",18],[")",17]],"o":7179},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfStmtSyntax",18,449],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfStmtSyntax",18],[")",17]],"o":7180},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IsExprSyntax",18],[")",17]],"o":7181},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TryExprSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TryExprSyntax",18],[")",17]],"o":7182},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownSyntax",18,456],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownSyntax",18],[")",17]],"o":7183},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemSyntax",18,457],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CaseItemSyntax",18],[")",17]],"o":7184},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameSyntax",18,459],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameSyntax",18],[")",17]],"o":7185},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumDeclSyntax",18,461],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumDeclSyntax",18],[")",17]],"o":7186},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprListSyntax",18,463],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExprListSyntax",18],[")",17]],"o":7187},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNameSyntax",18,465],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcNameSyntax",18],[")",17]],"o":7188},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SomeTypeSyntax",18,467],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SomeTypeSyntax",18],[")",17]],"o":7189},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeExprSyntax",18,469],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeExprSyntax",18],[")",17]],"o":7190},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayExprSyntax",18,471],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayExprSyntax",18],[")",17]],"o":7191},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayTypeSyntax",18,473],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayTypeSyntax",18],[")",17]],"o":7192},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrowExprSyntax",18,475],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrowExprSyntax",18],[")",17]],"o":7193},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeSyntax",18,477],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AttributeSyntax",18],[")",17]],"o":7194},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AwaitExprSyntax",18,479],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AwaitExprSyntax",18],[")",17]],"o":7195},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BreakStmtSyntax",18,481],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BreakStmtSyntax",18],[")",17]],"o":7196},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemSyntax",18,483],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchItemSyntax",18],[")",17]],"o":7197},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassDeclSyntax",18,485],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClassDeclSyntax",18],[")",17]],"o":7198},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CodeBlockSyntax",18],[")",17]],"o":7199},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeferStmtSyntax",18,489],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeferStmtSyntax",18],[")",17]],"o":7200},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseBlockSyntax",18,491],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ElseBlockSyntax",18],[")",17]],"o":7201},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForInStmtSyntax",18,493],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ForInStmtSyntax",18],[")",17]],"o":7202},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GuardStmtSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GuardStmtSyntax",18],[")",17]],"o":7203},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InOutExprSyntax",18,497],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InOutExprSyntax",18],[")",17]],"o":7204},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ThrowStmtSyntax",18,499],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ThrowStmtSyntax",18],[")",17]],"o":7205},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenListSyntax",18,501],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TokenListSyntax",18],[")",17]],"o":7206},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprSyntax",18,503],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleExprSyntax",18],[")",17]],"o":7207},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeSyntax",18,505],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleTypeSyntax",18],[")",17]],"o":7208},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhileStmtSyntax",18,507],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["WhileStmtSyntax",18],[")",17]],"o":7209},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldListSyntax",18,509],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["YieldListSyntax",18],[")",17]],"o":7210},{"p":["SyntaxAnyVisitor","visitPost(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldStmtSyntax",18,511],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["YieldStmtSyntax",18],[")",17]],"o":7211},{"p":["SyntaxClassifications","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SyntaxClassifications",18,516],[".",17],["Iterator",18,517]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SyntaxClassifications",18],[".",17],["Iterator",18]],"o":7660},{"p":["SyntaxClassifications","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["SyntaxClassifiedRange",18,518],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["SyntaxClassifiedRange",18],["?",17]],"d":"Updates `curOffset` and returns consecutive classified ranges, excluding\nones that do not intersect with the provided range","o":7760},{"p":["SyntaxNode","write(to:)"],"f":[["func",12],[" ",17],["write",7],["<",17],["Target",0],[">(",17],["to",1],[" ",17],["target",2],[": ",17],["inout",12],[" ",17],["Target",18],[") ",17],["where",12],[" ",17],["Target",18],[" : ",17],["TextOutputStream",18,7762]],"s":[["func",12],[" ",17],["write",7],["<",17],["Target",0],[">(",17],["to",1],[": ",17],["inout",12],[" ",17],["Target",18],[")",17]],"c":[["Target",1,"TextOutputStream",7762]],"g":[["Target",0,0]],"d":"Prints the raw value of this node to the provided stream.\n- Parameter stream: The stream to which to print the raw tree.","o":7766},{"p":["SyntaxVisitor","walk(_:)"],"f":[["func",12],[" ",17],["walk",7],["<",17],["SyntaxType",0],[">(",17],["_",1],[" ",17],["node",2],[": ",17],["SyntaxType",18],[") ",17],["where",12],[" ",17],["SyntaxType",18],[" : ",17],["SyntaxProtocol",18,15]],"s":[["func",12],[" ",17],["walk",7],["<",17],["SyntaxType",0],[">(",17],["SyntaxType",18],[")",17]],"c":[["SyntaxType",1,"SyntaxProtocol",15]],"g":[["SyntaxType",0,0]],"d":"Walk all nodes of the given syntax tree, calling the corresponding `visit` \nfunction for every node that is being visited."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathSyntax",18,25],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessPathSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessPathSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImportDeclSyntax",18,27],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImportDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ImportDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnStmtSyntax",18,29],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ReturnStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ReturnStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SourceFileSyntax",18,31],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SourceFileSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SourceFileSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StructDeclSyntax",18,33],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StructDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `StructDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseSyntax",18,35],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SwitchCaseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchStmtSyntax",18,37],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SwitchStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CatchClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathExprSyntax",18,43],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["KeyPathExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `KeyPathExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TernaryExprSyntax",18,45],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TernaryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TernaryExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownDeclSyntax",18,47],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownExprSyntax",18,48],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownStmtSyntax",18,49],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownTypeSyntax",18,50],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WhereClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `WhereClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessorDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorListSyntax",18,55],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessorListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ArrayElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemListSyntax",18,59],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CaseItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CaseItemListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamSyntax",18,61],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureParamSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureParamSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeclModifierSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseDeclSyntax",18,67],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `EnumCaseDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclSyntax",18,69],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionTypeSyntax",18,71],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigDeclSyntax",18,73],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IfConfigDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MetatypeTypeSyntax",18,75],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MetatypeTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MetatypeTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ModifierListSyntax",18,77],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ModifierListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ModifierListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorSyntax",18,79],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjCSelectorSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjCSelectorSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorDeclSyntax",18,81],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OperatorDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `OperatorDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalTypeSyntax",18,83],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `OptionalTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ProtocolDeclSyntax",18,85],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ProtocolDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ProtocolDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ReturnClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ReturnClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SequenceExprSyntax",18,89],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SequenceExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SequenceExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SuperRefExprSyntax",18,91],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SuperRefExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SuperRefExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternSyntax",18,93],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TuplePatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VariableDeclSyntax",18,95],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["VariableDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `VariableDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VersionTupleSyntax",18,97],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["VersionTupleSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `VersionTupleSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorBlockSyntax",18,99],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessorBlockSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsTypePatternSyntax",18,101],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AsTypePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AsTypePatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeListSyntax",18,103],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AttributeListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemListSyntax",18,105],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CatchItemListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CodeBlockItemSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExtensionDeclSyntax",18,109],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExtensionDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ExtensionDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InheritedTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `InheritedTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsTypePatternSyntax",18,113],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IsTypePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IsTypePatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcNamePieceSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjcNamePieceSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileExprSyntax",18,117],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFileExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundFileExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundLineExprSyntax",18,119],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundLineExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundLineExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringSegmentSyntax",18,121],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringSegmentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `StringSegmentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptDeclSyntax",18,123],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SubscriptDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SubscriptDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptExprSyntax",18,125],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SubscriptExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SubscriptExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypealiasDeclSyntax",18,127],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypealiasDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TypealiasDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssignmentExprSyntax",18,129],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AssignmentExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AssignmentExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributedTypeSyntax",18,131],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributedTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AttributedTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryExprSyntax",18,133],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DictionaryExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryTypeSyntax",18,135],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DictionaryTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionStmtSyntax",18,137],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ExpressionStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierExprSyntax",18,139],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IdentifierExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierListSyntax",18,141],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IdentifierListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IfConfigClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListSyntax",18,145],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MemberDeclListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NilLiteralExprSyntax",18,147],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NilLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `NilLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PatternBindingSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PatternBindingSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundErrorDeclSyntax",18,151],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundErrorDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundErrorDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeExprSyntax",18,153],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SpecializeExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SpecializeExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseListSyntax",18,155],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SwitchCaseListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeAnnotationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TypeAnnotationSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownPatternSyntax",18,159],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownPatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseListSyntax",18,160],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchClauseListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CatchClauseListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeSyntax",18,162],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CompositionTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CustomAttributeSyntax",18,164],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CustomAttributeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CustomAttributeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclarationStmtSyntax",18,166],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclarationStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeclarationStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `EnumCaseElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCasePatternSyntax",18,170],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCasePatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `EnumCasePatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FallthroughStmtSyntax",18,172],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FallthroughStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FallthroughStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForcedValueExprSyntax",18,174],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ForcedValueExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ForcedValueExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericArgumentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerDeclSyntax",18,178],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InitializerDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `InitializerDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathBaseExprSyntax",18,180],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["KeyPathBaseExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `KeyPathBaseExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MemberDeclBlockSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcKeyPathExprSyntax",18,184],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcKeyPathExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjcKeyPathExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalPatternSyntax",18,186],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `OptionalPatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ParameterClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ParameterClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundAssertStmtSyntax",18,190],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundAssertStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundAssertStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundColumnExprSyntax",18,192],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundColumnExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundColumnExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileIDExprSyntax",18,194],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFileIDExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundFileIDExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RepeatWhileStmtSyntax",18,196],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["RepeatWhileStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `RepeatWhileStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseLabelSyntax",18,198],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseLabelSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SwitchCaseLabelSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WildcardPatternSyntax",18,200],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WildcardPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `WildcardPatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementListSyntax",18,202],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ArrayElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamListSyntax",18,204],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureParamListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureParamListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureSignatureSyntax",18,206],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureSignatureSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureSignatureSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ConditionElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeclNameArgumentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FloatLiteralExprSyntax",18,212],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FloatLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FloatLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionCallExprSyntax",18,214],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionCallExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionCallExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclNameSyntax",18,216],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionDeclNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionDeclNameSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericParameterSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberAccessExprSyntax",18,220],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberAccessExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MemberAccessExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcSelectorExprSyntax",18,222],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcSelectorExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjcSelectorExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixUnaryExprSyntax",18,224],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PostfixUnaryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PostfixUnaryExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundWarningDeclSyntax",18,226],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundWarningDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundWarningDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RegexLiteralExprSyntax",18,228],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["RegexLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `RegexLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TupleExprElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TupleTypeElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorParameterSyntax",18,234],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorParameterSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessorParameterSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityEntrySyntax",18,236],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityEntrySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AvailabilityEntrySyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemListSyntax",18,238],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CodeBlockItemListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeclNameArgumentsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeinitializerDeclSyntax",18,242],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeinitializerDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeinitializerDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementSyntax",18,244],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DictionaryElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionPatternSyntax",18,246],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ExpressionPatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionSegmentSyntax",18,248],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionSegmentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ExpressionSegmentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionParameterSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionParameterSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionSignatureSyntax",18,252],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionSignatureSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionSignatureSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierPatternSyntax",18,254],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IdentifierPatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeListSyntax",18,256],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InheritedTypeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `InheritedTypeListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InitializerClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `InitializerClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NonEmptyTokenListSyntax",18,260],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NonEmptyTokenListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `NonEmptyTokenListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjCSelectorPieceSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjCSelectorPieceSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjectLiteralExprSyntax",18,264],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjectLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjectLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFilePathExprSyntax",18,266],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFilePathExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundFilePathExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFunctionExprSyntax",18,268],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFunctionExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundFunctionExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["QualifiedDeclNameSyntax",18,270],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["QualifiedDeclNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `QualifiedDeclNameSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `StringLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssociatedtypeDeclSyntax",18,274],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AssociatedtypeDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AssociatedtypeDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BinaryOperatorExprSyntax",18,276],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BinaryOperatorExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `BinaryOperatorExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BooleanLiteralExprSyntax",18,278],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BooleanLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `BooleanLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureCaptureItemSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseIfContinuationSyntax",18,282],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ElseIfContinuationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ElseIfContinuationSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericRequirementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericRequirementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericWhereClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericWhereClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseListSyntax",18,288],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigClauseListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IfConfigClauseListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IntegerLiteralExprSyntax",18,290],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IntegerLiteralExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IntegerLiteralExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclListItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MemberDeclListItemSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingListSyntax",18,294],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PatternBindingListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PatternBindingListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundDsohandleExprSyntax",18,296],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundDsohandleExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundDsohandleExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrefixOperatorExprSyntax",18,298],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrefixOperatorExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrefixOperatorExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchDefaultLabelSyntax",18,300],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchDefaultLabelSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SwitchDefaultLabelSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessLevelModifierSyntax",18,302],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessLevelModifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessLevelModifierSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessPathComponentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AccessPathComponentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementListSyntax",18,306],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `EnumCaseElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentListSyntax",18,308],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericArgumentListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixIfConfigExprSyntax",18,310],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PostfixIfConfigExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PostfixIfConfigExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationSyntax",18,312],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundSourceLocationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundSourceLocationSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupDeclSyntax",18,314],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SameTypeRequirementSyntax",18,316],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SameTypeRequirementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SameTypeRequirementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TargetFunctionEntrySyntax",18,318],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TargetFunctionEntrySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TargetFunctionEntrySyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TuplePatternElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ValueBindingPatternSyntax",18,322],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ValueBindingPatternSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ValueBindingPatternSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AvailabilityArgumentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilitySpecListSyntax",18,326],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilitySpecListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AvailabilitySpecListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassRestrictionTypeSyntax",18,328],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClassRestrictionTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClassRestrictionTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementListSyntax",18,330],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConditionElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ConditionElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentListSyntax",18,332],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeclNameArgumentListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterListSyntax",18,334],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericParameterListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberTypeIdentifierSyntax",18,336],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberTypeIdentifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MemberTypeIdentifierSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalChainingExprSyntax",18,338],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalChainingExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `OptionalChainingExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SimpleTypeIdentifierSyntax",18,340],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SimpleTypeIdentifierSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SimpleTypeIdentifierSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementListSyntax",18,342],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TupleExprElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementListSyntax",18,344],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TupleTypeElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityConditionSyntax",18,346],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AvailabilityConditionSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementListSyntax",18,348],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DictionaryElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DiscardAssignmentExprSyntax",18,350],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DiscardAssignmentExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DiscardAssignmentExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EditorPlaceholderExprSyntax",18,352],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EditorPlaceholderExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `EditorPlaceholderExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterListSyntax",18,354],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionParameterListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `FunctionParameterListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,356],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericArgumentClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,358],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrimaryAssociatedTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralSegmentsSyntax",18,360],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringLiteralSegmentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `StringLiteralSegmentsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SymbolicReferenceExprSyntax",18,362],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SymbolicReferenceExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SymbolicReferenceExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeInheritanceClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TypeInheritanceClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,366],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeInitializerClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TypeInitializerClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnresolvedPatternExprSyntax",18,368],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnresolvedPatternExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnresolvedPatternExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemListSyntax",18,370],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureItemListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureCaptureItemListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementSyntax",18,372],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CompositionTypeElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConformanceRequirementSyntax",18,374],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConformanceRequirementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ConformanceRequirementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamSyntax",18,376],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DifferentiabilityParamSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,378],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericParameterClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementListSyntax",18,380],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericRequirementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GenericRequirementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["LabeledSpecializeEntrySyntax",18,382],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["LabeledSpecializeEntrySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `LabeledSpecializeEntrySyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureSignatureSyntax",18,384],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureSignatureSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClosureCaptureSignatureSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsSyntax",18,386],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DifferentiabilityParamsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationArgsSyntax",18,388],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundSourceLocationArgsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PoundSourceLocationArgsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameListSyntax",18,390],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupNameListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupNameListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupRelationSyntax",18,392],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupRelationSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupRelationSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementListSyntax",18,394],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TuplePatternElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnavailabilityConditionSyntax",18,396],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnavailabilityConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnavailabilityConditionSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MatchingPatternConditionSyntax",18,398],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MatchingPatternConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MatchingPatternConditionSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalBindingConditionSyntax",18,400],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalBindingConditionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `OptionalBindingConditionSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssignmentSyntax",18,402],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAssignmentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupAssignmentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeListSyntax",18,404],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrimaryAssociatedTypeListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementListSyntax",18,406],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CompositionTypeElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamListSyntax",18,408],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DifferentiabilityParamListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,410],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `OperatorPrecedenceAndTypesSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,412],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupNameElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityLabeledArgumentSyntax",18,414],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityLabeledArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AvailabilityLabeledArgumentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeAttributeSpecListSyntax",18,416],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SpecializeAttributeSpecListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SpecializeAttributeSpecListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplementsAttributeArgumentsSyntax",18,418],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImplementsAttributeArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ImplementsAttributeArgumentsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NamedAttributeStringArgumentSyntax",18,420],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NamedAttributeStringArgumentSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `NamedAttributeStringArgumentSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssociativitySyntax",18,422],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAssociativitySyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupAssociativitySyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAttributeListSyntax",18,424],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `PrecedenceGroupAttributeListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DifferentiabilityParamsClauseSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityVersionRestrictionSyntax",18,428],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AvailabilityVersionRestrictionSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MultipleTrailingClosureElementSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,432],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ImplicitlyUnwrappedOptionalTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiableAttributeArgumentsSyntax",18,434],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DifferentiableAttributeArgumentsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,436],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `MultipleTrailingClosureElementListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DerivativeRegistrationAttributeArgumentsSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["token",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TokenSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TokenSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsExprSyntax",18,445],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AsExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AsExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DoStmtSyntax",18,447],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DoStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DoStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfStmtSyntax",18,449],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IfStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsExprSyntax",18,451],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IsExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `IsExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TryExprSyntax",18,454],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TryExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TryExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownSyntax",18,456],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `UnknownSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemSyntax",18,457],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CaseItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CaseItemSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameSyntax",18,459],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeclNameSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumDeclSyntax",18,461],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `EnumDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprListSyntax",18,463],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExprListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ExprListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNameSyntax",18,465],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcNameSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ObjcNameSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SomeTypeSyntax",18,467],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SomeTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `SomeTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeExprSyntax",18,469],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TypeExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayExprSyntax",18,471],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ArrayExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayTypeSyntax",18,473],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ArrayTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrowExprSyntax",18,475],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrowExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ArrowExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeSyntax",18,477],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AttributeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AwaitExprSyntax",18,479],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AwaitExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `AwaitExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BreakStmtSyntax",18,481],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BreakStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `BreakStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemSyntax",18,483],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchItemSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CatchItemSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassDeclSyntax",18,485],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClassDeclSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ClassDeclSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `CodeBlockSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeferStmtSyntax",18,489],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeferStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `DeferStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseBlockSyntax",18,491],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ElseBlockSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ElseBlockSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForInStmtSyntax",18,493],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ForInStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ForInStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GuardStmtSyntax",18,495],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GuardStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `GuardStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InOutExprSyntax",18,497],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InOutExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `InOutExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ThrowStmtSyntax",18,499],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ThrowStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ThrowStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenListSyntax",18,501],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TokenListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TokenListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprSyntax",18,503],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TupleExprSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeSyntax",18,505],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `TupleTypeSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhileStmtSyntax",18,507],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WhileStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `WhileStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldListSyntax",18,509],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["YieldListSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `YieldListSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldStmtSyntax",18,511],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["YieldStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `YieldStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ContinueStmtSyntax",18,63],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ContinueStmtSyntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"d":"Visiting `ContinueStmtSyntax` specifically.\n  - Parameter node: the node we are visiting.\n  - Returns: how should we continue visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathSyntax",18,25],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessPathSyntax",18],[")",17]],"d":"The function called after visiting `AccessPathSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImportDeclSyntax",18,27],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ImportDeclSyntax",18],[")",17]],"d":"The function called after visiting `ImportDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnStmtSyntax",18,29],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ReturnStmtSyntax",18],[")",17]],"d":"The function called after visiting `ReturnStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SourceFileSyntax",18,31],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SourceFileSyntax",18],[")",17]],"d":"The function called after visiting `SourceFileSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StructDeclSyntax",18,33],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StructDeclSyntax",18],[")",17]],"d":"The function called after visiting `StructDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseSyntax",18,35],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchCaseSyntax",18],[")",17]],"d":"The function called after visiting `SwitchCaseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchStmtSyntax",18,37],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchStmtSyntax",18],[")",17]],"d":"The function called after visiting `SwitchStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseSyntax",18,39],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchClauseSyntax",18],[")",17]],"d":"The function called after visiting `CatchClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureExprSyntax",18],[")",17]],"d":"The function called after visiting `ClosureExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathExprSyntax",18,43],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["KeyPathExprSyntax",18],[")",17]],"d":"The function called after visiting `KeyPathExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TernaryExprSyntax",18,45],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TernaryExprSyntax",18],[")",17]],"d":"The function called after visiting `TernaryExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownDeclSyntax",18,47],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownDeclSyntax",18],[")",17]],"d":"The function called after visiting `UnknownDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownExprSyntax",18,48],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownExprSyntax",18],[")",17]],"d":"The function called after visiting `UnknownExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownStmtSyntax",18,49],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownStmtSyntax",18],[")",17]],"d":"The function called after visiting `UnknownStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownTypeSyntax",18,50],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownTypeSyntax",18],[")",17]],"d":"The function called after visiting `UnknownTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["WhereClauseSyntax",18],[")",17]],"d":"The function called after visiting `WhereClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorDeclSyntax",18,53],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorDeclSyntax",18],[")",17]],"d":"The function called after visiting `AccessorDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorListSyntax",18,55],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorListSyntax",18],[")",17]],"d":"The function called after visiting `AccessorListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementSyntax",18,57],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayElementSyntax",18],[")",17]],"d":"The function called after visiting `ArrayElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemListSyntax",18,59],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CaseItemListSyntax",18],[")",17]],"d":"The function called after visiting `CaseItemListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamSyntax",18,61],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureParamSyntax",18],[")",17]],"d":"The function called after visiting `ClosureParamSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ContinueStmtSyntax",18,63],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ContinueStmtSyntax",18],[")",17]],"d":"The function called after visiting `ContinueStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclModifierSyntax",18,65],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclModifierSyntax",18],[")",17]],"d":"The function called after visiting `DeclModifierSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseDeclSyntax",18,67],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCaseDeclSyntax",18],[")",17]],"d":"The function called after visiting `EnumCaseDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclSyntax",18,69],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionDeclSyntax",18],[")",17]],"d":"The function called after visiting `FunctionDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionTypeSyntax",18,71],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionTypeSyntax",18],[")",17]],"d":"The function called after visiting `FunctionTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigDeclSyntax",18,73],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfConfigDeclSyntax",18],[")",17]],"d":"The function called after visiting `IfConfigDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MetatypeTypeSyntax",18,75],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MetatypeTypeSyntax",18],[")",17]],"d":"The function called after visiting `MetatypeTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ModifierListSyntax",18,77],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ModifierListSyntax",18],[")",17]],"d":"The function called after visiting `ModifierListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorSyntax",18,79],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjCSelectorSyntax",18],[")",17]],"d":"The function called after visiting `ObjCSelectorSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorDeclSyntax",18,81],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OperatorDeclSyntax",18],[")",17]],"d":"The function called after visiting `OperatorDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalTypeSyntax",18,83],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalTypeSyntax",18],[")",17]],"d":"The function called after visiting `OptionalTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ProtocolDeclSyntax",18,85],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ProtocolDeclSyntax",18],[")",17]],"d":"The function called after visiting `ProtocolDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ReturnClauseSyntax",18],[")",17]],"d":"The function called after visiting `ReturnClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SequenceExprSyntax",18,89],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SequenceExprSyntax",18],[")",17]],"d":"The function called after visiting `SequenceExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SuperRefExprSyntax",18,91],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SuperRefExprSyntax",18],[")",17]],"d":"The function called after visiting `SuperRefExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternSyntax",18,93],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TuplePatternSyntax",18],[")",17]],"d":"The function called after visiting `TuplePatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VariableDeclSyntax",18,95],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["VariableDeclSyntax",18],[")",17]],"d":"The function called after visiting `VariableDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VersionTupleSyntax",18,97],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["VersionTupleSyntax",18],[")",17]],"d":"The function called after visiting `VersionTupleSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorBlockSyntax",18,99],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorBlockSyntax",18],[")",17]],"d":"The function called after visiting `AccessorBlockSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsTypePatternSyntax",18,101],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AsTypePatternSyntax",18],[")",17]],"d":"The function called after visiting `AsTypePatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeListSyntax",18,103],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AttributeListSyntax",18],[")",17]],"d":"The function called after visiting `AttributeListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemListSyntax",18,105],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchItemListSyntax",18],[")",17]],"d":"The function called after visiting `CatchItemListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemSyntax",18,107],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CodeBlockItemSyntax",18],[")",17]],"d":"The function called after visiting `CodeBlockItemSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExtensionDeclSyntax",18,109],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExtensionDeclSyntax",18],[")",17]],"d":"The function called after visiting `ExtensionDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeSyntax",18,111],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InheritedTypeSyntax",18],[")",17]],"d":"The function called after visiting `InheritedTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsTypePatternSyntax",18,113],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IsTypePatternSyntax",18],[")",17]],"d":"The function called after visiting `IsTypePatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNamePieceSyntax",18,115],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcNamePieceSyntax",18],[")",17]],"d":"The function called after visiting `ObjcNamePieceSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileExprSyntax",18,117],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFileExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundFileExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundLineExprSyntax",18,119],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundLineExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundLineExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringSegmentSyntax",18,121],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StringSegmentSyntax",18],[")",17]],"d":"The function called after visiting `StringSegmentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptDeclSyntax",18,123],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SubscriptDeclSyntax",18],[")",17]],"d":"The function called after visiting `SubscriptDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptExprSyntax",18,125],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SubscriptExprSyntax",18],[")",17]],"d":"The function called after visiting `SubscriptExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypealiasDeclSyntax",18,127],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypealiasDeclSyntax",18],[")",17]],"d":"The function called after visiting `TypealiasDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssignmentExprSyntax",18,129],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AssignmentExprSyntax",18],[")",17]],"d":"The function called after visiting `AssignmentExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributedTypeSyntax",18,131],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AttributedTypeSyntax",18],[")",17]],"d":"The function called after visiting `AttributedTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryExprSyntax",18,133],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryExprSyntax",18],[")",17]],"d":"The function called after visiting `DictionaryExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryTypeSyntax",18,135],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryTypeSyntax",18],[")",17]],"d":"The function called after visiting `DictionaryTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionStmtSyntax",18,137],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExpressionStmtSyntax",18],[")",17]],"d":"The function called after visiting `ExpressionStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierExprSyntax",18,139],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IdentifierExprSyntax",18],[")",17]],"d":"The function called after visiting `IdentifierExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierListSyntax",18,141],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IdentifierListSyntax",18],[")",17]],"d":"The function called after visiting `IdentifierListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseSyntax",18,143],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfConfigClauseSyntax",18],[")",17]],"d":"The function called after visiting `IfConfigClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListSyntax",18,145],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberDeclListSyntax",18],[")",17]],"d":"The function called after visiting `MemberDeclListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NilLiteralExprSyntax",18,147],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["NilLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `NilLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingSyntax",18,149],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PatternBindingSyntax",18],[")",17]],"d":"The function called after visiting `PatternBindingSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundErrorDeclSyntax",18,151],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundErrorDeclSyntax",18],[")",17]],"d":"The function called after visiting `PoundErrorDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeExprSyntax",18,153],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SpecializeExprSyntax",18],[")",17]],"d":"The function called after visiting `SpecializeExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseListSyntax",18,155],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchCaseListSyntax",18],[")",17]],"d":"The function called after visiting `SwitchCaseListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeAnnotationSyntax",18],[")",17]],"d":"The function called after visiting `TypeAnnotationSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownPatternSyntax",18,159],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownPatternSyntax",18],[")",17]],"d":"The function called after visiting `UnknownPatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseListSyntax",18,160],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchClauseListSyntax",18],[")",17]],"d":"The function called after visiting `CatchClauseListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeSyntax",18,162],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CompositionTypeSyntax",18],[")",17]],"d":"The function called after visiting `CompositionTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CustomAttributeSyntax",18,164],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CustomAttributeSyntax",18],[")",17]],"d":"The function called after visiting `CustomAttributeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclarationStmtSyntax",18,166],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclarationStmtSyntax",18],[")",17]],"d":"The function called after visiting `DeclarationStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementSyntax",18,168],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCaseElementSyntax",18],[")",17]],"d":"The function called after visiting `EnumCaseElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCasePatternSyntax",18,170],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCasePatternSyntax",18],[")",17]],"d":"The function called after visiting `EnumCasePatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FallthroughStmtSyntax",18,172],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FallthroughStmtSyntax",18],[")",17]],"d":"The function called after visiting `FallthroughStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForcedValueExprSyntax",18,174],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ForcedValueExprSyntax",18],[")",17]],"d":"The function called after visiting `ForcedValueExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentSyntax",18,176],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericArgumentSyntax",18],[")",17]],"d":"The function called after visiting `GenericArgumentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerDeclSyntax",18,178],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InitializerDeclSyntax",18],[")",17]],"d":"The function called after visiting `InitializerDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathBaseExprSyntax",18,180],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["KeyPathBaseExprSyntax",18],[")",17]],"d":"The function called after visiting `KeyPathBaseExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberDeclBlockSyntax",18],[")",17]],"d":"The function called after visiting `MemberDeclBlockSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcKeyPathExprSyntax",18,184],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcKeyPathExprSyntax",18],[")",17]],"d":"The function called after visiting `ObjcKeyPathExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalPatternSyntax",18,186],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalPatternSyntax",18],[")",17]],"d":"The function called after visiting `OptionalPatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ParameterClauseSyntax",18],[")",17]],"d":"The function called after visiting `ParameterClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundAssertStmtSyntax",18,190],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundAssertStmtSyntax",18],[")",17]],"d":"The function called after visiting `PoundAssertStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundColumnExprSyntax",18,192],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundColumnExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundColumnExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileIDExprSyntax",18,194],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFileIDExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundFileIDExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RepeatWhileStmtSyntax",18,196],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["RepeatWhileStmtSyntax",18],[")",17]],"d":"The function called after visiting `RepeatWhileStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseLabelSyntax",18,198],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchCaseLabelSyntax",18],[")",17]],"d":"The function called after visiting `SwitchCaseLabelSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WildcardPatternSyntax",18,200],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["WildcardPatternSyntax",18],[")",17]],"d":"The function called after visiting `WildcardPatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementListSyntax",18,202],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayElementListSyntax",18],[")",17]],"d":"The function called after visiting `ArrayElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamListSyntax",18,204],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureParamListSyntax",18],[")",17]],"d":"The function called after visiting `ClosureParamListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureSignatureSyntax",18,206],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureSignatureSyntax",18],[")",17]],"d":"The function called after visiting `ClosureSignatureSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementSyntax",18,208],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConditionElementSyntax",18],[")",17]],"d":"The function called after visiting `ConditionElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentSyntax",18,210],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameArgumentSyntax",18],[")",17]],"d":"The function called after visiting `DeclNameArgumentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FloatLiteralExprSyntax",18,212],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FloatLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `FloatLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionCallExprSyntax",18,214],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionCallExprSyntax",18],[")",17]],"d":"The function called after visiting `FunctionCallExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclNameSyntax",18,216],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionDeclNameSyntax",18],[")",17]],"d":"The function called after visiting `FunctionDeclNameSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterSyntax",18,218],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericParameterSyntax",18],[")",17]],"d":"The function called after visiting `GenericParameterSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberAccessExprSyntax",18,220],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberAccessExprSyntax",18],[")",17]],"d":"The function called after visiting `MemberAccessExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcSelectorExprSyntax",18,222],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcSelectorExprSyntax",18],[")",17]],"d":"The function called after visiting `ObjcSelectorExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixUnaryExprSyntax",18,224],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PostfixUnaryExprSyntax",18],[")",17]],"d":"The function called after visiting `PostfixUnaryExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundWarningDeclSyntax",18,226],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundWarningDeclSyntax",18],[")",17]],"d":"The function called after visiting `PoundWarningDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RegexLiteralExprSyntax",18,228],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["RegexLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `RegexLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementSyntax",18,230],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleExprElementSyntax",18],[")",17]],"d":"The function called after visiting `TupleExprElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementSyntax",18,232],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleTypeElementSyntax",18],[")",17]],"d":"The function called after visiting `TupleTypeElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorParameterSyntax",18,234],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessorParameterSyntax",18],[")",17]],"d":"The function called after visiting `AccessorParameterSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityEntrySyntax",18,236],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityEntrySyntax",18],[")",17]],"d":"The function called after visiting `AvailabilityEntrySyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemListSyntax",18,238],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CodeBlockItemListSyntax",18],[")",17]],"d":"The function called after visiting `CodeBlockItemListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameArgumentsSyntax",18],[")",17]],"d":"The function called after visiting `DeclNameArgumentsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeinitializerDeclSyntax",18,242],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeinitializerDeclSyntax",18],[")",17]],"d":"The function called after visiting `DeinitializerDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementSyntax",18,244],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryElementSyntax",18],[")",17]],"d":"The function called after visiting `DictionaryElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionPatternSyntax",18,246],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExpressionPatternSyntax",18],[")",17]],"d":"The function called after visiting `ExpressionPatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionSegmentSyntax",18,248],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExpressionSegmentSyntax",18],[")",17]],"d":"The function called after visiting `ExpressionSegmentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterSyntax",18,250],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionParameterSyntax",18],[")",17]],"d":"The function called after visiting `FunctionParameterSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionSignatureSyntax",18,252],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionSignatureSyntax",18],[")",17]],"d":"The function called after visiting `FunctionSignatureSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierPatternSyntax",18,254],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IdentifierPatternSyntax",18],[")",17]],"d":"The function called after visiting `IdentifierPatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeListSyntax",18,256],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InheritedTypeListSyntax",18],[")",17]],"d":"The function called after visiting `InheritedTypeListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InitializerClauseSyntax",18],[")",17]],"d":"The function called after visiting `InitializerClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NonEmptyTokenListSyntax",18,260],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["NonEmptyTokenListSyntax",18],[")",17]],"d":"The function called after visiting `NonEmptyTokenListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjCSelectorPieceSyntax",18],[")",17]],"d":"The function called after visiting `ObjCSelectorPieceSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjectLiteralExprSyntax",18,264],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjectLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `ObjectLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFilePathExprSyntax",18,266],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFilePathExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundFilePathExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFunctionExprSyntax",18,268],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundFunctionExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundFunctionExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["QualifiedDeclNameSyntax",18,270],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["QualifiedDeclNameSyntax",18],[")",17]],"d":"The function called after visiting `QualifiedDeclNameSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StringLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `StringLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssociatedtypeDeclSyntax",18,274],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AssociatedtypeDeclSyntax",18],[")",17]],"d":"The function called after visiting `AssociatedtypeDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BinaryOperatorExprSyntax",18,276],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BinaryOperatorExprSyntax",18],[")",17]],"d":"The function called after visiting `BinaryOperatorExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BooleanLiteralExprSyntax",18,278],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BooleanLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `BooleanLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureCaptureItemSyntax",18],[")",17]],"d":"The function called after visiting `ClosureCaptureItemSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseIfContinuationSyntax",18,282],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ElseIfContinuationSyntax",18],[")",17]],"d":"The function called after visiting `ElseIfContinuationSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementSyntax",18,284],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericRequirementSyntax",18],[")",17]],"d":"The function called after visiting `GenericRequirementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericWhereClauseSyntax",18],[")",17]],"d":"The function called after visiting `GenericWhereClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseListSyntax",18,288],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfConfigClauseListSyntax",18],[")",17]],"d":"The function called after visiting `IfConfigClauseListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IntegerLiteralExprSyntax",18,290],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IntegerLiteralExprSyntax",18],[")",17]],"d":"The function called after visiting `IntegerLiteralExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListItemSyntax",18,292],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberDeclListItemSyntax",18],[")",17]],"d":"The function called after visiting `MemberDeclListItemSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingListSyntax",18,294],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PatternBindingListSyntax",18],[")",17]],"d":"The function called after visiting `PatternBindingListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundDsohandleExprSyntax",18,296],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundDsohandleExprSyntax",18],[")",17]],"d":"The function called after visiting `PoundDsohandleExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrefixOperatorExprSyntax",18,298],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrefixOperatorExprSyntax",18],[")",17]],"d":"The function called after visiting `PrefixOperatorExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchDefaultLabelSyntax",18,300],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SwitchDefaultLabelSyntax",18],[")",17]],"d":"The function called after visiting `SwitchDefaultLabelSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessLevelModifierSyntax",18,302],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessLevelModifierSyntax",18],[")",17]],"d":"The function called after visiting `AccessLevelModifierSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathComponentSyntax",18,304],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AccessPathComponentSyntax",18],[")",17]],"d":"The function called after visiting `AccessPathComponentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementListSyntax",18,306],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumCaseElementListSyntax",18],[")",17]],"d":"The function called after visiting `EnumCaseElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentListSyntax",18,308],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericArgumentListSyntax",18],[")",17]],"d":"The function called after visiting `GenericArgumentListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixIfConfigExprSyntax",18,310],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PostfixIfConfigExprSyntax",18],[")",17]],"d":"The function called after visiting `PostfixIfConfigExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationSyntax",18,312],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundSourceLocationSyntax",18],[")",17]],"d":"The function called after visiting `PoundSourceLocationSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupDeclSyntax",18,314],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupDeclSyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SameTypeRequirementSyntax",18,316],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SameTypeRequirementSyntax",18],[")",17]],"d":"The function called after visiting `SameTypeRequirementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TargetFunctionEntrySyntax",18,318],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TargetFunctionEntrySyntax",18],[")",17]],"d":"The function called after visiting `TargetFunctionEntrySyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementSyntax",18,320],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TuplePatternElementSyntax",18],[")",17]],"d":"The function called after visiting `TuplePatternElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ValueBindingPatternSyntax",18,322],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ValueBindingPatternSyntax",18],[")",17]],"d":"The function called after visiting `ValueBindingPatternSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityArgumentSyntax",18],[")",17]],"d":"The function called after visiting `AvailabilityArgumentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilitySpecListSyntax",18,326],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilitySpecListSyntax",18],[")",17]],"d":"The function called after visiting `AvailabilitySpecListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassRestrictionTypeSyntax",18,328],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClassRestrictionTypeSyntax",18],[")",17]],"d":"The function called after visiting `ClassRestrictionTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementListSyntax",18,330],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConditionElementListSyntax",18],[")",17]],"d":"The function called after visiting `ConditionElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentListSyntax",18,332],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameArgumentListSyntax",18],[")",17]],"d":"The function called after visiting `DeclNameArgumentListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterListSyntax",18,334],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericParameterListSyntax",18],[")",17]],"d":"The function called after visiting `GenericParameterListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberTypeIdentifierSyntax",18,336],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MemberTypeIdentifierSyntax",18],[")",17]],"d":"The function called after visiting `MemberTypeIdentifierSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalChainingExprSyntax",18,338],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalChainingExprSyntax",18],[")",17]],"d":"The function called after visiting `OptionalChainingExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SimpleTypeIdentifierSyntax",18,340],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SimpleTypeIdentifierSyntax",18],[")",17]],"d":"The function called after visiting `SimpleTypeIdentifierSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementListSyntax",18,342],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleExprElementListSyntax",18],[")",17]],"d":"The function called after visiting `TupleExprElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementListSyntax",18,344],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleTypeElementListSyntax",18],[")",17]],"d":"The function called after visiting `TupleTypeElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityConditionSyntax",18,346],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityConditionSyntax",18],[")",17]],"d":"The function called after visiting `AvailabilityConditionSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementListSyntax",18,348],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DictionaryElementListSyntax",18],[")",17]],"d":"The function called after visiting `DictionaryElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DiscardAssignmentExprSyntax",18,350],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DiscardAssignmentExprSyntax",18],[")",17]],"d":"The function called after visiting `DiscardAssignmentExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EditorPlaceholderExprSyntax",18,352],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EditorPlaceholderExprSyntax",18],[")",17]],"d":"The function called after visiting `EditorPlaceholderExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterListSyntax",18,354],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["FunctionParameterListSyntax",18],[")",17]],"d":"The function called after visiting `FunctionParameterListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,356],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericArgumentClauseSyntax",18],[")",17]],"d":"The function called after visiting `GenericArgumentClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,358],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[")",17]],"d":"The function called after visiting `PrimaryAssociatedTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralSegmentsSyntax",18,360],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["StringLiteralSegmentsSyntax",18],[")",17]],"d":"The function called after visiting `StringLiteralSegmentsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SymbolicReferenceExprSyntax",18,362],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SymbolicReferenceExprSyntax",18],[")",17]],"d":"The function called after visiting `SymbolicReferenceExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeInheritanceClauseSyntax",18],[")",17]],"d":"The function called after visiting `TypeInheritanceClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,366],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeInitializerClauseSyntax",18],[")",17]],"d":"The function called after visiting `TypeInitializerClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnresolvedPatternExprSyntax",18,368],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnresolvedPatternExprSyntax",18],[")",17]],"d":"The function called after visiting `UnresolvedPatternExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemListSyntax",18,370],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureCaptureItemListSyntax",18],[")",17]],"d":"The function called after visiting `ClosureCaptureItemListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementSyntax",18,372],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CompositionTypeElementSyntax",18],[")",17]],"d":"The function called after visiting `CompositionTypeElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConformanceRequirementSyntax",18,374],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ConformanceRequirementSyntax",18],[")",17]],"d":"The function called after visiting `ConformanceRequirementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamSyntax",18,376],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamSyntax",18],[")",17]],"d":"The function called after visiting `DifferentiabilityParamSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,378],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericParameterClauseSyntax",18],[")",17]],"d":"The function called after visiting `GenericParameterClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementListSyntax",18,380],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GenericRequirementListSyntax",18],[")",17]],"d":"The function called after visiting `GenericRequirementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["LabeledSpecializeEntrySyntax",18,382],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["LabeledSpecializeEntrySyntax",18],[")",17]],"d":"The function called after visiting `LabeledSpecializeEntrySyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureSignatureSyntax",18,384],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClosureCaptureSignatureSyntax",18],[")",17]],"d":"The function called after visiting `ClosureCaptureSignatureSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsSyntax",18,386],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamsSyntax",18],[")",17]],"d":"The function called after visiting `DifferentiabilityParamsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationArgsSyntax",18,388],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PoundSourceLocationArgsSyntax",18],[")",17]],"d":"The function called after visiting `PoundSourceLocationArgsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameListSyntax",18,390],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupNameListSyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupNameListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupRelationSyntax",18,392],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupRelationSyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupRelationSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementListSyntax",18,394],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TuplePatternElementListSyntax",18],[")",17]],"d":"The function called after visiting `TuplePatternElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnavailabilityConditionSyntax",18,396],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnavailabilityConditionSyntax",18],[")",17]],"d":"The function called after visiting `UnavailabilityConditionSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MatchingPatternConditionSyntax",18,398],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MatchingPatternConditionSyntax",18],[")",17]],"d":"The function called after visiting `MatchingPatternConditionSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalBindingConditionSyntax",18,400],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OptionalBindingConditionSyntax",18],[")",17]],"d":"The function called after visiting `OptionalBindingConditionSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssignmentSyntax",18,402],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupAssignmentSyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupAssignmentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeListSyntax",18,404],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrimaryAssociatedTypeListSyntax",18],[")",17]],"d":"The function called after visiting `PrimaryAssociatedTypeListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementListSyntax",18,406],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CompositionTypeElementListSyntax",18],[")",17]],"d":"The function called after visiting `CompositionTypeElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamListSyntax",18,408],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamListSyntax",18],[")",17]],"d":"The function called after visiting `DifferentiabilityParamListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,410],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[")",17]],"d":"The function called after visiting `OperatorPrecedenceAndTypesSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,412],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupNameElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityLabeledArgumentSyntax",18,414],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityLabeledArgumentSyntax",18],[")",17]],"d":"The function called after visiting `AvailabilityLabeledArgumentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeAttributeSpecListSyntax",18,416],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SpecializeAttributeSpecListSyntax",18],[")",17]],"d":"The function called after visiting `SpecializeAttributeSpecListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplementsAttributeArgumentsSyntax",18,418],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ImplementsAttributeArgumentsSyntax",18],[")",17]],"d":"The function called after visiting `ImplementsAttributeArgumentsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NamedAttributeStringArgumentSyntax",18,420],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["NamedAttributeStringArgumentSyntax",18],[")",17]],"d":"The function called after visiting `NamedAttributeStringArgumentSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssociativitySyntax",18,422],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupAssociativitySyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupAssociativitySyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAttributeListSyntax",18,424],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],[")",17]],"d":"The function called after visiting `PrecedenceGroupAttributeListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[")",17]],"d":"The function called after visiting `DifferentiabilityParamsClauseSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityVersionRestrictionSyntax",18,428],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],[")",17]],"d":"The function called after visiting `AvailabilityVersionRestrictionSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[")",17]],"d":"The function called after visiting `MultipleTrailingClosureElementSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,432],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],[")",17]],"d":"The function called after visiting `ImplicitlyUnwrappedOptionalTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiableAttributeArgumentsSyntax",18,434],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18],[")",17]],"d":"The function called after visiting `DifferentiableAttributeArgumentsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,436],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],[")",17]],"d":"The function called after visiting `MultipleTrailingClosureElementListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],[")",17]],"d":"The function called after visiting `DerivativeRegistrationAttributeArgumentsSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenSyntax",18,444],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TokenSyntax",18],[")",17]],"d":"The function called after visiting the node and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsExprSyntax",18,445],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AsExprSyntax",18],[")",17]],"d":"The function called after visiting `AsExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DoStmtSyntax",18,447],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DoStmtSyntax",18],[")",17]],"d":"The function called after visiting `DoStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfStmtSyntax",18,449],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IfStmtSyntax",18],[")",17]],"d":"The function called after visiting `IfStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsExprSyntax",18,451],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["IsExprSyntax",18],[")",17]],"d":"The function called after visiting `IsExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TryExprSyntax",18,454],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TryExprSyntax",18],[")",17]],"d":"The function called after visiting `TryExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownSyntax",18,456],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["UnknownSyntax",18],[")",17]],"d":"The function called after visiting the node and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemSyntax",18,457],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CaseItemSyntax",18],[")",17]],"d":"The function called after visiting `CaseItemSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameSyntax",18,459],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeclNameSyntax",18],[")",17]],"d":"The function called after visiting `DeclNameSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumDeclSyntax",18,461],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["EnumDeclSyntax",18],[")",17]],"d":"The function called after visiting `EnumDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprListSyntax",18,463],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ExprListSyntax",18],[")",17]],"d":"The function called after visiting `ExprListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNameSyntax",18,465],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ObjcNameSyntax",18],[")",17]],"d":"The function called after visiting `ObjcNameSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SomeTypeSyntax",18,467],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["SomeTypeSyntax",18],[")",17]],"d":"The function called after visiting `SomeTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeExprSyntax",18,469],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TypeExprSyntax",18],[")",17]],"d":"The function called after visiting `TypeExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayExprSyntax",18,471],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayExprSyntax",18],[")",17]],"d":"The function called after visiting `ArrayExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayTypeSyntax",18,473],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrayTypeSyntax",18],[")",17]],"d":"The function called after visiting `ArrayTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrowExprSyntax",18,475],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ArrowExprSyntax",18],[")",17]],"d":"The function called after visiting `ArrowExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeSyntax",18,477],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AttributeSyntax",18],[")",17]],"d":"The function called after visiting `AttributeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AwaitExprSyntax",18,479],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["AwaitExprSyntax",18],[")",17]],"d":"The function called after visiting `AwaitExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BreakStmtSyntax",18,481],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["BreakStmtSyntax",18],[")",17]],"d":"The function called after visiting `BreakStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemSyntax",18,483],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CatchItemSyntax",18],[")",17]],"d":"The function called after visiting `CatchItemSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassDeclSyntax",18,485],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ClassDeclSyntax",18],[")",17]],"d":"The function called after visiting `ClassDeclSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["CodeBlockSyntax",18],[")",17]],"d":"The function called after visiting `CodeBlockSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeferStmtSyntax",18,489],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["DeferStmtSyntax",18],[")",17]],"d":"The function called after visiting `DeferStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseBlockSyntax",18,491],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ElseBlockSyntax",18],[")",17]],"d":"The function called after visiting `ElseBlockSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForInStmtSyntax",18,493],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ForInStmtSyntax",18],[")",17]],"d":"The function called after visiting `ForInStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GuardStmtSyntax",18,495],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["GuardStmtSyntax",18],[")",17]],"d":"The function called after visiting `GuardStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InOutExprSyntax",18,497],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["InOutExprSyntax",18],[")",17]],"d":"The function called after visiting `InOutExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ThrowStmtSyntax",18,499],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["ThrowStmtSyntax",18],[")",17]],"d":"The function called after visiting `ThrowStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenListSyntax",18,501],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TokenListSyntax",18],[")",17]],"d":"The function called after visiting `TokenListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprSyntax",18,503],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleExprSyntax",18],[")",17]],"d":"The function called after visiting `TupleExprSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeSyntax",18,505],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["TupleTypeSyntax",18],[")",17]],"d":"The function called after visiting `TupleTypeSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhileStmtSyntax",18,507],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["WhileStmtSyntax",18],[")",17]],"d":"The function called after visiting `WhileStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldListSyntax",18,509],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["YieldListSyntax",18],[")",17]],"d":"The function called after visiting `YieldListSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVisitor","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldStmtSyntax",18,511],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["YieldStmtSyntax",18],[")",17]],"d":"The function called after visiting `YieldStmtSyntax` and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxChildren","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7625},{"p":["SyntaxChildren","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["SyntaxChildrenIndex",18,515]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["SyntaxChildrenIndex",18],[") -> ",17],["SyntaxChildrenIndex",18]],"o":7626},{"p":["SyntaxHashable","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,7779],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"o":7621},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["ParenthesizedSyntax",18,0],[".Protocol) -> ",17],["ParenthesizedSyntax",18,0],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["ParenthesizedSyntax",18],[".Protocol) -> ",17],["ParenthesizedSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`ParenthesizedSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["WithCodeBlockSyntax",18,1],[".Protocol) -> ",17],["WithCodeBlockSyntax",18,1],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["WithCodeBlockSyntax",18],[".Protocol) -> ",17],["WithCodeBlockSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`WithCodeBlockSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["IdentifiedDeclSyntax",18,2],[".Protocol) -> ",17],["IdentifiedDeclSyntax",18,2],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["IdentifiedDeclSyntax",18],[".Protocol) -> ",17],["IdentifiedDeclSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`IdentifiedDeclSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["WithStatementsSyntax",18,3],[".Protocol) -> ",17],["WithStatementsSyntax",18,3],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["WithStatementsSyntax",18],[".Protocol) -> ",17],["WithStatementsSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`WithStatementsSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["WithTrailingCommaSyntax",18,4],[".Protocol) -> ",17],["WithTrailingCommaSyntax",18,4],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["WithTrailingCommaSyntax",18],[".Protocol) -> ",17],["WithTrailingCommaSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`WithTrailingCommaSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["BracedSyntax",18,9],[".Protocol) -> ",17],["BracedSyntax",18,9],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["BracedSyntax",18],[".Protocol) -> ",17],["BracedSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`BracedSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["LabeledSyntax",18,10],[".Protocol) -> ",17],["LabeledSyntax",18,10],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["LabeledSyntax",18],[".Protocol) -> ",17],["LabeledSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`LabeledSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","asProtocol(_:)"],"f":[["func",12],[" ",17],["asProtocol",7],["(",17],["_",1],[": ",17],["DeclGroupSyntax",18,12],[".Protocol) -> ",17],["DeclGroupSyntax",18,12],["?",17]],"s":[["func",12],[" ",17],["asProtocol",7],["(",17],["DeclGroupSyntax",18],[".Protocol) -> ",17],["DeclGroupSyntax",18],["?",17]],"d":"Return the non-type erased version of this syntax node if it conforms to \n`DeclGroupSyntax`. Otherwise return `nil`.\nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["ParenthesizedSyntax",18,0],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["ParenthesizedSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`ParenthesizedSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["WithCodeBlockSyntax",18,1],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["WithCodeBlockSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`WithCodeBlockSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["IdentifiedDeclSyntax",18,2],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["IdentifiedDeclSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`IdentifiedDeclSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["WithStatementsSyntax",18,3],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["WithStatementsSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`WithStatementsSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["WithTrailingCommaSyntax",18,4],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["WithTrailingCommaSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`WithTrailingCommaSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["BracedSyntax",18,9],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["BracedSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`BracedSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["LabeledSyntax",18,10],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["LabeledSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`LabeledSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","isProtocol(_:)"],"f":[["func",12],[" ",17],["isProtocol",7],["(",17],["_",1],[": ",17],["DeclGroupSyntax",18,12],[".Protocol) -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isProtocol",7],["(",17],["DeclGroupSyntax",18],[".Protocol) -> ",17],["Bool",18]],"d":"Check whether the non-type erased version of this syntax node conforms to \n`DeclGroupSyntax`. \nNote that this will incur an existential conversion."},{"p":["SyntaxProtocol","endLocation(converter:afterTrailingTrivia:)"],"f":[["func",12],[" ",17],["endLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18,539],[", ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18,7703],[" = false) -> ",17],["SourceLocation",18,527]],"s":[["func",12],[" ",17],["endLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18],[", ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18],[") -> ",17],["SourceLocation",18]],"d":"The ending location, in the provided file, of this Syntax node.\n- Parameters:\n  - converter: The `SourceLocationConverter` that was previously\n    initialized using the root tree of this node.\n  - afterTrailingTrivia: Whether to skip trailing trivia when getting\n                         the node's location. Defaults to `false`."},{"p":["SyntaxProtocol","sourceRange(converter:afterLeadingTrivia:afterTrailingTrivia:)"],"f":[["func",12],[" ",17],["sourceRange",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18,539],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18,7703],[" = true, ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18,7703],[" = false) -> ",17],["SourceRange",18,523]],"s":[["func",12],[" ",17],["sourceRange",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18],[", ",17],["afterTrailingTrivia",1],[": ",17],["Bool",18],[") -> ",17],["SourceRange",18]],"d":"The source range, in the provided file, of this Syntax node.\n- Parameters:\n  - converter: The `SourceLocationConverter` that was previously\n    initialized using the root tree of this node.\n  - afterLeadingTrivia: Whether to skip leading trivia when getting\n                         the node's start location. Defaults to `true`.\n  - afterTrailingTrivia: Whether to skip trailing trivia when getting\n                         the node's end location. Defaults to `false`."},{"p":["SyntaxProtocol","startLocation(converter:afterLeadingTrivia:)"],"f":[["func",12],[" ",17],["startLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18,539],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18,7703],[" = true) -> ",17],["SourceLocation",18,527]],"s":[["func",12],[" ",17],["startLocation",7],["(",17],["converter",1],[": ",17],["SourceLocationConverter",18],[", ",17],["afterLeadingTrivia",1],[": ",17],["Bool",18],[") -> ",17],["SourceLocation",18]],"d":"The starting location, in the provided file, of this Syntax node.\n- Parameters:\n  - converter: The `SourceLocationConverter` that was previously\n    initialized using the root tree of this node.\n  - afterLeadingTrivia: Whether to skip leading trivia when getting\n                        the node's location. Defaults to `true`."},{"p":["SyntaxProtocol","withoutTrivia()"],"f":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withoutTrivia",7],["() -> ",17],["Self",18]],"d":"Returns a new syntax node with all trivia removed."},{"p":["SyntaxProtocol","classification(at:)"],"f":[["func",12],[" ",17],["classification",7],["(",17],["at",1],[" ",17],["position",2],[": ",17],["AbsolutePosition",18,530],[") -> ",17],["SyntaxClassifiedRange",18,518],["?",17]],"s":[["func",12],[" ",17],["classification",7],["(",17],["at",1],[": ",17],["AbsolutePosition",18],[") -> ",17],["SyntaxClassifiedRange",18],["?",17]],"d":"The `SyntaxClassifiedRange` for an absolute position.\n- Parameters:\n  - at: The absolute position.\n- Returns: The `SyntaxClassifiedRange` for the position or nil if the source text\n  at the given position is unclassified."},{"p":["SyntaxProtocol","classification(at:)"],"f":[["func",12],[" ",17],["classification",7],["(",17],["at",1],[" ",17],["offset",2],[": ",17],["Int",18,7706],[") -> ",17],["SyntaxClassifiedRange",18,518],["?",17]],"s":[["func",12],[" ",17],["classification",7],["(",17],["at",1],[": ",17],["Int",18],[") -> ",17],["SyntaxClassifiedRange",18],["?",17]],"d":"The `SyntaxClassifiedRange` for a relative byte offset.\n- Parameters:\n  - at: The relative to the node byte offset.\n- Returns: The `SyntaxClassifiedRange` for the offset or nil if the source text\n  at the given offset is unclassified."},{"p":["SyntaxProtocol","classifications(in:)"],"f":[["func",12],[" ",17],["classifications",7],["(",17],["in",1],[" ",17],["range",2],[": ",17],["ByteSourceRange",18,528],[") -> ",17],["SyntaxClassifications",18,516]],"s":[["func",12],[" ",17],["classifications",7],["(",17],["in",1],[": ",17],["ByteSourceRange",18],[") -> ",17],["SyntaxClassifications",18]],"d":"Sequence of `SyntaxClassifiedRange`s contained in this syntax node within\na relative range.\n\nThe provided classified ranges may extend beyond the provided `range`.\nActive classifications (non-`none`) will extend the range to include the\nfull classified range (e.g. from the beginning of the comment block), while\n`none` classified ranges will extend to the beginning or end of the token\nthat the `range` touches.\nIt is guaranteed that no classified range will be provided that doesn't\nintersect the provided `range`.\n\n- Parameters:\n  - in: The relative byte range to pull `SyntaxClassifiedRange`s from.\n- Returns: Sequence of `SyntaxClassifiedRange`s."},{"p":["SyntaxProtocol","withLeadingTrivia(_:)"],"f":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["_",1],[" ",17],["leadingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withLeadingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["Self",18]],"d":"Returns a new syntax node with its leading trivia replaced\nby the provided trivia."},{"p":["SyntaxProtocol","withTrailingTrivia(_:)"],"f":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["_",1],[" ",17],["trailingTrivia",2],[": ",17],["Trivia",18,534],[") -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withTrailingTrivia",7],["(",17],["Trivia",18],[") -> ",17],["Self",18]],"d":"Returns a new syntax node with its trailing trivia replaced\nby the provided trivia."},{"p":["SyntaxProtocol","withoutLeadingTrivia()"],"f":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withoutLeadingTrivia",7],["() -> ",17],["Self",18]],"d":"Returns a new syntax node with its leading trivia removed."},{"p":["SyntaxProtocol","withoutTrailingTrivia()"],"f":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["Self",18]],"s":[["func",12],[" ",17],["withoutTrailingTrivia",7],["() -> ",17],["Self",18]],"d":"Returns a new syntax node with its trailing trivia removed."},{"p":["SyntaxProtocol","write(to:)"],"f":[["func",12],[" ",17],["write",7],["<",17],["Target",0],[">(",17],["to",1],[" ",17],["target",2],[": ",17],["inout",12],[" ",17],["Target",18],[") ",17],["where",12],[" ",17],["Target",18],[" : ",17],["TextOutputStream",18,7762]],"s":[["func",12],[" ",17],["write",7],["<",17],["Target",0],[">(",17],["to",1],[": ",17],["inout",12],[" ",17],["Target",18],[")",17]],"c":[["Target",1,"TextOutputStream",7762]],"g":[["Target",0,1]],"d":"Prints the raw value of this node to the provided stream.\n- Parameter stream: The stream to which to print the raw tree."},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundErrorDeclSyntax",18,151],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundErrorDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `PoundErrorDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerDeclSyntax",18,178],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InitializerDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `InitializerDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundWarningDeclSyntax",18,226],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundWarningDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `PoundWarningDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeinitializerDeclSyntax",18,242],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeinitializerDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `DeinitializerDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssociatedtypeDeclSyntax",18,274],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AssociatedtypeDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `AssociatedtypeDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupDeclSyntax",18,314],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `PrecedenceGroupDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationSyntax",18,312],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundSourceLocationSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `PoundSourceLocationSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumDeclSyntax",18,461],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `EnumDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassDeclSyntax",18,485],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClassDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `ClassDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImportDeclSyntax",18,27],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImportDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `ImportDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StructDeclSyntax",18,33],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StructDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `StructDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownDeclSyntax",18,47],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `UnknownDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorDeclSyntax",18,53],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `AccessorDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseDeclSyntax",18,67],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `EnumCaseDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclSyntax",18,69],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `FunctionDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigDeclSyntax",18,73],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `IfConfigDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorDeclSyntax",18,81],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OperatorDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `OperatorDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ProtocolDeclSyntax",18,85],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ProtocolDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `ProtocolDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VariableDeclSyntax",18,95],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["VariableDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `VariableDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExtensionDeclSyntax",18,109],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExtensionDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `ExtensionDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptDeclSyntax",18,123],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SubscriptDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `SubscriptDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypealiasDeclSyntax",18,127],[") -> ",17],["DeclSyntax",18,440]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypealiasDeclSyntax",18],[") -> ",17],["DeclSyntax",18]],"d":"Visit a `TypealiasDeclSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AssignmentExprSyntax",18,129],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AssignmentExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `AssignmentExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryExprSyntax",18,133],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `DictionaryExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierExprSyntax",18,139],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `IdentifierExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NilLiteralExprSyntax",18,147],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NilLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `NilLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeExprSyntax",18,153],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SpecializeExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `SpecializeExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForcedValueExprSyntax",18,174],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ForcedValueExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ForcedValueExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathBaseExprSyntax",18,180],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["KeyPathBaseExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `KeyPathBaseExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcKeyPathExprSyntax",18,184],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcKeyPathExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ObjcKeyPathExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundColumnExprSyntax",18,192],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundColumnExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundColumnExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FloatLiteralExprSyntax",18,212],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FloatLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `FloatLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionCallExprSyntax",18,214],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionCallExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `FunctionCallExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberAccessExprSyntax",18,220],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberAccessExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `MemberAccessExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcSelectorExprSyntax",18,222],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcSelectorExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ObjcSelectorExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixUnaryExprSyntax",18,224],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PostfixUnaryExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PostfixUnaryExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RegexLiteralExprSyntax",18,228],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["RegexLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `RegexLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjectLiteralExprSyntax",18,264],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjectLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ObjectLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFilePathExprSyntax",18,266],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFilePathExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundFilePathExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFunctionExprSyntax",18,268],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFunctionExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundFunctionExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralExprSyntax",18,272],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `StringLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BinaryOperatorExprSyntax",18,276],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BinaryOperatorExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `BinaryOperatorExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BooleanLiteralExprSyntax",18,278],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BooleanLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `BooleanLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IntegerLiteralExprSyntax",18,290],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IntegerLiteralExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `IntegerLiteralExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundDsohandleExprSyntax",18,296],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundDsohandleExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundDsohandleExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrefixOperatorExprSyntax",18,298],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrefixOperatorExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PrefixOperatorExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PostfixIfConfigExprSyntax",18,310],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PostfixIfConfigExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PostfixIfConfigExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileIDExprSyntax",18,194],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFileIDExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundFileIDExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalChainingExprSyntax",18,338],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalChainingExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `OptionalChainingExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DiscardAssignmentExprSyntax",18,350],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DiscardAssignmentExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `DiscardAssignmentExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EditorPlaceholderExprSyntax",18,352],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EditorPlaceholderExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `EditorPlaceholderExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SymbolicReferenceExprSyntax",18,362],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SymbolicReferenceExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `SymbolicReferenceExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnresolvedPatternExprSyntax",18,368],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnresolvedPatternExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `UnresolvedPatternExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsExprSyntax",18,445],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AsExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `AsExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsExprSyntax",18,451],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IsExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `IsExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TryExprSyntax",18,454],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TryExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `TryExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeExprSyntax",18,469],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `TypeExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayExprSyntax",18,471],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ArrayExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrowExprSyntax",18,475],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrowExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ArrowExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AwaitExprSyntax",18,479],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AwaitExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `AwaitExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InOutExprSyntax",18,497],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InOutExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `InOutExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprSyntax",18,503],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `TupleExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureExprSyntax",18,41],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `ClosureExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["KeyPathExprSyntax",18,43],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["KeyPathExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `KeyPathExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TernaryExprSyntax",18,45],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TernaryExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `TernaryExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownExprSyntax",18,48],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `UnknownExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SequenceExprSyntax",18,89],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SequenceExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `SequenceExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SuperRefExprSyntax",18,91],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SuperRefExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `SuperRefExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundFileExprSyntax",18,117],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundFileExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundFileExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundLineExprSyntax",18,119],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundLineExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `PoundLineExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SubscriptExprSyntax",18,125],[") -> ",17],["ExprSyntax",18,441]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SubscriptExprSyntax",18],[") -> ",17],["ExprSyntax",18]],"d":"Visit a `SubscriptExprSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionStmtSyntax",18,137],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `ExpressionStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclarationStmtSyntax",18,166],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclarationStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `DeclarationStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FallthroughStmtSyntax",18,172],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FallthroughStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `FallthroughStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundAssertStmtSyntax",18,190],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundAssertStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `PoundAssertStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["RepeatWhileStmtSyntax",18,196],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["RepeatWhileStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `RepeatWhileStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DoStmtSyntax",18,447],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DoStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `DoStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfStmtSyntax",18,449],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `IfStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["BreakStmtSyntax",18,481],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["BreakStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `BreakStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeferStmtSyntax",18,489],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeferStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `DeferStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ForInStmtSyntax",18,493],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ForInStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `ForInStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GuardStmtSyntax",18,495],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GuardStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `GuardStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ThrowStmtSyntax",18,499],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ThrowStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `ThrowStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhileStmtSyntax",18,507],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WhileStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `WhileStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldStmtSyntax",18,511],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["YieldStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `YieldStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnStmtSyntax",18,29],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ReturnStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `ReturnStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchStmtSyntax",18,37],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `SwitchStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownStmtSyntax",18,49],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `UnknownStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ContinueStmtSyntax",18,63],[") -> ",17],["StmtSyntax",18,442]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ContinueStmtSyntax",18],[") -> ",17],["StmtSyntax",18]],"d":"Visit a `ContinueStmtSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributedTypeSyntax",18,131],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributedTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `AttributedTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryTypeSyntax",18,135],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `DictionaryTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeSyntax",18,162],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `CompositionTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClassRestrictionTypeSyntax",18,328],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClassRestrictionTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `ClassRestrictionTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18,432],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImplicitlyUnwrappedOptionalTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `ImplicitlyUnwrappedOptionalTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SomeTypeSyntax",18,467],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SomeTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `SomeTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayTypeSyntax",18,473],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `ArrayTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeSyntax",18,505],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `TupleTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberTypeIdentifierSyntax",18,336],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberTypeIdentifierSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `MemberTypeIdentifierSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SimpleTypeIdentifierSyntax",18,340],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SimpleTypeIdentifierSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `SimpleTypeIdentifierSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownTypeSyntax",18,50],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `UnknownTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionTypeSyntax",18,71],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `FunctionTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MetatypeTypeSyntax",18,75],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MetatypeTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `MetatypeTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalTypeSyntax",18,83],[") -> ",17],["TypeSyntax",18,443]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalTypeSyntax",18],[") -> ",17],["TypeSyntax",18]],"d":"Visit a `OptionalTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionPatternSyntax",18,246],[") -> ",17],["PatternSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionPatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `ExpressionPatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierPatternSyntax",18,254],[") -> ",17],["PatternSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierPatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `IdentifierPatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ValueBindingPatternSyntax",18,322],[") -> ",17],["PatternSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ValueBindingPatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `ValueBindingPatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternSyntax",18,93],[") -> ",17],["PatternSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `TuplePatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AsTypePatternSyntax",18,101],[") -> ",17],["PatternSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AsTypePatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `AsTypePatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IsTypePatternSyntax",18,113],[") -> ",17],["PatternSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IsTypePatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `IsTypePatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownPatternSyntax",18,159],[") -> ",17],["PatternSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownPatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `UnknownPatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCasePatternSyntax",18,170],[") -> ",17],["PatternSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCasePatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `EnumCasePatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalPatternSyntax",18,186],[") -> ",17],["PatternSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalPatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `OptionalPatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WildcardPatternSyntax",18,200],[") -> ",17],["PatternSyntax",18,453]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WildcardPatternSyntax",18],[") -> ",17],["PatternSyntax",18]],"d":"Visit a `WildcardPatternSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathSyntax",18,25],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessPathSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AccessPathSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SourceFileSyntax",18,31],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SourceFileSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SourceFileSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseSyntax",18,35],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SwitchCaseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseSyntax",18,39],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CatchClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["WhereClauseSyntax",18,51],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["WhereClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `WhereClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorListSyntax",18,55],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AccessorListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementSyntax",18,57],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ArrayElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemListSyntax",18,59],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CaseItemListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CaseItemListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamSyntax",18,61],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureParamSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ClosureParamSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclModifierSyntax",18,65],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclModifierSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DeclModifierSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ModifierListSyntax",18,77],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ModifierListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ModifierListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorSyntax",18,79],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjCSelectorSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ObjCSelectorSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ReturnClauseSyntax",18,87],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ReturnClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ReturnClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["VersionTupleSyntax",18,97],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["VersionTupleSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `VersionTupleSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorBlockSyntax",18,99],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorBlockSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AccessorBlockSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeListSyntax",18,103],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributeListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AttributeListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemListSyntax",18,105],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchItemListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CatchItemListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemSyntax",18,107],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockItemSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CodeBlockItemSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeSyntax",18,111],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InheritedTypeSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `InheritedTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNamePieceSyntax",18,115],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcNamePieceSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ObjcNamePieceSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringSegmentSyntax",18,121],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringSegmentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `StringSegmentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IdentifierListSyntax",18,141],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IdentifierListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `IdentifierListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseSyntax",18,143],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `IfConfigClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListSyntax",18,145],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `MemberDeclListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingSyntax",18,149],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PatternBindingSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PatternBindingSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseListSyntax",18,155],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SwitchCaseListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeAnnotationSyntax",18,157],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeAnnotationSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TypeAnnotationSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchClauseListSyntax",18,160],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchClauseListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CatchClauseListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CustomAttributeSyntax",18,164],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CustomAttributeSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CustomAttributeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementSyntax",18,168],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `EnumCaseElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentSyntax",18,176],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericArgumentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclBlockSyntax",18,182],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclBlockSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `MemberDeclBlockSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ParameterClauseSyntax",18,188],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ParameterClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ParameterClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchCaseLabelSyntax",18,198],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchCaseLabelSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SwitchCaseLabelSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ArrayElementListSyntax",18,202],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ArrayElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ArrayElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureParamListSyntax",18,204],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureParamListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ClosureParamListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureSignatureSyntax",18,206],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureSignatureSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ClosureSignatureSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementSyntax",18,208],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConditionElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ConditionElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentSyntax",18,210],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DeclNameArgumentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionDeclNameSyntax",18,216],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionDeclNameSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `FunctionDeclNameSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterSyntax",18,218],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericParameterSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementSyntax",18,230],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TupleExprElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementSyntax",18,232],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TupleTypeElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessorParameterSyntax",18,234],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessorParameterSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AccessorParameterSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityEntrySyntax",18,236],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityEntrySyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AvailabilityEntrySyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockItemListSyntax",18,238],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockItemListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CodeBlockItemListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentsSyntax",18,240],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DeclNameArgumentsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementSyntax",18,244],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DictionaryElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExpressionSegmentSyntax",18,248],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExpressionSegmentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ExpressionSegmentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterSyntax",18,250],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionParameterSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `FunctionParameterSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionSignatureSyntax",18,252],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionSignatureSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `FunctionSignatureSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InheritedTypeListSyntax",18,256],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InheritedTypeListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `InheritedTypeListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["InitializerClauseSyntax",18,258],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["InitializerClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `InitializerClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NonEmptyTokenListSyntax",18,260],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NonEmptyTokenListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `NonEmptyTokenListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjCSelectorPieceSyntax",18,262],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjCSelectorPieceSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ObjCSelectorPieceSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["QualifiedDeclNameSyntax",18,270],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["QualifiedDeclNameSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `QualifiedDeclNameSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemSyntax",18,280],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureItemSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ClosureCaptureItemSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseIfContinuationSyntax",18,282],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ElseIfContinuationSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ElseIfContinuationSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementSyntax",18,284],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericRequirementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericRequirementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericWhereClauseSyntax",18,286],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericWhereClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericWhereClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["IfConfigClauseListSyntax",18,288],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["IfConfigClauseListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `IfConfigClauseListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MemberDeclListItemSyntax",18,292],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MemberDeclListItemSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `MemberDeclListItemSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PatternBindingListSyntax",18,294],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PatternBindingListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PatternBindingListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SwitchDefaultLabelSyntax",18,300],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SwitchDefaultLabelSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SwitchDefaultLabelSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessLevelModifierSyntax",18,302],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessLevelModifierSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AccessLevelModifierSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AccessPathComponentSyntax",18,304],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AccessPathComponentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AccessPathComponentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["EnumCaseElementListSyntax",18,306],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["EnumCaseElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `EnumCaseElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentListSyntax",18,308],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericArgumentListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SameTypeRequirementSyntax",18,316],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SameTypeRequirementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SameTypeRequirementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TargetFunctionEntrySyntax",18,318],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TargetFunctionEntrySyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TargetFunctionEntrySyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementSyntax",18,320],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TuplePatternElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityArgumentSyntax",18,324],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityArgumentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AvailabilityArgumentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilitySpecListSyntax",18,326],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilitySpecListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AvailabilitySpecListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConditionElementListSyntax",18,330],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConditionElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ConditionElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameArgumentListSyntax",18,332],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameArgumentListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DeclNameArgumentListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterListSyntax",18,334],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericParameterListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleExprElementListSyntax",18,342],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleExprElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TupleExprElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TupleTypeElementListSyntax",18,344],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TupleTypeElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TupleTypeElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityConditionSyntax",18,346],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityConditionSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AvailabilityConditionSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DictionaryElementListSyntax",18,348],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DictionaryElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DictionaryElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["FunctionParameterListSyntax",18,354],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["FunctionParameterListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `FunctionParameterListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericArgumentClauseSyntax",18,356],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericArgumentClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericArgumentClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeSyntax",18,358],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrimaryAssociatedTypeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["StringLiteralSegmentsSyntax",18,360],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["StringLiteralSegmentsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `StringLiteralSegmentsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInheritanceClauseSyntax",18,364],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeInheritanceClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TypeInheritanceClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TypeInitializerClauseSyntax",18,366],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TypeInitializerClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TypeInitializerClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureItemListSyntax",18,370],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureItemListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ClosureCaptureItemListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementSyntax",18,372],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CompositionTypeElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ConformanceRequirementSyntax",18,374],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ConformanceRequirementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ConformanceRequirementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamSyntax",18,376],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DifferentiabilityParamSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericParameterClauseSyntax",18,378],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericParameterClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericParameterClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["GenericRequirementListSyntax",18,380],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["GenericRequirementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `GenericRequirementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["LabeledSpecializeEntrySyntax",18,382],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["LabeledSpecializeEntrySyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `LabeledSpecializeEntrySyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ClosureCaptureSignatureSyntax",18,384],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ClosureCaptureSignatureSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ClosureCaptureSignatureSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsSyntax",18,386],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DifferentiabilityParamsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PoundSourceLocationArgsSyntax",18,388],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PoundSourceLocationArgsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PoundSourceLocationArgsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameListSyntax",18,390],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupNameListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrecedenceGroupNameListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupRelationSyntax",18,392],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupRelationSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrecedenceGroupRelationSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TuplePatternElementListSyntax",18,394],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TuplePatternElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TuplePatternElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnavailabilityConditionSyntax",18,396],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnavailabilityConditionSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `UnavailabilityConditionSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MatchingPatternConditionSyntax",18,398],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MatchingPatternConditionSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `MatchingPatternConditionSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OptionalBindingConditionSyntax",18,400],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OptionalBindingConditionSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `OptionalBindingConditionSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssignmentSyntax",18,402],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAssignmentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrecedenceGroupAssignmentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrimaryAssociatedTypeListSyntax",18,404],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrimaryAssociatedTypeListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrimaryAssociatedTypeListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CompositionTypeElementListSyntax",18,406],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CompositionTypeElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CompositionTypeElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamListSyntax",18,408],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DifferentiabilityParamListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["OperatorPrecedenceAndTypesSyntax",18,410],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["OperatorPrecedenceAndTypesSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `OperatorPrecedenceAndTypesSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupNameElementSyntax",18,412],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupNameElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrecedenceGroupNameElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityLabeledArgumentSyntax",18,414],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityLabeledArgumentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AvailabilityLabeledArgumentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["SpecializeAttributeSpecListSyntax",18,416],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["SpecializeAttributeSpecListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `SpecializeAttributeSpecListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ImplementsAttributeArgumentsSyntax",18,418],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ImplementsAttributeArgumentsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ImplementsAttributeArgumentsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["NamedAttributeStringArgumentSyntax",18,420],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["NamedAttributeStringArgumentSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `NamedAttributeStringArgumentSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAssociativitySyntax",18,422],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAssociativitySyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrecedenceGroupAssociativitySyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["PrecedenceGroupAttributeListSyntax",18,424],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["PrecedenceGroupAttributeListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `PrecedenceGroupAttributeListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiabilityParamsClauseSyntax",18,426],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiabilityParamsClauseSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DifferentiabilityParamsClauseSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AvailabilityVersionRestrictionSyntax",18,428],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AvailabilityVersionRestrictionSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AvailabilityVersionRestrictionSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementSyntax",18,430],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MultipleTrailingClosureElementSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `MultipleTrailingClosureElementSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DifferentiableAttributeArgumentsSyntax",18,434],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DifferentiableAttributeArgumentsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DifferentiableAttributeArgumentsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["MultipleTrailingClosureElementListSyntax",18,436],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["MultipleTrailingClosureElementListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `MultipleTrailingClosureElementListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DerivativeRegistrationAttributeArgumentsSyntax",18,438],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DerivativeRegistrationAttributeArgumentsSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DerivativeRegistrationAttributeArgumentsSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["token",2],[": ",17],["TokenSyntax",18,444],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TokenSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TokenSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["UnknownSyntax",18,456],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["UnknownSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit an `UnknownSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CaseItemSyntax",18,457],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CaseItemSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CaseItemSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["DeclNameSyntax",18,459],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["DeclNameSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `DeclNameSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ExprListSyntax",18,463],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ExprListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ExprListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ObjcNameSyntax",18,465],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ObjcNameSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ObjcNameSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["AttributeSyntax",18,477],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["AttributeSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `AttributeSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CatchItemSyntax",18,483],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CatchItemSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CatchItemSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["CodeBlockSyntax",18,487],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["CodeBlockSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `CodeBlockSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["ElseBlockSyntax",18,491],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["ElseBlockSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `ElseBlockSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["TokenListSyntax",18,501],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["TokenListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `TokenListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["YieldListSyntax",18,509],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["YieldListSyntax",18],[") -> ",17],["Syntax",18]],"d":"Visit a `YieldListSyntax`.\n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visit(_:)"],"f":[["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[") -> ",17],["Syntax",18,513]],"s":[["func",12],[" ",17],["visit",7],["(",17],["Syntax",18],[") -> ",17],["Syntax",18]],"d":"Visit any Syntax node. \n  - Parameter node: the node that is being visited\n  - Returns: the rewritten node"},{"p":["SyntaxRewriter","visitAny(_:)"],"f":[["func",12],[" ",17],["visitAny",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[") -> ",17],["Syntax",18,513],["?",17]],"s":[["func",12],[" ",17],["visitAny",7],["(",17],["Syntax",18],[") -> ",17],["Syntax",18],["?",17]],"d":"Override point to choose custom visitation dispatch instead of the\nspecialized `visit(_:)` methods. Use this instead of those methods if\nyou intend to dynamically dispatch rewriting behavior.\n- note: If this method returns a non-nil result, the specialized\n        `visit(_:)` methods will not be called for this node and the \n        visited node will be replaced by the returned node in the \n        rewritten tree."},{"p":["SyntaxRewriter","visitPre(_:)"],"f":[["func",12],[" ",17],["visitPre",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["visitPre",7],["(",17],["Syntax",18],[")",17]],"d":"The function called before visiting the node and its descendents.\n  - node: the node we are about to visit."},{"p":["SyntaxRewriter","visitPost(_:)"],"f":[["func",12],[" ",17],["visitPost",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[")",17]],"s":[["func",12],[" ",17],["visitPost",7],["(",17],["Syntax",18],[")",17]],"d":"The function called after visiting the node and its descendents.\n  - node: the node we just finished visiting."},{"p":["SyntaxVerifier","visitAny(_:)"],"f":[["override",12],[" ",17],["func",12],[" ",17],["visitAny",7],["(",17],["_",1],[" ",17],["node",2],[": ",17],["Syntax",18,513],[") -> ",17],["SyntaxVisitorContinueKind",18,19]],"s":[["func",12],[" ",17],["visitAny",7],["(",17],["Syntax",18],[") -> ",17],["SyntaxVisitorContinueKind",18]],"o":6226},{"p":["SourceEdit","intersectsRange(_:)"],"f":[["func",12],[" ",17],["intersectsRange",7],["(",17],["_",1],[" ",17],["other",2],[": ",17],["ByteSourceRange",18,528],[") -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["intersectsRange",7],["(",17],["ByteSourceRange",18],[") -> ",17],["Bool",18]]},{"p":["SourceEdit","intersectsOrTouchesRange(_:)"],"f":[["func",12],[" ",17],["intersectsOrTouchesRange",7],["(",17],["_",1],[" ",17],["other",2],[": ",17],["ByteSourceRange",18,528],[") -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["intersectsOrTouchesRange",7],["(",17],["ByteSourceRange",18],[") -> ",17],["Bool",18]]},{"p":["TriviaPiece","write(to:)"],"f":[["func",12],[" ",17],["write",7],["<",17],["Target",0],[">(",17],["to",1],[" ",17],["target",2],[": ",17],["inout",12],[" ",17],["Target",18],[") ",17],["where",12],[" ",17],["Target",18],[" : ",17],["TextOutputStream",18,7762]],"s":[["func",12],[" ",17],["write",7],["<",17],["Target",0],[">(",17],["to",1],[": ",17],["inout",12],[" ",17],["Target",18],[")",17]],"c":[["Target",1,"TextOutputStream",7762]],"g":[["Target",0,0]],"d":"Prints the provided trivia as they would be written in a source file.\n\n- Parameter stream: The stream to which to print the trivia.","o":7766},{"p":["TokenSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TokenSequence",18,525],[".",17],["Iterator",18,526]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["TokenSequence",18],[".",17],["Iterator",18]],"o":7660},{"p":["TokenSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18,444],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18],["?",17]],"o":7760},{"p":["TokenSequence","reversed()"],"f":[["func",12],[" ",17],["reversed",7],["() -> ",17],["ReversedTokenSequence",18,531]],"s":[["func",12],[" ",17],["reversed",7],["() -> ",17],["ReversedTokenSequence",18]]},{"p":["ByteSourceRange","intersects(_:)"],"f":[["func",12],[" ",17],["intersects",7],["(",17],["_",1],[" ",17],["other",2],[": ",17],["ByteSourceRange",18,528],[") -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["intersects",7],["(",17],["ByteSourceRange",18],[") -> ",17],["Bool",18]]},{"p":["ByteSourceRange","intersected(_:)"],"f":[["func",12],[" ",17],["intersected",7],["(",17],["_",1],[" ",17],["other",2],[": ",17],["ByteSourceRange",18,528],[") -> ",17],["ByteSourceRange",18,528]],"s":[["func",12],[" ",17],["intersected",7],["(",17],["ByteSourceRange",18],[") -> ",17],["ByteSourceRange",18]],"d":"Returns the byte range for the overlapping region between two ranges."},{"p":["ByteSourceRange","intersectsOrTouches(_:)"],"f":[["func",12],[" ",17],["intersectsOrTouches",7],["(",17],["_",1],[" ",17],["other",2],[": ",17],["ByteSourceRange",18,528],[") -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["intersectsOrTouches",7],["(",17],["ByteSourceRange",18],[") -> ",17],["Bool",18]]},{"p":["ReversedTokenSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ReversedTokenSequence",18,531],[".",17],["Iterator",18,532]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ReversedTokenSequence",18],[".",17],["Iterator",18]],"o":7660},{"p":["ReversedTokenSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18,444],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["TokenSyntax",18],["?",17]],"o":7760},{"p":["ReversedTokenSequence","reversed()"],"f":[["func",12],[" ",17],["reversed",7],["() -> ",17],["TokenSequence",18,525]],"s":[["func",12],[" ",17],["reversed",7],["() -> ",17],["TokenSequence",18]]},{"p":["IncrementalParseLookup","lookUp(_:kind:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["lookUp",7],["(",17],["_",1],[" ",17],["newOffset",2],[": ",17],["Int",18,7706],[", ",17],["kind",1],[": ",17],["CSyntaxKind",18,7618],[") -> ",17],["SyntaxNode",18,520],["?",17]],"s":[["func",12],[" ",17],["lookUp",7],["(",17],["Int",18],[", ",17],["kind",1],[": ",17],["CSyntaxKind",18],[") -> ",17],["SyntaxNode",18],["?",17]],"d":"Does a lookup to see if the current source `offset` should be associated\nwith a known `Syntax` node and its region skipped during parsing.\n\nThe implementation is responsible for checking whether an incremental edit\nhas invalidated the previous `Syntax` node.\n\n- Parameters:\n  - offset: The byte offset of the source string that is currently parsed.\n  - kind: The `CSyntaxKind` that the parser expects at this position.\n- Returns: A `SyntaxNode` node from the previous parse invocation,\n           representing the contents of this region, if it is still valid\n           to re-use. `nil` otherwise."},{"p":["SourceLocationConverter","isValid(line:column:)"],"f":[["func",12],[" ",17],["isValid",7],["(",17],["line",1],[": ",17],["Int",18,7706],[", ",17],["column",1],[": ",17],["Int",18,7706],[") -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isValid",7],["(",17],["line",1],[": ",17],["Int",18],[", ",17],["column",1],[": ",17],["Int",18],[") -> ",17],["Bool",18]],"d":"Returns false if the `line`/`column` pair is out-of-bounds for the file or\nthat specific line."},{"p":["SourceLocationConverter","isValid(position:)"],"f":[["func",12],[" ",17],["isValid",7],["(",17],["position",1],[" ",17],["pos",2],[": ",17],["AbsolutePosition",18,530],[") -> ",17],["Bool",18,7703]],"s":[["func",12],[" ",17],["isValid",7],["(",17],["position",1],[": ",17],["AbsolutePosition",18],[") -> ",17],["Bool",18]],"d":"Returns false if the `position` is out-of-bounds for the file."},{"p":["SourceLocationConverter","location(for:)"],"f":[["func",12],[" ",17],["location",7],["(",17],["for",1],[" ",17],["origpos",2],[": ",17],["AbsolutePosition",18,530],[") -> ",17],["SourceLocation",18,527]],"s":[["func",12],[" ",17],["location",7],["(",17],["for",1],[": ",17],["AbsolutePosition",18],[") -> ",17],["SourceLocation",18]],"d":"Convert a `AbsolutePosition` to a `SourceLocation`. If the position is\nexceeding the file length then the `SourceLocation` for the end of file\nis returned. If position is negative the location for start of file is\nreturned."},{"p":["SourceLocationConverter","position(ofLine:column:)"],"f":[["func",12],[" ",17],["position",7],["(",17],["ofLine",1],[" ",17],["line",2],[": ",17],["Int",18,7706],[", ",17],["column",1],[": ",17],["Int",18,7706],[") -> ",17],["AbsolutePosition",18,530]],"s":[["func",12],[" ",17],["position",7],["(",17],["ofLine",1],[": ",17],["Int",18],[", ",17],["column",1],[": ",17],["Int",18],[") -> ",17],["AbsolutePosition",18]],"d":"Convert a line/column to a `SourceLocation`. If the line/column exceeds\nthe boundaries of the file or the line, the position returned is one\nadjusted to the closest boundary (beginning/end of file or line).\n\n- Parameters:\n  - line: A 1-based line number.\n  - column: A 1-based, UTF8 offset from the start of line."},{"p":["IncrementalParseReusedNodeDelegate","parserReusedNode(range:previousNode:)"],"f":[["func",12],[" ",17],["parserReusedNode",7],["(",17],["range",1],[": ",17],["ByteSourceRange",18,528],[", ",17],["previousNode",1],[": ",17],["SyntaxNode",18,520],[")",17]],"s":[["func",12],[" ",17],["parserReusedNode",7],["(",17],["range",1],[": ",17],["ByteSourceRange",18],[", ",17],["previousNode",1],[": ",17],["SyntaxNode",18],[")",17]],"d":"Accepts the range and `Syntax` node of skipped source region.\n\n- Parameters:\n  - range: The source region of the currently parsed source.\n  - previousNode: The node from the previous tree that is associated with\n                  the skipped source region."},{"p":["IncrementalParseReusedNodeCollector","parserReusedNode(range:previousNode:)"],"f":[["func",12],[" ",17],["parserReusedNode",7],["(",17],["range",1],[": ",17],["ByteSourceRange",18,528],[", ",17],["previousNode",1],[": ",17],["SyntaxNode",18,520],[")",17]],"s":[["func",12],[" ",17],["parserReusedNode",7],["(",17],["range",1],[": ",17],["ByteSourceRange",18],[", ",17],["previousNode",1],[": ",17],["SyntaxNode",18],[")",17]],"o":7510},{"p":["Trivia","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["Int",18,7706],[") -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"o":7724},{"p":["Trivia","appending(_:)"],"f":[["func",12],[" ",17],["appending",7],["(",17],["_",1],[" ",17],["piece",2],[": ",17],["TriviaPiece",18,22],[") -> ",17],["Trivia",18,534]],"s":[["func",12],[" ",17],["appending",7],["(",17],["TriviaPiece",18],[") -> ",17],["Trivia",18]],"d":"Creates a new `Trivia` by appending the provided `TriviaPiece` to the end."},{"p":["Syntax","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["Syntax",18,513],[", ",17],["rhs",2],[": ",17],["Syntax",18,513],[") -> ",17],["Bool",18,7703]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["Syntax",18],[", ",17],["Syntax",18],[") -> ",17],["Bool",18]],"o":7653},{"p":["SyntaxChildrenIndex","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["SyntaxChildrenIndex",18,515],[", ",17],["rhs",2],[": ",17],["SyntaxChildrenIndex",18,515],[") -> ",17],["Bool",18,7703]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["SyntaxChildrenIndex",18],[", ",17],["SyntaxChildrenIndex",18],[") -> ",17],["Bool",18]],"o":7643},{"p":["SyntaxChildrenIndexData","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["SyntaxChildrenIndexData",18,519],[", ",17],["rhs",2],[": ",17],["SyntaxChildrenIndexData",18,519],[") -> ",17],["Bool",18,7703]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["SyntaxChildrenIndexData",18],[", ",17],["SyntaxChildrenIndexData",18],[") -> ",17],["Bool",18]],"o":7643},{"p":["SyntaxHashable","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["Self",18],[", ",17],["rhs",2],[": ",17],["Self",18],[") -> ",17],["Bool",18,7703]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["Self",18],[", ",17],["Self",18],[") -> ",17],["Bool",18]],"o":7653},{"p":["SourceLength","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["SourceLength",18,524],[", ",17],["rhs",2],[": ",17],["SourceLength",18,524],[") -> ",17],["Bool",18,7703]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["SourceLength",18],[", ",17],["SourceLength",18],[") -> ",17],["Bool",18]],"o":7643},{"p":["SourceLength","+(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["+",7],[" ",17],["(",17],["lhs",2],[": ",17],["SourceLength",18,524],[", ",17],["rhs",2],[": ",17],["SourceLength",18,524],[") -> ",17],["SourceLength",18,524]],"s":[["static",12],[" ",17],["func",12],[" ",17],["+",7],[" ",17],["(",17],["SourceLength",18],[", ",17],["SourceLength",18],[") -> ",17],["SourceLength",18]],"d":"Combine the length of two source length."},{"p":["SourceLength","-(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["lhs",2],[": ",17],["SourceLength",18,524],[", ",17],["rhs",2],[": ",17],["SourceLength",18,524],[") -> ",17],["SourceLength",18,524]],"s":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["SourceLength",18],[", ",17],["SourceLength",18],[") -> ",17],["SourceLength",18]]},{"p":["SourceLength","+=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["+=",7],[" ",17],["(",17],["lhs",2],[": ",17],["inout",12],[" ",17],["SourceLength",18,524],[", ",17],["rhs",2],[": ",17],["SourceLength",18,524],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["+=",7],[" ",17],["(",17],["inout",12],[" ",17],["SourceLength",18],[", ",17],["SourceLength",18],[")",17]]},{"p":["SourceLength","-=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["-=",7],[" ",17],["(",17],["lhs",2],[": ",17],["inout",12],[" ",17],["SourceLength",18,524],[", ",17],["rhs",2],[": ",17],["SourceLength",18,524],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["-=",7],[" ",17],["(",17],["inout",12],[" ",17],["SourceLength",18],[", ",17],["SourceLength",18],[")",17]]},{"p":["AbsolutePosition","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["AbsolutePosition",18,530],[", ",17],["rhs",2],[": ",17],["AbsolutePosition",18,530],[") -> ",17],["Bool",18,7703]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["AbsolutePosition",18],[", ",17],["AbsolutePosition",18],[") -> ",17],["Bool",18]],"o":7643},{"p":["AbsolutePosition","+(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["+",7],[" ",17],["(",17],["lhs",2],[": ",17],["AbsolutePosition",18,530],[", ",17],["rhs",2],[": ",17],["SourceLength",18,524],[") -> ",17],["AbsolutePosition",18,530]],"s":[["static",12],[" ",17],["func",12],[" ",17],["+",7],[" ",17],["(",17],["AbsolutePosition",18],[", ",17],["SourceLength",18],[") -> ",17],["AbsolutePosition",18]],"d":"Determine the AbsolutePosition by advancing the `lhs` by the given source\nlength."},{"p":["AbsolutePosition","-(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["lhs",2],[": ",17],["AbsolutePosition",18,530],[", ",17],["rhs",2],[": ",17],["SourceLength",18,524],[") -> ",17],["AbsolutePosition",18,530]],"s":[["static",12],[" ",17],["func",12],[" ",17],["-",7],[" ",17],["(",17],["AbsolutePosition",18],[", ",17],["SourceLength",18],[") -> ",17],["AbsolutePosition",18]]},{"p":["AbsolutePosition","+=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["+=",7],[" ",17],["(",17],["lhs",2],[": ",17],["inout",12],[" ",17],["AbsolutePosition",18,530],[", ",17],["rhs",2],[": ",17],["SourceLength",18,524],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["+=",7],[" ",17],["(",17],["inout",12],[" ",17],["AbsolutePosition",18],[", ",17],["SourceLength",18],[")",17]]},{"p":["AbsolutePosition","-=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["-=",7],[" ",17],["(",17],["lhs",2],[": ",17],["inout",12],[" ",17],["AbsolutePosition",18,530],[", ",17],["rhs",2],[": ",17],["SourceLength",18,524],[")",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["-=",7],[" ",17],["(",17],["inout",12],[" ",17],["AbsolutePosition",18],[", ",17],["SourceLength",18],[")",17]]},{"p":["TokenKind","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["TokenKind",18,24],[", ",17],["rhs",2],[": ",17],["TokenKind",18,24],[") -> ",17],["Bool",18,7703]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["TokenKind",18],[", ",17],["TokenKind",18],[") -> ",17],["Bool",18]],"o":7653},{"p":["+(_:_:)"],"f":[["func",12],[" ",17],["+",7],[" ",17],["(",17],["lhs",2],[": ",17],["Trivia",18,534],[", ",17],["rhs",2],[": ",17],["Trivia",18,534],[") -> ",17],["Trivia",18,534]],"s":[["func",12],[" ",17],["+",7],[" ",17],["(",17],["Trivia",18],[", ",17],["Trivia",18],[") -> ",17],["Trivia",18]],"d":"Concatenates two collections of `Trivia` into one collection."},{"p":["cNodeLayoutHash()"],"f":[["func",12],[" ",17],["cNodeLayoutHash",7],["() -> ",17],["Int",18,7706]],"s":[["func",12],[" ",17],["cNodeLayoutHash",7],["() -> ",17],["Int",18]],"d":"Computes a hash value that describes the layout of all C nodes which are\npassed as opaque values between `SwiftSyntaxParser` and `SwiftSyntax`.\nThis should match the value returned by the `cNodeLayoutHash` function in\nthe `SwiftSyntaxParser` module."},{"p":["AccessPathSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["AccessPathSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["AccessPathComponentSyntax",18,304]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["AccessorListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["AccessorListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["AccessorDeclSyntax",18,53]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["CaseItemListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["CaseItemListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["CaseItemSyntax",18,457]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["ModifierListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["ModifierListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["DeclModifierSyntax",18,65]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["ObjCSelectorSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["ObjCSelectorSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ObjCSelectorPieceSyntax",18,262]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["AttributeListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["AttributeListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Syntax",18,513]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["CatchItemListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["CatchItemListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["CatchItemSyntax",18,483]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["IdentifierListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["IdentifierListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["TokenSyntax",18,444]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["MemberDeclListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["MemberDeclListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["MemberDeclListItemSyntax",18,292]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["SwitchCaseListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["SwitchCaseListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Syntax",18,513]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["CatchClauseListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["CatchClauseListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["CatchClauseSyntax",18,39]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["ArrayElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ArrayElementSyntax",18,57]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["ArrayElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["ClosureParamListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["ClosureParamListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ClosureParamSyntax",18,61]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["CodeBlockItemListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["CodeBlockItemListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["CodeBlockItemSyntax",18,107]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["InheritedTypeListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["InheritedTypeListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["InheritedTypeSyntax",18,111]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["NonEmptyTokenListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["NonEmptyTokenListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["TokenSyntax",18,444]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["IfConfigClauseListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["IfConfigClauseListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["IfConfigClauseSyntax",18,143]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["PatternBindingListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["PatternBindingListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["PatternBindingSyntax",18,149]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["EnumCaseElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["EnumCaseElementSyntax",18,168]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["EnumCaseElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["GenericArgumentListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["GenericArgumentListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["GenericArgumentSyntax",18,176]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["AvailabilitySpecListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["AvailabilitySpecListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["AvailabilityArgumentSyntax",18,324]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["ConditionElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ConditionElementSyntax",18,208]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["ConditionElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["DeclNameArgumentListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["DeclNameArgumentListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["DeclNameArgumentSyntax",18,210]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["GenericParameterListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["GenericParameterListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["GenericParameterSyntax",18,218]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["TupleExprElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["TupleExprElementSyntax",18,230]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["TupleExprElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["TupleTypeElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["TupleTypeElementSyntax",18,232]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["TupleTypeElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["DictionaryElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["DictionaryElementSyntax",18,244]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["DictionaryElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["FunctionParameterListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["FunctionParameterListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["FunctionParameterSyntax",18,250]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["StringLiteralSegmentsSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["StringLiteralSegmentsSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Syntax",18,513]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["ClosureCaptureItemListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["ClosureCaptureItemListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ClosureCaptureItemSyntax",18,280]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["GenericRequirementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["GenericRequirementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["GenericRequirementSyntax",18,284]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["PrecedenceGroupNameListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["PrecedenceGroupNameListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["PrecedenceGroupNameElementSyntax",18,412]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["TuplePatternElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["TuplePatternElementSyntax",18,320]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["TuplePatternElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["PrimaryAssociatedTypeListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["PrimaryAssociatedTypeListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["PrimaryAssociatedTypeSyntax",18,358]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["CompositionTypeElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["CompositionTypeElementSyntax",18,372]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["CompositionTypeElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["DifferentiabilityParamListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["DifferentiabilityParamListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["DifferentiabilityParamSyntax",18,376]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["SpecializeAttributeSpecListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["SpecializeAttributeSpecListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Syntax",18,513]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["PrecedenceGroupAttributeListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["PrecedenceGroupAttributeListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Syntax",18,513]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["MultipleTrailingClosureElementListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["MultipleTrailingClosureElementSyntax",18,430]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["MultipleTrailingClosureElementListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["ExprListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["ExprListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ExprSyntax",18,441]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["ObjcNameSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["ObjcNameSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ObjcNamePieceSyntax",18,115]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["TokenListSyntax","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["TokenListSyntax","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["TokenSyntax",18,444]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["SyntaxChildren","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["SyntaxChildrenIndex",18,515]],"s":[["typealias",12],[" ",17],["Index",7]],"o":7722},{"p":["SyntaxChildren","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Syntax",18,513]],"s":[["typealias",12],[" ",17],["Element",7]],"o":7662},{"p":["CClientNode"],"f":[["typealias",12],[" ",17],["CClientNode",7],[" = ",17],["UnsafeMutableRawPointer",18,7761]],"s":[["typealias",12],[" ",17],["CClientNode",7]]},{"p":["CSyntaxKind"],"f":[["typealias",12],[" ",17],["CSyntaxKind",7],[" = ",17],["UInt16",18,7781]],"s":[["typealias",12],[" ",17],["CSyntaxKind",7]]}],"edges":{"conformer":[0,15,[],0,7765,[],0,7767,[],0,7774,[],1,15,[],1,7765,[],1,7767,[],1,7774,[],2,15,[],2,7765,[],2,7767,[],2,7774,[],3,15,[],3,7765,[],3,7767,[],3,7774,[],4,15,[],4,7765,[],4,7767,[],4,7774,[],5,15,[],5,7765,[],5,7767,[],5,7774,[],6,15,[],6,7765,[],6,7767,[],6,7774,[],7,15,[],7,7765,[],7,7767,[],7,7774,[],8,15,[],8,7765,[],8,7767,[],8,7774,[],9,15,[],9,7765,[],9,7767,[],9,7774,[],10,15,[],10,7765,[],10,7767,[],10,7774,[],11,15,[],11,7765,[],11,7767,[],11,7774,[],12,15,[],12,7765,[],12,7767,[],12,7774,[],13,15,[],13,7656,[],13,7765,[],13,7767,[],13,7774,[],14,7620,[],14,7652,[],15,7765,[],15,7767,[],15,7774,[],17,7767,[],17,7777,[],17,7783,[],18,7620,[],18,7652,[],19,7620,[],19,7652,[],22,7652,[],22,7765,[],22,7774,[],23,7620,[],23,7652,[],23,7699,[],24,7652,[],25,13,[],25,14,[],25,15,[],25,7620,[],25,7622,[],25,7652,[],25,7656,[],25,7707,[],25,7763,[],25,7765,[],25,7767,[],25,7774,[],26,7759,[],27,5,[],27,14,[],27,15,[],27,7620,[],27,7652,[],27,7763,[],27,7765,[],27,7767,[],27,7774,[],29,7,[],29,14,[],29,15,[],29,7620,[],29,7652,[],29,7763,[],29,7765,[],29,7767,[],29,7774,[],31,3,[],31,14,[],31,15,[],31,7620,[],31,7652,[],31,7763,[],31,7765,[],31,7767,[],31,7774,[],33,2,[],33,5,[],33,12,[],33,14,[],33,15,[],33,7620,[],33,7652,[],33,7763,[],33,7765,[],33,7767,[],33,7774,[],35,3,[],35,14,[],35,15,[],35,7620,[],35,7652,[],35,7763,[],35,7765,[],35,7767,[],35,7774,[],37,7,[],37,9,[],37,10,[],37,14,[],37,15,[],37,7620,[],37,7652,[],37,7763,[],37,7765,[],37,7767,[],37,7774,[],39,1,[],39,14,[],39,15,[],39,7620,[],39,7652,[],39,7763,[],39,7765,[],39,7767,[],39,7774,[],41,3,[],41,6,[],41,9,[],41,14,[],41,15,[],41,7620,[],41,7652,[],41,7763,[],41,7765,[],41,7767,[],41,7774,[],43,6,[],43,14,[],43,15,[],43,7620,[],43,7652,[],43,7763,[],43,7765,[],43,7767,[],43,7774,[],45,6,[],45,14,[],45,15,[],45,7620,[],45,7652,[],45,7763,[],45,7765,[],45,7767,[],45,7774,[],47,5,[],47,14,[],47,15,[],47,7620,[],47,7652,[],47,7763,[],47,7765,[],47,7767,[],47,7774,[],48,6,[],48,14,[],48,15,[],48,7620,[],48,7652,[],48,7763,[],48,7765,[],48,7767,[],48,7774,[],49,7,[],49,14,[],49,15,[],49,7620,[],49,7652,[],49,7763,[],49,7765,[],49,7767,[],49,7774,[],50,8,[],50,14,[],50,15,[],50,7620,[],50,7652,[],50,7763,[],50,7765,[],50,7767,[],50,7774,[],51,14,[],51,15,[],51,7620,[],51,7652,[],51,7763,[],51,7765,[],51,7767,[],51,7774,[],53,5,[],53,14,[],53,15,[],53,7620,[],53,7652,[],53,7763,[],53,7765,[],53,7767,[],53,7774,[],55,13,[],55,14,[],55,15,[],55,7620,[],55,7622,[],55,7652,[],55,7656,[],55,7707,[],55,7763,[],55,7765,[],55,7767,[],55,7774,[],56,7759,[],57,4,[],57,14,[],57,15,[],57,7620,[],57,7652,[],57,7763,[],57,7765,[],57,7767,[],57,7774,[],59,13,[],59,14,[],59,15,[],59,7620,[],59,7622,[],59,7652,[],59,7656,[],59,7707,[],59,7763,[],59,7765,[],59,7767,[],59,7774,[],60,7759,[],61,4,[],61,14,[],61,15,[],61,7620,[],61,7652,[],61,7763,[],61,7765,[],61,7767,[],61,7774,[],63,7,[],63,14,[],63,15,[],63,7620,[],63,7652,[],63,7763,[],63,7765,[],63,7767,[],63,7774,[],65,14,[],65,15,[],65,7620,[],65,7652,[],65,7763,[],65,7765,[],65,7767,[],65,7774,[],67,5,[],67,14,[],67,15,[],67,7620,[],67,7652,[],67,7763,[],67,7765,[],67,7767,[],67,7774,[],69,2,[],69,5,[],69,14,[],69,15,[],69,7620,[],69,7652,[],69,7763,[],69,7765,[],69,7767,[],69,7774,[],71,0,[],71,8,[],71,14,[],71,15,[],71,7620,[],71,7652,[],71,7763,[],71,7765,[],71,7767,[],71,7774,[],73,5,[],73,14,[],73,15,[],73,7620,[],73,7652,[],73,7763,[],73,7765,[],73,7767,[],73,7774,[],75,8,[],75,14,[],75,15,[],75,7620,[],75,7652,[],75,7763,[],75,7765,[],75,7767,[],75,7774,[],77,13,[],77,14,[],77,15,[],77,7620,[],77,7622,[],77,7652,[],77,7656,[],77,7707,[],77,7763,[],77,7765,[],77,7767,[],77,7774,[],78,7759,[],79,13,[],79,14,[],79,15,[],79,7620,[],79,7622,[],79,7652,[],79,7656,[],79,7707,[],79,7763,[],79,7765,[],79,7767,[],79,7774,[],80,7759,[],81,2,[],81,5,[],81,14,[],81,15,[],81,7620,[],81,7652,[],81,7763,[],81,7765,[],81,7767,[],81,7774,[],83,8,[],83,14,[],83,15,[],83,7620,[],83,7652,[],83,7763,[],83,7765,[],83,7767,[],83,7774,[],85,2,[],85,5,[],85,12,[],85,14,[],85,15,[],85,7620,[],85,7652,[],85,7763,[],85,7765,[],85,7767,[],85,7774,[],87,14,[],87,15,[],87,7620,[],87,7652,[],87,7763,[],87,7765,[],87,7767,[],87,7774,[],89,6,[],89,14,[],89,15,[],89,7620,[],89,7652,[],89,7763,[],89,7765,[],89,7767,[],89,7774,[],91,6,[],91,14,[],91,15,[],91,7620,[],91,7652,[],91,7763,[],91,7765,[],91,7767,[],91,7774,[],93,0,[],93,11,[],93,14,[],93,15,[],93,7620,[],93,7652,[],93,7763,[],93,7765,[],93,7767,[],93,7774,[],95,5,[],95,14,[],95,15,[],95,7620,[],95,7652,[],95,7763,[],95,7765,[],95,7767,[],95,7774,[],97,14,[],97,15,[],97,7620,[],97,7652,[],97,7763,[],97,7765,[],97,7767,[],97,7774,[],99,9,[],99,14,[],99,15,[],99,7620,[],99,7652,[],99,7763,[],99,7765,[],99,7767,[],99,7774,[],101,11,[],101,14,[],101,15,[],101,7620,[],101,7652,[],101,7763,[],101,7765,[],101,7767,[],101,7774,[],103,13,[],103,14,[],103,15,[],103,7620,[],103,7622,[],103,7652,[],103,7656,[],103,7707,[],103,7763,[],103,7765,[],103,7767,[],103,7774,[],104,7759,[],105,13,[],105,14,[],105,15,[],105,7620,[],105,7622,[],105,7652,[],105,7656,[],105,7707,[],105,7763,[],105,7765,[],105,7767,[],105,7774,[],106,7759,[],107,14,[],107,15,[],107,7620,[],107,7652,[],107,7763,[],107,7765,[],107,7767,[],107,7774,[],109,5,[],109,12,[],109,14,[],109,15,[],109,7620,[],109,7652,[],109,7763,[],109,7765,[],109,7767,[],109,7774,[],111,4,[],111,14,[],111,15,[],111,7620,[],111,7652,[],111,7763,[],111,7765,[],111,7767,[],111,7774,[],113,11,[],113,14,[],113,15,[],113,7620,[],113,7652,[],113,7763,[],113,7765,[],113,7767,[],113,7774,[],115,14,[],115,15,[],115,7620,[],115,7652,[],115,7763,[],115,7765,[],115,7767,[],115,7774,[],117,6,[],117,14,[],117,15,[],117,7620,[],117,7652,[],117,7763,[],117,7765,[],117,7767,[],117,7774,[],119,6,[],119,14,[],119,15,[],119,7620,[],119,7652,[],119,7763,[],119,7765,[],119,7767,[],119,7774,[],121,14,[],121,15,[],121,7620,[],121,7652,[],121,7763,[],121,7765,[],121,7767,[],121,7774,[],123,5,[],123,14,[],123,15,[],123,7620,[],123,7652,[],123,7763,[],123,7765,[],123,7767,[],123,7774,[],125,6,[],125,14,[],125,15,[],125,7620,[],125,7652,[],125,7763,[],125,7765,[],125,7767,[],125,7774,[],127,2,[],127,5,[],127,14,[],127,15,[],127,7620,[],127,7652,[],127,7763,[],127,7765,[],127,7767,[],127,7774,[],129,6,[],129,14,[],129,15,[],129,7620,[],129,7652,[],129,7763,[],129,7765,[],129,7767,[],129,7774,[],131,8,[],131,14,[],131,15,[],131,7620,[],131,7652,[],131,7763,[],131,7765,[],131,7767,[],131,7774,[],133,6,[],133,14,[],133,15,[],133,7620,[],133,7652,[],133,7763,[],133,7765,[],133,7767,[],133,7774,[],135,8,[],135,14,[],135,15,[],135,7620,[],135,7652,[],135,7763,[],135,7765,[],135,7767,[],135,7774,[],137,7,[],137,14,[],137,15,[],137,7620,[],137,7652,[],137,7763,[],137,7765,[],137,7767,[],137,7774,[],139,6,[],139,14,[],139,15,[],139,7620,[],139,7652,[],139,7763,[],139,7765,[],139,7767,[],139,7774,[],141,13,[],141,14,[],141,15,[],141,7620,[],141,7622,[],141,7652,[],141,7656,[],141,7707,[],141,7763,[],141,7765,[],141,7767,[],141,7774,[],142,7759,[],143,14,[],143,15,[],143,7620,[],143,7652,[],143,7763,[],143,7765,[],143,7767,[],143,7774,[],145,13,[],145,14,[],145,15,[],145,7620,[],145,7622,[],145,7652,[],145,7656,[],145,7707,[],145,7763,[],145,7765,[],145,7767,[],145,7774,[],146,7759,[],147,6,[],147,14,[],147,15,[],147,7620,[],147,7652,[],147,7763,[],147,7765,[],147,7767,[],147,7774,[],149,4,[],149,14,[],149,15,[],149,7620,[],149,7652,[],149,7763,[],149,7765,[],149,7767,[],149,7774,[],151,0,[],151,5,[],151,14,[],151,15,[],151,7620,[],151,7652,[],151,7763,[],151,7765,[],151,7767,[],151,7774,[],153,6,[],153,14,[],153,15,[],153,7620,[],153,7652,[],153,7763,[],153,7765,[],153,7767,[],153,7774,[],155,13,[],155,14,[],155,15,[],155,7620,[],155,7622,[],155,7652,[],155,7656,[],155,7707,[],155,7763,[],155,7765,[],155,7767,[],155,7774,[],156,7759,[],157,14,[],157,15,[],157,7620,[],157,7652,[],157,7763,[],157,7765,[],157,7767,[],157,7774,[],159,11,[],159,14,[],159,15,[],159,7620,[],159,7652,[],159,7763,[],159,7765,[],159,7767,[],159,7774,[],160,13,[],160,14,[],160,15,[],160,7620,[],160,7622,[],160,7652,[],160,7656,[],160,7707,[],160,7763,[],160,7765,[],160,7767,[],160,7774,[],161,7759,[],162,8,[],162,14,[],162,15,[],162,7620,[],162,7652,[],162,7763,[],162,7765,[],162,7767,[],162,7774,[],164,14,[],164,15,[],164,7620,[],164,7652,[],164,7763,[],164,7765,[],164,7767,[],164,7774,[],166,7,[],166,14,[],166,15,[],166,7620,[],166,7652,[],166,7763,[],166,7765,[],166,7767,[],166,7774,[],168,4,[],168,14,[],168,15,[],168,7620,[],168,7652,[],168,7763,[],168,7765,[],168,7767,[],168,7774,[],170,11,[],170,14,[],170,15,[],170,7620,[],170,7652,[],170,7763,[],170,7765,[],170,7767,[],170,7774,[],172,7,[],172,14,[],172,15,[],172,7620,[],172,7652,[],172,7763,[],172,7765,[],172,7767,[],172,7774,[],174,6,[],174,14,[],174,15,[],174,7620,[],174,7652,[],174,7763,[],174,7765,[],174,7767,[],174,7774,[],176,4,[],176,14,[],176,15,[],176,7620,[],176,7652,[],176,7763,[],176,7765,[],176,7767,[],176,7774,[],178,5,[],178,14,[],178,15,[],178,7620,[],178,7652,[],178,7763,[],178,7765,[],178,7767,[],178,7774,[],180,6,[],180,14,[],180,15,[],180,7620,[],180,7652,[],180,7763,[],180,7765,[],180,7767,[],180,7774,[],182,9,[],182,14,[],182,15,[],182,7620,[],182,7652,[],182,7763,[],182,7765,[],182,7767,[],182,7774,[],184,0,[],184,6,[],184,14,[],184,15,[],184,7620,[],184,7652,[],184,7763,[],184,7765,[],184,7767,[],184,7774,[],186,11,[],186,14,[],186,15,[],186,7620,[],186,7652,[],186,7763,[],186,7765,[],186,7767,[],186,7774,[],188,0,[],188,14,[],188,15,[],188,7620,[],188,7652,[],188,7763,[],188,7765,[],188,7767,[],188,7774,[],190,7,[],190,14,[],190,15,[],190,7620,[],190,7652,[],190,7763,[],190,7765,[],190,7767,[],190,7774,[],192,6,[],192,14,[],192,15,[],192,7620,[],192,7652,[],192,7763,[],192,7765,[],192,7767,[],192,7774,[],194,6,[],194,14,[],194,15,[],194,7620,[],194,7652,[],194,7763,[],194,7765,[],194,7767,[],194,7774,[],196,1,[],196,7,[],196,10,[],196,14,[],196,15,[],196,7620,[],196,7652,[],196,7763,[],196,7765,[],196,7767,[],196,7774,[],198,14,[],198,15,[],198,7620,[],198,7652,[],198,7763,[],198,7765,[],198,7767,[],198,7774,[],200,11,[],200,14,[],200,15,[],200,7620,[],200,7652,[],200,7763,[],200,7765,[],200,7767,[],200,7774,[],202,13,[],202,14,[],202,15,[],202,7620,[],202,7622,[],202,7652,[],202,7656,[],202,7707,[],202,7763,[],202,7765,[],202,7767,[],202,7774,[],203,7759,[],204,13,[],204,14,[],204,15,[],204,7620,[],204,7622,[],204,7652,[],204,7656,[],204,7707,[],204,7763,[],204,7765,[],204,7767,[],204,7774,[],205,7759,[],206,14,[],206,15,[],206,7620,[],206,7652,[],206,7763,[],206,7765,[],206,7767,[],206,7774,[],208,4,[],208,14,[],208,15,[],208,7620,[],208,7652,[],208,7763,[],208,7765,[],208,7767,[],208,7774,[],210,14,[],210,15,[],210,7620,[],210,7652,[],210,7763,[],210,7765,[],210,7767,[],210,7774,[],212,6,[],212,14,[],212,15,[],212,7620,[],212,7652,[],212,7763,[],212,7765,[],212,7767,[],212,7774,[],214,6,[],214,14,[],214,15,[],214,7620,[],214,7652,[],214,7763,[],214,7765,[],214,7767,[],214,7774,[],216,14,[],216,15,[],216,7620,[],216,7652,[],216,7763,[],216,7765,[],216,7767,[],216,7774,[],218,4,[],218,14,[],218,15,[],218,7620,[],218,7652,[],218,7763,[],218,7765,[],218,7767,[],218,7774,[],220,6,[],220,14,[],220,15,[],220,7620,[],220,7652,[],220,7763,[],220,7765,[],220,7767,[],220,7774,[],222,0,[],222,6,[],222,14,[],222,15,[],222,7620,[],222,7652,[],222,7763,[],222,7765,[],222,7767,[],222,7774,[],224,6,[],224,14,[],224,15,[],224,7620,[],224,7652,[],224,7763,[],224,7765,[],224,7767,[],224,7774,[],226,0,[],226,5,[],226,14,[],226,15,[],226,7620,[],226,7652,[],226,7763,[],226,7765,[],226,7767,[],226,7774,[],228,6,[],228,14,[],228,15,[],228,7620,[],228,7652,[],228,7763,[],228,7765,[],228,7767,[],228,7774,[],230,4,[],230,14,[],230,15,[],230,7620,[],230,7652,[],230,7763,[],230,7765,[],230,7767,[],230,7774,[],232,4,[],232,14,[],232,15,[],232,7620,[],232,7652,[],232,7763,[],232,7765,[],232,7767,[],232,7774,[],234,0,[],234,14,[],234,15,[],234,7620,[],234,7652,[],234,7763,[],234,7765,[],234,7767,[],234,7774,[],236,14,[],236,15,[],236,7620,[],236,7652,[],236,7763,[],236,7765,[],236,7767,[],236,7774,[],238,13,[],238,14,[],238,15,[],238,7620,[],238,7622,[],238,7652,[],238,7656,[],238,7707,[],238,7763,[],238,7765,[],238,7767,[],238,7774,[],239,7759,[],240,0,[],240,14,[],240,15,[],240,7620,[],240,7652,[],240,7763,[],240,7765,[],240,7767,[],240,7774,[],242,5,[],242,14,[],242,15,[],242,7620,[],242,7652,[],242,7763,[],242,7765,[],242,7767,[],242,7774,[],244,4,[],244,14,[],244,15,[],244,7620,[],244,7652,[],244,7763,[],244,7765,[],244,7767,[],244,7774,[],246,11,[],246,14,[],246,15,[],246,7620,[],246,7652,[],246,7763,[],246,7765,[],246,7767,[],246,7774,[],248,0,[],248,14,[],248,15,[],248,7620,[],248,7652,[],248,7763,[],248,7765,[],248,7767,[],248,7774,[],250,4,[],250,14,[],250,15,[],250,7620,[],250,7652,[],250,7763,[],250,7765,[],250,7767,[],250,7774,[],252,14,[],252,15,[],252,7620,[],252,7652,[],252,7763,[],252,7765,[],252,7767,[],252,7774,[],254,11,[],254,14,[],254,15,[],254,7620,[],254,7652,[],254,7763,[],254,7765,[],254,7767,[],254,7774,[],256,13,[],256,14,[],256,15,[],256,7620,[],256,7622,[],256,7652,[],256,7656,[],256,7707,[],256,7763,[],256,7765,[],256,7767,[],256,7774,[],257,7759,[],258,14,[],258,15,[],258,7620,[],258,7652,[],258,7763,[],258,7765,[],258,7767,[],258,7774,[],260,13,[],260,14,[],260,15,[],260,7620,[],260,7622,[],260,7652,[],260,7656,[],260,7707,[],260,7763,[],260,7765,[],260,7767,[],260,7774,[],261,7759,[],262,14,[],262,15,[],262,7620,[],262,7652,[],262,7763,[],262,7765,[],262,7767,[],262,7774,[],264,0,[],264,6,[],264,14,[],264,15,[],264,7620,[],264,7652,[],264,7763,[],264,7765,[],264,7767,[],264,7774,[],266,6,[],266,14,[],266,15,[],266,7620,[],266,7652,[],266,7763,[],266,7765,[],266,7767,[],266,7774,[],268,6,[],268,14,[],268,15,[],268,7620,[],268,7652,[],268,7763,[],268,7765,[],268,7767,[],268,7774,[],270,14,[],270,15,[],270,7620,[],270,7652,[],270,7763,[],270,7765,[],270,7767,[],270,7774,[],272,6,[],272,14,[],272,15,[],272,7620,[],272,7652,[],272,7763,[],272,7765,[],272,7767,[],272,7774,[],274,2,[],274,5,[],274,14,[],274,15,[],274,7620,[],274,7652,[],274,7763,[],274,7765,[],274,7767,[],274,7774,[],276,6,[],276,14,[],276,15,[],276,7620,[],276,7652,[],276,7763,[],276,7765,[],276,7767,[],276,7774,[],278,6,[],278,14,[],278,15,[],278,7620,[],278,7652,[],278,7763,[],278,7765,[],278,7767,[],278,7774,[],280,4,[],280,14,[],280,15,[],280,7620,[],280,7652,[],280,7763,[],280,7765,[],280,7767,[],280,7774,[],282,14,[],282,15,[],282,7620,[],282,7652,[],282,7763,[],282,7765,[],282,7767,[],282,7774,[],284,4,[],284,14,[],284,15,[],284,7620,[],284,7652,[],284,7763,[],284,7765,[],284,7767,[],284,7774,[],286,14,[],286,15,[],286,7620,[],286,7652,[],286,7763,[],286,7765,[],286,7767,[],286,7774,[],288,13,[],288,14,[],288,15,[],288,7620,[],288,7622,[],288,7652,[],288,7656,[],288,7707,[],288,7763,[],288,7765,[],288,7767,[],288,7774,[],289,7759,[],290,6,[],290,14,[],290,15,[],290,7620,[],290,7652,[],290,7763,[],290,7765,[],290,7767,[],290,7774,[],292,14,[],292,15,[],292,7620,[],292,7652,[],292,7763,[],292,7765,[],292,7767,[],292,7774,[],294,13,[],294,14,[],294,15,[],294,7620,[],294,7622,[],294,7652,[],294,7656,[],294,7707,[],294,7763,[],294,7765,[],294,7767,[],294,7774,[],295,7759,[],296,6,[],296,14,[],296,15,[],296,7620,[],296,7652,[],296,7763,[],296,7765,[],296,7767,[],296,7774,[],298,6,[],298,14,[],298,15,[],298,7620,[],298,7652,[],298,7763,[],298,7765,[],298,7767,[],298,7774,[],300,14,[],300,15,[],300,7620,[],300,7652,[],300,7763,[],300,7765,[],300,7767,[],300,7774,[],302,14,[],302,15,[],302,7620,[],302,7652,[],302,7763,[],302,7765,[],302,7767,[],302,7774,[],304,14,[],304,15,[],304,7620,[],304,7652,[],304,7763,[],304,7765,[],304,7767,[],304,7774,[],306,13,[],306,14,[],306,15,[],306,7620,[],306,7622,[],306,7652,[],306,7656,[],306,7707,[],306,7763,[],306,7765,[],306,7767,[],306,7774,[],307,7759,[],308,13,[],308,14,[],308,15,[],308,7620,[],308,7622,[],308,7652,[],308,7656,[],308,7707,[],308,7763,[],308,7765,[],308,7767,[],308,7774,[],309,7759,[],310,6,[],310,14,[],310,15,[],310,7620,[],310,7652,[],310,7763,[],310,7765,[],310,7767,[],310,7774,[],312,0,[],312,5,[],312,14,[],312,15,[],312,7620,[],312,7652,[],312,7763,[],312,7765,[],312,7767,[],312,7774,[],314,2,[],314,5,[],314,14,[],314,15,[],314,7620,[],314,7652,[],314,7763,[],314,7765,[],314,7767,[],314,7774,[],316,14,[],316,15,[],316,7620,[],316,7652,[],316,7763,[],316,7765,[],316,7767,[],316,7774,[],318,4,[],318,14,[],318,15,[],318,7620,[],318,7652,[],318,7763,[],318,7765,[],318,7767,[],318,7774,[],320,4,[],320,10,[],320,14,[],320,15,[],320,7620,[],320,7652,[],320,7763,[],320,7765,[],320,7767,[],320,7774,[],322,11,[],322,14,[],322,15,[],322,7620,[],322,7652,[],322,7763,[],322,7765,[],322,7767,[],322,7774,[],324,14,[],324,15,[],324,7620,[],324,7652,[],324,7763,[],324,7765,[],324,7767,[],324,7774,[],326,13,[],326,14,[],326,15,[],326,7620,[],326,7622,[],326,7652,[],326,7656,[],326,7707,[],326,7763,[],326,7765,[],326,7767,[],326,7774,[],327,7759,[],328,8,[],328,14,[],328,15,[],328,7620,[],328,7652,[],328,7763,[],328,7765,[],328,7767,[],328,7774,[],330,13,[],330,14,[],330,15,[],330,7620,[],330,7622,[],330,7652,[],330,7656,[],330,7707,[],330,7763,[],330,7765,[],330,7767,[],330,7774,[],331,7759,[],332,13,[],332,14,[],332,15,[],332,7620,[],332,7622,[],332,7652,[],332,7656,[],332,7707,[],332,7763,[],332,7765,[],332,7767,[],332,7774,[],333,7759,[],334,13,[],334,14,[],334,15,[],334,7620,[],334,7622,[],334,7652,[],334,7656,[],334,7707,[],334,7763,[],334,7765,[],334,7767,[],334,7774,[],335,7759,[],336,8,[],336,14,[],336,15,[],336,7620,[],336,7652,[],336,7763,[],336,7765,[],336,7767,[],336,7774,[],338,6,[],338,14,[],338,15,[],338,7620,[],338,7652,[],338,7763,[],338,7765,[],338,7767,[],338,7774,[],340,8,[],340,14,[],340,15,[],340,7620,[],340,7652,[],340,7763,[],340,7765,[],340,7767,[],340,7774,[],342,13,[],342,14,[],342,15,[],342,7620,[],342,7622,[],342,7652,[],342,7656,[],342,7707,[],342,7763,[],342,7765,[],342,7767,[],342,7774,[],343,7759,[],344,13,[],344,14,[],344,15,[],344,7620,[],344,7622,[],344,7652,[],344,7656,[],344,7707,[],344,7763,[],344,7765,[],344,7767,[],344,7774,[],345,7759,[],346,14,[],346,15,[],346,7620,[],346,7652,[],346,7763,[],346,7765,[],346,7767,[],346,7774,[],348,13,[],348,14,[],348,15,[],348,7620,[],348,7622,[],348,7652,[],348,7656,[],348,7707,[],348,7763,[],348,7765,[],348,7767,[],348,7774,[],349,7759,[],350,6,[],350,14,[],350,15,[],350,7620,[],350,7652,[],350,7763,[],350,7765,[],350,7767,[],350,7774,[],352,6,[],352,14,[],352,15,[],352,7620,[],352,7652,[],352,7763,[],352,7765,[],352,7767,[],352,7774,[],354,13,[],354,14,[],354,15,[],354,7620,[],354,7622,[],354,7652,[],354,7656,[],354,7707,[],354,7763,[],354,7765,[],354,7767,[],354,7774,[],355,7759,[],356,14,[],356,15,[],356,7620,[],356,7652,[],356,7763,[],356,7765,[],356,7767,[],356,7774,[],358,4,[],358,14,[],358,15,[],358,7620,[],358,7652,[],358,7763,[],358,7765,[],358,7767,[],358,7774,[],360,13,[],360,14,[],360,15,[],360,7620,[],360,7622,[],360,7652,[],360,7656,[],360,7707,[],360,7763,[],360,7765,[],360,7767,[],360,7774,[],361,7759,[],362,6,[],362,14,[],362,15,[],362,7620,[],362,7652,[],362,7763,[],362,7765,[],362,7767,[],362,7774,[],364,14,[],364,15,[],364,7620,[],364,7652,[],364,7763,[],364,7765,[],364,7767,[],364,7774,[],366,14,[],366,15,[],366,7620,[],366,7652,[],366,7763,[],366,7765,[],366,7767,[],366,7774,[],368,6,[],368,14,[],368,15,[],368,7620,[],368,7652,[],368,7763,[],368,7765,[],368,7767,[],368,7774,[],370,13,[],370,14,[],370,15,[],370,7620,[],370,7622,[],370,7652,[],370,7656,[],370,7707,[],370,7763,[],370,7765,[],370,7767,[],370,7774,[],371,7759,[],372,14,[],372,15,[],372,7620,[],372,7652,[],372,7763,[],372,7765,[],372,7767,[],372,7774,[],374,14,[],374,15,[],374,7620,[],374,7652,[],374,7763,[],374,7765,[],374,7767,[],374,7774,[],376,4,[],376,14,[],376,15,[],376,7620,[],376,7652,[],376,7763,[],376,7765,[],376,7767,[],376,7774,[],378,14,[],378,15,[],378,7620,[],378,7652,[],378,7763,[],378,7765,[],378,7767,[],378,7774,[],380,13,[],380,14,[],380,15,[],380,7620,[],380,7622,[],380,7652,[],380,7656,[],380,7707,[],380,7763,[],380,7765,[],380,7767,[],380,7774,[],381,7759,[],382,4,[],382,14,[],382,15,[],382,7620,[],382,7652,[],382,7763,[],382,7765,[],382,7767,[],382,7774,[],384,14,[],384,15,[],384,7620,[],384,7652,[],384,7763,[],384,7765,[],384,7767,[],384,7774,[],386,14,[],386,15,[],386,7620,[],386,7652,[],386,7763,[],386,7765,[],386,7767,[],386,7774,[],388,14,[],388,15,[],388,7620,[],388,7652,[],388,7763,[],388,7765,[],388,7767,[],388,7774,[],390,13,[],390,14,[],390,15,[],390,7620,[],390,7622,[],390,7652,[],390,7656,[],390,7707,[],390,7763,[],390,7765,[],390,7767,[],390,7774,[],391,7759,[],392,14,[],392,15,[],392,7620,[],392,7652,[],392,7763,[],392,7765,[],392,7767,[],392,7774,[],394,13,[],394,14,[],394,15,[],394,7620,[],394,7622,[],394,7652,[],394,7656,[],394,7707,[],394,7763,[],394,7765,[],394,7767,[],394,7774,[],395,7759,[],396,14,[],396,15,[],396,7620,[],396,7652,[],396,7763,[],396,7765,[],396,7767,[],396,7774,[],398,14,[],398,15,[],398,7620,[],398,7652,[],398,7763,[],398,7765,[],398,7767,[],398,7774,[],400,14,[],400,15,[],400,7620,[],400,7652,[],400,7763,[],400,7765,[],400,7767,[],400,7774,[],402,14,[],402,15,[],402,7620,[],402,7652,[],402,7763,[],402,7765,[],402,7767,[],402,7774,[],404,13,[],404,14,[],404,15,[],404,7620,[],404,7622,[],404,7652,[],404,7656,[],404,7707,[],404,7763,[],404,7765,[],404,7767,[],404,7774,[],405,7759,[],406,13,[],406,14,[],406,15,[],406,7620,[],406,7622,[],406,7652,[],406,7656,[],406,7707,[],406,7763,[],406,7765,[],406,7767,[],406,7774,[],407,7759,[],408,13,[],408,14,[],408,15,[],408,7620,[],408,7622,[],408,7652,[],408,7656,[],408,7707,[],408,7763,[],408,7765,[],408,7767,[],408,7774,[],409,7759,[],410,14,[],410,15,[],410,7620,[],410,7652,[],410,7763,[],410,7765,[],410,7767,[],410,7774,[],412,14,[],412,15,[],412,7620,[],412,7652,[],412,7763,[],412,7765,[],412,7767,[],412,7774,[],414,14,[],414,15,[],414,7620,[],414,7652,[],414,7763,[],414,7765,[],414,7767,[],414,7774,[],416,13,[],416,14,[],416,15,[],416,7620,[],416,7622,[],416,7652,[],416,7656,[],416,7707,[],416,7763,[],416,7765,[],416,7767,[],416,7774,[],417,7759,[],418,14,[],418,15,[],418,7620,[],418,7652,[],418,7763,[],418,7765,[],418,7767,[],418,7774,[],420,14,[],420,15,[],420,7620,[],420,7652,[],420,7763,[],420,7765,[],420,7767,[],420,7774,[],422,14,[],422,15,[],422,7620,[],422,7652,[],422,7763,[],422,7765,[],422,7767,[],422,7774,[],424,13,[],424,14,[],424,15,[],424,7620,[],424,7622,[],424,7652,[],424,7656,[],424,7707,[],424,7763,[],424,7765,[],424,7767,[],424,7774,[],425,7759,[],426,14,[],426,15,[],426,7620,[],426,7652,[],426,7763,[],426,7765,[],426,7767,[],426,7774,[],428,14,[],428,15,[],428,7620,[],428,7652,[],428,7763,[],428,7765,[],428,7767,[],428,7774,[],430,14,[],430,15,[],430,7620,[],430,7652,[],430,7763,[],430,7765,[],430,7767,[],430,7774,[],432,8,[],432,14,[],432,15,[],432,7620,[],432,7652,[],432,7763,[],432,7765,[],432,7767,[],432,7774,[],434,14,[],434,15,[],434,7620,[],434,7652,[],434,7763,[],434,7765,[],434,7767,[],434,7774,[],436,13,[],436,14,[],436,15,[],436,7620,[],436,7622,[],436,7652,[],436,7656,[],436,7707,[],436,7763,[],436,7765,[],436,7767,[],436,7774,[],437,7759,[],438,14,[],438,15,[],438,7620,[],438,7652,[],438,7763,[],438,7765,[],438,7767,[],438,7774,[],440,5,[],440,14,[],440,15,[],440,7620,[],440,7652,[],440,7763,[],440,7765,[],440,7767,[],440,7774,[],441,6,[],441,14,[],441,15,[],441,7620,[],441,7652,[],441,7763,[],441,7765,[],441,7767,[],441,7774,[],442,7,[],442,14,[],442,15,[],442,7620,[],442,7652,[],442,7763,[],442,7765,[],442,7767,[],442,7774,[],443,8,[],443,14,[],443,15,[],443,7620,[],443,7652,[],443,7763,[],443,7765,[],443,7767,[],443,7774,[],444,14,[],444,15,[],444,7620,[],444,7652,[],444,7763,[],444,7765,[],444,7767,[],444,7774,[],445,6,[],445,14,[],445,15,[],445,7620,[],445,7652,[],445,7763,[],445,7765,[],445,7767,[],445,7774,[],447,1,[],447,7,[],447,10,[],447,14,[],447,15,[],447,7620,[],447,7652,[],447,7763,[],447,7765,[],447,7767,[],447,7774,[],449,1,[],449,7,[],449,10,[],449,14,[],449,15,[],449,7620,[],449,7652,[],449,7763,[],449,7765,[],449,7767,[],449,7774,[],451,6,[],451,14,[],451,15,[],451,7620,[],451,7652,[],451,7763,[],451,7765,[],451,7767,[],451,7774,[],453,11,[],453,14,[],453,15,[],453,7620,[],453,7652,[],453,7763,[],453,7765,[],453,7767,[],453,7774,[],454,6,[],454,14,[],454,15,[],454,7620,[],454,7652,[],454,7763,[],454,7765,[],454,7767,[],454,7774,[],456,14,[],456,15,[],456,7620,[],456,7652,[],456,7763,[],456,7765,[],456,7767,[],456,7774,[],457,4,[],457,14,[],457,15,[],457,7620,[],457,7652,[],457,7763,[],457,7765,[],457,7767,[],457,7774,[],459,14,[],459,15,[],459,7620,[],459,7652,[],459,7763,[],459,7765,[],459,7767,[],459,7774,[],461,2,[],461,5,[],461,14,[],461,15,[],461,7620,[],461,7652,[],461,7763,[],461,7765,[],461,7767,[],461,7774,[],463,13,[],463,14,[],463,15,[],463,7620,[],463,7622,[],463,7652,[],463,7656,[],463,7707,[],463,7763,[],463,7765,[],463,7767,[],463,7774,[],464,7759,[],465,13,[],465,14,[],465,15,[],465,7620,[],465,7622,[],465,7652,[],465,7656,[],465,7707,[],465,7763,[],465,7765,[],465,7767,[],465,7774,[],466,7759,[],467,8,[],467,14,[],467,15,[],467,7620,[],467,7652,[],467,7763,[],467,7765,[],467,7767,[],467,7774,[],469,6,[],469,14,[],469,15,[],469,7620,[],469,7652,[],469,7763,[],469,7765,[],469,7767,[],469,7774,[],471,6,[],471,14,[],471,15,[],471,7620,[],471,7652,[],471,7763,[],471,7765,[],471,7767,[],471,7774,[],473,8,[],473,14,[],473,15,[],473,7620,[],473,7652,[],473,7763,[],473,7765,[],473,7767,[],473,7774,[],475,6,[],475,14,[],475,15,[],475,7620,[],475,7652,[],475,7763,[],475,7765,[],475,7767,[],475,7774,[],477,14,[],477,15,[],477,7620,[],477,7652,[],477,7763,[],477,7765,[],477,7767,[],477,7774,[],479,6,[],479,14,[],479,15,[],479,7620,[],479,7652,[],479,7763,[],479,7765,[],479,7767,[],479,7774,[],481,7,[],481,14,[],481,15,[],481,7620,[],481,7652,[],481,7763,[],481,7765,[],481,7767,[],481,7774,[],483,4,[],483,14,[],483,15,[],483,7620,[],483,7652,[],483,7763,[],483,7765,[],483,7767,[],483,7774,[],485,2,[],485,5,[],485,12,[],485,14,[],485,15,[],485,7620,[],485,7652,[],485,7763,[],485,7765,[],485,7767,[],485,7774,[],487,3,[],487,9,[],487,14,[],487,15,[],487,7620,[],487,7652,[],487,7763,[],487,7765,[],487,7767,[],487,7774,[],489,1,[],489,7,[],489,14,[],489,15,[],489,7620,[],489,7652,[],489,7763,[],489,7765,[],489,7767,[],489,7774,[],491,1,[],491,14,[],491,15,[],491,7620,[],491,7652,[],491,7763,[],491,7765,[],491,7767,[],491,7774,[],493,1,[],493,7,[],493,10,[],493,14,[],493,15,[],493,7620,[],493,7652,[],493,7763,[],493,7765,[],493,7767,[],493,7774,[],495,1,[],495,7,[],495,14,[],495,15,[],495,7620,[],495,7652,[],495,7763,[],495,7765,[],495,7767,[],495,7774,[],497,6,[],497,14,[],497,15,[],497,7620,[],497,7652,[],497,7763,[],497,7765,[],497,7767,[],497,7774,[],499,7,[],499,14,[],499,15,[],499,7620,[],499,7652,[],499,7763,[],499,7765,[],499,7767,[],499,7774,[],501,13,[],501,14,[],501,15,[],501,7620,[],501,7622,[],501,7652,[],501,7656,[],501,7707,[],501,7763,[],501,7765,[],501,7767,[],501,7774,[],502,7759,[],503,0,[],503,6,[],503,14,[],503,15,[],503,7620,[],503,7652,[],503,7763,[],503,7765,[],503,7767,[],503,7774,[],505,0,[],505,8,[],505,14,[],505,15,[],505,7620,[],505,7652,[],505,7763,[],505,7765,[],505,7767,[],505,7774,[],507,1,[],507,7,[],507,10,[],507,14,[],507,15,[],507,7620,[],507,7652,[],507,7763,[],507,7765,[],507,7767,[],507,7774,[],509,14,[],509,15,[],509,7620,[],509,7652,[],509,7763,[],509,7765,[],509,7767,[],509,7774,[],511,7,[],511,14,[],511,15,[],511,7620,[],511,7652,[],511,7763,[],511,7765,[],511,7767,[],511,7774,[],513,14,[],513,15,[],513,7620,[],513,7652,[],513,7763,[],513,7765,[],513,7767,[],513,7774,[],514,7620,[],514,7652,[],515,7642,[],515,7652,[],515,7770,[],516,7656,[],517,7759,[],518,7652,[],519,7642,[],519,7652,[],520,7765,[],520,7767,[],521,7622,[],521,7656,[],521,7707,[],522,7652,[],523,7619,[],523,7620,[],523,7652,[],523,7704,[],523,7774,[],524,7642,[],524,7652,[],525,7656,[],525,7763,[],526,7759,[],527,7619,[],527,7620,[],527,7652,[],527,7704,[],527,7774,[],528,7652,[],530,7642,[],530,7652,[],531,7656,[],531,7763,[],532,7759,[],534,7652,[],534,7656,[],534,7707,[],534,7772,[],541,16,[]],"feature":[3373,25,3373,27,3373,29,3373,31,3373,33,3373,35,3373,37,3373,39,3373,41,3373,43,3373,45,3373,47,3373,48,3373,49,3373,50,3373,51,3373,53,3373,55,3373,57,3373,59,3373,61,3373,63,3373,65,3373,67,3373,69,3373,71,3373,73,3373,75,3373,77,3373,79,3373,81,3373,83,3373,85,3373,87,3373,89,3373,91,3373,93,3373,95,3373,97,3373,99,3373,101,3373,103,3373,105,3373,107,3373,109,3373,111,3373,113,3373,115,3373,117,3373,119,3373,121,3373,123,3373,125,3373,127,3373,129,3373,131,3373,133,3373,135,3373,137,3373,139,3373,141,3373,143,3373,145,3373,147,3373,149,3373,151,3373,153,3373,155,3373,157,3373,159,3373,160,3373,162,3373,164,3373,166,3373,168,3373,170,3373,172,3373,174,3373,176,3373,178,3373,180,3373,182,3373,184,3373,186,3373,188,3373,190,3373,192,3373,194,3373,196,3373,198,3373,200,3373,202,3373,204,3373,206,3373,208,3373,210,3373,212,3373,214,3373,216,3373,218,3373,220,3373,222,3373,224,3373,226,3373,228,3373,230,3373,232,3373,234,3373,236,3373,238,3373,240,3373,242,3373,244,3373,246,3373,248,3373,250,3373,252,3373,254,3373,256,3373,258,3373,260,3373,262,3373,264,3373,266,3373,268,3373,270,3373,272,3373,274,3373,276,3373,278,3373,280,3373,282,3373,284,3373,286,3373,288,3373,290,3373,292,3373,294,3373,296,3373,298,3373,300,3373,302,3373,304,3373,306,3373,308,3373,310,3373,312,3373,314,3373,316,3373,318,3373,320,3373,322,3373,324,3373,326,3373,328,3373,330,3373,332,3373,334,3373,336,3373,338,3373,340,3373,342,3373,344,3373,346,3373,348,3373,350,3373,352,3373,354,3373,356,3373,358,3373,360,3373,362,3373,364,3373,366,3373,368,3373,370,3373,372,3373,374,3373,376,3373,378,3373,380,3373,382,3373,384,3373,386,3373,388,3373,390,3373,392,3373,394,3373,396,3373,398,3373,400,3373,402,3373,404,3373,406,3373,408,3373,410,3373,412,3373,414,3373,416,3373,418,3373,420,3373,422,3373,424,3373,426,3373,428,3373,430,3373,432,3373,434,3373,436,3373,438,3373,440,3373,441,3373,442,3373,443,3373,444,3373,445,3373,447,3373,449,3373,451,3373,453,3373,454,3373,456,3373,457,3373,459,3373,461,3373,463,3373,465,3373,467,3373,469,3373,471,3373,473,3373,475,3373,477,3373,479,3373,481,3373,483,3373,485,3373,487,3373,489,3373,491,3373,493,3373,495,3373,497,3373,499,3373,501,3373,503,3373,505,3373,507,3373,509,3373,511,3373,513,3374,25,3374,27,3374,29,3374,31,3374,33,3374,35,3374,37,3374,39,3374,41,3374,43,3374,45,3374,47,3374,48,3374,49,3374,50,3374,51,3374,53,3374,55,3374,57,3374,59,3374,61,3374,63,3374,65,3374,67,3374,69,3374,71,3374,73,3374,75,3374,77,3374,79,3374,81,3374,83,3374,85,3374,87,3374,89,3374,91,3374,93,3374,95,3374,97,3374,99,3374,101,3374,103,3374,105,3374,107,3374,109,3374,111,3374,113,3374,115,3374,117,3374,119,3374,121,3374,123,3374,125,3374,127,3374,129,3374,131,3374,133,3374,135,3374,137,3374,139,3374,141,3374,143,3374,145,3374,147,3374,149,3374,151,3374,153,3374,155,3374,157,3374,159,3374,160,3374,162,3374,164,3374,166,3374,168,3374,170,3374,172,3374,174,3374,176,3374,178,3374,180,3374,182,3374,184,3374,186,3374,188,3374,190,3374,192,3374,194,3374,196,3374,198,3374,200,3374,202,3374,204,3374,206,3374,208,3374,210,3374,212,3374,214,3374,216,3374,218,3374,220,3374,222,3374,224,3374,226,3374,228,3374,230,3374,232,3374,234,3374,236,3374,238,3374,240,3374,242,3374,244,3374,246,3374,248,3374,250,3374,252,3374,254,3374,256,3374,258,3374,260,3374,262,3374,264,3374,266,3374,268,3374,270,3374,272,3374,274,3374,276,3374,278,3374,280,3374,282,3374,284,3374,286,3374,288,3374,290,3374,292,3374,294,3374,296,3374,298,3374,300,3374,302,3374,304,3374,306,3374,308,3374,310,3374,312,3374,314,3374,316,3374,318,3374,320,3374,322,3374,324,3374,326,3374,328,3374,330,3374,332,3374,334,3374,336,3374,338,3374,340,3374,342,3374,344,3374,346,3374,348,3374,350,3374,352,3374,354,3374,356,3374,358,3374,360,3374,362,3374,364,3374,366,3374,368,3374,370,3374,372,3374,374,3374,376,3374,378,3374,380,3374,382,3374,384,3374,386,3374,388,3374,390,3374,392,3374,394,3374,396,3374,398,3374,400,3374,402,3374,404,3374,406,3374,408,3374,410,3374,412,3374,414,3374,416,3374,418,3374,420,3374,422,3374,424,3374,426,3374,428,3374,430,3374,432,3374,434,3374,436,3374,438,3374,440,3374,441,3374,442,3374,443,3374,444,3374,445,3374,447,3374,449,3374,451,3374,453,3374,454,3374,456,3374,457,3374,459,3374,461,3374,463,3374,465,3374,467,3374,469,3374,471,3374,473,3374,475,3374,477,3374,479,3374,481,3374,483,3374,485,3374,487,3374,489,3374,491,3374,493,3374,495,3374,497,3374,499,3374,501,3374,503,3374,505,3374,507,3374,509,3374,511,3374,513,3375,25,3375,27,3375,29,3375,31,3375,33,3375,35,3375,37,3375,39,3375,41,3375,43,3375,45,3375,47,3375,48,3375,49,3375,50,3375,51,3375,53,3375,55,3375,57,3375,59,3375,61,3375,63,3375,65,3375,67,3375,69,3375,71,3375,73,3375,75,3375,77,3375,79,3375,81,3375,83,3375,85,3375,87,3375,89,3375,91,3375,93,3375,95,3375,97,3375,99,3375,101,3375,103,3375,105,3375,107,3375,109,3375,111,3375,113,3375,115,3375,117,3375,119,3375,121,3375,123,3375,125,3375,127,3375,129,3375,131,3375,133,3375,135,3375,137,3375,139,3375,141,3375,143,3375,145,3375,147,3375,149,3375,151,3375,153,3375,155,3375,157,3375,159,3375,160,3375,162,3375,164,3375,166,3375,168,3375,170,3375,172,3375,174,3375,176,3375,178,3375,180,3375,182,3375,184,3375,186,3375,188,3375,190,3375,192,3375,194,3375,196,3375,198,3375,200,3375,202,3375,204,3375,206,3375,208,3375,210,3375,212,3375,214,3375,216,3375,218,3375,220,3375,222,3375,224,3375,226,3375,228,3375,230,3375,232,3375,234,3375,236,3375,238,3375,240,3375,242,3375,244,3375,246,3375,248,3375,250,3375,252,3375,254,3375,256,3375,258,3375,260,3375,262,3375,264,3375,266,3375,268,3375,270,3375,272,3375,274,3375,276,3375,278,3375,280,3375,282,3375,284,3375,286,3375,288,3375,290,3375,292,3375,294,3375,296,3375,298,3375,300,3375,302,3375,304,3375,306,3375,308,3375,310,3375,312,3375,314,3375,316,3375,318,3375,320,3375,322,3375,324,3375,326,3375,328,3375,330,3375,332,3375,334,3375,336,3375,338,3375,340,3375,342,3375,344,3375,346,3375,348,3375,350,3375,352,3375,354,3375,356,3375,358,3375,360,3375,362,3375,364,3375,366,3375,368,3375,370,3375,372,3375,374,3375,376,3375,378,3375,380,3375,382,3375,384,3375,386,3375,388,3375,390,3375,392,3375,394,3375,396,3375,398,3375,400,3375,402,3375,404,3375,406,3375,408,3375,410,3375,412,3375,414,3375,416,3375,418,3375,420,3375,422,3375,424,3375,426,3375,428,3375,430,3375,432,3375,434,3375,436,3375,438,3375,440,3375,441,3375,442,3375,443,3375,444,3375,445,3375,447,3375,449,3375,451,3375,453,3375,454,3375,456,3375,457,3375,459,3375,461,3375,463,3375,465,3375,467,3375,469,3375,471,3375,473,3375,475,3375,477,3375,479,3375,481,3375,483,3375,485,3375,487,3375,489,3375,491,3375,493,3375,495,3375,497,3375,499,3375,501,3375,503,3375,505,3375,507,3375,509,3375,511,3375,513,3376,25,3376,27,3376,29,3376,31,3376,33,3376,35,3376,37,3376,39,3376,41,3376,43,3376,45,3376,47,3376,48,3376,49,3376,50,3376,51,3376,53,3376,55,3376,57,3376,59,3376,61,3376,63,3376,65,3376,67,3376,69,3376,71,3376,73,3376,75,3376,77,3376,79,3376,81,3376,83,3376,85,3376,87,3376,89,3376,91,3376,93,3376,95,3376,97,3376,99,3376,101,3376,103,3376,105,3376,107,3376,109,3376,111,3376,113,3376,115,3376,117,3376,119,3376,121,3376,123,3376,125,3376,127,3376,129,3376,131,3376,133,3376,135,3376,137,3376,139,3376,141,3376,143,3376,145,3376,147,3376,149,3376,151,3376,153,3376,155,3376,157,3376,159,3376,160,3376,162,3376,164,3376,166,3376,168,3376,170,3376,172,3376,174,3376,176,3376,178,3376,180,3376,182,3376,184,3376,186,3376,188,3376,190,3376,192,3376,194,3376,196,3376,198,3376,200,3376,202,3376,204,3376,206,3376,208,3376,210,3376,212,3376,214,3376,216,3376,218,3376,220,3376,222,3376,224,3376,226,3376,228,3376,230,3376,232,3376,234,3376,236,3376,238,3376,240,3376,242,3376,244,3376,246,3376,248,3376,250,3376,252,3376,254,3376,256,3376,258,3376,260,3376,262,3376,264,3376,266,3376,268,3376,270,3376,272,3376,274,3376,276,3376,278,3376,280,3376,282,3376,284,3376,286,3376,288,3376,290,3376,292,3376,294,3376,296,3376,298,3376,300,3376,302,3376,304,3376,306,3376,308,3376,310,3376,312,3376,314,3376,316,3376,318,3376,320,3376,322,3376,324,3376,326,3376,328,3376,330,3376,332,3376,334,3376,336,3376,338,3376,340,3376,342,3376,344,3376,346,3376,348,3376,350,3376,352,3376,354,3376,356,3376,358,3376,360,3376,362,3376,364,3376,366,3376,368,3376,370,3376,372,3376,374,3376,376,3376,378,3376,380,3376,382,3376,384,3376,386,3376,388,3376,390,3376,392,3376,394,3376,396,3376,398,3376,400,3376,402,3376,404,3376,406,3376,408,3376,410,3376,412,3376,414,3376,416,3376,418,3376,420,3376,422,3376,424,3376,426,3376,428,3376,430,3376,432,3376,434,3376,436,3376,438,3376,440,3376,441,3376,442,3376,443,3376,444,3376,445,3376,447,3376,449,3376,451,3376,453,3376,454,3376,456,3376,457,3376,459,3376,461,3376,463,3376,465,3376,467,3376,469,3376,471,3376,473,3376,475,3376,477,3376,479,3376,481,3376,483,3376,485,3376,487,3376,489,3376,491,3376,493,3376,495,3376,497,3376,499,3376,501,3376,503,3376,505,3376,507,3376,509,3376,511,3376,513,3377,25,3377,27,3377,29,3377,31,3377,33,3377,35,3377,37,3377,39,3377,41,3377,43,3377,45,3377,47,3377,48,3377,49,3377,50,3377,51,3377,53,3377,55,3377,57,3377,59,3377,61,3377,63,3377,65,3377,67,3377,69,3377,71,3377,73,3377,75,3377,77,3377,79,3377,81,3377,83,3377,85,3377,87,3377,89,3377,91,3377,93,3377,95,3377,97,3377,99,3377,101,3377,103,3377,105,3377,107,3377,109,3377,111,3377,113,3377,115,3377,117,3377,119,3377,121,3377,123,3377,125,3377,127,3377,129,3377,131,3377,133,3377,135,3377,137,3377,139,3377,141,3377,143,3377,145,3377,147,3377,149,3377,151,3377,153,3377,155,3377,157,3377,159,3377,160,3377,162,3377,164,3377,166,3377,168,3377,170,3377,172,3377,174,3377,176,3377,178,3377,180,3377,182,3377,184,3377,186,3377,188,3377,190,3377,192,3377,194,3377,196,3377,198,3377,200,3377,202,3377,204,3377,206,3377,208,3377,210,3377,212,3377,214,3377,216,3377,218,3377,220,3377,222,3377,224,3377,226,3377,228,3377,230,3377,232,3377,234,3377,236,3377,238,3377,240,3377,242,3377,244,3377,246,3377,248,3377,250,3377,252,3377,254,3377,256,3377,258,3377,260,3377,262,3377,264,3377,266,3377,268,3377,270,3377,272,3377,274,3377,276,3377,278,3377,280,3377,282,3377,284,3377,286,3377,288,3377,290,3377,292,3377,294,3377,296,3377,298,3377,300,3377,302,3377,304,3377,306,3377,308,3377,310,3377,312,3377,314,3377,316,3377,318,3377,320,3377,322,3377,324,3377,326,3377,328,3377,330,3377,332,3377,334,3377,336,3377,338,3377,340,3377,342,3377,344,3377,346,3377,348,3377,350,3377,352,3377,354,3377,356,3377,358,3377,360,3377,362,3377,364,3377,366,3377,368,3377,370,3377,372,3377,374,3377,376,3377,378,3377,380,3377,382,3377,384,3377,386,3377,388,3377,390,3377,392,3377,394,3377,396,3377,398,3377,400,3377,402,3377,404,3377,406,3377,408,3377,410,3377,412,3377,414,3377,416,3377,418,3377,420,3377,422,3377,424,3377,426,3377,428,3377,430,3377,432,3377,434,3377,436,3377,438,3377,440,3377,441,3377,442,3377,443,3377,444,3377,445,3377,447,3377,449,3377,451,3377,453,3377,454,3377,456,3377,457,3377,459,3377,461,3377,463,3377,465,3377,467,3377,469,3377,471,3377,473,3377,475,3377,477,3377,479,3377,481,3377,483,3377,485,3377,487,3377,489,3377,491,3377,493,3377,495,3377,497,3377,499,3377,501,3377,503,3377,505,3377,507,3377,509,3377,511,3377,513,3378,25,3378,27,3378,29,3378,31,3378,33,3378,35,3378,37,3378,39,3378,41,3378,43,3378,45,3378,47,3378,48,3378,49,3378,50,3378,51,3378,53,3378,55,3378,57,3378,59,3378,61,3378,63,3378,65,3378,67,3378,69,3378,71,3378,73,3378,75,3378,77,3378,79,3378,81,3378,83,3378,85,3378,87,3378,89,3378,91,3378,93,3378,95,3378,97,3378,99,3378,101,3378,103,3378,105,3378,107,3378,109,3378,111,3378,113,3378,115,3378,117,3378,119,3378,121,3378,123,3378,125,3378,127,3378,129,3378,131,3378,133,3378,135,3378,137,3378,139,3378,141,3378,143,3378,145,3378,147,3378,149,3378,151,3378,153,3378,155,3378,157,3378,159,3378,160,3378,162,3378,164,3378,166,3378,168,3378,170,3378,172,3378,174,3378,176,3378,178,3378,180,3378,182,3378,184,3378,186,3378,188,3378,190,3378,192,3378,194,3378,196,3378,198,3378,200,3378,202,3378,204,3378,206,3378,208,3378,210,3378,212,3378,214,3378,216,3378,218,3378,220,3378,222,3378,224,3378,226,3378,228,3378,230,3378,232,3378,234,3378,236,3378,238,3378,240,3378,242,3378,244,3378,246,3378,248,3378,250,3378,252,3378,254,3378,256,3378,258,3378,260,3378,262,3378,264,3378,266,3378,268,3378,270,3378,272,3378,274,3378,276,3378,278,3378,280,3378,282,3378,284,3378,286,3378,288,3378,290,3378,292,3378,294,3378,296,3378,298,3378,300,3378,302,3378,304,3378,306,3378,308,3378,310,3378,312,3378,314,3378,316,3378,318,3378,320,3378,322,3378,324,3378,326,3378,328,3378,330,3378,332,3378,334,3378,336,3378,338,3378,340,3378,342,3378,344,3378,346,3378,348,3378,350,3378,352,3378,354,3378,356,3378,358,3378,360,3378,362,3378,364,3378,366,3378,368,3378,370,3378,372,3378,374,3378,376,3378,378,3378,380,3378,382,3378,384,3378,386,3378,388,3378,390,3378,392,3378,394,3378,396,3378,398,3378,400,3378,402,3378,404,3378,406,3378,408,3378,410,3378,412,3378,414,3378,416,3378,418,3378,420,3378,422,3378,424,3378,426,3378,428,3378,430,3378,432,3378,434,3378,436,3378,438,3378,440,3378,441,3378,442,3378,443,3378,444,3378,445,3378,447,3378,449,3378,451,3378,453,3378,454,3378,456,3378,457,3378,459,3378,461,3378,463,3378,465,3378,467,3378,469,3378,471,3378,473,3378,475,3378,477,3378,479,3378,481,3378,483,3378,485,3378,487,3378,489,3378,491,3378,493,3378,495,3378,497,3378,499,3378,501,3378,503,3378,505,3378,507,3378,509,3378,511,3378,513,3379,25,3379,27,3379,29,3379,31,3379,33,3379,35,3379,37,3379,39,3379,41,3379,43,3379,45,3379,47,3379,48,3379,49,3379,50,3379,51,3379,53,3379,55,3379,57,3379,59,3379,61,3379,63,3379,65,3379,67,3379,69,3379,71,3379,73,3379,75,3379,77,3379,79,3379,81,3379,83,3379,85,3379,87,3379,89,3379,91,3379,93,3379,95,3379,97,3379,99,3379,101,3379,103,3379,105,3379,107,3379,109,3379,111,3379,113,3379,115,3379,117,3379,119,3379,121,3379,123,3379,125,3379,127,3379,129,3379,131,3379,133,3379,135,3379,137,3379,139,3379,141,3379,143,3379,145,3379,147,3379,149,3379,151,3379,153,3379,155,3379,157,3379,159,3379,160,3379,162,3379,164,3379,166,3379,168,3379,170,3379,172,3379,174,3379,176,3379,178,3379,180,3379,182,3379,184,3379,186,3379,188,3379,190,3379,192,3379,194,3379,196,3379,198,3379,200,3379,202,3379,204,3379,206,3379,208,3379,210,3379,212,3379,214,3379,216,3379,218,3379,220,3379,222,3379,224,3379,226,3379,228,3379,230,3379,232,3379,234,3379,236,3379,238,3379,240,3379,242,3379,244,3379,246,3379,248,3379,250,3379,252,3379,254,3379,256,3379,258,3379,260,3379,262,3379,264,3379,266,3379,268,3379,270,3379,272,3379,274,3379,276,3379,278,3379,280,3379,282,3379,284,3379,286,3379,288,3379,290,3379,292,3379,294,3379,296,3379,298,3379,300,3379,302,3379,304,3379,306,3379,308,3379,310,3379,312,3379,314,3379,316,3379,318,3379,320,3379,322,3379,324,3379,326,3379,328,3379,330,3379,332,3379,334,3379,336,3379,338,3379,340,3379,342,3379,344,3379,346,3379,348,3379,350,3379,352,3379,354,3379,356,3379,358,3379,360,3379,362,3379,364,3379,366,3379,368,3379,370,3379,372,3379,374,3379,376,3379,378,3379,380,3379,382,3379,384,3379,386,3379,388,3379,390,3379,392,3379,394,3379,396,3379,398,3379,400,3379,402,3379,404,3379,406,3379,408,3379,410,3379,412,3379,414,3379,416,3379,418,3379,420,3379,422,3379,424,3379,426,3379,428,3379,430,3379,432,3379,434,3379,436,3379,438,3379,440,3379,441,3379,442,3379,443,3379,444,3379,445,3379,447,3379,449,3379,451,3379,453,3379,454,3379,456,3379,457,3379,459,3379,461,3379,463,3379,465,3379,467,3379,469,3379,471,3379,473,3379,475,3379,477,3379,479,3379,481,3379,483,3379,485,3379,487,3379,489,3379,491,3379,493,3379,495,3379,497,3379,499,3379,501,3379,503,3379,505,3379,507,3379,509,3379,511,3379,513,3380,25,3380,27,3380,29,3380,31,3380,33,3380,35,3380,37,3380,39,3380,41,3380,43,3380,45,3380,47,3380,48,3380,49,3380,50,3380,51,3380,53,3380,55,3380,57,3380,59,3380,61,3380,63,3380,65,3380,67,3380,69,3380,71,3380,73,3380,75,3380,77,3380,79,3380,81,3380,83,3380,85,3380,87,3380,89,3380,91,3380,93,3380,95,3380,97,3380,99,3380,101,3380,103,3380,105,3380,107,3380,109,3380,111,3380,113,3380,115,3380,117,3380,119,3380,121,3380,123,3380,125,3380,127,3380,129,3380,131,3380,133,3380,135,3380,137,3380,139,3380,141,3380,143,3380,145,3380,147,3380,149,3380,151,3380,153,3380,155,3380,157,3380,159,3380,160,3380,162,3380,164,3380,166,3380,168,3380,170,3380,172,3380,174,3380,176,3380,178,3380,180,3380,182,3380,184,3380,186,3380,188,3380,190,3380,192,3380,194,3380,196,3380,198,3380,200,3380,202,3380,204,3380,206,3380,208,3380,210,3380,212,3380,214,3380,216,3380,218,3380,220,3380,222,3380,224,3380,226,3380,228,3380,230,3380,232,3380,234,3380,236,3380,238,3380,240,3380,242,3380,244,3380,246,3380,248,3380,250,3380,252,3380,254,3380,256,3380,258,3380,260,3380,262,3380,264,3380,266,3380,268,3380,270,3380,272,3380,274,3380,276,3380,278,3380,280,3380,282,3380,284,3380,286,3380,288,3380,290,3380,292,3380,294,3380,296,3380,298,3380,300,3380,302,3380,304,3380,306,3380,308,3380,310,3380,312,3380,314,3380,316,3380,318,3380,320,3380,322,3380,324,3380,326,3380,328,3380,330,3380,332,3380,334,3380,336,3380,338,3380,340,3380,342,3380,344,3380,346,3380,348,3380,350,3380,352,3380,354,3380,356,3380,358,3380,360,3380,362,3380,364,3380,366,3380,368,3380,370,3380,372,3380,374,3380,376,3380,378,3380,380,3380,382,3380,384,3380,386,3380,388,3380,390,3380,392,3380,394,3380,396,3380,398,3380,400,3380,402,3380,404,3380,406,3380,408,3380,410,3380,412,3380,414,3380,416,3380,418,3380,420,3380,422,3380,424,3380,426,3380,428,3380,430,3380,432,3380,434,3380,436,3380,438,3380,440,3380,441,3380,442,3380,443,3380,444,3380,445,3380,447,3380,449,3380,451,3380,453,3380,454,3380,456,3380,457,3380,459,3380,461,3380,463,3380,465,3380,467,3380,469,3380,471,3380,473,3380,475,3380,477,3380,479,3380,481,3380,483,3380,485,3380,487,3380,489,3380,491,3380,493,3380,495,3380,497,3380,499,3380,501,3380,503,3380,505,3380,507,3380,509,3380,511,3380,513,3381,25,3381,27,3381,29,3381,31,3381,33,3381,35,3381,37,3381,39,3381,41,3381,43,3381,45,3381,47,3381,48,3381,49,3381,50,3381,51,3381,53,3381,55,3381,57,3381,59,3381,61,3381,63,3381,65,3381,67,3381,69,3381,71,3381,73,3381,75,3381,77,3381,79,3381,81,3381,83,3381,85,3381,87,3381,89,3381,91,3381,93,3381,95,3381,97,3381,99,3381,101,3381,103,3381,105,3381,107,3381,109,3381,111,3381,113,3381,115,3381,117,3381,119,3381,121,3381,123,3381,125,3381,127,3381,129,3381,131,3381,133,3381,135,3381,137,3381,139,3381,141,3381,143,3381,145,3381,147,3381,149,3381,151,3381,153,3381,155,3381,157,3381,159,3381,160,3381,162,3381,164,3381,166,3381,168,3381,170,3381,172,3381,174,3381,176,3381,178,3381,180,3381,182,3381,184,3381,186,3381,188,3381,190,3381,192,3381,194,3381,196,3381,198,3381,200,3381,202,3381,204,3381,206,3381,208,3381,210,3381,212,3381,214,3381,216,3381,218,3381,220,3381,222,3381,224,3381,226,3381,228,3381,230,3381,232,3381,234,3381,236,3381,238,3381,240,3381,242,3381,244,3381,246,3381,248,3381,250,3381,252,3381,254,3381,256,3381,258,3381,260,3381,262,3381,264,3381,266,3381,268,3381,270,3381,272,3381,274,3381,276,3381,278,3381,280,3381,282,3381,284,3381,286,3381,288,3381,290,3381,292,3381,294,3381,296,3381,298,3381,300,3381,302,3381,304,3381,306,3381,308,3381,310,3381,312,3381,314,3381,316,3381,318,3381,320,3381,322,3381,324,3381,326,3381,328,3381,330,3381,332,3381,334,3381,336,3381,338,3381,340,3381,342,3381,344,3381,346,3381,348,3381,350,3381,352,3381,354,3381,356,3381,358,3381,360,3381,362,3381,364,3381,366,3381,368,3381,370,3381,372,3381,374,3381,376,3381,378,3381,380,3381,382,3381,384,3381,386,3381,388,3381,390,3381,392,3381,394,3381,396,3381,398,3381,400,3381,402,3381,404,3381,406,3381,408,3381,410,3381,412,3381,414,3381,416,3381,418,3381,420,3381,422,3381,424,3381,426,3381,428,3381,430,3381,432,3381,434,3381,436,3381,438,3381,440,3381,441,3381,442,3381,443,3381,444,3381,445,3381,447,3381,449,3381,451,3381,453,3381,454,3381,456,3381,457,3381,459,3381,461,3381,463,3381,465,3381,467,3381,469,3381,471,3381,473,3381,475,3381,477,3381,479,3381,481,3381,483,3381,485,3381,487,3381,489,3381,491,3381,493,3381,495,3381,497,3381,499,3381,501,3381,503,3381,505,3381,507,3381,509,3381,511,3381,513,3382,25,3382,27,3382,29,3382,31,3382,33,3382,35,3382,37,3382,39,3382,41,3382,43,3382,45,3382,47,3382,48,3382,49,3382,50,3382,51,3382,53,3382,55,3382,57,3382,59,3382,61,3382,63,3382,65,3382,67,3382,69,3382,71,3382,73,3382,75,3382,77,3382,79,3382,81,3382,83,3382,85,3382,87,3382,89,3382,91,3382,93,3382,95,3382,97,3382,99,3382,101,3382,103,3382,105,3382,107,3382,109,3382,111,3382,113,3382,115,3382,117,3382,119,3382,121,3382,123,3382,125,3382,127,3382,129,3382,131,3382,133,3382,135,3382,137,3382,139,3382,141,3382,143,3382,145,3382,147,3382,149,3382,151,3382,153,3382,155,3382,157,3382,159,3382,160,3382,162,3382,164,3382,166,3382,168,3382,170,3382,172,3382,174,3382,176,3382,178,3382,180,3382,182,3382,184,3382,186,3382,188,3382,190,3382,192,3382,194,3382,196,3382,198,3382,200,3382,202,3382,204,3382,206,3382,208,3382,210,3382,212,3382,214,3382,216,3382,218,3382,220,3382,222,3382,224,3382,226,3382,228,3382,230,3382,232,3382,234,3382,236,3382,238,3382,240,3382,242,3382,244,3382,246,3382,248,3382,250,3382,252,3382,254,3382,256,3382,258,3382,260,3382,262,3382,264,3382,266,3382,268,3382,270,3382,272,3382,274,3382,276,3382,278,3382,280,3382,282,3382,284,3382,286,3382,288,3382,290,3382,292,3382,294,3382,296,3382,298,3382,300,3382,302,3382,304,3382,306,3382,308,3382,310,3382,312,3382,314,3382,316,3382,318,3382,320,3382,322,3382,324,3382,326,3382,328,3382,330,3382,332,3382,334,3382,336,3382,338,3382,340,3382,342,3382,344,3382,346,3382,348,3382,350,3382,352,3382,354,3382,356,3382,358,3382,360,3382,362,3382,364,3382,366,3382,368,3382,370,3382,372,3382,374,3382,376,3382,378,3382,380,3382,382,3382,384,3382,386,3382,388,3382,390,3382,392,3382,394,3382,396,3382,398,3382,400,3382,402,3382,404,3382,406,3382,408,3382,410,3382,412,3382,414,3382,416,3382,418,3382,420,3382,422,3382,424,3382,426,3382,428,3382,430,3382,432,3382,434,3382,436,3382,438,3382,440,3382,441,3382,442,3382,443,3382,444,3382,445,3382,447,3382,449,3382,451,3382,453,3382,454,3382,456,3382,457,3382,459,3382,461,3382,463,3382,465,3382,467,3382,469,3382,471,3382,473,3382,475,3382,477,3382,479,3382,481,3382,483,3382,485,3382,487,3382,489,3382,491,3382,493,3382,495,3382,497,3382,499,3382,501,3382,503,3382,505,3382,507,3382,509,3382,511,3382,513,3383,25,3383,27,3383,29,3383,31,3383,33,3383,35,3383,37,3383,39,3383,41,3383,43,3383,45,3383,47,3383,48,3383,49,3383,50,3383,51,3383,53,3383,55,3383,57,3383,59,3383,61,3383,63,3383,65,3383,67,3383,69,3383,71,3383,73,3383,75,3383,77,3383,79,3383,81,3383,83,3383,85,3383,87,3383,89,3383,91,3383,93,3383,95,3383,97,3383,99,3383,101,3383,103,3383,105,3383,107,3383,109,3383,111,3383,113,3383,115,3383,117,3383,119,3383,121,3383,123,3383,125,3383,127,3383,129,3383,131,3383,133,3383,135,3383,137,3383,139,3383,141,3383,143,3383,145,3383,147,3383,149,3383,151,3383,153,3383,155,3383,157,3383,159,3383,160,3383,162,3383,164,3383,166,3383,168,3383,170,3383,172,3383,174,3383,176,3383,178,3383,180,3383,182,3383,184,3383,186,3383,188,3383,190,3383,192,3383,194,3383,196,3383,198,3383,200,3383,202,3383,204,3383,206,3383,208,3383,210,3383,212,3383,214,3383,216,3383,218,3383,220,3383,222,3383,224,3383,226,3383,228,3383,230,3383,232,3383,234,3383,236,3383,238,3383,240,3383,242,3383,244,3383,246,3383,248,3383,250,3383,252,3383,254,3383,256,3383,258,3383,260,3383,262,3383,264,3383,266,3383,268,3383,270,3383,272,3383,274,3383,276,3383,278,3383,280,3383,282,3383,284,3383,286,3383,288,3383,290,3383,292,3383,294,3383,296,3383,298,3383,300,3383,302,3383,304,3383,306,3383,308,3383,310,3383,312,3383,314,3383,316,3383,318,3383,320,3383,322,3383,324,3383,326,3383,328,3383,330,3383,332,3383,334,3383,336,3383,338,3383,340,3383,342,3383,344,3383,346,3383,348,3383,350,3383,352,3383,354,3383,356,3383,358,3383,360,3383,362,3383,364,3383,366,3383,368,3383,370,3383,372,3383,374,3383,376,3383,378,3383,380,3383,382,3383,384,3383,386,3383,388,3383,390,3383,392,3383,394,3383,396,3383,398,3383,400,3383,402,3383,404,3383,406,3383,408,3383,410,3383,412,3383,414,3383,416,3383,418,3383,420,3383,422,3383,424,3383,426,3383,428,3383,430,3383,432,3383,434,3383,436,3383,438,3383,440,3383,441,3383,442,3383,443,3383,444,3383,445,3383,447,3383,449,3383,451,3383,453,3383,454,3383,456,3383,457,3383,459,3383,461,3383,463,3383,465,3383,467,3383,469,3383,471,3383,473,3383,475,3383,477,3383,479,3383,481,3383,483,3383,485,3383,487,3383,489,3383,491,3383,493,3383,495,3383,497,3383,499,3383,501,3383,503,3383,505,3383,507,3383,509,3383,511,3383,513,3384,25,3384,27,3384,29,3384,31,3384,33,3384,35,3384,37,3384,39,3384,41,3384,43,3384,45,3384,47,3384,48,3384,49,3384,50,3384,51,3384,53,3384,55,3384,57,3384,59,3384,61,3384,63,3384,65,3384,67,3384,69,3384,71,3384,73,3384,75,3384,77,3384,79,3384,81,3384,83,3384,85,3384,87,3384,89,3384,91,3384,93,3384,95,3384,97,3384,99,3384,101,3384,103,3384,105,3384,107,3384,109,3384,111,3384,113,3384,115,3384,117,3384,119,3384,121,3384,123,3384,125,3384,127,3384,129,3384,131,3384,133,3384,135,3384,137,3384,139,3384,141,3384,143,3384,145,3384,147,3384,149,3384,151,3384,153,3384,155,3384,157,3384,159,3384,160,3384,162,3384,164,3384,166,3384,168,3384,170,3384,172,3384,174,3384,176,3384,178,3384,180,3384,182,3384,184,3384,186,3384,188,3384,190,3384,192,3384,194,3384,196,3384,198,3384,200,3384,202,3384,204,3384,206,3384,208,3384,210,3384,212,3384,214,3384,216,3384,218,3384,220,3384,222,3384,224,3384,226,3384,228,3384,230,3384,232,3384,234,3384,236,3384,238,3384,240,3384,242,3384,244,3384,246,3384,248,3384,250,3384,252,3384,254,3384,256,3384,258,3384,260,3384,262,3384,264,3384,266,3384,268,3384,270,3384,272,3384,274,3384,276,3384,278,3384,280,3384,282,3384,284,3384,286,3384,288,3384,290,3384,292,3384,294,3384,296,3384,298,3384,300,3384,302,3384,304,3384,306,3384,308,3384,310,3384,312,3384,314,3384,316,3384,318,3384,320,3384,322,3384,324,3384,326,3384,328,3384,330,3384,332,3384,334,3384,336,3384,338,3384,340,3384,342,3384,344,3384,346,3384,348,3384,350,3384,352,3384,354,3384,356,3384,358,3384,360,3384,362,3384,364,3384,366,3384,368,3384,370,3384,372,3384,374,3384,376,3384,378,3384,380,3384,382,3384,384,3384,386,3384,388,3384,390,3384,392,3384,394,3384,396,3384,398,3384,400,3384,402,3384,404,3384,406,3384,408,3384,410,3384,412,3384,414,3384,416,3384,418,3384,420,3384,422,3384,424,3384,426,3384,428,3384,430,3384,432,3384,434,3384,436,3384,438,3384,440,3384,441,3384,442,3384,443,3384,444,3384,445,3384,447,3384,449,3384,451,3384,453,3384,454,3384,456,3384,457,3384,459,3384,461,3384,463,3384,465,3384,467,3384,469,3384,471,3384,473,3384,475,3384,477,3384,479,3384,481,3384,483,3384,485,3384,487,3384,489,3384,491,3384,493,3384,495,3384,497,3384,499,3384,501,3384,503,3384,505,3384,507,3384,509,3384,511,3384,513,3385,25,3385,27,3385,29,3385,31,3385,33,3385,35,3385,37,3385,39,3385,41,3385,43,3385,45,3385,47,3385,48,3385,49,3385,50,3385,51,3385,53,3385,55,3385,57,3385,59,3385,61,3385,63,3385,65,3385,67,3385,69,3385,71,3385,73,3385,75,3385,77,3385,79,3385,81,3385,83,3385,85,3385,87,3385,89,3385,91,3385,93,3385,95,3385,97,3385,99,3385,101,3385,103,3385,105,3385,107,3385,109,3385,111,3385,113,3385,115,3385,117,3385,119,3385,121,3385,123,3385,125,3385,127,3385,129,3385,131,3385,133,3385,135,3385,137,3385,139,3385,141,3385,143,3385,145,3385,147,3385,149,3385,151,3385,153,3385,155,3385,157,3385,159,3385,160,3385,162,3385,164,3385,166,3385,168,3385,170,3385,172,3385,174,3385,176,3385,178,3385,180,3385,182,3385,184,3385,186,3385,188,3385,190,3385,192,3385,194,3385,196,3385,198,3385,200,3385,202,3385,204,3385,206,3385,208,3385,210,3385,212,3385,214,3385,216,3385,218,3385,220,3385,222,3385,224,3385,226,3385,228,3385,230,3385,232,3385,234,3385,236,3385,238,3385,240,3385,242,3385,244,3385,246,3385,248,3385,250,3385,252,3385,254,3385,256,3385,258,3385,260,3385,262,3385,264,3385,266,3385,268,3385,270,3385,272,3385,274,3385,276,3385,278,3385,280,3385,282,3385,284,3385,286,3385,288,3385,290,3385,292,3385,294,3385,296,3385,298,3385,300,3385,302,3385,304,3385,306,3385,308,3385,310,3385,312,3385,314,3385,316,3385,318,3385,320,3385,322,3385,324,3385,326,3385,328,3385,330,3385,332,3385,334,3385,336,3385,338,3385,340,3385,342,3385,344,3385,346,3385,348,3385,350,3385,352,3385,354,3385,356,3385,358,3385,360,3385,362,3385,364,3385,366,3385,368,3385,370,3385,372,3385,374,3385,376,3385,378,3385,380,3385,382,3385,384,3385,386,3385,388,3385,390,3385,392,3385,394,3385,396,3385,398,3385,400,3385,402,3385,404,3385,406,3385,408,3385,410,3385,412,3385,414,3385,416,3385,418,3385,420,3385,422,3385,424,3385,426,3385,428,3385,430,3385,432,3385,434,3385,436,3385,438,3385,440,3385,441,3385,442,3385,443,3385,444,3385,445,3385,447,3385,449,3385,451,3385,453,3385,454,3385,456,3385,457,3385,459,3385,461,3385,463,3385,465,3385,467,3385,469,3385,471,3385,473,3385,475,3385,477,3385,479,3385,481,3385,483,3385,485,3385,487,3385,489,3385,491,3385,493,3385,495,3385,497,3385,499,3385,501,3385,503,3385,505,3385,507,3385,509,3385,511,3385,513,3386,25,3386,27,3386,29,3386,31,3386,33,3386,35,3386,37,3386,39,3386,41,3386,43,3386,45,3386,47,3386,48,3386,49,3386,50,3386,51,3386,53,3386,55,3386,57,3386,59,3386,61,3386,63,3386,65,3386,67,3386,69,3386,71,3386,73,3386,75,3386,77,3386,79,3386,81,3386,83,3386,85,3386,87,3386,89,3386,91,3386,93,3386,95,3386,97,3386,99,3386,101,3386,103,3386,105,3386,107,3386,109,3386,111,3386,113,3386,115,3386,117,3386,119,3386,121,3386,123,3386,125,3386,127,3386,129,3386,131,3386,133,3386,135,3386,137,3386,139,3386,141,3386,143,3386,145,3386,147,3386,149,3386,151,3386,153,3386,155,3386,157,3386,159,3386,160,3386,162,3386,164,3386,166,3386,168,3386,170,3386,172,3386,174,3386,176,3386,178,3386,180,3386,182,3386,184,3386,186,3386,188,3386,190,3386,192,3386,194,3386,196,3386,198,3386,200,3386,202,3386,204,3386,206,3386,208,3386,210,3386,212,3386,214,3386,216,3386,218,3386,220,3386,222,3386,224,3386,226,3386,228,3386,230,3386,232,3386,234,3386,236,3386,238,3386,240,3386,242,3386,244,3386,246,3386,248,3386,250,3386,252,3386,254,3386,256,3386,258,3386,260,3386,262,3386,264,3386,266,3386,268,3386,270,3386,272,3386,274,3386,276,3386,278,3386,280,3386,282,3386,284,3386,286,3386,288,3386,290,3386,292,3386,294,3386,296,3386,298,3386,300,3386,302,3386,304,3386,306,3386,308,3386,310,3386,312,3386,314,3386,316,3386,318,3386,320,3386,322,3386,324,3386,326,3386,328,3386,330,3386,332,3386,334,3386,336,3386,338,3386,340,3386,342,3386,344,3386,346,3386,348,3386,350,3386,352,3386,354,3386,356,3386,358,3386,360,3386,362,3386,364,3386,366,3386,368,3386,370,3386,372,3386,374,3386,376,3386,378,3386,380,3386,382,3386,384,3386,386,3386,388,3386,390,3386,392,3386,394,3386,396,3386,398,3386,400,3386,402,3386,404,3386,406,3386,408,3386,410,3386,412,3386,414,3386,416,3386,418,3386,420,3386,422,3386,424,3386,426,3386,428,3386,430,3386,432,3386,434,3386,436,3386,438,3386,440,3386,441,3386,442,3386,443,3386,444,3386,445,3386,447,3386,449,3386,451,3386,453,3386,454,3386,456,3386,457,3386,459,3386,461,3386,463,3386,465,3386,467,3386,469,3386,471,3386,473,3386,475,3386,477,3386,479,3386,481,3386,483,3386,485,3386,487,3386,489,3386,491,3386,493,3386,495,3386,497,3386,499,3386,501,3386,503,3386,505,3386,507,3386,509,3386,511,3386,513,3387,25,3387,27,3387,29,3387,31,3387,33,3387,35,3387,37,3387,39,3387,41,3387,43,3387,45,3387,47,3387,48,3387,49,3387,50,3387,51,3387,53,3387,55,3387,57,3387,59,3387,61,3387,63,3387,65,3387,67,3387,69,3387,71,3387,73,3387,75,3387,77,3387,79,3387,81,3387,83,3387,85,3387,87,3387,89,3387,91,3387,93,3387,95,3387,97,3387,99,3387,101,3387,103,3387,105,3387,107,3387,109,3387,111,3387,113,3387,115,3387,117,3387,119,3387,121,3387,123,3387,125,3387,127,3387,129,3387,131,3387,133,3387,135,3387,137,3387,139,3387,141,3387,143,3387,145,3387,147,3387,149,3387,151,3387,153,3387,155,3387,157,3387,159,3387,160,3387,162,3387,164,3387,166,3387,168,3387,170,3387,172,3387,174,3387,176,3387,178,3387,180,3387,182,3387,184,3387,186,3387,188,3387,190,3387,192,3387,194,3387,196,3387,198,3387,200,3387,202,3387,204,3387,206,3387,208,3387,210,3387,212,3387,214,3387,216,3387,218,3387,220,3387,222,3387,224,3387,226,3387,228,3387,230,3387,232,3387,234,3387,236,3387,238,3387,240,3387,242,3387,244,3387,246,3387,248,3387,250,3387,252,3387,254,3387,256,3387,258,3387,260,3387,262,3387,264,3387,266,3387,268,3387,270,3387,272,3387,274,3387,276,3387,278,3387,280,3387,282,3387,284,3387,286,3387,288,3387,290,3387,292,3387,294,3387,296,3387,298,3387,300,3387,302,3387,304,3387,306,3387,308,3387,310,3387,312,3387,314,3387,316,3387,318,3387,320,3387,322,3387,324,3387,326,3387,328,3387,330,3387,332,3387,334,3387,336,3387,338,3387,340,3387,342,3387,344,3387,346,3387,348,3387,350,3387,352,3387,354,3387,356,3387,358,3387,360,3387,362,3387,364,3387,366,3387,368,3387,370,3387,372,3387,374,3387,376,3387,378,3387,380,3387,382,3387,384,3387,386,3387,388,3387,390,3387,392,3387,394,3387,396,3387,398,3387,400,3387,402,3387,404,3387,406,3387,408,3387,410,3387,412,3387,414,3387,416,3387,418,3387,420,3387,422,3387,424,3387,426,3387,428,3387,430,3387,432,3387,434,3387,436,3387,438,3387,440,3387,441,3387,442,3387,443,3387,444,3387,445,3387,447,3387,449,3387,451,3387,453,3387,454,3387,456,3387,457,3387,459,3387,461,3387,463,3387,465,3387,467,3387,469,3387,471,3387,473,3387,475,3387,477,3387,479,3387,481,3387,483,3387,485,3387,487,3387,489,3387,491,3387,493,3387,495,3387,497,3387,499,3387,501,3387,503,3387,505,3387,507,3387,509,3387,511,3387,513,3388,25,3388,27,3388,29,3388,31,3388,33,3388,35,3388,37,3388,39,3388,41,3388,43,3388,45,3388,47,3388,48,3388,49,3388,50,3388,51,3388,53,3388,55,3388,57,3388,59,3388,61,3388,63,3388,65,3388,67,3388,69,3388,71,3388,73,3388,75,3388,77,3388,79,3388,81,3388,83,3388,85,3388,87,3388,89,3388,91,3388,93,3388,95,3388,97,3388,99,3388,101,3388,103,3388,105,3388,107,3388,109,3388,111,3388,113,3388,115,3388,117,3388,119,3388,121,3388,123,3388,125,3388,127,3388,129,3388,131,3388,133,3388,135,3388,137,3388,139,3388,141,3388,143,3388,145,3388,147,3388,149,3388,151,3388,153,3388,155,3388,157,3388,159,3388,160,3388,162,3388,164,3388,166,3388,168,3388,170,3388,172,3388,174,3388,176,3388,178,3388,180,3388,182,3388,184,3388,186,3388,188,3388,190,3388,192,3388,194,3388,196,3388,198,3388,200,3388,202,3388,204,3388,206,3388,208,3388,210,3388,212,3388,214,3388,216,3388,218,3388,220,3388,222,3388,224,3388,226,3388,228,3388,230,3388,232,3388,234,3388,236,3388,238,3388,240,3388,242,3388,244,3388,246,3388,248,3388,250,3388,252,3388,254,3388,256,3388,258,3388,260,3388,262,3388,264,3388,266,3388,268,3388,270,3388,272,3388,274,3388,276,3388,278,3388,280,3388,282,3388,284,3388,286,3388,288,3388,290,3388,292,3388,294,3388,296,3388,298,3388,300,3388,302,3388,304,3388,306,3388,308,3388,310,3388,312,3388,314,3388,316,3388,318,3388,320,3388,322,3388,324,3388,326,3388,328,3388,330,3388,332,3388,334,3388,336,3388,338,3388,340,3388,342,3388,344,3388,346,3388,348,3388,350,3388,352,3388,354,3388,356,3388,358,3388,360,3388,362,3388,364,3388,366,3388,368,3388,370,3388,372,3388,374,3388,376,3388,378,3388,380,3388,382,3388,384,3388,386,3388,388,3388,390,3388,392,3388,394,3388,396,3388,398,3388,400,3388,402,3388,404,3388,406,3388,408,3388,410,3388,412,3388,414,3388,416,3388,418,3388,420,3388,422,3388,424,3388,426,3388,428,3388,430,3388,432,3388,434,3388,436,3388,438,3388,440,3388,441,3388,442,3388,443,3388,444,3388,445,3388,447,3388,449,3388,451,3388,453,3388,454,3388,456,3388,457,3388,459,3388,461,3388,463,3388,465,3388,467,3388,469,3388,471,3388,473,3388,475,3388,477,3388,479,3388,481,3388,483,3388,485,3388,487,3388,489,3388,491,3388,493,3388,495,3388,497,3388,499,3388,501,3388,503,3388,505,3388,507,3388,509,3388,511,3388,513,3389,25,3389,27,3389,29,3389,31,3389,33,3389,35,3389,37,3389,39,3389,41,3389,43,3389,45,3389,47,3389,48,3389,49,3389,50,3389,51,3389,53,3389,55,3389,57,3389,59,3389,61,3389,63,3389,65,3389,67,3389,69,3389,71,3389,73,3389,75,3389,77,3389,79,3389,81,3389,83,3389,85,3389,87,3389,89,3389,91,3389,93,3389,95,3389,97,3389,99,3389,101,3389,103,3389,105,3389,107,3389,109,3389,111,3389,113,3389,115,3389,117,3389,119,3389,121,3389,123,3389,125,3389,127,3389,129,3389,131,3389,133,3389,135,3389,137,3389,139,3389,141,3389,143,3389,145,3389,147,3389,149,3389,151,3389,153,3389,155,3389,157,3389,159,3389,160,3389,162,3389,164,3389,166,3389,168,3389,170,3389,172,3389,174,3389,176,3389,178,3389,180,3389,182,3389,184,3389,186,3389,188,3389,190,3389,192,3389,194,3389,196,3389,198,3389,200,3389,202,3389,204,3389,206,3389,208,3389,210,3389,212,3389,214,3389,216,3389,218,3389,220,3389,222,3389,224,3389,226,3389,228,3389,230,3389,232,3389,234,3389,236,3389,238,3389,240,3389,242,3389,244,3389,246,3389,248,3389,250,3389,252,3389,254,3389,256,3389,258,3389,260,3389,262,3389,264,3389,266,3389,268,3389,270,3389,272,3389,274,3389,276,3389,278,3389,280,3389,282,3389,284,3389,286,3389,288,3389,290,3389,292,3389,294,3389,296,3389,298,3389,300,3389,302,3389,304,3389,306,3389,308,3389,310,3389,312,3389,314,3389,316,3389,318,3389,320,3389,322,3389,324,3389,326,3389,328,3389,330,3389,332,3389,334,3389,336,3389,338,3389,340,3389,342,3389,344,3389,346,3389,348,3389,350,3389,352,3389,354,3389,356,3389,358,3389,360,3389,362,3389,364,3389,366,3389,368,3389,370,3389,372,3389,374,3389,376,3389,378,3389,380,3389,382,3389,384,3389,386,3389,388,3389,390,3389,392,3389,394,3389,396,3389,398,3389,400,3389,402,3389,404,3389,406,3389,408,3389,410,3389,412,3389,414,3389,416,3389,418,3389,420,3389,422,3389,424,3389,426,3389,428,3389,430,3389,432,3389,434,3389,436,3389,438,3389,440,3389,441,3389,442,3389,443,3389,444,3389,445,3389,447,3389,449,3389,451,3389,453,3389,454,3389,456,3389,457,3389,459,3389,461,3389,463,3389,465,3389,467,3389,469,3389,471,3389,473,3389,475,3389,477,3389,479,3389,481,3389,483,3389,485,3389,487,3389,489,3389,491,3389,493,3389,495,3389,497,3389,499,3389,501,3389,503,3389,505,3389,507,3389,509,3389,511,3389,513,3390,25,3390,27,3390,29,3390,31,3390,33,3390,35,3390,37,3390,39,3390,41,3390,43,3390,45,3390,47,3390,48,3390,49,3390,50,3390,51,3390,53,3390,55,3390,57,3390,59,3390,61,3390,63,3390,65,3390,67,3390,69,3390,71,3390,73,3390,75,3390,77,3390,79,3390,81,3390,83,3390,85,3390,87,3390,89,3390,91,3390,93,3390,95,3390,97,3390,99,3390,101,3390,103,3390,105,3390,107,3390,109,3390,111,3390,113,3390,115,3390,117,3390,119,3390,121,3390,123,3390,125,3390,127,3390,129,3390,131,3390,133,3390,135,3390,137,3390,139,3390,141,3390,143,3390,145,3390,147,3390,149,3390,151,3390,153,3390,155,3390,157,3390,159,3390,160,3390,162,3390,164,3390,166,3390,168,3390,170,3390,172,3390,174,3390,176,3390,178,3390,180,3390,182,3390,184,3390,186,3390,188,3390,190,3390,192,3390,194,3390,196,3390,198,3390,200,3390,202,3390,204,3390,206,3390,208,3390,210,3390,212,3390,214,3390,216,3390,218,3390,220,3390,222,3390,224,3390,226,3390,228,3390,230,3390,232,3390,234,3390,236,3390,238,3390,240,3390,242,3390,244,3390,246,3390,248,3390,250,3390,252,3390,254,3390,256,3390,258,3390,260,3390,262,3390,264,3390,266,3390,268,3390,270,3390,272,3390,274,3390,276,3390,278,3390,280,3390,282,3390,284,3390,286,3390,288,3390,290,3390,292,3390,294,3390,296,3390,298,3390,300,3390,302,3390,304,3390,306,3390,308,3390,310,3390,312,3390,314,3390,316,3390,318,3390,320,3390,322,3390,324,3390,326,3390,328,3390,330,3390,332,3390,334,3390,336,3390,338,3390,340,3390,342,3390,344,3390,346,3390,348,3390,350,3390,352,3390,354,3390,356,3390,358,3390,360,3390,362,3390,364,3390,366,3390,368,3390,370,3390,372,3390,374,3390,376,3390,378,3390,380,3390,382,3390,384,3390,386,3390,388,3390,390,3390,392,3390,394,3390,396,3390,398,3390,400,3390,402,3390,404,3390,406,3390,408,3390,410,3390,412,3390,414,3390,416,3390,418,3390,420,3390,422,3390,424,3390,426,3390,428,3390,430,3390,432,3390,434,3390,436,3390,438,3390,440,3390,441,3390,442,3390,443,3390,444,3390,445,3390,447,3390,449,3390,451,3390,453,3390,454,3390,456,3390,457,3390,459,3390,461,3390,463,3390,465,3390,467,3390,469,3390,471,3390,473,3390,475,3390,477,3390,479,3390,481,3390,483,3390,485,3390,487,3390,489,3390,491,3390,493,3390,495,3390,497,3390,499,3390,501,3390,503,3390,505,3390,507,3390,509,3390,511,3390,513,3391,25,3391,27,3391,29,3391,31,3391,33,3391,35,3391,37,3391,39,3391,41,3391,43,3391,45,3391,47,3391,48,3391,49,3391,50,3391,51,3391,53,3391,55,3391,57,3391,59,3391,61,3391,63,3391,65,3391,67,3391,69,3391,71,3391,73,3391,75,3391,77,3391,79,3391,81,3391,83,3391,85,3391,87,3391,89,3391,91,3391,93,3391,95,3391,97,3391,99,3391,101,3391,103,3391,105,3391,107,3391,109,3391,111,3391,113,3391,115,3391,117,3391,119,3391,121,3391,123,3391,125,3391,127,3391,129,3391,131,3391,133,3391,135,3391,137,3391,139,3391,141,3391,143,3391,145,3391,147,3391,149,3391,151,3391,153,3391,155,3391,157,3391,159,3391,160,3391,162,3391,164,3391,166,3391,168,3391,170,3391,172,3391,174,3391,176,3391,178,3391,180,3391,182,3391,184,3391,186,3391,188,3391,190,3391,192,3391,194,3391,196,3391,198,3391,200,3391,202,3391,204,3391,206,3391,208,3391,210,3391,212,3391,214,3391,216,3391,218,3391,220,3391,222,3391,224,3391,226,3391,228,3391,230,3391,232,3391,234,3391,236,3391,238,3391,240,3391,242,3391,244,3391,246,3391,248,3391,250,3391,252,3391,254,3391,256,3391,258,3391,260,3391,262,3391,264,3391,266,3391,268,3391,270,3391,272,3391,274,3391,276,3391,278,3391,280,3391,282,3391,284,3391,286,3391,288,3391,290,3391,292,3391,294,3391,296,3391,298,3391,300,3391,302,3391,304,3391,306,3391,308,3391,310,3391,312,3391,314,3391,316,3391,318,3391,320,3391,322,3391,324,3391,326,3391,328,3391,330,3391,332,3391,334,3391,336,3391,338,3391,340,3391,342,3391,344,3391,346,3391,348,3391,350,3391,352,3391,354,3391,356,3391,358,3391,360,3391,362,3391,364,3391,366,3391,368,3391,370,3391,372,3391,374,3391,376,3391,378,3391,380,3391,382,3391,384,3391,386,3391,388,3391,390,3391,392,3391,394,3391,396,3391,398,3391,400,3391,402,3391,404,3391,406,3391,408,3391,410,3391,412,3391,414,3391,416,3391,418,3391,420,3391,422,3391,424,3391,426,3391,428,3391,430,3391,432,3391,434,3391,436,3391,438,3391,440,3391,441,3391,442,3391,443,3391,444,3391,445,3391,447,3391,449,3391,451,3391,453,3391,454,3391,456,3391,457,3391,459,3391,461,3391,463,3391,465,3391,467,3391,469,3391,471,3391,473,3391,475,3391,477,3391,479,3391,481,3391,483,3391,485,3391,487,3391,489,3391,491,3391,493,3391,495,3391,497,3391,499,3391,501,3391,503,3391,505,3391,507,3391,509,3391,511,3391,513,3392,25,3392,27,3392,29,3392,31,3392,33,3392,35,3392,37,3392,39,3392,41,3392,43,3392,45,3392,47,3392,48,3392,49,3392,50,3392,51,3392,53,3392,55,3392,57,3392,59,3392,61,3392,63,3392,65,3392,67,3392,69,3392,71,3392,73,3392,75,3392,77,3392,79,3392,81,3392,83,3392,85,3392,87,3392,89,3392,91,3392,93,3392,95,3392,97,3392,99,3392,101,3392,103,3392,105,3392,107,3392,109,3392,111,3392,113,3392,115,3392,117,3392,119,3392,121,3392,123,3392,125,3392,127,3392,129,3392,131,3392,133,3392,135,3392,137,3392,139,3392,141,3392,143,3392,145,3392,147,3392,149,3392,151,3392,153,3392,155,3392,157,3392,159,3392,160,3392,162,3392,164,3392,166,3392,168,3392,170,3392,172,3392,174,3392,176,3392,178,3392,180,3392,182,3392,184,3392,186,3392,188,3392,190,3392,192,3392,194,3392,196,3392,198,3392,200,3392,202,3392,204,3392,206,3392,208,3392,210,3392,212,3392,214,3392,216,3392,218,3392,220,3392,222,3392,224,3392,226,3392,228,3392,230,3392,232,3392,234,3392,236,3392,238,3392,240,3392,242,3392,244,3392,246,3392,248,3392,250,3392,252,3392,254,3392,256,3392,258,3392,260,3392,262,3392,264,3392,266,3392,268,3392,270,3392,272,3392,274,3392,276,3392,278,3392,280,3392,282,3392,284,3392,286,3392,288,3392,290,3392,292,3392,294,3392,296,3392,298,3392,300,3392,302,3392,304,3392,306,3392,308,3392,310,3392,312,3392,314,3392,316,3392,318,3392,320,3392,322,3392,324,3392,326,3392,328,3392,330,3392,332,3392,334,3392,336,3392,338,3392,340,3392,342,3392,344,3392,346,3392,348,3392,350,3392,352,3392,354,3392,356,3392,358,3392,360,3392,362,3392,364,3392,366,3392,368,3392,370,3392,372,3392,374,3392,376,3392,378,3392,380,3392,382,3392,384,3392,386,3392,388,3392,390,3392,392,3392,394,3392,396,3392,398,3392,400,3392,402,3392,404,3392,406,3392,408,3392,410,3392,412,3392,414,3392,416,3392,418,3392,420,3392,422,3392,424,3392,426,3392,428,3392,430,3392,432,3392,434,3392,436,3392,438,3392,440,3392,441,3392,442,3392,443,3392,444,3392,445,3392,447,3392,449,3392,451,3392,453,3392,454,3392,456,3392,457,3392,459,3392,461,3392,463,3392,465,3392,467,3392,469,3392,471,3392,473,3392,475,3392,477,3392,479,3392,481,3392,483,3392,485,3392,487,3392,489,3392,491,3392,493,3392,495,3392,497,3392,499,3392,501,3392,503,3392,505,3392,507,3392,509,3392,511,3392,513,3393,25,3393,27,3393,29,3393,31,3393,33,3393,35,3393,37,3393,39,3393,41,3393,43,3393,45,3393,47,3393,48,3393,49,3393,50,3393,51,3393,53,3393,55,3393,57,3393,59,3393,61,3393,63,3393,65,3393,67,3393,69,3393,71,3393,73,3393,75,3393,77,3393,79,3393,81,3393,83,3393,85,3393,87,3393,89,3393,91,3393,93,3393,95,3393,97,3393,99,3393,101,3393,103,3393,105,3393,107,3393,109,3393,111,3393,113,3393,115,3393,117,3393,119,3393,121,3393,123,3393,125,3393,127,3393,129,3393,131,3393,133,3393,135,3393,137,3393,139,3393,141,3393,143,3393,145,3393,147,3393,149,3393,151,3393,153,3393,155,3393,157,3393,159,3393,160,3393,162,3393,164,3393,166,3393,168,3393,170,3393,172,3393,174,3393,176,3393,178,3393,180,3393,182,3393,184,3393,186,3393,188,3393,190,3393,192,3393,194,3393,196,3393,198,3393,200,3393,202,3393,204,3393,206,3393,208,3393,210,3393,212,3393,214,3393,216,3393,218,3393,220,3393,222,3393,224,3393,226,3393,228,3393,230,3393,232,3393,234,3393,236,3393,238,3393,240,3393,242,3393,244,3393,246,3393,248,3393,250,3393,252,3393,254,3393,256,3393,258,3393,260,3393,262,3393,264,3393,266,3393,268,3393,270,3393,272,3393,274,3393,276,3393,278,3393,280,3393,282,3393,284,3393,286,3393,288,3393,290,3393,292,3393,294,3393,296,3393,298,3393,300,3393,302,3393,304,3393,306,3393,308,3393,310,3393,312,3393,314,3393,316,3393,318,3393,320,3393,322,3393,324,3393,326,3393,328,3393,330,3393,332,3393,334,3393,336,3393,338,3393,340,3393,342,3393,344,3393,346,3393,348,3393,350,3393,352,3393,354,3393,356,3393,358,3393,360,3393,362,3393,364,3393,366,3393,368,3393,370,3393,372,3393,374,3393,376,3393,378,3393,380,3393,382,3393,384,3393,386,3393,388,3393,390,3393,392,3393,394,3393,396,3393,398,3393,400,3393,402,3393,404,3393,406,3393,408,3393,410,3393,412,3393,414,3393,416,3393,418,3393,420,3393,422,3393,424,3393,426,3393,428,3393,430,3393,432,3393,434,3393,436,3393,438,3393,440,3393,441,3393,442,3393,443,3393,444,3393,445,3393,447,3393,449,3393,451,3393,453,3393,454,3393,456,3393,457,3393,459,3393,461,3393,463,3393,465,3393,467,3393,469,3393,471,3393,473,3393,475,3393,477,3393,479,3393,481,3393,483,3393,485,3393,487,3393,489,3393,491,3393,493,3393,495,3393,497,3393,499,3393,501,3393,503,3393,505,3393,507,3393,509,3393,511,3393,513,3394,25,3394,27,3394,29,3394,31,3394,33,3394,35,3394,37,3394,39,3394,41,3394,43,3394,45,3394,47,3394,48,3394,49,3394,50,3394,51,3394,53,3394,55,3394,57,3394,59,3394,61,3394,63,3394,65,3394,67,3394,69,3394,71,3394,73,3394,75,3394,77,3394,79,3394,81,3394,83,3394,85,3394,87,3394,89,3394,91,3394,93,3394,95,3394,97,3394,99,3394,101,3394,103,3394,105,3394,107,3394,109,3394,111,3394,113,3394,115,3394,117,3394,119,3394,121,3394,123,3394,125,3394,127,3394,129,3394,131,3394,133,3394,135,3394,137,3394,139,3394,141,3394,143,3394,145,3394,147,3394,149,3394,151,3394,153,3394,155,3394,157,3394,159,3394,160,3394,162,3394,164,3394,166,3394,168,3394,170,3394,172,3394,174,3394,176,3394,178,3394,180,3394,182,3394,184,3394,186,3394,188,3394,190,3394,192,3394,194,3394,196,3394,198,3394,200,3394,202,3394,204,3394,206,3394,208,3394,210,3394,212,3394,214,3394,216,3394,218,3394,220,3394,222,3394,224,3394,226,3394,228,3394,230,3394,232,3394,234,3394,236,3394,238,3394,240,3394,242,3394,244,3394,246,3394,248,3394,250,3394,252,3394,254,3394,256,3394,258,3394,260,3394,262,3394,264,3394,266,3394,268,3394,270,3394,272,3394,274,3394,276,3394,278,3394,280,3394,282,3394,284,3394,286,3394,288,3394,290,3394,292,3394,294,3394,296,3394,298,3394,300,3394,302,3394,304,3394,306,3394,308,3394,310,3394,312,3394,314,3394,316,3394,318,3394,320,3394,322,3394,324,3394,326,3394,328,3394,330,3394,332,3394,334,3394,336,3394,338,3394,340,3394,342,3394,344,3394,346,3394,348,3394,350,3394,352,3394,354,3394,356,3394,358,3394,360,3394,362,3394,364,3394,366,3394,368,3394,370,3394,372,3394,374,3394,376,3394,378,3394,380,3394,382,3394,384,3394,386,3394,388,3394,390,3394,392,3394,394,3394,396,3394,398,3394,400,3394,402,3394,404,3394,406,3394,408,3394,410,3394,412,3394,414,3394,416,3394,418,3394,420,3394,422,3394,424,3394,426,3394,428,3394,430,3394,432,3394,434,3394,436,3394,438,3394,440,3394,441,3394,442,3394,443,3394,444,3394,445,3394,447,3394,449,3394,451,3394,453,3394,454,3394,456,3394,457,3394,459,3394,461,3394,463,3394,465,3394,467,3394,469,3394,471,3394,473,3394,475,3394,477,3394,479,3394,481,3394,483,3394,485,3394,487,3394,489,3394,491,3394,493,3394,495,3394,497,3394,499,3394,501,3394,503,3394,505,3394,507,3394,509,3394,511,3394,513,3395,25,3395,27,3395,29,3395,31,3395,33,3395,35,3395,37,3395,39,3395,41,3395,43,3395,45,3395,47,3395,48,3395,49,3395,50,3395,51,3395,53,3395,55,3395,57,3395,59,3395,61,3395,63,3395,65,3395,67,3395,69,3395,71,3395,73,3395,75,3395,77,3395,79,3395,81,3395,83,3395,85,3395,87,3395,89,3395,91,3395,93,3395,95,3395,97,3395,99,3395,101,3395,103,3395,105,3395,107,3395,109,3395,111,3395,113,3395,115,3395,117,3395,119,3395,121,3395,123,3395,125,3395,127,3395,129,3395,131,3395,133,3395,135,3395,137,3395,139,3395,141,3395,143,3395,145,3395,147,3395,149,3395,151,3395,153,3395,155,3395,157,3395,159,3395,160,3395,162,3395,164,3395,166,3395,168,3395,170,3395,172,3395,174,3395,176,3395,178,3395,180,3395,182,3395,184,3395,186,3395,188,3395,190,3395,192,3395,194,3395,196,3395,198,3395,200,3395,202,3395,204,3395,206,3395,208,3395,210,3395,212,3395,214,3395,216,3395,218,3395,220,3395,222,3395,224,3395,226,3395,228,3395,230,3395,232,3395,234,3395,236,3395,238,3395,240,3395,242,3395,244,3395,246,3395,248,3395,250,3395,252,3395,254,3395,256,3395,258,3395,260,3395,262,3395,264,3395,266,3395,268,3395,270,3395,272,3395,274,3395,276,3395,278,3395,280,3395,282,3395,284,3395,286,3395,288,3395,290,3395,292,3395,294,3395,296,3395,298,3395,300,3395,302,3395,304,3395,306,3395,308,3395,310,3395,312,3395,314,3395,316,3395,318,3395,320,3395,322,3395,324,3395,326,3395,328,3395,330,3395,332,3395,334,3395,336,3395,338,3395,340,3395,342,3395,344,3395,346,3395,348,3395,350,3395,352,3395,354,3395,356,3395,358,3395,360,3395,362,3395,364,3395,366,3395,368,3395,370,3395,372,3395,374,3395,376,3395,378,3395,380,3395,382,3395,384,3395,386,3395,388,3395,390,3395,392,3395,394,3395,396,3395,398,3395,400,3395,402,3395,404,3395,406,3395,408,3395,410,3395,412,3395,414,3395,416,3395,418,3395,420,3395,422,3395,424,3395,426,3395,428,3395,430,3395,432,3395,434,3395,436,3395,438,3395,440,3395,441,3395,442,3395,443,3395,444,3395,445,3395,447,3395,449,3395,451,3395,453,3395,454,3395,456,3395,457,3395,459,3395,461,3395,463,3395,465,3395,467,3395,469,3395,471,3395,473,3395,475,3395,477,3395,479,3395,481,3395,483,3395,485,3395,487,3395,489,3395,491,3395,493,3395,495,3395,497,3395,499,3395,501,3395,503,3395,505,3395,507,3395,509,3395,511,3395,513,3396,25,3396,27,3396,29,3396,31,3396,33,3396,35,3396,37,3396,39,3396,41,3396,43,3396,45,3396,47,3396,48,3396,49,3396,50,3396,51,3396,53,3396,55,3396,57,3396,59,3396,61,3396,63,3396,65,3396,67,3396,69,3396,71,3396,73,3396,75,3396,77,3396,79,3396,81,3396,83,3396,85,3396,87,3396,89,3396,91,3396,93,3396,95,3396,97,3396,99,3396,101,3396,103,3396,105,3396,107,3396,109,3396,111,3396,113,3396,115,3396,117,3396,119,3396,121,3396,123,3396,125,3396,127,3396,129,3396,131,3396,133,3396,135,3396,137,3396,139,3396,141,3396,143,3396,145,3396,147,3396,149,3396,151,3396,153,3396,155,3396,157,3396,159,3396,160,3396,162,3396,164,3396,166,3396,168,3396,170,3396,172,3396,174,3396,176,3396,178,3396,180,3396,182,3396,184,3396,186,3396,188,3396,190,3396,192,3396,194,3396,196,3396,198,3396,200,3396,202,3396,204,3396,206,3396,208,3396,210,3396,212,3396,214,3396,216,3396,218,3396,220,3396,222,3396,224,3396,226,3396,228,3396,230,3396,232,3396,234,3396,236,3396,238,3396,240,3396,242,3396,244,3396,246,3396,248,3396,250,3396,252,3396,254,3396,256,3396,258,3396,260,3396,262,3396,264,3396,266,3396,268,3396,270,3396,272,3396,274,3396,276,3396,278,3396,280,3396,282,3396,284,3396,286,3396,288,3396,290,3396,292,3396,294,3396,296,3396,298,3396,300,3396,302,3396,304,3396,306,3396,308,3396,310,3396,312,3396,314,3396,316,3396,318,3396,320,3396,322,3396,324,3396,326,3396,328,3396,330,3396,332,3396,334,3396,336,3396,338,3396,340,3396,342,3396,344,3396,346,3396,348,3396,350,3396,352,3396,354,3396,356,3396,358,3396,360,3396,362,3396,364,3396,366,3396,368,3396,370,3396,372,3396,374,3396,376,3396,378,3396,380,3396,382,3396,384,3396,386,3396,388,3396,390,3396,392,3396,394,3396,396,3396,398,3396,400,3396,402,3396,404,3396,406,3396,408,3396,410,3396,412,3396,414,3396,416,3396,418,3396,420,3396,422,3396,424,3396,426,3396,428,3396,430,3396,432,3396,434,3396,436,3396,438,3396,440,3396,441,3396,442,3396,443,3396,444,3396,445,3396,447,3396,449,3396,451,3396,453,3396,454,3396,456,3396,457,3396,459,3396,461,3396,463,3396,465,3396,467,3396,469,3396,471,3396,473,3396,475,3396,477,3396,479,3396,481,3396,483,3396,485,3396,487,3396,489,3396,491,3396,493,3396,495,3396,497,3396,499,3396,501,3396,503,3396,505,3396,507,3396,509,3396,511,3396,513,3397,25,3397,27,3397,29,3397,31,3397,33,3397,35,3397,37,3397,39,3397,41,3397,43,3397,45,3397,47,3397,48,3397,49,3397,50,3397,51,3397,53,3397,55,3397,57,3397,59,3397,61,3397,63,3397,65,3397,67,3397,69,3397,71,3397,73,3397,75,3397,77,3397,79,3397,81,3397,83,3397,85,3397,87,3397,89,3397,91,3397,93,3397,95,3397,97,3397,99,3397,101,3397,103,3397,105,3397,107,3397,109,3397,111,3397,113,3397,115,3397,117,3397,119,3397,121,3397,123,3397,125,3397,127,3397,129,3397,131,3397,133,3397,135,3397,137,3397,139,3397,141,3397,143,3397,145,3397,147,3397,149,3397,151,3397,153,3397,155,3397,157,3397,159,3397,160,3397,162,3397,164,3397,166,3397,168,3397,170,3397,172,3397,174,3397,176,3397,178,3397,180,3397,182,3397,184,3397,186,3397,188,3397,190,3397,192,3397,194,3397,196,3397,198,3397,200,3397,202,3397,204,3397,206,3397,208,3397,210,3397,212,3397,214,3397,216,3397,218,3397,220,3397,222,3397,224,3397,226,3397,228,3397,230,3397,232,3397,234,3397,236,3397,238,3397,240,3397,242,3397,244,3397,246,3397,248,3397,250,3397,252,3397,254,3397,256,3397,258,3397,260,3397,262,3397,264,3397,266,3397,268,3397,270,3397,272,3397,274,3397,276,3397,278,3397,280,3397,282,3397,284,3397,286,3397,288,3397,290,3397,292,3397,294,3397,296,3397,298,3397,300,3397,302,3397,304,3397,306,3397,308,3397,310,3397,312,3397,314,3397,316,3397,318,3397,320,3397,322,3397,324,3397,326,3397,328,3397,330,3397,332,3397,334,3397,336,3397,338,3397,340,3397,342,3397,344,3397,346,3397,348,3397,350,3397,352,3397,354,3397,356,3397,358,3397,360,3397,362,3397,364,3397,366,3397,368,3397,370,3397,372,3397,374,3397,376,3397,378,3397,380,3397,382,3397,384,3397,386,3397,388,3397,390,3397,392,3397,394,3397,396,3397,398,3397,400,3397,402,3397,404,3397,406,3397,408,3397,410,3397,412,3397,414,3397,416,3397,418,3397,420,3397,422,3397,424,3397,426,3397,428,3397,430,3397,432,3397,434,3397,436,3397,438,3397,440,3397,441,3397,442,3397,443,3397,444,3397,445,3397,447,3397,449,3397,451,3397,453,3397,454,3397,456,3397,457,3397,459,3397,461,3397,463,3397,465,3397,467,3397,469,3397,471,3397,473,3397,475,3397,477,3397,479,3397,481,3397,483,3397,485,3397,487,3397,489,3397,491,3397,493,3397,495,3397,497,3397,499,3397,501,3397,503,3397,505,3397,507,3397,509,3397,511,3397,513,3398,25,3398,27,3398,29,3398,31,3398,33,3398,35,3398,37,3398,39,3398,41,3398,43,3398,45,3398,47,3398,48,3398,49,3398,50,3398,51,3398,53,3398,55,3398,57,3398,59,3398,61,3398,63,3398,65,3398,67,3398,69,3398,71,3398,73,3398,75,3398,77,3398,79,3398,81,3398,83,3398,85,3398,87,3398,89,3398,91,3398,93,3398,95,3398,97,3398,99,3398,101,3398,103,3398,105,3398,107,3398,109,3398,111,3398,113,3398,115,3398,117,3398,119,3398,121,3398,123,3398,125,3398,127,3398,129,3398,131,3398,133,3398,135,3398,137,3398,139,3398,141,3398,143,3398,145,3398,147,3398,149,3398,151,3398,153,3398,155,3398,157,3398,159,3398,160,3398,162,3398,164,3398,166,3398,168,3398,170,3398,172,3398,174,3398,176,3398,178,3398,180,3398,182,3398,184,3398,186,3398,188,3398,190,3398,192,3398,194,3398,196,3398,198,3398,200,3398,202,3398,204,3398,206,3398,208,3398,210,3398,212,3398,214,3398,216,3398,218,3398,220,3398,222,3398,224,3398,226,3398,228,3398,230,3398,232,3398,234,3398,236,3398,238,3398,240,3398,242,3398,244,3398,246,3398,248,3398,250,3398,252,3398,254,3398,256,3398,258,3398,260,3398,262,3398,264,3398,266,3398,268,3398,270,3398,272,3398,274,3398,276,3398,278,3398,280,3398,282,3398,284,3398,286,3398,288,3398,290,3398,292,3398,294,3398,296,3398,298,3398,300,3398,302,3398,304,3398,306,3398,308,3398,310,3398,312,3398,314,3398,316,3398,318,3398,320,3398,322,3398,324,3398,326,3398,328,3398,330,3398,332,3398,334,3398,336,3398,338,3398,340,3398,342,3398,344,3398,346,3398,348,3398,350,3398,352,3398,354,3398,356,3398,358,3398,360,3398,362,3398,364,3398,366,3398,368,3398,370,3398,372,3398,374,3398,376,3398,378,3398,380,3398,382,3398,384,3398,386,3398,388,3398,390,3398,392,3398,394,3398,396,3398,398,3398,400,3398,402,3398,404,3398,406,3398,408,3398,410,3398,412,3398,414,3398,416,3398,418,3398,420,3398,422,3398,424,3398,426,3398,428,3398,430,3398,432,3398,434,3398,436,3398,438,3398,440,3398,441,3398,442,3398,443,3398,444,3398,445,3398,447,3398,449,3398,451,3398,453,3398,454,3398,456,3398,457,3398,459,3398,461,3398,463,3398,465,3398,467,3398,469,3398,471,3398,473,3398,475,3398,477,3398,479,3398,481,3398,483,3398,485,3398,487,3398,489,3398,491,3398,493,3398,495,3398,497,3398,499,3398,501,3398,503,3398,505,3398,507,3398,509,3398,511,3398,513,3399,25,3399,27,3399,29,3399,31,3399,33,3399,35,3399,37,3399,39,3399,41,3399,43,3399,45,3399,47,3399,48,3399,49,3399,50,3399,51,3399,53,3399,55,3399,57,3399,59,3399,61,3399,63,3399,65,3399,67,3399,69,3399,71,3399,73,3399,75,3399,77,3399,79,3399,81,3399,83,3399,85,3399,87,3399,89,3399,91,3399,93,3399,95,3399,97,3399,99,3399,101,3399,103,3399,105,3399,107,3399,109,3399,111,3399,113,3399,115,3399,117,3399,119,3399,121,3399,123,3399,125,3399,127,3399,129,3399,131,3399,133,3399,135,3399,137,3399,139,3399,141,3399,143,3399,145,3399,147,3399,149,3399,151,3399,153,3399,155,3399,157,3399,159,3399,160,3399,162,3399,164,3399,166,3399,168,3399,170,3399,172,3399,174,3399,176,3399,178,3399,180,3399,182,3399,184,3399,186,3399,188,3399,190,3399,192,3399,194,3399,196,3399,198,3399,200,3399,202,3399,204,3399,206,3399,208,3399,210,3399,212,3399,214,3399,216,3399,218,3399,220,3399,222,3399,224,3399,226,3399,228,3399,230,3399,232,3399,234,3399,236,3399,238,3399,240,3399,242,3399,244,3399,246,3399,248,3399,250,3399,252,3399,254,3399,256,3399,258,3399,260,3399,262,3399,264,3399,266,3399,268,3399,270,3399,272,3399,274,3399,276,3399,278,3399,280,3399,282,3399,284,3399,286,3399,288,3399,290,3399,292,3399,294,3399,296,3399,298,3399,300,3399,302,3399,304,3399,306,3399,308,3399,310,3399,312,3399,314,3399,316,3399,318,3399,320,3399,322,3399,324,3399,326,3399,328,3399,330,3399,332,3399,334,3399,336,3399,338,3399,340,3399,342,3399,344,3399,346,3399,348,3399,350,3399,352,3399,354,3399,356,3399,358,3399,360,3399,362,3399,364,3399,366,3399,368,3399,370,3399,372,3399,374,3399,376,3399,378,3399,380,3399,382,3399,384,3399,386,3399,388,3399,390,3399,392,3399,394,3399,396,3399,398,3399,400,3399,402,3399,404,3399,406,3399,408,3399,410,3399,412,3399,414,3399,416,3399,418,3399,420,3399,422,3399,424,3399,426,3399,428,3399,430,3399,432,3399,434,3399,436,3399,438,3399,440,3399,441,3399,442,3399,443,3399,444,3399,445,3399,447,3399,449,3399,451,3399,453,3399,454,3399,456,3399,457,3399,459,3399,461,3399,463,3399,465,3399,467,3399,469,3399,471,3399,473,3399,475,3399,477,3399,479,3399,481,3399,483,3399,485,3399,487,3399,489,3399,491,3399,493,3399,495,3399,497,3399,499,3399,501,3399,503,3399,505,3399,507,3399,509,3399,511,3399,513,3400,25,3400,27,3400,29,3400,31,3400,33,3400,35,3400,37,3400,39,3400,41,3400,43,3400,45,3400,47,3400,48,3400,49,3400,50,3400,51,3400,53,3400,55,3400,57,3400,59,3400,61,3400,63,3400,65,3400,67,3400,69,3400,71,3400,73,3400,75,3400,77,3400,79,3400,81,3400,83,3400,85,3400,87,3400,89,3400,91,3400,93,3400,95,3400,97,3400,99,3400,101,3400,103,3400,105,3400,107,3400,109,3400,111,3400,113,3400,115,3400,117,3400,119,3400,121,3400,123,3400,125,3400,127,3400,129,3400,131,3400,133,3400,135,3400,137,3400,139,3400,141,3400,143,3400,145,3400,147,3400,149,3400,151,3400,153,3400,155,3400,157,3400,159,3400,160,3400,162,3400,164,3400,166,3400,168,3400,170,3400,172,3400,174,3400,176,3400,178,3400,180,3400,182,3400,184,3400,186,3400,188,3400,190,3400,192,3400,194,3400,196,3400,198,3400,200,3400,202,3400,204,3400,206,3400,208,3400,210,3400,212,3400,214,3400,216,3400,218,3400,220,3400,222,3400,224,3400,226,3400,228,3400,230,3400,232,3400,234,3400,236,3400,238,3400,240,3400,242,3400,244,3400,246,3400,248,3400,250,3400,252,3400,254,3400,256,3400,258,3400,260,3400,262,3400,264,3400,266,3400,268,3400,270,3400,272,3400,274,3400,276,3400,278,3400,280,3400,282,3400,284,3400,286,3400,288,3400,290,3400,292,3400,294,3400,296,3400,298,3400,300,3400,302,3400,304,3400,306,3400,308,3400,310,3400,312,3400,314,3400,316,3400,318,3400,320,3400,322,3400,324,3400,326,3400,328,3400,330,3400,332,3400,334,3400,336,3400,338,3400,340,3400,342,3400,344,3400,346,3400,348,3400,350,3400,352,3400,354,3400,356,3400,358,3400,360,3400,362,3400,364,3400,366,3400,368,3400,370,3400,372,3400,374,3400,376,3400,378,3400,380,3400,382,3400,384,3400,386,3400,388,3400,390,3400,392,3400,394,3400,396,3400,398,3400,400,3400,402,3400,404,3400,406,3400,408,3400,410,3400,412,3400,414,3400,416,3400,418,3400,420,3400,422,3400,424,3400,426,3400,428,3400,430,3400,432,3400,434,3400,436,3400,438,3400,440,3400,441,3400,442,3400,443,3400,444,3400,445,3400,447,3400,449,3400,451,3400,453,3400,454,3400,456,3400,457,3400,459,3400,461,3400,463,3400,465,3400,467,3400,469,3400,471,3400,473,3400,475,3400,477,3400,479,3400,481,3400,483,3400,485,3400,487,3400,489,3400,491,3400,493,3400,495,3400,497,3400,499,3400,501,3400,503,3400,505,3400,507,3400,509,3400,511,3400,513,3401,25,3401,27,3401,29,3401,31,3401,33,3401,35,3401,37,3401,39,3401,41,3401,43,3401,45,3401,47,3401,48,3401,49,3401,50,3401,51,3401,53,3401,55,3401,57,3401,59,3401,61,3401,63,3401,65,3401,67,3401,69,3401,71,3401,73,3401,75,3401,77,3401,79,3401,81,3401,83,3401,85,3401,87,3401,89,3401,91,3401,93,3401,95,3401,97,3401,99,3401,101,3401,103,3401,105,3401,107,3401,109,3401,111,3401,113,3401,115,3401,117,3401,119,3401,121,3401,123,3401,125,3401,127,3401,129,3401,131,3401,133,3401,135,3401,137,3401,139,3401,141,3401,143,3401,145,3401,147,3401,149,3401,151,3401,153,3401,155,3401,157,3401,159,3401,160,3401,162,3401,164,3401,166,3401,168,3401,170,3401,172,3401,174,3401,176,3401,178,3401,180,3401,182,3401,184,3401,186,3401,188,3401,190,3401,192,3401,194,3401,196,3401,198,3401,200,3401,202,3401,204,3401,206,3401,208,3401,210,3401,212,3401,214,3401,216,3401,218,3401,220,3401,222,3401,224,3401,226,3401,228,3401,230,3401,232,3401,234,3401,236,3401,238,3401,240,3401,242,3401,244,3401,246,3401,248,3401,250,3401,252,3401,254,3401,256,3401,258,3401,260,3401,262,3401,264,3401,266,3401,268,3401,270,3401,272,3401,274,3401,276,3401,278,3401,280,3401,282,3401,284,3401,286,3401,288,3401,290,3401,292,3401,294,3401,296,3401,298,3401,300,3401,302,3401,304,3401,306,3401,308,3401,310,3401,312,3401,314,3401,316,3401,318,3401,320,3401,322,3401,324,3401,326,3401,328,3401,330,3401,332,3401,334,3401,336,3401,338,3401,340,3401,342,3401,344,3401,346,3401,348,3401,350,3401,352,3401,354,3401,356,3401,358,3401,360,3401,362,3401,364,3401,366,3401,368,3401,370,3401,372,3401,374,3401,376,3401,378,3401,380,3401,382,3401,384,3401,386,3401,388,3401,390,3401,392,3401,394,3401,396,3401,398,3401,400,3401,402,3401,404,3401,406,3401,408,3401,410,3401,412,3401,414,3401,416,3401,418,3401,420,3401,422,3401,424,3401,426,3401,428,3401,430,3401,432,3401,434,3401,436,3401,438,3401,440,3401,441,3401,442,3401,443,3401,444,3401,445,3401,447,3401,449,3401,451,3401,453,3401,454,3401,456,3401,457,3401,459,3401,461,3401,463,3401,465,3401,467,3401,469,3401,471,3401,473,3401,475,3401,477,3401,479,3401,481,3401,483,3401,485,3401,487,3401,489,3401,491,3401,493,3401,495,3401,497,3401,499,3401,501,3401,503,3401,505,3401,507,3401,509,3401,511,3401,513,3402,25,3402,27,3402,29,3402,31,3402,33,3402,35,3402,37,3402,39,3402,41,3402,43,3402,45,3402,47,3402,48,3402,49,3402,50,3402,51,3402,53,3402,55,3402,57,3402,59,3402,61,3402,63,3402,65,3402,67,3402,69,3402,71,3402,73,3402,75,3402,77,3402,79,3402,81,3402,83,3402,85,3402,87,3402,89,3402,91,3402,93,3402,95,3402,97,3402,99,3402,101,3402,103,3402,105,3402,107,3402,109,3402,111,3402,113,3402,115,3402,117,3402,119,3402,121,3402,123,3402,125,3402,127,3402,129,3402,131,3402,133,3402,135,3402,137,3402,139,3402,141,3402,143,3402,145,3402,147,3402,149,3402,151,3402,153,3402,155,3402,157,3402,159,3402,160,3402,162,3402,164,3402,166,3402,168,3402,170,3402,172,3402,174,3402,176,3402,178,3402,180,3402,182,3402,184,3402,186,3402,188,3402,190,3402,192,3402,194,3402,196,3402,198,3402,200,3402,202,3402,204,3402,206,3402,208,3402,210,3402,212,3402,214,3402,216,3402,218,3402,220,3402,222,3402,224,3402,226,3402,228,3402,230,3402,232,3402,234,3402,236,3402,238,3402,240,3402,242,3402,244,3402,246,3402,248,3402,250,3402,252,3402,254,3402,256,3402,258,3402,260,3402,262,3402,264,3402,266,3402,268,3402,270,3402,272,3402,274,3402,276,3402,278,3402,280,3402,282,3402,284,3402,286,3402,288,3402,290,3402,292,3402,294,3402,296,3402,298,3402,300,3402,302,3402,304,3402,306,3402,308,3402,310,3402,312,3402,314,3402,316,3402,318,3402,320,3402,322,3402,324,3402,326,3402,328,3402,330,3402,332,3402,334,3402,336,3402,338,3402,340,3402,342,3402,344,3402,346,3402,348,3402,350,3402,352,3402,354,3402,356,3402,358,3402,360,3402,362,3402,364,3402,366,3402,368,3402,370,3402,372,3402,374,3402,376,3402,378,3402,380,3402,382,3402,384,3402,386,3402,388,3402,390,3402,392,3402,394,3402,396,3402,398,3402,400,3402,402,3402,404,3402,406,3402,408,3402,410,3402,412,3402,414,3402,416,3402,418,3402,420,3402,422,3402,424,3402,426,3402,428,3402,430,3402,432,3402,434,3402,436,3402,438,3402,440,3402,441,3402,442,3402,443,3402,444,3402,445,3402,447,3402,449,3402,451,3402,453,3402,454,3402,456,3402,457,3402,459,3402,461,3402,463,3402,465,3402,467,3402,469,3402,471,3402,473,3402,475,3402,477,3402,479,3402,481,3402,483,3402,485,3402,487,3402,489,3402,491,3402,493,3402,495,3402,497,3402,499,3402,501,3402,503,3402,505,3402,507,3402,509,3402,511,3402,513,3403,25,3403,27,3403,29,3403,31,3403,33,3403,35,3403,37,3403,39,3403,41,3403,43,3403,45,3403,47,3403,48,3403,49,3403,50,3403,51,3403,53,3403,55,3403,57,3403,59,3403,61,3403,63,3403,65,3403,67,3403,69,3403,71,3403,73,3403,75,3403,77,3403,79,3403,81,3403,83,3403,85,3403,87,3403,89,3403,91,3403,93,3403,95,3403,97,3403,99,3403,101,3403,103,3403,105,3403,107,3403,109,3403,111,3403,113,3403,115,3403,117,3403,119,3403,121,3403,123,3403,125,3403,127,3403,129,3403,131,3403,133,3403,135,3403,137,3403,139,3403,141,3403,143,3403,145,3403,147,3403,149,3403,151,3403,153,3403,155,3403,157,3403,159,3403,160,3403,162,3403,164,3403,166,3403,168,3403,170,3403,172,3403,174,3403,176,3403,178,3403,180,3403,182,3403,184,3403,186,3403,188,3403,190,3403,192,3403,194,3403,196,3403,198,3403,200,3403,202,3403,204,3403,206,3403,208,3403,210,3403,212,3403,214,3403,216,3403,218,3403,220,3403,222,3403,224,3403,226,3403,228,3403,230,3403,232,3403,234,3403,236,3403,238,3403,240,3403,242,3403,244,3403,246,3403,248,3403,250,3403,252,3403,254,3403,256,3403,258,3403,260,3403,262,3403,264,3403,266,3403,268,3403,270,3403,272,3403,274,3403,276,3403,278,3403,280,3403,282,3403,284,3403,286,3403,288,3403,290,3403,292,3403,294,3403,296,3403,298,3403,300,3403,302,3403,304,3403,306,3403,308,3403,310,3403,312,3403,314,3403,316,3403,318,3403,320,3403,322,3403,324,3403,326,3403,328,3403,330,3403,332,3403,334,3403,336,3403,338,3403,340,3403,342,3403,344,3403,346,3403,348,3403,350,3403,352,3403,354,3403,356,3403,358,3403,360,3403,362,3403,364,3403,366,3403,368,3403,370,3403,372,3403,374,3403,376,3403,378,3403,380,3403,382,3403,384,3403,386,3403,388,3403,390,3403,392,3403,394,3403,396,3403,398,3403,400,3403,402,3403,404,3403,406,3403,408,3403,410,3403,412,3403,414,3403,416,3403,418,3403,420,3403,422,3403,424,3403,426,3403,428,3403,430,3403,432,3403,434,3403,436,3403,438,3403,440,3403,441,3403,442,3403,443,3403,444,3403,445,3403,447,3403,449,3403,451,3403,453,3403,454,3403,456,3403,457,3403,459,3403,461,3403,463,3403,465,3403,467,3403,469,3403,471,3403,473,3403,475,3403,477,3403,479,3403,481,3403,483,3403,485,3403,487,3403,489,3403,491,3403,493,3403,495,3403,497,3403,499,3403,501,3403,503,3403,505,3403,507,3403,509,3403,511,3403,513,3404,25,3404,27,3404,29,3404,31,3404,33,3404,35,3404,37,3404,39,3404,41,3404,43,3404,45,3404,47,3404,48,3404,49,3404,50,3404,51,3404,53,3404,55,3404,57,3404,59,3404,61,3404,63,3404,65,3404,67,3404,69,3404,71,3404,73,3404,75,3404,77,3404,79,3404,81,3404,83,3404,85,3404,87,3404,89,3404,91,3404,93,3404,95,3404,97,3404,99,3404,101,3404,103,3404,105,3404,107,3404,109,3404,111,3404,113,3404,115,3404,117,3404,119,3404,121,3404,123,3404,125,3404,127,3404,129,3404,131,3404,133,3404,135,3404,137,3404,139,3404,141,3404,143,3404,145,3404,147,3404,149,3404,151,3404,153,3404,155,3404,157,3404,159,3404,160,3404,162,3404,164,3404,166,3404,168,3404,170,3404,172,3404,174,3404,176,3404,178,3404,180,3404,182,3404,184,3404,186,3404,188,3404,190,3404,192,3404,194,3404,196,3404,198,3404,200,3404,202,3404,204,3404,206,3404,208,3404,210,3404,212,3404,214,3404,216,3404,218,3404,220,3404,222,3404,224,3404,226,3404,228,3404,230,3404,232,3404,234,3404,236,3404,238,3404,240,3404,242,3404,244,3404,246,3404,248,3404,250,3404,252,3404,254,3404,256,3404,258,3404,260,3404,262,3404,264,3404,266,3404,268,3404,270,3404,272,3404,274,3404,276,3404,278,3404,280,3404,282,3404,284,3404,286,3404,288,3404,290,3404,292,3404,294,3404,296,3404,298,3404,300,3404,302,3404,304,3404,306,3404,308,3404,310,3404,312,3404,314,3404,316,3404,318,3404,320,3404,322,3404,324,3404,326,3404,328,3404,330,3404,332,3404,334,3404,336,3404,338,3404,340,3404,342,3404,344,3404,346,3404,348,3404,350,3404,352,3404,354,3404,356,3404,358,3404,360,3404,362,3404,364,3404,366,3404,368,3404,370,3404,372,3404,374,3404,376,3404,378,3404,380,3404,382,3404,384,3404,386,3404,388,3404,390,3404,392,3404,394,3404,396,3404,398,3404,400,3404,402,3404,404,3404,406,3404,408,3404,410,3404,412,3404,414,3404,416,3404,418,3404,420,3404,422,3404,424,3404,426,3404,428,3404,430,3404,432,3404,434,3404,436,3404,438,3404,440,3404,441,3404,442,3404,443,3404,444,3404,445,3404,447,3404,449,3404,451,3404,453,3404,454,3404,456,3404,457,3404,459,3404,461,3404,463,3404,465,3404,467,3404,469,3404,471,3404,473,3404,475,3404,477,3404,479,3404,481,3404,483,3404,485,3404,487,3404,489,3404,491,3404,493,3404,495,3404,497,3404,499,3404,501,3404,503,3404,505,3404,507,3404,509,3404,511,3404,513,3405,25,3405,27,3405,29,3405,31,3405,33,3405,35,3405,37,3405,39,3405,41,3405,43,3405,45,3405,47,3405,48,3405,49,3405,50,3405,51,3405,53,3405,55,3405,57,3405,59,3405,61,3405,63,3405,65,3405,67,3405,69,3405,71,3405,73,3405,75,3405,77,3405,79,3405,81,3405,83,3405,85,3405,87,3405,89,3405,91,3405,93,3405,95,3405,97,3405,99,3405,101,3405,103,3405,105,3405,107,3405,109,3405,111,3405,113,3405,115,3405,117,3405,119,3405,121,3405,123,3405,125,3405,127,3405,129,3405,131,3405,133,3405,135,3405,137,3405,139,3405,141,3405,143,3405,145,3405,147,3405,149,3405,151,3405,153,3405,155,3405,157,3405,159,3405,160,3405,162,3405,164,3405,166,3405,168,3405,170,3405,172,3405,174,3405,176,3405,178,3405,180,3405,182,3405,184,3405,186,3405,188,3405,190,3405,192,3405,194,3405,196,3405,198,3405,200,3405,202,3405,204,3405,206,3405,208,3405,210,3405,212,3405,214,3405,216,3405,218,3405,220,3405,222,3405,224,3405,226,3405,228,3405,230,3405,232,3405,234,3405,236,3405,238,3405,240,3405,242,3405,244,3405,246,3405,248,3405,250,3405,252,3405,254,3405,256,3405,258,3405,260,3405,262,3405,264,3405,266,3405,268,3405,270,3405,272,3405,274,3405,276,3405,278,3405,280,3405,282,3405,284,3405,286,3405,288,3405,290,3405,292,3405,294,3405,296,3405,298,3405,300,3405,302,3405,304,3405,306,3405,308,3405,310,3405,312,3405,314,3405,316,3405,318,3405,320,3405,322,3405,324,3405,326,3405,328,3405,330,3405,332,3405,334,3405,336,3405,338,3405,340,3405,342,3405,344,3405,346,3405,348,3405,350,3405,352,3405,354,3405,356,3405,358,3405,360,3405,362,3405,364,3405,366,3405,368,3405,370,3405,372,3405,374,3405,376,3405,378,3405,380,3405,382,3405,384,3405,386,3405,388,3405,390,3405,392,3405,394,3405,396,3405,398,3405,400,3405,402,3405,404,3405,406,3405,408,3405,410,3405,412,3405,414,3405,416,3405,418,3405,420,3405,422,3405,424,3405,426,3405,428,3405,430,3405,432,3405,434,3405,436,3405,438,3405,440,3405,441,3405,442,3405,443,3405,444,3405,445,3405,447,3405,449,3405,451,3405,453,3405,454,3405,456,3405,457,3405,459,3405,461,3405,463,3405,465,3405,467,3405,469,3405,471,3405,473,3405,475,3405,477,3405,479,3405,481,3405,483,3405,485,3405,487,3405,489,3405,491,3405,493,3405,495,3405,497,3405,499,3405,501,3405,503,3405,505,3405,507,3405,509,3405,511,3405,513,3406,25,3406,27,3406,29,3406,31,3406,33,3406,35,3406,37,3406,39,3406,41,3406,43,3406,45,3406,47,3406,48,3406,49,3406,50,3406,51,3406,53,3406,55,3406,57,3406,59,3406,61,3406,63,3406,65,3406,67,3406,69,3406,71,3406,73,3406,75,3406,77,3406,79,3406,81,3406,83,3406,85,3406,87,3406,89,3406,91,3406,93,3406,95,3406,97,3406,99,3406,101,3406,103,3406,105,3406,107,3406,109,3406,111,3406,113,3406,115,3406,117,3406,119,3406,121,3406,123,3406,125,3406,127,3406,129,3406,131,3406,133,3406,135,3406,137,3406,139,3406,141,3406,143,3406,145,3406,147,3406,149,3406,151,3406,153,3406,155,3406,157,3406,159,3406,160,3406,162,3406,164,3406,166,3406,168,3406,170,3406,172,3406,174,3406,176,3406,178,3406,180,3406,182,3406,184,3406,186,3406,188,3406,190,3406,192,3406,194,3406,196,3406,198,3406,200,3406,202,3406,204,3406,206,3406,208,3406,210,3406,212,3406,214,3406,216,3406,218,3406,220,3406,222,3406,224,3406,226,3406,228,3406,230,3406,232,3406,234,3406,236,3406,238,3406,240,3406,242,3406,244,3406,246,3406,248,3406,250,3406,252,3406,254,3406,256,3406,258,3406,260,3406,262,3406,264,3406,266,3406,268,3406,270,3406,272,3406,274,3406,276,3406,278,3406,280,3406,282,3406,284,3406,286,3406,288,3406,290,3406,292,3406,294,3406,296,3406,298,3406,300,3406,302,3406,304,3406,306,3406,308,3406,310,3406,312,3406,314,3406,316,3406,318,3406,320,3406,322,3406,324,3406,326,3406,328,3406,330,3406,332,3406,334,3406,336,3406,338,3406,340,3406,342,3406,344,3406,346,3406,348,3406,350,3406,352,3406,354,3406,356,3406,358,3406,360,3406,362,3406,364,3406,366,3406,368,3406,370,3406,372,3406,374,3406,376,3406,378,3406,380,3406,382,3406,384,3406,386,3406,388,3406,390,3406,392,3406,394,3406,396,3406,398,3406,400,3406,402,3406,404,3406,406,3406,408,3406,410,3406,412,3406,414,3406,416,3406,418,3406,420,3406,422,3406,424,3406,426,3406,428,3406,430,3406,432,3406,434,3406,436,3406,438,3406,440,3406,441,3406,442,3406,443,3406,444,3406,445,3406,447,3406,449,3406,451,3406,453,3406,454,3406,456,3406,457,3406,459,3406,461,3406,463,3406,465,3406,467,3406,469,3406,471,3406,473,3406,475,3406,477,3406,479,3406,481,3406,483,3406,485,3406,487,3406,489,3406,491,3406,493,3406,495,3406,497,3406,499,3406,501,3406,503,3406,505,3406,507,3406,509,3406,511,3406,513,7214,25,7214,27,7214,29,7214,31,7214,33,7214,35,7214,37,7214,39,7214,41,7214,43,7214,45,7214,47,7214,48,7214,49,7214,50,7214,51,7214,53,7214,55,7214,57,7214,59,7214,61,7214,63,7214,65,7214,67,7214,69,7214,71,7214,73,7214,75,7214,77,7214,79,7214,81,7214,83,7214,85,7214,87,7214,89,7214,91,7214,93,7214,95,7214,97,7214,99,7214,101,7214,103,7214,105,7214,107,7214,109,7214,111,7214,113,7214,115,7214,117,7214,119,7214,121,7214,123,7214,125,7214,127,7214,129,7214,131,7214,133,7214,135,7214,137,7214,139,7214,141,7214,143,7214,145,7214,147,7214,149,7214,151,7214,153,7214,155,7214,157,7214,159,7214,160,7214,162,7214,164,7214,166,7214,168,7214,170,7214,172,7214,174,7214,176,7214,178,7214,180,7214,182,7214,184,7214,186,7214,188,7214,190,7214,192,7214,194,7214,196,7214,198,7214,200,7214,202,7214,204,7214,206,7214,208,7214,210,7214,212,7214,214,7214,216,7214,218,7214,220,7214,222,7214,224,7214,226,7214,228,7214,230,7214,232,7214,234,7214,236,7214,238,7214,240,7214,242,7214,244,7214,246,7214,248,7214,250,7214,252,7214,254,7214,256,7214,258,7214,260,7214,262,7214,264,7214,266,7214,268,7214,270,7214,272,7214,274,7214,276,7214,278,7214,280,7214,282,7214,284,7214,286,7214,288,7214,290,7214,292,7214,294,7214,296,7214,298,7214,300,7214,302,7214,304,7214,306,7214,308,7214,310,7214,312,7214,314,7214,316,7214,318,7214,320,7214,322,7214,324,7214,326,7214,328,7214,330,7214,332,7214,334,7214,336,7214,338,7214,340,7214,342,7214,344,7214,346,7214,348,7214,350,7214,352,7214,354,7214,356,7214,358,7214,360,7214,362,7214,364,7214,366,7214,368,7214,370,7214,372,7214,374,7214,376,7214,378,7214,380,7214,382,7214,384,7214,386,7214,388,7214,390,7214,392,7214,394,7214,396,7214,398,7214,400,7214,402,7214,404,7214,406,7214,408,7214,410,7214,412,7214,414,7214,416,7214,418,7214,420,7214,422,7214,424,7214,426,7214,428,7214,430,7214,432,7214,434,7214,436,7214,438,7214,440,7214,441,7214,442,7214,443,7214,444,7214,445,7214,447,7214,449,7214,451,7214,453,7214,454,7214,456,7214,457,7214,459,7214,461,7214,463,7214,465,7214,467,7214,469,7214,471,7214,473,7214,475,7214,477,7214,479,7214,481,7214,483,7214,485,7214,487,7214,489,7214,491,7214,493,7214,495,7214,497,7214,499,7214,501,7214,503,7214,505,7214,507,7214,509,7214,511,7215,25,7215,27,7215,29,7215,31,7215,33,7215,35,7215,37,7215,39,7215,41,7215,43,7215,45,7215,47,7215,48,7215,49,7215,50,7215,51,7215,53,7215,55,7215,57,7215,59,7215,61,7215,63,7215,65,7215,67,7215,69,7215,71,7215,73,7215,75,7215,77,7215,79,7215,81,7215,83,7215,85,7215,87,7215,89,7215,91,7215,93,7215,95,7215,97,7215,99,7215,101,7215,103,7215,105,7215,107,7215,109,7215,111,7215,113,7215,115,7215,117,7215,119,7215,121,7215,123,7215,125,7215,127,7215,129,7215,131,7215,133,7215,135,7215,137,7215,139,7215,141,7215,143,7215,145,7215,147,7215,149,7215,151,7215,153,7215,155,7215,157,7215,159,7215,160,7215,162,7215,164,7215,166,7215,168,7215,170,7215,172,7215,174,7215,176,7215,178,7215,180,7215,182,7215,184,7215,186,7215,188,7215,190,7215,192,7215,194,7215,196,7215,198,7215,200,7215,202,7215,204,7215,206,7215,208,7215,210,7215,212,7215,214,7215,216,7215,218,7215,220,7215,222,7215,224,7215,226,7215,228,7215,230,7215,232,7215,234,7215,236,7215,238,7215,240,7215,242,7215,244,7215,246,7215,248,7215,250,7215,252,7215,254,7215,256,7215,258,7215,260,7215,262,7215,264,7215,266,7215,268,7215,270,7215,272,7215,274,7215,276,7215,278,7215,280,7215,282,7215,284,7215,286,7215,288,7215,290,7215,292,7215,294,7215,296,7215,298,7215,300,7215,302,7215,304,7215,306,7215,308,7215,310,7215,312,7215,314,7215,316,7215,318,7215,320,7215,322,7215,324,7215,326,7215,328,7215,330,7215,332,7215,334,7215,336,7215,338,7215,340,7215,342,7215,344,7215,346,7215,348,7215,350,7215,352,7215,354,7215,356,7215,358,7215,360,7215,362,7215,364,7215,366,7215,368,7215,370,7215,372,7215,374,7215,376,7215,378,7215,380,7215,382,7215,384,7215,386,7215,388,7215,390,7215,392,7215,394,7215,396,7215,398,7215,400,7215,402,7215,404,7215,406,7215,408,7215,410,7215,412,7215,414,7215,416,7215,418,7215,420,7215,422,7215,424,7215,426,7215,428,7215,430,7215,432,7215,434,7215,436,7215,438,7215,444,7215,445,7215,447,7215,449,7215,451,7215,454,7215,456,7215,457,7215,459,7215,461,7215,463,7215,465,7215,467,7215,469,7215,471,7215,473,7215,475,7215,477,7215,479,7215,481,7215,483,7215,485,7215,487,7215,489,7215,491,7215,493,7215,495,7215,497,7215,499,7215,501,7215,503,7215,505,7215,507,7215,509,7215,511,7215,513,7216,25,7216,27,7216,29,7216,31,7216,33,7216,35,7216,37,7216,39,7216,41,7216,43,7216,45,7216,47,7216,48,7216,49,7216,50,7216,51,7216,53,7216,55,7216,57,7216,59,7216,61,7216,63,7216,65,7216,67,7216,69,7216,71,7216,73,7216,75,7216,77,7216,79,7216,81,7216,83,7216,85,7216,87,7216,89,7216,91,7216,93,7216,95,7216,97,7216,99,7216,101,7216,103,7216,105,7216,107,7216,109,7216,111,7216,113,7216,115,7216,117,7216,119,7216,121,7216,123,7216,125,7216,127,7216,129,7216,131,7216,133,7216,135,7216,137,7216,139,7216,141,7216,143,7216,145,7216,147,7216,149,7216,151,7216,153,7216,155,7216,157,7216,159,7216,160,7216,162,7216,164,7216,166,7216,168,7216,170,7216,172,7216,174,7216,176,7216,178,7216,180,7216,182,7216,184,7216,186,7216,188,7216,190,7216,192,7216,194,7216,196,7216,198,7216,200,7216,202,7216,204,7216,206,7216,208,7216,210,7216,212,7216,214,7216,216,7216,218,7216,220,7216,222,7216,224,7216,226,7216,228,7216,230,7216,232,7216,234,7216,236,7216,238,7216,240,7216,242,7216,244,7216,246,7216,248,7216,250,7216,252,7216,254,7216,256,7216,258,7216,260,7216,262,7216,264,7216,266,7216,268,7216,270,7216,272,7216,274,7216,276,7216,278,7216,280,7216,282,7216,284,7216,286,7216,288,7216,290,7216,292,7216,294,7216,296,7216,298,7216,300,7216,302,7216,304,7216,306,7216,308,7216,310,7216,312,7216,314,7216,316,7216,318,7216,320,7216,322,7216,324,7216,326,7216,328,7216,330,7216,332,7216,334,7216,336,7216,338,7216,340,7216,342,7216,344,7216,346,7216,348,7216,350,7216,352,7216,354,7216,356,7216,358,7216,360,7216,362,7216,364,7216,366,7216,368,7216,370,7216,372,7216,374,7216,376,7216,378,7216,380,7216,382,7216,384,7216,386,7216,388,7216,390,7216,392,7216,394,7216,396,7216,398,7216,400,7216,402,7216,404,7216,406,7216,408,7216,410,7216,412,7216,414,7216,416,7216,418,7216,420,7216,422,7216,424,7216,426,7216,428,7216,430,7216,432,7216,434,7216,436,7216,438,7216,444,7216,445,7216,447,7216,449,7216,451,7216,454,7216,456,7216,457,7216,459,7216,461,7216,463,7216,465,7216,467,7216,469,7216,471,7216,473,7216,475,7216,477,7216,479,7216,481,7216,483,7216,485,7216,487,7216,489,7216,491,7216,493,7216,495,7216,497,7216,499,7216,501,7216,503,7216,505,7216,507,7216,509,7216,511,7216,513,7217,25,7217,27,7217,29,7217,31,7217,33,7217,35,7217,37,7217,39,7217,41,7217,43,7217,45,7217,47,7217,48,7217,49,7217,50,7217,51,7217,53,7217,55,7217,57,7217,59,7217,61,7217,63,7217,65,7217,67,7217,69,7217,71,7217,73,7217,75,7217,77,7217,79,7217,81,7217,83,7217,85,7217,87,7217,89,7217,91,7217,93,7217,95,7217,97,7217,99,7217,101,7217,103,7217,105,7217,107,7217,109,7217,111,7217,113,7217,115,7217,117,7217,119,7217,121,7217,123,7217,125,7217,127,7217,129,7217,131,7217,133,7217,135,7217,137,7217,139,7217,141,7217,143,7217,145,7217,147,7217,149,7217,151,7217,153,7217,155,7217,157,7217,159,7217,160,7217,162,7217,164,7217,166,7217,168,7217,170,7217,172,7217,174,7217,176,7217,178,7217,180,7217,182,7217,184,7217,186,7217,188,7217,190,7217,192,7217,194,7217,196,7217,198,7217,200,7217,202,7217,204,7217,206,7217,208,7217,210,7217,212,7217,214,7217,216,7217,218,7217,220,7217,222,7217,224,7217,226,7217,228,7217,230,7217,232,7217,234,7217,236,7217,238,7217,240,7217,242,7217,244,7217,246,7217,248,7217,250,7217,252,7217,254,7217,256,7217,258,7217,260,7217,262,7217,264,7217,266,7217,268,7217,270,7217,272,7217,274,7217,276,7217,278,7217,280,7217,282,7217,284,7217,286,7217,288,7217,290,7217,292,7217,294,7217,296,7217,298,7217,300,7217,302,7217,304,7217,306,7217,308,7217,310,7217,312,7217,314,7217,316,7217,318,7217,320,7217,322,7217,324,7217,326,7217,328,7217,330,7217,332,7217,334,7217,336,7217,338,7217,340,7217,342,7217,344,7217,346,7217,348,7217,350,7217,352,7217,354,7217,356,7217,358,7217,360,7217,362,7217,364,7217,366,7217,368,7217,370,7217,372,7217,374,7217,376,7217,378,7217,380,7217,382,7217,384,7217,386,7217,388,7217,390,7217,392,7217,394,7217,396,7217,398,7217,400,7217,402,7217,404,7217,406,7217,408,7217,410,7217,412,7217,414,7217,416,7217,418,7217,420,7217,422,7217,424,7217,426,7217,428,7217,430,7217,432,7217,434,7217,436,7217,438,7217,444,7217,445,7217,447,7217,449,7217,451,7217,454,7217,456,7217,457,7217,459,7217,461,7217,463,7217,465,7217,467,7217,469,7217,471,7217,473,7217,475,7217,477,7217,479,7217,481,7217,483,7217,485,7217,487,7217,489,7217,491,7217,493,7217,495,7217,497,7217,499,7217,501,7217,503,7217,505,7217,507,7217,509,7217,511,7217,513,7218,25,7218,27,7218,29,7218,31,7218,33,7218,35,7218,37,7218,39,7218,41,7218,43,7218,45,7218,47,7218,48,7218,49,7218,50,7218,51,7218,53,7218,55,7218,57,7218,59,7218,61,7218,63,7218,65,7218,67,7218,69,7218,71,7218,73,7218,75,7218,77,7218,79,7218,81,7218,83,7218,85,7218,87,7218,89,7218,91,7218,93,7218,95,7218,97,7218,99,7218,101,7218,103,7218,105,7218,107,7218,109,7218,111,7218,113,7218,115,7218,117,7218,119,7218,121,7218,123,7218,125,7218,127,7218,129,7218,131,7218,133,7218,135,7218,137,7218,139,7218,141,7218,143,7218,145,7218,147,7218,149,7218,151,7218,153,7218,155,7218,157,7218,159,7218,160,7218,162,7218,164,7218,166,7218,168,7218,170,7218,172,7218,174,7218,176,7218,178,7218,180,7218,182,7218,184,7218,186,7218,188,7218,190,7218,192,7218,194,7218,196,7218,198,7218,200,7218,202,7218,204,7218,206,7218,208,7218,210,7218,212,7218,214,7218,216,7218,218,7218,220,7218,222,7218,224,7218,226,7218,228,7218,230,7218,232,7218,234,7218,236,7218,238,7218,240,7218,242,7218,244,7218,246,7218,248,7218,250,7218,252,7218,254,7218,256,7218,258,7218,260,7218,262,7218,264,7218,266,7218,268,7218,270,7218,272,7218,274,7218,276,7218,278,7218,280,7218,282,7218,284,7218,286,7218,288,7218,290,7218,292,7218,294,7218,296,7218,298,7218,300,7218,302,7218,304,7218,306,7218,308,7218,310,7218,312,7218,314,7218,316,7218,318,7218,320,7218,322,7218,324,7218,326,7218,328,7218,330,7218,332,7218,334,7218,336,7218,338,7218,340,7218,342,7218,344,7218,346,7218,348,7218,350,7218,352,7218,354,7218,356,7218,358,7218,360,7218,362,7218,364,7218,366,7218,368,7218,370,7218,372,7218,374,7218,376,7218,378,7218,380,7218,382,7218,384,7218,386,7218,388,7218,390,7218,392,7218,394,7218,396,7218,398,7218,400,7218,402,7218,404,7218,406,7218,408,7218,410,7218,412,7218,414,7218,416,7218,418,7218,420,7218,422,7218,424,7218,426,7218,428,7218,430,7218,432,7218,434,7218,436,7218,438,7218,444,7218,445,7218,447,7218,449,7218,451,7218,454,7218,456,7218,457,7218,459,7218,461,7218,463,7218,465,7218,467,7218,469,7218,471,7218,473,7218,475,7218,477,7218,479,7218,481,7218,483,7218,485,7218,487,7218,489,7218,491,7218,493,7218,495,7218,497,7218,499,7218,501,7218,503,7218,505,7218,507,7218,509,7218,511,7218,513,7219,25,7219,27,7219,29,7219,31,7219,33,7219,35,7219,37,7219,39,7219,41,7219,43,7219,45,7219,47,7219,48,7219,49,7219,50,7219,51,7219,53,7219,55,7219,57,7219,59,7219,61,7219,63,7219,65,7219,67,7219,69,7219,71,7219,73,7219,75,7219,77,7219,79,7219,81,7219,83,7219,85,7219,87,7219,89,7219,91,7219,93,7219,95,7219,97,7219,99,7219,101,7219,103,7219,105,7219,107,7219,109,7219,111,7219,113,7219,115,7219,117,7219,119,7219,121,7219,123,7219,125,7219,127,7219,129,7219,131,7219,133,7219,135,7219,137,7219,139,7219,141,7219,143,7219,145,7219,147,7219,149,7219,151,7219,153,7219,155,7219,157,7219,159,7219,160,7219,162,7219,164,7219,166,7219,168,7219,170,7219,172,7219,174,7219,176,7219,178,7219,180,7219,182,7219,184,7219,186,7219,188,7219,190,7219,192,7219,194,7219,196,7219,198,7219,200,7219,202,7219,204,7219,206,7219,208,7219,210,7219,212,7219,214,7219,216,7219,218,7219,220,7219,222,7219,224,7219,226,7219,228,7219,230,7219,232,7219,234,7219,236,7219,238,7219,240,7219,242,7219,244,7219,246,7219,248,7219,250,7219,252,7219,254,7219,256,7219,258,7219,260,7219,262,7219,264,7219,266,7219,268,7219,270,7219,272,7219,274,7219,276,7219,278,7219,280,7219,282,7219,284,7219,286,7219,288,7219,290,7219,292,7219,294,7219,296,7219,298,7219,300,7219,302,7219,304,7219,306,7219,308,7219,310,7219,312,7219,314,7219,316,7219,318,7219,320,7219,322,7219,324,7219,326,7219,328,7219,330,7219,332,7219,334,7219,336,7219,338,7219,340,7219,342,7219,344,7219,346,7219,348,7219,350,7219,352,7219,354,7219,356,7219,358,7219,360,7219,362,7219,364,7219,366,7219,368,7219,370,7219,372,7219,374,7219,376,7219,378,7219,380,7219,382,7219,384,7219,386,7219,388,7219,390,7219,392,7219,394,7219,396,7219,398,7219,400,7219,402,7219,404,7219,406,7219,408,7219,410,7219,412,7219,414,7219,416,7219,418,7219,420,7219,422,7219,424,7219,426,7219,428,7219,430,7219,432,7219,434,7219,436,7219,438,7219,444,7219,445,7219,447,7219,449,7219,451,7219,454,7219,456,7219,457,7219,459,7219,461,7219,463,7219,465,7219,467,7219,469,7219,471,7219,473,7219,475,7219,477,7219,479,7219,481,7219,483,7219,485,7219,487,7219,489,7219,491,7219,493,7219,495,7219,497,7219,499,7219,501,7219,503,7219,505,7219,507,7219,509,7219,511,7219,513,7220,25,7220,27,7220,29,7220,31,7220,33,7220,35,7220,37,7220,39,7220,41,7220,43,7220,45,7220,47,7220,48,7220,49,7220,50,7220,51,7220,53,7220,55,7220,57,7220,59,7220,61,7220,63,7220,65,7220,67,7220,69,7220,71,7220,73,7220,75,7220,77,7220,79,7220,81,7220,83,7220,85,7220,87,7220,89,7220,91,7220,93,7220,95,7220,97,7220,99,7220,101,7220,103,7220,105,7220,107,7220,109,7220,111,7220,113,7220,115,7220,117,7220,119,7220,121,7220,123,7220,125,7220,127,7220,129,7220,131,7220,133,7220,135,7220,137,7220,139,7220,141,7220,143,7220,145,7220,147,7220,149,7220,151,7220,153,7220,155,7220,157,7220,159,7220,160,7220,162,7220,164,7220,166,7220,168,7220,170,7220,172,7220,174,7220,176,7220,178,7220,180,7220,182,7220,184,7220,186,7220,188,7220,190,7220,192,7220,194,7220,196,7220,198,7220,200,7220,202,7220,204,7220,206,7220,208,7220,210,7220,212,7220,214,7220,216,7220,218,7220,220,7220,222,7220,224,7220,226,7220,228,7220,230,7220,232,7220,234,7220,236,7220,238,7220,240,7220,242,7220,244,7220,246,7220,248,7220,250,7220,252,7220,254,7220,256,7220,258,7220,260,7220,262,7220,264,7220,266,7220,268,7220,270,7220,272,7220,274,7220,276,7220,278,7220,280,7220,282,7220,284,7220,286,7220,288,7220,290,7220,292,7220,294,7220,296,7220,298,7220,300,7220,302,7220,304,7220,306,7220,308,7220,310,7220,312,7220,314,7220,316,7220,318,7220,320,7220,322,7220,324,7220,326,7220,328,7220,330,7220,332,7220,334,7220,336,7220,338,7220,340,7220,342,7220,344,7220,346,7220,348,7220,350,7220,352,7220,354,7220,356,7220,358,7220,360,7220,362,7220,364,7220,366,7220,368,7220,370,7220,372,7220,374,7220,376,7220,378,7220,380,7220,382,7220,384,7220,386,7220,388,7220,390,7220,392,7220,394,7220,396,7220,398,7220,400,7220,402,7220,404,7220,406,7220,408,7220,410,7220,412,7220,414,7220,416,7220,418,7220,420,7220,422,7220,424,7220,426,7220,428,7220,430,7220,432,7220,434,7220,436,7220,438,7220,444,7220,445,7220,447,7220,449,7220,451,7220,454,7220,456,7220,457,7220,459,7220,461,7220,463,7220,465,7220,467,7220,469,7220,471,7220,473,7220,475,7220,477,7220,479,7220,481,7220,483,7220,485,7220,487,7220,489,7220,491,7220,493,7220,495,7220,497,7220,499,7220,501,7220,503,7220,505,7220,507,7220,509,7220,511,7220,513,7221,25,7221,27,7221,29,7221,31,7221,33,7221,35,7221,37,7221,39,7221,41,7221,43,7221,45,7221,47,7221,48,7221,49,7221,50,7221,51,7221,53,7221,55,7221,57,7221,59,7221,61,7221,63,7221,65,7221,67,7221,69,7221,71,7221,73,7221,75,7221,77,7221,79,7221,81,7221,83,7221,85,7221,87,7221,89,7221,91,7221,93,7221,95,7221,97,7221,99,7221,101,7221,103,7221,105,7221,107,7221,109,7221,111,7221,113,7221,115,7221,117,7221,119,7221,121,7221,123,7221,125,7221,127,7221,129,7221,131,7221,133,7221,135,7221,137,7221,139,7221,141,7221,143,7221,145,7221,147,7221,149,7221,151,7221,153,7221,155,7221,157,7221,159,7221,160,7221,162,7221,164,7221,166,7221,168,7221,170,7221,172,7221,174,7221,176,7221,178,7221,180,7221,182,7221,184,7221,186,7221,188,7221,190,7221,192,7221,194,7221,196,7221,198,7221,200,7221,202,7221,204,7221,206,7221,208,7221,210,7221,212,7221,214,7221,216,7221,218,7221,220,7221,222,7221,224,7221,226,7221,228,7221,230,7221,232,7221,234,7221,236,7221,238,7221,240,7221,242,7221,244,7221,246,7221,248,7221,250,7221,252,7221,254,7221,256,7221,258,7221,260,7221,262,7221,264,7221,266,7221,268,7221,270,7221,272,7221,274,7221,276,7221,278,7221,280,7221,282,7221,284,7221,286,7221,288,7221,290,7221,292,7221,294,7221,296,7221,298,7221,300,7221,302,7221,304,7221,306,7221,308,7221,310,7221,312,7221,314,7221,316,7221,318,7221,320,7221,322,7221,324,7221,326,7221,328,7221,330,7221,332,7221,334,7221,336,7221,338,7221,340,7221,342,7221,344,7221,346,7221,348,7221,350,7221,352,7221,354,7221,356,7221,358,7221,360,7221,362,7221,364,7221,366,7221,368,7221,370,7221,372,7221,374,7221,376,7221,378,7221,380,7221,382,7221,384,7221,386,7221,388,7221,390,7221,392,7221,394,7221,396,7221,398,7221,400,7221,402,7221,404,7221,406,7221,408,7221,410,7221,412,7221,414,7221,416,7221,418,7221,420,7221,422,7221,424,7221,426,7221,428,7221,430,7221,432,7221,434,7221,436,7221,438,7221,444,7221,445,7221,447,7221,449,7221,451,7221,454,7221,456,7221,457,7221,459,7221,461,7221,463,7221,465,7221,467,7221,469,7221,471,7221,473,7221,475,7221,477,7221,479,7221,481,7221,483,7221,485,7221,487,7221,489,7221,491,7221,493,7221,495,7221,497,7221,499,7221,501,7221,503,7221,505,7221,507,7221,509,7221,511,7221,513,7222,25,7222,27,7222,29,7222,31,7222,33,7222,35,7222,37,7222,39,7222,41,7222,43,7222,45,7222,47,7222,48,7222,49,7222,50,7222,51,7222,53,7222,55,7222,57,7222,59,7222,61,7222,63,7222,65,7222,67,7222,69,7222,71,7222,73,7222,75,7222,77,7222,79,7222,81,7222,83,7222,85,7222,87,7222,89,7222,91,7222,93,7222,95,7222,97,7222,99,7222,101,7222,103,7222,105,7222,107,7222,109,7222,111,7222,113,7222,115,7222,117,7222,119,7222,121,7222,123,7222,125,7222,127,7222,129,7222,131,7222,133,7222,135,7222,137,7222,139,7222,141,7222,143,7222,145,7222,147,7222,149,7222,151,7222,153,7222,155,7222,157,7222,159,7222,160,7222,162,7222,164,7222,166,7222,168,7222,170,7222,172,7222,174,7222,176,7222,178,7222,180,7222,182,7222,184,7222,186,7222,188,7222,190,7222,192,7222,194,7222,196,7222,198,7222,200,7222,202,7222,204,7222,206,7222,208,7222,210,7222,212,7222,214,7222,216,7222,218,7222,220,7222,222,7222,224,7222,226,7222,228,7222,230,7222,232,7222,234,7222,236,7222,238,7222,240,7222,242,7222,244,7222,246,7222,248,7222,250,7222,252,7222,254,7222,256,7222,258,7222,260,7222,262,7222,264,7222,266,7222,268,7222,270,7222,272,7222,274,7222,276,7222,278,7222,280,7222,282,7222,284,7222,286,7222,288,7222,290,7222,292,7222,294,7222,296,7222,298,7222,300,7222,302,7222,304,7222,306,7222,308,7222,310,7222,312,7222,314,7222,316,7222,318,7222,320,7222,322,7222,324,7222,326,7222,328,7222,330,7222,332,7222,334,7222,336,7222,338,7222,340,7222,342,7222,344,7222,346,7222,348,7222,350,7222,352,7222,354,7222,356,7222,358,7222,360,7222,362,7222,364,7222,366,7222,368,7222,370,7222,372,7222,374,7222,376,7222,378,7222,380,7222,382,7222,384,7222,386,7222,388,7222,390,7222,392,7222,394,7222,396,7222,398,7222,400,7222,402,7222,404,7222,406,7222,408,7222,410,7222,412,7222,414,7222,416,7222,418,7222,420,7222,422,7222,424,7222,426,7222,428,7222,430,7222,432,7222,434,7222,436,7222,438,7222,444,7222,445,7222,447,7222,449,7222,451,7222,454,7222,456,7222,457,7222,459,7222,461,7222,463,7222,465,7222,467,7222,469,7222,471,7222,473,7222,475,7222,477,7222,479,7222,481,7222,483,7222,485,7222,487,7222,489,7222,491,7222,493,7222,495,7222,497,7222,499,7222,501,7222,503,7222,505,7222,507,7222,509,7222,511,7222,513,7223,25,7223,27,7223,29,7223,31,7223,33,7223,35,7223,37,7223,39,7223,41,7223,43,7223,45,7223,47,7223,48,7223,49,7223,50,7223,51,7223,53,7223,55,7223,57,7223,59,7223,61,7223,63,7223,65,7223,67,7223,69,7223,71,7223,73,7223,75,7223,77,7223,79,7223,81,7223,83,7223,85,7223,87,7223,89,7223,91,7223,93,7223,95,7223,97,7223,99,7223,101,7223,103,7223,105,7223,107,7223,109,7223,111,7223,113,7223,115,7223,117,7223,119,7223,121,7223,123,7223,125,7223,127,7223,129,7223,131,7223,133,7223,135,7223,137,7223,139,7223,141,7223,143,7223,145,7223,147,7223,149,7223,151,7223,153,7223,155,7223,157,7223,159,7223,160,7223,162,7223,164,7223,166,7223,168,7223,170,7223,172,7223,174,7223,176,7223,178,7223,180,7223,182,7223,184,7223,186,7223,188,7223,190,7223,192,7223,194,7223,196,7223,198,7223,200,7223,202,7223,204,7223,206,7223,208,7223,210,7223,212,7223,214,7223,216,7223,218,7223,220,7223,222,7223,224,7223,226,7223,228,7223,230,7223,232,7223,234,7223,236,7223,238,7223,240,7223,242,7223,244,7223,246,7223,248,7223,250,7223,252,7223,254,7223,256,7223,258,7223,260,7223,262,7223,264,7223,266,7223,268,7223,270,7223,272,7223,274,7223,276,7223,278,7223,280,7223,282,7223,284,7223,286,7223,288,7223,290,7223,292,7223,294,7223,296,7223,298,7223,300,7223,302,7223,304,7223,306,7223,308,7223,310,7223,312,7223,314,7223,316,7223,318,7223,320,7223,322,7223,324,7223,326,7223,328,7223,330,7223,332,7223,334,7223,336,7223,338,7223,340,7223,342,7223,344,7223,346,7223,348,7223,350,7223,352,7223,354,7223,356,7223,358,7223,360,7223,362,7223,364,7223,366,7223,368,7223,370,7223,372,7223,374,7223,376,7223,378,7223,380,7223,382,7223,384,7223,386,7223,388,7223,390,7223,392,7223,394,7223,396,7223,398,7223,400,7223,402,7223,404,7223,406,7223,408,7223,410,7223,412,7223,414,7223,416,7223,418,7223,420,7223,422,7223,424,7223,426,7223,428,7223,430,7223,432,7223,434,7223,436,7223,438,7223,444,7223,445,7223,447,7223,449,7223,451,7223,454,7223,456,7223,457,7223,459,7223,461,7223,463,7223,465,7223,467,7223,469,7223,471,7223,473,7223,475,7223,477,7223,479,7223,481,7223,483,7223,485,7223,487,7223,489,7223,491,7223,493,7223,495,7223,497,7223,499,7223,501,7223,503,7223,505,7223,507,7223,509,7223,511,7223,513,7224,25,7224,27,7224,29,7224,31,7224,33,7224,35,7224,37,7224,39,7224,41,7224,43,7224,45,7224,47,7224,48,7224,49,7224,50,7224,51,7224,53,7224,55,7224,57,7224,59,7224,61,7224,63,7224,65,7224,67,7224,69,7224,71,7224,73,7224,75,7224,77,7224,79,7224,81,7224,83,7224,85,7224,87,7224,89,7224,91,7224,93,7224,95,7224,97,7224,99,7224,101,7224,103,7224,105,7224,107,7224,109,7224,111,7224,113,7224,115,7224,117,7224,119,7224,121,7224,123,7224,125,7224,127,7224,129,7224,131,7224,133,7224,135,7224,137,7224,139,7224,141,7224,143,7224,145,7224,147,7224,149,7224,151,7224,153,7224,155,7224,157,7224,159,7224,160,7224,162,7224,164,7224,166,7224,168,7224,170,7224,172,7224,174,7224,176,7224,178,7224,180,7224,182,7224,184,7224,186,7224,188,7224,190,7224,192,7224,194,7224,196,7224,198,7224,200,7224,202,7224,204,7224,206,7224,208,7224,210,7224,212,7224,214,7224,216,7224,218,7224,220,7224,222,7224,224,7224,226,7224,228,7224,230,7224,232,7224,234,7224,236,7224,238,7224,240,7224,242,7224,244,7224,246,7224,248,7224,250,7224,252,7224,254,7224,256,7224,258,7224,260,7224,262,7224,264,7224,266,7224,268,7224,270,7224,272,7224,274,7224,276,7224,278,7224,280,7224,282,7224,284,7224,286,7224,288,7224,290,7224,292,7224,294,7224,296,7224,298,7224,300,7224,302,7224,304,7224,306,7224,308,7224,310,7224,312,7224,314,7224,316,7224,318,7224,320,7224,322,7224,324,7224,326,7224,328,7224,330,7224,332,7224,334,7224,336,7224,338,7224,340,7224,342,7224,344,7224,346,7224,348,7224,350,7224,352,7224,354,7224,356,7224,358,7224,360,7224,362,7224,364,7224,366,7224,368,7224,370,7224,372,7224,374,7224,376,7224,378,7224,380,7224,382,7224,384,7224,386,7224,388,7224,390,7224,392,7224,394,7224,396,7224,398,7224,400,7224,402,7224,404,7224,406,7224,408,7224,410,7224,412,7224,414,7224,416,7224,418,7224,420,7224,422,7224,424,7224,426,7224,428,7224,430,7224,432,7224,434,7224,436,7224,438,7224,444,7224,445,7224,447,7224,449,7224,451,7224,454,7224,456,7224,457,7224,459,7224,461,7224,463,7224,465,7224,467,7224,469,7224,471,7224,473,7224,475,7224,477,7224,479,7224,481,7224,483,7224,485,7224,487,7224,489,7224,491,7224,493,7224,495,7224,497,7224,499,7224,501,7224,503,7224,505,7224,507,7224,509,7224,511,7224,513,7225,25,7225,27,7225,29,7225,31,7225,33,7225,35,7225,37,7225,39,7225,41,7225,43,7225,45,7225,47,7225,48,7225,49,7225,50,7225,51,7225,53,7225,55,7225,57,7225,59,7225,61,7225,63,7225,65,7225,67,7225,69,7225,71,7225,73,7225,75,7225,77,7225,79,7225,81,7225,83,7225,85,7225,87,7225,89,7225,91,7225,93,7225,95,7225,97,7225,99,7225,101,7225,103,7225,105,7225,107,7225,109,7225,111,7225,113,7225,115,7225,117,7225,119,7225,121,7225,123,7225,125,7225,127,7225,129,7225,131,7225,133,7225,135,7225,137,7225,139,7225,141,7225,143,7225,145,7225,147,7225,149,7225,151,7225,153,7225,155,7225,157,7225,159,7225,160,7225,162,7225,164,7225,166,7225,168,7225,170,7225,172,7225,174,7225,176,7225,178,7225,180,7225,182,7225,184,7225,186,7225,188,7225,190,7225,192,7225,194,7225,196,7225,198,7225,200,7225,202,7225,204,7225,206,7225,208,7225,210,7225,212,7225,214,7225,216,7225,218,7225,220,7225,222,7225,224,7225,226,7225,228,7225,230,7225,232,7225,234,7225,236,7225,238,7225,240,7225,242,7225,244,7225,246,7225,248,7225,250,7225,252,7225,254,7225,256,7225,258,7225,260,7225,262,7225,264,7225,266,7225,268,7225,270,7225,272,7225,274,7225,276,7225,278,7225,280,7225,282,7225,284,7225,286,7225,288,7225,290,7225,292,7225,294,7225,296,7225,298,7225,300,7225,302,7225,304,7225,306,7225,308,7225,310,7225,312,7225,314,7225,316,7225,318,7225,320,7225,322,7225,324,7225,326,7225,328,7225,330,7225,332,7225,334,7225,336,7225,338,7225,340,7225,342,7225,344,7225,346,7225,348,7225,350,7225,352,7225,354,7225,356,7225,358,7225,360,7225,362,7225,364,7225,366,7225,368,7225,370,7225,372,7225,374,7225,376,7225,378,7225,380,7225,382,7225,384,7225,386,7225,388,7225,390,7225,392,7225,394,7225,396,7225,398,7225,400,7225,402,7225,404,7225,406,7225,408,7225,410,7225,412,7225,414,7225,416,7225,418,7225,420,7225,422,7225,424,7225,426,7225,428,7225,430,7225,432,7225,434,7225,436,7225,438,7225,444,7225,445,7225,447,7225,449,7225,451,7225,454,7225,456,7225,457,7225,459,7225,461,7225,463,7225,465,7225,467,7225,469,7225,471,7225,473,7225,475,7225,477,7225,479,7225,481,7225,483,7225,485,7225,487,7225,489,7225,491,7225,493,7225,495,7225,497,7225,499,7225,501,7225,503,7225,505,7225,507,7225,509,7225,511,7225,513,7226,25,7226,27,7226,29,7226,31,7226,33,7226,35,7226,37,7226,39,7226,41,7226,43,7226,45,7226,47,7226,48,7226,49,7226,50,7226,51,7226,53,7226,55,7226,57,7226,59,7226,61,7226,63,7226,65,7226,67,7226,69,7226,71,7226,73,7226,75,7226,77,7226,79,7226,81,7226,83,7226,85,7226,87,7226,89,7226,91,7226,93,7226,95,7226,97,7226,99,7226,101,7226,103,7226,105,7226,107,7226,109,7226,111,7226,113,7226,115,7226,117,7226,119,7226,121,7226,123,7226,125,7226,127,7226,129,7226,131,7226,133,7226,135,7226,137,7226,139,7226,141,7226,143,7226,145,7226,147,7226,149,7226,151,7226,153,7226,155,7226,157,7226,159,7226,160,7226,162,7226,164,7226,166,7226,168,7226,170,7226,172,7226,174,7226,176,7226,178,7226,180,7226,182,7226,184,7226,186,7226,188,7226,190,7226,192,7226,194,7226,196,7226,198,7226,200,7226,202,7226,204,7226,206,7226,208,7226,210,7226,212,7226,214,7226,216,7226,218,7226,220,7226,222,7226,224,7226,226,7226,228,7226,230,7226,232,7226,234,7226,236,7226,238,7226,240,7226,242,7226,244,7226,246,7226,248,7226,250,7226,252,7226,254,7226,256,7226,258,7226,260,7226,262,7226,264,7226,266,7226,268,7226,270,7226,272,7226,274,7226,276,7226,278,7226,280,7226,282,7226,284,7226,286,7226,288,7226,290,7226,292,7226,294,7226,296,7226,298,7226,300,7226,302,7226,304,7226,306,7226,308,7226,310,7226,312,7226,314,7226,316,7226,318,7226,320,7226,322,7226,324,7226,326,7226,328,7226,330,7226,332,7226,334,7226,336,7226,338,7226,340,7226,342,7226,344,7226,346,7226,348,7226,350,7226,352,7226,354,7226,356,7226,358,7226,360,7226,362,7226,364,7226,366,7226,368,7226,370,7226,372,7226,374,7226,376,7226,378,7226,380,7226,382,7226,384,7226,386,7226,388,7226,390,7226,392,7226,394,7226,396,7226,398,7226,400,7226,402,7226,404,7226,406,7226,408,7226,410,7226,412,7226,414,7226,416,7226,418,7226,420,7226,422,7226,424,7226,426,7226,428,7226,430,7226,432,7226,434,7226,436,7226,438,7226,444,7226,445,7226,447,7226,449,7226,451,7226,454,7226,456,7226,457,7226,459,7226,461,7226,463,7226,465,7226,467,7226,469,7226,471,7226,473,7226,475,7226,477,7226,479,7226,481,7226,483,7226,485,7226,487,7226,489,7226,491,7226,493,7226,495,7226,497,7226,499,7226,501,7226,503,7226,505,7226,507,7226,509,7226,511,7226,513,7227,25,7227,27,7227,29,7227,31,7227,33,7227,35,7227,37,7227,39,7227,41,7227,43,7227,45,7227,47,7227,48,7227,49,7227,50,7227,51,7227,53,7227,55,7227,57,7227,59,7227,61,7227,63,7227,65,7227,67,7227,69,7227,71,7227,73,7227,75,7227,77,7227,79,7227,81,7227,83,7227,85,7227,87,7227,89,7227,91,7227,93,7227,95,7227,97,7227,99,7227,101,7227,103,7227,105,7227,107,7227,109,7227,111,7227,113,7227,115,7227,117,7227,119,7227,121,7227,123,7227,125,7227,127,7227,129,7227,131,7227,133,7227,135,7227,137,7227,139,7227,141,7227,143,7227,145,7227,147,7227,149,7227,151,7227,153,7227,155,7227,157,7227,159,7227,160,7227,162,7227,164,7227,166,7227,168,7227,170,7227,172,7227,174,7227,176,7227,178,7227,180,7227,182,7227,184,7227,186,7227,188,7227,190,7227,192,7227,194,7227,196,7227,198,7227,200,7227,202,7227,204,7227,206,7227,208,7227,210,7227,212,7227,214,7227,216,7227,218,7227,220,7227,222,7227,224,7227,226,7227,228,7227,230,7227,232,7227,234,7227,236,7227,238,7227,240,7227,242,7227,244,7227,246,7227,248,7227,250,7227,252,7227,254,7227,256,7227,258,7227,260,7227,262,7227,264,7227,266,7227,268,7227,270,7227,272,7227,274,7227,276,7227,278,7227,280,7227,282,7227,284,7227,286,7227,288,7227,290,7227,292,7227,294,7227,296,7227,298,7227,300,7227,302,7227,304,7227,306,7227,308,7227,310,7227,312,7227,314,7227,316,7227,318,7227,320,7227,322,7227,324,7227,326,7227,328,7227,330,7227,332,7227,334,7227,336,7227,338,7227,340,7227,342,7227,344,7227,346,7227,348,7227,350,7227,352,7227,354,7227,356,7227,358,7227,360,7227,362,7227,364,7227,366,7227,368,7227,370,7227,372,7227,374,7227,376,7227,378,7227,380,7227,382,7227,384,7227,386,7227,388,7227,390,7227,392,7227,394,7227,396,7227,398,7227,400,7227,402,7227,404,7227,406,7227,408,7227,410,7227,412,7227,414,7227,416,7227,418,7227,420,7227,422,7227,424,7227,426,7227,428,7227,430,7227,432,7227,434,7227,436,7227,438,7227,444,7227,445,7227,447,7227,449,7227,451,7227,454,7227,456,7227,457,7227,459,7227,461,7227,463,7227,465,7227,467,7227,469,7227,471,7227,473,7227,475,7227,477,7227,479,7227,481,7227,483,7227,485,7227,487,7227,489,7227,491,7227,493,7227,495,7227,497,7227,499,7227,501,7227,503,7227,505,7227,507,7227,509,7227,511,7227,513,7228,25,7228,27,7228,29,7228,31,7228,33,7228,35,7228,37,7228,39,7228,41,7228,43,7228,45,7228,47,7228,48,7228,49,7228,50,7228,51,7228,53,7228,55,7228,57,7228,59,7228,61,7228,63,7228,65,7228,67,7228,69,7228,71,7228,73,7228,75,7228,77,7228,79,7228,81,7228,83,7228,85,7228,87,7228,89,7228,91,7228,93,7228,95,7228,97,7228,99,7228,101,7228,103,7228,105,7228,107,7228,109,7228,111,7228,113,7228,115,7228,117,7228,119,7228,121,7228,123,7228,125,7228,127,7228,129,7228,131,7228,133,7228,135,7228,137,7228,139,7228,141,7228,143,7228,145,7228,147,7228,149,7228,151,7228,153,7228,155,7228,157,7228,159,7228,160,7228,162,7228,164,7228,166,7228,168,7228,170,7228,172,7228,174,7228,176,7228,178,7228,180,7228,182,7228,184,7228,186,7228,188,7228,190,7228,192,7228,194,7228,196,7228,198,7228,200,7228,202,7228,204,7228,206,7228,208,7228,210,7228,212,7228,214,7228,216,7228,218,7228,220,7228,222,7228,224,7228,226,7228,228,7228,230,7228,232,7228,234,7228,236,7228,238,7228,240,7228,242,7228,244,7228,246,7228,248,7228,250,7228,252,7228,254,7228,256,7228,258,7228,260,7228,262,7228,264,7228,266,7228,268,7228,270,7228,272,7228,274,7228,276,7228,278,7228,280,7228,282,7228,284,7228,286,7228,288,7228,290,7228,292,7228,294,7228,296,7228,298,7228,300,7228,302,7228,304,7228,306,7228,308,7228,310,7228,312,7228,314,7228,316,7228,318,7228,320,7228,322,7228,324,7228,326,7228,328,7228,330,7228,332,7228,334,7228,336,7228,338,7228,340,7228,342,7228,344,7228,346,7228,348,7228,350,7228,352,7228,354,7228,356,7228,358,7228,360,7228,362,7228,364,7228,366,7228,368,7228,370,7228,372,7228,374,7228,376,7228,378,7228,380,7228,382,7228,384,7228,386,7228,388,7228,390,7228,392,7228,394,7228,396,7228,398,7228,400,7228,402,7228,404,7228,406,7228,408,7228,410,7228,412,7228,414,7228,416,7228,418,7228,420,7228,422,7228,424,7228,426,7228,428,7228,430,7228,432,7228,434,7228,436,7228,438,7228,444,7228,445,7228,447,7228,449,7228,451,7228,454,7228,456,7228,457,7228,459,7228,461,7228,463,7228,465,7228,467,7228,469,7228,471,7228,473,7228,475,7228,477,7228,479,7228,481,7228,483,7228,485,7228,487,7228,489,7228,491,7228,493,7228,495,7228,497,7228,499,7228,501,7228,503,7228,505,7228,507,7228,509,7228,511,7228,513,7229,25,7229,27,7229,29,7229,31,7229,33,7229,35,7229,37,7229,39,7229,41,7229,43,7229,45,7229,47,7229,48,7229,49,7229,50,7229,51,7229,53,7229,55,7229,57,7229,59,7229,61,7229,63,7229,65,7229,67,7229,69,7229,71,7229,73,7229,75,7229,77,7229,79,7229,81,7229,83,7229,85,7229,87,7229,89,7229,91,7229,93,7229,95,7229,97,7229,99,7229,101,7229,103,7229,105,7229,107,7229,109,7229,111,7229,113,7229,115,7229,117,7229,119,7229,121,7229,123,7229,125,7229,127,7229,129,7229,131,7229,133,7229,135,7229,137,7229,139,7229,141,7229,143,7229,145,7229,147,7229,149,7229,151,7229,153,7229,155,7229,157,7229,159,7229,160,7229,162,7229,164,7229,166,7229,168,7229,170,7229,172,7229,174,7229,176,7229,178,7229,180,7229,182,7229,184,7229,186,7229,188,7229,190,7229,192,7229,194,7229,196,7229,198,7229,200,7229,202,7229,204,7229,206,7229,208,7229,210,7229,212,7229,214,7229,216,7229,218,7229,220,7229,222,7229,224,7229,226,7229,228,7229,230,7229,232,7229,234,7229,236,7229,238,7229,240,7229,242,7229,244,7229,246,7229,248,7229,250,7229,252,7229,254,7229,256,7229,258,7229,260,7229,262,7229,264,7229,266,7229,268,7229,270,7229,272,7229,274,7229,276,7229,278,7229,280,7229,282,7229,284,7229,286,7229,288,7229,290,7229,292,7229,294,7229,296,7229,298,7229,300,7229,302,7229,304,7229,306,7229,308,7229,310,7229,312,7229,314,7229,316,7229,318,7229,320,7229,322,7229,324,7229,326,7229,328,7229,330,7229,332,7229,334,7229,336,7229,338,7229,340,7229,342,7229,344,7229,346,7229,348,7229,350,7229,352,7229,354,7229,356,7229,358,7229,360,7229,362,7229,364,7229,366,7229,368,7229,370,7229,372,7229,374,7229,376,7229,378,7229,380,7229,382,7229,384,7229,386,7229,388,7229,390,7229,392,7229,394,7229,396,7229,398,7229,400,7229,402,7229,404,7229,406,7229,408,7229,410,7229,412,7229,414,7229,416,7229,418,7229,420,7229,422,7229,424,7229,426,7229,428,7229,430,7229,432,7229,434,7229,436,7229,438,7229,444,7229,445,7229,447,7229,449,7229,451,7229,454,7229,456,7229,457,7229,459,7229,461,7229,463,7229,465,7229,467,7229,469,7229,471,7229,473,7229,475,7229,477,7229,479,7229,481,7229,483,7229,485,7229,487,7229,489,7229,491,7229,493,7229,495,7229,497,7229,499,7229,501,7229,503,7229,505,7229,507,7229,509,7229,511,7229,513,7230,25,7230,27,7230,29,7230,31,7230,33,7230,35,7230,37,7230,39,7230,41,7230,43,7230,45,7230,47,7230,48,7230,49,7230,50,7230,51,7230,53,7230,55,7230,57,7230,59,7230,61,7230,63,7230,65,7230,67,7230,69,7230,71,7230,73,7230,75,7230,77,7230,79,7230,81,7230,83,7230,85,7230,87,7230,89,7230,91,7230,93,7230,95,7230,97,7230,99,7230,101,7230,103,7230,105,7230,107,7230,109,7230,111,7230,113,7230,115,7230,117,7230,119,7230,121,7230,123,7230,125,7230,127,7230,129,7230,131,7230,133,7230,135,7230,137,7230,139,7230,141,7230,143,7230,145,7230,147,7230,149,7230,151,7230,153,7230,155,7230,157,7230,159,7230,160,7230,162,7230,164,7230,166,7230,168,7230,170,7230,172,7230,174,7230,176,7230,178,7230,180,7230,182,7230,184,7230,186,7230,188,7230,190,7230,192,7230,194,7230,196,7230,198,7230,200,7230,202,7230,204,7230,206,7230,208,7230,210,7230,212,7230,214,7230,216,7230,218,7230,220,7230,222,7230,224,7230,226,7230,228,7230,230,7230,232,7230,234,7230,236,7230,238,7230,240,7230,242,7230,244,7230,246,7230,248,7230,250,7230,252,7230,254,7230,256,7230,258,7230,260,7230,262,7230,264,7230,266,7230,268,7230,270,7230,272,7230,274,7230,276,7230,278,7230,280,7230,282,7230,284,7230,286,7230,288,7230,290,7230,292,7230,294,7230,296,7230,298,7230,300,7230,302,7230,304,7230,306,7230,308,7230,310,7230,312,7230,314,7230,316,7230,318,7230,320,7230,322,7230,324,7230,326,7230,328,7230,330,7230,332,7230,334,7230,336,7230,338,7230,340,7230,342,7230,344,7230,346,7230,348,7230,350,7230,352,7230,354,7230,356,7230,358,7230,360,7230,362,7230,364,7230,366,7230,368,7230,370,7230,372,7230,374,7230,376,7230,378,7230,380,7230,382,7230,384,7230,386,7230,388,7230,390,7230,392,7230,394,7230,396,7230,398,7230,400,7230,402,7230,404,7230,406,7230,408,7230,410,7230,412,7230,414,7230,416,7230,418,7230,420,7230,422,7230,424,7230,426,7230,428,7230,430,7230,432,7230,434,7230,436,7230,438,7230,444,7230,445,7230,447,7230,449,7230,451,7230,454,7230,456,7230,457,7230,459,7230,461,7230,463,7230,465,7230,467,7230,469,7230,471,7230,473,7230,475,7230,477,7230,479,7230,481,7230,483,7230,485,7230,487,7230,489,7230,491,7230,493,7230,495,7230,497,7230,499,7230,501,7230,503,7230,505,7230,507,7230,509,7230,511,7230,513,7231,25,7231,27,7231,29,7231,31,7231,33,7231,35,7231,37,7231,39,7231,41,7231,43,7231,45,7231,47,7231,48,7231,49,7231,50,7231,51,7231,53,7231,55,7231,57,7231,59,7231,61,7231,63,7231,65,7231,67,7231,69,7231,71,7231,73,7231,75,7231,77,7231,79,7231,81,7231,83,7231,85,7231,87,7231,89,7231,91,7231,93,7231,95,7231,97,7231,99,7231,101,7231,103,7231,105,7231,107,7231,109,7231,111,7231,113,7231,115,7231,117,7231,119,7231,121,7231,123,7231,125,7231,127,7231,129,7231,131,7231,133,7231,135,7231,137,7231,139,7231,141,7231,143,7231,145,7231,147,7231,149,7231,151,7231,153,7231,155,7231,157,7231,159,7231,160,7231,162,7231,164,7231,166,7231,168,7231,170,7231,172,7231,174,7231,176,7231,178,7231,180,7231,182,7231,184,7231,186,7231,188,7231,190,7231,192,7231,194,7231,196,7231,198,7231,200,7231,202,7231,204,7231,206,7231,208,7231,210,7231,212,7231,214,7231,216,7231,218,7231,220,7231,222,7231,224,7231,226,7231,228,7231,230,7231,232,7231,234,7231,236,7231,238,7231,240,7231,242,7231,244,7231,246,7231,248,7231,250,7231,252,7231,254,7231,256,7231,258,7231,260,7231,262,7231,264,7231,266,7231,268,7231,270,7231,272,7231,274,7231,276,7231,278,7231,280,7231,282,7231,284,7231,286,7231,288,7231,290,7231,292,7231,294,7231,296,7231,298,7231,300,7231,302,7231,304,7231,306,7231,308,7231,310,7231,312,7231,314,7231,316,7231,318,7231,320,7231,322,7231,324,7231,326,7231,328,7231,330,7231,332,7231,334,7231,336,7231,338,7231,340,7231,342,7231,344,7231,346,7231,348,7231,350,7231,352,7231,354,7231,356,7231,358,7231,360,7231,362,7231,364,7231,366,7231,368,7231,370,7231,372,7231,374,7231,376,7231,378,7231,380,7231,382,7231,384,7231,386,7231,388,7231,390,7231,392,7231,394,7231,396,7231,398,7231,400,7231,402,7231,404,7231,406,7231,408,7231,410,7231,412,7231,414,7231,416,7231,418,7231,420,7231,422,7231,424,7231,426,7231,428,7231,430,7231,432,7231,434,7231,436,7231,438,7231,440,7231,441,7231,442,7231,443,7231,444,7231,445,7231,447,7231,449,7231,451,7231,453,7231,454,7231,456,7231,457,7231,459,7231,461,7231,463,7231,465,7231,467,7231,469,7231,471,7231,473,7231,475,7231,477,7231,479,7231,481,7231,483,7231,485,7231,487,7231,489,7231,491,7231,493,7231,495,7231,497,7231,499,7231,501,7231,503,7231,505,7231,507,7231,509,7231,511,7232,25,7232,27,7232,29,7232,31,7232,33,7232,35,7232,37,7232,39,7232,41,7232,43,7232,45,7232,47,7232,48,7232,49,7232,50,7232,51,7232,53,7232,55,7232,57,7232,59,7232,61,7232,63,7232,65,7232,67,7232,69,7232,71,7232,73,7232,75,7232,77,7232,79,7232,81,7232,83,7232,85,7232,87,7232,89,7232,91,7232,93,7232,95,7232,97,7232,99,7232,101,7232,103,7232,105,7232,107,7232,109,7232,111,7232,113,7232,115,7232,117,7232,119,7232,121,7232,123,7232,125,7232,127,7232,129,7232,131,7232,133,7232,135,7232,137,7232,139,7232,141,7232,143,7232,145,7232,147,7232,149,7232,151,7232,153,7232,155,7232,157,7232,159,7232,160,7232,162,7232,164,7232,166,7232,168,7232,170,7232,172,7232,174,7232,176,7232,178,7232,180,7232,182,7232,184,7232,186,7232,188,7232,190,7232,192,7232,194,7232,196,7232,198,7232,200,7232,202,7232,204,7232,206,7232,208,7232,210,7232,212,7232,214,7232,216,7232,218,7232,220,7232,222,7232,224,7232,226,7232,228,7232,230,7232,232,7232,234,7232,236,7232,238,7232,240,7232,242,7232,244,7232,246,7232,248,7232,250,7232,252,7232,254,7232,256,7232,258,7232,260,7232,262,7232,264,7232,266,7232,268,7232,270,7232,272,7232,274,7232,276,7232,278,7232,280,7232,282,7232,284,7232,286,7232,288,7232,290,7232,292,7232,294,7232,296,7232,298,7232,300,7232,302,7232,304,7232,306,7232,308,7232,310,7232,312,7232,314,7232,316,7232,318,7232,320,7232,322,7232,324,7232,326,7232,328,7232,330,7232,332,7232,334,7232,336,7232,338,7232,340,7232,342,7232,344,7232,346,7232,348,7232,350,7232,352,7232,354,7232,356,7232,358,7232,360,7232,362,7232,364,7232,366,7232,368,7232,370,7232,372,7232,374,7232,376,7232,378,7232,380,7232,382,7232,384,7232,386,7232,388,7232,390,7232,392,7232,394,7232,396,7232,398,7232,400,7232,402,7232,404,7232,406,7232,408,7232,410,7232,412,7232,414,7232,416,7232,418,7232,420,7232,422,7232,424,7232,426,7232,428,7232,430,7232,432,7232,434,7232,436,7232,438,7232,440,7232,441,7232,442,7232,443,7232,444,7232,445,7232,447,7232,449,7232,451,7232,453,7232,454,7232,456,7232,457,7232,459,7232,461,7232,463,7232,465,7232,467,7232,469,7232,471,7232,473,7232,475,7232,477,7232,479,7232,481,7232,483,7232,485,7232,487,7232,489,7232,491,7232,493,7232,495,7232,497,7232,499,7232,501,7232,503,7232,505,7232,507,7232,509,7232,511,7233,25,7233,27,7233,29,7233,31,7233,33,7233,35,7233,37,7233,39,7233,41,7233,43,7233,45,7233,47,7233,48,7233,49,7233,50,7233,51,7233,53,7233,55,7233,57,7233,59,7233,61,7233,63,7233,65,7233,67,7233,69,7233,71,7233,73,7233,75,7233,77,7233,79,7233,81,7233,83,7233,85,7233,87,7233,89,7233,91,7233,93,7233,95,7233,97,7233,99,7233,101,7233,103,7233,105,7233,107,7233,109,7233,111,7233,113,7233,115,7233,117,7233,119,7233,121,7233,123,7233,125,7233,127,7233,129,7233,131,7233,133,7233,135,7233,137,7233,139,7233,141,7233,143,7233,145,7233,147,7233,149,7233,151,7233,153,7233,155,7233,157,7233,159,7233,160,7233,162,7233,164,7233,166,7233,168,7233,170,7233,172,7233,174,7233,176,7233,178,7233,180,7233,182,7233,184,7233,186,7233,188,7233,190,7233,192,7233,194,7233,196,7233,198,7233,200,7233,202,7233,204,7233,206,7233,208,7233,210,7233,212,7233,214,7233,216,7233,218,7233,220,7233,222,7233,224,7233,226,7233,228,7233,230,7233,232,7233,234,7233,236,7233,238,7233,240,7233,242,7233,244,7233,246,7233,248,7233,250,7233,252,7233,254,7233,256,7233,258,7233,260,7233,262,7233,264,7233,266,7233,268,7233,270,7233,272,7233,274,7233,276,7233,278,7233,280,7233,282,7233,284,7233,286,7233,288,7233,290,7233,292,7233,294,7233,296,7233,298,7233,300,7233,302,7233,304,7233,306,7233,308,7233,310,7233,312,7233,314,7233,316,7233,318,7233,320,7233,322,7233,324,7233,326,7233,328,7233,330,7233,332,7233,334,7233,336,7233,338,7233,340,7233,342,7233,344,7233,346,7233,348,7233,350,7233,352,7233,354,7233,356,7233,358,7233,360,7233,362,7233,364,7233,366,7233,368,7233,370,7233,372,7233,374,7233,376,7233,378,7233,380,7233,382,7233,384,7233,386,7233,388,7233,390,7233,392,7233,394,7233,396,7233,398,7233,400,7233,402,7233,404,7233,406,7233,408,7233,410,7233,412,7233,414,7233,416,7233,418,7233,420,7233,422,7233,424,7233,426,7233,428,7233,430,7233,432,7233,434,7233,436,7233,438,7233,440,7233,441,7233,442,7233,443,7233,444,7233,445,7233,447,7233,449,7233,451,7233,453,7233,454,7233,456,7233,457,7233,459,7233,461,7233,463,7233,465,7233,467,7233,469,7233,471,7233,473,7233,475,7233,477,7233,479,7233,481,7233,483,7233,485,7233,487,7233,489,7233,491,7233,493,7233,495,7233,497,7233,499,7233,501,7233,503,7233,505,7233,507,7233,509,7233,511,7234,27,7234,29,7234,31,7234,33,7234,35,7234,37,7234,39,7234,41,7234,43,7234,45,7234,47,7234,48,7234,49,7234,50,7234,51,7234,53,7234,57,7234,61,7234,63,7234,65,7234,67,7234,69,7234,71,7234,73,7234,75,7234,81,7234,83,7234,85,7234,87,7234,89,7234,91,7234,93,7234,95,7234,97,7234,99,7234,101,7234,107,7234,109,7234,111,7234,113,7234,115,7234,117,7234,119,7234,121,7234,123,7234,125,7234,127,7234,129,7234,131,7234,133,7234,135,7234,137,7234,139,7234,143,7234,147,7234,149,7234,151,7234,153,7234,157,7234,159,7234,162,7234,164,7234,166,7234,168,7234,170,7234,172,7234,174,7234,176,7234,178,7234,180,7234,182,7234,184,7234,186,7234,188,7234,190,7234,192,7234,194,7234,196,7234,198,7234,200,7234,206,7234,208,7234,210,7234,212,7234,214,7234,216,7234,218,7234,220,7234,222,7234,224,7234,226,7234,228,7234,230,7234,232,7234,234,7234,236,7234,240,7234,242,7234,244,7234,246,7234,248,7234,250,7234,252,7234,254,7234,258,7234,262,7234,264,7234,266,7234,268,7234,270,7234,272,7234,274,7234,276,7234,278,7234,280,7234,282,7234,284,7234,286,7234,290,7234,292,7234,296,7234,298,7234,300,7234,302,7234,304,7234,310,7234,312,7234,314,7234,316,7234,318,7234,320,7234,322,7234,324,7234,328,7234,336,7234,338,7234,340,7234,346,7234,350,7234,352,7234,356,7234,358,7234,362,7234,364,7234,366,7234,368,7234,372,7234,374,7234,376,7234,378,7234,382,7234,384,7234,386,7234,388,7234,392,7234,396,7234,398,7234,400,7234,402,7234,410,7234,412,7234,414,7234,418,7234,420,7234,422,7234,426,7234,428,7234,430,7234,432,7234,434,7234,438,7234,440,7234,441,7234,442,7234,443,7234,445,7234,447,7234,449,7234,451,7234,453,7234,454,7234,456,7234,457,7234,459,7234,461,7234,467,7234,469,7234,471,7234,473,7234,475,7234,477,7234,479,7234,481,7234,483,7234,485,7234,487,7234,489,7234,491,7234,493,7234,495,7234,497,7234,499,7234,503,7234,505,7234,507,7234,509,7234,511,7234,513,7235,25,7235,27,7235,29,7235,31,7235,33,7235,35,7235,37,7235,39,7235,41,7235,43,7235,45,7235,47,7235,48,7235,49,7235,50,7235,51,7235,53,7235,55,7235,57,7235,59,7235,61,7235,63,7235,65,7235,67,7235,69,7235,71,7235,73,7235,75,7235,77,7235,79,7235,81,7235,83,7235,85,7235,87,7235,89,7235,91,7235,93,7235,95,7235,97,7235,99,7235,101,7235,103,7235,105,7235,107,7235,109,7235,111,7235,113,7235,115,7235,117,7235,119,7235,121,7235,123,7235,125,7235,127,7235,129,7235,131,7235,133,7235,135,7235,137,7235,139,7235,141,7235,143,7235,145,7235,147,7235,149,7235,151,7235,153,7235,155,7235,157,7235,159,7235,160,7235,162,7235,164,7235,166,7235,168,7235,170,7235,172,7235,174,7235,176,7235,178,7235,180,7235,182,7235,184,7235,186,7235,188,7235,190,7235,192,7235,194,7235,196,7235,198,7235,200,7235,202,7235,204,7235,206,7235,208,7235,210,7235,212,7235,214,7235,216,7235,218,7235,220,7235,222,7235,224,7235,226,7235,228,7235,230,7235,232,7235,234,7235,236,7235,238,7235,240,7235,242,7235,244,7235,246,7235,248,7235,250,7235,252,7235,254,7235,256,7235,258,7235,260,7235,262,7235,264,7235,266,7235,268,7235,270,7235,272,7235,274,7235,276,7235,278,7235,280,7235,282,7235,284,7235,286,7235,288,7235,290,7235,292,7235,294,7235,296,7235,298,7235,300,7235,302,7235,304,7235,306,7235,308,7235,310,7235,312,7235,314,7235,316,7235,318,7235,320,7235,322,7235,324,7235,326,7235,328,7235,330,7235,332,7235,334,7235,336,7235,338,7235,340,7235,342,7235,344,7235,346,7235,348,7235,350,7235,352,7235,354,7235,356,7235,358,7235,360,7235,362,7235,364,7235,366,7235,368,7235,370,7235,372,7235,374,7235,376,7235,378,7235,380,7235,382,7235,384,7235,386,7235,388,7235,390,7235,392,7235,394,7235,396,7235,398,7235,400,7235,402,7235,404,7235,406,7235,408,7235,410,7235,412,7235,414,7235,416,7235,418,7235,420,7235,422,7235,424,7235,426,7235,428,7235,430,7235,432,7235,434,7235,436,7235,438,7235,440,7235,441,7235,442,7235,443,7235,444,7235,445,7235,447,7235,449,7235,451,7235,453,7235,454,7235,456,7235,457,7235,459,7235,461,7235,463,7235,465,7235,467,7235,469,7235,471,7235,473,7235,475,7235,477,7235,479,7235,481,7235,483,7235,485,7235,487,7235,489,7235,491,7235,493,7235,495,7235,497,7235,499,7235,501,7235,503,7235,505,7235,507,7235,509,7235,511,7235,513,7236,25,7236,27,7236,29,7236,31,7236,33,7236,35,7236,37,7236,39,7236,41,7236,43,7236,45,7236,47,7236,48,7236,49,7236,50,7236,51,7236,53,7236,55,7236,57,7236,59,7236,61,7236,63,7236,65,7236,67,7236,69,7236,71,7236,73,7236,75,7236,77,7236,79,7236,81,7236,83,7236,85,7236,87,7236,89,7236,91,7236,93,7236,95,7236,97,7236,99,7236,101,7236,103,7236,105,7236,107,7236,109,7236,111,7236,113,7236,115,7236,117,7236,119,7236,121,7236,123,7236,125,7236,127,7236,129,7236,131,7236,133,7236,135,7236,137,7236,139,7236,141,7236,143,7236,145,7236,147,7236,149,7236,151,7236,153,7236,155,7236,157,7236,159,7236,160,7236,162,7236,164,7236,166,7236,168,7236,170,7236,172,7236,174,7236,176,7236,178,7236,180,7236,182,7236,184,7236,186,7236,188,7236,190,7236,192,7236,194,7236,196,7236,198,7236,200,7236,202,7236,204,7236,206,7236,208,7236,210,7236,212,7236,214,7236,216,7236,218,7236,220,7236,222,7236,224,7236,226,7236,228,7236,230,7236,232,7236,234,7236,236,7236,238,7236,240,7236,242,7236,244,7236,246,7236,248,7236,250,7236,252,7236,254,7236,256,7236,258,7236,260,7236,262,7236,264,7236,266,7236,268,7236,270,7236,272,7236,274,7236,276,7236,278,7236,280,7236,282,7236,284,7236,286,7236,288,7236,290,7236,292,7236,294,7236,296,7236,298,7236,300,7236,302,7236,304,7236,306,7236,308,7236,310,7236,312,7236,314,7236,316,7236,318,7236,320,7236,322,7236,324,7236,326,7236,328,7236,330,7236,332,7236,334,7236,336,7236,338,7236,340,7236,342,7236,344,7236,346,7236,348,7236,350,7236,352,7236,354,7236,356,7236,358,7236,360,7236,362,7236,364,7236,366,7236,368,7236,370,7236,372,7236,374,7236,376,7236,378,7236,380,7236,382,7236,384,7236,386,7236,388,7236,390,7236,392,7236,394,7236,396,7236,398,7236,400,7236,402,7236,404,7236,406,7236,408,7236,410,7236,412,7236,414,7236,416,7236,418,7236,420,7236,422,7236,424,7236,426,7236,428,7236,430,7236,432,7236,434,7236,436,7236,438,7236,440,7236,441,7236,442,7236,443,7236,444,7236,445,7236,447,7236,449,7236,451,7236,453,7236,454,7236,456,7236,457,7236,459,7236,461,7236,463,7236,465,7236,467,7236,469,7236,471,7236,473,7236,475,7236,477,7236,479,7236,481,7236,483,7236,485,7236,487,7236,489,7236,491,7236,493,7236,495,7236,497,7236,499,7236,501,7236,503,7236,505,7236,507,7236,509,7236,511,7236,513,7237,25,7237,27,7237,29,7237,31,7237,33,7237,35,7237,37,7237,39,7237,41,7237,43,7237,45,7237,47,7237,48,7237,49,7237,50,7237,51,7237,53,7237,55,7237,57,7237,59,7237,61,7237,63,7237,65,7237,67,7237,69,7237,71,7237,73,7237,75,7237,77,7237,79,7237,81,7237,83,7237,85,7237,87,7237,89,7237,91,7237,93,7237,95,7237,97,7237,99,7237,101,7237,103,7237,105,7237,107,7237,109,7237,111,7237,113,7237,115,7237,117,7237,119,7237,121,7237,123,7237,125,7237,127,7237,129,7237,131,7237,133,7237,135,7237,137,7237,139,7237,141,7237,143,7237,145,7237,147,7237,149,7237,151,7237,153,7237,155,7237,157,7237,159,7237,160,7237,162,7237,164,7237,166,7237,168,7237,170,7237,172,7237,174,7237,176,7237,178,7237,180,7237,182,7237,184,7237,186,7237,188,7237,190,7237,192,7237,194,7237,196,7237,198,7237,200,7237,202,7237,204,7237,206,7237,208,7237,210,7237,212,7237,214,7237,216,7237,218,7237,220,7237,222,7237,224,7237,226,7237,228,7237,230,7237,232,7237,234,7237,236,7237,238,7237,240,7237,242,7237,244,7237,246,7237,248,7237,250,7237,252,7237,254,7237,256,7237,258,7237,260,7237,262,7237,264,7237,266,7237,268,7237,270,7237,272,7237,274,7237,276,7237,278,7237,280,7237,282,7237,284,7237,286,7237,288,7237,290,7237,292,7237,294,7237,296,7237,298,7237,300,7237,302,7237,304,7237,306,7237,308,7237,310,7237,312,7237,314,7237,316,7237,318,7237,320,7237,322,7237,324,7237,326,7237,328,7237,330,7237,332,7237,334,7237,336,7237,338,7237,340,7237,342,7237,344,7237,346,7237,348,7237,350,7237,352,7237,354,7237,356,7237,358,7237,360,7237,362,7237,364,7237,366,7237,368,7237,370,7237,372,7237,374,7237,376,7237,378,7237,380,7237,382,7237,384,7237,386,7237,388,7237,390,7237,392,7237,394,7237,396,7237,398,7237,400,7237,402,7237,404,7237,406,7237,408,7237,410,7237,412,7237,414,7237,416,7237,418,7237,420,7237,422,7237,424,7237,426,7237,428,7237,430,7237,432,7237,434,7237,436,7237,438,7237,440,7237,441,7237,442,7237,443,7237,444,7237,445,7237,447,7237,449,7237,451,7237,453,7237,454,7237,456,7237,457,7237,459,7237,461,7237,463,7237,465,7237,467,7237,469,7237,471,7237,473,7237,475,7237,477,7237,479,7237,481,7237,483,7237,485,7237,487,7237,489,7237,491,7237,493,7237,495,7237,497,7237,499,7237,501,7237,503,7237,505,7237,507,7237,509,7237,511,7237,513,7238,27,7238,29,7238,31,7238,33,7238,35,7238,37,7238,39,7238,41,7238,43,7238,45,7238,47,7238,48,7238,49,7238,50,7238,51,7238,53,7238,57,7238,61,7238,63,7238,65,7238,67,7238,69,7238,71,7238,73,7238,75,7238,81,7238,83,7238,85,7238,87,7238,89,7238,91,7238,93,7238,95,7238,97,7238,99,7238,101,7238,107,7238,109,7238,111,7238,113,7238,115,7238,117,7238,119,7238,121,7238,123,7238,125,7238,127,7238,129,7238,131,7238,133,7238,135,7238,137,7238,139,7238,143,7238,147,7238,149,7238,151,7238,153,7238,157,7238,159,7238,162,7238,164,7238,166,7238,168,7238,170,7238,172,7238,174,7238,176,7238,178,7238,180,7238,182,7238,184,7238,186,7238,188,7238,190,7238,192,7238,194,7238,196,7238,198,7238,200,7238,206,7238,208,7238,210,7238,212,7238,214,7238,216,7238,218,7238,220,7238,222,7238,224,7238,226,7238,228,7238,230,7238,232,7238,234,7238,236,7238,240,7238,242,7238,244,7238,246,7238,248,7238,250,7238,252,7238,254,7238,258,7238,262,7238,264,7238,266,7238,268,7238,270,7238,272,7238,274,7238,276,7238,278,7238,280,7238,282,7238,284,7238,286,7238,290,7238,292,7238,296,7238,298,7238,300,7238,302,7238,304,7238,310,7238,312,7238,314,7238,316,7238,318,7238,320,7238,322,7238,324,7238,328,7238,336,7238,338,7238,340,7238,346,7238,350,7238,352,7238,356,7238,358,7238,362,7238,364,7238,366,7238,368,7238,372,7238,374,7238,376,7238,378,7238,382,7238,384,7238,386,7238,388,7238,392,7238,396,7238,398,7238,400,7238,402,7238,410,7238,412,7238,414,7238,418,7238,420,7238,422,7238,426,7238,428,7238,430,7238,432,7238,434,7238,438,7238,440,7238,441,7238,442,7238,443,7238,445,7238,447,7238,449,7238,451,7238,453,7238,454,7238,456,7238,457,7238,459,7238,461,7238,467,7238,469,7238,471,7238,473,7238,475,7238,477,7238,479,7238,481,7238,483,7238,485,7238,487,7238,489,7238,491,7238,493,7238,495,7238,497,7238,499,7238,503,7238,505,7238,507,7238,509,7238,511,7238,513,7239,27,7239,29,7239,31,7239,33,7239,35,7239,37,7239,39,7239,41,7239,43,7239,45,7239,47,7239,48,7239,49,7239,50,7239,51,7239,53,7239,57,7239,61,7239,63,7239,65,7239,67,7239,69,7239,71,7239,73,7239,75,7239,81,7239,83,7239,85,7239,87,7239,89,7239,91,7239,93,7239,95,7239,97,7239,99,7239,101,7239,107,7239,109,7239,111,7239,113,7239,115,7239,117,7239,119,7239,121,7239,123,7239,125,7239,127,7239,129,7239,131,7239,133,7239,135,7239,137,7239,139,7239,143,7239,147,7239,149,7239,151,7239,153,7239,157,7239,159,7239,162,7239,164,7239,166,7239,168,7239,170,7239,172,7239,174,7239,176,7239,178,7239,180,7239,182,7239,184,7239,186,7239,188,7239,190,7239,192,7239,194,7239,196,7239,198,7239,200,7239,206,7239,208,7239,210,7239,212,7239,214,7239,216,7239,218,7239,220,7239,222,7239,224,7239,226,7239,228,7239,230,7239,232,7239,234,7239,236,7239,240,7239,242,7239,244,7239,246,7239,248,7239,250,7239,252,7239,254,7239,258,7239,262,7239,264,7239,266,7239,268,7239,270,7239,272,7239,274,7239,276,7239,278,7239,280,7239,282,7239,284,7239,286,7239,290,7239,292,7239,296,7239,298,7239,300,7239,302,7239,304,7239,310,7239,312,7239,314,7239,316,7239,318,7239,320,7239,322,7239,324,7239,328,7239,336,7239,338,7239,340,7239,346,7239,350,7239,352,7239,356,7239,358,7239,362,7239,364,7239,366,7239,368,7239,372,7239,374,7239,376,7239,378,7239,382,7239,384,7239,386,7239,388,7239,392,7239,396,7239,398,7239,400,7239,402,7239,410,7239,412,7239,414,7239,418,7239,420,7239,422,7239,426,7239,428,7239,430,7239,432,7239,434,7239,438,7239,440,7239,441,7239,442,7239,443,7239,445,7239,447,7239,449,7239,451,7239,453,7239,454,7239,456,7239,457,7239,459,7239,461,7239,467,7239,469,7239,471,7239,473,7239,475,7239,477,7239,479,7239,481,7239,483,7239,485,7239,487,7239,489,7239,491,7239,493,7239,495,7239,497,7239,499,7239,503,7239,505,7239,507,7239,509,7239,511,7239,513,7240,27,7240,29,7240,31,7240,33,7240,35,7240,37,7240,39,7240,41,7240,43,7240,45,7240,47,7240,48,7240,49,7240,50,7240,51,7240,53,7240,57,7240,61,7240,63,7240,65,7240,67,7240,69,7240,71,7240,73,7240,75,7240,81,7240,83,7240,85,7240,87,7240,89,7240,91,7240,93,7240,95,7240,97,7240,99,7240,101,7240,107,7240,109,7240,111,7240,113,7240,115,7240,117,7240,119,7240,121,7240,123,7240,125,7240,127,7240,129,7240,131,7240,133,7240,135,7240,137,7240,139,7240,143,7240,147,7240,149,7240,151,7240,153,7240,157,7240,159,7240,162,7240,164,7240,166,7240,168,7240,170,7240,172,7240,174,7240,176,7240,178,7240,180,7240,182,7240,184,7240,186,7240,188,7240,190,7240,192,7240,194,7240,196,7240,198,7240,200,7240,206,7240,208,7240,210,7240,212,7240,214,7240,216,7240,218,7240,220,7240,222,7240,224,7240,226,7240,228,7240,230,7240,232,7240,234,7240,236,7240,240,7240,242,7240,244,7240,246,7240,248,7240,250,7240,252,7240,254,7240,258,7240,262,7240,264,7240,266,7240,268,7240,270,7240,272,7240,274,7240,276,7240,278,7240,280,7240,282,7240,284,7240,286,7240,290,7240,292,7240,296,7240,298,7240,300,7240,302,7240,304,7240,310,7240,312,7240,314,7240,316,7240,318,7240,320,7240,322,7240,324,7240,328,7240,336,7240,338,7240,340,7240,346,7240,350,7240,352,7240,356,7240,358,7240,362,7240,364,7240,366,7240,368,7240,372,7240,374,7240,376,7240,378,7240,382,7240,384,7240,386,7240,388,7240,392,7240,396,7240,398,7240,400,7240,402,7240,410,7240,412,7240,414,7240,418,7240,420,7240,422,7240,426,7240,428,7240,430,7240,432,7240,434,7240,438,7240,440,7240,441,7240,442,7240,443,7240,445,7240,447,7240,449,7240,451,7240,453,7240,454,7240,456,7240,457,7240,459,7240,461,7240,467,7240,469,7240,471,7240,473,7240,475,7240,477,7240,479,7240,481,7240,483,7240,485,7240,487,7240,489,7240,491,7240,493,7240,495,7240,497,7240,499,7240,503,7240,505,7240,507,7240,509,7240,511,7240,513,7241,27,7241,29,7241,31,7241,33,7241,35,7241,37,7241,39,7241,41,7241,43,7241,45,7241,47,7241,48,7241,49,7241,50,7241,51,7241,53,7241,57,7241,61,7241,63,7241,65,7241,67,7241,69,7241,71,7241,73,7241,75,7241,81,7241,83,7241,85,7241,87,7241,89,7241,91,7241,93,7241,95,7241,97,7241,99,7241,101,7241,107,7241,109,7241,111,7241,113,7241,115,7241,117,7241,119,7241,121,7241,123,7241,125,7241,127,7241,129,7241,131,7241,133,7241,135,7241,137,7241,139,7241,143,7241,147,7241,149,7241,151,7241,153,7241,157,7241,159,7241,162,7241,164,7241,166,7241,168,7241,170,7241,172,7241,174,7241,176,7241,178,7241,180,7241,182,7241,184,7241,186,7241,188,7241,190,7241,192,7241,194,7241,196,7241,198,7241,200,7241,206,7241,208,7241,210,7241,212,7241,214,7241,216,7241,218,7241,220,7241,222,7241,224,7241,226,7241,228,7241,230,7241,232,7241,234,7241,236,7241,240,7241,242,7241,244,7241,246,7241,248,7241,250,7241,252,7241,254,7241,258,7241,262,7241,264,7241,266,7241,268,7241,270,7241,272,7241,274,7241,276,7241,278,7241,280,7241,282,7241,284,7241,286,7241,290,7241,292,7241,296,7241,298,7241,300,7241,302,7241,304,7241,310,7241,312,7241,314,7241,316,7241,318,7241,320,7241,322,7241,324,7241,328,7241,336,7241,338,7241,340,7241,346,7241,350,7241,352,7241,356,7241,358,7241,362,7241,364,7241,366,7241,368,7241,372,7241,374,7241,376,7241,378,7241,382,7241,384,7241,386,7241,388,7241,392,7241,396,7241,398,7241,400,7241,402,7241,410,7241,412,7241,414,7241,418,7241,420,7241,422,7241,426,7241,428,7241,430,7241,432,7241,434,7241,438,7241,440,7241,441,7241,442,7241,443,7241,445,7241,447,7241,449,7241,451,7241,453,7241,454,7241,456,7241,457,7241,459,7241,461,7241,467,7241,469,7241,471,7241,473,7241,475,7241,477,7241,479,7241,481,7241,483,7241,485,7241,487,7241,489,7241,491,7241,493,7241,495,7241,497,7241,499,7241,503,7241,505,7241,507,7241,509,7241,511,7241,513,7242,25,7242,27,7242,29,7242,31,7242,33,7242,35,7242,37,7242,39,7242,41,7242,43,7242,45,7242,47,7242,48,7242,49,7242,50,7242,51,7242,53,7242,55,7242,57,7242,59,7242,61,7242,63,7242,65,7242,67,7242,69,7242,71,7242,73,7242,75,7242,77,7242,79,7242,81,7242,83,7242,85,7242,87,7242,89,7242,91,7242,93,7242,95,7242,97,7242,99,7242,101,7242,103,7242,105,7242,107,7242,109,7242,111,7242,113,7242,115,7242,117,7242,119,7242,121,7242,123,7242,125,7242,127,7242,129,7242,131,7242,133,7242,135,7242,137,7242,139,7242,141,7242,143,7242,145,7242,147,7242,149,7242,151,7242,153,7242,155,7242,157,7242,159,7242,160,7242,162,7242,164,7242,166,7242,168,7242,170,7242,172,7242,174,7242,176,7242,178,7242,180,7242,182,7242,184,7242,186,7242,188,7242,190,7242,192,7242,194,7242,196,7242,198,7242,200,7242,202,7242,204,7242,206,7242,208,7242,210,7242,212,7242,214,7242,216,7242,218,7242,220,7242,222,7242,224,7242,226,7242,228,7242,230,7242,232,7242,234,7242,236,7242,238,7242,240,7242,242,7242,244,7242,246,7242,248,7242,250,7242,252,7242,254,7242,256,7242,258,7242,260,7242,262,7242,264,7242,266,7242,268,7242,270,7242,272,7242,274,7242,276,7242,278,7242,280,7242,282,7242,284,7242,286,7242,288,7242,290,7242,292,7242,294,7242,296,7242,298,7242,300,7242,302,7242,304,7242,306,7242,308,7242,310,7242,312,7242,314,7242,316,7242,318,7242,320,7242,322,7242,324,7242,326,7242,328,7242,330,7242,332,7242,334,7242,336,7242,338,7242,340,7242,342,7242,344,7242,346,7242,348,7242,350,7242,352,7242,354,7242,356,7242,358,7242,360,7242,362,7242,364,7242,366,7242,368,7242,370,7242,372,7242,374,7242,376,7242,378,7242,380,7242,382,7242,384,7242,386,7242,388,7242,390,7242,392,7242,394,7242,396,7242,398,7242,400,7242,402,7242,404,7242,406,7242,408,7242,410,7242,412,7242,414,7242,416,7242,418,7242,420,7242,422,7242,424,7242,426,7242,428,7242,430,7242,432,7242,434,7242,436,7242,438,7242,440,7242,441,7242,442,7242,443,7242,444,7242,445,7242,447,7242,449,7242,451,7242,453,7242,454,7242,456,7242,457,7242,459,7242,461,7242,463,7242,465,7242,467,7242,469,7242,471,7242,473,7242,475,7242,477,7242,479,7242,481,7242,483,7242,485,7242,487,7242,489,7242,491,7242,493,7242,495,7242,497,7242,499,7242,501,7242,503,7242,505,7242,507,7242,509,7242,511,7242,513,7517,25,7517,27,7517,29,7517,31,7517,33,7517,35,7517,37,7517,39,7517,41,7517,43,7517,45,7517,47,7517,48,7517,49,7517,50,7517,51,7517,53,7517,55,7517,57,7517,59,7517,61,7517,63,7517,65,7517,67,7517,69,7517,71,7517,73,7517,75,7517,77,7517,79,7517,81,7517,83,7517,85,7517,87,7517,89,7517,91,7517,93,7517,95,7517,97,7517,99,7517,101,7517,103,7517,105,7517,107,7517,109,7517,111,7517,113,7517,115,7517,117,7517,119,7517,121,7517,123,7517,125,7517,127,7517,129,7517,131,7517,133,7517,135,7517,137,7517,139,7517,141,7517,143,7517,145,7517,147,7517,149,7517,151,7517,153,7517,155,7517,157,7517,159,7517,160,7517,162,7517,164,7517,166,7517,168,7517,170,7517,172,7517,174,7517,176,7517,178,7517,180,7517,182,7517,184,7517,186,7517,188,7517,190,7517,192,7517,194,7517,196,7517,198,7517,200,7517,202,7517,204,7517,206,7517,208,7517,210,7517,212,7517,214,7517,216,7517,218,7517,220,7517,222,7517,224,7517,226,7517,228,7517,230,7517,232,7517,234,7517,236,7517,238,7517,240,7517,242,7517,244,7517,246,7517,248,7517,250,7517,252,7517,254,7517,256,7517,258,7517,260,7517,262,7517,264,7517,266,7517,268,7517,270,7517,272,7517,274,7517,276,7517,278,7517,280,7517,282,7517,284,7517,286,7517,288,7517,290,7517,292,7517,294,7517,296,7517,298,7517,300,7517,302,7517,304,7517,306,7517,308,7517,310,7517,312,7517,314,7517,316,7517,318,7517,320,7517,322,7517,324,7517,326,7517,328,7517,330,7517,332,7517,334,7517,336,7517,338,7517,340,7517,342,7517,344,7517,346,7517,348,7517,350,7517,352,7517,354,7517,356,7517,358,7517,360,7517,362,7517,364,7517,366,7517,368,7517,370,7517,372,7517,374,7517,376,7517,378,7517,380,7517,382,7517,384,7517,386,7517,388,7517,390,7517,392,7517,394,7517,396,7517,398,7517,400,7517,402,7517,404,7517,406,7517,408,7517,410,7517,412,7517,414,7517,416,7517,418,7517,420,7517,422,7517,424,7517,426,7517,428,7517,430,7517,432,7517,434,7517,436,7517,438,7517,440,7517,441,7517,442,7517,443,7517,444,7517,445,7517,447,7517,449,7517,451,7517,453,7517,454,7517,456,7517,457,7517,459,7517,461,7517,463,7517,465,7517,467,7517,469,7517,471,7517,473,7517,475,7517,477,7517,479,7517,481,7517,483,7517,485,7517,487,7517,489,7517,491,7517,493,7517,495,7517,497,7517,499,7517,501,7517,503,7517,505,7517,507,7517,509,7517,511,7517,513,7623,25,7623,55,7623,59,7623,77,7623,79,7623,103,7623,105,7623,141,7623,145,7623,155,7623,160,7623,202,7623,204,7623,238,7623,256,7623,260,7623,288,7623,294,7623,306,7623,308,7623,326,7623,330,7623,332,7623,334,7623,342,7623,344,7623,348,7623,354,7623,360,7623,370,7623,380,7623,390,7623,394,7623,404,7623,406,7623,408,7623,416,7623,424,7623,436,7623,463,7623,465,7623,501,7623,521,7624,25,7624,55,7624,59,7624,77,7624,79,7624,103,7624,105,7624,141,7624,145,7624,155,7624,160,7624,202,7624,204,7624,238,7624,256,7624,260,7624,288,7624,294,7624,306,7624,308,7624,326,7624,330,7624,332,7624,334,7624,342,7624,344,7624,348,7624,354,7624,360,7624,370,7624,380,7624,390,7624,394,7624,404,7624,406,7624,408,7624,416,7624,424,7624,436,7624,463,7624,465,7624,501,7624,521,7629,25,7629,55,7629,59,7629,77,7629,79,7629,103,7629,105,7629,141,7629,145,7629,155,7629,160,7629,202,7629,204,7629,238,7629,256,7629,260,7629,288,7629,294,7629,306,7629,308,7629,326,7629,330,7629,332,7629,334,7629,342,7629,344,7629,348,7629,354,7629,360,7629,370,7629,380,7629,390,7629,394,7629,404,7629,406,7629,408,7629,416,7629,424,7629,436,7629,463,7629,465,7629,501,7629,521,7630,25,7630,55,7630,59,7630,77,7630,79,7630,103,7630,105,7630,141,7630,145,7630,155,7630,160,7630,202,7630,204,7630,238,7630,256,7630,260,7630,288,7630,294,7630,306,7630,308,7630,326,7630,330,7630,332,7630,334,7630,342,7630,344,7630,348,7630,354,7630,360,7630,370,7630,380,7630,390,7630,394,7630,404,7630,406,7630,408,7630,416,7630,424,7630,436,7630,463,7630,465,7630,501,7630,521,7631,25,7631,55,7631,59,7631,77,7631,79,7631,103,7631,105,7631,141,7631,145,7631,155,7631,160,7631,202,7631,204,7631,238,7631,256,7631,260,7631,288,7631,294,7631,306,7631,308,7631,326,7631,330,7631,332,7631,334,7631,342,7631,344,7631,348,7631,354,7631,360,7631,370,7631,380,7631,390,7631,394,7631,404,7631,406,7631,408,7631,416,7631,424,7631,436,7631,463,7631,465,7631,501,7631,521,7632,25,7632,55,7632,59,7632,77,7632,79,7632,103,7632,105,7632,141,7632,145,7632,155,7632,160,7632,202,7632,204,7632,238,7632,256,7632,260,7632,288,7632,294,7632,306,7632,308,7632,326,7632,330,7632,332,7632,334,7632,342,7632,344,7632,348,7632,354,7632,360,7632,370,7632,380,7632,390,7632,394,7632,404,7632,406,7632,408,7632,416,7632,424,7632,436,7632,463,7632,465,7632,501,7632,521,7633,25,7633,55,7633,59,7633,77,7633,79,7633,103,7633,105,7633,141,7633,145,7633,155,7633,160,7633,202,7633,204,7633,238,7633,256,7633,260,7633,288,7633,294,7633,306,7633,308,7633,326,7633,330,7633,332,7633,334,7633,342,7633,344,7633,348,7633,354,7633,360,7633,370,7633,380,7633,390,7633,394,7633,404,7633,406,7633,408,7633,416,7633,424,7633,436,7633,463,7633,465,7633,501,7633,521,7634,25,7634,55,7634,59,7634,77,7634,79,7634,103,7634,105,7634,141,7634,145,7634,155,7634,160,7634,202,7634,204,7634,238,7634,256,7634,260,7634,288,7634,294,7634,306,7634,308,7634,326,7634,330,7634,332,7634,334,7634,342,7634,344,7634,348,7634,354,7634,360,7634,370,7634,380,7634,390,7634,394,7634,404,7634,406,7634,408,7634,416,7634,424,7634,436,7634,463,7634,465,7634,501,7634,521,7635,521,7636,25,7636,55,7636,59,7636,77,7636,79,7636,103,7636,105,7636,141,7636,145,7636,155,7636,160,7636,202,7636,204,7636,238,7636,256,7636,260,7636,288,7636,294,7636,306,7636,308,7636,326,7636,330,7636,332,7636,334,7636,342,7636,344,7636,348,7636,354,7636,360,7636,370,7636,380,7636,390,7636,394,7636,404,7636,406,7636,408,7636,416,7636,424,7636,436,7636,463,7636,465,7636,501,7636,521,7637,25,7637,55,7637,59,7637,77,7637,79,7637,103,7637,105,7637,141,7637,145,7637,155,7637,160,7637,202,7637,204,7637,238,7637,256,7637,260,7637,288,7637,294,7637,306,7637,308,7637,326,7637,330,7637,332,7637,334,7637,342,7637,344,7637,348,7637,354,7637,360,7637,370,7637,380,7637,390,7637,394,7637,404,7637,406,7637,408,7637,416,7637,424,7637,436,7637,463,7637,465,7637,501,7637,521,7638,25,7638,55,7638,59,7638,77,7638,79,7638,103,7638,105,7638,141,7638,145,7638,155,7638,160,7638,202,7638,204,7638,238,7638,256,7638,260,7638,288,7638,294,7638,306,7638,308,7638,326,7638,330,7638,332,7638,334,7638,342,7638,344,7638,348,7638,354,7638,360,7638,370,7638,380,7638,390,7638,394,7638,404,7638,406,7638,408,7638,416,7638,424,7638,436,7638,463,7638,465,7638,501,7638,521,7639,25,7639,55,7639,59,7639,77,7639,79,7639,103,7639,105,7639,141,7639,145,7639,155,7639,160,7639,202,7639,204,7639,238,7639,256,7639,260,7639,288,7639,294,7639,306,7639,308,7639,326,7639,330,7639,332,7639,334,7639,342,7639,344,7639,348,7639,354,7639,360,7639,370,7639,380,7639,390,7639,394,7639,404,7639,406,7639,408,7639,416,7639,424,7639,436,7639,463,7639,465,7639,501,7639,521,7640,25,7640,55,7640,59,7640,77,7640,79,7640,103,7640,105,7640,141,7640,145,7640,155,7640,160,7640,202,7640,204,7640,238,7640,256,7640,260,7640,288,7640,294,7640,306,7640,308,7640,326,7640,330,7640,332,7640,334,7640,342,7640,344,7640,348,7640,354,7640,360,7640,370,7640,380,7640,390,7640,394,7640,404,7640,406,7640,408,7640,416,7640,424,7640,436,7640,463,7640,465,7640,501,7640,521,7641,25,7641,55,7641,59,7641,77,7641,79,7641,103,7641,105,7641,141,7641,145,7641,155,7641,160,7641,202,7641,204,7641,238,7641,256,7641,260,7641,288,7641,294,7641,306,7641,308,7641,326,7641,330,7641,332,7641,334,7641,342,7641,344,7641,348,7641,354,7641,360,7641,370,7641,380,7641,390,7641,394,7641,404,7641,406,7641,408,7641,416,7641,424,7641,436,7641,463,7641,465,7641,501,7641,521,7644,515,7644,519,7644,524,7644,530,7645,515,7645,519,7645,524,7645,530,7646,515,7646,519,7646,524,7646,530,7647,515,7647,519,7647,524,7647,530,7648,515,7648,519,7648,524,7648,530,7649,515,7649,519,7649,524,7649,530,7650,515,7650,519,7650,524,7650,530,7651,515,7651,519,7651,524,7651,530,7654,18,7654,19,7654,22,7654,23,7654,24,7654,25,7654,27,7654,29,7654,31,7654,33,7654,35,7654,37,7654,39,7654,41,7654,43,7654,45,7654,47,7654,48,7654,49,7654,50,7654,51,7654,53,7654,55,7654,57,7654,59,7654,61,7654,63,7654,65,7654,67,7654,69,7654,71,7654,73,7654,75,7654,77,7654,79,7654,81,7654,83,7654,85,7654,87,7654,89,7654,91,7654,93,7654,95,7654,97,7654,99,7654,101,7654,103,7654,105,7654,107,7654,109,7654,111,7654,113,7654,115,7654,117,7654,119,7654,121,7654,123,7654,125,7654,127,7654,129,7654,131,7654,133,7654,135,7654,137,7654,139,7654,141,7654,143,7654,145,7654,147,7654,149,7654,151,7654,153,7654,155,7654,157,7654,159,7654,160,7654,162,7654,164,7654,166,7654,168,7654,170,7654,172,7654,174,7654,176,7654,178,7654,180,7654,182,7654,184,7654,186,7654,188,7654,190,7654,192,7654,194,7654,196,7654,198,7654,200,7654,202,7654,204,7654,206,7654,208,7654,210,7654,212,7654,214,7654,216,7654,218,7654,220,7654,222,7654,224,7654,226,7654,228,7654,230,7654,232,7654,234,7654,236,7654,238,7654,240,7654,242,7654,244,7654,246,7654,248,7654,250,7654,252,7654,254,7654,256,7654,258,7654,260,7654,262,7654,264,7654,266,7654,268,7654,270,7654,272,7654,274,7654,276,7654,278,7654,280,7654,282,7654,284,7654,286,7654,288,7654,290,7654,292,7654,294,7654,296,7654,298,7654,300,7654,302,7654,304,7654,306,7654,308,7654,310,7654,312,7654,314,7654,316,7654,318,7654,320,7654,322,7654,324,7654,326,7654,328,7654,330,7654,332,7654,334,7654,336,7654,338,7654,340,7654,342,7654,344,7654,346,7654,348,7654,350,7654,352,7654,354,7654,356,7654,358,7654,360,7654,362,7654,364,7654,366,7654,368,7654,370,7654,372,7654,374,7654,376,7654,378,7654,380,7654,382,7654,384,7654,386,7654,388,7654,390,7654,392,7654,394,7654,396,7654,398,7654,400,7654,402,7654,404,7654,406,7654,408,7654,410,7654,412,7654,414,7654,416,7654,418,7654,420,7654,422,7654,424,7654,426,7654,428,7654,430,7654,432,7654,434,7654,436,7654,438,7654,440,7654,441,7654,442,7654,443,7654,444,7654,445,7654,447,7654,449,7654,451,7654,453,7654,454,7654,456,7654,457,7654,459,7654,461,7654,463,7654,465,7654,467,7654,469,7654,471,7654,473,7654,475,7654,477,7654,479,7654,481,7654,483,7654,485,7654,487,7654,489,7654,491,7654,493,7654,495,7654,497,7654,499,7654,501,7654,503,7654,505,7654,507,7654,509,7654,511,7654,513,7654,514,7654,515,7654,518,7654,519,7654,522,7654,523,7654,524,7654,527,7654,528,7654,530,7654,534,7657,25,7657,55,7657,59,7657,77,7657,79,7657,103,7657,105,7657,141,7657,145,7657,155,7657,160,7657,202,7657,204,7657,238,7657,256,7657,260,7657,288,7657,294,7657,306,7657,308,7657,326,7657,330,7657,332,7657,334,7657,342,7657,344,7657,348,7657,354,7657,360,7657,370,7657,380,7657,390,7657,394,7657,404,7657,406,7657,408,7657,416,7657,424,7657,436,7657,463,7657,465,7657,501,7657,516,7657,521,7657,525,7657,531,7657,534,7658,25,7658,55,7658,59,7658,77,7658,79,7658,103,7658,105,7658,141,7658,145,7658,155,7658,160,7658,202,7658,204,7658,238,7658,256,7658,260,7658,288,7658,294,7658,306,7658,308,7658,326,7658,330,7658,332,7658,334,7658,342,7658,344,7658,348,7658,354,7658,360,7658,370,7658,380,7658,390,7658,394,7658,404,7658,406,7658,408,7658,416,7658,424,7658,436,7658,463,7658,465,7658,501,7658,516,7658,521,7658,525,7658,531,7658,534,7659,25,7659,55,7659,59,7659,77,7659,79,7659,103,7659,105,7659,141,7659,145,7659,155,7659,160,7659,202,7659,204,7659,238,7659,256,7659,260,7659,288,7659,294,7659,306,7659,308,7659,326,7659,330,7659,332,7659,334,7659,342,7659,344,7659,348,7659,354,7659,360,7659,370,7659,380,7659,390,7659,394,7659,404,7659,406,7659,408,7659,416,7659,424,7659,436,7659,463,7659,465,7659,501,7659,516,7659,521,7659,525,7659,531,7659,534,7664,25,7664,55,7664,59,7664,77,7664,79,7664,103,7664,105,7664,141,7664,145,7664,155,7664,160,7664,202,7664,204,7664,238,7664,256,7664,260,7664,288,7664,294,7664,306,7664,308,7664,326,7664,330,7664,332,7664,334,7664,342,7664,344,7664,348,7664,354,7664,360,7664,370,7664,380,7664,390,7664,394,7664,404,7664,406,7664,408,7664,416,7664,424,7664,436,7664,463,7664,465,7664,501,7664,516,7664,521,7664,525,7664,531,7664,534,7665,25,7665,55,7665,59,7665,77,7665,79,7665,103,7665,105,7665,141,7665,145,7665,155,7665,160,7665,202,7665,204,7665,238,7665,256,7665,260,7665,288,7665,294,7665,306,7665,308,7665,326,7665,330,7665,332,7665,334,7665,342,7665,344,7665,348,7665,354,7665,360,7665,370,7665,380,7665,390,7665,394,7665,404,7665,406,7665,408,7665,416,7665,424,7665,436,7665,463,7665,465,7665,501,7665,516,7665,521,7665,525,7665,531,7665,534,7666,25,7666,55,7666,59,7666,77,7666,79,7666,103,7666,105,7666,141,7666,145,7666,155,7666,160,7666,202,7666,204,7666,238,7666,256,7666,260,7666,288,7666,294,7666,306,7666,308,7666,326,7666,330,7666,332,7666,334,7666,342,7666,344,7666,348,7666,354,7666,360,7666,370,7666,380,7666,390,7666,394,7666,404,7666,406,7666,408,7666,416,7666,424,7666,436,7666,463,7666,465,7666,501,7666,516,7666,521,7666,525,7666,531,7666,534,7667,25,7667,55,7667,59,7667,77,7667,79,7667,103,7667,105,7667,141,7667,145,7667,155,7667,160,7667,202,7667,204,7667,238,7667,256,7667,260,7667,288,7667,294,7667,306,7667,308,7667,326,7667,330,7667,332,7667,334,7667,342,7667,344,7667,348,7667,354,7667,360,7667,370,7667,380,7667,390,7667,394,7667,404,7667,406,7667,408,7667,416,7667,424,7667,436,7667,463,7667,465,7667,501,7667,516,7667,521,7667,525,7667,531,7667,534,7668,25,7668,55,7668,59,7668,77,7668,79,7668,103,7668,105,7668,141,7668,145,7668,155,7668,160,7668,202,7668,204,7668,238,7668,256,7668,260,7668,288,7668,294,7668,306,7668,308,7668,326,7668,330,7668,332,7668,334,7668,342,7668,344,7668,348,7668,354,7668,360,7668,370,7668,380,7668,390,7668,394,7668,404,7668,406,7668,408,7668,416,7668,424,7668,436,7668,463,7668,465,7668,501,7668,516,7668,521,7668,525,7668,531,7668,534,7669,25,7669,55,7669,59,7669,77,7669,79,7669,103,7669,105,7669,141,7669,145,7669,155,7669,160,7669,202,7669,204,7669,238,7669,256,7669,260,7669,288,7669,294,7669,306,7669,308,7669,326,7669,330,7669,332,7669,334,7669,342,7669,344,7669,348,7669,354,7669,360,7669,370,7669,380,7669,390,7669,394,7669,404,7669,406,7669,408,7669,416,7669,424,7669,436,7669,463,7669,465,7669,501,7669,516,7669,521,7669,525,7669,531,7669,534,7670,25,7670,55,7670,59,7670,77,7670,79,7670,103,7670,105,7670,141,7670,145,7670,155,7670,160,7670,202,7670,204,7670,238,7670,256,7670,260,7670,288,7670,294,7670,306,7670,308,7670,326,7670,330,7670,332,7670,334,7670,342,7670,344,7670,348,7670,354,7670,360,7670,370,7670,380,7670,390,7670,394,7670,404,7670,406,7670,408,7670,416,7670,424,7670,436,7670,463,7670,465,7670,501,7670,516,7670,521,7670,525,7670,531,7670,534,7671,25,7671,55,7671,59,7671,77,7671,79,7671,103,7671,105,7671,141,7671,145,7671,155,7671,160,7671,202,7671,204,7671,238,7671,256,7671,260,7671,288,7671,294,7671,306,7671,308,7671,326,7671,330,7671,332,7671,334,7671,342,7671,344,7671,348,7671,354,7671,360,7671,370,7671,380,7671,390,7671,394,7671,404,7671,406,7671,408,7671,416,7671,424,7671,436,7671,463,7671,465,7671,501,7671,516,7671,521,7671,525,7671,531,7671,534,7672,25,7672,55,7672,59,7672,77,7672,79,7672,103,7672,105,7672,141,7672,145,7672,155,7672,160,7672,202,7672,204,7672,238,7672,256,7672,260,7672,288,7672,294,7672,306,7672,308,7672,326,7672,330,7672,332,7672,334,7672,342,7672,344,7672,348,7672,354,7672,360,7672,370,7672,380,7672,390,7672,394,7672,404,7672,406,7672,408,7672,416,7672,424,7672,436,7672,463,7672,465,7672,501,7672,516,7672,521,7672,525,7672,531,7672,534,7673,25,7673,55,7673,59,7673,77,7673,79,7673,103,7673,105,7673,141,7673,145,7673,155,7673,160,7673,202,7673,204,7673,238,7673,256,7673,260,7673,288,7673,294,7673,306,7673,308,7673,326,7673,330,7673,332,7673,334,7673,342,7673,344,7673,348,7673,354,7673,360,7673,370,7673,380,7673,390,7673,394,7673,404,7673,406,7673,408,7673,416,7673,424,7673,436,7673,463,7673,465,7673,501,7673,516,7673,521,7673,525,7673,531,7673,534,7674,516,7674,525,7674,531,7675,25,7675,55,7675,59,7675,77,7675,79,7675,103,7675,105,7675,141,7675,145,7675,155,7675,160,7675,202,7675,204,7675,238,7675,256,7675,260,7675,288,7675,294,7675,306,7675,308,7675,326,7675,330,7675,332,7675,334,7675,342,7675,344,7675,348,7675,354,7675,360,7675,370,7675,380,7675,390,7675,394,7675,404,7675,406,7675,408,7675,416,7675,424,7675,436,7675,463,7675,465,7675,501,7675,516,7675,521,7675,525,7675,531,7675,534,7676,25,7676,55,7676,59,7676,77,7676,79,7676,103,7676,105,7676,141,7676,145,7676,155,7676,160,7676,202,7676,204,7676,238,7676,256,7676,260,7676,288,7676,294,7676,306,7676,308,7676,326,7676,330,7676,332,7676,334,7676,342,7676,344,7676,348,7676,354,7676,360,7676,370,7676,380,7676,390,7676,394,7676,404,7676,406,7676,408,7676,416,7676,424,7676,436,7676,463,7676,465,7676,501,7676,516,7676,521,7676,525,7676,531,7676,534,7677,516,7677,525,7677,531,7678,25,7678,55,7678,59,7678,77,7678,79,7678,103,7678,105,7678,141,7678,145,7678,155,7678,160,7678,202,7678,204,7678,238,7678,256,7678,260,7678,288,7678,294,7678,306,7678,308,7678,326,7678,330,7678,332,7678,334,7678,342,7678,344,7678,348,7678,354,7678,360,7678,370,7678,380,7678,390,7678,394,7678,404,7678,406,7678,408,7678,416,7678,424,7678,436,7678,463,7678,465,7678,501,7678,516,7678,521,7678,525,7678,531,7678,534,7679,516,7679,525,7679,531,7680,516,7680,525,7680,531,7681,25,7681,55,7681,59,7681,77,7681,79,7681,103,7681,105,7681,141,7681,145,7681,155,7681,160,7681,202,7681,204,7681,238,7681,256,7681,260,7681,288,7681,294,7681,306,7681,308,7681,326,7681,330,7681,332,7681,334,7681,342,7681,344,7681,348,7681,354,7681,360,7681,370,7681,380,7681,390,7681,394,7681,404,7681,406,7681,408,7681,416,7681,424,7681,436,7681,463,7681,465,7681,501,7681,516,7681,521,7681,525,7681,531,7681,534,7682,25,7682,55,7682,59,7682,77,7682,79,7682,103,7682,105,7682,141,7682,145,7682,155,7682,160,7682,202,7682,204,7682,238,7682,256,7682,260,7682,288,7682,294,7682,306,7682,308,7682,326,7682,330,7682,332,7682,334,7682,342,7682,344,7682,348,7682,354,7682,360,7682,370,7682,380,7682,390,7682,394,7682,404,7682,406,7682,408,7682,416,7682,424,7682,436,7682,463,7682,465,7682,501,7682,516,7682,521,7682,525,7682,531,7682,534,7683,25,7683,55,7683,59,7683,77,7683,79,7683,103,7683,105,7683,141,7683,145,7683,155,7683,160,7683,202,7683,204,7683,238,7683,256,7683,260,7683,288,7683,294,7683,306,7683,308,7683,326,7683,330,7683,332,7683,334,7683,342,7683,344,7683,348,7683,354,7683,360,7683,370,7683,380,7683,390,7683,394,7683,404,7683,406,7683,408,7683,416,7683,424,7683,436,7683,463,7683,465,7683,501,7683,516,7683,521,7683,525,7683,531,7683,534,7684,25,7684,55,7684,59,7684,77,7684,79,7684,103,7684,105,7684,141,7684,145,7684,155,7684,160,7684,202,7684,204,7684,238,7684,256,7684,260,7684,288,7684,294,7684,306,7684,308,7684,326,7684,330,7684,332,7684,334,7684,342,7684,344,7684,348,7684,354,7684,360,7684,370,7684,380,7684,390,7684,394,7684,404,7684,406,7684,408,7684,416,7684,424,7684,436,7684,463,7684,465,7684,501,7684,516,7684,521,7684,525,7684,531,7684,534,7685,516,7685,525,7685,531,7686,25,7686,55,7686,59,7686,77,7686,79,7686,103,7686,105,7686,141,7686,145,7686,155,7686,160,7686,202,7686,204,7686,238,7686,256,7686,260,7686,288,7686,294,7686,306,7686,308,7686,326,7686,330,7686,332,7686,334,7686,342,7686,344,7686,348,7686,354,7686,360,7686,370,7686,380,7686,390,7686,394,7686,404,7686,406,7686,408,7686,416,7686,424,7686,436,7686,463,7686,465,7686,501,7686,516,7686,521,7686,525,7686,531,7686,534,7687,25,7687,55,7687,59,7687,77,7687,79,7687,103,7687,105,7687,141,7687,145,7687,155,7687,160,7687,202,7687,204,7687,238,7687,256,7687,260,7687,288,7687,294,7687,306,7687,308,7687,326,7687,330,7687,332,7687,334,7687,342,7687,344,7687,348,7687,354,7687,360,7687,370,7687,380,7687,390,7687,394,7687,404,7687,406,7687,408,7687,416,7687,424,7687,436,7687,463,7687,465,7687,501,7687,516,7687,521,7687,525,7687,531,7687,534,7688,25,7688,55,7688,59,7688,77,7688,79,7688,103,7688,105,7688,141,7688,145,7688,155,7688,160,7688,202,7688,204,7688,238,7688,256,7688,260,7688,288,7688,294,7688,306,7688,308,7688,326,7688,330,7688,332,7688,334,7688,342,7688,344,7688,348,7688,354,7688,360,7688,370,7688,380,7688,390,7688,394,7688,404,7688,406,7688,408,7688,416,7688,424,7688,436,7688,463,7688,465,7688,501,7688,516,7688,521,7688,525,7688,531,7688,534,7689,25,7689,55,7689,59,7689,77,7689,79,7689,103,7689,105,7689,141,7689,145,7689,155,7689,160,7689,202,7689,204,7689,238,7689,256,7689,260,7689,288,7689,294,7689,306,7689,308,7689,326,7689,330,7689,332,7689,334,7689,342,7689,344,7689,348,7689,354,7689,360,7689,370,7689,380,7689,390,7689,394,7689,404,7689,406,7689,408,7689,416,7689,424,7689,436,7689,463,7689,465,7689,501,7689,516,7689,521,7689,525,7689,531,7689,534,7690,516,7690,525,7690,531,7691,516,7691,534,7692,25,7692,55,7692,59,7692,77,7692,79,7692,103,7692,105,7692,141,7692,145,7692,155,7692,160,7692,202,7692,204,7692,238,7692,256,7692,260,7692,288,7692,294,7692,306,7692,308,7692,326,7692,330,7692,332,7692,334,7692,342,7692,344,7692,348,7692,354,7692,360,7692,370,7692,380,7692,390,7692,394,7692,404,7692,406,7692,408,7692,416,7692,424,7692,436,7692,463,7692,465,7692,501,7692,516,7692,521,7692,525,7692,531,7692,534,7693,25,7693,55,7693,59,7693,77,7693,79,7693,103,7693,105,7693,141,7693,145,7693,155,7693,160,7693,202,7693,204,7693,238,7693,256,7693,260,7693,288,7693,294,7693,306,7693,308,7693,326,7693,330,7693,332,7693,334,7693,342,7693,344,7693,348,7693,354,7693,360,7693,370,7693,380,7693,390,7693,394,7693,404,7693,406,7693,408,7693,416,7693,424,7693,436,7693,463,7693,465,7693,501,7693,516,7693,521,7693,525,7693,531,7693,534,7694,516,7694,525,7694,531,7695,25,7695,55,7695,59,7695,77,7695,79,7695,103,7695,105,7695,141,7695,145,7695,155,7695,160,7695,202,7695,204,7695,238,7695,256,7695,260,7695,288,7695,294,7695,306,7695,308,7695,326,7695,330,7695,332,7695,334,7695,342,7695,344,7695,348,7695,354,7695,360,7695,370,7695,380,7695,390,7695,394,7695,404,7695,406,7695,408,7695,416,7695,424,7695,436,7695,463,7695,465,7695,501,7695,516,7695,521,7695,525,7695,531,7695,534,7696,516,7696,525,7696,531,7697,25,7697,55,7697,59,7697,77,7697,79,7697,103,7697,105,7697,141,7697,145,7697,155,7697,160,7697,202,7697,204,7697,238,7697,256,7697,260,7697,288,7697,294,7697,306,7697,308,7697,326,7697,330,7697,332,7697,334,7697,342,7697,344,7697,348,7697,354,7697,360,7697,370,7697,380,7697,390,7697,394,7697,404,7697,406,7697,408,7697,416,7697,424,7697,436,7697,463,7697,465,7697,501,7697,516,7697,521,7697,525,7697,531,7697,534,7698,25,7698,55,7698,59,7698,77,7698,79,7698,103,7698,105,7698,141,7698,145,7698,155,7698,160,7698,202,7698,204,7698,238,7698,256,7698,260,7698,288,7698,294,7698,306,7698,308,7698,326,7698,330,7698,332,7698,334,7698,342,7698,344,7698,348,7698,354,7698,360,7698,370,7698,380,7698,390,7698,394,7698,404,7698,406,7698,408,7698,416,7698,424,7698,436,7698,463,7698,465,7698,501,7698,516,7698,521,7698,525,7698,531,7698,534,7701,23,7702,23,7709,25,7709,55,7709,59,7709,77,7709,79,7709,103,7709,105,7709,141,7709,145,7709,155,7709,160,7709,202,7709,204,7709,238,7709,256,7709,260,7709,288,7709,294,7709,306,7709,308,7709,326,7709,330,7709,332,7709,334,7709,342,7709,344,7709,348,7709,354,7709,360,7709,370,7709,380,7709,390,7709,394,7709,404,7709,406,7709,408,7709,416,7709,424,7709,436,7709,463,7709,465,7709,501,7709,521,7709,534,7710,25,7710,55,7710,59,7710,77,7710,79,7710,103,7710,105,7710,141,7710,145,7710,155,7710,160,7710,202,7710,204,7710,238,7710,256,7710,260,7710,288,7710,294,7710,306,7710,308,7710,326,7710,330,7710,332,7710,334,7710,342,7710,344,7710,348,7710,354,7710,360,7710,370,7710,380,7710,390,7710,394,7710,404,7710,406,7710,408,7710,416,7710,424,7710,436,7710,463,7710,465,7710,501,7710,521,7710,534,7711,25,7711,55,7711,59,7711,77,7711,79,7711,103,7711,105,7711,141,7711,145,7711,155,7711,160,7711,202,7711,204,7711,238,7711,256,7711,260,7711,288,7711,294,7711,306,7711,308,7711,326,7711,330,7711,332,7711,334,7711,342,7711,344,7711,348,7711,354,7711,360,7711,370,7711,380,7711,390,7711,394,7711,404,7711,406,7711,408,7711,416,7711,424,7711,436,7711,463,7711,465,7711,501,7711,521,7711,534,7712,25,7712,55,7712,59,7712,77,7712,79,7712,103,7712,105,7712,141,7712,145,7712,155,7712,160,7712,202,7712,204,7712,238,7712,256,7712,260,7712,288,7712,294,7712,306,7712,308,7712,326,7712,330,7712,332,7712,334,7712,342,7712,344,7712,348,7712,354,7712,360,7712,370,7712,380,7712,390,7712,394,7712,404,7712,406,7712,408,7712,416,7712,424,7712,436,7712,463,7712,465,7712,501,7712,521,7712,534,7713,25,7713,55,7713,59,7713,77,7713,79,7713,103,7713,105,7713,141,7713,145,7713,155,7713,160,7713,202,7713,204,7713,238,7713,256,7713,260,7713,288,7713,294,7713,306,7713,308,7713,326,7713,330,7713,332,7713,334,7713,342,7713,344,7713,348,7713,354,7713,360,7713,370,7713,380,7713,390,7713,394,7713,404,7713,406,7713,408,7713,416,7713,424,7713,436,7713,463,7713,465,7713,501,7713,521,7713,534,7714,25,7714,55,7714,59,7714,77,7714,79,7714,103,7714,105,7714,141,7714,145,7714,155,7714,160,7714,202,7714,204,7714,238,7714,256,7714,260,7714,288,7714,294,7714,306,7714,308,7714,326,7714,330,7714,332,7714,334,7714,342,7714,344,7714,348,7714,354,7714,360,7714,370,7714,380,7714,390,7714,394,7714,404,7714,406,7714,408,7714,416,7714,424,7714,436,7714,463,7714,465,7714,501,7714,521,7714,534,7715,25,7715,55,7715,59,7715,77,7715,79,7715,103,7715,105,7715,141,7715,145,7715,155,7715,160,7715,202,7715,204,7715,238,7715,256,7715,260,7715,288,7715,294,7715,306,7715,308,7715,326,7715,330,7715,332,7715,334,7715,342,7715,344,7715,348,7715,354,7715,360,7715,370,7715,380,7715,390,7715,394,7715,404,7715,406,7715,408,7715,416,7715,424,7715,436,7715,463,7715,465,7715,501,7715,521,7715,534,7716,25,7716,55,7716,59,7716,77,7716,79,7716,103,7716,105,7716,141,7716,145,7716,155,7716,160,7716,202,7716,204,7716,238,7716,256,7716,260,7716,288,7716,294,7716,306,7716,308,7716,326,7716,330,7716,332,7716,334,7716,342,7716,344,7716,348,7716,354,7716,360,7716,370,7716,380,7716,390,7716,394,7716,404,7716,406,7716,408,7716,416,7716,424,7716,436,7716,463,7716,465,7716,501,7716,521,7716,534,7717,25,7717,55,7717,59,7717,77,7717,79,7717,103,7717,105,7717,141,7717,145,7717,155,7717,160,7717,202,7717,204,7717,238,7717,256,7717,260,7717,288,7717,294,7717,306,7717,308,7717,326,7717,330,7717,332,7717,334,7717,342,7717,344,7717,348,7717,354,7717,360,7717,370,7717,380,7717,390,7717,394,7717,404,7717,406,7717,408,7717,416,7717,424,7717,436,7717,463,7717,465,7717,501,7717,521,7717,534,7718,25,7718,55,7718,59,7718,77,7718,79,7718,103,7718,105,7718,141,7718,145,7718,155,7718,160,7718,202,7718,204,7718,238,7718,256,7718,260,7718,288,7718,294,7718,306,7718,308,7718,326,7718,330,7718,332,7718,334,7718,342,7718,344,7718,348,7718,354,7718,360,7718,370,7718,380,7718,390,7718,394,7718,404,7718,406,7718,408,7718,416,7718,424,7718,436,7718,463,7718,465,7718,501,7718,521,7718,534,7719,25,7719,55,7719,59,7719,77,7719,79,7719,103,7719,105,7719,141,7719,145,7719,155,7719,160,7719,202,7719,204,7719,238,7719,256,7719,260,7719,288,7719,294,7719,306,7719,308,7719,326,7719,330,7719,332,7719,334,7719,342,7719,344,7719,348,7719,354,7719,360,7719,370,7719,380,7719,390,7719,394,7719,404,7719,406,7719,408,7719,416,7719,424,7719,436,7719,463,7719,465,7719,501,7719,521,7719,534,7720,25,7720,55,7720,59,7720,77,7720,79,7720,103,7720,105,7720,141,7720,145,7720,155,7720,160,7720,202,7720,204,7720,238,7720,256,7720,260,7720,288,7720,294,7720,306,7720,308,7720,326,7720,330,7720,332,7720,334,7720,342,7720,344,7720,348,7720,354,7720,360,7720,370,7720,380,7720,390,7720,394,7720,404,7720,406,7720,408,7720,416,7720,424,7720,436,7720,463,7720,465,7720,501,7720,521,7720,534,7721,25,7721,55,7721,59,7721,77,7721,79,7721,103,7721,105,7721,141,7721,145,7721,155,7721,160,7721,202,7721,204,7721,238,7721,256,7721,260,7721,288,7721,294,7721,306,7721,308,7721,326,7721,330,7721,332,7721,334,7721,342,7721,344,7721,348,7721,354,7721,360,7721,370,7721,380,7721,390,7721,394,7721,404,7721,406,7721,408,7721,416,7721,424,7721,436,7721,463,7721,465,7721,501,7721,521,7721,534,7726,25,7726,55,7726,59,7726,77,7726,79,7726,103,7726,105,7726,141,7726,145,7726,155,7726,160,7726,202,7726,204,7726,238,7726,256,7726,260,7726,288,7726,294,7726,306,7726,308,7726,326,7726,330,7726,332,7726,334,7726,342,7726,344,7726,348,7726,354,7726,360,7726,370,7726,380,7726,390,7726,394,7726,404,7726,406,7726,408,7726,416,7726,424,7726,436,7726,463,7726,465,7726,501,7726,521,7726,534,7727,25,7727,55,7727,59,7727,77,7727,79,7727,103,7727,105,7727,141,7727,145,7727,155,7727,160,7727,202,7727,204,7727,238,7727,256,7727,260,7727,288,7727,294,7727,306,7727,308,7727,326,7727,330,7727,332,7727,334,7727,342,7727,344,7727,348,7727,354,7727,360,7727,370,7727,380,7727,390,7727,394,7727,404,7727,406,7727,408,7727,416,7727,424,7727,436,7727,463,7727,465,7727,501,7727,521,7727,534,7728,25,7728,55,7728,59,7728,77,7728,79,7728,103,7728,105,7728,141,7728,145,7728,155,7728,160,7728,202,7728,204,7728,238,7728,256,7728,260,7728,288,7728,294,7728,306,7728,308,7728,326,7728,330,7728,332,7728,334,7728,342,7728,344,7728,348,7728,354,7728,360,7728,370,7728,380,7728,390,7728,394,7728,404,7728,406,7728,408,7728,416,7728,424,7728,436,7728,463,7728,465,7728,501,7728,521,7728,534,7729,25,7729,55,7729,59,7729,77,7729,79,7729,103,7729,105,7729,141,7729,145,7729,155,7729,160,7729,202,7729,204,7729,238,7729,256,7729,260,7729,288,7729,294,7729,306,7729,308,7729,326,7729,330,7729,332,7729,334,7729,342,7729,344,7729,348,7729,354,7729,360,7729,370,7729,380,7729,390,7729,394,7729,404,7729,406,7729,408,7729,416,7729,424,7729,436,7729,463,7729,465,7729,501,7729,521,7729,534,7730,25,7730,55,7730,59,7730,77,7730,79,7730,103,7730,105,7730,141,7730,145,7730,155,7730,160,7730,202,7730,204,7730,238,7730,256,7730,260,7730,288,7730,294,7730,306,7730,308,7730,326,7730,330,7730,332,7730,334,7730,342,7730,344,7730,348,7730,354,7730,360,7730,370,7730,380,7730,390,7730,394,7730,404,7730,406,7730,408,7730,416,7730,424,7730,436,7730,463,7730,465,7730,501,7730,521,7730,534,7731,25,7731,55,7731,59,7731,77,7731,79,7731,103,7731,105,7731,141,7731,145,7731,155,7731,160,7731,202,7731,204,7731,238,7731,256,7731,260,7731,288,7731,294,7731,306,7731,308,7731,326,7731,330,7731,332,7731,334,7731,342,7731,344,7731,348,7731,354,7731,360,7731,370,7731,380,7731,390,7731,394,7731,404,7731,406,7731,408,7731,416,7731,424,7731,436,7731,463,7731,465,7731,501,7731,521,7731,534,7732,25,7732,55,7732,59,7732,77,7732,79,7732,103,7732,105,7732,141,7732,145,7732,155,7732,160,7732,202,7732,204,7732,238,7732,256,7732,260,7732,288,7732,294,7732,306,7732,308,7732,326,7732,330,7732,332,7732,334,7732,342,7732,344,7732,348,7732,354,7732,360,7732,370,7732,380,7732,390,7732,394,7732,404,7732,406,7732,408,7732,416,7732,424,7732,436,7732,463,7732,465,7732,501,7732,521,7732,534,7733,25,7733,55,7733,59,7733,77,7733,79,7733,103,7733,105,7733,141,7733,145,7733,155,7733,160,7733,202,7733,204,7733,238,7733,256,7733,260,7733,288,7733,294,7733,306,7733,308,7733,326,7733,330,7733,332,7733,334,7733,342,7733,344,7733,348,7733,354,7733,360,7733,370,7733,380,7733,390,7733,394,7733,404,7733,406,7733,408,7733,416,7733,424,7733,436,7733,463,7733,465,7733,501,7733,521,7733,534,7734,534,7735,534,7736,25,7736,55,7736,59,7736,77,7736,79,7736,103,7736,105,7736,141,7736,145,7736,155,7736,160,7736,202,7736,204,7736,238,7736,256,7736,260,7736,288,7736,294,7736,306,7736,308,7736,326,7736,330,7736,332,7736,334,7736,342,7736,344,7736,348,7736,354,7736,360,7736,370,7736,380,7736,390,7736,394,7736,404,7736,406,7736,408,7736,416,7736,424,7736,436,7736,463,7736,465,7736,501,7736,521,7736,534,7737,25,7737,55,7737,59,7737,77,7737,79,7737,103,7737,105,7737,141,7737,145,7737,155,7737,160,7737,202,7737,204,7737,238,7737,256,7737,260,7737,288,7737,294,7737,306,7737,308,7737,326,7737,330,7737,332,7737,334,7737,342,7737,344,7737,348,7737,354,7737,360,7737,370,7737,380,7737,390,7737,394,7737,404,7737,406,7737,408,7737,416,7737,424,7737,436,7737,463,7737,465,7737,501,7737,521,7737,534,7738,25,7738,55,7738,59,7738,77,7738,79,7738,103,7738,105,7738,141,7738,145,7738,155,7738,160,7738,202,7738,204,7738,238,7738,256,7738,260,7738,288,7738,294,7738,306,7738,308,7738,326,7738,330,7738,332,7738,334,7738,342,7738,344,7738,348,7738,354,7738,360,7738,370,7738,380,7738,390,7738,394,7738,404,7738,406,7738,408,7738,416,7738,424,7738,436,7738,463,7738,465,7738,501,7738,521,7738,534,7739,25,7739,55,7739,59,7739,77,7739,79,7739,103,7739,105,7739,141,7739,145,7739,155,7739,160,7739,202,7739,204,7739,238,7739,256,7739,260,7739,288,7739,294,7739,306,7739,308,7739,326,7739,330,7739,332,7739,334,7739,342,7739,344,7739,348,7739,354,7739,360,7739,370,7739,380,7739,390,7739,394,7739,404,7739,406,7739,408,7739,416,7739,424,7739,436,7739,463,7739,465,7739,501,7739,521,7739,534,7740,25,7740,55,7740,59,7740,77,7740,79,7740,103,7740,105,7740,141,7740,145,7740,155,7740,160,7740,202,7740,204,7740,238,7740,256,7740,260,7740,288,7740,294,7740,306,7740,308,7740,326,7740,330,7740,332,7740,334,7740,342,7740,344,7740,348,7740,354,7740,360,7740,370,7740,380,7740,390,7740,394,7740,404,7740,406,7740,408,7740,416,7740,424,7740,436,7740,463,7740,465,7740,501,7740,521,7740,534,7741,25,7741,55,7741,59,7741,77,7741,79,7741,103,7741,105,7741,141,7741,145,7741,155,7741,160,7741,202,7741,204,7741,238,7741,256,7741,260,7741,288,7741,294,7741,306,7741,308,7741,326,7741,330,7741,332,7741,334,7741,342,7741,344,7741,348,7741,354,7741,360,7741,370,7741,380,7741,390,7741,394,7741,404,7741,406,7741,408,7741,416,7741,424,7741,436,7741,463,7741,465,7741,501,7741,521,7741,534,7742,534,7743,25,7743,55,7743,59,7743,77,7743,79,7743,103,7743,105,7743,141,7743,145,7743,155,7743,160,7743,202,7743,204,7743,238,7743,256,7743,260,7743,288,7743,294,7743,306,7743,308,7743,326,7743,330,7743,332,7743,334,7743,342,7743,344,7743,348,7743,354,7743,360,7743,370,7743,380,7743,390,7743,394,7743,404,7743,406,7743,408,7743,416,7743,424,7743,436,7743,463,7743,465,7743,501,7743,521,7743,534,7744,534,7745,534,7746,25,7746,55,7746,59,7746,77,7746,79,7746,103,7746,105,7746,141,7746,145,7746,155,7746,160,7746,202,7746,204,7746,238,7746,256,7746,260,7746,288,7746,294,7746,306,7746,308,7746,326,7746,330,7746,332,7746,334,7746,342,7746,344,7746,348,7746,354,7746,360,7746,370,7746,380,7746,390,7746,394,7746,404,7746,406,7746,408,7746,416,7746,424,7746,436,7746,463,7746,465,7746,501,7746,521,7746,534,7747,25,7747,55,7747,59,7747,77,7747,79,7747,103,7747,105,7747,141,7747,145,7747,155,7747,160,7747,202,7747,204,7747,238,7747,256,7747,260,7747,288,7747,294,7747,306,7747,308,7747,326,7747,330,7747,332,7747,334,7747,342,7747,344,7747,348,7747,354,7747,360,7747,370,7747,380,7747,390,7747,394,7747,404,7747,406,7747,408,7747,416,7747,424,7747,436,7747,463,7747,465,7747,501,7747,521,7747,534,7748,25,7748,55,7748,59,7748,77,7748,79,7748,103,7748,105,7748,141,7748,145,7748,155,7748,160,7748,202,7748,204,7748,238,7748,256,7748,260,7748,288,7748,294,7748,306,7748,308,7748,326,7748,330,7748,332,7748,334,7748,342,7748,344,7748,348,7748,354,7748,360,7748,370,7748,380,7748,390,7748,394,7748,404,7748,406,7748,408,7748,416,7748,424,7748,436,7748,463,7748,465,7748,501,7748,521,7748,534,7749,25,7749,55,7749,59,7749,77,7749,79,7749,103,7749,105,7749,141,7749,145,7749,155,7749,160,7749,202,7749,204,7749,238,7749,256,7749,260,7749,288,7749,294,7749,306,7749,308,7749,326,7749,330,7749,332,7749,334,7749,342,7749,344,7749,348,7749,354,7749,360,7749,370,7749,380,7749,390,7749,394,7749,404,7749,406,7749,408,7749,416,7749,424,7749,436,7749,463,7749,465,7749,501,7749,521,7749,534,7750,25,7750,55,7750,59,7750,77,7750,79,7750,103,7750,105,7750,141,7750,145,7750,155,7750,160,7750,202,7750,204,7750,238,7750,256,7750,260,7750,288,7750,294,7750,306,7750,308,7750,326,7750,330,7750,332,7750,334,7750,342,7750,344,7750,348,7750,354,7750,360,7750,370,7750,380,7750,390,7750,394,7750,404,7750,406,7750,408,7750,416,7750,424,7750,436,7750,463,7750,465,7750,501,7750,521,7750,534,7751,25,7751,55,7751,59,7751,77,7751,79,7751,103,7751,105,7751,141,7751,145,7751,155,7751,160,7751,202,7751,204,7751,238,7751,256,7751,260,7751,288,7751,294,7751,306,7751,308,7751,326,7751,330,7751,332,7751,334,7751,342,7751,344,7751,348,7751,354,7751,360,7751,370,7751,380,7751,390,7751,394,7751,404,7751,406,7751,408,7751,416,7751,424,7751,436,7751,463,7751,465,7751,501,7751,521,7751,534,7752,25,7752,55,7752,59,7752,77,7752,79,7752,103,7752,105,7752,141,7752,145,7752,155,7752,160,7752,202,7752,204,7752,238,7752,256,7752,260,7752,288,7752,294,7752,306,7752,308,7752,326,7752,330,7752,332,7752,334,7752,342,7752,344,7752,348,7752,354,7752,360,7752,370,7752,380,7752,390,7752,394,7752,404,7752,406,7752,408,7752,416,7752,424,7752,436,7752,463,7752,465,7752,501,7752,521,7752,534,7753,25,7753,55,7753,59,7753,77,7753,79,7753,103,7753,105,7753,141,7753,145,7753,155,7753,160,7753,202,7753,204,7753,238,7753,256,7753,260,7753,288,7753,294,7753,306,7753,308,7753,326,7753,330,7753,332,7753,334,7753,342,7753,344,7753,348,7753,354,7753,360,7753,370,7753,380,7753,390,7753,394,7753,404,7753,406,7753,408,7753,416,7753,424,7753,436,7753,463,7753,465,7753,501,7753,521,7753,534,7754,25,7754,55,7754,59,7754,77,7754,79,7754,103,7754,105,7754,141,7754,145,7754,155,7754,160,7754,202,7754,204,7754,238,7754,256,7754,260,7754,288,7754,294,7754,306,7754,308,7754,326,7754,330,7754,332,7754,334,7754,342,7754,344,7754,348,7754,354,7754,360,7754,370,7754,380,7754,390,7754,394,7754,404,7754,406,7754,408,7754,416,7754,424,7754,436,7754,463,7754,465,7754,501,7754,521,7754,534,7755,25,7755,55,7755,59,7755,77,7755,79,7755,103,7755,105,7755,141,7755,145,7755,155,7755,160,7755,202,7755,204,7755,238,7755,256,7755,260,7755,288,7755,294,7755,306,7755,308,7755,326,7755,330,7755,332,7755,334,7755,342,7755,344,7755,348,7755,354,7755,360,7755,370,7755,380,7755,390,7755,394,7755,404,7755,406,7755,408,7755,416,7755,424,7755,436,7755,463,7755,465,7755,501,7755,521,7755,534,7756,521,7756,534,7757,25,7757,55,7757,59,7757,77,7757,79,7757,103,7757,105,7757,141,7757,145,7757,155,7757,160,7757,202,7757,204,7757,238,7757,256,7757,260,7757,288,7757,294,7757,306,7757,308,7757,326,7757,330,7757,332,7757,334,7757,342,7757,344,7757,348,7757,354,7757,360,7757,370,7757,380,7757,390,7757,394,7757,404,7757,406,7757,408,7757,416,7757,424,7757,436,7757,463,7757,465,7757,501,7757,521,7757,534,7769,17,7769,25,7769,27,7769,29,7769,31,7769,33,7769,35,7769,37,7769,39,7769,41,7769,43,7769,45,7769,47,7769,48,7769,49,7769,50,7769,51,7769,53,7769,55,7769,57,7769,59,7769,61,7769,63,7769,65,7769,67,7769,69,7769,71,7769,73,7769,75,7769,77,7769,79,7769,81,7769,83,7769,85,7769,87,7769,89,7769,91,7769,93,7769,95,7769,97,7769,99,7769,101,7769,103,7769,105,7769,107,7769,109,7769,111,7769,113,7769,115,7769,117,7769,119,7769,121,7769,123,7769,125,7769,127,7769,129,7769,131,7769,133,7769,135,7769,137,7769,139,7769,141,7769,143,7769,145,7769,147,7769,149,7769,151,7769,153,7769,155,7769,157,7769,159,7769,160,7769,162,7769,164,7769,166,7769,168,7769,170,7769,172,7769,174,7769,176,7769,178,7769,180,7769,182,7769,184,7769,186,7769,188,7769,190,7769,192,7769,194,7769,196,7769,198,7769,200,7769,202,7769,204,7769,206,7769,208,7769,210,7769,212,7769,214,7769,216,7769,218,7769,220,7769,222,7769,224,7769,226,7769,228,7769,230,7769,232,7769,234,7769,236,7769,238,7769,240,7769,242,7769,244,7769,246,7769,248,7769,250,7769,252,7769,254,7769,256,7769,258,7769,260,7769,262,7769,264,7769,266,7769,268,7769,270,7769,272,7769,274,7769,276,7769,278,7769,280,7769,282,7769,284,7769,286,7769,288,7769,290,7769,292,7769,294,7769,296,7769,298,7769,300,7769,302,7769,304,7769,306,7769,308,7769,310,7769,312,7769,314,7769,316,7769,318,7769,320,7769,322,7769,324,7769,326,7769,328,7769,330,7769,332,7769,334,7769,336,7769,338,7769,340,7769,342,7769,344,7769,346,7769,348,7769,350,7769,352,7769,354,7769,356,7769,358,7769,360,7769,362,7769,364,7769,366,7769,368,7769,370,7769,372,7769,374,7769,376,7769,378,7769,380,7769,382,7769,384,7769,386,7769,388,7769,390,7769,392,7769,394,7769,396,7769,398,7769,400,7769,402,7769,404,7769,406,7769,408,7769,410,7769,412,7769,414,7769,416,7769,418,7769,420,7769,422,7769,424,7769,426,7769,428,7769,430,7769,432,7769,434,7769,436,7769,438,7769,440,7769,441,7769,442,7769,443,7769,444,7769,445,7769,447,7769,449,7769,451,7769,453,7769,454,7769,456,7769,457,7769,459,7769,461,7769,463,7769,465,7769,467,7769,469,7769,471,7769,473,7769,475,7769,477,7769,479,7769,481,7769,483,7769,485,7769,487,7769,489,7769,491,7769,493,7769,495,7769,497,7769,499,7769,501,7769,503,7769,505,7769,507,7769,509,7769,511,7769,513,7769,520,7778,17],"member":[26,25,56,55,60,59,78,77,80,79,104,103,106,105,142,141,146,145,156,155,161,160,203,202,205,204,239,238,257,256,261,260,289,288,295,294,307,306,309,308,327,326,331,330,333,332,335,334,343,342,345,344,349,348,355,354,361,360,371,370,381,380,391,390,395,394,405,404,407,406,409,408,417,416,425,424,437,436,464,463,466,465,502,501,517,516,526,525,532,531,542,17,543,18,544,18,545,18,546,18,547,18,548,18,549,18,550,18,551,18,552,18,553,18,554,18,555,18,556,18,557,18,558,18,559,18,560,18,561,19,562,19,563,20,564,20,565,20,566,20,567,20,568,20,569,20,570,20,571,20,572,20,573,20,574,20,575,20,576,20,577,20,578,20,579,20,580,20,581,20,582,20,583,20,584,20,585,20,586,20,587,20,588,20,589,20,590,20,591,20,592,20,593,20,594,20,595,20,596,20,597,20,598,20,599,20,600,20,601,20,602,20,603,20,604,20,605,20,606,20,607,20,608,20,609,20,610,20,611,20,612,20,613,20,614,20,615,20,616,20,617,20,618,20,619,20,620,20,621,20,622,20,623,20,624,20,625,20,626,20,627,20,628,20,629,20,630,20,631,20,632,20,633,20,634,20,635,20,636,20,637,20,638,20,639,20,640,20,641,20,642,20,643,20,644,20,645,20,646,20,647,20,648,20,649,20,650,20,651,20,652,20,653,20,654,20,655,20,656,20,657,20,658,20,659,20,660,20,661,20,662,20,663,20,664,20,665,20,666,20,667,20,668,20,669,20,670,20,671,20,672,20,673,20,674,20,675,20,676,20,677,20,678,20,679,20,680,20,681,20,682,20,683,20,684,20,685,20,686,20,687,20,688,20,689,20,690,20,691,20,692,20,693,20,694,20,695,20,696,20,697,20,698,20,699,20,700,20,701,20,702,20,703,20,704,20,705,20,706,20,707,20,708,20,709,20,710,20,711,20,712,20,713,20,714,20,715,20,716,20,717,20,718,20,719,20,720,20,721,20,722,20,723,20,724,20,725,20,726,20,727,20,728,20,729,20,730,20,731,20,732,20,733,20,734,20,735,20,736,20,737,20,738,20,739,20,740,20,741,20,742,20,743,20,744,20,745,20,746,20,747,20,748,20,749,20,750,20,751,20,752,20,753,20,754,20,755,20,756,20,757,20,758,20,759,20,760,20,761,20,762,20,763,20,764,20,765,20,766,20,767,20,768,20,769,20,770,20,771,20,772,20,773,20,774,20,775,20,776,20,777,20,778,20,779,20,780,20,781,20,782,20,783,20,784,20,785,20,786,20,787,20,788,20,789,20,790,20,791,20,792,20,793,20,794,20,795,20,796,20,797,20,798,20,799,20,800,20,801,20,802,20,803,20,804,20,805,20,806,20,807,20,808,20,809,20,810,20,811,20,812,20,813,22,814,22,815,22,816,22,817,22,818,22,819,22,820,22,821,22,822,22,823,22,824,22,825,23,826,23,827,24,828,24,829,24,830,24,831,24,832,24,833,24,834,24,835,24,836,24,837,24,838,24,839,24,840,24,841,24,842,24,843,24,844,24,845,24,846,24,847,24,848,24,849,24,850,24,851,24,852,24,853,24,854,24,855,24,856,24,857,24,858,24,859,24,860,24,861,24,862,24,863,24,864,24,865,24,866,24,867,24,868,24,869,24,870,24,871,24,872,24,873,24,874,24,875,24,876,24,877,24,878,24,879,24,880,24,881,24,882,24,883,24,884,24,885,24,886,24,887,24,888,24,889,24,890,24,891,24,892,24,893,24,894,24,895,24,896,24,897,24,898,24,899,24,900,24,901,24,902,24,903,24,904,24,905,24,906,24,907,24,908,24,909,24,910,24,911,24,912,24,913,24,914,24,915,24,916,24,917,24,918,24,919,24,920,24,921,24,922,24,923,24,924,24,925,24,926,24,927,24,928,24,929,24,930,24,931,24,932,24,933,24,934,24,935,24,936,24,937,24,938,24,939,24,940,24,941,24,942,24,943,24,944,24,945,24,946,24,947,25,948,27,949,27,950,29,951,29,952,31,953,31,954,33,955,33,956,35,957,35,958,37,959,37,960,39,961,39,962,41,963,41,964,43,965,43,966,45,967,45,968,47,969,48,970,49,971,50,972,51,973,51,974,53,975,53,976,55,977,57,978,57,979,59,980,61,981,61,982,63,983,63,984,65,985,65,986,67,987,67,988,69,989,69,990,71,991,71,992,73,993,73,994,75,995,75,996,77,997,79,998,81,999,81,1000,83,1001,83,1002,85,1003,85,1004,87,1005,87,1006,89,1007,89,1008,91,1009,91,1010,93,1011,93,1012,95,1013,95,1014,97,1015,97,1016,99,1017,99,1018,101,1019,101,1020,103,1021,105,1022,107,1023,107,1024,109,1025,109,1026,111,1027,111,1028,113,1029,113,1030,115,1031,115,1032,117,1033,117,1034,119,1035,119,1036,121,1037,121,1038,123,1039,123,1040,125,1041,125,1042,127,1043,127,1044,129,1045,129,1046,131,1047,131,1048,133,1049,133,1050,135,1051,135,1052,137,1053,137,1054,139,1055,139,1056,141,1057,143,1058,143,1059,145,1060,147,1061,147,1062,149,1063,149,1064,151,1065,151,1066,153,1067,153,1068,155,1069,157,1070,157,1071,159,1072,160,1073,162,1074,162,1075,164,1076,164,1077,166,1078,166,1079,168,1080,168,1081,170,1082,170,1083,172,1084,172,1085,174,1086,174,1087,176,1088,176,1089,178,1090,178,1091,180,1092,180,1093,182,1094,182,1095,184,1096,184,1097,186,1098,186,1099,188,1100,188,1101,190,1102,190,1103,192,1104,192,1105,194,1106,194,1107,196,1108,196,1109,198,1110,198,1111,200,1112,200,1113,202,1114,204,1115,206,1116,206,1117,208,1118,208,1119,210,1120,210,1121,212,1122,212,1123,214,1124,214,1125,216,1126,216,1127,218,1128,218,1129,220,1130,220,1131,222,1132,222,1133,224,1134,224,1135,226,1136,226,1137,228,1138,228,1139,230,1140,230,1141,232,1142,232,1143,234,1144,234,1145,236,1146,236,1147,238,1148,240,1149,240,1150,242,1151,242,1152,244,1153,244,1154,246,1155,246,1156,248,1157,248,1158,250,1159,250,1160,252,1161,252,1162,254,1163,254,1164,256,1165,258,1166,258,1167,260,1168,262,1169,262,1170,264,1171,264,1172,266,1173,266,1174,268,1175,268,1176,270,1177,270,1178,272,1179,272,1180,274,1181,274,1182,276,1183,276,1184,278,1185,278,1186,280,1187,280,1188,282,1189,282,1190,284,1191,284,1192,286,1193,286,1194,288,1195,290,1196,290,1197,292,1198,292,1199,294,1200,296,1201,296,1202,298,1203,298,1204,300,1205,300,1206,302,1207,302,1208,304,1209,304,1210,306,1211,308,1212,310,1213,310,1214,312,1215,312,1216,314,1217,314,1218,316,1219,316,1220,318,1221,318,1222,320,1223,320,1224,322,1225,322,1226,324,1227,324,1228,326,1229,328,1230,328,1231,330,1232,332,1233,334,1234,336,1235,336,1236,338,1237,338,1238,340,1239,340,1240,342,1241,344,1242,346,1243,346,1244,348,1245,350,1246,350,1247,352,1248,352,1249,354,1250,356,1251,356,1252,358,1253,358,1254,360,1255,362,1256,362,1257,364,1258,364,1259,366,1260,366,1261,368,1262,368,1263,370,1264,372,1265,372,1266,374,1267,374,1268,376,1269,376,1270,378,1271,378,1272,380,1273,382,1274,382,1275,384,1276,384,1277,386,1278,386,1279,388,1280,388,1281,390,1282,392,1283,392,1284,394,1285,396,1286,396,1287,398,1288,398,1289,400,1290,400,1291,402,1292,402,1293,404,1294,406,1295,408,1296,410,1297,410,1298,412,1299,412,1300,414,1301,414,1302,416,1303,418,1304,418,1305,420,1306,420,1307,422,1308,422,1309,424,1310,426,1311,426,1312,428,1313,428,1314,430,1315,430,1316,432,1317,432,1318,434,1319,434,1320,436,1321,438,1322,438,1323,440,1324,440,1325,440,1326,441,1327,441,1328,441,1329,442,1330,442,1331,442,1332,443,1333,443,1334,443,1335,444,1336,445,1337,445,1338,447,1339,447,1340,449,1341,449,1342,451,1343,451,1344,453,1345,453,1346,453,1347,454,1348,454,1349,456,1350,457,1351,457,1352,459,1353,459,1354,461,1355,461,1356,463,1357,465,1358,467,1359,467,1360,469,1361,469,1362,471,1363,471,1364,473,1365,473,1366,475,1367,475,1368,477,1369,477,1370,479,1371,479,1372,481,1373,481,1374,483,1375,483,1376,485,1377,485,1378,487,1379,487,1380,489,1381,489,1382,491,1383,491,1384,493,1385,493,1386,495,1387,495,1388,497,1389,497,1390,499,1391,499,1392,501,1393,503,1394,503,1395,505,1396,505,1397,507,1398,507,1399,509,1400,509,1401,511,1402,511,1403,513,1404,513,1405,513,1406,513,1407,515,1408,516,1409,536,1411,537,1412,522,1413,522,1414,523,1415,523,1416,524,1417,524,1418,525,1419,527,1420,527,1421,527,1422,23,1423,528,1424,529,1425,529,1426,529,1427,530,1428,531,1429,533,1430,539,1431,539,1432,540,1433,540,1434,541,1435,534,1436,534,1437,25,1438,55,1439,59,1440,77,1441,79,1442,103,1443,105,1444,141,1445,145,1446,155,1447,160,1448,202,1449,204,1450,238,1451,256,1452,260,1453,288,1454,294,1455,306,1456,308,1457,326,1458,330,1459,332,1460,334,1461,342,1462,344,1463,348,1464,354,1465,360,1466,370,1467,380,1468,390,1469,394,1470,404,1471,406,1472,408,1473,416,1474,424,1475,436,1476,463,1477,465,1478,501,1479,521,1480,534,1481,524,1482,534,1483,25,1484,25,1485,25,1486,25,1487,25,1488,25,1489,25,1490,27,1491,27,1492,27,1493,27,1494,27,1495,27,1496,27,1497,29,1498,29,1499,29,1500,29,1501,31,1502,31,1503,31,1504,31,1505,33,1506,33,1507,33,1508,33,1509,33,1510,33,1511,33,1512,33,1513,33,1514,33,1515,35,1516,35,1517,35,1518,35,1519,35,1520,37,1521,37,1522,37,1523,37,1524,37,1525,37,1526,37,1527,37,1528,37,1529,39,1530,39,1531,39,1532,39,1533,39,1534,41,1535,41,1536,41,1537,41,1538,41,1539,41,1540,43,1541,43,1542,43,1543,43,1544,43,1545,45,1546,45,1547,45,1548,45,1549,45,1550,45,1551,45,1552,47,1553,47,1554,48,1555,48,1556,49,1557,49,1558,50,1559,50,1560,51,1561,51,1562,51,1563,51,1564,53,1565,53,1566,53,1567,53,1568,53,1569,53,1570,53,1571,53,1572,53,1573,55,1574,55,1575,55,1576,55,1577,55,1578,55,1579,55,1580,57,1581,57,1582,57,1583,57,1584,59,1585,59,1586,59,1587,59,1588,59,1589,59,1590,59,1591,61,1592,61,1593,61,1594,61,1595,63,1596,63,1597,63,1598,63,1599,65,1600,65,1601,65,1602,65,1603,65,1604,65,1605,67,1606,67,1607,67,1608,67,1609,67,1610,67,1611,69,1612,69,1613,69,1614,69,1615,69,1616,69,1617,69,1618,69,1619,69,1620,69,1621,71,1622,71,1623,71,1624,71,1625,71,1626,71,1627,71,1628,71,1629,71,1630,73,1631,73,1632,73,1633,73,1634,75,1635,75,1636,75,1637,75,1638,75,1639,77,1640,77,1641,77,1642,77,1643,77,1644,77,1645,77,1646,79,1647,79,1648,79,1649,79,1650,79,1651,79,1652,79,1653,81,1654,81,1655,81,1656,81,1657,81,1658,81,1659,81,1660,83,1661,83,1662,83,1663,83,1664,85,1665,85,1666,85,1667,85,1668,85,1669,85,1670,85,1671,85,1672,85,1673,87,1674,87,1675,87,1676,87,1677,89,1678,89,1679,89,1680,91,1681,91,1682,91,1683,93,1684,93,1685,93,1686,93,1687,93,1688,95,1689,95,1690,95,1691,95,1692,95,1693,95,1694,97,1695,97,1696,97,1697,97,1698,97,1699,99,1700,99,1701,99,1702,99,1703,99,1704,101,1705,101,1706,101,1707,101,1708,101,1709,103,1710,103,1711,103,1712,103,1713,103,1714,103,1715,103,1716,105,1717,105,1718,105,1719,105,1720,105,1721,105,1722,105,1723,107,1724,107,1725,107,1726,107,1727,107,1728,109,1729,109,1730,109,1731,109,1732,109,1733,109,1734,109,1735,109,1736,109,1737,111,1738,111,1739,111,1740,111,1741,113,1742,113,1743,113,1744,113,1745,115,1746,115,1747,115,1748,115,1751,117,1752,117,1753,117,1754,119,1755,119,1756,119,1757,121,1758,121,1759,121,1760,123,1761,123,1762,123,1763,123,1764,123,1765,123,1766,123,1767,123,1768,123,1769,123,1770,125,1771,125,1772,125,1773,125,1774,125,1775,125,1776,125,1777,125,1778,127,1779,127,1780,127,1781,127,1782,127,1783,127,1784,127,1785,127,1786,127,1788,129,1789,129,1790,129,1791,131,1792,131,1793,131,1794,131,1795,131,1796,133,1797,133,1798,133,1799,133,1800,133,1801,135,1802,135,1803,135,1804,135,1805,135,1806,135,1807,135,1808,137,1809,137,1810,137,1812,139,1813,139,1814,139,1815,139,1816,141,1817,141,1818,141,1819,141,1820,141,1821,141,1822,141,1823,143,1824,143,1825,143,1826,143,1827,143,1828,145,1829,145,1830,145,1831,145,1832,145,1833,145,1834,145,1835,147,1836,147,1837,147,1838,149,1839,149,1840,149,1841,149,1842,149,1843,149,1844,149,1845,151,1846,151,1847,151,1848,151,1849,151,1850,151,1851,153,1852,153,1853,153,1854,153,1855,155,1856,155,1857,155,1858,155,1859,155,1860,155,1861,155,1862,157,1863,157,1864,157,1865,157,1866,159,1867,159,1869,160,1870,160,1871,160,1872,160,1873,160,1874,160,1875,160,1876,162,1877,162,1878,162,1879,164,1880,164,1881,164,1882,164,1883,164,1884,164,1885,164,1886,166,1887,166,1888,166,1889,168,1890,168,1891,168,1892,168,1893,168,1894,168,1895,170,1896,170,1897,170,1898,170,1899,170,1900,170,1901,172,1902,172,1903,172,1904,174,1905,174,1906,174,1907,174,1908,176,1909,176,1910,176,1911,176,1912,178,1913,178,1914,178,1915,178,1916,178,1917,178,1918,178,1919,178,1920,178,1921,178,1922,178,1923,180,1924,180,1925,180,1926,182,1927,182,1928,182,1929,182,1930,182,1931,184,1932,184,1933,184,1934,184,1935,184,1936,184,1937,186,1938,186,1939,186,1940,186,1941,188,1942,188,1943,188,1944,188,1945,188,1946,190,1947,190,1948,190,1949,190,1950,190,1951,190,1952,190,1953,190,1954,192,1955,192,1956,192,1957,194,1958,194,1959,194,1960,196,1961,196,1962,196,1963,196,1964,196,1965,196,1966,196,1967,196,1968,198,1969,198,1970,198,1971,198,1972,198,1973,200,1974,200,1975,200,1976,200,1977,202,1978,202,1979,202,1980,202,1981,202,1982,202,1983,202,1984,204,1985,204,1986,204,1987,204,1988,204,1989,204,1990,204,1991,206,1992,206,1993,206,1994,206,1995,206,1996,206,1997,206,1998,206,1999,206,2000,208,2001,208,2002,208,2003,208,2004,210,2005,210,2006,210,2007,210,2008,212,2009,212,2010,212,2011,214,2012,214,2013,214,2014,214,2015,214,2016,214,2017,214,2018,214,2019,216,2020,216,2021,216,2022,216,2023,218,2024,218,2025,218,2026,218,2027,218,2028,218,2029,218,2030,220,2031,220,2032,220,2033,220,2034,220,2035,220,2036,222,2037,222,2038,222,2039,222,2040,222,2041,222,2042,222,2043,222,2044,224,2045,224,2046,224,2047,224,2048,226,2049,226,2050,226,2051,226,2052,226,2053,226,2054,228,2055,228,2056,228,2057,230,2058,230,2059,230,2060,230,2061,230,2062,230,2063,232,2064,232,2065,232,2066,232,2067,232,2068,232,2069,232,2070,232,2071,232,2072,232,2073,234,2074,234,2075,234,2076,234,2077,234,2078,236,2079,236,2080,236,2081,236,2082,236,2083,236,2084,238,2085,238,2086,238,2087,238,2088,238,2089,238,2090,238,2091,240,2092,240,2093,240,2094,240,2095,240,2096,242,2097,242,2098,242,2099,242,2100,242,2101,242,2102,244,2103,244,2104,244,2105,244,2106,244,2107,244,2108,246,2109,246,2110,246,2111,248,2112,248,2113,248,2114,248,2115,248,2116,248,2117,248,2118,250,2119,250,2120,250,2121,250,2122,250,2123,250,2124,250,2125,250,2126,250,2127,250,2128,252,2129,252,2130,252,2131,252,2132,252,2133,252,2134,254,2135,254,2136,254,2137,256,2138,256,2139,256,2140,256,2141,256,2142,256,2143,256,2144,258,2145,258,2146,258,2147,258,2148,260,2149,260,2150,260,2151,260,2152,260,2153,260,2154,260,2155,262,2156,262,2157,262,2158,262,2159,264,2160,264,2161,264,2162,264,2163,264,2164,264,2165,266,2166,266,2167,266,2168,268,2169,268,2170,268,2171,270,2172,270,2173,270,2174,270,2175,270,2176,270,2177,272,2178,272,2179,272,2180,272,2181,272,2182,272,2183,272,2185,274,2186,274,2187,274,2188,274,2189,274,2190,274,2191,274,2192,274,2193,274,2194,276,2195,276,2196,276,2197,278,2198,278,2199,278,2200,280,2201,280,2202,280,2203,280,2204,280,2205,280,2206,280,2207,282,2208,282,2209,282,2210,284,2211,284,2212,284,2213,284,2214,286,2215,286,2216,286,2217,286,2218,288,2219,288,2220,288,2221,288,2222,288,2223,288,2224,288,2225,290,2226,290,2227,290,2228,292,2229,292,2230,292,2231,292,2232,294,2233,294,2234,294,2235,294,2236,294,2237,294,2238,294,2239,296,2240,296,2241,296,2242,298,2243,298,2244,298,2245,298,2246,300,2247,300,2248,300,2249,300,2250,302,2251,302,2252,302,2253,302,2254,302,2255,302,2256,304,2257,304,2258,304,2259,304,2260,306,2261,306,2262,306,2263,306,2264,306,2265,306,2266,306,2267,308,2268,308,2269,308,2270,308,2271,308,2272,308,2273,308,2274,310,2275,310,2276,310,2277,310,2278,312,2279,312,2280,312,2281,312,2282,312,2283,312,2284,314,2285,314,2286,314,2287,314,2288,314,2289,314,2290,314,2291,314,2292,314,2293,316,2294,316,2295,316,2296,316,2297,316,2298,318,2299,318,2300,318,2301,318,2302,318,2303,318,2304,320,2305,320,2306,320,2307,320,2308,320,2309,320,2310,322,2311,322,2312,322,2313,322,2314,324,2315,324,2316,324,2317,324,2318,326,2319,326,2320,326,2321,326,2322,326,2323,326,2324,326,2325,328,2326,328,2327,328,2328,330,2329,330,2330,330,2331,330,2332,330,2333,330,2334,330,2335,332,2336,332,2337,332,2338,332,2339,332,2340,332,2341,332,2342,334,2343,334,2344,334,2345,334,2346,334,2347,334,2348,334,2349,336,2350,336,2351,336,2352,336,2353,336,2354,336,2355,338,2356,338,2357,338,2358,338,2359,340,2360,340,2361,340,2362,340,2363,342,2364,342,2365,342,2366,342,2367,342,2368,342,2369,342,2370,344,2371,344,2372,344,2373,344,2374,344,2375,344,2376,344,2377,346,2378,346,2379,346,2380,346,2381,346,2382,346,2383,348,2384,348,2385,348,2386,348,2387,348,2388,348,2389,348,2390,350,2391,350,2392,350,2393,352,2394,352,2395,352,2396,354,2397,354,2398,354,2399,354,2400,354,2401,354,2402,354,2403,356,2404,356,2405,356,2406,356,2407,356,2408,358,2409,358,2410,358,2411,358,2412,358,2413,358,2414,358,2415,358,2416,360,2417,360,2418,360,2419,360,2420,360,2421,360,2422,360,2423,362,2424,362,2425,362,2426,362,2427,364,2428,364,2429,364,2430,364,2431,366,2432,366,2433,366,2434,366,2435,368,2436,368,2437,368,2438,370,2439,370,2440,370,2441,370,2442,370,2443,370,2444,370,2445,372,2446,372,2447,372,2448,372,2449,374,2450,374,2451,374,2452,374,2453,374,2454,376,2455,376,2456,376,2457,376,2458,378,2459,378,2460,378,2461,378,2462,378,2463,380,2464,380,2465,380,2466,380,2467,380,2468,380,2469,380,2470,382,2471,382,2472,382,2473,382,2474,382,2475,382,2476,384,2477,384,2478,384,2479,384,2480,384,2481,386,2482,386,2483,386,2484,386,2485,386,2486,388,2487,388,2488,388,2489,388,2490,388,2491,388,2492,388,2493,388,2494,388,2495,390,2496,390,2497,390,2498,390,2499,390,2500,390,2501,390,2502,392,2503,392,2504,392,2505,392,2506,392,2507,394,2508,394,2509,394,2510,394,2511,394,2512,394,2513,394,2514,396,2515,396,2516,396,2517,396,2518,396,2519,396,2520,398,2521,398,2522,398,2523,398,2524,398,2525,398,2526,400,2527,400,2528,400,2529,400,2530,400,2531,400,2532,402,2533,402,2534,402,2535,402,2536,402,2537,404,2538,404,2539,404,2540,404,2541,404,2542,404,2543,404,2544,406,2545,406,2546,406,2547,406,2548,406,2549,406,2550,406,2551,408,2552,408,2553,408,2554,408,2555,408,2556,408,2557,408,2558,410,2559,410,2560,410,2561,410,2562,412,2563,412,2564,412,2565,412,2566,414,2567,414,2568,414,2569,414,2570,414,2571,416,2572,416,2573,416,2574,416,2575,416,2576,416,2577,416,2578,418,2579,418,2580,418,2581,418,2582,418,2583,418,2584,420,2585,420,2586,420,2587,420,2588,420,2589,422,2590,422,2591,422,2592,422,2593,422,2594,424,2595,424,2596,424,2597,424,2598,424,2599,424,2600,424,2601,426,2602,426,2603,426,2604,426,2605,426,2606,428,2607,428,2608,428,2609,428,2610,430,2611,430,2612,430,2613,430,2614,430,2615,432,2616,432,2617,432,2618,432,2619,434,2620,434,2621,434,2622,434,2623,434,2624,434,2625,434,2626,436,2627,436,2628,436,2629,436,2630,436,2631,436,2632,436,2633,438,2634,438,2635,438,2636,438,2637,438,2638,438,2639,438,2640,438,2641,438,2642,440,2643,440,2644,441,2645,441,2646,442,2647,442,2648,443,2649,443,2650,444,2651,444,2652,444,2653,444,2654,444,2655,444,2656,444,2657,444,2658,444,2659,444,2660,444,2661,444,2662,445,2663,445,2664,445,2665,445,2666,445,2669,447,2670,447,2671,447,2672,447,2673,447,2674,447,2675,447,2676,449,2677,449,2678,449,2679,449,2680,449,2681,449,2682,449,2683,449,2684,449,2685,451,2686,451,2687,451,2688,451,2691,453,2692,453,2693,454,2694,454,2695,454,2696,454,2697,454,2698,456,2699,456,2700,457,2701,457,2702,457,2703,457,2704,457,2705,459,2706,459,2707,459,2708,459,2709,461,2710,461,2711,461,2712,461,2713,461,2714,461,2715,461,2716,461,2717,461,2718,461,2719,463,2720,463,2721,463,2722,463,2723,463,2724,463,2725,463,2726,465,2727,465,2728,465,2729,465,2730,465,2731,465,2732,465,2733,467,2734,467,2735,467,2736,467,2737,469,2738,469,2739,469,2740,471,2741,471,2742,471,2743,471,2744,471,2745,473,2746,473,2747,473,2748,473,2749,473,2750,475,2751,475,2752,475,2753,475,2754,475,2755,477,2756,477,2757,477,2758,477,2759,477,2760,477,2761,477,2762,477,2763,479,2764,479,2765,479,2766,479,2767,481,2768,481,2769,481,2770,481,2771,483,2772,483,2773,483,2774,483,2775,483,2776,485,2777,485,2778,485,2779,485,2780,485,2781,485,2782,485,2783,485,2784,485,2785,485,2786,487,2787,487,2788,487,2789,487,2790,487,2794,489,2795,489,2796,489,2797,489,2798,491,2799,491,2800,491,2801,491,2802,493,2803,493,2804,493,2805,493,2806,493,2807,493,2808,493,2809,493,2810,493,2811,493,2812,493,2813,493,2814,493,2815,493,2816,495,2817,495,2818,495,2819,495,2820,495,2821,495,2822,497,2823,497,2824,497,2825,497,2826,499,2827,499,2828,499,2829,499,2830,501,2831,501,2832,501,2833,501,2834,501,2835,501,2836,501,2837,503,2838,503,2839,503,2840,503,2841,503,2842,505,2843,505,2844,505,2845,505,2846,505,2847,507,2848,507,2849,507,2850,507,2851,507,2852,507,2853,507,2854,509,2855,509,2856,509,2857,509,2858,509,2859,509,2860,511,2861,511,2862,511,2863,511,2864,513,2865,513,2867,17,2868,518,2869,518,2870,518,2871,518,2872,518,2873,520,2874,520,2875,520,2876,520,2877,520,2878,520,2879,520,2880,520,2881,520,2882,520,2883,520,2884,520,2885,520,2886,520,2887,520,2888,520,2889,520,2890,520,2891,520,2892,520,2893,520,2894,520,2895,520,2896,520,2897,520,2898,520,2899,520,2900,520,2901,520,2902,520,2903,520,2904,520,2905,520,2906,520,2907,520,2908,520,2909,520,2910,520,2911,520,2912,520,2913,520,2914,520,2915,520,2916,520,2917,520,2918,520,2919,520,2920,520,2921,520,2922,520,2923,520,2924,520,2925,520,2926,520,2927,520,2928,520,2929,520,2930,520,2931,520,2932,520,2933,520,2934,520,2935,520,2936,520,2937,520,2938,520,2939,520,2940,520,2941,520,2942,520,2943,520,2944,520,2945,520,2946,520,2947,520,2948,520,2949,520,2950,520,2951,520,2952,520,2953,520,2954,520,2955,520,2956,520,2957,520,2958,520,2959,520,2960,520,2961,520,2962,520,2963,520,2964,520,2965,520,2966,520,2967,520,2968,520,2969,520,2970,520,2971,520,2972,520,2973,520,2974,520,2975,520,2976,520,2977,520,2978,520,2979,520,2980,520,2981,520,2982,520,2983,520,2984,520,2985,520,2986,520,2987,520,2988,520,2989,520,2990,520,2991,520,2992,520,2993,520,2994,520,2995,520,2996,520,2997,520,2998,520,2999,520,3000,520,3001,520,3002,520,3003,520,3004,520,3005,520,3006,520,3007,520,3008,520,3009,520,3010,520,3011,520,3012,520,3013,520,3014,520,3015,520,3016,520,3017,520,3018,520,3019,520,3020,520,3021,520,3022,520,3023,520,3024,520,3025,520,3026,520,3027,520,3028,520,3029,520,3030,520,3031,520,3032,520,3033,520,3034,520,3035,520,3036,520,3037,520,3038,520,3039,520,3040,520,3041,520,3042,520,3043,520,3044,520,3045,520,3046,520,3047,520,3048,520,3049,520,3050,520,3051,520,3052,520,3053,520,3054,520,3055,520,3056,520,3057,520,3058,520,3059,520,3060,520,3061,520,3062,520,3063,520,3064,520,3065,520,3066,520,3067,520,3068,520,3069,520,3070,520,3071,520,3072,520,3073,520,3074,520,3075,520,3076,520,3077,520,3078,520,3079,520,3080,520,3081,520,3082,520,3083,520,3084,520,3085,520,3086,520,3087,520,3088,520,3089,520,3090,520,3091,520,3092,520,3093,520,3094,520,3095,520,3096,520,3097,520,3098,520,3099,520,3100,520,3101,520,3102,520,3103,520,3104,520,3105,520,3106,520,3107,520,3108,520,3109,520,3110,520,3111,520,3112,520,3113,520,3114,520,3115,520,3116,520,3117,520,3118,520,3119,520,3120,520,3121,520,3122,520,3123,520,3124,520,3125,520,3126,520,3127,520,3128,520,3129,520,3130,520,3131,520,3132,520,3133,520,3134,520,3135,520,3136,520,3137,520,3138,520,3139,520,3140,520,3141,520,3142,520,3143,520,3144,520,3145,520,3146,520,3147,520,3148,520,3149,520,3150,520,3151,520,3152,520,3153,520,3154,520,3155,520,3156,520,3157,520,3158,520,3159,520,3160,520,3161,520,3162,520,3163,520,3164,520,3165,520,3166,520,3167,520,3168,520,3169,520,3170,520,3171,520,3172,520,3173,520,3174,520,3175,520,3176,520,3177,520,3178,520,3179,520,3180,520,3181,520,3182,520,3183,520,3184,520,3185,520,3186,520,3187,520,3188,520,3189,520,3190,520,3191,520,3192,520,3193,520,3194,520,3195,520,3196,520,3197,520,3198,520,3199,520,3200,520,3201,520,3202,520,3203,520,3204,520,3205,520,3206,520,3207,520,3208,520,3209,520,3210,520,3211,520,3212,520,3213,520,3214,520,3215,520,3216,520,3217,520,3218,520,3219,520,3220,520,3221,520,3222,520,3223,520,3224,520,3225,520,3226,520,3227,520,3228,520,3229,520,3230,520,3231,520,3232,520,3233,520,3234,520,3235,520,3236,520,3237,520,3238,520,3239,520,3240,520,3241,520,3242,520,3243,520,3244,520,3245,520,3246,520,3247,520,3248,520,3249,520,3250,520,3251,520,3252,520,3253,520,3254,520,3255,520,3256,520,3257,520,3258,520,3259,520,3260,520,3261,520,3262,520,3263,520,3264,520,3265,520,3266,520,3267,520,3268,520,3269,520,3270,520,3271,520,3272,520,3273,520,3274,520,3275,520,3276,520,3277,520,3278,520,3279,520,3280,520,3281,520,3282,520,3283,520,3284,520,3285,520,3286,520,3287,520,3288,520,3289,520,3290,520,3291,520,3292,520,3293,520,3294,520,3295,520,3296,520,3297,520,3298,520,3299,520,3300,520,3301,520,3302,520,3303,520,3304,520,3305,520,3306,520,3307,520,3308,520,3309,520,3310,520,3311,520,3312,520,3313,520,3314,520,3315,520,3316,520,3317,520,3318,520,3319,520,3320,520,3321,520,3322,520,3323,520,3324,520,3325,520,3326,520,3327,520,3328,520,3329,520,3330,520,3331,520,3332,520,3333,520,3334,520,3335,520,3336,520,3337,520,3338,520,3339,520,3340,520,3341,520,3342,520,3343,520,3344,520,3345,520,3346,520,3347,520,3348,520,3349,520,3350,520,3351,520,3352,520,3353,520,3354,520,3355,520,3356,520,3357,520,3358,520,3359,520,3360,520,3361,520,3362,520,3363,520,3364,520,3365,520,3366,520,3367,520,3368,520,3369,520,3370,521,3371,521,3373,15,3374,15,3375,15,3376,15,3377,15,3378,15,3379,15,3380,15,3381,15,3382,15,3383,15,3384,15,3385,15,3386,15,3387,15,3388,15,3389,15,3390,15,3391,15,3392,15,3393,15,3394,15,3395,15,3396,15,3397,15,3398,15,3399,15,3400,15,3401,15,3402,15,3403,15,3404,15,3405,15,3406,15,3407,522,3408,522,3409,522,3410,522,3411,522,3412,522,3413,523,3414,523,3415,523,3416,22,3417,22,3418,524,3419,525,3420,527,3421,527,3422,527,3423,527,3424,527,3425,528,3426,528,3427,528,3428,528,3429,529,3430,530,3431,531,3432,541,3433,534,3434,534,3435,534,3436,534,3437,24,3438,21,3439,21,3440,21,3441,21,3442,21,3443,21,3444,21,3445,21,3446,21,3447,21,3448,21,3449,21,3450,21,3451,21,3452,21,3453,21,3454,21,3455,21,3456,21,3457,21,3458,21,3459,21,3460,21,3461,21,3462,21,3463,21,3464,21,3465,21,3466,21,3467,21,3468,21,3469,21,3470,21,3471,21,3472,21,3473,21,3474,21,3475,21,3476,21,3477,21,3478,21,3479,21,3480,21,3481,21,3482,21,3483,21,3484,21,3485,21,3486,21,3487,21,3488,21,3489,21,3490,21,3491,21,3492,21,3493,21,3494,21,3495,21,3496,21,3497,21,3498,21,3499,21,3500,21,3501,21,3502,21,3503,21,3504,21,3505,21,3506,21,3507,21,3508,21,3509,21,3510,21,3511,21,3512,21,3513,21,3514,21,3515,21,3516,21,3517,21,3518,21,3519,21,3520,21,3521,21,3522,21,3523,21,3524,21,3525,21,3526,21,3527,21,3528,21,3529,21,3530,21,3531,21,3532,21,3533,21,3534,21,3535,21,3536,21,3537,21,3538,21,3539,21,3540,21,3541,21,3542,21,3543,21,3544,21,3545,21,3546,21,3547,21,3548,21,3549,21,3550,21,3551,21,3552,21,3553,21,3554,21,3555,21,3556,21,3557,21,3558,21,3559,21,3560,21,3561,21,3562,21,3563,21,3564,21,3565,21,3566,21,3567,21,3568,21,3569,21,3570,21,3571,21,3572,21,3573,21,3574,21,3575,21,3576,21,3577,21,3578,21,3579,21,3580,21,3581,21,3582,21,3583,21,3584,21,3585,21,3586,21,3587,21,3588,21,3589,21,3590,21,3591,21,3592,21,3593,21,3594,21,3595,21,3596,21,3597,21,3598,21,3599,21,3600,21,3601,21,3602,21,3603,21,3604,21,3605,21,3606,21,3607,21,3608,21,3609,21,3610,21,3611,21,3612,21,3613,21,3614,21,3615,21,3616,21,3617,21,3618,21,3619,21,3620,21,3621,21,3622,21,3623,21,3624,21,3625,21,3626,21,3627,21,3628,21,3629,21,3630,21,3631,21,3632,21,3633,21,3634,21,3635,21,3636,21,3637,21,3638,21,3639,21,3640,21,3641,21,3642,21,3643,21,3644,21,3645,21,3646,21,3647,21,3648,21,3649,21,3650,21,3651,21,3652,21,3653,21,3654,21,3655,21,3656,21,3657,21,3658,21,3659,21,3660,21,3661,21,3662,21,3663,21,3664,21,3665,21,3666,21,3667,21,3668,21,3669,21,3670,21,3671,21,3672,21,3673,21,3674,21,3675,21,3676,21,3677,21,3678,21,3679,21,3680,21,3681,21,3682,21,3683,21,3684,21,3685,21,3686,21,3687,21,3688,21,3689,21,3690,21,3691,21,3692,21,3693,21,3694,21,3695,21,3696,21,3697,21,3698,21,3699,21,3700,21,3701,21,3702,21,3703,21,3704,21,3705,21,3706,21,3707,21,3708,21,3709,21,3710,21,3711,21,3712,21,3713,21,3714,21,3715,21,3716,21,3717,21,3718,21,3719,21,3720,21,3721,21,3722,21,3723,21,3724,21,3725,21,3726,21,3727,21,3728,21,3729,21,3730,21,3731,21,3732,21,3733,21,3734,21,3735,21,3736,21,3737,21,3738,21,3739,21,3740,21,3741,21,3742,21,3743,21,3744,21,3745,21,3746,21,3747,21,3748,21,3749,21,3750,21,3751,21,3752,21,3753,21,3754,21,3755,21,3756,21,3757,21,3758,21,3759,21,3760,21,3761,21,3762,21,3763,21,3764,21,3765,21,3766,21,3767,21,3768,21,3769,21,3770,21,3771,21,3772,21,3773,21,3774,21,3775,21,3776,21,3777,21,3778,21,3779,21,3780,21,3781,21,3782,21,3783,21,3784,21,3785,21,3786,21,3787,21,3788,21,3789,21,3790,21,3791,21,3792,21,3793,21,3794,21,3795,21,3796,21,3797,21,3798,21,3799,21,3800,21,3801,21,3802,21,3803,21,3804,21,3805,21,3806,21,3807,21,3808,21,3809,21,3810,21,3811,21,3812,21,3813,21,3814,21,3815,21,3816,21,3817,21,3818,21,3819,21,3820,21,3821,21,3822,21,3823,21,3824,21,3825,21,3826,21,3827,21,3828,21,3829,21,3830,21,3831,21,3832,21,3833,21,3834,21,3835,21,3836,21,3837,21,3838,21,3839,21,3840,21,3841,21,3842,21,3843,21,3844,21,3845,21,3846,21,3847,21,3848,21,3849,21,3850,21,3851,21,3852,21,3853,21,3854,21,3855,21,3856,21,3857,21,3858,21,3859,21,3860,21,3861,21,3862,21,3863,21,3864,21,3865,21,3866,21,3867,21,3868,21,3869,21,3870,21,3871,21,3872,21,3873,21,3874,21,3875,21,3876,21,3877,21,3878,21,3879,21,3880,21,3881,21,3882,21,3883,21,3884,21,3885,21,3886,21,3887,21,3888,21,3889,21,3890,21,3891,21,3892,21,3893,21,3894,21,3895,21,3896,21,3897,21,3898,21,3899,21,3900,21,3901,21,3902,21,3903,21,3904,21,3905,21,3906,21,3907,21,3908,21,3909,21,3910,21,3911,21,3912,21,3913,21,3914,21,3915,21,3916,21,3917,21,3918,21,3919,21,3920,21,3921,21,3922,21,3923,21,3924,21,3925,21,3926,21,3927,21,3928,21,3929,21,3930,21,3931,21,3932,21,3933,21,3934,21,3935,21,3936,21,3937,21,3938,21,3939,21,3940,21,3941,21,3942,21,3943,21,3944,21,3945,21,3946,21,3947,21,3948,21,3949,21,3950,21,3951,21,3952,21,3953,21,3954,21,3955,21,3956,21,3957,21,3958,21,3959,21,3960,21,3961,21,3962,21,3963,21,3964,21,3965,21,3966,21,3967,21,3968,21,3969,21,3970,21,3971,21,3972,21,3973,21,3974,21,3975,21,3976,21,3977,21,3978,21,3979,21,3980,21,3981,21,3982,21,3983,21,3984,21,3985,21,3986,21,3987,21,3988,21,3989,21,3990,21,3991,21,3992,21,3993,21,3994,21,3995,21,3996,21,3997,21,3998,21,3999,21,4000,21,4001,21,4002,21,4003,21,4004,21,4005,21,4006,21,4007,21,4008,21,4009,21,4010,21,4011,21,4012,21,4013,21,4014,21,4015,21,4016,21,4017,21,4018,21,4019,21,4020,21,4021,21,4022,21,4023,21,4024,21,4025,21,4026,21,4027,21,4028,21,4029,21,4030,21,4031,21,4032,21,4033,21,4034,21,4035,21,4036,21,4037,21,4038,21,4039,21,4040,21,4041,21,4042,21,4043,21,4044,21,4045,21,4046,21,4047,21,4048,21,4049,21,4050,21,4051,21,4052,21,4053,21,4054,21,4055,21,4056,21,4057,538,4058,534,4059,534,4060,534,4061,534,4062,534,4063,534,4064,534,4065,534,4066,534,4067,534,4068,534,4069,534,4070,25,4071,25,4072,25,4073,25,4074,25,4075,25,4076,25,4077,25,4078,25,4079,25,4080,25,4081,26,4082,25,4083,25,4084,25,4085,25,4086,25,4087,27,4088,27,4089,27,4090,27,4091,27,4092,27,4093,27,4094,27,4095,28,4096,28,4097,28,4098,28,4099,28,4100,29,4101,29,4102,30,4103,30,4104,31,4105,31,4106,31,4107,32,4108,32,4109,33,4110,33,4111,33,4112,33,4113,33,4114,33,4115,33,4116,33,4117,33,4118,33,4119,34,4120,34,4121,34,4122,34,4123,34,4124,34,4125,34,4126,34,4127,35,4128,35,4129,35,4130,35,4131,36,4132,36,4133,36,4134,37,4135,37,4136,37,4137,37,4138,37,4139,37,4140,37,4141,37,4142,38,4143,38,4144,38,4145,38,4146,38,4147,38,4148,38,4149,39,4150,39,4151,39,4152,39,4153,40,4154,40,4155,40,4156,41,4157,41,4158,41,4159,41,4160,41,4161,42,4162,42,4163,42,4164,42,4165,43,4166,43,4167,43,4168,44,4169,44,4170,44,4171,45,4172,45,4173,45,4174,45,4175,45,4176,46,4177,46,4178,46,4179,46,4180,46,4181,51,4182,51,4183,52,4184,52,4185,53,4186,53,4187,53,4188,53,4189,53,4190,53,4191,53,4192,53,4193,54,4194,54,4195,54,4196,54,4197,54,4198,54,4199,54,4200,55,4201,55,4202,55,4203,55,4204,55,4205,55,4206,55,4207,55,4208,55,4209,55,4210,55,4211,56,4212,55,4213,55,4214,55,4215,55,4216,55,4217,57,4218,57,4219,58,4220,58,4221,59,4222,59,4223,59,4224,59,4225,59,4226,59,4227,59,4228,59,4229,59,4230,59,4231,59,4232,60,4233,59,4234,59,4235,59,4236,59,4237,59,4238,61,4239,61,4240,62,4241,62,4242,63,4243,63,4244,64,4245,64,4246,65,4247,65,4248,65,4249,65,4250,66,4251,66,4252,66,4253,66,4254,67,4255,67,4256,67,4257,67,4258,67,4259,67,4260,67,4261,68,4262,68,4263,68,4264,68,4265,69,4266,69,4267,69,4268,69,4269,69,4270,69,4271,69,4272,69,4273,69,4274,69,4275,70,4276,70,4277,70,4278,70,4279,70,4280,70,4281,70,4282,70,4283,71,4284,71,4285,71,4286,71,4287,71,4288,71,4289,71,4290,71,4291,72,4292,72,4293,72,4294,72,4295,72,4296,72,4297,72,4298,73,4299,73,4300,73,4301,74,4302,74,4303,75,4304,75,4305,75,4306,76,4307,76,4308,76,4309,77,4310,77,4311,77,4312,77,4313,77,4314,77,4315,77,4316,77,4317,77,4318,77,4319,77,4320,78,4321,77,4322,77,4323,77,4324,77,4325,77,4326,79,4327,79,4328,79,4329,79,4330,79,4331,79,4332,79,4333,79,4334,79,4335,79,4336,79,4337,80,4338,79,4339,79,4340,79,4341,79,4342,79,4343,81,4344,81,4345,81,4346,81,4347,81,4348,81,4349,81,4350,82,4351,82,4352,82,4353,82,4354,82,4355,83,4356,83,4357,84,4358,84,4359,85,4360,85,4361,85,4362,85,4363,85,4364,85,4365,85,4366,85,4367,85,4368,86,4369,86,4370,86,4371,86,4372,86,4373,86,4374,86,4375,87,4376,87,4377,88,4378,88,4379,89,4380,89,4381,90,4382,91,4383,92,4384,93,4385,93,4386,93,4387,93,4388,94,4389,94,4390,94,4391,95,4392,95,4393,95,4394,95,4395,95,4396,95,4397,95,4398,96,4399,96,4400,96,4401,96,4402,97,4403,97,4404,97,4405,98,4406,98,4407,98,4408,99,4409,99,4410,99,4411,99,4412,100,4413,100,4414,100,4415,101,4416,101,4417,101,4418,102,4419,102,4420,102,4421,103,4422,103,4423,103,4424,103,4425,103,4426,103,4427,103,4428,103,4429,103,4430,103,4431,103,4432,104,4433,103,4434,103,4435,103,4436,103,4437,103,4438,105,4439,105,4440,105,4441,105,4442,105,4443,105,4444,105,4445,105,4446,105,4447,105,4448,105,4449,106,4450,105,4451,105,4452,105,4453,105,4454,105,4455,107,4456,107,4457,107,4458,108,4459,108,4460,108,4461,109,4462,109,4463,109,4464,109,4465,109,4466,109,4467,109,4468,109,4469,109,4470,110,4471,110,4472,110,4473,110,4474,110,4475,110,4476,110,4477,111,4478,111,4479,112,4480,112,4481,113,4482,113,4483,114,4484,114,4485,115,4486,115,4487,116,4488,116,4491,117,4492,118,4493,119,4494,120,4495,121,4496,122,4497,123,4498,123,4499,123,4500,123,4501,123,4502,123,4503,123,4504,123,4505,123,4506,123,4507,124,4508,124,4509,124,4510,124,4511,124,4512,124,4513,124,4514,124,4515,125,4516,125,4517,125,4518,125,4519,125,4520,125,4521,125,4522,125,4523,126,4524,126,4525,126,4526,126,4527,126,4528,126,4529,127,4530,127,4531,127,4532,127,4533,127,4534,127,4535,127,4536,127,4537,127,4538,128,4539,128,4540,128,4541,128,4542,128,4543,128,4544,128,4546,129,4547,130,4548,131,4549,131,4550,131,4551,131,4552,132,4553,132,4554,132,4555,133,4556,133,4557,133,4558,134,4559,134,4560,134,4561,135,4562,135,4563,135,4564,135,4565,135,4566,136,4567,136,4568,136,4569,136,4570,136,4571,137,4572,138,4574,139,4575,139,4576,140,4577,140,4578,141,4579,141,4580,141,4581,141,4582,141,4583,141,4584,141,4585,141,4586,141,4587,141,4588,141,4589,142,4590,141,4591,141,4592,141,4593,141,4594,141,4595,143,4596,143,4597,143,4598,144,4599,144,4600,144,4601,145,4602,145,4603,145,4604,145,4605,145,4606,145,4607,145,4608,145,4609,145,4610,145,4611,145,4612,146,4613,145,4614,145,4615,145,4616,145,4617,145,4618,147,4619,148,4620,149,4621,149,4622,149,4623,149,4624,149,4625,150,4626,150,4627,150,4628,150,4629,150,4630,151,4631,151,4632,151,4633,151,4634,152,4635,152,4636,152,4637,152,4638,153,4639,153,4640,154,4641,154,4642,155,4643,155,4644,155,4645,155,4646,155,4647,155,4648,155,4649,155,4650,155,4651,155,4652,155,4653,156,4654,155,4655,155,4656,155,4657,155,4658,155,4659,157,4660,157,4661,158,4662,158,4664,160,4665,160,4666,160,4667,160,4668,160,4669,160,4670,160,4671,160,4672,160,4673,160,4674,160,4675,161,4676,160,4677,160,4678,160,4679,160,4680,160,4681,162,4682,162,4683,163,4684,164,4685,164,4686,164,4687,164,4688,164,4689,164,4690,165,4691,165,4692,165,4693,165,4694,165,4695,166,4696,167,4697,168,4698,168,4699,168,4700,168,4701,169,4702,169,4703,169,4704,169,4705,170,4706,170,4707,170,4708,170,4709,171,4710,171,4711,171,4712,171,4713,172,4714,173,4715,174,4716,174,4717,175,4718,175,4719,176,4720,176,4721,177,4722,177,4723,178,4724,178,4725,178,4726,178,4727,178,4728,178,4729,178,4730,178,4731,178,4732,178,4733,178,4734,179,4735,179,4736,179,4737,179,4738,179,4739,179,4740,179,4741,179,4742,179,4743,180,4744,181,4745,182,4746,182,4747,182,4748,182,4749,183,4750,183,4751,183,4752,184,4753,184,4754,184,4755,184,4756,184,4757,185,4758,185,4759,185,4760,185,4761,186,4762,186,4763,187,4764,187,4765,188,4766,188,4767,188,4768,188,4769,189,4770,189,4771,189,4772,190,4773,190,4774,190,4775,190,4776,190,4777,190,4778,191,4779,191,4780,191,4781,191,4782,191,4783,191,4784,192,4785,193,4786,194,4787,195,4788,196,4789,196,4790,196,4791,196,4792,196,4793,196,4794,197,4795,197,4796,197,4797,197,4798,197,4799,197,4800,198,4801,198,4802,198,4803,198,4804,199,4805,199,4806,199,4807,200,4808,200,4809,201,4810,201,4811,202,4812,202,4813,202,4814,202,4815,202,4816,202,4817,202,4818,202,4819,202,4820,202,4821,202,4822,203,4823,202,4824,202,4825,202,4826,202,4827,202,4828,204,4829,204,4830,204,4831,204,4832,204,4833,204,4834,204,4835,204,4836,204,4837,204,4838,204,4839,205,4840,204,4841,204,4842,204,4843,204,4844,204,4845,206,4846,206,4847,206,4848,206,4849,206,4850,206,4851,206,4852,206,4853,207,4854,207,4855,207,4856,207,4857,207,4858,207,4859,207,4860,208,4861,208,4862,209,4863,209,4864,210,4865,210,4866,211,4867,211,4868,212,4869,213,4870,214,4871,214,4872,214,4873,214,4874,214,4875,214,4876,214,4877,214,4878,215,4879,215,4880,215,4881,215,4882,215,4883,215,4884,216,4885,216,4886,217,4887,217,4888,218,4889,218,4890,218,4891,218,4892,218,4893,218,4894,219,4895,219,4896,219,4897,219,4898,219,4899,220,4900,220,4901,220,4902,220,4903,221,4904,221,4905,221,4906,221,4907,222,4908,222,4909,222,4910,222,4911,222,4912,222,4913,223,4914,223,4915,223,4916,223,4917,223,4918,223,4919,224,4920,224,4921,225,4922,225,4923,226,4924,226,4925,226,4926,226,4927,227,4928,227,4929,227,4930,227,4931,228,4932,229,4933,230,4934,230,4935,230,4936,230,4937,231,4938,231,4939,231,4940,231,4941,232,4942,232,4943,232,4944,232,4945,232,4946,232,4947,232,4948,232,4949,233,4950,233,4951,233,4952,233,4953,233,4954,233,4955,233,4956,233,4957,234,4958,234,4959,234,4960,235,4961,235,4962,235,4963,236,4964,236,4965,236,4966,236,4967,236,4968,237,4969,237,4970,237,4971,237,4972,238,4973,238,4974,238,4975,238,4976,238,4977,238,4978,238,4979,238,4980,238,4981,238,4982,238,4983,239,4984,238,4985,238,4986,238,4987,238,4988,238,4989,240,4990,240,4991,240,4992,240,4993,241,4994,241,4995,241,4996,242,4997,242,4998,242,4999,242,5000,242,5001,242,5002,243,5003,243,5004,243,5005,243,5006,244,5007,244,5008,244,5009,244,5010,245,5011,245,5012,245,5013,245,5014,246,5015,247,5016,248,5017,248,5018,248,5019,248,5020,248,5021,248,5022,249,5023,249,5024,249,5025,249,5026,249,5027,250,5028,250,5029,250,5030,250,5031,250,5032,250,5033,250,5034,250,5035,250,5036,251,5037,251,5038,251,5039,251,5040,251,5041,251,5042,251,5043,251,5044,252,5045,252,5046,252,5047,252,5048,253,5049,253,5050,253,5051,253,5052,254,5053,255,5054,256,5055,256,5056,256,5057,256,5058,256,5059,256,5060,256,5061,256,5062,256,5063,256,5064,256,5065,257,5066,256,5067,256,5068,256,5069,256,5070,256,5071,258,5072,258,5073,259,5074,259,5075,260,5076,260,5077,260,5078,260,5079,260,5080,260,5081,260,5082,260,5083,260,5084,260,5085,260,5086,261,5087,260,5088,260,5089,260,5090,260,5091,260,5092,262,5093,262,5094,263,5095,263,5096,264,5097,264,5098,264,5099,264,5100,264,5101,265,5102,265,5103,265,5104,265,5105,266,5106,267,5107,268,5108,269,5109,270,5110,270,5111,270,5112,270,5113,271,5114,271,5115,271,5116,271,5117,272,5118,272,5119,272,5120,272,5121,272,5122,272,5123,273,5124,273,5125,273,5126,273,5127,273,5129,274,5130,274,5131,274,5132,274,5133,274,5134,274,5135,274,5136,274,5137,274,5138,275,5139,275,5140,275,5141,275,5142,275,5143,275,5144,275,5145,276,5146,277,5147,278,5148,279,5149,280,5150,280,5151,280,5152,280,5153,280,5154,280,5155,281,5156,281,5157,281,5158,281,5159,281,5160,282,5161,283,5162,284,5163,284,5164,285,5165,285,5166,286,5167,286,5168,286,5169,287,5170,287,5171,288,5172,288,5173,288,5174,288,5175,288,5176,288,5177,288,5178,288,5179,288,5180,288,5181,288,5182,289,5183,288,5184,288,5185,288,5186,288,5187,288,5188,290,5189,291,5190,292,5191,292,5192,293,5193,293,5194,294,5195,294,5196,294,5197,294,5198,294,5199,294,5200,294,5201,294,5202,294,5203,294,5204,294,5205,295,5206,294,5207,294,5208,294,5209,294,5210,294,5211,296,5212,297,5213,298,5214,298,5215,299,5216,299,5217,300,5218,300,5219,301,5220,301,5221,302,5222,302,5223,302,5224,302,5225,303,5226,303,5227,303,5228,303,5229,304,5230,304,5231,305,5232,305,5233,306,5234,306,5235,306,5236,306,5237,306,5238,306,5239,306,5240,306,5241,306,5242,306,5243,306,5244,307,5245,306,5246,306,5247,306,5248,306,5249,306,5250,308,5251,308,5252,308,5253,308,5254,308,5255,308,5256,308,5257,308,5258,308,5259,308,5260,308,5261,309,5262,308,5263,308,5264,308,5265,308,5266,308,5267,310,5268,310,5269,311,5270,311,5271,312,5272,312,5273,312,5274,312,5275,313,5276,313,5277,313,5278,313,5279,314,5280,314,5281,314,5282,314,5283,314,5284,314,5285,314,5286,314,5287,314,5288,314,5289,315,5290,315,5291,315,5292,315,5293,315,5294,315,5295,315,5296,316,5297,316,5298,316,5299,317,5300,317,5301,317,5302,318,5303,318,5304,318,5305,318,5306,319,5307,319,5308,319,5309,319,5310,320,5311,320,5312,320,5313,320,5314,321,5315,321,5316,321,5317,321,5318,322,5319,322,5320,323,5321,323,5322,324,5323,324,5324,325,5325,325,5326,326,5327,326,5328,326,5329,326,5330,326,5331,326,5332,326,5333,326,5334,326,5335,326,5336,326,5337,327,5338,326,5339,326,5340,326,5341,326,5342,326,5343,328,5344,329,5345,330,5346,330,5347,330,5348,330,5349,330,5350,330,5351,330,5352,330,5353,330,5354,330,5355,330,5356,331,5357,330,5358,330,5359,330,5360,330,5361,330,5362,332,5363,332,5364,332,5365,332,5366,332,5367,332,5368,332,5369,332,5370,332,5371,332,5372,332,5373,333,5374,332,5375,332,5376,332,5377,332,5378,332,5379,334,5380,334,5381,334,5382,334,5383,334,5384,334,5385,334,5386,334,5387,334,5388,334,5389,334,5390,335,5391,334,5392,334,5393,334,5394,334,5395,334,5396,336,5397,336,5398,336,5399,336,5400,337,5401,337,5402,337,5403,337,5404,338,5405,338,5406,339,5407,339,5408,340,5409,340,5410,341,5411,341,5412,342,5413,342,5414,342,5415,342,5416,342,5417,342,5418,342,5419,342,5420,342,5421,342,5422,342,5423,343,5424,342,5425,342,5426,342,5427,342,5428,342,5429,344,5430,344,5431,344,5432,344,5433,344,5434,344,5435,344,5436,344,5437,344,5438,344,5439,344,5440,345,5441,344,5442,344,5443,344,5444,344,5445,344,5446,346,5447,346,5448,346,5449,346,5450,346,5451,347,5452,347,5453,347,5454,347,5455,348,5456,348,5457,348,5458,348,5459,348,5460,348,5461,348,5462,348,5463,348,5464,348,5465,348,5466,349,5467,348,5468,348,5469,348,5470,348,5471,348,5472,350,5473,351,5474,352,5475,353,5476,354,5477,354,5478,354,5479,354,5480,354,5481,354,5482,354,5483,354,5484,354,5485,354,5486,354,5487,355,5488,354,5489,354,5490,354,5491,354,5492,354,5493,356,5494,356,5495,356,5496,356,5497,357,5498,357,5499,357,5500,358,5501,358,5502,358,5503,358,5504,358,5505,358,5506,358,5507,359,5508,359,5509,359,5510,359,5511,359,5512,359,5513,360,5514,360,5515,360,5516,360,5517,360,5518,360,5519,360,5520,360,5521,360,5522,360,5523,360,5524,361,5525,360,5526,360,5527,360,5528,360,5529,360,5530,362,5531,362,5532,363,5533,363,5534,364,5535,364,5536,364,5537,365,5538,365,5539,366,5540,366,5541,367,5542,367,5543,368,5544,369,5545,370,5546,370,5547,370,5548,370,5549,370,5550,370,5551,370,5552,370,5553,370,5554,370,5555,370,5556,371,5557,370,5558,370,5559,370,5560,370,5561,370,5562,372,5563,372,5564,373,5565,373,5566,374,5567,374,5568,374,5569,375,5570,375,5571,375,5572,376,5573,376,5574,377,5575,377,5576,378,5577,378,5578,378,5579,378,5580,379,5581,379,5582,379,5583,380,5584,380,5585,380,5586,380,5587,380,5588,380,5589,380,5590,380,5591,380,5592,380,5593,380,5594,381,5595,380,5596,380,5597,380,5598,380,5599,380,5600,382,5601,382,5602,382,5603,382,5604,383,5605,383,5606,383,5607,383,5608,384,5609,384,5610,384,5611,384,5612,385,5613,385,5614,385,5615,386,5616,386,5617,386,5618,386,5619,387,5620,387,5621,387,5622,388,5623,388,5624,388,5625,388,5626,388,5627,388,5628,388,5629,389,5630,389,5631,389,5632,389,5633,389,5634,389,5635,389,5636,390,5637,390,5638,390,5639,390,5640,390,5641,390,5642,390,5643,390,5644,390,5645,390,5646,390,5647,391,5648,390,5649,390,5650,390,5651,390,5652,390,5653,392,5654,392,5655,392,5656,392,5657,393,5658,393,5659,393,5660,394,5661,394,5662,394,5663,394,5664,394,5665,394,5666,394,5667,394,5668,394,5669,394,5670,394,5671,395,5672,394,5673,394,5674,394,5675,394,5676,394,5677,396,5678,396,5679,396,5680,396,5681,396,5682,397,5683,397,5684,397,5685,397,5686,398,5687,398,5688,398,5689,398,5690,399,5691,399,5692,399,5693,399,5694,400,5695,400,5696,400,5697,400,5698,401,5699,401,5700,401,5701,401,5702,402,5703,402,5704,402,5705,403,5706,403,5707,403,5708,404,5709,404,5710,404,5711,404,5712,404,5713,404,5714,404,5715,404,5716,404,5717,404,5718,404,5719,405,5720,404,5721,404,5722,404,5723,404,5724,404,5725,406,5726,406,5727,406,5728,406,5729,406,5730,406,5731,406,5732,406,5733,406,5734,406,5735,406,5736,407,5737,406,5738,406,5739,406,5740,406,5741,406,5742,408,5743,408,5744,408,5745,408,5746,408,5747,408,5748,408,5749,408,5750,408,5751,408,5752,408,5753,409,5754,408,5755,408,5756,408,5757,408,5758,408,5759,410,5760,410,5761,410,5762,411,5763,411,5764,412,5765,412,5766,413,5767,413,5768,414,5769,414,5770,414,5771,415,5772,415,5773,415,5774,416,5775,416,5776,416,5777,416,5778,416,5779,416,5780,416,5781,416,5782,416,5783,416,5784,416,5785,417,5786,416,5787,416,5788,416,5789,416,5790,416,5791,418,5792,418,5793,418,5794,418,5795,419,5796,419,5797,419,5798,419,5799,420,5800,420,5801,420,5802,421,5803,421,5804,421,5805,422,5806,422,5807,422,5808,423,5809,423,5810,423,5811,424,5812,424,5813,424,5814,424,5815,424,5816,424,5817,424,5818,424,5819,424,5820,424,5821,424,5822,425,5823,424,5824,424,5825,424,5826,424,5827,424,5828,426,5829,426,5830,426,5831,427,5832,427,5833,427,5834,428,5835,428,5836,429,5837,429,5838,430,5839,430,5840,430,5841,431,5842,431,5843,431,5844,432,5845,432,5846,433,5847,433,5848,434,5849,434,5850,434,5851,434,5852,434,5853,435,5854,435,5855,435,5856,435,5857,435,5858,436,5859,436,5860,436,5861,436,5862,436,5863,436,5864,436,5865,436,5866,436,5867,436,5868,436,5869,437,5870,436,5871,436,5872,436,5873,436,5874,436,5875,438,5876,438,5877,438,5878,438,5879,438,5880,438,5881,438,5882,439,5883,439,5884,439,5885,439,5886,439,5887,439,5888,439,5889,440,5890,440,5891,440,5892,440,5893,441,5894,441,5895,441,5896,441,5897,442,5898,442,5899,442,5900,442,5901,443,5902,443,5903,443,5904,443,5905,444,5906,444,5907,444,5908,444,5909,444,5910,444,5911,445,5912,445,5913,445,5914,446,5915,446,5916,446,5919,447,5920,447,5921,447,5922,447,5923,447,5924,447,5925,448,5926,448,5927,448,5928,448,5929,448,5930,449,5931,449,5932,449,5933,449,5934,449,5935,449,5936,449,5937,449,5938,450,5939,450,5940,450,5941,450,5942,450,5943,450,5944,450,5945,451,5946,451,5947,452,5948,452,5951,453,5952,453,5953,453,5954,453,5955,454,5956,454,5957,454,5958,455,5959,455,5960,455,5961,457,5962,457,5963,457,5964,458,5965,458,5966,458,5967,459,5968,459,5969,460,5970,460,5971,461,5972,461,5973,461,5974,461,5975,461,5976,461,5977,461,5978,461,5979,461,5980,461,5981,462,5982,462,5983,462,5984,462,5985,462,5986,462,5987,462,5988,462,5989,463,5990,463,5991,463,5992,463,5993,463,5994,463,5995,463,5996,463,5997,463,5998,463,5999,463,6000,464,6001,463,6002,463,6003,463,6004,463,6005,463,6006,465,6007,465,6008,465,6009,465,6010,465,6011,465,6012,465,6013,465,6014,465,6015,465,6016,465,6017,466,6018,465,6019,465,6020,465,6021,465,6022,465,6023,467,6024,467,6025,468,6026,468,6027,469,6028,470,6029,471,6030,471,6031,471,6032,471,6033,472,6034,472,6035,472,6036,473,6037,473,6038,473,6039,474,6040,474,6041,474,6042,475,6043,475,6044,475,6045,476,6046,476,6047,476,6048,477,6049,477,6050,477,6051,477,6052,477,6053,477,6054,477,6055,478,6056,478,6057,478,6058,478,6059,478,6060,478,6061,479,6062,479,6063,480,6064,480,6065,481,6066,481,6067,482,6068,482,6069,483,6070,483,6071,483,6072,484,6073,484,6074,484,6075,485,6076,485,6077,485,6078,485,6079,485,6080,485,6081,485,6082,485,6083,485,6084,485,6085,486,6086,486,6087,486,6088,486,6089,486,6090,486,6091,486,6092,486,6093,487,6094,487,6095,487,6096,487,6097,488,6098,488,6099,488,6103,489,6104,489,6105,490,6106,490,6107,491,6108,491,6109,492,6110,492,6111,493,6112,493,6113,493,6114,493,6115,493,6116,493,6117,493,6118,493,6119,493,6120,493,6121,493,6122,493,6123,494,6124,494,6125,494,6126,494,6127,494,6128,494,6129,494,6130,494,6131,494,6132,494,6133,494,6134,494,6135,495,6136,495,6137,495,6138,495,6139,495,6140,496,6141,496,6142,496,6143,496,6144,497,6145,497,6146,498,6147,498,6148,499,6149,499,6150,500,6151,500,6152,501,6153,501,6154,501,6155,501,6156,501,6157,501,6158,501,6159,501,6160,501,6161,501,6162,501,6163,502,6164,501,6165,501,6166,501,6167,501,6168,501,6169,503,6170,503,6171,503,6172,503,6173,504,6174,504,6175,504,6176,505,6177,505,6178,505,6179,505,6180,506,6181,506,6182,506,6183,507,6184,507,6185,507,6186,507,6187,507,6188,507,6189,508,6190,508,6191,508,6192,508,6193,508,6194,509,6195,509,6196,509,6197,509,6198,509,6199,510,6200,510,6201,510,6202,510,6203,511,6204,511,6205,512,6206,512,6207,513,6208,513,6209,513,6210,513,6211,513,6212,513,6213,513,6214,513,6215,513,6216,513,6217,513,6218,513,6219,513,6220,513,6221,513,6222,513,6223,513,6224,513,6225,513,6226,535,6227,535,6228,535,6229,535,6230,535,6231,535,6232,535,6233,535,6234,535,6235,535,6236,535,6237,535,6238,535,6239,535,6240,535,6241,535,6242,535,6243,535,6244,535,6245,535,6246,535,6247,535,6248,535,6249,535,6250,535,6251,535,6252,535,6253,535,6254,535,6255,535,6256,535,6257,535,6258,535,6259,535,6260,535,6261,535,6262,535,6263,535,6264,535,6265,535,6266,535,6267,535,6268,535,6269,535,6270,535,6271,535,6272,535,6273,535,6274,535,6275,535,6276,535,6277,535,6278,535,6279,535,6280,535,6281,535,6282,535,6283,535,6284,535,6285,535,6286,535,6287,535,6288,535,6289,535,6290,535,6291,535,6292,535,6293,535,6294,535,6295,535,6296,535,6297,535,6298,535,6299,535,6300,535,6301,535,6302,535,6303,535,6304,535,6305,535,6306,535,6307,535,6308,535,6309,535,6310,535,6311,535,6312,535,6313,535,6314,535,6315,535,6316,535,6317,535,6318,535,6319,535,6320,535,6321,535,6322,535,6323,535,6324,535,6325,535,6326,535,6327,535,6328,535,6329,535,6330,535,6331,535,6332,535,6333,535,6334,535,6335,535,6336,535,6337,535,6338,535,6339,535,6340,535,6341,535,6342,535,6343,535,6344,535,6345,535,6346,535,6347,535,6348,535,6349,535,6350,535,6351,535,6352,535,6353,535,6354,535,6355,535,6356,535,6357,535,6358,535,6359,535,6360,535,6361,535,6362,535,6363,535,6364,535,6365,535,6366,535,6367,535,6368,535,6369,535,6370,535,6371,535,6372,535,6373,535,6374,535,6375,535,6376,535,6377,535,6378,535,6379,535,6380,535,6381,535,6382,535,6383,535,6384,535,6385,535,6386,535,6387,535,6388,535,6389,535,6390,535,6391,535,6392,535,6393,535,6394,535,6395,535,6396,535,6397,535,6398,535,6399,535,6400,535,6401,535,6402,535,6403,535,6404,535,6405,535,6406,535,6407,535,6408,535,6409,535,6410,535,6411,535,6412,535,6413,535,6414,535,6415,535,6416,535,6417,535,6418,535,6419,535,6420,535,6421,535,6422,535,6423,535,6424,535,6425,535,6426,535,6427,535,6428,535,6429,535,6430,535,6431,535,6432,535,6433,535,6434,535,6435,535,6436,535,6437,535,6438,535,6439,535,6440,535,6441,535,6442,535,6443,535,6444,535,6445,535,6446,535,6447,535,6448,535,6449,535,6450,535,6451,535,6452,535,6453,535,6454,535,6455,535,6456,535,6457,535,6458,535,6459,535,6460,535,6461,535,6462,535,6463,535,6464,535,6465,535,6466,535,6467,535,6468,535,6469,535,6470,535,6471,535,6472,535,6473,535,6474,535,6475,535,6476,535,6477,535,6478,535,6479,535,6480,535,6481,535,6482,535,6483,535,6484,535,6485,535,6486,535,6487,535,6488,535,6489,535,6490,535,6491,535,6492,535,6493,535,6494,535,6495,535,6496,535,6497,535,6498,535,6499,535,6500,535,6501,535,6502,535,6503,535,6504,535,6505,535,6506,535,6507,535,6508,535,6509,535,6510,535,6511,535,6512,535,6513,535,6514,535,6515,535,6516,535,6517,535,6518,535,6519,535,6520,535,6521,535,6522,535,6523,535,6524,535,6525,535,6526,535,6527,535,6528,535,6529,535,6530,535,6531,535,6532,535,6533,535,6534,535,6535,535,6536,535,6537,535,6538,535,6539,535,6540,535,6541,535,6542,535,6543,535,6544,535,6545,535,6546,535,6547,535,6548,535,6549,535,6550,535,6551,535,6552,535,6553,535,6554,535,6555,535,6556,535,6557,535,6558,535,6559,535,6560,535,6561,535,6562,535,6563,535,6564,535,6565,535,6566,535,6567,535,6568,535,6569,535,6570,535,6571,535,6572,535,6573,535,6574,535,6575,535,6576,535,6577,535,6578,535,6579,535,6580,535,6581,535,6582,535,6583,535,6584,535,6585,535,6586,535,6587,535,6588,535,6589,535,6590,535,6591,535,6592,535,6593,535,6594,535,6595,535,6596,535,6597,535,6598,535,6599,535,6600,535,6601,535,6602,535,6603,535,6604,535,6605,535,6606,535,6607,535,6608,535,6609,535,6610,535,6611,535,6612,535,6613,535,6614,535,6615,535,6616,535,6617,535,6618,535,6619,535,6620,535,6621,535,6622,535,6623,535,6624,535,6625,535,6626,535,6627,535,6628,535,6629,535,6630,535,6631,535,6632,535,6633,535,6634,535,6635,535,6636,535,6637,535,6638,535,6639,535,6640,535,6641,535,6642,535,6643,535,6644,535,6645,535,6646,535,6647,535,6648,535,6649,535,6650,535,6651,535,6652,535,6653,535,6654,535,6655,535,6656,535,6657,535,6658,535,6659,535,6660,535,6661,535,6662,535,6663,535,6664,535,6665,535,6666,535,6667,535,6668,535,6669,535,6670,535,6671,535,6672,535,6673,535,6674,535,6675,535,6676,535,6677,535,6678,535,6679,535,6680,535,6681,535,6682,535,6683,535,6684,535,6685,535,6686,535,6687,535,6688,535,6689,535,6690,535,6691,535,6692,535,6693,535,6694,535,6695,535,6696,535,6697,535,6698,535,6699,535,6700,535,6701,535,6702,535,6703,535,6704,535,6705,535,6706,535,6707,535,6708,535,6709,535,6710,535,6711,535,6712,535,6713,535,6714,535,6715,535,6716,535,6717,535,6718,516,6719,517,6720,520,6721,536,6722,536,6723,536,6724,536,6725,536,6726,536,6727,536,6728,536,6729,536,6730,536,6731,536,6732,536,6733,536,6734,536,6735,536,6736,536,6737,536,6738,536,6739,536,6740,536,6741,536,6742,536,6743,536,6744,536,6745,536,6746,536,6747,536,6748,536,6749,536,6750,536,6751,536,6752,536,6753,536,6754,536,6755,536,6756,536,6757,536,6758,536,6759,536,6760,536,6761,536,6762,536,6763,536,6764,536,6765,536,6766,536,6767,536,6768,536,6769,536,6770,536,6771,536,6772,536,6773,536,6774,536,6775,536,6776,536,6777,536,6778,536,6779,536,6780,536,6781,536,6782,536,6783,536,6784,536,6785,536,6786,536,6787,536,6788,536,6789,536,6790,536,6791,536,6792,536,6793,536,6794,536,6795,536,6796,536,6797,536,6798,536,6799,536,6800,536,6801,536,6802,536,6803,536,6804,536,6805,536,6806,536,6807,536,6808,536,6809,536,6810,536,6811,536,6812,536,6813,536,6814,536,6815,536,6816,536,6817,536,6818,536,6819,536,6820,536,6821,536,6822,536,6823,536,6824,536,6825,536,6826,536,6827,536,6828,536,6829,536,6830,536,6831,536,6832,536,6833,536,6834,536,6835,536,6836,536,6837,536,6838,536,6839,536,6840,536,6841,536,6842,536,6843,536,6844,536,6845,536,6846,536,6847,536,6848,536,6849,536,6850,536,6851,536,6852,536,6853,536,6854,536,6855,536,6856,536,6857,536,6858,536,6859,536,6860,536,6861,536,6862,536,6863,536,6864,536,6865,536,6866,536,6867,536,6868,536,6869,536,6870,536,6871,536,6872,536,6873,536,6874,536,6875,536,6876,536,6877,536,6878,536,6879,536,6880,536,6881,536,6882,536,6883,536,6884,536,6885,536,6886,536,6887,536,6888,536,6889,536,6890,536,6891,536,6892,536,6893,536,6894,536,6895,536,6896,536,6897,536,6898,536,6899,536,6900,536,6901,536,6902,536,6903,536,6904,536,6905,536,6906,536,6907,536,6908,536,6909,536,6910,536,6911,536,6912,536,6913,536,6914,536,6915,536,6916,536,6917,536,6918,536,6919,536,6920,536,6921,536,6922,536,6923,536,6924,536,6925,536,6926,536,6927,536,6928,536,6929,536,6930,536,6931,536,6932,536,6933,536,6934,536,6935,536,6936,536,6937,536,6938,536,6939,536,6940,536,6941,536,6942,536,6943,536,6944,536,6945,536,6946,536,6947,536,6948,536,6949,536,6950,536,6951,536,6952,536,6953,536,6954,536,6955,536,6956,536,6957,536,6958,536,6959,536,6960,536,6961,536,6962,536,6963,536,6964,536,6965,536,6966,536,6967,536,6968,536,6969,536,6970,536,6971,536,6972,536,6973,536,6974,536,6975,536,6976,536,6977,536,6978,536,6979,536,6980,536,6981,536,6982,536,6983,536,6984,536,6985,536,6986,536,6987,536,6988,536,6989,536,6990,536,6991,536,6992,536,6993,536,6994,536,6995,536,6996,536,6997,536,6998,536,6999,536,7000,536,7001,536,7002,536,7003,536,7004,536,7005,536,7006,536,7007,536,7008,536,7009,536,7010,536,7011,536,7012,536,7013,536,7014,536,7015,536,7016,536,7017,536,7018,536,7019,536,7020,536,7021,536,7022,536,7023,536,7024,536,7025,536,7026,536,7027,536,7028,536,7029,536,7030,536,7031,536,7032,536,7033,536,7034,536,7035,536,7036,536,7037,536,7038,536,7039,536,7040,536,7041,536,7042,536,7043,536,7044,536,7045,536,7046,536,7047,536,7048,536,7049,536,7050,536,7051,536,7052,536,7053,536,7054,536,7055,536,7056,536,7057,536,7058,536,7059,536,7060,536,7061,536,7062,536,7063,536,7064,536,7065,536,7066,536,7067,536,7068,536,7069,536,7070,536,7071,536,7072,536,7073,536,7074,536,7075,536,7076,536,7077,536,7078,536,7079,536,7080,536,7081,536,7082,536,7083,536,7084,536,7085,536,7086,536,7087,536,7088,536,7089,536,7090,536,7091,536,7092,536,7093,536,7094,536,7095,536,7096,536,7097,536,7098,536,7099,536,7100,536,7101,536,7102,536,7103,536,7104,536,7105,536,7106,536,7107,536,7108,536,7109,536,7110,536,7111,536,7112,536,7113,536,7114,536,7115,536,7116,536,7117,536,7118,536,7119,536,7120,536,7121,536,7122,536,7123,536,7124,536,7125,536,7126,536,7127,536,7128,536,7129,536,7130,536,7131,536,7132,536,7133,536,7134,536,7135,536,7136,536,7137,536,7138,536,7139,536,7140,536,7141,536,7142,536,7143,536,7144,536,7145,536,7146,536,7147,536,7148,536,7149,536,7150,536,7151,536,7152,536,7153,536,7154,536,7155,536,7156,536,7157,536,7158,536,7159,536,7160,536,7161,536,7162,536,7163,536,7164,536,7165,536,7166,536,7167,536,7168,536,7169,536,7170,536,7171,536,7172,536,7173,536,7174,536,7175,536,7176,536,7177,536,7178,536,7179,536,7180,536,7181,536,7182,536,7183,536,7184,536,7185,536,7186,536,7187,536,7188,536,7189,536,7190,536,7191,536,7192,536,7193,536,7194,536,7195,536,7196,536,7197,536,7198,536,7199,536,7200,536,7201,536,7202,536,7203,536,7204,536,7205,536,7206,536,7207,536,7208,536,7209,536,7210,536,7211,536,7212,521,7213,521,7214,14,7215,15,7216,15,7217,15,7218,15,7219,15,7220,15,7221,15,7222,15,7223,15,7224,15,7225,15,7226,15,7227,15,7228,15,7229,15,7230,15,7231,15,7232,15,7233,15,7234,15,7235,15,7236,15,7237,15,7238,15,7239,15,7240,15,7241,15,7242,15,7243,537,7244,537,7245,537,7246,537,7247,537,7248,537,7249,537,7250,537,7251,537,7252,537,7253,537,7254,537,7255,537,7256,537,7257,537,7258,537,7259,537,7260,537,7261,537,7262,537,7263,537,7264,537,7265,537,7266,537,7267,537,7268,537,7269,537,7270,537,7271,537,7272,537,7273,537,7274,537,7275,537,7276,537,7277,537,7278,537,7279,537,7280,537,7281,537,7282,537,7283,537,7284,537,7285,537,7286,537,7287,537,7288,537,7289,537,7290,537,7291,537,7292,537,7293,537,7294,537,7295,537,7296,537,7297,537,7298,537,7299,537,7300,537,7301,537,7302,537,7303,537,7304,537,7305,537,7306,537,7307,537,7308,537,7309,537,7310,537,7311,537,7312,537,7313,537,7314,537,7315,537,7316,537,7317,537,7318,537,7319,537,7320,537,7321,537,7322,537,7323,537,7324,537,7325,537,7326,537,7327,537,7328,537,7329,537,7330,537,7331,537,7332,537,7333,537,7334,537,7335,537,7336,537,7337,537,7338,537,7339,537,7340,537,7341,537,7342,537,7343,537,7344,537,7345,537,7346,537,7347,537,7348,537,7349,537,7350,537,7351,537,7352,537,7353,537,7354,537,7355,537,7356,537,7357,537,7358,537,7359,537,7360,537,7361,537,7362,537,7363,537,7364,537,7365,537,7366,537,7367,537,7368,537,7369,537,7370,537,7371,537,7372,537,7373,537,7374,537,7375,537,7376,537,7377,537,7378,537,7379,537,7380,537,7381,537,7382,537,7383,537,7384,537,7385,537,7386,537,7387,537,7388,537,7389,537,7390,537,7391,537,7392,537,7393,537,7394,537,7395,537,7396,537,7397,537,7398,537,7399,537,7400,537,7401,537,7402,537,7403,537,7404,537,7405,537,7406,537,7407,537,7408,537,7409,537,7410,537,7411,537,7412,537,7413,537,7414,537,7415,537,7416,537,7417,537,7418,537,7419,537,7420,537,7421,537,7422,537,7423,537,7424,537,7425,537,7426,537,7427,537,7428,537,7429,537,7430,537,7431,537,7432,537,7433,537,7434,537,7435,537,7436,537,7437,537,7438,537,7439,537,7440,537,7441,537,7442,537,7443,537,7444,537,7445,537,7446,537,7447,537,7448,537,7449,537,7450,537,7451,537,7452,537,7453,537,7454,537,7455,537,7456,537,7457,537,7458,537,7459,537,7460,537,7461,537,7462,537,7463,537,7464,537,7465,537,7466,537,7467,537,7468,537,7469,537,7470,537,7471,537,7472,537,7473,537,7474,537,7475,537,7476,537,7477,537,7478,537,7479,537,7480,537,7481,537,7482,537,7483,537,7484,537,7485,537,7486,537,7487,537,7488,537,7489,537,7490,537,7491,537,7492,538,7493,522,7494,522,7495,22,7496,525,7497,526,7498,525,7499,528,7500,528,7501,528,7502,531,7503,532,7504,531,7505,533,7506,539,7507,539,7508,539,7509,539,7511,541,7512,534,7513,534,7514,513,7515,515,7516,519,7517,14,7518,524,7519,524,7520,524,7521,524,7522,524,7523,530,7524,530,7525,530,7526,530,7527,530,7528,24,7531,25,7532,25,7533,55,7534,55,7535,59,7536,59,7537,77,7538,77,7539,79,7540,79,7541,103,7542,103,7543,105,7544,105,7545,141,7546,141,7547,145,7548,145,7549,155,7550,155,7551,160,7552,160,7553,202,7554,202,7555,204,7556,204,7557,238,7558,238,7559,256,7560,256,7561,260,7562,260,7563,288,7564,288,7565,294,7566,294,7567,306,7568,306,7569,308,7570,308,7571,326,7572,326,7573,330,7574,330,7575,332,7576,332,7577,334,7578,334,7579,342,7580,342,7581,344,7582,344,7583,348,7584,348,7585,354,7586,354,7587,360,7588,360,7589,370,7590,370,7591,380,7592,380,7593,390,7594,390,7595,394,7596,394,7597,404,7598,404,7599,406,7600,406,7601,408,7602,408,7603,416,7604,416,7605,424,7606,424,7607,436,7608,436,7609,463,7610,463,7611,465,7612,465,7613,501,7614,501,7615,521,7616,521],"subclass":[535,536,538,535],"override":[6228,6722,6229,6723,6230,6724,6231,6725,6232,6726,6233,6727,6234,6728,6235,6729,6236,6730,6237,6731,6238,6732,6239,6733,6240,6734,6241,6735,6242,6736,6243,6737,6244,6738,6245,6739,6246,6740,6247,6741,6248,6742,6249,6743,6250,6744,6251,6745,6252,6746,6253,6747,6254,6748,6255,6749,6256,6750,6257,6751,6258,6752,6259,6753,6260,6754,6261,6755,6262,6756,6263,6757,6264,6758,6265,6759,6266,6760,6267,6761,6268,6762,6269,6763,6270,6764,6271,6765,6272,6766,6273,6767,6274,6768,6275,6769,6276,6770,6277,6771,6278,6772,6279,6773,6280,6774,6281,6775,6282,6776,6283,6777,6284,6778,6285,6779,6286,6780,6287,6781,6288,6782,6289,6783,6290,6784,6291,6785,6292,6786,6293,6787,6294,6788,6295,6789,6296,6790,6297,6791,6298,6792,6299,6793,6300,6794,6301,6795,6302,6796,6303,6797,6304,6798,6305,6799,6306,6800,6307,6801,6308,6802,6309,6803,6310,6804,6311,6805,6312,6806,6313,6807,6314,6808,6315,6809,6316,6810,6317,6811,6318,6812,6319,6813,6320,6814,6321,6815,6322,6816,6323,6817,6324,6818,6325,6819,6326,6820,6327,6821,6328,6822,6329,6823,6330,6824,6331,6825,6332,6826,6333,6827,6334,6828,6335,6829,6336,6830,6337,6831,6338,6832,6339,6833,6340,6834,6341,6835,6342,6836,6343,6837,6344,6838,6345,6839,6346,6840,6347,6841,6348,6842,6349,6843,6350,6844,6351,6845,6352,6846,6353,6847,6354,6848,6355,6849,6356,6850,6357,6851,6358,6852,6359,6853,6360,6854,6361,6855,6362,6856,6363,6857,6364,6858,6365,6859,6366,6860,6367,6861,6368,6862,6369,6863,6370,6864,6371,6865,6372,6866,6373,6867,6374,6868,6375,6869,6376,6870,6377,6871,6378,6872,6379,6873,6380,6874,6381,6875,6382,6876,6383,6877,6384,6878,6385,6879,6386,6880,6387,6881,6388,6882,6389,6883,6390,6884,6391,6885,6392,6886,6393,6887,6394,6888,6395,6889,6396,6890,6397,6891,6398,6892,6399,6893,6400,6894,6401,6895,6402,6896,6403,6897,6404,6898,6405,6899,6406,6900,6407,6901,6408,6902,6409,6903,6410,6904,6411,6905,6412,6906,6413,6907,6414,6908,6415,6909,6416,6910,6417,6911,6418,6912,6419,6913,6420,6914,6421,6915,6422,6916,6423,6917,6424,6918,6425,6919,6426,6920,6427,6921,6428,6922,6429,6923,6430,6924,6431,6925,6432,6926,6433,6927,6434,6928,6435,6929,6436,6930,6437,6931,6438,6932,6439,6933,6440,6934,6441,6935,6442,6936,6443,6937,6444,6938,6445,6939,6446,6940,6447,6941,6448,6942,6449,6943,6450,6944,6451,6945,6452,6946,6453,6947,6454,6948,6455,6949,6456,6950,6457,6951,6458,6952,6459,6953,6460,6954,6461,6955,6462,6956,6463,6957,6464,6958,6465,6959,6466,6960,6467,6961,6468,6962,6469,6963,6470,6964,6471,6965,6472,6966,6473,6967,6474,6968,6475,6969,6476,6970,6477,6971,6478,6972,6479,6973,6480,6974,6481,6975,6482,6976,6483,6977,6484,6978,6485,6979,6486,6980,6487,6981,6488,6982,6489,6983,6490,6984,6491,6985,6492,6986,6493,6987,6494,6988,6495,6989,6496,6990,6497,6991,6498,6992,6499,6993,6500,6994,6501,6995,6502,6996,6503,6997,6504,6998,6505,6999,6506,7000,6507,7001,6508,7002,6509,7003,6510,7004,6511,7005,6512,7006,6513,7007,6514,7008,6515,7009,6516,7010,6517,7011,6518,7012,6519,7013,6520,7014,6521,7015,6522,7016,6523,7017,6524,7018,6525,7019,6526,7020,6527,7021,6528,7022,6529,7023,6530,7024,6531,7025,6532,7026,6533,7027,6534,7028,6535,7029,6536,7030,6537,7031,6538,7032,6539,7033,6540,7034,6541,7035,6542,7036,6543,7037,6544,7038,6545,7039,6546,7040,6547,7041,6548,7042,6549,7043,6550,7044,6551,7045,6552,7046,6553,7047,6554,7048,6555,7049,6556,7050,6557,7051,6558,7052,6559,7053,6560,7054,6561,7055,6562,7056,6563,7057,6564,7058,6565,7059,6566,7060,6567,7061,6568,7062,6569,7063,6570,7064,6571,7065,6572,7066,6573,7067,6574,7068,6575,7069,6576,7070,6577,7071,6578,7072,6579,7073,6580,7074,6581,7075,6582,7076,6583,7077,6584,7078,6585,7079,6586,7080,6587,7081,6588,7082,6589,7083,6590,7084,6591,7085,6592,7086,6593,7087,6594,7088,6595,7089,6596,7090,6597,7091,6598,7092,6599,7093,6600,7094,6601,7095,6602,7096,6603,7097,6604,7098,6605,7099,6606,7100,6607,7101,6608,7102,6609,7103,6610,7104,6611,7105,6612,7106,6613,7107,6614,7108,6615,7109,6616,7110,6617,7111,6618,7112,6619,7113,6620,7114,6621,7115,6622,7116,6623,7117,6624,7118,6625,7119,6626,7120,6627,7121,6628,7122,6629,7123,6630,7124,6631,7125,6632,7126,6633,7127,6634,7128,6635,7129,6636,7130,6637,7131,6638,7132,6639,7133,6640,7134,6641,7135,6642,7136,6643,7137,6644,7138,6645,7139,6646,7140,6647,7141,6648,7142,6649,7143,6650,7144,6651,7145,6652,7146,6653,7147,6654,7148,6655,7149,6656,7150,6657,7151,6658,7152,6659,7153,6660,7154,6661,7155,6662,7156,6663,7157,6664,7158,6665,7159,6666,7160,6667,7161,6668,7162,6669,7163,6670,7164,6671,7165,6672,7166,6673,7167,6674,7168,6675,7169,6676,7170,6677,7171,6678,7172,6679,7173,6680,7174,6681,7175,6682,7176,6683,7177,6684,7178,6685,7179,6686,7180,6687,7181,6688,7182,6689,7183,6690,7184,6691,7185,6692,7186,6693,7187,6694,7188,6695,7189,6696,7190,6697,7191,6698,7192,6699,7193,6700,7194,6701,7195,6702,7196,6703,7197,6704,7198,6705,7199,6706,7200,6707,7201,6708,7202,6709,7203,6710,7204,6711,7205,6712,7206,6713,7207,6714,7208,6715,7209,6716,7210,6717,7211,7492,6226],"requirement":[1410,15,1749,0,1750,0,1787,1,1811,2,1868,3,2184,4,2667,9,2668,9,2689,10,2690,10,2791,12,2792,12,2793,12,2866,13,3372,15,4489,0,4490,0,4545,1,4573,2,4663,3,5128,4,5917,9,5918,9,5949,10,5950,10,6100,12,6101,12,6102,12,7510,16],"defaultImplementation":[3375,7768,3385,7775,7214,7621,7242,7766]},"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/AbsolutePosition.swift","symbols":[14,14,530,15,13,3430,19,9,1427,23,21,7523]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/CNodes.swift","symbols":[16,17,7618,17,17,7617,32,12,7530]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/IncrementalParseTransition.swift","symbols":[20,16,16,27,7,7510,32,19,541,34,13,3432,36,9,1434,38,14,7511,45,19,540,60,21,1433,76,9,1432,102,14,529,116,13,3429,120,9,1424,136,9,1425,147,9,1426,222,14,533,226,9,1429,251,23,7505]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SourceLength.swift","symbols":[14,14,524,15,13,3418,18,9,1417,22,9,1416,27,20,1481,30,21,7518,35,21,7519,40,21,7521,44,21,7520,49,21,7522,57,21,7524,63,21,7526,67,21,7525,74,21,7527]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SourceLocation.swift","symbols":[45,14,527,51,13,3424,54,13,3422,60,13,3423,65,13,3421,69,13,3420,76,9,1420,84,9,1421,93,14,523,96,13,3415,99,13,3414,101,13,3413,105,9,1415,114,19,539,124,9,1430,133,9,1431,143,14,7508,187,14,7509,205,14,7507,211,14,7506,236,7,6221,252,7,6219,273,7,6220,293,7,7233,307,7,7231,323,7,7232]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SourcePresence.swift","symbols":[16,12,23,18,7,826,21,7,825]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/Syntax.swift","symbols":[15,14,513,32,9,1406,37,9,1405,42,9,1404,46,9,1403,51,14,6225,55,21,7514,62,14,6224,66,14,6223,70,13,2865,78,13,2864,84,16,14,89,7,7214,93,14,7517,101,16,15,110,2,1410,118,6,3372,134,6,3398,139,6,3393,144,6,3403,149,6,3402,154,6,3396,159,6,3378,167,6,3404,172,6,3394,177,6,3380,182,6,3401,188,6,3382,204,6,3406,220,6,3373,235,6,3405,252,6,3399,258,6,3391,263,6,3390,268,6,3376,273,6,3397,278,6,3400,284,6,3379,291,6,3381,303,6,3383,313,6,3386,318,6,3387,324,7,7238,330,7,7239,335,7,7240,340,7,7241,345,7,7234,350,6,3377,356,6,3374,361,6,3388,366,6,3392,375,6,3395,385,6,3384,404,7,7237,413,7,7236,424,7,7235,430,6,3389,435,6,3375,440,6,3385,446,7,7242,453,14,525,454,16,526,463,25,7497,476,9,1418,480,14,7496,484,14,7498,490,13,3419,496,14,531,497,16,532,506,25,7503,519,9,1428,523,14,7502,527,14,7504,533,13,3431,548,14,520,575,13,2873,580,13,3354,586,13,3364,591,13,2910,596,13,3359,601,13,3367,606,13,2932,611,13,3331,618,13,2909,624,14,6720]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SyntaxChildren.swift","symbols":[16,14,519,27,21,7516,47,14,515,48,9,1407,76,21,7515,374,14,521,375,19,7615,376,19,7616,385,13,3370,386,13,3371,388,14,7212,392,14,7213,396,9,1479]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SyntaxClassifier.swift","symbols":[28,13,2657,348,14,518,349,13,2868,350,13,2869,352,13,2871,353,13,2870,354,13,2872,358,14,516,359,16,517,388,25,6719,454,9,1408,459,14,6718]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SyntaxData.swift","symbols":[104,14,514]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SyntaxOtherNodes.swift","symbols":[17,14,456,22,9,1349,27,13,2699,46,13,2698,54,14,444,59,9,1335,72,13,2654,80,13,2660,85,13,2659,91,14,5910,104,14,5906,113,14,5907,121,14,5908,126,14,5909,131,14,5905,136,13,2653,146,13,2655,156,13,2661,167,13,2652,172,13,2656,177,13,2658,182,13,2650,188,13,2651]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SyntaxVerifier.swift","symbols":[16,12,17,17,7,542,19,13,2867,28,13,538,32,23,7492,46,21,4057]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/Utils.swift","symbols":[12,14,528,13,13,3426,14,13,3425,16,9,1423,21,13,3428,25,13,3427,29,14,7501,34,14,7499,40,14,7500,51,14,522,53,13,3409,55,13,3408,57,13,3411,59,13,3410,61,13,3412,64,13,3407,68,9,1412,73,9,1413,78,14,7494,82,14,7493]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/Misc.swift","symbols":[15,13,3369,16,13,3366,21,13,2960,22,13,2951,27,13,2961,28,13,2952,33,13,2962,34,13,2953,39,13,2963,40,13,2954,45,13,3072,46,13,3056,51,13,3030,52,13,3015,57,13,3169,58,13,3149,63,13,2919,64,13,2896,69,13,2924,70,13,2901,75,13,3110,76,13,3089,81,13,3257,82,13,3246,87,13,3131,88,13,3115,93,13,3272,94,13,3260,99,13,3278,100,13,3266,105,13,3368,106,13,3365,111,13,2915,112,13,2892,117,13,3135,118,13,3119,123,13,3252,124,13,3241,129,13,3170,130,13,3150,135,13,3062,136,13,3046,141,13,3007,142,13,2984,147,13,3066,148,13,3050,153,13,3273,154,13,3261,159,13,3057,160,13,3041,165,13,3006,166,13,2983,171,13,2884,172,13,2877,177,13,3036,178,13,3021,183,13,3035,184,13,3020,189,13,3111,190,13,3090,195,13,3183,196,13,3163,201,13,3184,202,13,3164,207,13,3212,208,13,3198,213,13,3279,214,13,3267,219,13,3213,220,13,3199,225,13,3202,226,13,3188,231,13,2913,232,13,2890,237,13,3136,238,13,3120,243,13,2927,244,13,2904,249,13,2911,250,13,2888,255,13,3059,256,13,3043,261,13,3145,262,13,3129,267,13,2990,268,13,2967,273,13,3172,274,13,3152,279,13,3209,280,13,3195,285,13,3203,286,13,3189,291,13,2959,292,13,2950,297,13,3140,298,13,3124,303,13,3363,304,13,3358,309,13,3360,310,13,3355,315,13,2887,316,13,2880,321,13,3204,322,13,3190,327,13,3290,328,13,3283,333,13,3304,334,13,3297,339,13,2992,340,13,2969,345,13,3132,346,13,3116,351,13,3133,352,13,3117,357,13,2957,358,13,2948,363,13,3282,364,13,3270,369,13,3345,370,13,3343,375,13,3351,376,13,3350,381,13,3137,382,13,3121,387,13,3039,388,13,3024,393,13,3255,394,13,3244,399,13,3101,400,13,3080,405,13,3142,406,13,3126,411,13,3069,412,13,3053,417,13,3037,418,13,3022,423,13,3174,424,13,3154,429,13,3186,430,13,3166,435,13,3144,436,13,3128,441,13,2958,442,13,2949,447,13,3104,448,13,3083,453,13,3034,454,13,3019,459,13,2885,460,13,2878,465,13,3106,466,13,3085,471,13,3141,472,13,3125,477,13,3230,478,13,3219,483,13,3274,484,13,3262,489,13,3182,490,13,3162,495,13,3281,496,13,3269,501,13,3040,502,13,3025,507,13,3201,508,13,3187,513,13,3275,514,13,3263,519,13,3108,520,13,3087,525,13,3005,526,13,2982,531,13,3176,532,13,3156,537,13,3064,538,13,3048,543,13,3208,544,13,3194,549,13,2998,550,13,2975,555,13,3068,556,13,3052,561,13,3143,562,13,3127,567,13,3231,568,13,3220,573,13,3306,574,13,3299,579,13,2994,580,13,2971,585,13,3032,586,13,3017,591,13,3178,592,13,3158,597,13,3280,598,13,3268,603,13,2918,604,13,2895,609,13,2944,610,13,2937,615,13,3004,616,13,2981,621,13,3031,622,13,3016,627,13,3105,628,13,3084,633,13,3065,634,13,3049,639,13,3210,640,13,3196,645,13,2943,646,13,2936,651,13,3179,652,13,3159,657,13,3175,658,13,3155,663,13,3000,664,13,2977,669,13,2996,670,13,2973,675,13,3103,676,13,3082,681,13,3171,682,13,3151,687,13,3038,688,13,3023,693,13,3226,694,13,3215,699,13,3227,700,13,3216,705,13,2940,706,13,2933,711,13,2941,712,13,2934,717,13,3167,718,13,3147,723,13,2988,724,13,2965,729,13,2989,730,13,2966,735,13,3026,736,13,3011,741,13,3067,742,13,3051,747,13,3211,748,13,3197,753,13,3009,754,13,2986,759,13,3098,760,13,3077,765,13,3228,766,13,3217,771,13,2995,772,13,2972,777,13,2883,778,13,2876,783,13,3002,784,13,2979,789,13,3063,790,13,3047,795,13,3325,796,13,3321,801,13,3232,802,13,3221,807,13,3339,808,13,3335,813,13,3308,814,13,3301,819,13,3307,820,13,3300,825,13,3326,826,13,3322,831,13,3317,832,13,3315,837,13,3338,838,13,3334,843,13,2926,844,13,2903,849,13,3180,850,13,3160,855,13,3096,856,13,3075,861,13,2914,862,13,2891,867,13,3028,868,13,3013,873,13,3330,874,13,3328,879,13,3168,880,13,3148,885,13,3296,886,13,3289,891,13,3234,892,13,3223,897,13,3337,898,13,3333,903,13,2882,904,13,2875,909,13,3336,910,13,3332,915,13,3181,916,13,3161,921,13,3001,922,13,2978,927,13,3349,928,13,3348,933,13,3341,934,13,3340,939,13,3305,940,13,3298,945,13,3324,946,13,3320,951,13,3293,952,13,3286,957,13,3353,958,13,3352,963,13,3185,964,13,3165,969,13,3138,970,13,3122,975,13,2993,976,13,2970,981,13,2929,982,13,2906,987,13,2920,988,13,2897,993,13,3061,994,13,3045,999,13,3070,1000,13,3054,1005,13,3112,1006,13,3091,1011,13,2923,1012,13,2900,1017,13,2964,1018,13,2955,1023,13,2922,1024,13,2899,1029,13,2946,1030,13,2939,1035,13,3094,1036,13,3073,1041,13,3361,1042,13,3356,1047,13,2942,1048,13,2935,1053,13,2931,1054,13,2908,1059,13,2930,1060,13,2907,1065,13,3100,1066,13,3079,1071,13,2916,1072,13,2893,1077,13,2991,1078,13,2968,1083,13,3029,1084,13,3014,1089,13,3134,1090,13,3118,1095,13,3271,1096,13,3259,1101,13,3313,1102,13,3311,1107,13,3314,1108,13,3312,1113,13,3310,1114,13,3303,1119,13,3251,1120,13,3240,1125,13,3097,1126,13,3076,1131,13,2925,1132,13,2902,1137,13,3362,1138,13,3357,1143,13,3205,1144,13,3191,1149,13,2921,1150,13,2898,1155,13,2945,1156,13,2938,1161,13,3214,1162,13,3200,1167,13,2881,1168,13,2874,1173,13,2917,1174,13,2894,1179,13,3113,1180,13,3092,1185,13,2956,1186,13,2947,1191,13,3109,1192,13,3088,1197,13,3207,1198,13,3193,1203,13,3295,1204,13,3288,1209,13,3206,1210,13,3192,1215,13,3233,1216,13,3222,1221,13,3253,1222,13,3242,1227,13,3139,1228,13,3123,1233,13,3318,1234,13,3316,1239,13,3277,1240,13,3265,1245,13,3294,1246,13,3287,1251,13,3292,1252,13,3285,1257,13,3256,1258,13,3245,1263,13,3254,1264,13,3243,1269,13,3250,1270,13,3239,1275,13,2912,1276,13,2889,1281,13,3060,1282,13,3044,1287,13,2999,1288,13,2976,1293,13,3003,1294,13,2980,1299,13,2886,1300,13,2879,1305,13,3347,1306,13,3346,1311,13,3291,1312,13,3284,1317,13,3323,1318,13,3319,1323,13,3095,1324,13,3074,1329,13,3146,1330,13,3130,1335,13,3258,1336,13,3247,1341,13,2928,1342,13,2905,1347,13,2997,1348,13,2974,1353,13,3058,1354,13,3042,1359,13,3229,1360,13,3218,1365,13,3102,1366,13,3081,1371,13,3276,1372,13,3264,1377,13,3071,1378,13,3055,1383,13,3099,1384,13,3078,1389,13,3033,1390,13,3018,1395,13,3107,1396,13,3086,1401,13,3177,1402,13,3157,1407,13,3027,1408,13,3012,1413,13,3008,1414,13,2985,1419,13,3114,1420,13,3093,1425,13,3235,1426,13,3224,1431,13,3173,1432,13,3153,1437,13,3309,1438,13,3302,1443,13,3236,1444,13,3225,1449,13,3249,1450,13,3238,1455,13,3248,1456,13,3237,1461,13,3329,1462,13,3327,1467,13,3344,1468,13,3342,1473,13,3010,1474,13,2987,1485,14,6218,1491,14,6212]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxAnyVisitor.swift","symbols":[36,11,535,40,12,6226,46,12,6227,50,21,6437,54,21,6683,58,21,6443,62,21,6689,66,21,6239,70,21,6484,73,21,6240,77,21,6485,80,21,6241,84,21,6486,87,21,6242,91,21,6487,94,21,6296,98,21,6542,101,21,6270,105,21,6516,108,21,6336,112,21,6582,115,21,6459,119,21,6705,122,21,6464,126,21,6710,129,21,6313,133,21,6559,136,21,6388,140,21,6634,143,21,6318,147,21,6564,150,21,6391,154,21,6637,157,21,6397,161,21,6643,164,21,6442,168,21,6688,171,21,6455,175,21,6701,178,21,6322,182,21,6568,185,21,6383,189,21,6629,192,21,6337,196,21,6583,199,21,6286,203,21,6532,206,21,6262,210,21,6508,213,21,6290,217,21,6536,220,21,6392,224,21,6638,227,21,6281,231,21,6527,234,21,6261,238,21,6507,241,21,6447,245,21,6693,248,21,6276,252,21,6522,255,21,6275,259,21,6521,262,21,6314,266,21,6560,269,21,6350,273,21,6596,276,21,6351,280,21,6597,283,21,6365,287,21,6611,290,21,6398,294,21,6644,297,21,6366,301,21,6612,304,21,6355,308,21,6601,311,21,6453,315,21,6699,318,21,6323,322,21,6569,325,21,6467,329,21,6713,332,21,6451,336,21,6697,339,21,6283,343,21,6529,346,21,6332,350,21,6578,353,21,6246,357,21,6491,360,21,6339,364,21,6585,367,21,6362,371,21,6608,374,21,6356,378,21,6602,381,21,6238,385,21,6483,388,21,6327,392,21,6573,395,21,6441,399,21,6687,402,21,6438,406,21,6684,409,21,6450,413,21,6696,416,21,6357,420,21,6603,423,21,6402,427,21,6648,430,21,6409,434,21,6655,437,21,6248,441,21,6493,444,21,6319,448,21,6565,451,21,6320,455,21,6566,458,21,6236,462,21,6481,465,21,6401,469,21,6647,472,21,6432,476,21,6678,479,21,6435,483,21,6681,486,21,6324,490,21,6570,493,21,6279,497,21,6525,500,21,6386,504,21,6632,507,21,6304,511,21,6550,514,21,6329,518,21,6575,521,21,6293,525,21,6539,528,21,6277,532,21,6523,535,21,6341,539,21,6587,542,21,6353,546,21,6599,549,21,6331,553,21,6577,556,21,6237,560,21,6482,563,21,6307,567,21,6553,570,21,6274,574,21,6520,577,21,6448,581,21,6694,584,21,6309,588,21,6555,591,21,6328,595,21,6574,598,21,6372,602,21,6618,605,21,6393,609,21,6639,612,21,6349,616,21,6595,619,21,6400,623,21,6646,626,21,6280,630,21,6526,633,21,6354,637,21,6600,640,21,6394,644,21,6640,647,21,6311,651,21,6557,654,21,6260,658,21,6506,661,21,6343,665,21,6589,668,21,6288,672,21,6534,675,21,6361,679,21,6607,682,21,6253,686,21,6499,689,21,6292,693,21,6538,696,21,6330,700,21,6576,703,21,6373,707,21,6619,710,21,6411,714,21,6657,717,21,6249,721,21,6495,724,21,6272,728,21,6518,731,21,6345,735,21,6591,738,21,6399,742,21,6645,745,21,6458,749,21,6704,752,21,6232,756,21,6477,759,21,6259,763,21,6505,766,21,6271,770,21,6517,773,21,6308,777,21,6554,780,21,6289,784,21,6535,787,21,6363,791,21,6609,794,21,6231,798,21,6476,801,21,6346,805,21,6592,808,21,6342,812,21,6588,815,21,6255,819,21,6501,822,21,6251,826,21,6497,829,21,6306,833,21,6552,836,21,6338,840,21,6584,843,21,6278,847,21,6524,850,21,6368,854,21,6614,857,21,6369,861,21,6615,864,21,6228,868,21,6473,871,21,6229,875,21,6474,878,21,6334,882,21,6580,885,21,6244,889,21,6489,892,21,6245,896,21,6490,899,21,6266,903,21,6512,906,21,6291,910,21,6537,913,21,6364,917,21,6610,920,21,6264,924,21,6510,927,21,6301,931,21,6547,934,21,6370,938,21,6616,941,21,6250,945,21,6496,948,21,6446,952,21,6692,955,21,6257,959,21,6503,962,21,6287,966,21,6533,969,21,6422,973,21,6668,976,21,6374,980,21,6620,983,21,6429,987,21,6675,990,21,6413,994,21,6659,997,21,6412,1001,21,6658,1004,21,6423,1008,21,6669,1011,21,6418,1015,21,6664,1018,21,6428,1022,21,6674,1025,21,6466,1029,21,6712,1032,21,6347,1036,21,6593,1039,21,6299,1043,21,6545,1046,21,6454,1050,21,6700,1053,21,6268,1057,21,6514,1060,21,6425,1064,21,6671,1067,21,6335,1071,21,6581,1074,21,6408,1078,21,6654,1081,21,6376,1085,21,6622,1088,21,6427,1092,21,6673,1095,21,6445,1099,21,6691,1102,21,6426,1106,21,6672,1109,21,6348,1113,21,6594,1116,21,6256,1120,21,6502,1123,21,6434,1127,21,6680,1130,21,6430,1134,21,6676,1137,21,6410,1141,21,6656,1144,21,6421,1148,21,6667,1151,21,6405,1155,21,6651,1158,21,6436,1162,21,6682,1165,21,6352,1169,21,6598,1172,21,6325,1176,21,6571,1179,21,6472,1183,21,6494,1186,21,6469,1190,21,6715,1193,21,6460,1197,21,6706,1200,21,6285,1204,21,6531,1207,21,6294,1211,21,6540,1214,21,6315,1218,21,6561,1221,21,6463,1225,21,6709,1228,21,6243,1232,21,6488,1235,21,6462,1239,21,6708,1242,21,6234,1246,21,6479,1249,21,6297,1253,21,6543,1256,21,6439,1260,21,6685,1263,21,6230,1267,21,6475,1270,21,6471,1274,21,6717,1277,21,6470,1281,21,6716,1284,21,6303,1288,21,6549,1291,21,6456,1295,21,6702,1298,21,6247,1302,21,6492,1305,21,6269,1309,21,6515,1312,21,6321,1316,21,6567,1319,21,6390,1323,21,6636,1326,21,6416,1330,21,6662,1333,21,6417,1337,21,6663,1340,21,6415,1344,21,6661,1347,21,6382,1351,21,6628,1354,21,6300,1358,21,6546,1361,21,6465,1365,21,6711,1368,21,6440,1372,21,6686,1375,21,6358,1379,21,6604,1382,21,6461,1386,21,6707,1389,21,6233,1393,21,6478,1396,21,6367,1400,21,6613,1403,21,6444,1407,21,6690,1410,21,6457,1414,21,6703,1417,21,6316,1421,21,6562,1424,21,6235,1428,21,6480,1431,21,6312,1435,21,6558,1438,21,6360,1442,21,6606,1445,21,6407,1449,21,6653,1452,21,6359,1456,21,6605,1459,21,6375,1463,21,6621,1466,21,6384,1470,21,6630,1473,21,6326,1477,21,6572,1480,21,6419,1484,21,6665,1487,21,6396,1491,21,6642,1494,21,6406,1498,21,6652,1501,21,6404,1505,21,6650,1508,21,6387,1512,21,6633,1515,21,6385,1519,21,6631,1522,21,6381,1526,21,6627,1529,21,6452,1533,21,6698,1536,21,6284,1540,21,6530,1543,21,6254,1547,21,6500,1550,21,6258,1554,21,6504,1557,21,6449,1561,21,6695,1564,21,6433,1568,21,6679,1571,21,6403,1575,21,6649,1578,21,6420,1582,21,6666,1585,21,6298,1589,21,6544,1592,21,6333,1596,21,6579,1599,21,6389,1603,21,6635,1606,21,6468,1610,21,6714,1613,21,6252,1617,21,6498,1620,21,6282,1624,21,6528,1627,21,6371,1631,21,6617,1634,21,6305,1638,21,6551,1641,21,6395,1645,21,6641,1648,21,6295,1652,21,6541,1655,21,6302,1659,21,6548,1662,21,6273,1666,21,6519,1669,21,6310,1673,21,6556,1676,21,6344,1680,21,6590,1683,21,6267,1687,21,6513,1690,21,6263,1694,21,6509,1697,21,6317,1701,21,6563,1704,21,6377,1708,21,6623,1711,21,6340,1715,21,6586,1718,21,6414,1722,21,6660,1725,21,6378,1729,21,6624,1732,21,6380,1736,21,6626,1739,21,6379,1743,21,6625,1746,21,6424,1750,21,6670,1753,21,6431,1757,21,6677,1760,21,6265,1764,21,6511]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxBaseNodes.swift","symbols":[19,16,5,25,7,6213,32,7,6207,37,14,440,41,9,1325,49,9,1324,56,9,1323,82,13,2643,91,14,5892,95,14,5891,103,14,5890,109,14,5889,117,13,2642,127,16,6,133,7,6214,140,7,6208,145,14,441,149,9,1328,157,9,1327,164,9,1326,190,13,2645,199,14,5896,203,14,5895,211,14,5894,217,14,5893,225,13,2644,235,16,7,241,7,6215,248,7,6209,253,14,442,257,9,1331,265,9,1330,272,9,1329,298,13,2647,307,14,5900,311,14,5899,319,14,5898,325,14,5897,333,13,2646,343,16,8,349,7,6216,356,7,6210,361,14,443,365,9,1334,373,9,1333,380,9,1332,406,13,2648,415,14,5904,419,14,5903,427,14,5902,433,14,5901,441,13,2649,451,16,11,457,7,6217,464,7,6211,469,14,453,473,9,1346,481,9,1345,488,9,1344,514,13,2692,523,14,5954,527,14,5953,535,14,5952,541,14,5951,549,13,2691]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxBuilders.swift","symbols":[15,14,108,21,23,4458,26,23,4459,31,23,4460,55,9,1023,63,14,488,69,23,6098,74,23,6097,85,23,6099,115,9,1379,123,14,498,129,23,6146,134,23,6147,161,9,1389,169,14,193,175,23,4785,199,9,1104,207,14,455,213,23,5958,218,23,5960,223,23,5959,250,9,1348,258,14,480,264,23,6063,269,23,6064,296,9,1371,304,14,211,310,23,4866,315,23,4867,342,9,1120,350,14,241,356,23,4994,361,23,4993,372,23,4995,402,9,1149,410,14,140,416,23,4576,421,23,4577,445,9,1055,453,14,92,459,23,4383,483,9,1009,491,14,148,497,23,4619,521,9,1061,529,14,351,535,23,5473,559,9,1246,567,14,130,573,23,4547,597,9,1045,605,14,90,611,23,4381,641,9,1007,649,14,120,655,23,4494,679,9,1035,687,14,118,693,23,4492,717,9,1033,725,14,195,731,23,4787,755,9,1106,763,14,267,769,23,5106,793,9,1173,801,14,269,807,23,5108,831,9,1175,839,14,297,845,23,5212,869,9,1201,877,14,363,883,23,5532,888,23,5533,912,9,1256,920,14,299,926,23,5215,931,23,5216,955,9,1203,963,14,277,969,23,5146,993,9,1183,1001,14,476,1007,23,6047,1012,23,6046,1017,23,6045,1041,9,1367,1049,14,213,1055,23,4869,1079,9,1122,1087,14,504,1093,23,6174,1098,23,6173,1109,23,6175,1139,9,1394,1147,14,472,1153,23,6034,1158,23,6033,1169,23,6035,1199,9,1363,1207,14,134,1213,23,4559,1218,23,4558,1223,23,4560,1253,9,1049,1261,14,231,1267,23,4940,1272,23,4939,1277,23,4937,1282,23,4938,1306,9,1140,1314,14,58,1320,23,4219,1325,23,4220,1349,9,978,1357,14,245,1363,23,5010,1368,23,5013,1373,23,5012,1378,23,5011,1408,9,1153,1416,14,291,1422,23,5189,1446,9,1196,1454,14,279,1460,23,5148,1484,9,1185,1492,14,46,1498,23,4180,1503,23,4178,1508,23,4177,1513,23,4176,1518,23,4179,1554,9,967,1562,14,221,1568,23,4905,1573,23,4904,1578,23,4906,1583,23,4903,1610,9,1130,1618,14,452,1624,23,5947,1629,23,5948,1656,9,1343,1664,14,446,1670,23,5914,1675,23,5916,1680,23,5915,1707,9,1337,1715,14,470,1721,23,6028,1745,9,1361,1753,14,281,1759,23,5158,1770,23,5159,1775,23,5156,1780,23,5155,1785,23,5157,1809,9,1187,1817,14,385,1823,23,5612,1828,23,5614,1839,23,5613,1866,9,1276,1874,14,62,1880,23,4241,1885,23,4240,1909,9,981,1917,14,207,1923,23,4854,1934,23,4853,1939,23,4858,1944,23,4856,1949,23,4855,1954,23,4859,1959,23,4857,1983,9,1116,1991,14,42,1997,23,4162,2002,23,4163,2007,23,4161,2018,23,4164,2048,9,963,2056,14,369,2062,23,5544,2086,9,1262,2094,14,431,2100,23,5843,2105,23,5842,2110,23,5841,2140,9,1315,2148,14,215,2154,23,4882,2159,23,4879,2164,23,4878,2175,23,4880,2180,23,4881,2185,23,4883,2218,9,1124,2226,14,126,2232,23,4527,2237,23,4524,2242,23,4523,2253,23,4525,2258,23,4526,2263,23,4528,2302,9,1041,2310,14,339,2316,23,5406,2321,23,5407,2348,9,1237,2356,14,175,2362,23,4717,2367,23,4718,2394,9,1086,2402,14,225,2408,23,4921,2413,23,4922,2440,9,1134,2448,14,154,2454,23,4640,2459,23,4641,2486,9,1067,2494,14,122,2500,23,4496,2524,9,1037,2532,14,249,2538,23,5023,2543,23,5024,2548,23,5025,2553,23,5022,2564,23,5026,2597,9,1157,2605,14,273,2611,23,5126,2616,23,5124,2621,23,5123,2632,23,5125,2637,23,5127,2667,9,1179,2675,14,229,2681,23,4932,2705,9,1138,2713,14,44,2719,23,4169,2724,23,4168,2729,23,4170,2756,9,965,2764,14,181,2770,23,4744,2794,9,1092,2802,14,116,2808,23,4487,2813,23,4488,2837,9,1031,2845,14,185,2851,23,4757,2856,23,4759,2861,23,4758,2872,23,4760,2905,9,1096,2913,14,223,2919,23,4913,2924,23,4914,2929,23,4916,2934,23,4918,2939,23,4917,2944,23,4915,2977,9,1132,2985,14,311,2991,23,5270,2996,23,5269,3020,9,1213,3028,14,353,3034,23,5475,3058,9,1248,3066,14,265,3072,23,5103,3077,23,5102,3082,23,5101,3093,23,5104,3126,9,1171,3134,14,367,3140,23,5541,3145,23,5542,3172,9,1260,3180,14,128,3186,23,4540,3197,23,4539,3208,23,4538,3213,23,4541,3218,23,4544,3223,23,4542,3228,23,4543,3255,9,1043,3263,14,275,3269,23,5140,3280,23,5139,3291,23,5138,3296,23,5141,3301,23,5143,3306,23,5142,3311,23,5144,3338,9,1181,3346,14,189,3352,23,4770,3357,23,4769,3368,23,4771,3398,9,1100,3406,14,88,3412,23,4378,3417,23,4377,3444,9,1005,3452,14,253,3458,23,5050,3463,23,5048,3468,23,5049,3473,23,5051,3497,9,1161,3505,14,144,3511,23,4600,3516,23,4599,3521,23,4598,3548,9,1058,3556,14,74,3562,23,4302,3573,23,4301,3600,9,993,3608,14,152,3614,23,4634,3619,23,4636,3624,23,4635,3629,23,4637,3662,9,1065,3670,14,227,3676,23,4927,3681,23,4929,3686,23,4928,3691,23,4930,3724,9,1136,3732,14,313,3738,23,5275,3743,23,5276,3748,23,5278,3753,23,5277,3783,9,1215,3791,14,389,3797,23,5632,3802,23,5631,3807,23,5629,3812,23,5635,3817,23,5634,3822,23,5633,3827,23,5630,3869,9,1280,3877,14,66,3883,23,4252,3888,23,4250,3893,23,4253,3898,23,4251,3922,9,985,3930,14,112,3936,23,4479,3941,23,4480,3965,9,1027,3973,14,365,3979,23,5538,3984,23,5537,4017,9,1258,4025,14,486,4031,23,6088,4042,23,6087,4053,23,6085,4058,23,6089,4063,23,6092,4068,23,6090,4073,23,6091,4078,23,6086,4108,9,1377,4116,14,34,4122,23,4122,4133,23,4121,4144,23,4119,4149,23,4123,4154,23,4126,4159,23,4124,4164,23,4125,4169,23,4120,4199,9,955,4207,14,86,4213,23,4371,4224,23,4370,4235,23,4368,4240,23,4372,4245,23,4373,4250,23,4374,4255,23,4369,4285,9,1003,4293,14,110,4299,23,4473,4310,23,4472,4321,23,4470,4326,23,4474,4331,23,4475,4336,23,4476,4341,23,4471,4371,9,1025,4379,14,183,4385,23,4750,4390,23,4749,4401,23,4751,4431,9,1094,4439,14,293,4445,23,5192,4450,23,5193,4474,9,1198,4482,14,32,4488,23,4108,4499,23,4107,4526,9,953,4534,14,259,4540,23,5073,4545,23,5074,4572,9,1166,4580,14,251,4586,23,5037,4597,23,5038,4602,23,5039,4607,23,5043,4612,23,5042,4617,23,5036,4622,23,5041,4627,23,5040,4648,9,1159,4656,14,70,4662,23,4276,4673,23,4275,4684,23,4279,4689,23,4278,4694,23,4281,4699,23,4277,4704,23,4280,4709,23,4282,4739,9,989,4747,14,179,4753,23,4735,4764,23,4734,4775,23,4737,4780,23,4738,4785,23,4740,4790,23,4736,4795,23,4741,4800,23,4739,4805,23,4742,4832,9,1090,4840,14,243,4846,23,5003,4857,23,5002,4868,23,5004,4873,23,5005,4900,9,1151,4908,14,124,4914,23,4511,4925,23,4509,4936,23,4507,4941,23,4513,4946,23,4508,4951,23,4514,4956,23,4512,4961,23,4510,4991,9,1039,4999,14,303,5005,23,5228,5010,23,5226,5015,23,5225,5020,23,5227,5044,9,1207,5052,14,305,5058,23,5232,5063,23,5231,5087,9,1209,5095,14,28,5101,23,4098,5112,23,4097,5123,23,4095,5128,23,4096,5133,23,4099,5166,9,949,5174,14,235,5180,23,4960,5185,23,4962,5190,23,4961,5220,9,1144,5228,14,54,5234,23,4195,5245,23,4194,5250,23,4193,5255,23,4196,5260,23,4197,5265,23,4198,5270,23,4199,5294,9,975,5302,14,100,5308,23,4413,5313,23,4412,5324,23,4414,5354,9,1017,5362,14,150,5368,23,4625,5373,23,4629,5378,23,4627,5383,23,4626,5388,23,4628,5412,9,1063,5420,14,96,5426,23,4400,5437,23,4399,5448,23,4401,5453,23,4398,5486,9,1013,5494,14,169,5500,23,4702,5505,23,4704,5510,23,4701,5515,23,4703,5539,9,1080,5547,14,68,5553,23,4264,5564,23,4263,5575,23,4261,5580,23,4262,5613,9,987,5621,14,462,5627,23,5984,5638,23,5983,5649,23,5981,5654,23,5985,5659,23,5986,5664,23,5987,5669,23,5988,5674,23,5982,5704,9,1355,5712,14,82,5718,23,4353,5729,23,4352,5740,23,4351,5745,23,4354,5750,23,4350,5777,9,999,5785,14,411,5791,23,5763,5796,23,5762,5829,9,1297,5837,14,315,5843,23,5291,5854,23,5290,5865,23,5295,5870,23,5293,5875,23,5292,5880,23,5289,5891,23,5294,5927,9,1217,5935,14,393,5941,23,5657,5946,23,5659,5951,23,5658,5987,9,1283,5995,14,413,6001,23,5766,6006,23,5767,6030,9,1299,6038,14,403,6044,23,5705,6049,23,5707,6054,23,5706,6084,9,1292,6092,14,423,6098,23,5808,6103,23,5809,6108,23,5810,6138,9,1308,6146,14,165,6152,23,4694,6157,23,4690,6162,23,4692,6167,23,4691,6178,23,4693,6205,9,1076,6213,14,478,6219,23,6059,6224,23,6055,6229,23,6057,6234,23,6056,6239,23,6058,6244,23,6060,6277,9,1369,6285,14,237,6291,23,4971,6296,23,4970,6301,23,4968,6312,23,4969,6345,9,1146,6353,14,383,6359,23,5606,6364,23,5605,6369,23,5607,6374,23,5604,6404,9,1274,6412,14,319,6418,23,5309,6423,23,5308,6428,23,5306,6433,23,5307,6463,9,1221,6471,14,421,6477,23,5803,6482,23,5804,6487,23,5802,6517,9,1306,6525,14,460,6531,23,5969,6536,23,5970,6560,9,1353,6568,14,419,6574,23,5797,6579,23,5798,6584,23,5796,6589,23,5795,6619,9,1304,6627,14,263,6633,23,5094,6638,23,5095,6659,9,1169,6667,14,435,6673,23,5853,6678,23,5856,6683,23,5854,6688,23,5857,6693,23,5855,6714,9,1319,6722,14,427,6728,23,5831,6733,23,5833,6738,23,5832,6768,9,1311,6776,14,387,6782,23,5620,6787,23,5619,6798,23,5621,6828,9,1278,6836,14,377,6842,23,5574,6847,23,5575,6871,9,1269,6879,14,439,6885,23,5882,6890,23,5886,6895,23,5885,6900,23,5888,6905,23,5884,6910,23,5887,6915,23,5883,6945,9,1322,6953,14,271,6959,23,5114,6964,23,5116,6969,23,5113,6974,23,5115,6998,9,1177,7006,14,217,7012,23,4886,7017,23,4887,7041,9,1126,7049,14,64,7055,23,4244,7060,23,4245,7084,9,983,7092,14,508,7098,23,6191,7103,23,6192,7108,23,6189,7113,23,6190,7124,23,6193,7154,9,1398,7162,14,490,7168,23,6105,7173,23,6106,7200,9,1381,7208,14,138,7214,23,4572,7238,9,1053,7246,14,197,7252,23,4797,7257,23,4798,7262,23,4794,7267,23,4799,7272,23,4795,7277,23,4796,7310,9,1108,7318,14,496,7324,23,6140,7329,23,6141,7340,23,6142,7345,23,6143,7378,9,1387,7386,14,52,7392,23,4183,7397,23,4184,7424,9,973,7432,14,494,7438,23,6126,7443,23,6127,7448,23,6123,7453,23,6128,7458,23,6131,7463,23,6129,7468,23,6125,7473,23,6133,7478,23,6124,7483,23,6132,7488,23,6130,7493,23,6134,7529,9,1385,7537,14,38,7543,23,4143,7548,23,4146,7553,23,4142,7558,23,4145,7563,23,4144,7568,23,4148,7579,23,4147,7615,9,959,7623,14,448,7629,23,5926,7634,23,5927,7639,23,5925,7644,23,5929,7649,23,5928,7682,9,1339,7690,14,30,7696,23,4102,7701,23,4103,7725,9,951,7733,14,512,7739,23,6205,7744,23,6206,7771,9,1402,7779,14,510,7785,23,6200,7790,23,6199,7801,23,6202,7806,23,6201,7836,9,1400,7844,14,173,7850,23,4714,7874,9,1084,7882,14,482,7888,23,6067,7893,23,6068,7917,9,1373,7925,14,209,7931,23,4862,7936,23,4863,7960,9,1118,7968,14,347,7974,23,5454,7979,23,5452,7984,23,5451,7995,23,5453,8028,9,1243,8036,14,399,8042,23,5691,8047,23,5690,8052,23,5693,8057,23,5692,8087,9,1288,8095,14,401,8101,23,5701,8106,23,5698,8111,23,5700,8116,23,5699,8146,9,1290,8154,14,397,8160,23,5685,8165,23,5682,8170,23,5684,8181,23,5683,8214,9,1286,8222,14,167,8228,23,4696,8252,9,1078,8260,14,500,8266,23,6150,8271,23,6151,8298,9,1391,8306,14,450,8312,23,5941,8317,23,5942,8322,23,5938,8327,23,5940,8338,23,5944,8343,23,5943,8348,23,5939,8378,9,1341,8386,14,283,8392,23,5161,8416,9,1189,8424,14,492,8430,23,6109,8435,23,6110,8462,9,1383,8470,14,36,8476,23,4132,8481,23,4133,8486,23,4131,8519,9,957,8527,14,301,8533,23,5219,8538,23,5220,8565,9,1205,8573,14,458,8579,23,5964,8584,23,5965,8589,23,5966,8613,9,1351,8621,14,484,8627,23,6072,8632,23,6073,8637,23,6074,8658,9,1375,8666,14,199,8672,23,4805,8677,23,4804,8688,23,4806,8718,9,1110,8726,14,40,8732,23,4154,8737,23,4153,8748,23,4155,8775,9,961,8783,14,191,8789,23,4778,8794,23,4781,8799,23,4780,8804,23,4783,8809,23,4779,8814,23,4782,8847,9,1102,8855,14,287,8861,23,5169,8866,23,5170,8899,9,1193,8907,14,285,8913,23,5165,8918,23,5164,8942,9,1191,8950,14,317,8956,23,5299,8961,23,5301,8966,23,5300,8996,9,1219,9004,14,219,9010,23,4894,9021,23,4897,9026,23,4898,9031,23,4895,9036,23,4896,9060,9,1128,9068,14,359,9074,23,5508,9085,23,5511,9090,23,5512,9095,23,5507,9100,23,5509,9105,23,5510,9129,9,1253,9137,14,379,9143,23,5581,9148,23,5580,9159,23,5582,9189,9,1271,9197,14,375,9203,23,5569,9208,23,5571,9213,23,5570,9243,9,1267,9251,14,341,9257,23,5411,9262,23,5410,9286,9,1239,9294,14,337,9300,23,5400,9305,23,5403,9310,23,5402,9315,23,5401,9345,9,1235,9353,14,329,9359,23,5344,9383,9,1230,9391,14,474,9397,23,6040,9402,23,6039,9407,23,6041,9437,9,1365,9445,14,136,9451,23,4568,9456,23,4566,9461,23,4570,9466,23,4567,9471,23,4569,9507,9,1051,9515,14,76,9521,23,4307,9526,23,4308,9531,23,4306,9561,9,995,9569,14,84,9575,23,4357,9580,23,4358,9607,9,1001,9615,14,468,9621,23,6025,9626,23,6026,9653,9,1359,9661,14,433,9667,23,5846,9672,23,5847,9699,9,1317,9707,14,373,9713,23,5564,9718,23,5565,9742,9,1265,9750,14,163,9756,23,4683,9786,9,1074,9794,14,233,9800,23,4956,9805,23,4954,9810,23,4951,9815,23,4955,9820,23,4949,9825,23,4950,9830,23,4952,9835,23,4953,9859,9,1142,9867,14,506,9873,23,6181,9878,23,6180,9889,23,6182,9919,9,1396,9927,14,72,9933,23,4293,9938,23,4292,9949,23,4294,9954,23,4295,9959,23,4296,9964,23,4297,9969,23,4291,10005,9,991,10013,14,132,10019,23,4554,10024,23,4553,10035,23,4552,10059,9,1047,10067,14,177,10073,23,4721,10078,23,4722,10102,9,1088,10110,14,357,10116,23,5498,10121,23,5497,10132,23,5499,10162,9,1251,10170,14,158,10176,23,4662,10181,23,4661,10208,9,1070,10216,14,171,10222,23,4711,10227,23,4712,10232,23,4709,10237,23,4710,10264,9,1082,10272,14,114,10278,23,4483,10283,23,4484,10310,9,1029,10318,14,187,10324,23,4763,10329,23,4764,10356,9,1098,10364,14,255,10370,23,5053,10394,9,1163,10402,14,102,10408,23,4420,10413,23,4418,10418,23,4419,10448,9,1019,10456,14,94,10462,23,4389,10467,23,4388,10478,23,4390,10508,9,1011,10516,14,201,10522,23,4809,10527,23,4810,10551,9,1112,10559,14,321,10565,23,5315,10570,23,5316,10575,23,5314,10580,23,5317,10604,9,1223,10612,14,247,10618,23,5015,10642,9,1155,10650,14,323,10656,23,5321,10661,23,5320,10688,9,1225,10696,14,325,10702,23,5325,10707,23,5324,10731,9,1227,10739,14,415,10745,23,5772,10750,23,5771,10755,23,5773,10785,9,1301,10793,14,429,10799,23,5837,10804,23,5836,10828,9,1313,10836,14,98,10842,23,4406,10847,23,4407,10852,23,4405,10876,9,1015]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxClassification.swift","symbols":[14,12,18,16,7,558,18,7,559,20,7,543,22,7,551,24,7,554,26,7,550,28,7,553,30,7,548,32,7,557,34,7,556,36,7,546,38,7,560,40,7,547,42,7,555,44,7,544,46,7,549,48,7,545,50,7,552]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxCollections.swift","symbols":[14,16,13,16,6,2866,24,14,238,29,9,1147,42,13,2087,47,13,2089,67,14,4986,80,14,4972,93,14,4987,111,14,4988,127,14,4985,136,14,4975,145,14,4974,153,14,4977,159,14,4978,164,14,4979,169,14,4980,174,14,4976,179,13,2086,189,13,2088,208,19,7558,209,19,7557,211,16,239,220,25,4983,230,14,4973,241,13,2084,244,13,2090,248,14,4981,252,14,4982,256,14,4984,261,9,1450,273,14,342,278,9,1240,291,13,2366,296,13,2368,316,14,5426,329,14,5412,342,14,5427,360,14,5428,376,14,5425,385,14,5415,394,14,5414,402,14,5417,408,14,5418,413,14,5419,418,14,5420,423,14,5416,428,13,2365,438,13,2367,457,19,7579,458,19,7580,460,16,343,469,25,5423,479,14,5413,490,13,2363,493,13,2369,497,14,5421,501,14,5422,505,14,5424,510,9,1461,522,14,202,527,9,1113,540,13,1980,545,13,1982,565,14,4825,578,14,4811,591,14,4826,609,14,4827,625,14,4824,634,14,4814,643,14,4813,651,14,4816,657,14,4817,662,14,4818,667,14,4819,672,14,4815,677,13,1979,687,13,1981,706,19,7553,707,19,7554,709,16,203,718,25,4822,728,14,4812,739,13,1977,742,13,1983,746,14,4820,750,14,4821,754,14,4823,759,9,1448,771,14,348,776,9,1244,789,13,2386,794,13,2388,814,14,5469,827,14,5455,840,14,5470,858,14,5471,874,14,5468,883,14,5458,892,14,5457,900,14,5460,906,14,5461,911,14,5462,916,14,5463,921,14,5459,926,13,2385,936,13,2387,955,19,7583,956,19,7584,958,16,349,967,25,5466,977,14,5456,988,13,2383,991,13,2389,995,14,5464,999,14,5465,1003,14,5467,1008,9,1463,1020,14,360,1025,9,1254,1038,13,2419,1043,13,2421,1063,14,5527,1076,14,5513,1089,14,5528,1107,14,5529,1123,14,5526,1132,14,5516,1141,14,5515,1149,14,5518,1155,14,5519,1160,14,5520,1165,14,5521,1170,14,5517,1175,13,2418,1185,13,2420,1204,19,7588,1205,19,7587,1207,16,361,1216,25,5524,1226,14,5514,1237,13,2416,1240,13,2422,1244,14,5522,1248,14,5523,1252,14,5525,1257,9,1465,1269,14,332,1274,9,1232,1287,13,2338,1292,13,2340,1312,14,5376,1325,14,5362,1338,14,5377,1356,14,5378,1372,14,5375,1381,14,5365,1390,14,5364,1398,14,5367,1404,14,5368,1409,14,5369,1414,14,5370,1419,14,5366,1424,13,2337,1434,13,2339,1453,19,7576,1454,19,7575,1456,16,333,1465,25,5373,1475,14,5363,1486,13,2335,1489,13,2341,1493,14,5371,1497,14,5372,1501,14,5374,1506,9,1459,1518,14,463,1523,9,1356,1536,13,2722,1541,13,2724,1561,14,6003,1574,14,5989,1587,14,6004,1605,14,6005,1621,14,6002,1630,14,5992,1639,14,5991,1647,14,5994,1653,14,5995,1658,14,5996,1663,14,5997,1668,14,5993,1673,13,2721,1683,13,2723,1702,19,7610,1703,19,7609,1705,16,464,1714,25,6000,1724,14,5990,1735,13,2719,1738,13,2725,1742,14,5998,1746,14,5999,1750,14,6001,1755,9,1476,1767,14,370,1772,9,1263,1785,13,2441,1790,13,2443,1810,14,5559,1823,14,5545,1836,14,5560,1854,14,5561,1870,14,5558,1879,14,5548,1888,14,5547,1896,14,5550,1902,14,5551,1907,14,5552,1912,14,5553,1917,14,5549,1922,13,2440,1932,13,2442,1951,19,7590,1952,19,7589,1954,16,371,1963,25,5556,1973,14,5546,1984,13,2438,1987,13,2444,1991,14,5554,1995,14,5555,1999,14,5557,2004,9,1466,2016,14,204,2021,9,1114,2034,13,1987,2039,13,1989,2059,14,4842,2072,14,4828,2085,14,4843,2103,14,4844,2119,14,4841,2128,14,4831,2137,14,4830,2145,14,4833,2151,14,4834,2156,14,4835,2161,14,4836,2166,14,4832,2171,13,1986,2181,13,1988,2200,19,7556,2201,19,7555,2203,16,205,2212,25,4839,2222,14,4829,2233,13,1984,2236,13,1990,2240,14,4837,2244,14,4838,2248,14,4840,2253,9,1449,2265,14,436,2270,9,1320,2283,13,2629,2288,13,2631,2308,14,5872,2321,14,5860,2334,14,5873,2352,14,5874,2368,14,5871,2377,14,5863,2386,14,5862,2394,14,5865,2400,14,5858,2405,14,5866,2410,14,5859,2415,14,5864,2420,13,2628,2430,13,2630,2449,19,7607,2450,19,7608,2452,16,437,2461,25,5869,2471,14,5861,2482,13,2626,2485,13,2632,2489,14,5867,2493,14,5868,2497,14,5870,2502,9,1475,2514,14,465,2519,9,1357,2532,13,2729,2537,13,2731,2557,14,6020,2570,14,6006,2583,14,6021,2601,14,6022,2617,14,6019,2626,14,6009,2635,14,6008,2643,14,6011,2649,14,6012,2654,14,6013,2659,14,6014,2664,14,6010,2669,13,2728,2679,13,2730,2698,19,7612,2699,19,7611,2701,16,466,2710,25,6017,2720,14,6007,2731,13,2726,2734,13,2732,2738,14,6015,2742,14,6016,2746,14,6018,2751,9,1477,2763,14,354,2768,9,1249,2781,13,2399,2786,13,2401,2806,14,5490,2819,14,5476,2832,14,5491,2850,14,5492,2866,14,5489,2875,14,5479,2884,14,5478,2892,14,5481,2898,14,5482,2903,14,5483,2908,14,5484,2913,14,5480,2918,13,2398,2928,13,2400,2947,19,7586,2948,19,7585,2950,16,355,2959,25,5487,2969,14,5477,2980,13,2396,2983,13,2402,2987,14,5485,2991,14,5486,2995,14,5488,3000,9,1464,3012,14,288,3017,9,1194,3030,13,2221,3035,13,2223,3055,14,5185,3068,14,5171,3081,14,5186,3099,14,5187,3115,14,5184,3124,14,5174,3133,14,5173,3141,14,5176,3147,14,5177,3152,14,5178,3157,14,5179,3162,14,5175,3167,13,2220,3177,13,2222,3196,19,7564,3197,19,7563,3199,16,289,3208,25,5182,3218,14,5172,3229,13,2218,3232,13,2224,3236,14,5180,3240,14,5181,3244,14,5183,3249,9,1453,3261,14,256,3266,9,1164,3279,13,2137,3284,13,2142,3304,14,5068,3317,14,5054,3330,14,5069,3348,14,5070,3364,14,5067,3373,14,5057,3382,14,5056,3390,14,5059,3396,14,5060,3401,14,5061,3406,14,5062,3411,14,5058,3416,13,2140,3426,13,2141,3445,19,7560,3446,19,7559,3448,16,257,3457,25,5065,3467,14,5055,3478,13,2138,3481,13,2143,3485,14,5063,3489,14,5064,3493,14,5066,3498,9,1451,3510,14,145,3515,9,1059,3528,13,1831,3533,13,1833,3553,14,4615,3566,14,4601,3579,14,4616,3597,14,4617,3613,14,4614,3622,14,4604,3631,14,4603,3639,14,4606,3645,14,4607,3650,14,4608,3655,14,4609,3660,14,4605,3665,13,1830,3675,13,1832,3694,19,7548,3695,19,7547,3697,16,146,3706,25,4612,3716,14,4602,3727,13,1828,3730,13,1834,3734,14,4610,3738,14,4611,3742,14,4613,3747,9,1445,3759,14,77,3764,9,996,3777,13,1642,3782,13,1644,3802,14,4323,3815,14,4309,3828,14,4324,3846,14,4325,3862,14,4322,3871,14,4312,3880,14,4311,3888,14,4314,3894,14,4315,3899,14,4316,3904,14,4317,3909,14,4313,3914,13,1641,3924,13,1643,3943,19,7538,3944,19,7537,3946,16,78,3955,25,4320,3965,14,4310,3976,13,1639,3979,13,1645,3983,14,4318,3987,14,4319,3991,14,4321,3996,9,1440,4008,14,25,4013,9,947,4026,13,1486,4031,13,1488,4051,14,4084,4064,14,4070,4077,14,4085,4095,14,4086,4111,14,4083,4120,14,4073,4129,14,4072,4137,14,4075,4143,14,4076,4148,14,4077,4153,14,4078,4158,14,4074,4163,13,1485,4173,13,1487,4192,19,7532,4193,19,7531,4195,16,26,4204,25,4081,4214,14,4071,4225,13,1483,4228,13,1489,4232,14,4079,4236,14,4080,4240,14,4082,4245,9,1437,4257,14,55,4262,9,976,4275,13,1576,4280,13,1578,4300,14,4214,4313,14,4200,4326,14,4215,4344,14,4216,4360,14,4213,4369,14,4203,4378,14,4202,4386,14,4205,4392,14,4206,4397,14,4207,4402,14,4208,4407,14,4204,4412,13,1575,4422,13,1577,4441,19,7534,4442,19,7533,4444,16,56,4453,25,4211,4463,14,4201,4474,13,1573,4477,13,1579,4481,14,4209,4485,14,4210,4489,14,4212,4494,9,1438,4506,14,294,4511,9,1199,4524,13,2235,4529,13,2237,4549,14,5208,4562,14,5194,4575,14,5209,4593,14,5210,4609,14,5207,4618,14,5197,4627,14,5196,4635,14,5199,4641,14,5200,4646,14,5201,4651,14,5202,4656,14,5198,4661,13,2234,4671,13,2236,4690,19,7566,4691,19,7565,4693,16,295,4702,25,5205,4712,14,5195,4723,13,2232,4726,13,2238,4730,14,5203,4734,14,5204,4738,14,5206,4743,9,1454,4752,14,306,4757,9,1210,4770,13,2263,4775,13,2265,4795,14,5247,4808,14,5233,4821,14,5248,4839,14,5249,4855,14,5246,4864,14,5236,4873,14,5235,4881,14,5238,4887,14,5239,4892,14,5240,4897,14,5241,4902,14,5237,4907,13,2262,4917,13,2264,4936,19,7567,4937,19,7568,4939,16,307,4948,25,5244,4958,14,5234,4969,13,2260,4972,13,2266,4976,14,5242,4980,14,5243,4984,14,5245,4989,9,1455,5001,14,141,5006,9,1056,5019,13,1819,5024,13,1821,5044,14,4592,5057,14,4578,5070,14,4593,5088,14,4594,5104,14,4591,5113,14,4581,5122,14,4580,5130,14,4583,5136,14,4584,5141,14,4585,5146,14,4586,5151,14,4582,5156,13,1818,5166,13,1820,5185,19,7546,5186,19,7545,5188,16,142,5197,25,4589,5207,14,4579,5218,13,1816,5221,13,1822,5225,14,4587,5229,14,4588,5233,14,4590,5238,9,1444,5250,14,424,5255,9,1309,5268,13,2597,5273,13,2599,5293,14,5825,5306,14,5811,5319,14,5826,5337,14,5827,5353,14,5824,5362,14,5814,5371,14,5813,5379,14,5816,5385,14,5817,5390,14,5818,5395,14,5819,5400,14,5815,5405,13,2596,5415,13,2598,5434,19,7606,5435,19,7605,5437,16,425,5446,25,5822,5456,14,5812,5467,13,2594,5470,13,2600,5474,14,5820,5478,14,5821,5482,14,5823,5487,9,1474,5499,14,390,5504,9,1281,5517,13,2498,5522,13,2500,5542,14,5650,5555,14,5636,5568,14,5651,5586,14,5652,5602,14,5649,5611,14,5639,5620,14,5638,5628,14,5641,5634,14,5642,5639,14,5643,5644,14,5644,5649,14,5640,5654,13,2497,5664,13,2499,5683,19,7594,5684,19,7593,5686,16,391,5695,25,5647,5705,14,5637,5716,13,2495,5719,13,2501,5723,14,5645,5727,14,5646,5731,14,5648,5736,9,1468,5748,14,501,5753,9,1392,5766,13,2833,5771,13,2835,5791,14,6166,5804,14,6152,5817,14,6167,5835,14,6168,5851,14,6165,5860,14,6155,5869,14,6154,5877,14,6157,5883,14,6158,5888,14,6159,5893,14,6160,5898,14,6156,5903,13,2832,5913,13,2834,5932,19,7614,5933,19,7613,5935,16,502,5944,25,6163,5954,14,6153,5965,13,2830,5968,13,2836,5972,14,6161,5976,14,6162,5980,14,6164,5985,9,1478,5997,14,260,6002,9,1167,6015,13,2151,6020,13,2153,6040,14,5089,6053,14,5075,6066,14,5090,6084,14,5091,6100,14,5088,6109,14,5078,6118,14,5077,6126,14,5080,6132,14,5081,6137,14,5082,6142,14,5083,6147,14,5079,6152,13,2150,6162,13,2152,6181,19,7562,6182,19,7561,6184,16,261,6193,25,5086,6203,14,5076,6214,13,2148,6217,13,2154,6221,14,5084,6225,14,5085,6229,14,5087,6234,9,1452,6246,14,103,6251,9,1020,6264,13,1712,6269,13,1714,6289,14,4435,6302,14,4421,6315,14,4436,6333,14,4437,6349,14,4434,6358,14,4424,6367,14,4423,6375,14,4426,6381,14,4427,6386,14,4428,6391,14,4429,6396,14,4425,6401,13,1711,6411,13,1713,6430,19,7542,6431,19,7541,6433,16,104,6442,25,4432,6452,14,4422,6463,13,1709,6466,13,1715,6470,14,4430,6474,14,4431,6478,14,4433,6483,9,1442,6494,14,416,6499,9,1302,6512,13,2574,6517,13,2576,6537,14,5788,6550,14,5774,6563,14,5789,6581,14,5790,6597,14,5787,6606,14,5777,6615,14,5776,6623,14,5779,6629,14,5780,6634,14,5781,6639,14,5782,6644,14,5778,6649,13,2573,6659,13,2575,6678,19,7604,6679,19,7603,6681,16,417,6690,25,5785,6700,14,5775,6711,13,2571,6714,13,2577,6718,14,5783,6722,14,5784,6726,14,5786,6731,9,1473,6743,14,79,6748,9,997,6761,13,1649,6766,13,1651,6786,14,4340,6799,14,4326,6812,14,4341,6830,14,4342,6846,14,4339,6855,14,4329,6864,14,4328,6872,14,4331,6878,14,4332,6883,14,4333,6888,14,4334,6893,14,4330,6898,13,1648,6908,13,1650,6927,19,7540,6928,19,7539,6930,16,80,6939,25,4337,6949,14,4327,6960,13,1646,6963,13,1652,6967,14,4335,6971,14,4336,6975,14,4338,6980,9,1441,6992,14,408,6997,9,1295,7010,13,2554,7015,13,2556,7035,14,5756,7048,14,5742,7061,14,5757,7079,14,5758,7095,14,5755,7104,14,5745,7113,14,5744,7121,14,5747,7127,14,5748,7132,14,5749,7137,14,5750,7142,14,5746,7147,13,2553,7157,13,2555,7176,19,7602,7177,19,7601,7179,16,409,7188,25,5753,7198,14,5743,7209,13,2551,7212,13,2557,7216,14,5751,7220,14,5752,7224,14,5754,7229,9,1472,7241,14,155,7246,9,1068,7259,13,1858,7264,13,1860,7284,14,4656,7297,14,4642,7310,14,4657,7328,14,4658,7344,14,4655,7353,14,4645,7362,14,4644,7370,14,4647,7376,14,4648,7381,14,4649,7386,14,4650,7391,14,4646,7396,13,1857,7406,13,1859,7425,19,7550,7426,19,7549,7428,16,156,7437,25,4653,7447,14,4643,7458,13,1855,7461,13,1861,7465,14,4651,7469,14,4652,7473,14,4654,7478,9,1446,7490,14,160,7495,9,1072,7508,13,1872,7513,13,1874,7533,14,4678,7546,14,4664,7559,14,4679,7577,14,4680,7593,14,4677,7602,14,4667,7611,14,4666,7619,14,4669,7625,14,4670,7630,14,4671,7635,14,4672,7640,14,4668,7645,13,1871,7655,13,1873,7674,19,7552,7675,19,7551,7677,16,161,7686,25,4675,7696,14,4665,7707,13,1869,7710,13,1875,7714,14,4673,7718,14,4674,7722,14,4676,7727,9,1447,7739,14,59,7744,9,979,7757,13,1587,7762,13,1589,7782,14,4235,7795,14,4221,7808,14,4236,7826,14,4237,7842,14,4234,7851,14,4224,7860,14,4223,7868,14,4226,7874,14,4227,7879,14,4228,7884,14,4229,7889,14,4225,7894,13,1586,7904,13,1588,7923,19,7536,7924,19,7535,7926,16,60,7935,25,4232,7945,14,4222,7956,13,1584,7959,13,1590,7963,14,4230,7967,14,4231,7971,14,4233,7976,9,1439,7988,14,105,7993,9,1021,8006,13,1719,8011,13,1721,8031,14,4452,8044,14,4438,8057,14,4453,8075,14,4454,8091,14,4451,8100,14,4441,8109,14,4440,8117,14,4443,8123,14,4444,8128,14,4445,8133,14,4446,8138,14,4442,8143,13,1718,8153,13,1720,8172,19,7544,8173,19,7543,8175,16,106,8184,25,4449,8194,14,4439,8205,13,1716,8208,13,1722,8212,14,4447,8216,14,4448,8220,14,4450,8225,9,1443,8237,14,330,8242,9,1231,8255,13,2331,8260,13,2333,8280,14,5359,8293,14,5345,8306,14,5360,8324,14,5361,8340,14,5358,8349,14,5348,8358,14,5347,8366,14,5350,8372,14,5351,8377,14,5352,8382,14,5353,8387,14,5349,8392,13,2330,8402,13,2332,8421,19,7573,8422,19,7574,8424,16,331,8433,25,5356,8443,14,5346,8454,13,2328,8457,13,2334,8461,14,5354,8465,14,5355,8469,14,5357,8474,9,1458,8486,14,380,8491,9,1272,8504,13,2466,8509,13,2468,8529,14,5597,8542,14,5583,8555,14,5598,8573,14,5599,8589,14,5596,8598,14,5586,8607,14,5585,8615,14,5588,8621,14,5589,8626,14,5590,8631,14,5591,8636,14,5587,8641,13,2465,8651,13,2467,8670,19,7592,8671,19,7591,8673,16,381,8682,25,5594,8692,14,5584,8703,13,2463,8706,13,2469,8710,14,5592,8714,14,5593,8718,14,5595,8723,9,1467,8735,14,334,8740,9,1233,8753,13,2345,8758,13,2347,8778,14,5393,8791,14,5379,8804,14,5394,8822,14,5395,8838,14,5392,8847,14,5382,8856,14,5381,8864,14,5384,8870,14,5385,8875,14,5386,8880,14,5387,8885,14,5383,8890,13,2344,8900,13,2346,8919,19,7578,8920,19,7577,8922,16,335,8931,25,5390,8941,14,5380,8952,13,2342,8955,13,2348,8959,14,5388,8963,14,5389,8967,14,5391,8972,9,1460,8984,14,404,8989,9,1293,9002,13,2537,9007,13,2542,9027,14,5722,9040,14,5708,9053,14,5723,9071,14,5724,9087,14,5721,9096,14,5711,9105,14,5710,9113,14,5713,9119,14,5714,9124,14,5715,9129,14,5716,9134,14,5712,9139,13,2540,9149,13,2541,9168,19,7598,9169,19,7597,9171,16,405,9180,25,5719,9190,14,5709,9201,13,2538,9204,13,2543,9208,14,5717,9212,14,5718,9216,14,5720,9221,9,1470,9233,14,406,9238,9,1294,9251,13,2544,9256,13,2549,9276,14,5739,9289,14,5725,9302,14,5740,9320,14,5741,9336,14,5738,9345,14,5728,9354,14,5727,9362,14,5730,9368,14,5731,9373,14,5732,9378,14,5733,9383,14,5729,9388,13,2547,9398,13,2548,9417,19,7599,9418,19,7600,9420,16,407,9429,25,5736,9439,14,5726,9450,13,2545,9453,13,2550,9457,14,5734,9461,14,5735,9465,14,5737,9470,9,1471,9482,14,344,9487,9,1241,9500,13,2370,9505,13,2375,9525,14,5443,9538,14,5429,9551,14,5444,9569,14,5445,9585,14,5442,9594,14,5432,9603,14,5431,9611,14,5434,9617,14,5435,9622,14,5436,9627,14,5437,9632,14,5433,9637,13,2373,9647,13,2374,9666,19,7581,9667,19,7582,9669,16,345,9678,25,5440,9688,14,5430,9699,13,2371,9702,13,2376,9706,14,5438,9710,14,5439,9714,14,5441,9719,9,1462,9731,14,308,9736,9,1211,9749,13,2270,9754,13,2272,9774,14,5264,9787,14,5250,9800,14,5265,9818,14,5266,9834,14,5263,9843,14,5253,9852,14,5252,9860,14,5255,9866,14,5256,9871,14,5257,9876,14,5258,9881,14,5254,9886,13,2269,9896,13,2271,9915,19,7570,9916,19,7569,9918,16,309,9927,25,5261,9937,14,5251,9948,13,2267,9951,13,2273,9955,14,5259,9959,14,5260,9963,14,5262,9968,9,1456,9980,14,394,9985,9,1284,9998,13,2510,10003,13,2512,10023,14,5674,10036,14,5660,10049,14,5675,10067,14,5676,10083,14,5673,10092,14,5663,10101,14,5662,10109,14,5665,10115,14,5666,10120,14,5667,10125,14,5668,10130,14,5664,10135,13,2509,10145,13,2511,10164,19,7595,10165,19,7596,10167,16,395,10176,25,5671,10186,14,5661,10197,13,2507,10200,13,2513,10204,14,5669,10208,14,5670,10212,14,5672,10217,9,1469,10229,14,326,10234,9,1228,10247,13,2321,10252,13,2323,10272,14,5340,10285,14,5326,10298,14,5341,10316,14,5342,10332,14,5339,10341,14,5329,10350,14,5328,10358,14,5331,10364,14,5332,10369,14,5333,10374,14,5334,10379,14,5330,10384,13,2320,10394,13,2322,10413,19,7572,10414,19,7571,10416,16,327,10425,25,5337,10435,14,5327,10446,13,2318,10449,13,2324,10453,14,5335,10457,14,5336,10461,14,5338,10466,9,1457,10475,13,2085,10480,13,2364,10485,13,1978,10490,13,2384,10495,13,2417,10500,13,2336,10505,13,2720,10510,13,2439,10515,13,1985,10520,13,2627,10525,13,2727,10530,13,2397,10535,13,2219,10540,13,2139,10545,13,1829,10550,13,1640,10555,13,1484,10560,13,1574,10565,13,2233,10570,13,2261,10575,13,1817,10580,13,2595,10585,13,2496,10590,13,2831,10595,13,2149,10600,13,1710,10605,13,2572,10610,13,1647,10615,13,2552,10620,13,1856,10625,13,1870,10630,13,1585,10635,13,1717,10640,13,2329,10645,13,2464,10650,13,2343,10655,13,2539,10660,13,2546,10665,13,2372,10670,13,2268,10675,13,2508,10680,13,2319]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxEnum.swift","symbols":[15,12,20,16,7,784,17,7,777,18,7,773,19,7,774,20,7,775,21,7,776,22,7,782,23,7,574,24,7,575,25,7,576,26,7,577,27,7,632,28,7,606,29,7,672,30,7,800,31,7,805,32,7,649,33,7,724,34,7,654,35,7,727,36,7,733,37,7,783,38,7,796,39,7,658,40,7,719,41,7,673,42,7,622,43,7,598,44,7,626,45,7,728,46,7,617,47,7,597,48,7,788,49,7,612,50,7,611,51,7,650,52,7,686,53,7,687,54,7,701,55,7,734,56,7,702,57,7,691,58,7,794,59,7,659,60,7,808,61,7,792,62,7,619,63,7,668,64,7,581,65,7,675,66,7,698,67,7,692,68,7,573,69,7,663,70,7,781,71,7,778,72,7,791,73,7,693,74,7,738,75,7,745,76,7,583,77,7,655,78,7,656,79,7,571,80,7,737,81,7,768,82,7,771,83,7,660,84,7,615,85,7,722,86,7,640,87,7,665,88,7,629,89,7,613,90,7,677,91,7,689,92,7,667,93,7,572,94,7,643,95,7,610,96,7,789,97,7,645,98,7,664,99,7,708,100,7,729,101,7,685,102,7,736,103,7,616,104,7,690,105,7,730,106,7,647,107,7,596,108,7,679,109,7,624,110,7,697,111,7,589,112,7,628,113,7,666,114,7,709,115,7,747,116,7,585,117,7,608,118,7,681,119,7,735,120,7,799,121,7,567,122,7,595,123,7,607,124,7,644,125,7,625,126,7,699,127,7,566,128,7,682,129,7,678,130,7,591,131,7,587,132,7,642,133,7,674,134,7,614,135,7,704,136,7,705,137,7,563,138,7,564,139,7,670,140,7,579,141,7,580,142,7,602,143,7,627,144,7,700,145,7,600,146,7,637,147,7,706,148,7,586,149,7,787,150,7,593,151,7,623,152,7,758,153,7,710,154,7,765,155,7,749,156,7,748,157,7,759,158,7,754,159,7,764,160,7,807,161,7,683,162,7,635,163,7,795,164,7,604,165,7,761,166,7,671,167,7,744,168,7,712,169,7,763,170,7,786,171,7,762,172,7,684,173,7,592,174,7,770,175,7,766,176,7,746,177,7,757,178,7,741,179,7,772,180,7,688,181,7,661,182,7,584,183,7,810,184,7,801,185,7,621,186,7,630,187,7,651,188,7,804,189,7,578,190,7,803,191,7,569,192,7,633,193,7,779,194,7,565,195,7,812,196,7,811,197,7,639,198,7,797,199,7,582,200,7,605,201,7,657,202,7,726,203,7,752,204,7,753,205,7,751,206,7,718,207,7,636,208,7,806,209,7,780,210,7,694,211,7,802,212,7,568,213,7,703,214,7,785,215,7,798,216,7,652,217,7,570,218,7,648,219,7,696,220,7,743,221,7,695,222,7,711,223,7,720,224,7,662,225,7,755,226,7,732,227,7,742,228,7,740,229,7,723,230,7,721,231,7,717,232,7,793,233,7,620,234,7,590,235,7,594,236,7,790,237,7,769,238,7,739,239,7,756,240,7,634,241,7,669,242,7,725,243,7,809,244,7,588,245,7,618,246,7,707,247,7,641,248,7,731,249,7,631,250,7,638,251,7,609,252,7,646,253,7,680,254,7,603,255,7,599,256,7,653,257,7,713,258,7,676,259,7,750,260,7,714,261,7,716,262,7,715,263,7,760,264,7,767,265,7,601,270,7,6222]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxFactory.swift","symbols":[24,12,21,25,21,4056,34,21,3438,49,21,3685,56,21,3686,63,21,3687,70,21,3688,77,21,3822,83,21,3566,95,21,3773,104,21,3743,112,21,3907,118,21,3461,130,21,3603,139,21,3469,150,21,3608,158,21,3667,168,21,3853,175,21,3871,183,21,3985,189,21,3680,197,21,3875,203,21,3891,211,21,3991,217,21,3899,225,21,3997,231,21,3443,243,21,3520,252,21,3457,263,21,3599,271,21,3693,282,21,3879,290,21,3860,298,21,3980,304,21,3745,316,21,3908,325,21,3620,336,21,3812,344,21,3546,354,21,3739,361,21,3628,371,21,3816,378,21,3892,388,21,3992,395,21,3591,405,21,3807,412,21,3544,422,21,3738,429,21,3448,437,21,3561,443,21,3575,453,21,3779,460,21,3574,470,21,3778,477,21,3668,487,21,3854,494,21,3760,504,21,3921,511,21,3761,521,21,3922,528,21,3798,538,21,3947,545,21,3900,556,21,3998,564,21,3801,575,21,3948,583,21,3768,593,21,3937,600,21,3454,612,21,3597,621,21,3696,631,21,3880,638,21,3473,650,21,3611,659,21,3452,671,21,3595,680,21,3617,692,21,3809,701,21,3712,714,21,3889,724,21,3519,735,21,3722,743,21,3747,756,21,3910,766,21,3793,776,21,3944,783,21,3784,793,21,3938,800,21,3514,814,21,3684,825,21,3701,838,21,3884,848,21,3442,859,21,3503,867,21,3439,879,21,3500,888,21,3451,898,21,3564,905,21,3786,919,21,3939,930,21,3925,938,21,4008,944,21,3950,956,21,4016,965,21,3525,976,21,3724,984,21,3690,992,21,3876,998,21,3691,1014,21,3877,1027,21,3506,1040,21,3682,1050,21,3903,1060,21,4001,1067,21,4033,1079,21,4050,1088,21,4048,1096,21,4053,1102,21,3697,1117,21,3881,1129,21,3586,1144,21,3782,1156,21,3864,1167,21,3983,1175,21,3655,1186,21,3844,1194,21,3703,1205,21,3886,1213,21,3635,1224,21,3819,1232,21,3582,1242,21,3780,1249,21,3749,1263,21,3912,1274,21,3764,1288,21,3924,1299,21,3708,1309,21,3888,1316,21,3511,1328,21,3683,1337,21,3659,1347,21,3847,1354,21,3573,1365,21,3777,1373,21,3449,1381,21,3562,1387,21,3661,1400,21,3849,1410,21,3702,1425,21,3885,1437,21,3825,1448,21,3964,1456,21,3893,1466,21,3993,1473,21,3757,1486,21,3920,1496,21,3902,1507,21,4000,1515,21,3589,1531,21,3783,1544,21,3767,1560,21,3936,1573,21,3894,1581,21,3994,1587,21,3664,1599,21,3851,1608,21,3543,1619,21,3737,1627,21,3751,1640,21,3914,1650,21,3622,1662,21,3814,1671,21,3792,1679,21,3943,1685,21,3534,1696,21,3730,1704,21,3630,1717,21,3818,1727,21,3707,1740,21,3887,1750,21,3827,1763,21,3965,1773,21,3953,1789,21,4018,1802,21,3527,1815,21,3726,1825,21,3571,1836,21,3775,1844,21,3753,1852,21,3916,1858,21,3901,1869,21,3999,1877,21,3460,1894,21,3602,1908,21,3493,1925,21,3643,1939,21,3541,1955,21,3736,1968,21,3569,1984,21,3774,1997,21,3660,2009,21,3848,2018,21,3627,2026,21,3815,2032,21,3794,2043,21,3945,2051,21,3492,2062,21,3642,2070,21,3754,2081,21,3917,2089,21,3750,2106,21,3913,2120,21,3537,2128,21,3732,2134,21,3531,2151,21,3728,2165,21,3657,2183,21,3846,2198,21,3746,2211,21,3909,2221,21,3585,2238,21,3781,2252,21,3805,2265,21,3960,2275,21,3806,2286,21,3961,2294,21,3479,2302,21,3639,2308,21,3487,2322,21,3640,2333,21,3717,2345,21,3905,2354,21,3517,2370,21,3720,2383,21,3518,2391,21,3721,2397,21,3554,2409,21,3769,2418,21,3629,2432,21,3817,2443,21,3795,2451,21,3946,2457,21,3549,2470,21,3741,2480,21,3651,2493,21,3841,2503,21,3823,2511,21,3962,2517,21,3529,2530,21,3727,2540,21,3447,2557,21,3560,2571,21,3539,2585,21,3734,2596,21,3621,2604,21,3813,2610,21,4004,2621,21,4037,2629,21,3829,2645,21,3966,2658,21,4026,2666,21,4046,2672,21,3956,2684,21,4020,2693,21,3955,2701,21,4019,2707,21,4006,2718,21,4038,2726,21,3988,2738,21,4031,2747,21,4025,2759,21,4045,2768,21,3472,2776,21,3610,2782,21,3755,2790,21,3918,2796,21,3649,2810,21,3839,2821,21,3456,2836,21,3598,2848,21,3556,2856,21,3771,2862,21,4015,2870,21,4041,2876,21,3719,2889,21,3906,2899,21,3932,2912,21,4014,2922,21,3831,2935,21,3968,2945,21,4024,2957,21,4044,2966,21,3446,2977,21,3559,2985,21,4023,2998,21,4043,3008,21,3756,3019,21,3919,3027,21,3538,3035,21,3733,3041,21,4042,3055,21,4052,3066,21,4029,3078,21,4047,3087,21,3951,3099,21,4017,3108,21,4003,3116,21,4036,3122,21,3928,3133,21,4011,3141,21,4054,3157,21,4055,3170,21,3763,3183,21,3923,3193,21,3698,3204,21,3882,3212,21,3526,3223,21,3725,3231,21,3476,3245,21,3613,3256,21,3462,3267,21,3604,3275,21,3619,3285,21,3811,3292,21,3636,3300,21,3820,3306,21,3670,3321,21,3855,3333,21,3466,3346,21,3607,3356,21,3516,3367,21,3689,3375,21,3465,3396,21,3606,3414,21,3495,3430,21,3645,3443,21,3646,3451,21,3837,3457,21,3440,3471,21,3501,3482,21,3491,3493,21,3641,3501,21,3478,3512,21,3615,3520,21,3477,3533,21,3614,3543,21,3653,3553,21,3843,3560,21,3458,3571,21,3600,3579,21,3522,3587,21,3723,3593,21,3565,3601,21,3772,3607,21,3692,3618,21,3878,3626,21,3874,3639,21,3990,3649,21,3971,3662,21,4027,3672,21,3972,3685,21,4028,3695,21,3959,3708,21,4022,3718,21,3859,3726,21,3979,3732,21,3650,3742,21,3840,3749,21,3471,3760,21,3609,3768,21,3441,3784,21,3502,3797,21,3787,3807,21,3940,3814,21,3464,3825,21,3605,3833,21,3494,3845,21,3644,3854,21,3804,3865,21,3949,3873,21,3445,3885,21,3558,3894,21,3459,3906,21,3601,3915,21,3675,3927,21,3856,3936,21,3505,3948,21,3681,3957,21,3666,3972,21,3852,3984,21,3791,3995,21,3942,4003,21,3930,4011,21,4013,4017,21,3790,4028,21,3941,4036,21,3830,4048,21,3967,4057,21,3862,4065,21,3981,4071,21,3699,4085,21,3883,4096,21,3989,4104,21,4032,4110,21,3898,4125,21,3996,4137,21,3929,4149,21,4012,4158,21,3927,4170,21,4010,4179,21,3869,4190,21,3984,4198,21,3863,4211,21,3982,4221,21,3858,4231,21,3978,4238,21,3453,4250,21,3596,4259,21,3618,4273,21,3810,4284,21,3536,4296,21,3731,4305,21,3540,4316,21,3735,4324,21,3450,4335,21,3563,4343,21,4039,4354,21,4051,4362,21,3926,4373,21,4009,4381,21,4002,4389,21,4035,4395,21,3647,4405,21,3838,4412,21,3715,4429,21,3890,4443,21,3872,4451,21,3986,4457,21,3474,4469,21,3612,4478,21,3532,4494,21,3729,4507,21,3592,4519,21,3808,4528,21,3824,4536,21,3963,4542,21,3656,4553,21,3845,4561,21,3895,4573,21,3995,4582,21,3637,4593,21,3821,4601,21,3652,4614,21,3842,4624,21,3572,4635,21,3776,4643,21,3663,4654,21,3850,4662,21,3752,4672,21,3915,4679,21,3555,4691,21,3770,4700,21,3548,4712,21,3740,4721,21,3677,4732,21,3857,4740,21,3832,4753,21,3969,4763,21,3748,4773,21,3911,4780,21,3958,4788,21,4021,4794,21,3833,4805,21,3970,4813,21,3836,4821,21,3977,4827,21,3835,4838,21,3976,4846,21,4007,4858,21,4040,4867,21,4030,4878,21,4049,4886,21,3551,4898,21,3742,4910,21,3873,4916,21,3524,4922,21,3567,4928,21,3508,4934,21,3695,4940,21,3509,4946,21,3570,4952,21,3510,4958,21,3535,4964,21,3488,4970,21,3662,4976,21,3934,4982,21,3669,4988,21,3584,4994,21,3711,5000,21,3716,5006,21,3497,5012,21,3789,5018,21,3658,5024,21,3633,5030,21,3577,5036,21,3580,5042,21,3528,5048,21,3467,5054,21,3533,5060,21,3463,5066,21,3578,5072,21,3507,5078,21,3485,5084,21,3468,5090,21,3553,5096,21,3579,5102,21,3521,5108,21,3648,5114,21,3788,5120,21,3587,5126,21,3504,5132,21,3616,5138,21,3552,5144,21,3523,5150,21,3547,5156,21,3455,5162,21,3480,5168,21,3530,5174,21,3470,5180,21,3489,5186,21,3671,5192,21,3545,5198,21,3513,5204,21,3785,5210,21,3515,5216,21,3496,5222,21,3588,5228,21,3678,5234,21,3679,5240,21,3766,5246,21,3834,5252,21,3904,5258,21,3676,5264,21,3626,5270,21,3674,5276,21,3625,5282,21,3673,5288,21,3933,5294,21,3957,5300,21,3624,5306,21,3672,5312,21,3512,5318,21,3762,5324,21,3483,5330,21,3568,5336,21,3482,5342,21,3634,5348,21,3484,5354,21,3499,5360,21,3490,5366,21,3868,5372,21,3481,5378,21,3557,5384,21,3593,5390,21,3861,5396,21,3973,5402,21,3931,5408,21,3710,5414,21,3709,5420,21,3987,5426,21,3826,5432,21,3706,5438,21,3867,5444,21,3705,5450,21,3800,5456,21,3865,5462,21,3797,5468,21,3866,5474,21,3897,5480,21,3796,5486,21,4005,5492,21,3828,5498,21,3759,5504,21,3631,5510,21,3704,5516,21,3799,5522,21,3758,5528,21,3896,5534,21,3954,5540,21,3952,5546,21,3975,5552,21,3974,5558,21,3623,5564,21,3654,5570,21,3581,5576,21,3542,5582,21,3444,5588,21,3486,5594,21,3935,5600,21,3870,5606,21,3665,5612,21,3632,5618,21,3694,5624,21,3744,5630,21,3802,5636,21,3583,5642,21,4034,5648,21,3498,5657,21,3590,5663,21,3713,5671,21,3714,5677,21,3700,5684,21,3638,5694,21,3718,5700,21,3803,5706,21,3475,5712,21,3576,5718,21,3594,5727,21,3765,5742,21,3550]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxRewriter.swift","symbols":[22,11,537,23,9,1411,28,12,7254,35,12,7308,42,12,7330,49,12,7342,56,12,7352,63,12,7373,70,12,7401,77,12,7484,84,12,7303,91,12,7273,98,12,7432,105,12,7390,112,12,7435,119,12,7439,126,12,7298,133,12,7302,140,12,7394,147,12,7430,154,12,7402,161,12,7267,168,12,7310,175,12,7268,182,12,7292,189,12,7265,196,12,7309,203,12,7480,210,12,7312,217,12,7311,224,12,7290,231,12,7281,238,12,7282,245,12,7287,252,12,7294,259,12,7288,266,12,7284,273,12,7301,280,12,7274,287,12,7304,294,12,7300,301,12,7266,308,12,7397,315,12,7362,322,12,7403,329,12,7286,336,12,7285,343,12,7307,350,12,7276,357,12,7297,364,12,7296,371,12,7299,378,12,7412,385,12,7442,392,12,7449,399,12,7364,406,12,7391,413,12,7392,420,12,7305,427,12,7295,434,12,7472,441,12,7474,448,12,7275,455,12,7313,462,12,7291,469,12,7270,476,12,7278,483,12,7269,490,12,7376,497,12,7404,504,12,7283,511,12,7279,518,12,7306,525,12,7271,532,12,7375,539,12,7481,546,12,7272,553,12,7277,560,12,7289,567,12,7293,574,12,7280,581,12,7441,588,12,7264,595,12,7247,602,12,7436,609,12,7388,616,12,7368,623,12,7406,630,12,7378,637,12,7416,644,12,7258,651,12,7243,658,12,7245,665,12,7249,672,12,7451,679,12,7365,686,12,7374,693,12,7407,700,12,7440,707,12,7251,714,12,7253,721,12,7260,728,12,7262,735,12,7387,742,12,7379,749,12,7417,756,12,7357,763,12,7408,770,12,7405,777,12,7366,784,12,7257,791,12,7244,798,12,7246,805,12,7263,812,12,7420,819,12,7421,826,12,7356,833,12,7252,840,12,7399,847,12,7255,854,12,7361,861,12,7370,868,12,7380,875,12,7418,882,12,7261,889,12,7385,896,12,7422,903,12,7256,910,12,7250,917,12,7259,924,12,7377,931,12,7462,938,12,7248,945,12,7469,952,12,7453,959,12,7452,966,12,7463,973,12,7458,980,12,7468,987,12,7486,994,12,7409,1001,12,7384,1008,12,7482,1015,12,7371,1022,12,7465,1029,12,7400,1036,12,7448,1043,12,7425,1050,12,7467,1057,12,7479,1064,12,7466,1071,12,7410,1078,12,7367,1085,12,7473,1092,12,7470,1099,12,7450,1106,12,7461,1113,12,7445,1120,12,7475,1127,12,7411,1134,12,7395,1141,12,7331,1148,12,7326,1155,12,7322,1162,12,7314,1169,12,7381,1176,12,7318,1183,12,7324,1190,12,7360,1197,12,7323,1204,12,7329,1211,12,7383,1218,12,7319,1225,12,7328,1232,12,7327,1239,12,7487,1246,12,7316,1253,12,7321,1260,12,7363,1267,12,7372,1274,12,7393,1281,12,7434,1288,12,7456,1295,12,7457,1302,12,7455,1309,12,7429,1316,12,7315,1323,12,7325,1330,12,7320,1337,12,7413,1344,12,7485,1351,12,7358,1358,12,7419,1365,12,7478,1372,12,7483,1379,12,7389,1386,12,7359,1393,12,7317,1400,12,7415,1407,12,7447,1414,12,7414,1421,12,7424,1428,12,7431,1435,12,7396,1442,12,7459,1449,12,7438,1456,12,7446,1463,12,7444,1470,12,7341,1477,12,7340,1484,12,7335,1491,12,7338,1498,12,7333,1505,12,7344,1512,12,7345,1519,12,7337,1526,12,7336,1533,12,7443,1540,12,7460,1547,12,7334,1554,12,7398,1561,12,7433,1568,12,7339,1575,12,7343,1582,12,7332,1589,12,7423,1596,12,7386,1603,12,7437,1610,12,7382,1617,12,7353,1624,12,7351,1631,12,7354,1638,12,7347,1645,12,7350,1652,12,7349,1659,12,7355,1666,12,7426,1673,12,7346,1680,12,7454,1687,12,7348,1694,12,7428,1701,12,7427,1708,12,7464,1715,12,7471,1722,12,7369,1730,12,7476,1737,12,7477,1743,12,7490,1752,12,7489,1758,12,7491,1763,14,7488]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxTraits.swift","symbols":[16,16,12,17,6,2791,18,7,6102,19,6,2793,20,7,6101,21,6,2792,22,7,6100,29,7,7230,36,7,7222,43,16,9,44,6,2668,45,7,5917,46,6,2667,47,7,5918,54,7,7228,61,7,7220,68,16,2,69,6,1811,70,7,4573,77,7,7225,84,7,7217,91,16,1,92,6,1787,93,7,4545,100,7,7224,107,7,7216,114,16,0,115,6,1750,116,7,4489,117,6,1749,118,7,4490,125,7,7223,132,7,7215,139,16,4,140,6,2184,141,7,5128,148,7,7227,155,7,7219,162,16,10,163,6,2690,164,7,5949,165,6,2689,166,7,5950,173,7,7229,180,7,7221,187,16,3,188,6,1868,189,7,4663,196,7,7226,203,7,7218]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/SyntaxVisitor.swift","symbols":[16,12,19,19,7,562,22,7,561,25,11,536,26,9,1409,30,14,6721,37,12,6733,43,12,6978,47,12,6734,53,12,6979,57,12,6735,63,12,6980,67,12,6736,73,12,6981,77,12,6790,83,12,7036,87,12,6764,93,12,7010,97,12,6830,103,12,7076,107,12,6953,113,12,7199,117,12,6958,123,12,7204,127,12,6807,133,12,7053,137,12,6882,143,12,7128,147,12,6812,153,12,7058,157,12,6885,163,12,7131,167,12,6891,173,12,7137,177,12,6936,183,12,7182,187,12,6949,193,12,7195,197,12,6816,203,12,7062,207,12,6877,213,12,7123,217,12,6831,223,12,7077,227,12,6780,233,12,7026,237,12,6756,243,12,7002,247,12,6784,253,12,7030,257,12,6886,263,12,7132,267,12,6775,273,12,7021,277,12,6755,283,12,7001,287,12,6941,293,12,7187,297,12,6770,303,12,7016,307,12,6769,313,12,7015,317,12,6808,323,12,7054,327,12,6844,333,12,7090,337,12,6845,343,12,7091,347,12,6859,353,12,7105,357,12,6892,363,12,7138,367,12,6860,373,12,7106,377,12,6849,383,12,7095,387,12,6947,393,12,7193,397,12,6817,403,12,7063,407,12,6961,413,12,7207,417,12,6945,423,12,7191,427,12,6777,433,12,7023,437,12,6826,443,12,7072,447,12,6740,453,12,6985,457,12,6833,463,12,7079,467,12,6856,473,12,7102,477,12,6850,483,12,7096,487,12,6732,493,12,6977,497,12,6821,503,12,7067,507,12,6935,513,12,7181,517,12,6932,523,12,7178,527,12,6944,533,12,7190,537,12,6851,543,12,7097,547,12,6896,553,12,7142,557,12,6903,563,12,7149,567,12,6742,573,12,6987,577,12,6813,583,12,7059,587,12,6814,593,12,7060,597,12,6730,603,12,6975,607,12,6895,613,12,7141,617,12,6926,623,12,7172,627,12,6929,633,12,7175,637,12,6818,643,12,7064,647,12,6773,653,12,7019,657,12,6880,663,12,7126,667,12,6798,673,12,7044,677,12,6823,683,12,7069,687,12,6787,693,12,7033,697,12,6771,703,12,7017,707,12,6835,713,12,7081,717,12,6847,723,12,7093,727,12,6825,733,12,7071,737,12,6731,743,12,6976,747,12,6801,753,12,7047,757,12,6768,763,12,7014,767,12,6942,773,12,7188,777,12,6803,783,12,7049,787,12,6822,793,12,7068,797,12,6866,803,12,7112,807,12,6887,813,12,7133,817,12,6843,823,12,7089,827,12,6894,833,12,7140,837,12,6774,843,12,7020,847,12,6848,853,12,7094,857,12,6888,863,12,7134,867,12,6805,873,12,7051,877,12,6754,883,12,7000,887,12,6837,893,12,7083,897,12,6782,903,12,7028,907,12,6855,913,12,7101,917,12,6747,923,12,6993,927,12,6786,933,12,7032,937,12,6824,943,12,7070,947,12,6867,953,12,7113,957,12,6905,963,12,7151,967,12,6743,973,12,6989,977,12,6766,983,12,7012,987,12,6839,993,12,7085,997,12,6893,1003,12,7139,1007,12,6952,1013,12,7198,1017,12,6726,1023,12,6971,1027,12,6753,1033,12,6999,1037,12,6765,1043,12,7011,1047,12,6802,1053,12,7048,1057,12,6783,1063,12,7029,1067,12,6857,1073,12,7103,1077,12,6725,1083,12,6970,1087,12,6840,1093,12,7086,1097,12,6836,1103,12,7082,1107,12,6749,1113,12,6995,1117,12,6745,1123,12,6991,1127,12,6800,1133,12,7046,1137,12,6832,1143,12,7078,1147,12,6772,1153,12,7018,1157,12,6862,1163,12,7108,1167,12,6863,1173,12,7109,1177,12,6722,1183,12,6967,1187,12,6723,1193,12,6968,1197,12,6828,1203,12,7074,1207,12,6738,1213,12,6983,1217,12,6739,1223,12,6984,1227,12,6760,1233,12,7006,1237,12,6785,1243,12,7031,1247,12,6858,1253,12,7104,1257,12,6758,1263,12,7004,1267,12,6795,1273,12,7041,1277,12,6864,1283,12,7110,1287,12,6744,1293,12,6990,1297,12,6940,1303,12,7186,1307,12,6751,1313,12,6997,1317,12,6781,1323,12,7027,1327,12,6916,1333,12,7162,1337,12,6868,1343,12,7114,1347,12,6923,1353,12,7169,1357,12,6907,1363,12,7153,1367,12,6906,1373,12,7152,1377,12,6917,1383,12,7163,1387,12,6912,1393,12,7158,1397,12,6922,1403,12,7168,1407,12,6960,1413,12,7206,1417,12,6841,1423,12,7087,1427,12,6793,1433,12,7039,1437,12,6948,1443,12,7194,1447,12,6762,1453,12,7008,1457,12,6919,1463,12,7165,1467,12,6829,1473,12,7075,1477,12,6902,1483,12,7148,1487,12,6870,1493,12,7116,1497,12,6921,1503,12,7167,1507,12,6939,1513,12,7185,1517,12,6920,1523,12,7166,1527,12,6842,1533,12,7088,1537,12,6750,1543,12,6996,1547,12,6928,1553,12,7174,1557,12,6924,1563,12,7170,1567,12,6904,1573,12,7150,1577,12,6915,1583,12,7161,1587,12,6899,1593,12,7145,1597,12,6930,1603,12,7176,1607,12,6846,1613,12,7092,1617,12,6819,1623,12,7065,1627,12,6966,1633,12,6988,1637,12,6963,1643,12,7209,1647,12,6954,1653,12,7200,1657,12,6779,1663,12,7025,1667,12,6788,1673,12,7034,1677,12,6809,1683,12,7055,1687,12,6957,1693,12,7203,1697,12,6737,1703,12,6982,1707,12,6956,1713,12,7202,1717,12,6728,1723,12,6973,1727,12,6791,1733,12,7037,1737,12,6933,1743,12,7179,1747,12,6724,1753,12,6969,1757,12,6965,1763,12,7211,1767,12,6964,1773,12,7210,1777,12,6797,1783,12,7043,1787,12,6950,1793,12,7196,1797,12,6741,1803,12,6986,1807,12,6763,1813,12,7009,1817,12,6815,1823,12,7061,1827,12,6884,1833,12,7130,1837,12,6910,1843,12,7156,1847,12,6911,1853,12,7157,1857,12,6909,1863,12,7155,1867,12,6876,1873,12,7122,1877,12,6794,1883,12,7040,1887,12,6959,1893,12,7205,1897,12,6934,1903,12,7180,1907,12,6852,1913,12,7098,1917,12,6955,1923,12,7201,1927,12,6727,1933,12,6972,1937,12,6861,1943,12,7107,1947,12,6938,1953,12,7184,1957,12,6951,1963,12,7197,1967,12,6810,1973,12,7056,1977,12,6729,1983,12,6974,1987,12,6806,1993,12,7052,1997,12,6854,2003,12,7100,2007,12,6901,2013,12,7147,2017,12,6853,2023,12,7099,2027,12,6869,2033,12,7115,2037,12,6878,2043,12,7124,2047,12,6820,2053,12,7066,2057,12,6913,2063,12,7159,2067,12,6890,2073,12,7136,2077,12,6900,2083,12,7146,2087,12,6898,2093,12,7144,2097,12,6881,2103,12,7127,2107,12,6879,2113,12,7125,2117,12,6875,2123,12,7121,2127,12,6946,2133,12,7192,2137,12,6778,2143,12,7024,2147,12,6748,2153,12,6994,2157,12,6752,2163,12,6998,2167,12,6943,2173,12,7189,2177,12,6927,2183,12,7173,2187,12,6897,2193,12,7143,2197,12,6914,2203,12,7160,2207,12,6792,2213,12,7038,2217,12,6827,2223,12,7073,2227,12,6883,2233,12,7129,2237,12,6962,2243,12,7208,2247,12,6746,2253,12,6992,2257,12,6776,2263,12,7022,2267,12,6865,2273,12,7111,2277,12,6799,2283,12,7045,2287,12,6889,2293,12,7135,2297,12,6789,2303,12,7035,2307,12,6796,2313,12,7042,2317,12,6767,2323,12,7013,2327,12,6804,2333,12,7050,2337,12,6838,2343,12,7084,2347,12,6761,2353,12,7007,2357,12,6757,2363,12,7003,2367,12,6811,2373,12,7057,2377,12,6871,2383,12,7117,2387,12,6834,2393,12,7080,2397,12,6908,2403,12,7154,2407,12,6872,2413,12,7118,2417,12,6874,2423,12,7120,2427,12,6873,2433,12,7119,2437,12,6918,2443,12,7164,2447,12,6925,2453,12,7171,2457,12,6759,2463,12,7005,2468,12,6931,2474,12,7177,2479,12,6937,2485,12,7183]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/TokenKind.swift","symbols":[15,12,24,16,7,925,17,7,914,18,7,848,19,7,859,20,7,839,21,7,886,22,7,840,23,7,860,24,7,841,25,7,852,26,7,830,27,7,879,28,7,917,29,7,882,30,7,867,31,7,890,32,7,891,33,7,836,34,7,899,35,7,878,36,7,874,37,7,861,38,7,864,39,7,849,40,7,940,41,7,851,42,7,939,43,7,862,44,7,838,45,7,828,46,7,941,47,7,858,48,7,863,49,7,846,50,7,875,51,7,898,52,7,868,53,7,837,54,7,870,55,7,857,56,7,847,57,7,856,58,7,937,59,7,827,60,7,850,61,7,942,62,7,831,63,7,883,64,7,855,65,7,842,66,7,897,67,7,845,68,7,835,69,7,869,75,7,884,76,7,945,77,7,834,78,7,944,79,7,833,80,7,894,81,7,905,82,7,943,83,7,832,84,7,933,85,7,853,86,7,928,87,7,936,88,7,927,89,7,946,90,7,929,91,7,932,92,7,930,93,7,881,94,7,926,95,7,935,96,7,938,97,7,876,98,7,906,99,7,893,100,7,844,101,7,843,102,7,909,103,7,907,104,7,889,105,7,912,106,7,888,107,7,903,108,7,910,109,7,901,110,7,911,111,7,916,112,7,900,113,7,924,114,7,908,115,7,896,116,7,872,117,7,887,118,7,902,119,7,895,120,7,915,121,7,920,122,7,919,123,7,922,124,7,921,125,7,871,126,7,877,127,7,865,128,7,854,129,7,934,130,7,829,131,7,918,132,7,913,133,7,880,134,7,873,135,7,885,136,7,892,137,7,904,138,7,866,139,7,923,140,7,931,273,13,3437,665,21,7528]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/Trivia.swift","symbols":[24,12,22,26,9,822,28,9,821,30,9,816,32,9,824,34,9,823,36,9,818,38,9,820,40,9,814,42,9,815,44,9,817,46,9,819,48,9,813,55,14,7495,91,13,3417,98,14,534,102,9,1436,107,20,1482,112,14,7513,118,13,3434,123,13,3435,128,23,4067,132,23,4066,136,23,4061,140,23,4069,144,23,4068,148,23,4063,152,23,4065,156,23,4059,160,23,4060,164,23,4062,168,23,4064,172,23,4058,181,13,3433,185,13,3436,189,14,7512,193,9,1480,201,9,1435,207,12,7529,214,13,3416]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/syntax_nodes/SyntaxDeclNodes.swift","symbols":[17,14,47,23,9,968,36,13,1553,48,13,1552,56,14,127,71,9,1042,84,13,1782,88,13,1778,106,14,4531,122,14,4533,129,13,1786,147,14,4530,163,14,4532,170,13,1783,184,14,4529,191,13,1779,205,14,4534,212,13,1785,227,14,4537,234,13,1780,249,14,4535,256,13,1784,271,14,4536,344,13,1781,359,14,274,374,9,1180,387,13,2189,391,13,2185,409,14,5131,425,14,5133,432,13,2193,450,14,5130,466,14,5132,473,13,2192,487,14,5129,494,13,2186,508,14,5134,515,13,2190,530,14,5136,537,13,2187,552,14,5135,559,13,2191,574,14,5137,647,13,2188,662,14,73,672,9,992,685,13,1632,689,13,1633,706,14,4300,722,14,4298,729,13,1630,743,14,4299,776,13,1631,786,14,151,798,9,1064,811,13,1848,815,13,1845,829,14,4630,836,13,1850,850,14,4632,857,13,1849,871,14,4631,878,13,1846,892,14,4633,943,13,1847,955,14,226,967,9,1135,980,13,2051,984,13,2048,998,14,4923,1005,13,2053,1019,14,4925,1026,13,2052,1040,14,4924,1047,13,2049,1061,14,4926,1112,13,2050,1124,14,312,1136,9,1214,1149,13,2281,1153,13,2278,1167,14,5271,1174,13,2283,1188,14,5272,1195,13,2282,1210,14,5274,1217,13,2279,1231,14,5273,1281,13,2280,1293,14,485,1309,9,1376,1322,13,2779,1326,13,2776,1344,14,6078,1360,14,6080,1367,13,2785,1385,14,6076,1401,14,6079,1408,13,2782,1422,14,6075,1429,13,2777,1443,14,6081,1450,13,2783,1465,14,6084,1472,13,2780,1487,14,6082,1494,13,2781,1509,14,6083,1516,13,2784,1530,14,6077,1612,13,2778,1628,14,33,1644,9,954,1657,13,1509,1661,13,1505,1679,14,4112,1695,14,4114,1702,13,1514,1720,14,4110,1736,14,4113,1743,13,1508,1757,14,4109,1764,13,1506,1778,14,4115,1785,13,1512,1800,14,4118,1807,13,1510,1822,14,4116,1829,13,1511,1844,14,4117,1851,13,1513,1865,14,4111,1947,13,1507,1963,14,85,1978,9,1002,1991,13,1667,1995,13,1664,2013,14,4362,2029,14,4364,2036,13,1672,2054,14,4360,2070,14,4363,2077,13,1668,2091,14,4359,2098,13,1665,2112,14,4365,2119,13,1669,2134,14,4366,2141,13,1670,2156,14,4367,2163,13,1671,2177,14,4361,2251,13,1666,2266,14,109,2281,9,1024,2294,13,1731,2298,13,1728,2316,14,4464,2332,14,4466,2339,13,1736,2357,14,4462,2373,14,4465,2380,13,1732,2394,14,4461,2401,13,1730,2415,14,4467,2422,13,1733,2437,14,4468,2444,13,1734,2459,14,4469,2466,13,1735,2480,14,4463,2554,13,1729,2569,14,69,2585,9,988,2598,13,1615,2602,13,1611,2620,14,4266,2636,14,4269,2643,13,1619,2661,14,4265,2677,14,4267,2684,13,1613,2698,14,4271,2705,13,1612,2719,14,4270,2726,13,1617,2741,14,4273,2748,13,1620,2762,14,4268,2769,13,1616,2784,14,4272,2791,13,1618,2806,14,4274,2888,13,1614,2904,14,178,2921,9,1089,2934,13,1917,2938,13,1912,2956,14,4724,2972,14,4726,2979,13,1922,2997,14,4723,3013,14,4725,3020,13,1914,3034,14,4728,3041,13,1916,3056,14,4729,3063,13,1919,3078,14,4731,3085,13,1913,3099,14,4727,3106,13,1920,3121,14,4732,3128,13,1918,3143,14,4730,3150,13,1921,3165,14,4733,3254,13,1915,3271,14,242,3283,9,1150,3296,13,2099,3300,13,2096,3318,14,4997,3334,14,4999,3341,13,2101,3359,14,4996,3375,14,4998,3382,13,2098,3396,14,5000,3403,13,2100,3417,14,5001,3466,13,2097,3478,14,123,3494,9,1038,3507,13,1762,3511,13,1760,3529,14,4501,3545,14,4504,3552,13,1769,3570,14,4499,3586,14,4503,3593,13,1763,3607,14,4497,3614,13,1765,3629,14,4506,3636,13,1767,3650,14,4500,3657,13,1766,3671,14,4498,3678,13,1764,3693,14,4505,3700,13,1768,3715,14,4502,3797,13,1761,3813,14,27,3826,9,948,3839,13,1493,3843,13,1490,3861,14,4090,3877,14,4092,3884,13,1496,3902,14,4089,3918,14,4091,3925,13,1495,3939,14,4087,3946,13,1491,3961,14,4088,3968,13,1494,3985,14,4093,4001,14,4094,4058,13,1492,4071,14,53,4086,9,974,4099,13,1569,4103,13,1564,4121,14,4186,4137,14,4189,4144,13,1571,4159,14,4187,4166,13,1565,4180,14,4185,4187,13,1572,4202,14,4188,4209,13,1566,4224,14,4190,4231,13,1568,4246,14,4191,4253,13,1570,4268,14,4192,4340,13,1567,4355,14,95,4367,9,1012,4380,13,1690,4384,13,1688,4402,14,4393,4418,14,4396,4425,13,1693,4443,14,4392,4459,14,4395,4466,13,1691,4480,14,4397,4487,13,1692,4504,14,4391,4520,14,4394,4569,13,1689,4586,14,67,4598,9,986,4611,13,1608,4618,13,1605,4636,14,4257,4652,14,4260,4662,13,1610,4680,14,4256,4696,14,4259,4704,13,1606,4718,14,4254,4726,13,1609,4743,14,4255,4759,14,4258,4808,13,1607,4821,14,461,4837,9,1354,4850,13,2713,4857,13,2709,4875,14,5974,4891,14,5976,4901,13,2718,4919,14,5972,4935,14,5975,4945,13,2711,4959,14,5971,4969,13,2710,4983,14,5977,4993,13,2714,5008,14,5978,5019,13,2715,5034,14,5979,5045,13,2716,5060,14,5980,5070,13,2717,5084,14,5973,5166,13,2712,5183,14,81,5196,9,998,5209,13,1656,5216,13,1653,5234,14,4346,5250,14,4348,5261,13,1659,5279,14,4345,5295,14,4347,5302,13,1657,5316,14,4344,5323,13,1654,5337,14,4349,5347,13,1658,5362,14,4343,5419,13,1655,5433,14,314,5448,9,1216,5461,13,2288,5468,13,2284,5486,14,5282,5502,14,5285,5513,13,2292,5531,14,5281,5547,14,5284,5554,13,2290,5568,14,5288,5578,13,2285,5592,14,5286,5599,13,2291,5613,14,5283,5623,13,2289,5640,14,5279,5656,14,5280,5663,13,2286,5677,14,5287,5753,13,2287]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/syntax_nodes/SyntaxExprNodes.swift","symbols":[17,14,48,23,9,969,36,13,1555,48,13,1554,56,14,497,66,9,1388,79,13,2824,83,13,2825,97,14,6144,104,13,2822,118,14,6145,151,13,2823,161,14,192,170,9,1103,183,13,1956,187,13,1954,201,14,4784,225,13,1955,234,14,454,245,9,1347,258,13,2696,262,13,2694,276,14,5955,283,13,2697,298,14,5957,305,13,2693,319,14,5956,360,13,2695,371,14,479,381,9,1370,394,13,2766,398,13,2764,412,14,6061,419,13,2763,433,14,6062,466,13,2765,476,14,139,486,9,1054,499,13,1814,503,13,1812,517,14,4574,524,13,1815,539,14,4575,571,13,1813,581,14,91,590,9,1008,603,13,1682,607,13,1681,621,14,4382,645,13,1680,654,14,147,663,9,1060,676,13,1837,680,13,1835,694,14,4618,718,13,1836,727,14,350,736,9,1245,749,13,2391,753,13,2392,767,14,5472,791,13,2390,800,14,129,809,9,1044,822,13,1790,826,13,1788,840,14,4546,864,13,1789,873,14,89,882,9,1006,895,13,1678,899,13,1679,916,14,4379,932,14,4380,956,13,1677,965,14,119,974,9,1034,987,13,1756,991,13,1754,1005,14,4493,1029,13,1755,1038,14,117,1047,9,1032,1060,13,1753,1064,13,1751,1078,14,4491,1102,13,1752,1111,14,194,1120,9,1105,1133,13,1959,1137,13,1957,1151,14,4786,1175,13,1958,1184,14,266,1193,9,1172,1206,13,2167,1210,13,2165,1224,14,5105,1248,13,2166,1257,14,268,1266,9,1174,1279,13,2170,1283,13,2168,1297,14,5107,1321,13,2169,1330,14,296,1339,9,1200,1352,13,2241,1356,13,2239,1370,14,5211,1394,13,2240,1403,14,362,1413,9,1255,1426,13,2425,1430,13,2423,1444,14,5530,1451,13,2426,1466,14,5531,1498,13,2424,1508,14,298,1518,9,1202,1531,13,2244,1535,13,2243,1550,14,5213,1557,13,2245,1571,14,5214,1603,13,2242,1613,14,276,1622,9,1182,1635,13,2196,1639,13,2195,1653,14,5145,1677,13,2194,1686,14,475,1697,9,1366,1710,13,2754,1714,13,2752,1729,14,6044,1736,13,2751,1751,14,6043,1758,13,2750,1772,14,6042,1812,13,2753,1823,14,212,1832,9,1121,1845,13,2010,1849,13,2009,1863,14,4868,1887,13,2008,1896,14,503,1907,9,1393,1920,13,2840,1924,13,2841,1938,14,6170,1945,13,2838,1962,14,6169,1978,14,6172,1985,13,2837,1999,14,6171,2041,13,2839,2052,14,471,2063,9,1362,2076,13,2743,2080,13,2740,2094,14,6031,2101,13,2744,2118,14,6029,2134,14,6030,2141,13,2741,2155,14,6032,2197,13,2742,2208,14,133,2219,9,1048,2232,13,1799,2236,13,1796,2250,14,4556,2257,13,1800,2271,14,4555,2278,13,1797,2292,14,4557,2334,13,1798,2345,14,290,2354,9,1195,2367,13,2226,2371,13,2227,2385,14,5188,2409,13,2225,2418,14,278,2427,9,1184,2440,13,2199,2444,13,2197,2458,14,5147,2482,13,2198,2491,14,45,2504,9,966,2517,13,1549,2521,13,1550,2535,14,4175,2542,13,1547,2556,14,4173,2563,13,1545,2577,14,4172,2584,13,1551,2598,14,4171,2605,13,1548,2619,14,4174,2679,13,1546,2692,14,220,2704,9,1129,2717,13,2031,2721,13,2034,2736,14,4901,2743,13,2033,2757,14,4900,2764,13,2035,2778,14,4902,2785,13,2032,2800,14,4899,2849,13,2030,2861,14,451,2871,9,1342,2884,13,2686,2888,13,2687,2902,14,5945,2909,13,2688,2923,14,5946,2956,13,2685,2966,14,445,2977,9,1336,2990,13,2663,2994,13,2665,3008,14,5911,3015,13,2664,3030,14,5913,3037,13,2666,3051,14,5912,3092,13,2662,3103,14,469,3112,9,1360,3125,13,2737,3129,13,2739,3143,14,6027,3167,13,2738,3176,14,41,3188,9,962,3201,13,1537,3205,13,1538,3219,14,4157,3226,13,1539,3241,14,4158,3248,13,1535,3265,14,4156,3281,14,4160,3288,13,1534,3302,14,4159,3352,13,1536,3364,14,368,3373,9,1261,3386,13,2436,3390,13,2437,3404,14,5543,3428,13,2435,3437,14,214,3451,9,1123,3464,13,2014,3468,13,2016,3482,14,4875,3489,13,2018,3504,14,4871,3511,13,2012,3528,14,4870,3544,14,4873,3551,13,2011,3566,14,4872,3573,13,2015,3588,14,4874,3595,13,2017,3613,14,4876,3629,14,4877,3694,13,2013,3708,14,125,3722,9,1040,3735,13,1774,3739,13,1776,3753,14,4520,3760,13,1770,3774,14,4516,3781,13,1771,3798,14,4515,3814,14,4517,3821,13,1773,3835,14,4518,3842,13,1775,3857,14,4519,3864,13,1777,3882,14,4521,3898,14,4522,3965,13,1772,3979,14,338,3989,9,1236,4002,13,2358,4006,13,2355,4020,14,5404,4027,13,2357,4041,14,5405,4074,13,2356,4084,14,174,4094,9,1085,4107,13,1906,4111,13,1904,4125,14,4715,4132,13,1907,4146,14,4716,4179,13,1905,4189,14,224,4199,9,1133,4212,13,2047,4216,13,2044,4230,14,4919,4237,13,2046,4251,14,4920,4284,13,2045,4294,14,153,4304,9,1066,4317,13,1853,4321,13,1851,4335,14,4638,4342,13,1854,4356,14,4639,4389,13,1852,4399,14,272,4412,9,1178,4425,13,2181,4429,13,2179,4444,14,5121,4451,13,2183,4465,14,5119,4472,13,2182,4489,14,5117,4505,14,5118,4512,13,2177,4526,14,5120,4533,13,2180,4548,14,5122,4606,13,2178,4619,14,228,4628,9,1137,4641,13,2055,4645,13,2056,4659,14,4931,4683,13,2054,4692,14,43,4703,9,964,4716,13,1543,4720,13,1544,4734,14,4166,4741,13,1540,4756,14,4165,4763,13,1541,4777,14,4167,4818,13,1542,4829,14,180,4838,9,1091,4851,13,1924,4855,13,1925,4869,14,4743,4893,13,1923,4902,14,184,4914,9,1095,4927,13,1934,4931,13,1931,4945,14,4752,4952,13,1936,4966,14,4754,4973,13,1935,4990,14,4753,5006,14,4756,5013,13,1932,5027,14,4755,5078,13,1933,5090,14,222,5104,9,1131,5117,13,2039,5121,13,2036,5135,14,4907,5142,13,2043,5156,14,4908,5163,13,2040,5178,14,4910,5185,13,2042,5200,14,4912,5207,13,2041,5221,14,4911,5228,13,2037,5242,14,4909,5309,13,2038,5323,14,310,5333,9,1212,5346,13,2275,5350,13,2276,5365,14,5268,5372,13,2277,5386,14,5267,5418,13,2274,5428,14,352,5437,9,1247,5450,13,2395,5454,13,2393,5468,14,5474,5492,13,2394,5501,14,264,5513,9,1170,5526,13,2162,5530,13,2159,5544,14,5099,5551,13,2164,5565,14,5098,5572,13,2163,5589,14,5096,5605,14,5097,5612,13,2160,5626,14,5100,5677,13,2161]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/syntax_nodes/SyntaxNodes.swift","symbols":[21,14,107,32,9,1022,45,13,1725,50,13,1726,64,14,4455,74,13,1727,89,14,4456,96,13,1723,111,14,4457,151,13,1724,162,14,487,173,9,1378,186,13,2789,190,13,2790,204,14,6094,211,13,2787,228,14,6093,244,14,6096,251,13,2786,265,14,6095,307,13,2788,318,14,210,328,9,1119,341,13,2005,345,13,2006,359,14,4864,366,13,2007,380,14,4865,413,13,2004,423,14,240,434,9,1148,447,13,2093,451,13,2095,465,14,4991,472,13,2094,489,14,4990,505,14,4989,512,13,2091,526,14,4992,568,13,2092,579,14,230,591,9,1139,604,13,2060,608,13,2062,623,14,4936,630,13,2061,645,14,4935,652,13,2057,666,14,4933,673,13,2059,688,14,4934,736,13,2058,748,14,57,758,9,977,771,13,1583,775,13,1580,789,14,4217,796,13,1582,811,14,4218,843,13,1581,853,14,244,865,9,1152,878,13,2105,882,13,2103,896,14,5006,903,13,2107,917,14,5009,924,13,2106,938,14,5008,945,13,2104,960,14,5007,1010,13,2102,1022,14,280,1035,9,1186,1048,13,2204,1052,13,2206,1070,14,5152,1086,14,5149,1093,13,2205,1108,14,5154,1115,13,2201,1130,14,5151,1137,13,2200,1151,14,5150,1158,13,2203,1173,14,5153,1229,13,2202,1242,14,384,1253,9,1275,1266,13,2479,1270,13,2476,1284,14,5608,1291,13,2480,1309,14,5610,1325,14,5611,1332,13,2477,1346,14,5609,1387,13,2478,1398,14,61,1408,9,980,1421,13,1593,1425,13,1594,1439,14,4239,1446,13,1592,1461,14,4238,1493,13,1591,1503,14,206,1518,9,1115,1531,13,1994,1535,13,1991,1553,14,4847,1569,14,4849,1576,13,1998,1591,14,4846,1598,13,1996,1613,14,4852,1620,13,1992,1635,14,4850,1642,13,1999,1657,14,4848,1664,13,1997,1679,14,4845,1686,13,1995,1700,14,4851,1772,13,1993,1787,14,430,1798,9,1314,1811,13,2611,1815,13,2613,1829,14,5840,1836,13,2612,1850,14,5839,1857,13,2614,1871,14,5838,1913,13,2610,1924,14,121,1933,9,1036,1946,13,1758,1950,13,1759,1964,14,4495,1988,13,1757,1997,14,248,2010,9,1156,2023,13,2114,2027,13,2115,2041,14,5017,2048,13,2116,2063,14,5018,2070,13,2117,2084,14,5019,2091,13,2112,2108,14,5016,2124,14,5021,2131,13,2111,2145,14,5020,2204,13,2113,2217,14,115,2227,9,1030,2240,13,1746,2244,13,1748,2258,14,4485,2265,13,1747,2280,14,4486,2312,13,1745,2322,14,366,2332,9,1259,2345,13,2431,2349,13,2433,2363,14,5539,2370,13,2434,2384,14,5540,2417,13,2432,2427,14,188,2438,9,1099,2451,13,1944,2455,13,1945,2469,14,4767,2476,13,1943,2493,14,4765,2509,14,4766,2516,13,1941,2530,14,4768,2572,13,1942,2583,14,87,2593,9,1004,2606,13,1675,2610,13,1676,2624,14,4376,2631,13,1673,2645,14,4375,2678,13,1674,2688,14,252,2700,9,1160,2713,13,2129,2717,13,2132,2731,14,5047,2738,13,2130,2753,14,5045,2760,13,2131,2775,14,5046,2782,13,2133,2797,14,5044,2845,13,2128,2857,14,143,2868,9,1057,2881,13,1825,2885,13,1824,2899,14,4597,2906,13,1827,2921,14,4596,2928,13,1826,2942,14,4595,2983,13,1823,2994,14,388,3009,9,1279,3022,13,2492,3026,13,2489,3040,14,5625,3047,13,2488,3061,14,5624,3068,13,2494,3082,14,5622,3089,13,2493,3103,14,5628,3110,13,2491,3124,14,5627,3131,13,2490,3145,14,5626,3152,13,2486,3166,14,5623,3244,13,2487,3259,14,65,3271,9,984,3284,13,1600,3288,13,1603,3302,14,4249,3309,13,1601,3324,14,4247,3331,13,1604,3346,14,4246,3353,13,1602,3368,14,4248,3416,13,1599,3428,14,111,3438,9,1026,3451,13,1737,3455,13,1740,3469,14,4477,3476,13,1739,3491,14,4478,3523,13,1738,3533,14,364,3543,9,1257,3556,13,2427,3560,13,2430,3574,14,5536,3581,13,2428,3598,14,5534,3614,14,5535,3647,13,2429,3657,14,182,3668,9,1093,3681,13,1928,3685,13,1930,3699,14,4747,3706,13,1929,3723,14,4745,3739,14,4746,3746,13,1926,3760,14,4748,3802,13,1927,3817,14,292,3827,9,1197,3840,13,2229,3845,13,2230,3859,14,5190,3867,13,2231,3882,14,5191,3914,13,2228,3924,14,31,3934,9,952,3947,13,1503,3951,13,1501,3968,14,4104,3984,14,4106,3991,13,1504,4005,14,4105,4038,13,1502,4048,14,258,4058,9,1165,4071,13,2145,4075,13,2146,4089,14,5071,4096,13,2147,4110,14,5072,4143,13,2144,4153,14,250,4169,9,1158,4182,13,2122,4186,13,2118,4204,14,5027,4220,14,5030,4227,13,2127,4242,14,5029,4249,13,2119,4264,14,5031,4271,13,2125,4286,14,5035,4293,13,2124,4308,14,5034,4315,13,2126,4330,14,5028,4337,13,2123,4352,14,5033,4359,13,2121,4374,14,5032,4453,13,2120,4469,14,302,4481,9,1206,4494,13,2252,4498,13,2253,4512,14,5224,4519,13,2255,4534,14,5222,4541,13,2254,4556,14,5221,4563,13,2250,4578,14,5223,4626,13,2251,4638,14,304,4648,9,1208,4661,13,2258,4665,13,2259,4679,14,5230,4686,13,2256,4701,14,5229,4733,13,2257,4743,14,234,4754,9,1143,4767,13,2075,4771,13,2077,4785,14,4957,4792,13,2076,4806,14,4959,4813,13,2073,4827,14,4958,4869,13,2074,4880,14,99,4891,9,1016,4904,13,1701,4908,13,1703,4922,14,4410,4929,13,1702,4946,14,4408,4962,14,4409,4969,13,1699,4983,14,4411,5025,13,1700,5036,14,149,5049,9,1062,5062,13,1841,5066,13,1843,5080,14,4620,5087,13,1842,5102,14,4624,5109,13,1838,5124,14,4622,5131,13,1844,5146,14,4621,5153,13,1840,5168,14,4623,5224,13,1839,5241,14,168,5253,9,1079,5266,13,1892,5271,13,1889,5285,14,4698,5293,13,1893,5308,14,4700,5318,13,1894,5333,14,4697,5344,13,1891,5359,14,4699,5407,13,1890,5422,14,410,5432,9,1296,5445,13,2560,5449,13,2561,5463,14,5761,5473,13,2558,5490,14,5759,5506,14,5760,5539,13,2559,5553,14,392,5564,9,1282,5577,13,2505,5584,13,2502,5598,14,5653,5605,13,2506,5619,14,5656,5630,13,2503,5647,14,5654,5663,14,5655,5705,13,2504,5716,14,412,5726,9,1298,5739,13,2564,5743,13,2565,5757,14,5764,5764,13,2563,5779,14,5765,5811,13,2562,5825,14,402,5836,9,1291,5849,13,2533,5853,13,2534,5867,14,5702,5874,13,2536,5888,14,5704,5902,13,2535,5916,14,5703,5958,13,2532,5973,14,422,5984,9,1307,5997,13,2590,6001,13,2591,6015,14,5805,6022,13,2592,6036,14,5806,6049,13,2593,6063,14,5807,6105,13,2589,6119,14,164,6132,9,1075,6145,13,1884,6150,13,1880,6164,14,4688,6172,13,1883,6186,14,4684,6193,13,1885,6208,14,4686,6215,13,1881,6233,14,4685,6249,14,4689,6256,13,1879,6271,14,4687,6328,13,1882,6344,14,477,6358,9,1368,6371,13,2759,6376,13,2756,6390,14,6053,6398,13,2758,6412,14,6048,6422,13,2761,6437,14,6050,6449,13,2760,6464,14,6049,6474,13,2755,6489,14,6052,6496,13,2762,6514,14,6054,6530,14,6051,6595,13,2757,6612,14,236,6624,9,1145,6637,13,2079,6642,13,2082,6656,14,4967,6664,13,2081,6678,14,4966,6685,13,2080,6702,14,4963,6718,14,4964,6725,13,2083,6739,14,4965,6790,13,2078,6806,14,382,6818,9,1273,6831,13,2472,6836,13,2474,6850,14,5602,6858,13,2473,6872,14,5601,6880,13,2475,6894,14,5603,6904,13,2471,6919,14,5600,6969,13,2470,6986,14,318,6998,9,1220,7011,13,2300,7016,13,2302,7030,14,5305,7038,13,2301,7052,14,5304,7060,13,2303,7074,14,5302,7084,13,2299,7099,14,5303,7149,13,2298,7166,14,420,7177,9,1305,7190,13,2585,7195,13,2588,7209,14,5800,7217,13,2587,7231,14,5801,7238,13,2586,7252,14,5799,7294,13,2584,7305,14,459,7315,9,1352,7328,13,2708,7335,13,2706,7349,14,5967,7360,13,2705,7375,14,5968,7407,13,2707,7421,14,418,7433,9,1303,7446,13,2581,7454,13,2582,7468,14,5793,7478,13,2583,7492,14,5794,7502,13,2580,7516,14,5792,7527,13,2578,7542,14,5791,7592,13,2579,7609,14,262,7619,9,1168,7632,13,2156,7636,13,2157,7651,14,5092,7658,13,2158,7673,14,5093,7704,13,2155,7719,14,434,7732,9,1318,7745,13,2623,7749,13,2625,7764,14,5848,7774,13,2622,7789,14,5851,7796,13,2619,7811,14,5849,7822,13,2624,7837,14,5852,7844,13,2620,7859,14,5850,7914,13,2621,7928,14,426,7939,9,1310,7952,13,2603,7957,13,2605,7971,14,5828,7981,13,2604,7995,14,5830,8002,13,2601,8016,14,5829,8058,13,2602,8070,14,386,8081,9,1277,8094,13,2484,8098,13,2485,8112,14,5617,8120,13,2481,8137,14,5615,8153,14,5616,8160,13,2482,8174,14,5618,8216,13,2483,8231,14,376,8241,9,1268,8254,13,2456,8258,13,2457,8272,14,5572,8279,13,2455,8294,14,5573,8326,13,2454,8341,14,438,8356,9,1321,8369,13,2636,8374,13,2641,8388,14,5876,8399,13,2638,8413,14,5880,8421,13,2637,8435,14,5879,8446,13,2640,8461,14,5875,8469,13,2634,8484,14,5878,8491,13,2639,8506,14,5881,8513,13,2633,8528,14,5877,8602,13,2635,8621,14,270,8633,9,1176,8646,13,2172,8653,13,2175,8668,14,5110,8675,13,2173,8690,14,5112,8700,13,2174,8714,14,5109,8725,13,2176,8740,14,5111,8788,13,2171,8801,14,216,8811,9,1125,8824,13,2020,8831,13,2021,8845,14,4884,8856,13,2022,8871,14,4885,8903,13,2019,8913,14,51,8923,9,972,8936,13,1563,8940,13,1562,8954,14,4181,8961,13,1560,8975,14,4182,9008,13,1561,9018,14,509,9030,9,1399,9043,13,2858,9047,13,2859,9061,14,6196,9068,13,2854,9085,14,6195,9101,14,6194,9108,13,2857,9123,14,6198,9130,13,2855,9144,14,6197,9194,13,2856,9206,14,208,9216,9,1117,9229,13,2002,9233,13,2003,9247,14,4860,9254,13,2001,9269,14,4861,9301,13,2000,9311,14,346,9323,9,1242,9336,13,2379,9340,13,2381,9354,14,5450,9361,13,2382,9375,14,5448,9382,13,2380,9399,14,5446,9415,14,5447,9422,13,2377,9436,14,5449,9487,13,2378,9499,14,398,9511,9,1287,9524,13,2523,9528,13,2520,9542,14,5687,9549,13,2525,9563,14,5686,9570,13,2524,9585,14,5689,9592,13,2521,9606,14,5688,9656,13,2522,9668,14,400,9680,9,1289,9693,13,2528,9697,13,2530,9711,14,5697,9718,13,2531,9732,14,5694,9739,13,2529,9754,14,5696,9761,13,2526,9775,14,5695,9825,13,2527,9837,14,396,9849,9,1285,9862,13,2516,9866,13,2518,9880,14,5681,9887,13,2519,9901,14,5677,9908,13,2517,9925,14,5680,9941,14,5679,9948,13,2514,9962,14,5678,10013,13,2515,10025,14,282,10034,9,1188,10047,13,2209,10051,13,2207,10065,14,5160,10089,13,2208,10098,14,491,10108,9,1382,10121,13,2800,10125,13,2798,10139,14,6107,10146,13,2801,10160,14,6108,10193,13,2799,10203,14,35,10214,9,956,10227,13,1518,10231,13,1516,10246,14,4129,10253,13,1519,10267,14,4130,10274,13,1515,10291,14,4127,10307,14,4128,10348,13,1517,10359,14,300,10369,9,1204,10382,13,2248,10386,13,2247,10400,14,5217,10407,13,2249,10421,14,5218,10454,13,2246,10464,14,457,10475,9,1350,10488,13,2703,10492,13,2704,10506,14,5961,10513,13,2700,10528,14,5962,10535,13,2702,10550,14,5963,10590,13,2701,10601,14,483,10612,9,1374,10625,13,2774,10629,13,2775,10644,14,6069,10651,13,2771,10666,14,6070,10673,13,2773,10688,14,6071,10727,13,2772,10738,14,198,10749,9,1109,10762,13,1970,10766,13,1968,10780,14,4802,10787,13,1972,10804,14,4800,10820,14,4801,10827,13,1971,10841,14,4803,10883,13,1969,10894,14,39,10905,9,960,10918,13,1532,10922,13,1530,10936,14,4151,10943,13,1529,10961,14,4149,10977,14,4150,10984,13,1533,10998,14,4152,11039,13,1531,11050,14,286,11060,9,1192,11073,13,2216,11077,13,2215,11091,14,5166,11098,13,2217,11115,14,5167,11131,14,5168,11164,13,2214,11174,14,284,11184,9,1190,11197,13,2212,11201,13,2213,11215,14,5163,11222,13,2211,11237,14,5162,11269,13,2210,11279,14,316,11290,9,1218,11303,13,2293,11307,13,2294,11321,14,5296,11328,13,2297,11342,14,5298,11349,13,2295,11363,14,5297,11405,13,2296,11416,14,218,11429,9,1127,11442,13,2027,11446,13,2023,11464,14,4888,11480,14,4889,11487,13,2028,11501,14,4892,11508,13,2029,11523,14,4893,11530,13,2025,11545,14,4890,11552,13,2026,11567,14,4891,11623,13,2024,11636,14,358,11650,9,1252,11663,13,2408,11667,13,2410,11685,14,5501,11701,14,5502,11708,13,2414,11722,14,5505,11729,13,2415,11744,14,5506,11751,13,2409,11766,14,5500,11773,13,2411,11788,14,5503,11795,13,2413,11810,14,5504,11874,13,2412,11888,14,378,11899,9,1270,11912,13,2460,11916,13,2461,11930,14,5578,11937,13,2458,11954,14,5576,11970,14,5577,11977,13,2462,11991,14,5579,12033,13,2459,12044,14,374,12055,9,1266,12068,13,2450,12072,13,2451,12086,14,5566,12093,13,2453,12107,14,5568,12114,13,2452,12128,14,5567,12170,13,2449,12181,14,372,12191,9,1264,12204,13,2445,12208,13,2447,12222,14,5562,12229,13,2448,12244,14,5563,12276,13,2446,12286,14,232,12302,9,1141,12315,13,2063,12319,13,2071,12334,14,4948,12341,13,2068,12356,14,4946,12363,13,2064,12378,14,4943,12385,13,2070,12400,14,4947,12407,13,2069,12421,14,4941,12428,13,2072,12443,14,4942,12450,13,2065,12465,14,4944,12472,13,2067,12487,14,4945,12567,13,2066,12583,14,176,12593,9,1087,12606,13,1911,12610,13,1908,12624,14,4719,12631,13,1910,12646,14,4720,12678,13,1909,12688,14,356,12699,9,1250,12712,13,2404,12716,13,2405,12730,14,5495,12737,13,2407,12754,14,5493,12770,14,5494,12777,13,2406,12791,14,5496,12833,13,2403,12844,14,157,12854,9,1069,12867,13,1862,12871,13,1865,12885,14,4660,12892,13,1864,12906,14,4659,12939,13,1863,12949,14,320,12961,9,1222,12974,13,2307,12978,13,2309,12993,14,5311,13000,13,2304,13015,14,5312,13022,13,2308,13036,14,5310,13043,13,2306,13058,14,5313,13106,13,2305,13122,14,324,13132,9,1226,13145,13,2316,13150,13,2317,13164,14,5323,13175,13,2315,13190,14,5322,13222,13,2314,13236,14,414,13247,9,1300,13260,13,2567,13265,13,2569,13279,14,5769,13287,13,2568,13301,14,5768,13309,13,2570,13323,14,5770,13365,13,2566,13380,14,428,13390,9,1312,13403,13,2607,13412,13,2609,13426,14,5835,13433,13,2608,13448,14,5834,13480,13,2606,13494,14,97,13505,9,1014,13518,13,1698,13529,13,1695,13543,14,4403,13554,13,1696,13569,14,4404,13579,13,1694,13594,14,4402,13634,13,1697]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/syntax_nodes/SyntaxPatternNodes.swift","symbols":[17,14,159,23,9,1071,36,13,1867,48,13,1866,56,14,170,68,9,1081,81,13,1896,85,13,1898,100,14,4708,107,13,1899,121,14,4706,128,13,1900,142,14,4705,149,13,1897,164,14,4707,213,13,1895,225,14,113,235,9,1028,248,13,1741,252,13,1744,266,14,4481,273,13,1743,287,14,4482,320,13,1742,330,14,186,340,9,1097,353,13,1940,357,13,1937,371,14,4761,378,13,1939,392,14,4762,425,13,1938,435,14,254,444,9,1162,457,13,2136,461,13,2134,475,14,5052,499,13,2135,508,14,101,519,9,1018,532,13,1704,536,13,1707,550,14,4417,557,13,1708,571,14,4415,578,13,1706,592,14,4416,634,13,1705,645,14,93,656,9,1010,669,13,1685,673,13,1687,687,14,4386,694,13,1686,711,14,4384,727,14,4385,734,13,1683,748,14,4387,790,13,1684,801,14,200,811,9,1111,824,13,1974,828,13,1976,842,14,4807,849,13,1975,864,14,4808,896,13,1973,906,14,246,915,9,1154,928,13,2110,932,13,2108,946,14,5014,970,13,2109,979,14,322,989,9,1224,1002,13,2312,1006,13,2313,1020,14,5319,1027,13,2310,1041,14,5318,1074,13,2311]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/syntax_nodes/SyntaxStmtNodes.swift","symbols":[17,14,49,23,9,970,36,13,1557,48,13,1556,56,14,63,66,9,982,79,13,1596,83,13,1597,97,14,4242,104,13,1598,119,14,4243,151,13,1595,161,14,507,174,9,1397,187,13,2851,191,13,2853,206,14,6185,213,13,2848,228,14,6187,235,13,2850,249,14,6183,256,13,2847,273,14,6184,289,14,6186,296,13,2852,310,14,6188,368,13,2849,381,14,489,391,9,1380,404,13,2796,408,13,2795,422,14,6103,429,13,2797,443,14,6104,476,13,2794,486,14,137,495,9,1052,508,13,1810,512,13,1808,526,14,4571,550,13,1809,559,14,196,573,9,1107,586,13,1964,590,13,1967,605,14,4791,612,13,1960,627,14,4792,634,13,1963,648,14,4788,655,13,1965,669,14,4793,676,13,1962,690,14,4789,697,13,1966,711,14,4790,778,13,1961,792,14,495,804,9,1386,817,13,2820,821,13,2819,835,14,6135,842,13,2816,859,14,6136,875,14,6137,882,13,2817,896,14,6138,903,13,2821,917,14,6139,968,13,2818,980,14,493,1000,9,1384,1013,13,2810,1017,13,2815,1032,14,6114,1039,13,2803,1054,14,6115,1061,13,2802,1075,14,6111,1082,13,2804,1097,14,6116,1104,13,2807,1119,14,6119,1126,13,2805,1141,14,6117,1148,13,2813,1162,14,6113,1169,13,2811,1184,14,6121,1191,13,2814,1205,14,6112,1212,13,2809,1226,14,6120,1233,13,2806,1248,14,6118,1255,13,2812,1269,14,6122,1385,13,2808,1405,14,37,1420,9,958,1433,13,1525,1437,13,1527,1452,14,4135,1459,13,1521,1474,14,4138,1481,13,1524,1495,14,4134,1502,13,1520,1516,14,4137,1523,13,1528,1537,14,4136,1544,13,1526,1561,14,4140,1577,14,4141,1584,13,1522,1598,14,4139,1674,13,1523,1689,14,447,1702,9,1338,1715,13,2672,1719,13,2675,1734,14,5920,1741,13,2669,1756,14,5922,1763,13,2674,1777,14,5919,1784,13,2673,1798,14,5924,1805,13,2670,1823,14,5921,1839,14,5923,1896,13,2671,1909,14,29,1919,9,950,1932,13,1500,1936,13,1499,1950,14,4100,1957,13,1497,1972,14,4101,2004,13,1498,2014,14,511,2024,9,1401,2037,13,2862,2041,13,2861,2055,14,6203,2062,13,2863,2076,14,6204,2109,13,2860,2119,14,172,2128,9,1083,2141,13,1902,2145,13,1903,2159,14,4713,2183,13,1901,2192,14,481,2202,9,1372,2215,13,2769,2219,13,2767,2233,14,6065,2240,13,2770,2255,14,6066,2287,13,2768,2297,14,166,2306,9,1077,2319,13,1888,2323,13,1886,2337,14,4695,2361,13,1887,2370,14,499,2380,9,1390,2393,13,2829,2397,13,2828,2411,14,6148,2418,13,2826,2432,14,6149,2465,13,2827,2475,14,449,2490,9,1340,2503,13,2680,2507,13,2684,2522,14,5933,2529,13,2677,2544,14,5935,2551,13,2683,2565,14,5930,2572,13,2676,2589,14,5931,2605,14,5934,2612,13,2681,2626,14,5937,2633,13,2678,2648,14,5936,2655,13,2682,2670,14,5932,2744,13,2679,2759,14,190,2773,9,1101,2786,13,1949,2790,13,1946,2804,14,4772,2811,13,1953,2825,14,4775,2833,13,1952,2847,14,4774,2855,13,1950,2870,14,4777,2878,13,1951,2893,14,4773,2900,13,1947,2914,14,4776,2981,13,1948]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntax/gyb_generated/syntax_nodes/SyntaxTypeNodes.swift","symbols":[17,14,50,23,9,971,36,13,1558,48,13,1559,56,14,340,66,9,1238,79,13,2359,83,13,2362,97,14,5409,104,13,2361,119,14,5408,151,13,2360,161,14,336,173,9,1234,186,13,2349,190,13,2350,204,14,5396,211,13,2354,225,14,5397,232,13,2353,246,14,5399,253,13,2352,268,14,5398,318,13,2351,330,14,328,339,9,1229,352,13,2325,356,13,2326,370,14,5343,394,13,2327,403,14,473,414,9,1364,427,13,2745,431,13,2748,445,14,6037,452,13,2746,466,14,6036,473,13,2749,487,14,6038,529,13,2747,540,14,135,553,9,1050,566,13,1801,570,13,1805,584,14,4563,591,13,1802,605,14,4561,612,13,1807,626,14,4565,633,13,1803,647,14,4562,654,13,1806,668,14,4564,728,13,1804,741,14,75,752,9,994,765,13,1634,769,13,1635,783,14,4304,790,13,1638,804,14,4305,811,13,1637,825,14,4303,867,13,1636,878,14,83,888,9,1000,901,13,1660,905,13,1661,919,14,4355,926,13,1663,940,14,4356,973,13,1662,983,14,467,993,9,1358,1006,13,2733,1010,13,2736,1024,14,6023,1031,13,2734,1045,14,6024,1078,13,2735,1088,14,432,1098,9,1316,1111,13,2615,1115,13,2616,1129,14,5844,1136,13,2618,1150,14,5845,1183,13,2617,1193,14,162,1202,9,1073,1215,13,1876,1219,13,1878,1236,14,4681,1252,14,4682,1276,13,1877,1285,14,505,1296,9,1395,1309,13,2842,1313,13,2846,1327,14,6178,1334,13,2845,1351,14,6176,1367,14,6177,1374,13,2843,1388,14,6179,1430,13,2844,1441,14,71,1456,9,990,1469,13,1621,1473,13,1629,1487,14,4286,1494,13,1628,1511,14,4284,1527,14,4285,1534,13,1623,1548,14,4287,1555,13,1624,1570,14,4288,1577,13,1626,1592,14,4289,1599,13,1627,1613,14,4290,1620,13,1622,1634,14,4283,1710,13,1625,1725,14,131,1736,9,1046,1749,13,1791,1753,13,1795,1768,14,4550,1775,13,1793,1793,14,4549,1809,14,4551,1816,13,1792,1830,14,4548,1870,13,1794]}]}