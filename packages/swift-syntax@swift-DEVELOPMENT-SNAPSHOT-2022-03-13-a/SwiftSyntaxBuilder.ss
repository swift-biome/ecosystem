{"culture":"SwiftSyntaxBuilder","dependencies":[{"package":"swift-syntax","modules":["SwiftSyntax"]}],"extensions":[],"partitions":[{"namespace":"Swift","communities":[{"community":"method","startIndex":0,"endIndex":11}]},{"namespace":"SwiftSyntax","communities":[{"community":"type.property","startIndex":11,"endIndex":117},{"community":"type.method","startIndex":117,"endIndex":131},{"community":"method","startIndex":131,"endIndex":138}]},{"namespace":"SwiftSyntaxBuilder","communities":[{"community":"protocol","startIndex":138,"endIndex":394},{"community":"struct","startIndex":394,"endIndex":675},{"community":"init","startIndex":675,"endIndex":1083},{"community":"property","startIndex":1083,"endIndex":1084},{"community":"type.method","startIndex":1084,"endIndex":1420},{"community":"method","startIndex":1420,"endIndex":2805},{"community":"typealias","startIndex":2805,"endIndex":2931}]}],"identifiers":["sSS18SwiftSyntaxBuilderE06createB9BuildableAA0bE0_pyF","sSS18SwiftSyntaxBuilderE18createReturnClauseAA0eF0VyF","sSS18SwiftSyntaxBuilderE19createExprBuildableAA0eF0_pyF","sSS18SwiftSyntaxBuilderE19createTypeBuildableAA0eF0_pyF","sSS18SwiftSyntaxBuilderE20createIdentifierExprAA0eF0VyF","sSS18SwiftSyntaxBuilderE22createPatternBuildableAA0eF0_pyF","sSS18SwiftSyntaxBuilderE23createIdentifierPatternAA0eF0VyF","sSS18SwiftSyntaxBuilderE23createStringLiteralExprAA0efG0VyF","sSS18SwiftSyntaxBuilderE24createBinaryOperatorExprAA0efG0VyF","sSS18SwiftSyntaxBuilderE25createAccessPathComponentAA0efG0VyF","sSS18SwiftSyntaxBuilderE26createSimpleTypeIdentifierAA0efG0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE10poundEndifACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10poundErrorACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10rightAngleACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10rightBraceACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10rightParenACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11capitalSelfACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11fallthroughACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11fileprivateACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11poundAssertACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11poundColumnACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11poundElseifACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11poundFileIDACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11singleQuoteACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE11stringQuoteACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE12poundKeyPathACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE12poundWarningACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE12prefixPeriodACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE13poundFilePathACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE13poundFunctionACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE13poundSelectorACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE14associatedtypeACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE14poundAvailableACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE14poundDsohandleACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE15exclamationMarkACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE15precedencegroupACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE15prefixAmpersandACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE16poundFileLiteralACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE16poundUnavailableACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17infixQuestionMarkACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17leftSquareBracketACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17poundColorLiteralACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17poundImageLiteralACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE18rightSquareBracketACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE19postfixQuestionMarkACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE19poundSourceLocationACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE20multilineStringQuoteACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE25stringInterpolationAnchorACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2asACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2doACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2ifACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2inACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE2isACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3anyACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3eofACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3forACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3letACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3nilACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3tryACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE3varACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4caseACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4elseACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4enumACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4funcACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4initACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4selfACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE4trueACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5arrowACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5breakACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5catchACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5classACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5colonACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5commaACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5deferACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5equalACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5falseACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5guardACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5inoutACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5poundACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5superACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5throwACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5whereACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5whileACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE5yieldACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6atSignACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6deinitACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6importACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6periodACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6publicACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6repeatACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6returnACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6staticACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6structACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6switchACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE6throwsACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE7defaultACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE7poundIfACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE7privateACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8backtickACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8continueACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8ellipsisACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8internalACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8operatorACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8protocolACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8rethrowsACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE8wildcardACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9backslashACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9extensionACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9leftAngleACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9leftBraceACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9leftParenACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9poundElseACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9poundFileACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9poundLineACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9semicolonACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9subscriptACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE9typealiasACvpZ","s11SwiftSyntax05TokenB0V0aB7BuilderE10identifieryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE12regexLiteralyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE13stringLiteralyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE13stringSegmentyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE14integerLiteralyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE14prefixOperatoryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE15floatingLiteralyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE15postfixOperatoryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE16dollarIdentifieryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE17contextualKeywordyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE18rawStringDelimiteryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE20spacedBinaryOperatoryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE22unspacedBinaryOperatoryACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE7unknownyACSSFZ","s11SwiftSyntax05TokenB0V0aB7BuilderE014createNonEmptyC4ListAD0fgcH0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE06createB9BuildableAD0bF0_pyF","s11SwiftSyntax05TokenB0V0aB7BuilderE06createC4ListAD0cF0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE18createDeclModifierAD0fG0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE19createExprBuildableAD0fG0_pyF","s11SwiftSyntax05TokenB0V0aB7BuilderE20createIdentifierExprAD0fG0VyF","s11SwiftSyntax05TokenB0V0aB7BuilderE24createBinaryOperatorExprAD0fgH0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildableP","s18SwiftSyntaxBuilder013ExpressibleAsE11TypePatternP","s18SwiftSyntaxBuilder013ExpressibleAsE4ExprP","s18SwiftSyntaxBuilder0B13ListBuildableP","s18SwiftSyntaxBuilder0B9BuildableP","s18SwiftSyntaxBuilder13DeclBuildableP","s18SwiftSyntaxBuilder13ExprBuildableP","s18SwiftSyntaxBuilder13StmtBuildableP","s18SwiftSyntaxBuilder13TypeBuildableP","s18SwiftSyntaxBuilder16PatternBuildableP","s18SwiftSyntaxBuilder17DeclListBuildableP","s18SwiftSyntaxBuilder17ExprListBuildableP","s18SwiftSyntaxBuilder17StmtListBuildableP","s18SwiftSyntaxBuilder17TypeListBuildableP","s18SwiftSyntaxBuilder19ExpressibleAsDoStmtP","s18SwiftSyntaxBuilder19ExpressibleAsIfStmtP","s18SwiftSyntaxBuilder19ExpressibleAsIsExprP","s18SwiftSyntaxBuilder20ExpressibleAsTryExprP","s18SwiftSyntaxBuilder20PatternListBuildableP","s18SwiftSyntaxBuilder21ExpressibleAsCaseItemP","s18SwiftSyntaxBuilder21ExpressibleAsDeclNameP","s18SwiftSyntaxBuilder21ExpressibleAsEnumDeclP","s18SwiftSyntaxBuilder21ExpressibleAsExprListP","s18SwiftSyntaxBuilder21ExpressibleAsObjcNameP","s18SwiftSyntaxBuilder21ExpressibleAsSomeTypeP","s18SwiftSyntaxBuilder21ExpressibleAsTypeExprP","s18SwiftSyntaxBuilder22ExpressibleAsArrayExprP","s18SwiftSyntaxBuilder22ExpressibleAsArrayTypeP","s18SwiftSyntaxBuilder22ExpressibleAsArrowExprP","s18SwiftSyntaxBuilder22ExpressibleAsAttributeP","s18SwiftSyntaxBuilder22ExpressibleAsAwaitExprP","s18SwiftSyntaxBuilder22ExpressibleAsBreakStmtP","s18SwiftSyntaxBuilder22ExpressibleAsCatchItemP","s18SwiftSyntaxBuilder22ExpressibleAsClassDeclP","s18SwiftSyntaxBuilder22ExpressibleAsCodeBlockP","s18SwiftSyntaxBuilder22ExpressibleAsDeferStmtP","s18SwiftSyntaxBuilder22ExpressibleAsElseBlockP","s18SwiftSyntaxBuilder22ExpressibleAsForInStmtP","s18SwiftSyntaxBuilder22ExpressibleAsGuardStmtP","s18SwiftSyntaxBuilder22ExpressibleAsInOutExprP","s18SwiftSyntaxBuilder22ExpressibleAsThrowStmtP","s18SwiftSyntaxBuilder22ExpressibleAsTokenListP","s18SwiftSyntaxBuilder22ExpressibleAsTupleExprP","s18SwiftSyntaxBuilder22ExpressibleAsTupleTypeP","s18SwiftSyntaxBuilder22ExpressibleAsWhileStmtP","s18SwiftSyntaxBuilder22ExpressibleAsYieldListP","s18SwiftSyntaxBuilder22ExpressibleAsYieldStmtP","s18SwiftSyntaxBuilder23ExpressibleAsAccessPathP","s18SwiftSyntaxBuilder23ExpressibleAsImportDeclP","s18SwiftSyntaxBuilder23ExpressibleAsReturnStmtP","s18SwiftSyntaxBuilder23ExpressibleAsSourceFileP","s18SwiftSyntaxBuilder23ExpressibleAsStructDeclP","s18SwiftSyntaxBuilder23ExpressibleAsSwitchCaseP","s18SwiftSyntaxBuilder23ExpressibleAsSwitchStmtP","s18SwiftSyntaxBuilder24ExpressibleAsCatchClauseP","s18SwiftSyntaxBuilder24ExpressibleAsClosureExprP","s18SwiftSyntaxBuilder24ExpressibleAsKeyPathExprP","s18SwiftSyntaxBuilder24ExpressibleAsTernaryExprP","s18SwiftSyntaxBuilder24ExpressibleAsWhereClauseP","s18SwiftSyntaxBuilder25ExpressibleAsAccessorDeclP","s18SwiftSyntaxBuilder25ExpressibleAsAccessorListP","s18SwiftSyntaxBuilder25ExpressibleAsArrayElementP","s18SwiftSyntaxBuilder25ExpressibleAsCaseItemListP","s18SwiftSyntaxBuilder25ExpressibleAsClosureParamP","s18SwiftSyntaxBuilder25ExpressibleAsContinueStmtP","s18SwiftSyntaxBuilder25ExpressibleAsDeclModifierP","s18SwiftSyntaxBuilder25ExpressibleAsEnumCaseDeclP","s18SwiftSyntaxBuilder25ExpressibleAsFunctionDeclP","s18SwiftSyntaxBuilder25ExpressibleAsFunctionTypeP","s18SwiftSyntaxBuilder25ExpressibleAsIfConfigDeclP","s18SwiftSyntaxBuilder25ExpressibleAsMetatypeTypeP","s18SwiftSyntaxBuilder25ExpressibleAsModifierListP","s18SwiftSyntaxBuilder25ExpressibleAsObjCSelectorP","s18SwiftSyntaxBuilder25ExpressibleAsOperatorDeclP","s18SwiftSyntaxBuilder25ExpressibleAsOptionalTypeP","s18SwiftSyntaxBuilder25ExpressibleAsProtocolDeclP","s18SwiftSyntaxBuilder25ExpressibleAsReturnClauseP","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprP","s18SwiftSyntaxBuilder25ExpressibleAsSuperRefExprP","s18SwiftSyntaxBuilder25ExpressibleAsTuplePatternP","s18SwiftSyntaxBuilder25ExpressibleAsVariableDeclP","s18SwiftSyntaxBuilder25ExpressibleAsVersionTupleP","s18SwiftSyntaxBuilder26ExpressibleAsAccessorBlockP","s18SwiftSyntaxBuilder26ExpressibleAsAttributeListP","s18SwiftSyntaxBuilder26ExpressibleAsCatchItemListP","s18SwiftSyntaxBuilder26ExpressibleAsCodeBlockItemP","s18SwiftSyntaxBuilder26ExpressibleAsDeclBuildableP","s18SwiftSyntaxBuilder26ExpressibleAsExprBuildableP","s18SwiftSyntaxBuilder26ExpressibleAsExtensionDeclP","s18SwiftSyntaxBuilder26ExpressibleAsInheritedTypeP","s18SwiftSyntaxBuilder26ExpressibleAsIsTypePatternP","s18SwiftSyntaxBuilder26ExpressibleAsObjcNamePieceP","s18SwiftSyntaxBuilder26ExpressibleAsPoundFileExprP","s18SwiftSyntaxBuilder26ExpressibleAsPoundLineExprP","s18SwiftSyntaxBuilder26ExpressibleAsStmtBuildableP","s18SwiftSyntaxBuilder26ExpressibleAsStringSegmentP","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptDeclP","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptExprP","s18SwiftSyntaxBuilder26ExpressibleAsTypeBuildableP","s18SwiftSyntaxBuilder26ExpressibleAsTypealiasDeclP","s18SwiftSyntaxBuilder27ExpressibleAsAssignmentExprP","s18SwiftSyntaxBuilder27ExpressibleAsAttributedTypeP","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryExprP","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryTypeP","s18SwiftSyntaxBuilder27ExpressibleAsExpressionStmtP","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierExprP","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierListP","s18SwiftSyntaxBuilder27ExpressibleAsIfConfigClauseP","s18SwiftSyntaxBuilder27ExpressibleAsMemberDeclListP","s18SwiftSyntaxBuilder27ExpressibleAsNilLiteralExprP","s18SwiftSyntaxBuilder27ExpressibleAsPatternBindingP","s18SwiftSyntaxBuilder27ExpressibleAsPoundErrorDeclP","s18SwiftSyntaxBuilder27ExpressibleAsSpecializeExprP","s18SwiftSyntaxBuilder27ExpressibleAsSwitchCaseListP","s18SwiftSyntaxBuilder27ExpressibleAsTypeAnnotationP","s18SwiftSyntaxBuilder28ExpressibleAsCatchClauseListP","s18SwiftSyntaxBuilder28ExpressibleAsCompositionTypeP","s18SwiftSyntaxBuilder28ExpressibleAsCustomAttributeP","s18SwiftSyntaxBuilder28ExpressibleAsDeclarationStmtP","s18SwiftSyntaxBuilder28ExpressibleAsEnumCaseElementP","s18SwiftSyntaxBuilder28ExpressibleAsEnumCasePatternP","s18SwiftSyntaxBuilder28ExpressibleAsFallthroughStmtP","s18SwiftSyntaxBuilder28ExpressibleAsForcedValueExprP","s18SwiftSyntaxBuilder28ExpressibleAsGenericArgumentP","s18SwiftSyntaxBuilder28ExpressibleAsInitializerDeclP","s18SwiftSyntaxBuilder28ExpressibleAsKeyPathBaseExprP","s18SwiftSyntaxBuilder28ExpressibleAsMemberDeclBlockP","s18SwiftSyntaxBuilder28ExpressibleAsObjcKeyPathExprP","s18SwiftSyntaxBuilder28ExpressibleAsOptionalPatternP","s18SwiftSyntaxBuilder28ExpressibleAsParameterClauseP","s18SwiftSyntaxBuilder28ExpressibleAsPoundAssertStmtP","s18SwiftSyntaxBuilder28ExpressibleAsPoundColumnExprP","s18SwiftSyntaxBuilder28ExpressibleAsPoundFileIDExprP","s18SwiftSyntaxBuilder28ExpressibleAsRepeatWhileStmtP","s18SwiftSyntaxBuilder28ExpressibleAsSwitchCaseLabelP","s18SwiftSyntaxBuilder28ExpressibleAsWildcardPatternP","s18SwiftSyntaxBuilder29ExpressibleAsArrayElementListP","s18SwiftSyntaxBuilder29ExpressibleAsClosureParamListP","s18SwiftSyntaxBuilder29ExpressibleAsClosureSignatureP","s18SwiftSyntaxBuilder29ExpressibleAsConditionElementP","s18SwiftSyntaxBuilder29ExpressibleAsDeclNameArgumentP","s18SwiftSyntaxBuilder29ExpressibleAsFloatLiteralExprP","s18SwiftSyntaxBuilder29ExpressibleAsFunctionCallExprP","s18SwiftSyntaxBuilder29ExpressibleAsFunctionDeclNameP","s18SwiftSyntaxBuilder29ExpressibleAsGenericParameterP","s18SwiftSyntaxBuilder29ExpressibleAsMemberAccessExprP","s18SwiftSyntaxBuilder29ExpressibleAsObjcSelectorExprP","s18SwiftSyntaxBuilder29ExpressibleAsPatternBuildableP","s18SwiftSyntaxBuilder29ExpressibleAsPostfixUnaryExprP","s18SwiftSyntaxBuilder29ExpressibleAsPoundWarningDeclP","s18SwiftSyntaxBuilder29ExpressibleAsRegexLiteralExprP","s18SwiftSyntaxBuilder29ExpressibleAsTupleExprElementP","s18SwiftSyntaxBuilder29ExpressibleAsTupleTypeElementP","s18SwiftSyntaxBuilder30ExpressibleAsAccessorParameterP","s18SwiftSyntaxBuilder30ExpressibleAsAvailabilityEntryP","s18SwiftSyntaxBuilder30ExpressibleAsCodeBlockItemListP","s18SwiftSyntaxBuilder30ExpressibleAsDeclNameArgumentsP","s18SwiftSyntaxBuilder30ExpressibleAsDeinitializerDeclP","s18SwiftSyntaxBuilder30ExpressibleAsDictionaryElementP","s18SwiftSyntaxBuilder30ExpressibleAsExpressionPatternP","s18SwiftSyntaxBuilder30ExpressibleAsExpressionSegmentP","s18SwiftSyntaxBuilder30ExpressibleAsFunctionParameterP","s18SwiftSyntaxBuilder30ExpressibleAsFunctionSignatureP","s18SwiftSyntaxBuilder30ExpressibleAsIdentifierPatternP","s18SwiftSyntaxBuilder30ExpressibleAsInheritedTypeListP","s18SwiftSyntaxBuilder30ExpressibleAsInitializerClauseP","s18SwiftSyntaxBuilder30ExpressibleAsNonEmptyTokenListP","s18SwiftSyntaxBuilder30ExpressibleAsObjCSelectorPieceP","s18SwiftSyntaxBuilder30ExpressibleAsObjectLiteralExprP","s18SwiftSyntaxBuilder30ExpressibleAsPoundFilePathExprP","s18SwiftSyntaxBuilder30ExpressibleAsPoundFunctionExprP","s18SwiftSyntaxBuilder30ExpressibleAsQualifiedDeclNameP","s18SwiftSyntaxBuilder30ExpressibleAsStringLiteralExprP","s18SwiftSyntaxBuilder31ExpressibleAsAssociatedtypeDeclP","s18SwiftSyntaxBuilder31ExpressibleAsBinaryOperatorExprP","s18SwiftSyntaxBuilder31ExpressibleAsBooleanLiteralExprP","s18SwiftSyntaxBuilder31ExpressibleAsClosureCaptureItemP","s18SwiftSyntaxBuilder31ExpressibleAsElseIfContinuationP","s18SwiftSyntaxBuilder31ExpressibleAsGenericRequirementP","s18SwiftSyntaxBuilder31ExpressibleAsGenericWhereClauseP","s18SwiftSyntaxBuilder31ExpressibleAsIfConfigClauseListP","s18SwiftSyntaxBuilder31ExpressibleAsIntegerLiteralExprP","s18SwiftSyntaxBuilder31ExpressibleAsMemberDeclListItemP","s18SwiftSyntaxBuilder31ExpressibleAsPatternBindingListP","s18SwiftSyntaxBuilder31ExpressibleAsPoundDsohandleExprP","s18SwiftSyntaxBuilder31ExpressibleAsPrefixOperatorExprP","s18SwiftSyntaxBuilder31ExpressibleAsSwitchDefaultLabelP","s18SwiftSyntaxBuilder32ExpressibleAsAccessLevelModifierP","s18SwiftSyntaxBuilder32ExpressibleAsAccessPathComponentP","s18SwiftSyntaxBuilder32ExpressibleAsEnumCaseElementListP","s18SwiftSyntaxBuilder32ExpressibleAsGenericArgumentListP","s18SwiftSyntaxBuilder32ExpressibleAsPostfixIfConfigExprP","s18SwiftSyntaxBuilder32ExpressibleAsPoundSourceLocationP","s18SwiftSyntaxBuilder32ExpressibleAsPrecedenceGroupDeclP","s18SwiftSyntaxBuilder32ExpressibleAsSameTypeRequirementP","s18SwiftSyntaxBuilder32ExpressibleAsTargetFunctionEntryP","s18SwiftSyntaxBuilder32ExpressibleAsTuplePatternElementP","s18SwiftSyntaxBuilder32ExpressibleAsValueBindingPatternP","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilityArgumentP","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilitySpecListP","s18SwiftSyntaxBuilder33ExpressibleAsClassRestrictionTypeP","s18SwiftSyntaxBuilder33ExpressibleAsConditionElementListP","s18SwiftSyntaxBuilder33ExpressibleAsDeclNameArgumentListP","s18SwiftSyntaxBuilder33ExpressibleAsGenericParameterListP","s18SwiftSyntaxBuilder33ExpressibleAsMemberTypeIdentifierP","s18SwiftSyntaxBuilder33ExpressibleAsOptionalChainingExprP","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierP","s18SwiftSyntaxBuilder33ExpressibleAsTupleExprElementListP","s18SwiftSyntaxBuilder33ExpressibleAsTupleTypeElementListP","s18SwiftSyntaxBuilder34ExpressibleAsAvailabilityConditionP","s18SwiftSyntaxBuilder34ExpressibleAsDictionaryElementListP","s18SwiftSyntaxBuilder34ExpressibleAsDiscardAssignmentExprP","s18SwiftSyntaxBuilder34ExpressibleAsEditorPlaceholderExprP","s18SwiftSyntaxBuilder34ExpressibleAsFunctionParameterListP","s18SwiftSyntaxBuilder34ExpressibleAsGenericArgumentClauseP","s18SwiftSyntaxBuilder34ExpressibleAsPrimaryAssociatedTypeP","s18SwiftSyntaxBuilder34ExpressibleAsStringLiteralSegmentsP","s18SwiftSyntaxBuilder34ExpressibleAsSymbolicReferenceExprP","s18SwiftSyntaxBuilder34ExpressibleAsTypeInheritanceClauseP","s18SwiftSyntaxBuilder34ExpressibleAsTypeInitializerClauseP","s18SwiftSyntaxBuilder34ExpressibleAsUnresolvedPatternExprP","s18SwiftSyntaxBuilder35ExpressibleAsClosureCaptureItemListP","s18SwiftSyntaxBuilder35ExpressibleAsCompositionTypeElementP","s18SwiftSyntaxBuilder35ExpressibleAsConformanceRequirementP","s18SwiftSyntaxBuilder35ExpressibleAsDifferentiabilityParamP","s18SwiftSyntaxBuilder35ExpressibleAsGenericParameterClauseP","s18SwiftSyntaxBuilder35ExpressibleAsGenericRequirementListP","s18SwiftSyntaxBuilder35ExpressibleAsLabeledSpecializeEntryP","s18SwiftSyntaxBuilder36ExpressibleAsClosureCaptureSignatureP","s18SwiftSyntaxBuilder36ExpressibleAsDifferentiabilityParamsP","s18SwiftSyntaxBuilder36ExpressibleAsPoundSourceLocationArgsP","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupNameListP","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupRelationP","s18SwiftSyntaxBuilder36ExpressibleAsTuplePatternElementListP","s18SwiftSyntaxBuilder36ExpressibleAsUnavailabilityConditionP","s18SwiftSyntaxBuilder37ExpressibleAsMatchingPatternConditionP","s18SwiftSyntaxBuilder37ExpressibleAsOptionalBindingConditionP","s18SwiftSyntaxBuilder38ExpressibleAsPrecedenceGroupAssignmentP","s18SwiftSyntaxBuilder38ExpressibleAsPrimaryAssociatedTypeListP","s18SwiftSyntaxBuilder39ExpressibleAsCompositionTypeElementListP","s18SwiftSyntaxBuilder39ExpressibleAsDifferentiabilityParamListP","s18SwiftSyntaxBuilder39ExpressibleAsOperatorPrecedenceAndTypesP","s18SwiftSyntaxBuilder39ExpressibleAsPrecedenceGroupNameElementP","s18SwiftSyntaxBuilder40ExpressibleAsAvailabilityLabeledArgumentP","s18SwiftSyntaxBuilder40ExpressibleAsSpecializeAttributeSpecListP","s18SwiftSyntaxBuilder41ExpressibleAsImplementsAttributeArgumentsP","s18SwiftSyntaxBuilder41ExpressibleAsNamedAttributeStringArgumentP","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAssociativityP","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAttributeListP","s18SwiftSyntaxBuilder42ExpressibleAsDifferentiabilityParamsClauseP","s18SwiftSyntaxBuilder43ExpressibleAsAvailabilityVersionRestrictionP","s18SwiftSyntaxBuilder43ExpressibleAsMultipleTrailingClosureElementP","s18SwiftSyntaxBuilder44ExpressibleAsImplicitlyUnwrappedOptionalTypeP","s18SwiftSyntaxBuilder45ExpressibleAsDifferentiableAttributeArgumentsP","s18SwiftSyntaxBuilder47ExpressibleAsMultipleTrailingClosureElementListP","s18SwiftSyntaxBuilder53ExpressibleAsDerivativeRegistrationAttributeArgumentsP","s18SwiftSyntaxBuilder010AccessPathC0V","s18SwiftSyntaxBuilder012AccessorListC0V","s18SwiftSyntaxBuilder012CaseItemListC0V","s18SwiftSyntaxBuilder012ModifierListC0V","s18SwiftSyntaxBuilder012ObjCSelectorC0V","s18SwiftSyntaxBuilder013AttributeListC0V","s18SwiftSyntaxBuilder013CatchItemListC0V","s18SwiftSyntaxBuilder014IdentifierListC0V","s18SwiftSyntaxBuilder014MemberDeclListC0V","s18SwiftSyntaxBuilder014SwitchCaseListC0V","s18SwiftSyntaxBuilder015CatchClauseListC0V","s18SwiftSyntaxBuilder016ArrayElementListC0V","s18SwiftSyntaxBuilder016ClosureParamListC0V","s18SwiftSyntaxBuilder017CodeBlockItemListC0V","s18SwiftSyntaxBuilder017InheritedTypeListC0V","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V","s18SwiftSyntaxBuilder018IfConfigClauseListC0V","s18SwiftSyntaxBuilder018PatternBindingListC0V","s18SwiftSyntaxBuilder019EnumCaseElementListC0V","s18SwiftSyntaxBuilder019GenericArgumentListC0V","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V","s18SwiftSyntaxBuilder020ConditionElementListC0V","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V","s18SwiftSyntaxBuilder020GenericParameterListC0V","s18SwiftSyntaxBuilder020TupleExprElementListC0V","s18SwiftSyntaxBuilder020TupleTypeElementListC0V","s18SwiftSyntaxBuilder021DictionaryElementListC0V","s18SwiftSyntaxBuilder021FunctionParameterListC0V","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V","s18SwiftSyntaxBuilder022GenericRequirementListC0V","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V","s18SwiftSyntaxBuilder023TuplePatternElementListC0V","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V","s18SwiftSyntaxBuilder08ExprListC0V","s18SwiftSyntaxBuilder08ObjcNameC0V","s18SwiftSyntaxBuilder09TokenListC0V","s18SwiftSyntaxBuilder10AccessPathV","s18SwiftSyntaxBuilder10ImportDeclV","s18SwiftSyntaxBuilder10ReturnStmtV","s18SwiftSyntaxBuilder10SourceFileV","s18SwiftSyntaxBuilder10StructDeclV","s18SwiftSyntaxBuilder10SwitchCaseV","s18SwiftSyntaxBuilder10SwitchStmtV","s18SwiftSyntaxBuilder11CatchClauseV","s18SwiftSyntaxBuilder11ClosureExprV","s18SwiftSyntaxBuilder11KeyPathExprV","s18SwiftSyntaxBuilder11TernaryExprV","s18SwiftSyntaxBuilder11WhereClauseV","s18SwiftSyntaxBuilder12AccessorDeclV","s18SwiftSyntaxBuilder12AccessorListV","s18SwiftSyntaxBuilder12ArrayElementV","s18SwiftSyntaxBuilder12CaseItemListV","s18SwiftSyntaxBuilder12ClosureParamV","s18SwiftSyntaxBuilder12ContinueStmtV","s18SwiftSyntaxBuilder12DeclModifierV","s18SwiftSyntaxBuilder12EnumCaseDeclV","s18SwiftSyntaxBuilder12FunctionDeclV","s18SwiftSyntaxBuilder12FunctionTypeV","s18SwiftSyntaxBuilder12IfConfigDeclV","s18SwiftSyntaxBuilder12MetatypeTypeV","s18SwiftSyntaxBuilder12ModifierListV","s18SwiftSyntaxBuilder12ObjCSelectorV","s18SwiftSyntaxBuilder12OperatorDeclV","s18SwiftSyntaxBuilder12OptionalTypeV","s18SwiftSyntaxBuilder12ProtocolDeclV","s18SwiftSyntaxBuilder12ReturnClauseV","s18SwiftSyntaxBuilder12SequenceExprV","s18SwiftSyntaxBuilder12SuperRefExprV","s18SwiftSyntaxBuilder12TuplePatternV","s18SwiftSyntaxBuilder12VariableDeclV","s18SwiftSyntaxBuilder12VersionTupleV","s18SwiftSyntaxBuilder13AccessorBlockV","s18SwiftSyntaxBuilder13AsTypePatternV","s18SwiftSyntaxBuilder13AttributeListV","s18SwiftSyntaxBuilder13CatchItemListV","s18SwiftSyntaxBuilder13CodeBlockItemV","s18SwiftSyntaxBuilder13ExtensionDeclV","s18SwiftSyntaxBuilder13InheritedTypeV","s18SwiftSyntaxBuilder13IsTypePatternV","s18SwiftSyntaxBuilder13ObjcNamePieceV","s18SwiftSyntaxBuilder13PoundFileExprV","s18SwiftSyntaxBuilder13PoundLineExprV","s18SwiftSyntaxBuilder13StringSegmentV","s18SwiftSyntaxBuilder13SubscriptDeclV","s18SwiftSyntaxBuilder13SubscriptExprV","s18SwiftSyntaxBuilder13TypealiasDeclV","s18SwiftSyntaxBuilder14AssignmentExprV","s18SwiftSyntaxBuilder14AttributedTypeV","s18SwiftSyntaxBuilder14DictionaryExprV","s18SwiftSyntaxBuilder14DictionaryTypeV","s18SwiftSyntaxBuilder14ExpressionStmtV","s18SwiftSyntaxBuilder14IdentifierExprV","s18SwiftSyntaxBuilder14IdentifierListV","s18SwiftSyntaxBuilder14IfConfigClauseV","s18SwiftSyntaxBuilder14MemberDeclListV","s18SwiftSyntaxBuilder14NilLiteralExprV","s18SwiftSyntaxBuilder14PatternBindingV","s18SwiftSyntaxBuilder14PoundErrorDeclV","s18SwiftSyntaxBuilder14SpecializeExprV","s18SwiftSyntaxBuilder14SwitchCaseListV","s18SwiftSyntaxBuilder14TypeAnnotationV","s18SwiftSyntaxBuilder15CatchClauseListV","s18SwiftSyntaxBuilder15CompositionTypeV","s18SwiftSyntaxBuilder15CustomAttributeV","s18SwiftSyntaxBuilder15DeclarationStmtV","s18SwiftSyntaxBuilder15EnumCaseElementV","s18SwiftSyntaxBuilder15EnumCasePatternV","s18SwiftSyntaxBuilder15FallthroughStmtV","s18SwiftSyntaxBuilder15ForcedValueExprV","s18SwiftSyntaxBuilder15GenericArgumentV","s18SwiftSyntaxBuilder15InitializerDeclV","s18SwiftSyntaxBuilder15KeyPathBaseExprV","s18SwiftSyntaxBuilder15MemberDeclBlockV","s18SwiftSyntaxBuilder15ObjcKeyPathExprV","s18SwiftSyntaxBuilder15OptionalPatternV","s18SwiftSyntaxBuilder15ParameterClauseV","s18SwiftSyntaxBuilder15PoundAssertStmtV","s18SwiftSyntaxBuilder15PoundColumnExprV","s18SwiftSyntaxBuilder15PoundFileIDExprV","s18SwiftSyntaxBuilder15RepeatWhileStmtV","s18SwiftSyntaxBuilder15SwitchCaseLabelV","s18SwiftSyntaxBuilder15WildcardPatternV","s18SwiftSyntaxBuilder16ArrayElementListV","s18SwiftSyntaxBuilder16ClosureParamListV","s18SwiftSyntaxBuilder16ClosureSignatureV","s18SwiftSyntaxBuilder16ConditionElementV","s18SwiftSyntaxBuilder16DeclNameArgumentV","s18SwiftSyntaxBuilder16FloatLiteralExprV","s18SwiftSyntaxBuilder16FunctionCallExprV","s18SwiftSyntaxBuilder16FunctionDeclNameV","s18SwiftSyntaxBuilder16GenericParameterV","s18SwiftSyntaxBuilder16MemberAccessExprV","s18SwiftSyntaxBuilder16ObjcSelectorExprV","s18SwiftSyntaxBuilder16PostfixUnaryExprV","s18SwiftSyntaxBuilder16PoundWarningDeclV","s18SwiftSyntaxBuilder16RegexLiteralExprV","s18SwiftSyntaxBuilder16TupleExprElementV","s18SwiftSyntaxBuilder16TupleTypeElementV","s18SwiftSyntaxBuilder17AccessorParameterV","s18SwiftSyntaxBuilder17AvailabilityEntryV","s18SwiftSyntaxBuilder17CodeBlockItemListV","s18SwiftSyntaxBuilder17DeclNameArgumentsV","s18SwiftSyntaxBuilder17DeinitializerDeclV","s18SwiftSyntaxBuilder17DictionaryElementV","s18SwiftSyntaxBuilder17ExpressionPatternV","s18SwiftSyntaxBuilder17ExpressionSegmentV","s18SwiftSyntaxBuilder17FunctionParameterV","s18SwiftSyntaxBuilder17FunctionSignatureV","s18SwiftSyntaxBuilder17IdentifierPatternV","s18SwiftSyntaxBuilder17InheritedTypeListV","s18SwiftSyntaxBuilder17InitializerClauseV","s18SwiftSyntaxBuilder17NonEmptyTokenListV","s18SwiftSyntaxBuilder17ObjCSelectorPieceV","s18SwiftSyntaxBuilder17ObjectLiteralExprV","s18SwiftSyntaxBuilder17PoundFilePathExprV","s18SwiftSyntaxBuilder17PoundFunctionExprV","s18SwiftSyntaxBuilder17QualifiedDeclNameV","s18SwiftSyntaxBuilder17StringLiteralExprV","s18SwiftSyntaxBuilder18AssociatedtypeDeclV","s18SwiftSyntaxBuilder18BinaryOperatorExprV","s18SwiftSyntaxBuilder18BooleanLiteralExprV","s18SwiftSyntaxBuilder18ClosureCaptureItemV","s18SwiftSyntaxBuilder18ElseIfContinuationV","s18SwiftSyntaxBuilder18GenericRequirementV","s18SwiftSyntaxBuilder18GenericWhereClauseV","s18SwiftSyntaxBuilder18IfConfigClauseListV","s18SwiftSyntaxBuilder18IntegerLiteralExprV","s18SwiftSyntaxBuilder18MemberDeclListItemV","s18SwiftSyntaxBuilder18PatternBindingListV","s18SwiftSyntaxBuilder18PoundDsohandleExprV","s18SwiftSyntaxBuilder18PrefixOperatorExprV","s18SwiftSyntaxBuilder18SwitchDefaultLabelV","s18SwiftSyntaxBuilder19AccessLevelModifierV","s18SwiftSyntaxBuilder19AccessPathComponentV","s18SwiftSyntaxBuilder19EnumCaseElementListV","s18SwiftSyntaxBuilder19GenericArgumentListV","s18SwiftSyntaxBuilder19PostfixIfConfigExprV","s18SwiftSyntaxBuilder19PoundSourceLocationV","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV","s18SwiftSyntaxBuilder19SameTypeRequirementV","s18SwiftSyntaxBuilder19TargetFunctionEntryV","s18SwiftSyntaxBuilder19TuplePatternElementV","s18SwiftSyntaxBuilder19ValueBindingPatternV","s18SwiftSyntaxBuilder20AvailabilityArgumentV","s18SwiftSyntaxBuilder20AvailabilitySpecListV","s18SwiftSyntaxBuilder20ClassRestrictionTypeV","s18SwiftSyntaxBuilder20ConditionElementListV","s18SwiftSyntaxBuilder20DeclNameArgumentListV","s18SwiftSyntaxBuilder20GenericParameterListV","s18SwiftSyntaxBuilder20MemberTypeIdentifierV","s18SwiftSyntaxBuilder20OptionalChainingExprV","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV","s18SwiftSyntaxBuilder20TupleExprElementListV","s18SwiftSyntaxBuilder20TupleTypeElementListV","s18SwiftSyntaxBuilder21AvailabilityConditionV","s18SwiftSyntaxBuilder21DictionaryElementListV","s18SwiftSyntaxBuilder21DiscardAssignmentExprV","s18SwiftSyntaxBuilder21EditorPlaceholderExprV","s18SwiftSyntaxBuilder21FunctionParameterListV","s18SwiftSyntaxBuilder21GenericArgumentClauseV","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV","s18SwiftSyntaxBuilder21StringLiteralSegmentsV","s18SwiftSyntaxBuilder21SymbolicReferenceExprV","s18SwiftSyntaxBuilder21TypeInheritanceClauseV","s18SwiftSyntaxBuilder21TypeInitializerClauseV","s18SwiftSyntaxBuilder21UnresolvedPatternExprV","s18SwiftSyntaxBuilder22ClosureCaptureItemListV","s18SwiftSyntaxBuilder22CompositionTypeElementV","s18SwiftSyntaxBuilder22ConformanceRequirementV","s18SwiftSyntaxBuilder22DifferentiabilityParamV","s18SwiftSyntaxBuilder22GenericParameterClauseV","s18SwiftSyntaxBuilder22GenericRequirementListV","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV","s18SwiftSyntaxBuilder23DifferentiabilityParamsV","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV","s18SwiftSyntaxBuilder23TuplePatternElementListV","s18SwiftSyntaxBuilder23UnavailabilityConditionV","s18SwiftSyntaxBuilder24MatchingPatternConditionV","s18SwiftSyntaxBuilder24OptionalBindingConditionV","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV","s18SwiftSyntaxBuilder26CompositionTypeElementListV","s18SwiftSyntaxBuilder26DifferentiabilityParamListV","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV","s18SwiftSyntaxBuilder6AsExprV","s18SwiftSyntaxBuilder6DoStmtV","s18SwiftSyntaxBuilder6FormatV","s18SwiftSyntaxBuilder6IfStmtV","s18SwiftSyntaxBuilder6IsExprV","s18SwiftSyntaxBuilder7TryExprV","s18SwiftSyntaxBuilder8CaseItemV","s18SwiftSyntaxBuilder8DeclNameV","s18SwiftSyntaxBuilder8EnumDeclV","s18SwiftSyntaxBuilder8ExprListV","s18SwiftSyntaxBuilder8ObjcNameV","s18SwiftSyntaxBuilder8SomeTypeV","s18SwiftSyntaxBuilder8TypeExprV","s18SwiftSyntaxBuilder9ArrayExprV","s18SwiftSyntaxBuilder9ArrayTypeV","s18SwiftSyntaxBuilder9ArrowExprV","s18SwiftSyntaxBuilder9AttributeV","s18SwiftSyntaxBuilder9AwaitExprV","s18SwiftSyntaxBuilder9BreakStmtV","s18SwiftSyntaxBuilder9CatchItemV","s18SwiftSyntaxBuilder9ClassDeclV","s18SwiftSyntaxBuilder9CodeBlockV","s18SwiftSyntaxBuilder9DeferStmtV","s18SwiftSyntaxBuilder9ElseBlockV","s18SwiftSyntaxBuilder9ForInStmtV","s18SwiftSyntaxBuilder9GuardStmtV","s18SwiftSyntaxBuilder9InOutExprV","s18SwiftSyntaxBuilder9ThrowStmtV","s18SwiftSyntaxBuilder9TokenListV","s18SwiftSyntaxBuilder9TupleExprV","s18SwiftSyntaxBuilder9TupleTypeV","s18SwiftSyntaxBuilder9WhileStmtV","s18SwiftSyntaxBuilder9YieldListV","s18SwiftSyntaxBuilder9YieldStmtV","s18SwiftSyntaxBuilder10AccessPathV12arrayLiteralAcA013ExpressibleAsdE9Component_pd_tcfc","s18SwiftSyntaxBuilder10AccessPathVyACSayAA013ExpressibleAsdE9Component_pGcfc","s18SwiftSyntaxBuilder10ImportDeclV10attributes9modifiers9importTok0H4Kind4pathAcA26ExpressibleAsAttributeList_pSg_AA0lm8ModifierO0_pSg0aB005TokenB0VAOSgAA0lM10AccessPath_ptcfc","s18SwiftSyntaxBuilder10ImportDeclV9importTok0F4Kind010attributesC009modifiersC004pathC0AC0aB005TokenB0V_AKSgAA26ExpressibleAsAttributeList_pSgyXEAA0mn8ModifierP0_pSgyXEAA0mN10AccessPath_pyXEtcfc","s18SwiftSyntaxBuilder10ReturnStmtV13returnKeyword10expressionAC0aB005TokenB0V_AA26ExpressibleAsExprBuildable_pSgtcfc","s18SwiftSyntaxBuilder10SourceFileV010statementsC0AcA30ExpressibleAsCodeBlockItemList_pyXE_tcfc","s18SwiftSyntaxBuilder10SourceFileV10statements8eofTokenAcA30ExpressibleAsCodeBlockItemList_p_0aB00hB0Vtcfc","s18SwiftSyntaxBuilder10SourceFileV8eofToken010statementsC0AC0aB00gB0V_AA30ExpressibleAsCodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder10StructDeclV10attributes9modifiers13structKeyword10identifier22genericParameterClause011inheritanceM00k5WhereM07membersAcA26ExpressibleAsAttributeList_pSg_AA0qr8ModifierT0_pSg0aB005TokenB0VArA0qr7GenericlM0_pSgAA0qr15TypeInheritanceM0_pSgAA0qrwoM0_pSgAA0qr6MemberE5Block_ptcfc","s18SwiftSyntaxBuilder10StructDeclV13structKeyword10identifier22genericParameterClause011inheritanceK00i5WhereK0010attributesC009modifiersC007membersC0AC0aB005TokenB0V_SSAA020ExpressibleAsGenericjK0_pSgAA0rs15TypeInheritanceK0_pSgAA0rstmK0_pSgAA0rS13AttributeList_pSgyXEAA0rs8ModifierX0_pSgyXEAA0rs6MembereX0_pyXEtcfc","s18SwiftSyntaxBuilder10StructDeclV13structKeyword10identifier22genericParameterClause011inheritanceK00i5WhereK07members010attributesC009modifiersC0AC0aB005TokenB0V_SSAA020ExpressibleAsGenericjK0_pSgAA0rs15TypeInheritanceK0_pSgAA0rstmK0_pSgAA0rs6MemberE5Block_pAA0rS13AttributeList_pSgyXEAA0rs8ModifierZ0_pSgyXEtcfc","s18SwiftSyntaxBuilder10SwitchCaseV11unknownAttr5label010statementsC0AcA22ExpressibleAsAttribute_pSg_AA0jkB9Buildable_pAA0jK17CodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder10SwitchCaseV11unknownAttr5label10statementsAcA22ExpressibleAsAttribute_pSg_AA0jkB9Buildable_pAA0jK17CodeBlockItemList_ptcfc","s18SwiftSyntaxBuilder10SwitchStmtV9labelName0F5Colon13switchKeyword10expression9leftBrace05rightM005casesC0ACSSSg_0aB005TokenB0VSgAnA26ExpressibleAsExprBuildable_pA2nA0qrD8CaseList_pyXEtcfc","s18SwiftSyntaxBuilder10SwitchStmtV9labelName0F5Colon13switchKeyword10expression9leftBrace5cases05rightM0AC0aB005TokenB0VSg_AnmA26ExpressibleAsExprBuildable_pAmA0qrD8CaseList_pAMtcfc","s18SwiftSyntaxBuilder11CatchClauseV12catchKeyword0F5Items4bodyAC0aB005TokenB0V_AA013ExpressibleAsD8ItemList_pSgAA0kL9CodeBlock_ptcfc","s18SwiftSyntaxBuilder11CatchClauseV12catchKeyword4body0f5ItemsC0AC0aB005TokenB0V_AA22ExpressibleAsCodeBlock_pAA0klD8ItemList_pSgyXEtcfc","s18SwiftSyntaxBuilder11ClosureExprV9leftBrace9signature05rightG0010statementsC0AC0aB005TokenB0V_AA013ExpressibleAsD9Signature_pSgAjA0lM17CodeBlockItemList_pyXEtcfc","s18SwiftSyntaxBuilder11ClosureExprV9leftBrace9signature10statements05rightG0AC0aB005TokenB0V_AA013ExpressibleAsD9Signature_pSgAA0lM17CodeBlockItemList_pAJtcfc","s18SwiftSyntaxBuilder11KeyPathExprV9backslash04rootF010expressionAC0aB005TokenB0V_AA013ExpressibleAsF9Buildable_pSgAaJ_ptcfc","s18SwiftSyntaxBuilder11TernaryExprV19conditionExpression12questionMark11firstChoice05colonI006secondK0AcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VAaI_pAlaI_ptcfc","s18SwiftSyntaxBuilder11WhereClauseV12whereKeyword11guardResultAC0aB005TokenB0V_AA26ExpressibleAsExprBuildable_ptcfc","s18SwiftSyntaxBuilder12AccessorDeclV10attributes8modifier12accessorKind9parameter12asyncKeyword06throwsL04bodyAcA26ExpressibleAsAttributeList_pSg_AA0opE8Modifier_pSg0aB005TokenB0VAA0opD9Parameter_pSgAQSgAtA0oP9CodeBlock_pSgtcfc","s18SwiftSyntaxBuilder12AccessorDeclV8modifier12accessorKind9parameter12asyncKeyword06throwsK04body010attributesC0AcA013ExpressibleAsE8Modifier_pSg_0aB005TokenB0VAA0opD9Parameter_pSgSSSgAOSgAA0oP9CodeBlock_pSgAA0oP13AttributeList_pSgyXEtcfc","s18SwiftSyntaxBuilder12AccessorListV12arrayLiteralAcA013ExpressibleAsD4Decl_pd_tcfc","s18SwiftSyntaxBuilder12AccessorListVyACSayAA013ExpressibleAsD4Decl_pGcfc","s18SwiftSyntaxBuilder12ArrayElementV10expression13trailingCommaAcA26ExpressibleAsExprBuildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder12CaseItemListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder12CaseItemListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder12ClosureParamV4name13trailingCommaAC0aB005TokenB0V_AHSgtcfc","s18SwiftSyntaxBuilder12ContinueStmtV15continueKeyword5labelAC0aB005TokenB0V_AHSgtcfc","s18SwiftSyntaxBuilder12ContinueStmtV15continueKeyword5labelAC0aB005TokenB0V_SSSgtcfc","s18SwiftSyntaxBuilder12DeclModifierV4name15detailLeftParen0G00g5RightI0AC0aB005TokenB0V_AJSgA2Ktcfc","s18SwiftSyntaxBuilder12DeclModifierV4name15detailLeftParen0G00g5RightI0AC0aB005TokenB0V_AJSgSSSgAKtcfc","s18SwiftSyntaxBuilder12EnumCaseDeclV10attributes9modifiers11caseKeyword8elementsAcA26ExpressibleAsAttributeList_pSg_AA0lm8ModifierO0_pSg0aB005TokenB0VAA0lmde7ElementO0_ptcfc","s18SwiftSyntaxBuilder12EnumCaseDeclV11caseKeyword010attributesC009modifiersC008elementsC0AC0aB005TokenB0V_AA26ExpressibleAsAttributeList_pSgyXEAA0mn8ModifierP0_pSgyXEAA0mnde7ElementP0_pyXEtcfc","s18SwiftSyntaxBuilder12FunctionDeclV10attributes9modifiers11funcKeyword10identifier22genericParameterClause9signature0k5WhereM04bodyAcA26ExpressibleAsAttributeList_pSg_AA0qr8ModifierT0_pSg0aB005TokenB0VArA0qr7GenericlM0_pSgAA0qrD9Signature_pAA0qrwoM0_pSgAA0qR9CodeBlock_pSgtcfc","s18SwiftSyntaxBuilder12FunctionDeclV11funcKeyword10identifier22genericParameterClause9signature0i5WhereK0010attributesC009modifiersC004bodyC0AC0aB005TokenB0V_AnA020ExpressibleAsGenericjK0_pSgAA0rsD9Signature_pAA0rstmK0_pSgAA0rS13AttributeList_pSgyXEAA0rs8ModifierW0_pSgyXEAA013CodeBlockItemW0VSgyXEtcfc","s18SwiftSyntaxBuilder12FunctionDeclV11funcKeyword10identifier22genericParameterClause9signature0i5WhereK04body010attributesC009modifiersC0AC0aB005TokenB0V_AnA020ExpressibleAsGenericjK0_pSgAA0rsD9Signature_pAA0rstmK0_pSgAA0rS9CodeBlock_pSgAA0rS13AttributeList_pSgyXEAA0rs8ModifierY0_pSgyXEtcfc","s18SwiftSyntaxBuilder12FunctionTypeV9leftParen05rightG012asyncKeyword016throwsOrRethrowsJ05arrow06returnE009argumentsC0AC0aB005TokenB0V_AMSSSgAMSgAmA013ExpressibleAsE9Buildable_pAA0rs5TupleE11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder12FunctionTypeV9leftParen9arguments05rightG012asyncKeyword016throwsOrRethrowsK05arrow06returnE0AC0aB005TokenB0V_AA018ExpressibleAsTupleE11ElementList_pA2MSgAomA0rsE9Buildable_ptcfc","s18SwiftSyntaxBuilder12IfConfigDeclV10poundEndif07clausesC0AC0aB005TokenB0V_AA013ExpressibleAsdE10ClauseList_pyXEtcfc","s18SwiftSyntaxBuilder12IfConfigDeclV7clauses10poundEndifAcA013ExpressibleAsdE10ClauseList_p_0aB005TokenB0Vtcfc","s18SwiftSyntaxBuilder12MetatypeTypeV04baseE06period14typeOrProtocolAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VAJtcfc","s18SwiftSyntaxBuilder12MetatypeTypeV04baseE06period14typeOrProtocolAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VSStcfc","s18SwiftSyntaxBuilder12ModifierListV12arrayLiteralAcA017ExpressibleAsDeclD0_pd_tcfc","s18SwiftSyntaxBuilder12ModifierListVyACSayAA017ExpressibleAsDeclD0_pGcfc","s18SwiftSyntaxBuilder12ObjCSelectorV12arrayLiteralAcA013ExpressibleAsdE5Piece_pd_tcfc","s18SwiftSyntaxBuilder12ObjCSelectorVyACSayAA013ExpressibleAsdE5Piece_pGcfc","s18SwiftSyntaxBuilder12OperatorDeclV10attributes9modifiers15operatorKeyword10identifier0H18PrecedenceAndTypesAcA26ExpressibleAsAttributeList_pSg_AA0no8ModifierQ0_pSg0aB005TokenB0VAoA0nodklM0_pSgtcfc","s18SwiftSyntaxBuilder12OperatorDeclV15operatorKeyword10identifier0F18PrecedenceAndTypes010attributesC009modifiersC0AC0aB005TokenB0V_AkA013ExpressibleAsdijK0_pSgAA0oP13AttributeList_pSgyXEAA0op8ModifierR0_pSgyXEtcfc","s18SwiftSyntaxBuilder12OptionalTypeV07wrappedE012questionMarkAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0Vtcfc","s18SwiftSyntaxBuilder12ProtocolDeclV10attributes9modifiers15protocolKeyword10identifier17inheritanceClause012genericWhereL07membersAcA26ExpressibleAsAttributeList_pSg_AA0pq8ModifierS0_pSg0aB005TokenB0VAqA0pq15TypeInheritanceL0_pSgAA0pq7GenericnL0_pSgAA0pq6MemberE5Block_ptcfc","s18SwiftSyntaxBuilder12ProtocolDeclV15protocolKeyword10identifier17inheritanceClause012genericWhereJ0010attributesC009modifiersC007membersC0AC0aB005TokenB0V_SSAA028ExpressibleAsTypeInheritanceJ0_pSgAA0qr7GenericlJ0_pSgAA0qR13AttributeList_pSgyXEAA0qr8ModifierW0_pSgyXEAA0qr6MembereW0_pyXEtcfc","s18SwiftSyntaxBuilder12ProtocolDeclV15protocolKeyword10identifier17inheritanceClause012genericWhereJ07members010attributesC009modifiersC0AC0aB005TokenB0V_SSAA028ExpressibleAsTypeInheritanceJ0_pSgAA0qr7GenericlJ0_pSgAA0qr6MemberE5Block_pAA0qR13AttributeList_pSgyXEAA0qr8ModifierY0_pSgyXEtcfc","s18SwiftSyntaxBuilder12ReturnClauseV5arrow10returnTypeAC0aB005TokenB0V_AA013ExpressibleAsH9Buildable_ptcfc","s18SwiftSyntaxBuilder12SequenceExprV08elementsC0AcA013ExpressibleAsE4List_pyXE_tcfc","s18SwiftSyntaxBuilder12SequenceExprV8elementsAcA013ExpressibleAsE4List_p_tcfc","s18SwiftSyntaxBuilder12SuperRefExprV12superKeywordAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder12TuplePatternV9leftParen05rightG008elementsC0AC0aB005TokenB0V_AiA013ExpressibleAsdE11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder12TuplePatternV9leftParen8elements05rightG0AC0aB005TokenB0V_AA013ExpressibleAsdE11ElementList_pAItcfc","s18SwiftSyntaxBuilder12VariableDeclV10attributes9modifiers15letOrVarKeyword8bindingsAcA26ExpressibleAsAttributeList_pSg_AA0mn8ModifierP0_pSg0aB005TokenB0VAA0mn14PatternBindingP0_ptcfc","s18SwiftSyntaxBuilder12VariableDeclV15letOrVarKeyword010attributesC009modifiersC008bindingsC0AC0aB005TokenB0V_AA26ExpressibleAsAttributeList_pSgyXEAA0no8ModifierQ0_pSgyXEAA0no14PatternBindingQ0_pyXEtcfc","s18SwiftSyntaxBuilder12VariableDeclV_4name4typeAC0aB005TokenB0V_AA30ExpressibleAsIdentifierPattern_pAA0iJ14TypeAnnotation_ptcfc","s18SwiftSyntaxBuilder12VersionTupleV10majorMinor11patchPeriod0hD0AcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgAKtcfc","s18SwiftSyntaxBuilder12VersionTupleV10majorMinor11patchPeriod0hD0AcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgSSSgtcfc","s18SwiftSyntaxBuilder13AccessorBlockV9leftBrace05rightG009accessorsC0AC0aB005TokenB0V_AiA013ExpressibleAsD4List_pyXEtcfc","s18SwiftSyntaxBuilder13AccessorBlockV9leftBrace9accessors05rightG0AC0aB005TokenB0V_AA013ExpressibleAsD4List_pAItcfc","s18SwiftSyntaxBuilder13AsTypePatternV7pattern9asKeyword4typeAcA011ExpressibledF9Buildable_p_0aB005TokenB0VAA0kdeL0_ptcfc","s18SwiftSyntaxBuilder13AttributeListV12arrayLiteralAcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder13AttributeListVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder13CatchItemListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder13CatchItemListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder13CodeBlockItemV4item9semicolon11errorTokensAcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgAaG_pSgtcfc","s18SwiftSyntaxBuilder13ExtensionDeclV10attributes9modifiers16extensionKeyword12extendedType17inheritanceClause012genericWhereM07membersAcA26ExpressibleAsAttributeList_pSg_AA0qr8ModifierT0_pSg0aB005TokenB0VAA0qrK9Buildable_pAA0qrk11InheritanceM0_pSgAA0qr7GenericoM0_pSgAA0qr6MemberE5Block_ptcfc","s18SwiftSyntaxBuilder13ExtensionDeclV16extensionKeyword12extendedType17inheritanceClause012genericWhereK0010attributesC009modifiersC007membersC0AC0aB005TokenB0V_AA013ExpressibleAsI9Buildable_pAA0rsi11InheritanceK0_pSgAA0rs7GenericmK0_pSgAA0rS13AttributeList_pSgyXEAA0rs8ModifierX0_pSgyXEAA0rs6MembereX0_pyXEtcfc","s18SwiftSyntaxBuilder13ExtensionDeclV16extensionKeyword12extendedType17inheritanceClause012genericWhereK07members010attributesC009modifiersC0AC0aB005TokenB0V_AA013ExpressibleAsI9Buildable_pAA0rsi11InheritanceK0_pSgAA0rs7GenericmK0_pSgAA0rs6MemberE5Block_pAA0rS13AttributeList_pSgyXEAA0rs8ModifierZ0_pSgyXEtcfc","s18SwiftSyntaxBuilder13InheritedTypeV8typeName13trailingCommaAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder13IsTypePatternV9isKeyword4typeAC0aB005TokenB0V_AA013ExpressibleAsE9Buildable_ptcfc","s18SwiftSyntaxBuilder13ObjcNamePieceV4name3dotAC0aB005TokenB0V_AHSgtcfc","s18SwiftSyntaxBuilder13ObjcNamePieceV4name3dotACSS_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder13PoundFileExprV05poundE0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder13PoundLineExprV05poundE0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder13StringSegmentV7contentAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder13StringSegmentV7contentACSS_tcfc","s18SwiftSyntaxBuilder13SubscriptDeclV10attributes9modifiers16subscriptKeyword22genericParameterClause7indices6result0j5WhereL08accessorAcA26ExpressibleAsAttributeList_pSg_AA0qr8ModifierT0_pSg0aB005TokenB0VAA0qr7GenerickL0_pSgAA0qrkL0_pAA0qr6ReturnL0_pAA0qrwoL0_pSgAA0qrB9Buildable_pSgtcfc","s18SwiftSyntaxBuilder13SubscriptDeclV16subscriptKeyword22genericParameterClause7indices6result0h5WhereJ08accessor010attributesC009modifiersC0AC0aB005TokenB0V_AA020ExpressibleAsGenericiJ0_pSgAA0rsiJ0_pAA0rs6ReturnJ0_pAA0rstmJ0_pSgAA0rsB9Buildable_pSgAA0rS13AttributeList_pSgyXEAA0rs8ModifierX0_pSgyXEtcfc","s18SwiftSyntaxBuilder13SubscriptExprV16calledExpression11leftBracket05rightI015trailingClosure012argumentListC0026additionalTrailingClosuresC0AcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VAmA0rslE0_pSgAA0rs5Tuplee7ElementN0_pyXEAA0rs8MultipleplwN0_pSgyXEtcfc","s18SwiftSyntaxBuilder13SubscriptExprV16calledExpression11leftBracket12argumentList05rightI015trailingClosure26additionalTrailingClosuresAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VAA0rs5Tuplee7ElementK0_pAmA0rsnE0_pSgAA0rs8MultiplepnwK0_pSgtcfc","s18SwiftSyntaxBuilder13TypealiasDeclV10attributes9modifiers16typealiasKeyword10identifier22genericParameterClause11initializer0k5WhereM0AcA26ExpressibleAsAttributeList_pSg_AA0pq8ModifierS0_pSg0aB005TokenB0VAqA0pq7GenericlM0_pSgAA0pq15TypeInitializerM0_pSgAA0pqvoM0_pSgtcfc","s18SwiftSyntaxBuilder13TypealiasDeclV16typealiasKeyword10identifier22genericParameterClause11initializer0i5WhereK0010attributesC009modifiersC0AC0aB005TokenB0V_SSAA020ExpressibleAsGenericjK0_pSgAA0qr15TypeInitializerK0_pSgAA0qrsmK0_pSgAA0qR13AttributeList_pSgyXEAA0qr8ModifierW0_pSgyXEtcfc","s18SwiftSyntaxBuilder14AssignmentExprV11assignTokenAC0aB00gB0V_tcfc","s18SwiftSyntaxBuilder14AttributedTypeV9specifier04baseE0010attributesC0AC0aB005TokenB0VSg_AA013ExpressibleAsE9Buildable_pAA0jK13AttributeList_pSgyXEtcfc","s18SwiftSyntaxBuilder14AttributedTypeV9specifier10attributes04baseE0AC0aB005TokenB0VSg_AA26ExpressibleAsAttributeList_pSgAA0jkE9Buildable_ptcfc","s18SwiftSyntaxBuilder14DictionaryExprV10leftSquare7content05rightG0AC0aB005TokenB0V_AA013ExpressibleAsB9Buildable_pAItcfc","s18SwiftSyntaxBuilder14DictionaryTypeV17leftSquareBracket03keyE05colon05valueE005rightgH0AC0aB005TokenB0V_AA013ExpressibleAsE9Buildable_pAkaL_pAKtcfc","s18SwiftSyntaxBuilder14ExpressionStmtV10expressionAcA26ExpressibleAsExprBuildable_p_tcfc","s18SwiftSyntaxBuilder14IdentifierExprV10identifier17declNameArgumentsAC0aB005TokenB0V_AA017ExpressibleAsDeclhI0_pSgtcfc","s18SwiftSyntaxBuilder14IdentifierExprVyACSScfc","s18SwiftSyntaxBuilder14IdentifierListV12arrayLiteralAC0aB005TokenB0Vd_tcfc","s18SwiftSyntaxBuilder14IdentifierListVyACSay0aB005TokenB0VGcfc","s18SwiftSyntaxBuilder14IfConfigClauseV12poundKeyword9condition8elementsAC0aB005TokenB0V_AA26ExpressibleAsExprBuildable_pSgAA0lmbO0_ptcfc","s18SwiftSyntaxBuilder14MemberDeclListV12arrayLiteralAcA013ExpressibleAsdeF4Item_pd_tcfc","s18SwiftSyntaxBuilder14MemberDeclListVyACSayAA013ExpressibleAsdeF4Item_pGcfc","s18SwiftSyntaxBuilder14NilLiteralExprV10nilKeywordAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder14PatternBindingV7pattern14typeAnnotation11initializer8accessor13trailingCommaAcA013ExpressibleAsD9Buildable_p_AA0mn4TypeH0_pSgAA0mN17InitializerClause_pSgAA0mnbO0_pSg0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder14PoundErrorDeclV05poundE09leftParen7message05rightI0AC0aB005TokenB0V_AjA30ExpressibleAsStringLiteralExpr_pAJtcfc","s18SwiftSyntaxBuilder14SpecializeExprV10expression21genericArgumentClauseAcA013ExpressibleAsE9Buildable_p_AA0jk7GenerichI0_ptcfc","s18SwiftSyntaxBuilder14SwitchCaseListV12arrayLiteralAcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder14SwitchCaseListVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder14TypeAnnotationV5colon4typeAC0aB005TokenB0V_AA013ExpressibleAsD9Buildable_ptcfc","s18SwiftSyntaxBuilder14TypeAnnotationVyACSScfc","s18SwiftSyntaxBuilder15CatchClauseListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder15CatchClauseListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder15CompositionTypeV08elementsC0AcA013ExpressibleAsdE11ElementList_pyXE_tcfc","s18SwiftSyntaxBuilder15CompositionTypeV8elementsAcA013ExpressibleAsdE11ElementList_p_tcfc","s18SwiftSyntaxBuilder15CustomAttributeV11atSignToken13attributeName9leftParen05rightL0012argumentListC0AC0aB00hB0V_AA26ExpressibleAsTypeBuildable_pAKSgAmA0pq16TupleExprElementO0_pSgyXEtcfc","s18SwiftSyntaxBuilder15CustomAttributeV11atSignToken13attributeName9leftParen12argumentList05rightL0AC0aB00hB0V_AA26ExpressibleAsTypeBuildable_pAKSgAA0pq16TupleExprElementN0_pSgAMtcfc","s18SwiftSyntaxBuilder15DeclarationStmtV11declarationAcA26ExpressibleAsDeclBuildable_p_tcfc","s18SwiftSyntaxBuilder15EnumCaseElementV10identifier15associatedValue03rawI013trailingCommaAC0aB005TokenB0V_AA28ExpressibleAsParameterClause_pSgAA0no11InitializerQ0_pSgAJSgtcfc","s18SwiftSyntaxBuilder15EnumCaseElementV10identifier15associatedValue03rawI013trailingCommaACSS_AA28ExpressibleAsParameterClause_pSgAA0mn11InitializerP0_pSg0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder15EnumCasePatternV4type6period8caseName15associatedTupleAcA26ExpressibleAsTypeBuildable_pSg_0aB005TokenB0VAlA0mnlF0_pSgtcfc","s18SwiftSyntaxBuilder15EnumCasePatternV4type6period8caseName15associatedTupleAcA26ExpressibleAsTypeBuildable_pSg_0aB005TokenB0VSSAA0mnlF0_pSgtcfc","s18SwiftSyntaxBuilder15FallthroughStmtV18fallthroughKeywordAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder15ForcedValueExprV10expression15exclamationMarkAcA013ExpressibleAsF9Buildable_p_0aB005TokenB0Vtcfc","s18SwiftSyntaxBuilder15GenericArgumentV12argumentType13trailingCommaAcA013ExpressibleAsG9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder15InitializerDeclV10attributes9modifiers11initKeyword12optionalMark22genericParameterClause10parameters016throwsOrRethrowsI00l5WhereN04bodyAcA26ExpressibleAsAttributeList_pSg_AA0uv8ModifierX0_pSg0aB005TokenB0VASSgAA0uv7GenericmN0_pSgAA0uvmN0_pAtA0uv7GenericsN0_pSgAA0uV9CodeBlock_pSgtcfc","s18SwiftSyntaxBuilder15InitializerDeclV11initKeyword12optionalMark22genericParameterClause10parameters016throwsOrRethrowsG00j5WhereL04body010attributesC009modifiersC0AC0aB005TokenB0V_AOSgAA020ExpressibleAsGenerickL0_pSgAA0vwkL0_pApA0vwxqL0_pSgAA0vW9CodeBlock_pSgAA0vW13AttributeList_pSgyXEAA0vW12ModifierList_pSgyXEtcfc","s18SwiftSyntaxBuilder15KeyPathBaseExprV6periodAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder15MemberDeclBlockV9leftBrace05rightH007membersC0AC0aB005TokenB0V_AiA013ExpressibleAsdE4List_pyXEtcfc","s18SwiftSyntaxBuilder15MemberDeclBlockV9leftBrace7members05rightH0AC0aB005TokenB0V_AA013ExpressibleAsdE4List_pAItcfc","s18SwiftSyntaxBuilder15ObjcKeyPathExprV03keyF09leftParen05rightJ004nameC0AC0aB005TokenB0V_A2jA013ExpressibleAsD4Name_pyXEtcfc","s18SwiftSyntaxBuilder15ObjcKeyPathExprV03keyF09leftParen4name05rightJ0AC0aB005TokenB0V_AjA013ExpressibleAsD4Name_pAJtcfc","s18SwiftSyntaxBuilder15OptionalPatternV03subE012questionMarkAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0Vtcfc","s18SwiftSyntaxBuilder15ParameterClauseV9leftParen05rightG0013parameterListC0AC0aB005TokenB0V_AiA021ExpressibleAsFunctiondJ0_pyXEtcfc","s18SwiftSyntaxBuilder15ParameterClauseV9leftParen13parameterList05rightG0AC0aB005TokenB0V_AA021ExpressibleAsFunctiondI0_pAItcfc","s18SwiftSyntaxBuilder15PoundAssertStmtV05poundE09leftParen9condition5comma7message05rightI0AC0aB005TokenB0V_AlA26ExpressibleAsExprBuildable_pALSgAnLtcfc","s18SwiftSyntaxBuilder15PoundAssertStmtV05poundE09leftParen9condition5comma7message05rightI0AC0aB005TokenB0V_AlA26ExpressibleAsExprBuildable_pALSgSSSgALtcfc","s18SwiftSyntaxBuilder15PoundColumnExprV05poundE0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder15PoundFileIDExprV05poundE2IDAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder15RepeatWhileStmtV9labelName0G5Colon13repeatKeyword4body05whileK09conditionAC0aB005TokenB0VSg_AmlA22ExpressibleAsCodeBlock_pAlA0pQ13ExprBuildable_ptcfc","s18SwiftSyntaxBuilder15RepeatWhileStmtV9labelName0G5Colon13repeatKeyword4body05whileK09conditionACSSSg_0aB005TokenB0VSgAmA22ExpressibleAsCodeBlock_pAmA0pQ13ExprBuildable_ptcfc","s18SwiftSyntaxBuilder15SwitchCaseLabelV11caseKeyword0G5Items5colonAC0aB005TokenB0V_AA013ExpressibleAsE8ItemList_pAItcfc","s18SwiftSyntaxBuilder15SwitchCaseLabelV11caseKeyword5colon0g5ItemsC0AC0aB005TokenB0V_AiA013ExpressibleAsE8ItemList_pyXEtcfc","s18SwiftSyntaxBuilder15WildcardPatternV8wildcard14typeAnnotationAC0aB005TokenB0V_AA017ExpressibleAsTypeH0_pSgtcfc","s18SwiftSyntaxBuilder16ArrayElementListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder16ArrayElementListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder16ClosureParamListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder16ClosureParamListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder16ClosureSignatureV10attributes7capture5input12asyncKeyword9throwsTok6output02inL0AcA26ExpressibleAsAttributeList_pSg_AA0opd7CaptureE0_pSgAA0opB9Buildable_pSg0aB005TokenB0VSgAtA0oP12ReturnClause_pSgAStcfc","s18SwiftSyntaxBuilder16ClosureSignatureV7capture5input12asyncKeyword9throwsTok6output02inK0010attributesC0AcA013ExpressibleAsd7CaptureE0_pSg_AA0opB9Buildable_pSgSSSg0aB005TokenB0VSgAA0oP12ReturnClause_pSgArA0oP13AttributeList_pSgyXEtcfc","s18SwiftSyntaxBuilder16ConditionElementV9condition13trailingCommaAcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder16DeclNameArgumentV4name5colonAC0aB005TokenB0V_AHtcfc","s18SwiftSyntaxBuilder16FloatLiteralExprV05floatE0ACSf_tcfc","s18SwiftSyntaxBuilder16FloatLiteralExprV14floatingDigitsAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder16FloatLiteralExprV14floatingDigitsACSS_tcfc","s18SwiftSyntaxBuilder16FloatLiteralExprVyACSfcfc","s18SwiftSyntaxBuilder16FunctionCallExprV16calledExpression9leftParen05rightJ015trailingClosure012argumentListC0026additionalTrailingClosuresC0AcA013ExpressibleAsF9Buildable_p_0aB005TokenB0VSgAnA0stmF0_pSgAA0st5Tuplef7ElementO0_pyXEAA0st8MultipleqmxO0_pSgyXEtcfc","s18SwiftSyntaxBuilder16FunctionCallExprV16calledExpression9leftParen12argumentList05rightJ015trailingClosure26additionalTrailingClosuresAcA013ExpressibleAsF9Buildable_p_0aB005TokenB0VSgAA0st5Tuplef7ElementL0_pAnA0stoF0_pSgAA0st8MultipleqoxL0_pSgtcfc","s18SwiftSyntaxBuilder16FunctionCallExprV_9leftParen05rightH015trailingClosure012argumentListC0026additionalTrailingClosuresC0AcA023ExpressibleAsIdentifierF0_p_0aB005TokenB0VSgAmA0qrkF0_pSgAA0qr5Tuplef7ElementM0_pyXEAA08MultipleokvM0VSgyXEtcfc","s18SwiftSyntaxBuilder16FunctionDeclNameV4name9argumentsAcA013ExpressibleAsB9Buildable_p_AA0ijeF9Arguments_pSgtcfc","s18SwiftSyntaxBuilder16GenericParameterV10attributes4name5colon13inheritedType13trailingCommaAcA26ExpressibleAsAttributeList_pSg_0aB005TokenB0VAMSgAA0mnJ9Buildable_pSgANtcfc","s18SwiftSyntaxBuilder16GenericParameterV4name5colon13inheritedType13trailingComma010attributesC0ACSS_0aB005TokenB0VSgAA013ExpressibleAsI9Buildable_pSgAlA0nO13AttributeList_pSgyXEtcfc","s18SwiftSyntaxBuilder16MemberAccessExprV4base3dot4name17declNameArgumentsAcA013ExpressibleAsF9Buildable_pSg_0aB005TokenB0VAlA0mn4DeclkL0_pSgtcfc","s18SwiftSyntaxBuilder16ObjcSelectorExprV05poundE09leftParen4kind5colon4name05rightI0AC0aB005TokenB0V_A2LSgAmA013ExpressibleAsF9Buildable_pALtcfc","s18SwiftSyntaxBuilder16ObjcSelectorExprV05poundE09leftParen4kind5colon4name05rightI0AC0aB005TokenB0V_ALSSSgALSgAA013ExpressibleAsF9Buildable_pALtcfc","s18SwiftSyntaxBuilder16PostfixUnaryExprV10expression13operatorTokenAcA013ExpressibleAsF9Buildable_p_0aB00iB0Vtcfc","s18SwiftSyntaxBuilder16PostfixUnaryExprV10expression13operatorTokenAcA013ExpressibleAsF9Buildable_p_SStcfc","s18SwiftSyntaxBuilder16PoundWarningDeclV05poundE09leftParen7message05rightI0AC0aB005TokenB0V_AjA30ExpressibleAsStringLiteralExpr_pAJtcfc","s18SwiftSyntaxBuilder16RegexLiteralExprV5regexAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder16RegexLiteralExprV5regexACSS_tcfc","s18SwiftSyntaxBuilder16TupleExprElementV5label5colon10expression13trailingCommaAC0aB005TokenB0VSg_AkA013ExpressibleAsE9Buildable_pAKtcfc","s18SwiftSyntaxBuilder16TupleTypeElementV5inOut4name10secondName5colon4type8ellipsis11initializer13trailingCommaAC0aB005TokenB0VSg_A3oA013ExpressibleAsE9Buildable_pAoA0sT17InitializerClause_pSgAOtcfc","s18SwiftSyntaxBuilder17AccessorParameterV9leftParen4name05rightG0AC0aB005TokenB0V_A2Itcfc","s18SwiftSyntaxBuilder17AccessorParameterV9leftParen4name05rightG0AC0aB005TokenB0V_SSAItcfc","s18SwiftSyntaxBuilder17AvailabilityEntryV5label5colon16availabilityList9semicolonAC0aB005TokenB0V_AjA013ExpressibleAsd4SpecI0_pAJtcfc","s18SwiftSyntaxBuilder17AvailabilityEntryV5label5colon9semicolon016availabilityListC0ACSS_0aB005TokenB0VAjA013ExpressibleAsd4SpecJ0_pyXEtcfc","s18SwiftSyntaxBuilder17CodeBlockItemListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder17CodeBlockItemListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder17DeclNameArgumentsV9leftParen05rightH009argumentsC0AC0aB005TokenB0V_AiA013ExpressibleAsdE12ArgumentList_pyXEtcfc","s18SwiftSyntaxBuilder17DeclNameArgumentsV9leftParen9arguments05rightH0AC0aB005TokenB0V_AA013ExpressibleAsdE12ArgumentList_pAItcfc","s18SwiftSyntaxBuilder17DeinitializerDeclV10attributes9modifiers13deinitKeyword4bodyAcA26ExpressibleAsAttributeList_pSg_AA0kl8ModifierN0_pSg0aB005TokenB0VAA0kL9CodeBlock_ptcfc","s18SwiftSyntaxBuilder17DeinitializerDeclV13deinitKeyword4body010attributesC009modifiersC0AC0aB005TokenB0V_AA22ExpressibleAsCodeBlock_pAA0lM13AttributeList_pSgyXEAA0lm8ModifierQ0_pSgyXEtcfc","s18SwiftSyntaxBuilder17DictionaryElementV13keyExpression5colon05valueG013trailingCommaAcA26ExpressibleAsExprBuildable_p_0aB005TokenB0VAaH_pAKSgtcfc","s18SwiftSyntaxBuilder17ExpressionPatternV10expressionAcA26ExpressibleAsExprBuildable_p_tcfc","s18SwiftSyntaxBuilder17ExpressionSegmentV9backslash9delimiter9leftParen05rightI0011expressionsC0AC0aB005TokenB0V_SSSgA2kA33ExpressibleAsTupleExprElementList_pyXEtcfc","s18SwiftSyntaxBuilder17ExpressionSegmentV9backslash9delimiter9leftParen11expressions05rightI0AC0aB005TokenB0V_AKSgAkA33ExpressibleAsTupleExprElementList_pAKtcfc","s18SwiftSyntaxBuilder17FunctionParameterV10attributes9firstName06secondH05colon4type8ellipsis15defaultArgument13trailingCommaAcA26ExpressibleAsAttributeList_pSg_0aB005TokenB0VSgA2qA0qR13TypeBuildable_pSgAqA0qR17InitializerClause_pSgAQtcfc","s18SwiftSyntaxBuilder17FunctionParameterV9firstName06secondG05colon4type8ellipsis15defaultArgument13trailingComma010attributesC0AC0aB005TokenB0VSg_A2oA26ExpressibleAsTypeBuildable_pSgAoA0rS17InitializerClause_pSgAoA0rS13AttributeList_pSgyXEtcfc","s18SwiftSyntaxBuilder17FunctionSignatureV5input21asyncOrReasyncKeyword06throwsh8RethrowsJ06outputAcA28ExpressibleAsParameterClause_p_0aB005TokenB0VSgAlA0no6ReturnQ0_pSgtcfc","s18SwiftSyntaxBuilder17FunctionSignatureV5input21asyncOrReasyncKeyword06throwsh8RethrowsJ06outputAcA28ExpressibleAsParameterClause_p_SSSg0aB005TokenB0VSgAA0no6ReturnQ0_pSgtcfc","s18SwiftSyntaxBuilder17IdentifierPatternV10identifierAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder17IdentifierPatternVyACSScfc","s18SwiftSyntaxBuilder17InheritedTypeListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder17InheritedTypeListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder17InitializerClauseV5equal5valueAC0aB005TokenB0V_AA26ExpressibleAsExprBuildable_ptcfc","s18SwiftSyntaxBuilder17NonEmptyTokenListV12arrayLiteralAC0aB00fB0Vd_tcfc","s18SwiftSyntaxBuilder17NonEmptyTokenListVyACSay0aB00fB0VGcfc","s18SwiftSyntaxBuilder17ObjCSelectorPieceV4name5colonAC0aB005TokenB0VSg_AItcfc","s18SwiftSyntaxBuilder17ObjCSelectorPieceV4name5colonACSSSg_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder17ObjectLiteralExprV10identifier9leftParen05rightI009argumentsC0AC0aB005TokenB0V_A2jA018ExpressibleAsTupleF11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder17ObjectLiteralExprV10identifier9leftParen9arguments05rightI0AC0aB005TokenB0V_AjA018ExpressibleAsTupleF11ElementList_pAJtcfc","s18SwiftSyntaxBuilder17PoundFilePathExprV05poundeF0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder17PoundFunctionExprV05poundE0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder17QualifiedDeclNameV8baseType3dot4name9argumentsAcA013ExpressibleAsH9Buildable_pSg_0aB005TokenB0VSgAlA0lmeF9Arguments_pSgtcfc","s18SwiftSyntaxBuilder17StringLiteralExprV13openDelimiter0G5Quote05closeI00jH008segmentsC0ACSSSg_0aB005TokenB0VAliA013ExpressibleAsdE8Segments_pyXEtcfc","s18SwiftSyntaxBuilder17StringLiteralExprV13openDelimiter0G5Quote8segments05closeI00kH0AC0aB005TokenB0VSg_AkA013ExpressibleAsdE8Segments_pAkLtcfc","s18SwiftSyntaxBuilder17StringLiteralExprV_9openQuote05closeH0ACSS_0aB005TokenB0VAHtcfc","s18SwiftSyntaxBuilder18AssociatedtypeDeclV10attributes9modifiers21associatedtypeKeyword10identifier17inheritanceClause11initializer012genericWhereL0AcA26ExpressibleAsAttributeList_pSg_AA0pq8ModifierS0_pSg0aB005TokenB0VAqA0pq15TypeInheritanceL0_pSgAA0pqv11InitializerL0_pSgAA0pq7GenericoL0_pSgtcfc","s18SwiftSyntaxBuilder18AssociatedtypeDeclV21associatedtypeKeyword10identifier17inheritanceClause11initializer012genericWhereJ0010attributesC009modifiersC0AC0aB005TokenB0V_SSAA028ExpressibleAsTypeInheritanceJ0_pSgAA0qrs11InitializerJ0_pSgAA0qr7GenericmJ0_pSgAA0qR13AttributeList_pSgyXEAA0qr8ModifierX0_pSgyXEtcfc","s18SwiftSyntaxBuilder18BinaryOperatorExprV13operatorTokenAC0aB00hB0V_tcfc","s18SwiftSyntaxBuilder18BinaryOperatorExprVyACSScfc","s18SwiftSyntaxBuilder18BooleanLiteralExprV07booleanE0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder18BooleanLiteralExprV07booleanE0ACSb_tcfc","s18SwiftSyntaxBuilder18BooleanLiteralExprVyACSbcfc","s18SwiftSyntaxBuilder18ClosureCaptureItemV4name11assignToken10expression13trailingComma09specifierC0ACSSSg_0aB00iB0VSgAA26ExpressibleAsExprBuildable_pAmA0noI4List_pSgyXEtcfc","s18SwiftSyntaxBuilder18ClosureCaptureItemV9specifier4name11assignToken10expression13trailingCommaAcA013ExpressibleAsJ4List_pSg_0aB00jB0VSgAnA0nO13ExprBuildable_pANtcfc","s18SwiftSyntaxBuilder18ElseIfContinuationV11ifStatementAcA013ExpressibleAsE4Stmt_p_tcfc","s18SwiftSyntaxBuilder18GenericRequirementV4body13trailingCommaAcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder18GenericWhereClauseV12whereKeyword015requirementListC0AC0aB005TokenB0V_AA013ExpressibleAsd11RequirementJ0_pyXEtcfc","s18SwiftSyntaxBuilder18GenericWhereClauseV12whereKeyword15requirementListAC0aB005TokenB0V_AA013ExpressibleAsd11RequirementJ0_ptcfc","s18SwiftSyntaxBuilder18IfConfigClauseListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder18IfConfigClauseListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder18IntegerLiteralExprV07integerE0ACSi_tcfc","s18SwiftSyntaxBuilder18IntegerLiteralExprV6digitsAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder18IntegerLiteralExprV6digitsACSS_tcfc","s18SwiftSyntaxBuilder18IntegerLiteralExprVyACSicfc","s18SwiftSyntaxBuilder18MemberDeclListItemV4decl9semicolonAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder18PatternBindingListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder18PatternBindingListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder18PoundDsohandleExprV05poundE0AC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder18PrefixOperatorExprV13operatorToken17postfixExpressionAC0aB00hB0VSg_AA013ExpressibleAsF9Buildable_ptcfc","s18SwiftSyntaxBuilder18PrefixOperatorExprV13operatorToken17postfixExpressionACSSSg_AA013ExpressibleAsF9Buildable_ptcfc","s18SwiftSyntaxBuilder18SwitchDefaultLabelV14defaultKeyword5colonAC0aB005TokenB0V_AHtcfc","s18SwiftSyntaxBuilder19AccessLevelModifierV4name9leftParen8modifier05rightI0AC0aB005TokenB0V_AJSgA2Ktcfc","s18SwiftSyntaxBuilder19AccessLevelModifierV4name9leftParen8modifier05rightI0ACSS_0aB005TokenB0VSgSSSgAKtcfc","s18SwiftSyntaxBuilder19AccessPathComponentV4name11trailingDotAC0aB005TokenB0V_AHSgtcfc","s18SwiftSyntaxBuilder19AccessPathComponentV4name11trailingDotACSS_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder19EnumCaseElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder19EnumCaseElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder19GenericArgumentListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder19GenericArgumentListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder19PostfixIfConfigExprV4base6configAcA013ExpressibleAsG9Buildable_pSg_AA0jkeF4Decl_ptcfc","s18SwiftSyntaxBuilder19PoundSourceLocationV05poundeF09leftParen4args05rightI0AC0aB005TokenB0V_AjA013ExpressibleAsdeF4Args_pSgAJtcfc","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV10attributes9modifiers22precedencegroupKeyword10identifier9leftBrace15groupAttributes05rightM0AcA26ExpressibleAsAttributeList_pSg_AA0qr8ModifierT0_pSg0aB005TokenB0VA2qA0qrdesT0_pAQtcfc","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV22precedencegroupKeyword10identifier9leftBrace05rightK0010attributesC009modifiersC0015groupAttributesC0AC0aB005TokenB0V_SSA2mA26ExpressibleAsAttributeList_pSgyXEAA0rs8ModifierU0_pSgyXEAA0rsdetU0_pyXEtcfc","s18SwiftSyntaxBuilder19SameTypeRequirementV04leftE10Identifier13equalityToken05righteH0AcA013ExpressibleAsE9Buildable_p_0aB00jB0VAaG_ptcfc","s18SwiftSyntaxBuilder19TargetFunctionEntryV5label5colon8delcname13trailingCommaAC0aB005TokenB0V_AjA21ExpressibleAsDeclName_pAJSgtcfc","s18SwiftSyntaxBuilder19TargetFunctionEntryV5label5colon8delcname13trailingCommaACSS_0aB005TokenB0VAA21ExpressibleAsDeclName_pAJSgtcfc","s18SwiftSyntaxBuilder19TuplePatternElementV9labelName0G5Colon7pattern13trailingCommaAC0aB005TokenB0VSg_AkA013ExpressibleAsE9Buildable_pAKtcfc","s18SwiftSyntaxBuilder19TuplePatternElementV9labelName0G5Colon7pattern13trailingCommaACSSSg_0aB005TokenB0VSgAA013ExpressibleAsE9Buildable_pALtcfc","s18SwiftSyntaxBuilder19ValueBindingPatternV15letOrVarKeyword05valueF0AC0aB005TokenB0V_AA013ExpressibleAsF9Buildable_ptcfc","s18SwiftSyntaxBuilder20AvailabilityArgumentV5entry13trailingCommaAcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder20AvailabilitySpecListV12arrayLiteralAcA013ExpressibleAsD8Argument_pd_tcfc","s18SwiftSyntaxBuilder20AvailabilitySpecListVyACSayAA013ExpressibleAsD8Argument_pGcfc","s18SwiftSyntaxBuilder20ClassRestrictionTypeV12classKeywordAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder20ConditionElementListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder20ConditionElementListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder20DeclNameArgumentListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder20DeclNameArgumentListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder20GenericParameterListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder20GenericParameterListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder20MemberTypeIdentifierV04baseE06period4name21genericArgumentClauseAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VAkA0mn7GenerickL0_pSgtcfc","s18SwiftSyntaxBuilder20OptionalChainingExprV10expression12questionMarkAcA013ExpressibleAsF9Buildable_p_0aB005TokenB0Vtcfc","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV4name21genericArgumentClauseAC0aB005TokenB0V_AA020ExpressibleAsGenericiJ0_pSgtcfc","s18SwiftSyntaxBuilder20SimpleTypeIdentifierVyACSScfc","s18SwiftSyntaxBuilder20TupleExprElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder20TupleExprElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder20TupleTypeElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder20TupleTypeElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder21AvailabilityConditionV21poundAvailableKeyword9leftParen05rightJ0016availabilitySpecC0AC0aB005TokenB0V_A2jA013ExpressibleAsdM4List_pyXEtcfc","s18SwiftSyntaxBuilder21AvailabilityConditionV21poundAvailableKeyword9leftParen16availabilitySpec05rightJ0AC0aB005TokenB0V_AjA013ExpressibleAsdL4List_pAJtcfc","s18SwiftSyntaxBuilder21DictionaryElementListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder21DictionaryElementListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder21DiscardAssignmentExprV8wildcardAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder21EditorPlaceholderExprV10identifierAC0aB005TokenB0V_tcfc","s18SwiftSyntaxBuilder21EditorPlaceholderExprV10identifierACSS_tcfc","s18SwiftSyntaxBuilder21FunctionParameterListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder21FunctionParameterListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder21GenericArgumentClauseV16leftAngleBracket05righthI009argumentsC0AC0aB005TokenB0V_AiA013ExpressibleAsdE4List_pyXEtcfc","s18SwiftSyntaxBuilder21GenericArgumentClauseV16leftAngleBracket9arguments05righthI0AC0aB005TokenB0V_AA013ExpressibleAsdE4List_pAItcfc","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV10attributes4name5colon09inheritedF011initializer13trailingCommaAcA26ExpressibleAsAttributeList_pSg_0aB005TokenB0VANSgAA0noF9Buildable_pSgAA0noF17InitializerClause_pSgAOtcfc","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV4name5colon09inheritedF011initializer13trailingComma010attributesC0ACSS_0aB005TokenB0VSgAA013ExpressibleAsF9Buildable_pSgAA0opF17InitializerClause_pSgAmA0oP13AttributeList_pSgyXEtcfc","s18SwiftSyntaxBuilder21StringLiteralSegmentsV05arrayE0AcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder21StringLiteralSegmentsVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder21SymbolicReferenceExprV10identifier21genericArgumentClauseAC0aB005TokenB0V_AA020ExpressibleAsGenericiJ0_pSgtcfc","s18SwiftSyntaxBuilder21SymbolicReferenceExprV10identifier21genericArgumentClauseACSS_AA020ExpressibleAsGenericiJ0_pSgtcfc","s18SwiftSyntaxBuilder21TypeInheritanceClauseV5colon09inheritedD10CollectionAC0aB005TokenB0V_AA022ExpressibleAsInheritedD4List_ptcfc","s18SwiftSyntaxBuilder21TypeInheritanceClauseV5colon09inheritedd10CollectionC0AC0aB005TokenB0V_AA022ExpressibleAsInheritedD4List_pyXEtcfc","s18SwiftSyntaxBuilder21TypeInitializerClauseV5equal5valueAC0aB005TokenB0V_AA013ExpressibleAsD9Buildable_ptcfc","s18SwiftSyntaxBuilder21UnresolvedPatternExprV7patternAcA013ExpressibleAsE9Buildable_p_tcfc","s18SwiftSyntaxBuilder22ClosureCaptureItemListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder22ClosureCaptureItemListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder22CompositionTypeElementV4type9ampersandAcA013ExpressibleAsE9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder22ConformanceRequirementV18leftTypeIdentifier5colon05rightgH0AcA013ExpressibleAsG9Buildable_p_0aB005TokenB0VAaG_ptcfc","s18SwiftSyntaxBuilder22DifferentiabilityParamV9parameter13trailingCommaAcA013ExpressibleAsB9Buildable_p_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder22GenericParameterClauseV16leftAngleBracket05righthI007generice4ListC0AC0aB005TokenB0V_AiA013ExpressibleAsdeL0_pyXEtcfc","s18SwiftSyntaxBuilder22GenericParameterClauseV16leftAngleBracket07genericE4List05righthI0AC0aB005TokenB0V_AA013ExpressibleAsdeK0_pAItcfc","s18SwiftSyntaxBuilder22GenericRequirementListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder22GenericRequirementListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV5label5colon5value13trailingCommaAC0aB005TokenB0V_A3JSgtcfc","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV5label5colon5value13trailingCommaACSS_0aB005TokenB0VA2JSgtcfc","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV10leftSquare05rightH005itemsC0AC0aB005TokenB0V_AiA013ExpressibleAsdE8ItemList_pSgyXEtcfc","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV10leftSquare5items05rightH0AC0aB005TokenB0V_AA013ExpressibleAsdE8ItemList_pSgAItcfc","s18SwiftSyntaxBuilder23DifferentiabilityParamsV9leftParen04diffE005rightG0AC0aB005TokenB0V_AA013ExpressibleAsD9ParamList_pAItcfc","s18SwiftSyntaxBuilder23DifferentiabilityParamsV9leftParen05rightG004diffeC0AC0aB005TokenB0V_AiA013ExpressibleAsD9ParamList_pyXEtcfc","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV12fileArgLabel0hI5Colon0H4Name5comma04lineiJ00niK00N6NumberAC0aB005TokenB0V_A6Mtcfc","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV12fileArgLabel0hI5Colon0H4Name5comma04lineiJ00niK00N6NumberACSS_0aB005TokenB0VSSAMSSAMSStcfc","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV12arrayLiteralAcA013ExpressibleAsdeF7Element_pd_tcfc","s18SwiftSyntaxBuilder23PrecedenceGroupNameListVyACSayAA013ExpressibleAsdeF7Element_pGcfc","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV017higherThanOrLowerH05colon010otherNamesC0ACSS_0aB005TokenB0VAA013ExpressibleAsdE8NameList_pyXEtcfc","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV017higherThanOrLowerH05colon10otherNamesAC0aB005TokenB0V_AiA013ExpressibleAsdE8NameList_ptcfc","s18SwiftSyntaxBuilder23TuplePatternElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder23TuplePatternElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder23UnavailabilityConditionV23poundUnavailableKeyword9leftParen05rightJ0016availabilitySpecC0AC0aB005TokenB0V_A2jA025ExpressibleAsAvailabilityM4List_pyXEtcfc","s18SwiftSyntaxBuilder23UnavailabilityConditionV23poundUnavailableKeyword9leftParen16availabilitySpec05rightJ0AC0aB005TokenB0V_AjA025ExpressibleAsAvailabilityL4List_pAJtcfc","s18SwiftSyntaxBuilder24MatchingPatternConditionV11caseKeyword7pattern14typeAnnotation11initializerAC0aB005TokenB0V_AA013ExpressibleAsE9Buildable_pAA0no4TypeK0_pSgAA0nO17InitializerClause_ptcfc","s18SwiftSyntaxBuilder24OptionalBindingConditionV15letOrVarKeyword7pattern14typeAnnotation11initializerAC0aB005TokenB0V_AA29ExpressibleAsPatternBuildable_pAA0pq4TypeM0_pSgAA0pQ17InitializerClause_ptcfc","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV17assignmentKeyword5colon4flagAC0aB005TokenB0V_A2Itcfc","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV17assignmentKeyword5colon4flagACSS_0aB005TokenB0VAItcfc","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder26CompositionTypeElementListV12arrayLiteralAcA013ExpressibleAsdeF0_pd_tcfc","s18SwiftSyntaxBuilder26CompositionTypeElementListVyACSayAA013ExpressibleAsdeF0_pGcfc","s18SwiftSyntaxBuilder26DifferentiabilityParamListV12arrayLiteralAcA013ExpressibleAsdE0_pd_tcfc","s18SwiftSyntaxBuilder26DifferentiabilityParamListVyACSayAA013ExpressibleAsdE0_pGcfc","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV5colon015precedenceGroupf10DesignatedG0AC0aB005TokenB0V_AA27ExpressibleAsIdentifierList_ptcfc","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV5colon015precedenceGroupf10DesignatedgC0AC0aB005TokenB0V_AA27ExpressibleAsIdentifierList_pyXEtcfc","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV4name13trailingCommaAC0aB005TokenB0V_AHSgtcfc","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV4name13trailingCommaACSS_0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV5label5colon5valueAC0aB005TokenB0V_AiA013ExpressibleAsB9Buildable_ptcfc","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV5label5colon5valueACSS_0aB005TokenB0VAA013ExpressibleAsB9Buildable_ptcfc","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV12arrayLiteralAcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV4type5comma12declBaseName0ikF0AcA33ExpressibleAsSimpleTypeIdentifier_p_0aB005TokenB0VAA0lmB9Buildable_pAA0lm4DeclkF0_pSgtcfc","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV7nameTok5colon16stringOrDeclnameAC0aB005TokenB0V_AiA013ExpressibleAsB9Buildable_ptcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV20associativityKeyword5colon5valueAC0aB005TokenB0V_A2Itcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV20associativityKeyword5colon5valueACSS_0aB005TokenB0VSStcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV12arrayLiteralAcA013ExpressibleAsB9Buildable_pd_tcfc","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListVyACSayAA013ExpressibleAsB9Buildable_pGcfc","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV8wrtLabel5colon10parametersAC0aB005TokenB0V_AiA013ExpressibleAsB9Buildable_ptcfc","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV8wrtLabel5colon10parametersACSS_0aB005TokenB0VAA013ExpressibleAsB9Buildable_ptcfc","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV8platform7versionAC0aB005TokenB0V_AA013ExpressibleAsE5Tuple_pSgtcfc","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV8platform7versionACSS_AA013ExpressibleAsE5Tuple_pSgtcfc","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV5label5colon7closureAC0aB005TokenB0V_AiA013ExpressibleAsF4Expr_ptcfc","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV07wrappedG015exclamationMarkAcA013ExpressibleAsG9Buildable_p_0aB005TokenB0Vtcfc","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV8diffKind0gH5Comma0G6Params0gjI011whereClauseAC0aB005TokenB0VSg_AlA030ExpressibleAsDifferentiabilityjL0_pSgAlA0no12GenericWhereL0_pSgtcfc","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV8diffKind0gH5Comma0G6Params0gjI011whereClauseACSSSg_0aB005TokenB0VSgAA030ExpressibleAsDifferentiabilityjL0_pSgAmA0no12GenericWhereL0_pSgtcfc","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV12arrayLiteralAcA013ExpressibleAsdefG0_pd_tcfc","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListVyACSayAA013ExpressibleAsdefG0_pGcfc","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV7ofLabel5colon16originalDeclName6period12accessorKind5comma10diffParamsAC0aB005TokenB0V_AmA022ExpressibleAsQualifiedlM0_pAMSgA2oA0uv17DifferentiabilityS6Clause_pSgtcfc","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV7ofLabel5colon16originalDeclName6period12accessorKind5comma10diffParamsACSS_0aB005TokenB0VAA022ExpressibleAsQualifiedlM0_pAMSgSSSgAoA0uv17DifferentiabilityS6Clause_pSgtcfc","s18SwiftSyntaxBuilder6AsExprV5asTok25questionOrExclamationMark8typeNameAC0aB005TokenB0V_AISgAA011ExpressibleD13TypeBuildable_ptcfc","s18SwiftSyntaxBuilder6DoStmtV9labelName0F5Colon9doKeyword4body012catchClausesC0ACSSSg_0aB005TokenB0VSgAlA22ExpressibleAsCodeBlock_pAA0oP15CatchClauseList_pSgyXEtcfc","s18SwiftSyntaxBuilder6DoStmtV9labelName0F5Colon9doKeyword4body12catchClausesAC0aB005TokenB0VSg_AlkA22ExpressibleAsCodeBlock_pAA0oP15CatchClauseList_pSgtcfc","s18SwiftSyntaxBuilder6FormatV11indentWidthACSi_tcfc","s18SwiftSyntaxBuilder6IfStmtV9labelName0F5Colon9ifKeyword10conditions4body04elseJ00M4BodyAC0aB005TokenB0VSg_AnmA33ExpressibleAsConditionElementList_pAA0pQ9CodeBlock_pAnA0pqB9Buildable_pSgtcfc","s18SwiftSyntaxBuilder6IfStmtV9labelName0F5Colon9ifKeyword4body04elseJ00L4Body010conditionsC0ACSSSg_0aB005TokenB0VSgAnA22ExpressibleAsCodeBlock_pAoA0pqB9Buildable_pSgAA0pQ20ConditionElementList_pyXEtcfc","s18SwiftSyntaxBuilder6IsExprV5isTok8typeNameAC0aB005TokenB0V_AA26ExpressibleAsTypeBuildable_ptcfc","s18SwiftSyntaxBuilder7TryExprV10tryKeyword25questionOrExclamationMark10expressionAC0aB005TokenB0V_AISgAA013ExpressibleAsE9Buildable_ptcfc","s18SwiftSyntaxBuilder8CaseItemV7pattern11whereClause13trailingCommaAcA29ExpressibleAsPatternBuildable_p_AA0kl5WhereH0_pSg0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder8DeclNameV08declBaseE00fE9ArgumentsAcA013ExpressibleAsB9Buildable_p_AA0ijdeH0_pSgtcfc","s18SwiftSyntaxBuilder8EnumDeclV10attributes9modifiers11enumKeyword10identifier17genericParameters17inheritanceClause0k5WhereN07membersAcA26ExpressibleAsAttributeList_pSg_AA0qr8ModifierT0_pSg0aB005TokenB0VArA0qr16GenericParameterN0_pSgAA0qr15TypeInheritanceN0_pSgAA0qrwoN0_pSgAA0qr6MemberE5Block_ptcfc","s18SwiftSyntaxBuilder8EnumDeclV11enumKeyword10identifier17genericParameters17inheritanceClause0i5WhereL0010attributesC009modifiersC007membersC0AC0aB005TokenB0V_SSAA029ExpressibleAsGenericParameterL0_pSgAA0rs15TypeInheritanceL0_pSgAA0rstmL0_pSgAA0rS13AttributeList_pSgyXEAA0rs8ModifierY0_pSgyXEAA0rs6MembereY0_pyXEtcfc","s18SwiftSyntaxBuilder8EnumDeclV11enumKeyword10identifier17genericParameters17inheritanceClause0i5WhereL07members010attributesC009modifiersC0AC0aB005TokenB0V_SSAA029ExpressibleAsGenericParameterL0_pSgAA0rs15TypeInheritanceL0_pSgAA0rstmL0_pSgAA0rs6MemberE5Block_pAA0rS13AttributeList_pSgyXEAA0rS12ModifierList_pSgyXEtcfc","s18SwiftSyntaxBuilder8ExprListV12arrayLiteralAcA013ExpressibleAsD9Buildable_pd_tcfc","s18SwiftSyntaxBuilder8ExprListVyACSayAA013ExpressibleAsD9Buildable_pGcfc","s18SwiftSyntaxBuilder8ObjcNameV12arrayLiteralAcA013ExpressibleAsdE5Piece_pd_tcfc","s18SwiftSyntaxBuilder8ObjcNameVyACSayAA013ExpressibleAsdE5Piece_pGcfc","s18SwiftSyntaxBuilder8SomeTypeV13someSpecifier04baseE0AC0aB005TokenB0V_AA013ExpressibleAsE9Buildable_ptcfc","s18SwiftSyntaxBuilder8SomeTypeV13someSpecifier04baseE0ACSS_AA013ExpressibleAsE9Buildable_ptcfc","s18SwiftSyntaxBuilder8TypeExprV4typeAcA013ExpressibleAsD9Buildable_p_tcfc","s18SwiftSyntaxBuilder9ArrayExprV10leftSquare05rightG008elementsC0AC0aB005TokenB0V_AiA013ExpressibleAsD11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder9ArrayExprV10leftSquare8elements05rightG0AC0aB005TokenB0V_AA013ExpressibleAsD11ElementList_pAItcfc","s18SwiftSyntaxBuilder9ArrayTypeV17leftSquareBracket07elementE005rightgH0AC0aB005TokenB0V_AA013ExpressibleAsE9Buildable_pAItcfc","s18SwiftSyntaxBuilder9ArrowExprV12asyncKeyword11throwsToken05arrowI0AC0aB00iB0VSg_AjItcfc","s18SwiftSyntaxBuilder9ArrowExprV12asyncKeyword11throwsToken05arrowI0ACSSSg_0aB00iB0VSgAJtcfc","s18SwiftSyntaxBuilder9AttributeV11atSignToken13attributeName9leftParen8argument05rightK009tokenListC0AC0aB00gB0V_A2LSgAA013ExpressibleAsB9Buildable_pSgAmA0pqgO0_pSgyXEtcfc","s18SwiftSyntaxBuilder9AttributeV11atSignToken13attributeName9leftParen8argument05rightK09tokenListAC0aB00gB0V_A2LSgAA013ExpressibleAsB9Buildable_pSgAmA0pqgO0_pSgtcfc","s18SwiftSyntaxBuilder9AwaitExprV12awaitKeyword10expressionAC0aB005TokenB0V_AA013ExpressibleAsE9Buildable_ptcfc","s18SwiftSyntaxBuilder9AwaitExprV12awaitKeyword10expressionACSS_AA013ExpressibleAsE9Buildable_ptcfc","s18SwiftSyntaxBuilder9BreakStmtV12breakKeyword5labelAC0aB005TokenB0V_AHSgtcfc","s18SwiftSyntaxBuilder9BreakStmtV12breakKeyword5labelAC0aB005TokenB0V_SSSgtcfc","s18SwiftSyntaxBuilder9CatchItemV7pattern11whereClause13trailingCommaAcA29ExpressibleAsPatternBuildable_pSg_AA0kl5WhereH0_pSg0aB005TokenB0VSgtcfc","s18SwiftSyntaxBuilder9ClassDeclV10attributes9modifiers19classOrActorKeyword10identifier22genericParameterClause011inheritanceO00m5WhereO07membersAcA26ExpressibleAsAttributeList_pSg_AA0st8ModifierV0_pSg0aB005TokenB0VArA0st7GenericnO0_pSgAA0st15TypeInheritanceO0_pSgAA0styqO0_pSgAA0st6MemberE5Block_ptcfc","s18SwiftSyntaxBuilder9ClassDeclV19classOrActorKeyword10identifier22genericParameterClause011inheritanceM00k5WhereM0010attributesC009modifiersC007membersC0AC0aB005TokenB0V_SSAA020ExpressibleAsGenericlM0_pSgAA0tu15TypeInheritanceM0_pSgAA0tuvoM0_pSgAA0tU13AttributeList_pSgyXEAA0tu8ModifierZ0_pSgyXEAA0tu6MembereZ0_pyXEtcfc","s18SwiftSyntaxBuilder9ClassDeclV19classOrActorKeyword10identifier22genericParameterClause011inheritanceM00k5WhereM07members010attributesC009modifiersC0AC0aB005TokenB0V_SSAA020ExpressibleAsGenericlM0_pSgAA0tu15TypeInheritanceM0_pSgAA0tuvoM0_pSgAA0tu6MemberE5Block_pAA0tU13AttributeList_pSgyXEAA0tU12ModifierList_pSgyXEtcfc","s18SwiftSyntaxBuilder9CodeBlockV9leftBrace05rightG0010statementsC0AC0aB005TokenB0V_AiA013ExpressibleAsdE8ItemList_pyXEtcfc","s18SwiftSyntaxBuilder9CodeBlockV9leftBrace10statements05rightG0AC0aB005TokenB0V_AA013ExpressibleAsdE8ItemList_pAItcfc","s18SwiftSyntaxBuilder9DeferStmtV12deferKeyword4bodyAC0aB005TokenB0V_AA22ExpressibleAsCodeBlock_ptcfc","s18SwiftSyntaxBuilder9ElseBlockV11elseKeyword4bodyAC0aB005TokenB0V_AA017ExpressibleAsCodeE0_ptcfc","s18SwiftSyntaxBuilder9ForInStmtV9labelName0G5Colon10forKeyword03tryK005awaitK004caseK07pattern14typeAnnotation02inK012sequenceExpr11whereClause4bodyAC0aB005TokenB0VSg_Asr3sA29ExpressibleAsPatternBuildable_pAA0yz4TypeQ0_pSgArA0yzT9Buildable_pAA0yz5WhereV0_pSgAA0yZ9CodeBlock_ptcfc","s18SwiftSyntaxBuilder9ForInStmtV9labelName0G5Colon10forKeyword03tryK005awaitK004caseK07pattern14typeAnnotation02inK012sequenceExpr11whereClause4bodyACSSSg_0aB005TokenB0VSgAstptA29ExpressibleAsPatternBuildable_pAA0yz4TypeQ0_pSgAsA0yzT9Buildable_pAA0yz5WhereV0_pSgAA0yZ9CodeBlock_ptcfc","s18SwiftSyntaxBuilder9GuardStmtV12guardKeyword04elseG04body010conditionsC0AC0aB005TokenB0V_AjA22ExpressibleAsCodeBlock_pAA0lM20ConditionElementList_pyXEtcfc","s18SwiftSyntaxBuilder9GuardStmtV12guardKeyword10conditions04elseG04bodyAC0aB005TokenB0V_AA33ExpressibleAsConditionElementList_pAjA0lM9CodeBlock_ptcfc","s18SwiftSyntaxBuilder9InOutExprV9ampersand10expressionAC0aB005TokenB0V_AA013ExpressibleAsF9Buildable_ptcfc","s18SwiftSyntaxBuilder9ThrowStmtV12throwKeyword10expressionAC0aB005TokenB0V_AA26ExpressibleAsExprBuildable_ptcfc","s18SwiftSyntaxBuilder9TokenListV12arrayLiteralAC0aB00dB0Vd_tcfc","s18SwiftSyntaxBuilder9TokenListVyACSay0aB00dB0VGcfc","s18SwiftSyntaxBuilder9TupleExprV9leftParen05rightG0011elementListC0AC0aB005TokenB0V_AiA013ExpressibleAsde7ElementJ0_pyXEtcfc","s18SwiftSyntaxBuilder9TupleExprV9leftParen11elementList05rightG0AC0aB005TokenB0V_AA013ExpressibleAsde7ElementI0_pAItcfc","s18SwiftSyntaxBuilder9TupleTypeV9leftParen05rightG008elementsC0AC0aB005TokenB0V_AiA013ExpressibleAsdE11ElementList_pyXEtcfc","s18SwiftSyntaxBuilder9TupleTypeV9leftParen8elements05rightG0AC0aB005TokenB0V_AA013ExpressibleAsdE11ElementList_pAItcfc","s18SwiftSyntaxBuilder9WhileStmtV9labelName0F5Colon12whileKeyword10conditions4bodyAC0aB005TokenB0VSg_AlkA33ExpressibleAsConditionElementList_pAA0nO9CodeBlock_ptcfc","s18SwiftSyntaxBuilder9WhileStmtV9labelName0F5Colon12whileKeyword4body010conditionsC0ACSSSg_0aB005TokenB0VSgAlA22ExpressibleAsCodeBlock_pAA0nO20ConditionElementList_pyXEtcfc","s18SwiftSyntaxBuilder9YieldListV9leftParen07elementE013trailingComma05rightG0AC0aB005TokenB0V_AA017ExpressibleAsExprE0_pAJSgAJtcfc","s18SwiftSyntaxBuilder9YieldListV9leftParen13trailingComma05rightG007elementeC0AC0aB005TokenB0V_AJSgAjA017ExpressibleAsExprE0_pyXEtcfc","s18SwiftSyntaxBuilder9YieldStmtV12yieldKeyword6yieldsAC0aB005TokenB0V_AA013ExpressibleAsB9Buildable_ptcfc","s18SwiftSyntaxBuilder6FormatV11indentWidthSivp","s18SwiftSyntaxBuilder010AccessPathC0V10buildArrayySayAA013ExpressibleAsdE9Component_pGSayAFGFZ","s18SwiftSyntaxBuilder010AccessPathC0V10buildBlockySayAA013ExpressibleAsdE9Component_pGAFd_tFZ","s18SwiftSyntaxBuilder010AccessPathC0V11buildEither5firstSayAA013ExpressibleAsdE9Component_pGAG_tFZ","s18SwiftSyntaxBuilder010AccessPathC0V11buildEither6secondSayAA013ExpressibleAsdE9Component_pGAG_tFZ","s18SwiftSyntaxBuilder010AccessPathC0V13buildOptionalySayAA013ExpressibleAsdE9Component_pGAFSgFZ","s18SwiftSyntaxBuilder010AccessPathC0V15buildExpressionySayAA013ExpressibleAsdE9Component_pGAaE_pFZ","s18SwiftSyntaxBuilder010AccessPathC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsdE9Component_pGFZ","s18SwiftSyntaxBuilder010AccessPathC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE9Component_pGAFFZ","s18SwiftSyntaxBuilder012AccessorListC0V10buildArrayySayAA013ExpressibleAsD4Decl_pGSayAFGFZ","s18SwiftSyntaxBuilder012AccessorListC0V10buildBlockySayAA013ExpressibleAsD4Decl_pGAFd_tFZ","s18SwiftSyntaxBuilder012AccessorListC0V11buildEither5firstSayAA013ExpressibleAsD4Decl_pGAG_tFZ","s18SwiftSyntaxBuilder012AccessorListC0V11buildEither6secondSayAA013ExpressibleAsD4Decl_pGAG_tFZ","s18SwiftSyntaxBuilder012AccessorListC0V13buildOptionalySayAA013ExpressibleAsD4Decl_pGAFSgFZ","s18SwiftSyntaxBuilder012AccessorListC0V15buildExpressionySayAA013ExpressibleAsD4Decl_pGAaE_pFZ","s18SwiftSyntaxBuilder012AccessorListC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsD4Decl_pGFZ","s18SwiftSyntaxBuilder012AccessorListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsD4Decl_pGAFFZ","s18SwiftSyntaxBuilder012CaseItemListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder012CaseItemListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder012CaseItemListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder012CaseItemListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder012CaseItemListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder012CaseItemListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder012CaseItemListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder012CaseItemListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder012ModifierListC0V10buildArrayySayAA017ExpressibleAsDeclD0_pGSayAFGFZ","s18SwiftSyntaxBuilder012ModifierListC0V10buildBlockySayAA017ExpressibleAsDeclD0_pGAFd_tFZ","s18SwiftSyntaxBuilder012ModifierListC0V11buildEither5firstSayAA017ExpressibleAsDeclD0_pGAG_tFZ","s18SwiftSyntaxBuilder012ModifierListC0V11buildEither6secondSayAA017ExpressibleAsDeclD0_pGAG_tFZ","s18SwiftSyntaxBuilder012ModifierListC0V13buildOptionalySayAA017ExpressibleAsDeclD0_pGAFSgFZ","s18SwiftSyntaxBuilder012ModifierListC0V15buildExpressionySayAA017ExpressibleAsDeclD0_pGAaE_pFZ","s18SwiftSyntaxBuilder012ModifierListC0V16buildFinalResultyAA0dE0VSayAA017ExpressibleAsDeclD0_pGFZ","s18SwiftSyntaxBuilder012ModifierListC0V24buildLimitedAvailabilityySayAA017ExpressibleAsDeclD0_pGAFFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V10buildArrayySayAA013ExpressibleAsdE5Piece_pGSayAFGFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V10buildBlockySayAA013ExpressibleAsdE5Piece_pGAFd_tFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V11buildEither5firstSayAA013ExpressibleAsdE5Piece_pGAG_tFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V11buildEither6secondSayAA013ExpressibleAsdE5Piece_pGAG_tFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V13buildOptionalySayAA013ExpressibleAsdE5Piece_pGAFSgFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V15buildExpressionySayAA013ExpressibleAsdE5Piece_pGAaE_pFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsdE5Piece_pGFZ","s18SwiftSyntaxBuilder012ObjCSelectorC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE5Piece_pGAFFZ","s18SwiftSyntaxBuilder013AttributeListC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder013AttributeListC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder013AttributeListC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder013AttributeListC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder013AttributeListC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder013AttributeListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder013AttributeListC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder013AttributeListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder013CatchItemListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder013CatchItemListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder013CatchItemListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder013CatchItemListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder013CatchItemListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder013CatchItemListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder013CatchItemListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder013CatchItemListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder014IdentifierListC0V10buildArrayySay0aB005TokenB0VGSayAHGFZ","s18SwiftSyntaxBuilder014IdentifierListC0V10buildBlockySay0aB005TokenB0VGAHd_tFZ","s18SwiftSyntaxBuilder014IdentifierListC0V11buildEither5firstSay0aB005TokenB0VGAI_tFZ","s18SwiftSyntaxBuilder014IdentifierListC0V11buildEither6secondSay0aB005TokenB0VGAI_tFZ","s18SwiftSyntaxBuilder014IdentifierListC0V13buildOptionalySay0aB005TokenB0VGAHSgFZ","s18SwiftSyntaxBuilder014IdentifierListC0V15buildExpressionySay0aB005TokenB0VGAGFZ","s18SwiftSyntaxBuilder014IdentifierListC0V16buildFinalResultyAA0dE0VSay0aB005TokenB0VGFZ","s18SwiftSyntaxBuilder014IdentifierListC0V24buildLimitedAvailabilityySay0aB005TokenB0VGAHFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V10buildArrayySayAA013ExpressibleAsdeF4Item_pGSayAFGFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V10buildBlockySayAA013ExpressibleAsdeF4Item_pGAFd_tFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V11buildEither5firstSayAA013ExpressibleAsdeF4Item_pGAG_tFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V11buildEither6secondSayAA013ExpressibleAsdeF4Item_pGAG_tFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V13buildOptionalySayAA013ExpressibleAsdeF4Item_pGAFSgFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V15buildExpressionySayAA013ExpressibleAsdeF4Item_pGAaE_pFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdeF4Item_pGFZ","s18SwiftSyntaxBuilder014MemberDeclListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF4Item_pGAFFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder014SwitchCaseListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder015CatchClauseListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V05buildD0ySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder016ArrayElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder016ClosureParamListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V05buildE0ySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder017CodeBlockItemListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder017InheritedTypeListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V10buildArrayySay0aB00fB0VGSayAHGFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V10buildBlockySay0aB00fB0VGAHd_tFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V11buildEither5firstSay0aB00fB0VGAI_tFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V11buildEither6secondSay0aB00fB0VGAI_tFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V13buildOptionalySay0aB00fB0VGAHSgFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V15buildExpressionySay0aB00fB0VGAGFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V16buildFinalResultyAA0defG0VSay0aB00fB0VGFZ","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V24buildLimitedAvailabilityySay0aB00fB0VGAHFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder018IfConfigClauseListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder018PatternBindingListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder019EnumCaseElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder019GenericArgumentListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V012buildLimitedD0ySayAA013ExpressibleAsD8Argument_pGAFFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V10buildArrayySayAA013ExpressibleAsD8Argument_pGSayAFGFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V10buildBlockySayAA013ExpressibleAsD8Argument_pGAFd_tFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V11buildEither5firstSayAA013ExpressibleAsD8Argument_pGAG_tFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V11buildEither6secondSayAA013ExpressibleAsD8Argument_pGAG_tFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V13buildOptionalySayAA013ExpressibleAsD8Argument_pGAFSgFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V15buildExpressionySayAA013ExpressibleAsD8Argument_pGAaE_pFZ","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsD8Argument_pGFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder020ConditionElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder020GenericParameterListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder020TupleExprElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder020TupleTypeElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder021DictionaryElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder021FunctionParameterListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder022GenericRequirementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V10buildArrayySayAA013ExpressibleAsdeF7Element_pGSayAFGFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V10buildBlockySayAA013ExpressibleAsdeF7Element_pGAFd_tFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V11buildEither5firstSayAA013ExpressibleAsdeF7Element_pGAG_tFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V11buildEither6secondSayAA013ExpressibleAsdeF7Element_pGAG_tFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V13buildOptionalySayAA013ExpressibleAsdeF7Element_pGAFSgFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V15buildExpressionySayAA013ExpressibleAsdeF7Element_pGAaE_pFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF7Element_pGFZ","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF7Element_pGAFFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder023TuplePatternElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V10buildArrayySayAA013ExpressibleAsdeF0_pGSayAFGFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V10buildBlockySayAA013ExpressibleAsdeF0_pGAFd_tFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V11buildEither5firstSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V11buildEither6secondSayAA013ExpressibleAsdeF0_pGAG_tFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V13buildOptionalySayAA013ExpressibleAsdeF0_pGAFSgFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V15buildExpressionySayAA013ExpressibleAsdeF0_pGAaE_pFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsdeF0_pGFZ","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdeF0_pGAFFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V10buildArrayySayAA013ExpressibleAsdE0_pGSayAFGFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V10buildBlockySayAA013ExpressibleAsdE0_pGAFd_tFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V11buildEither5firstSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V11buildEither6secondSayAA013ExpressibleAsdE0_pGAG_tFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V13buildOptionalySayAA013ExpressibleAsdE0_pGAFSgFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V15buildExpressionySayAA013ExpressibleAsdE0_pGAaE_pFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V16buildFinalResultyAA0deF0VSayAA013ExpressibleAsdE0_pGFZ","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE0_pGAFFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V10buildArrayySayAA013ExpressibleAsB9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V10buildBlockySayAA013ExpressibleAsB9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V11buildEither5firstSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V11buildEither6secondSayAA013ExpressibleAsB9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V13buildOptionalySayAA013ExpressibleAsB9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V15buildExpressionySayAA013ExpressibleAsB9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V16buildFinalResultyAA0defG0VSayAA013ExpressibleAsB9Buildable_pGFZ","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsB9Buildable_pGAFFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V10buildArrayySayAA013ExpressibleAsdefG0_pGSayAFGFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V10buildBlockySayAA013ExpressibleAsdefG0_pGAFd_tFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V11buildEither5firstSayAA013ExpressibleAsdefG0_pGAG_tFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V11buildEither6secondSayAA013ExpressibleAsdefG0_pGAG_tFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V13buildOptionalySayAA013ExpressibleAsdefG0_pGAFSgFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V15buildExpressionySayAA013ExpressibleAsdefG0_pGAaE_pFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V16buildFinalResultyAA0defgH0VSayAA013ExpressibleAsdefG0_pGFZ","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdefG0_pGAFFZ","s18SwiftSyntaxBuilder08ExprListC0V10buildArrayySayAA013ExpressibleAsD9Buildable_pGSayAFGFZ","s18SwiftSyntaxBuilder08ExprListC0V10buildBlockySayAA013ExpressibleAsD9Buildable_pGAFd_tFZ","s18SwiftSyntaxBuilder08ExprListC0V11buildEither5firstSayAA013ExpressibleAsD9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder08ExprListC0V11buildEither6secondSayAA013ExpressibleAsD9Buildable_pGAG_tFZ","s18SwiftSyntaxBuilder08ExprListC0V13buildOptionalySayAA013ExpressibleAsD9Buildable_pGAFSgFZ","s18SwiftSyntaxBuilder08ExprListC0V15buildExpressionySayAA013ExpressibleAsD9Buildable_pGAaE_pFZ","s18SwiftSyntaxBuilder08ExprListC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsD9Buildable_pGFZ","s18SwiftSyntaxBuilder08ExprListC0V24buildLimitedAvailabilityySayAA013ExpressibleAsD9Buildable_pGAFFZ","s18SwiftSyntaxBuilder08ObjcNameC0V10buildArrayySayAA013ExpressibleAsdE5Piece_pGSayAFGFZ","s18SwiftSyntaxBuilder08ObjcNameC0V10buildBlockySayAA013ExpressibleAsdE5Piece_pGAFd_tFZ","s18SwiftSyntaxBuilder08ObjcNameC0V11buildEither5firstSayAA013ExpressibleAsdE5Piece_pGAG_tFZ","s18SwiftSyntaxBuilder08ObjcNameC0V11buildEither6secondSayAA013ExpressibleAsdE5Piece_pGAG_tFZ","s18SwiftSyntaxBuilder08ObjcNameC0V13buildOptionalySayAA013ExpressibleAsdE5Piece_pGAFSgFZ","s18SwiftSyntaxBuilder08ObjcNameC0V15buildExpressionySayAA013ExpressibleAsdE5Piece_pGAaE_pFZ","s18SwiftSyntaxBuilder08ObjcNameC0V16buildFinalResultyAA0dE0VSayAA013ExpressibleAsdE5Piece_pGFZ","s18SwiftSyntaxBuilder08ObjcNameC0V24buildLimitedAvailabilityySayAA013ExpressibleAsdE5Piece_pGAFFZ","s18SwiftSyntaxBuilder09TokenListC0V10buildArrayySay0aB00dB0VGSayAHGFZ","s18SwiftSyntaxBuilder09TokenListC0V10buildBlockySay0aB00dB0VGAHd_tFZ","s18SwiftSyntaxBuilder09TokenListC0V11buildEither5firstSay0aB00dB0VGAI_tFZ","s18SwiftSyntaxBuilder09TokenListC0V11buildEither6secondSay0aB00dB0VGAI_tFZ","s18SwiftSyntaxBuilder09TokenListC0V13buildOptionalySay0aB00dB0VGAHSgFZ","s18SwiftSyntaxBuilder09TokenListC0V15buildExpressionySay0aB00dB0VGAGFZ","s18SwiftSyntaxBuilder09TokenListC0V16buildFinalResultyAA0dE0VSay0aB00dB0VGFZ","s18SwiftSyntaxBuilder09TokenListC0V24buildLimitedAvailabilityySay0aB00dB0VGAHFZ","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildableP06createbF0AA0bF0_pyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE19createAttributeListAA0hI0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE20createSwitchCaseListAA0hiJ0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE27createStringLiteralSegmentsAA0hiJ0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE33createSpecializeAttributeSpecListAA0hijK0VyF","s18SwiftSyntaxBuilder013ExpressibleAsB9BuildablePAAE34createPrecedenceGroupAttributeListAA0hijK0VyF","s18SwiftSyntaxBuilder013ExpressibleAsE11TypePatternP06createefG0AA0efG0VyF","s18SwiftSyntaxBuilder013ExpressibleAsE11TypePatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder013ExpressibleAsE4ExprP06createeF0AA0eF0VyF","s18SwiftSyntaxBuilder013ExpressibleAsE4ExprPAAE06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder0B13ListBuildableP05buildbD06format13leadingTriviaSay0aB00B0VGAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder0B9BuildableP05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0H0VSgtF","s18SwiftSyntaxBuilder0B9BuildablePAAE05buildB4List6format13leadingTriviaSay0aB00B0VGAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder0B9BuildablePAAE06createbD0AaB_pyF","s18SwiftSyntaxBuilder10AccessPathV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10AccessPathV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10AccessPathV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10AccessPathV06createdE0ACyF","s18SwiftSyntaxBuilder10ImportDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10ImportDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10ImportDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder10ImportDeclV06createdE0ACyF","s18SwiftSyntaxBuilder10ReturnStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10ReturnStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10ReturnStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder10ReturnStmtV06createdE0ACyF","s18SwiftSyntaxBuilder10SourceFileV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10SourceFileV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10SourceFileV06createdE0ACyF","s18SwiftSyntaxBuilder10StructDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10StructDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10StructDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder10StructDeclV06createdE0ACyF","s18SwiftSyntaxBuilder10SwitchCaseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10SwitchCaseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10SwitchCaseV06createdE0ACyF","s18SwiftSyntaxBuilder10SwitchStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder10SwitchStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder10SwitchStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder10SwitchStmtV06createdE0ACyF","s18SwiftSyntaxBuilder11CatchClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder11CatchClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder11CatchClauseV06createdE0ACyF","s18SwiftSyntaxBuilder11ClosureExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder11ClosureExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder11ClosureExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder11ClosureExprV06createdE0ACyF","s18SwiftSyntaxBuilder11KeyPathExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder11KeyPathExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder11KeyPathExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder11KeyPathExprV06createdeF0ACyF","s18SwiftSyntaxBuilder11TernaryExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder11TernaryExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder11TernaryExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder11TernaryExprV06createdE0ACyF","s18SwiftSyntaxBuilder11WhereClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder11WhereClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder11WhereClauseV06createdE0ACyF","s18SwiftSyntaxBuilder12AccessorDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12AccessorDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12AccessorDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12AccessorDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12AccessorListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12AccessorListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12AccessorListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12AccessorListV06createdE0ACyF","s18SwiftSyntaxBuilder12ArrayElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ArrayElementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ArrayElementV06createdE0ACyF","s18SwiftSyntaxBuilder12CaseItemListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12CaseItemListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12CaseItemListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder12CaseItemListV06createdeF0ACyF","s18SwiftSyntaxBuilder12ClosureParamV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ClosureParamV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ClosureParamV06createdE0ACyF","s18SwiftSyntaxBuilder12ContinueStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ContinueStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ContinueStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12ContinueStmtV06createdE0ACyF","s18SwiftSyntaxBuilder12DeclModifierV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12DeclModifierV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12DeclModifierV06createdE0ACyF","s18SwiftSyntaxBuilder12EnumCaseDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12EnumCaseDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder12EnumCaseDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder12EnumCaseDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder12FunctionDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12FunctionDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12FunctionDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12FunctionDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12FunctionTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12FunctionTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12FunctionTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12FunctionTypeV06createdE0ACyF","s18SwiftSyntaxBuilder12IfConfigDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12IfConfigDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder12IfConfigDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder12IfConfigDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder12MetatypeTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12MetatypeTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12MetatypeTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12MetatypeTypeV06createdE0ACyF","s18SwiftSyntaxBuilder12ModifierListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ModifierListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ModifierListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ModifierListV06createdE0ACyF","s18SwiftSyntaxBuilder12ObjCSelectorV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ObjCSelectorV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ObjCSelectorV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ObjCSelectorV06createdE0ACyF","s18SwiftSyntaxBuilder12OperatorDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12OperatorDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12OperatorDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12OperatorDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12OptionalTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12OptionalTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12OptionalTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12OptionalTypeV06createdE0ACyF","s18SwiftSyntaxBuilder12ProtocolDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ProtocolDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ProtocolDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12ProtocolDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12ReturnClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12ReturnClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12ReturnClauseV06createdE0ACyF","s18SwiftSyntaxBuilder12SequenceExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12SequenceExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12SequenceExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12SequenceExprV06createdE0ACyF","s18SwiftSyntaxBuilder12SuperRefExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder12SuperRefExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder12SuperRefExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder12SuperRefExprV06createdeF0ACyF","s18SwiftSyntaxBuilder12TuplePatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12TuplePatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12TuplePatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12TuplePatternV06createdE0ACyF","s18SwiftSyntaxBuilder12VariableDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12VariableDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12VariableDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder12VariableDeclV06createdE0ACyF","s18SwiftSyntaxBuilder12VersionTupleV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder12VersionTupleV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder12VersionTupleV06createdE0ACyF","s18SwiftSyntaxBuilder13AccessorBlockV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13AccessorBlockV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13AccessorBlockV06createdE0ACyF","s18SwiftSyntaxBuilder13AsTypePatternV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13AsTypePatternV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13AsTypePatternV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder13AsTypePatternV06createdeF0ACyF","s18SwiftSyntaxBuilder13AttributeListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13AttributeListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13AttributeListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13AttributeListV06createdE0ACyF","s18SwiftSyntaxBuilder13CatchItemListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13CatchItemListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13CatchItemListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13CatchItemListV06createdeF0ACyF","s18SwiftSyntaxBuilder13CodeBlockItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13CodeBlockItemV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13CodeBlockItemV06createdeF0ACyF","s18SwiftSyntaxBuilder13DeclBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13DeclBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13DeclBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13DeclBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder13ExprBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13ExprBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13ExprBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13ExprBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder13ExtensionDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13ExtensionDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13ExtensionDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder13ExtensionDeclV06createdE0ACyF","s18SwiftSyntaxBuilder13InheritedTypeV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13InheritedTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13InheritedTypeV06createdE0ACyF","s18SwiftSyntaxBuilder13IsTypePatternV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13IsTypePatternV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13IsTypePatternV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder13IsTypePatternV06createdeF0ACyF","s18SwiftSyntaxBuilder13ObjcNamePieceV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13ObjcNamePieceV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13ObjcNamePieceV06createdeF0ACyF","s18SwiftSyntaxBuilder13PoundFileExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13PoundFileExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13PoundFileExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder13PoundFileExprV06createdeF0ACyF","s18SwiftSyntaxBuilder13PoundLineExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13PoundLineExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder13PoundLineExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder13PoundLineExprV06createdeF0ACyF","s18SwiftSyntaxBuilder13StmtBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13StmtBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13StmtBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13StmtBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder13StringSegmentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13StringSegmentV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13StringSegmentV06createdE0ACyF","s18SwiftSyntaxBuilder13SubscriptDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13SubscriptDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13SubscriptDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder13SubscriptDeclV06createdE0ACyF","s18SwiftSyntaxBuilder13SubscriptExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13SubscriptExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13SubscriptExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder13SubscriptExprV06createdE0ACyF","s18SwiftSyntaxBuilder13TypeBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13TypeBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13TypeBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder13TypeBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder13TypealiasDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder13TypealiasDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder13TypealiasDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder13TypealiasDeclV06createdE0ACyF","s18SwiftSyntaxBuilder14AssignmentExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14AssignmentExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14AssignmentExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14AssignmentExprV06createdE0ACyF","s18SwiftSyntaxBuilder14AttributedTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14AttributedTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14AttributedTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14AttributedTypeV06createdE0ACyF","s18SwiftSyntaxBuilder14DictionaryExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14DictionaryExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14DictionaryExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14DictionaryExprV06createdE0ACyF","s18SwiftSyntaxBuilder14DictionaryTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14DictionaryTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14DictionaryTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14DictionaryTypeV06createdE0ACyF","s18SwiftSyntaxBuilder14ExpressionStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14ExpressionStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14ExpressionStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14ExpressionStmtV06createdE0ACyF","s18SwiftSyntaxBuilder14IdentifierExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14IdentifierExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14IdentifierExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14IdentifierExprV06createdE0ACyF","s18SwiftSyntaxBuilder14IdentifierListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14IdentifierListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14IdentifierListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14IdentifierListV06createdE0ACyF","s18SwiftSyntaxBuilder14IfConfigClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14IfConfigClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14IfConfigClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder14MemberDeclListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14MemberDeclListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14MemberDeclListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14MemberDeclListV06createdeF0ACyF","s18SwiftSyntaxBuilder14NilLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14NilLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14NilLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder14NilLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder14PatternBindingV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14PatternBindingV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14PatternBindingV06createdE0ACyF","s18SwiftSyntaxBuilder14PoundErrorDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14PoundErrorDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14PoundErrorDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder14PoundErrorDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder14SpecializeExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14SpecializeExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14SpecializeExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder14SpecializeExprV06createdE0ACyF","s18SwiftSyntaxBuilder14SwitchCaseListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14SwitchCaseListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder14SwitchCaseListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder14SwitchCaseListV06createdeF0ACyF","s18SwiftSyntaxBuilder14TypeAnnotationV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder14TypeAnnotationV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder14TypeAnnotationV06createdE0ACyF","s18SwiftSyntaxBuilder15CatchClauseListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15CatchClauseListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15CatchClauseListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15CatchClauseListV06createdeF0ACyF","s18SwiftSyntaxBuilder15CompositionTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15CompositionTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15CompositionTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15CompositionTypeV06createdE0ACyF","s18SwiftSyntaxBuilder15CustomAttributeV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15CustomAttributeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15CustomAttributeV06createdE0ACyF","s18SwiftSyntaxBuilder15DeclarationStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15DeclarationStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15DeclarationStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15DeclarationStmtV06createdE0ACyF","s18SwiftSyntaxBuilder15EnumCaseElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15EnumCaseElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15EnumCaseElementV06createdeF0ACyF","s18SwiftSyntaxBuilder15EnumCasePatternV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15EnumCasePatternV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15EnumCasePatternV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15EnumCasePatternV06createdeF0ACyF","s18SwiftSyntaxBuilder15FallthroughStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15FallthroughStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15FallthroughStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15FallthroughStmtV06createdE0ACyF","s18SwiftSyntaxBuilder15ForcedValueExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15ForcedValueExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15ForcedValueExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15ForcedValueExprV06createdeF0ACyF","s18SwiftSyntaxBuilder15GenericArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15GenericArgumentV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15GenericArgumentV06createdE0ACyF","s18SwiftSyntaxBuilder15InitializerDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15InitializerDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15InitializerDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15InitializerDeclV06createdE0ACyF","s18SwiftSyntaxBuilder15KeyPathBaseExprV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder15KeyPathBaseExprV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder15KeyPathBaseExprV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder15KeyPathBaseExprV06createdefG0ACyF","s18SwiftSyntaxBuilder15MemberDeclBlockV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15MemberDeclBlockV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15MemberDeclBlockV06createdeF0ACyF","s18SwiftSyntaxBuilder15ObjcKeyPathExprV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder15ObjcKeyPathExprV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder15ObjcKeyPathExprV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder15ObjcKeyPathExprV06createdefG0ACyF","s18SwiftSyntaxBuilder15OptionalPatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15OptionalPatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15OptionalPatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15OptionalPatternV06createdE0ACyF","s18SwiftSyntaxBuilder15ParameterClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15ParameterClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15ParameterClauseV06createdE0ACyF","s18SwiftSyntaxBuilder15PoundAssertStmtV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15PoundAssertStmtV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15PoundAssertStmtV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15PoundAssertStmtV06createdeF0ACyF","s18SwiftSyntaxBuilder15PoundColumnExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15PoundColumnExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15PoundColumnExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15PoundColumnExprV06createdeF0ACyF","s18SwiftSyntaxBuilder15PoundFileIDExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15PoundFileIDExprV06createdeF0ACyF","s18SwiftSyntaxBuilder15PoundFileIDExprV19createExprBuildableAA0hI0_pyF","s18SwiftSyntaxBuilder15PoundFileIDExprV9buildExpr6format13leadingTrivia0aB00hB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder15RepeatWhileStmtV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15RepeatWhileStmtV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15RepeatWhileStmtV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder15RepeatWhileStmtV06createdeF0ACyF","s18SwiftSyntaxBuilder15SwitchCaseLabelV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder15SwitchCaseLabelV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder15SwitchCaseLabelV06createdeF0ACyF","s18SwiftSyntaxBuilder15WildcardPatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder15WildcardPatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder15WildcardPatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder15WildcardPatternV06createdE0ACyF","s18SwiftSyntaxBuilder16ArrayElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ArrayElementListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ArrayElementListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16ArrayElementListV06createdeF0ACyF","s18SwiftSyntaxBuilder16ClosureParamListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ClosureParamListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ClosureParamListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16ClosureParamListV06createdeF0ACyF","s18SwiftSyntaxBuilder16ClosureSignatureV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16ClosureSignatureV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder16ClosureSignatureV06createdE0ACyF","s18SwiftSyntaxBuilder16ConditionElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16ConditionElementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder16ConditionElementV06createdE0ACyF","s18SwiftSyntaxBuilder16DeclNameArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16DeclNameArgumentV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16DeclNameArgumentV06createdeF0ACyF","s18SwiftSyntaxBuilder16FloatLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16FloatLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16FloatLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16FloatLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16FunctionCallExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16FunctionCallExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16FunctionCallExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16FunctionCallExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16FunctionDeclNameV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16FunctionDeclNameV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16FunctionDeclNameV06createdeF0ACyF","s18SwiftSyntaxBuilder16GenericParameterV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16GenericParameterV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder16GenericParameterV06createdE0ACyF","s18SwiftSyntaxBuilder16MemberAccessExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16MemberAccessExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16MemberAccessExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16MemberAccessExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16ObjcSelectorExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16ObjcSelectorExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16ObjcSelectorExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16ObjcSelectorExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16PatternBuildableP05buildD06format13leadingTrivia0aB00dB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16PatternBuildablePAAE05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder16PatternBuildablePAAE05buildD4List6format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16PatternBuildablePAAE06createdE0AaB_pyF","s18SwiftSyntaxBuilder16PostfixUnaryExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16PostfixUnaryExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16PostfixUnaryExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16PostfixUnaryExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16PoundWarningDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16PoundWarningDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16PoundWarningDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16PoundWarningDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder16RegexLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16RegexLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16RegexLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder16RegexLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder16TupleExprElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16TupleExprElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16TupleExprElementV06createdeF0ACyF","s18SwiftSyntaxBuilder16TupleTypeElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder16TupleTypeElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder16TupleTypeElementV06createdeF0ACyF","s18SwiftSyntaxBuilder17AccessorParameterV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17AccessorParameterV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17AccessorParameterV06createdE0ACyF","s18SwiftSyntaxBuilder17AvailabilityEntryV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17AvailabilityEntryV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17AvailabilityEntryV06createdE0ACyF","s18SwiftSyntaxBuilder17CodeBlockItemListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17CodeBlockItemListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17CodeBlockItemListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder17CodeBlockItemListV06createdefG0ACyF","s18SwiftSyntaxBuilder17DeclListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17DeclNameArgumentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17DeclNameArgumentsV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17DeclNameArgumentsV06createdeF0ACyF","s18SwiftSyntaxBuilder17DeinitializerDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17DeinitializerDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17DeinitializerDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder17DeinitializerDeclV06createdE0ACyF","s18SwiftSyntaxBuilder17DictionaryElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17DictionaryElementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17DictionaryElementV06createdE0ACyF","s18SwiftSyntaxBuilder17ExprListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17ExpressionPatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17ExpressionPatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17ExpressionPatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder17ExpressionPatternV06createdE0ACyF","s18SwiftSyntaxBuilder17ExpressionSegmentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17ExpressionSegmentV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17ExpressionSegmentV06createdE0ACyF","s18SwiftSyntaxBuilder17FunctionParameterV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17FunctionParameterV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17FunctionParameterV06createdE0ACyF","s18SwiftSyntaxBuilder17FunctionSignatureV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17FunctionSignatureV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17FunctionSignatureV06createdE0ACyF","s18SwiftSyntaxBuilder17IdentifierPatternV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17IdentifierPatternV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17IdentifierPatternV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder17IdentifierPatternV06createdE0ACyF","s18SwiftSyntaxBuilder17InheritedTypeListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17InheritedTypeListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17InheritedTypeListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17InheritedTypeListV06createdeF0ACyF","s18SwiftSyntaxBuilder17InitializerClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder17InitializerClauseV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder17InitializerClauseV06createdE0ACyF","s18SwiftSyntaxBuilder17NonEmptyTokenListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17NonEmptyTokenListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17NonEmptyTokenListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder17NonEmptyTokenListV06createdefG0ACyF","s18SwiftSyntaxBuilder17ObjCSelectorPieceV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17ObjCSelectorPieceV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17ObjCSelectorPieceV06createdeF0ACyF","s18SwiftSyntaxBuilder17ObjectLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17ObjectLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17ObjectLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder17ObjectLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder17PoundFilePathExprV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder17PoundFilePathExprV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder17PoundFilePathExprV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder17PoundFilePathExprV06createdefG0ACyF","s18SwiftSyntaxBuilder17PoundFunctionExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17PoundFunctionExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17PoundFunctionExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder17PoundFunctionExprV06createdeF0ACyF","s18SwiftSyntaxBuilder17QualifiedDeclNameV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17QualifiedDeclNameV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17QualifiedDeclNameV06createdeF0ACyF","s18SwiftSyntaxBuilder17StmtListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17StringLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder17StringLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder17StringLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder17StringLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder17TypeListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18AssociatedtypeDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder18AssociatedtypeDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder18AssociatedtypeDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder18AssociatedtypeDeclV06createdE0ACyF","s18SwiftSyntaxBuilder18BinaryOperatorExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18BinaryOperatorExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18BinaryOperatorExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18BinaryOperatorExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18BooleanLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18BooleanLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18BooleanLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18BooleanLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18ClosureCaptureItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18ClosureCaptureItemV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18ClosureCaptureItemV06createdeF0ACyF","s18SwiftSyntaxBuilder18ElseIfContinuationV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18ElseIfContinuationV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18ElseIfContinuationV06createdeF0ACyF","s18SwiftSyntaxBuilder18GenericRequirementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder18GenericRequirementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder18GenericRequirementV06createdE0ACyF","s18SwiftSyntaxBuilder18GenericWhereClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18GenericWhereClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18GenericWhereClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder18IfConfigClauseListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder18IfConfigClauseListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder18IfConfigClauseListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder18IfConfigClauseListV06createdefG0ACyF","s18SwiftSyntaxBuilder18IntegerLiteralExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18IntegerLiteralExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18IntegerLiteralExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18IntegerLiteralExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18MemberDeclListItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder18MemberDeclListItemV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder18MemberDeclListItemV06createdefG0ACyF","s18SwiftSyntaxBuilder18PatternBindingListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18PatternBindingListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18PatternBindingListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18PatternBindingListV06createdeF0ACyF","s18SwiftSyntaxBuilder18PoundDsohandleExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18PoundDsohandleExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18PoundDsohandleExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18PoundDsohandleExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18PrefixOperatorExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18PrefixOperatorExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18PrefixOperatorExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder18PrefixOperatorExprV06createdeF0ACyF","s18SwiftSyntaxBuilder18SwitchDefaultLabelV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder18SwitchDefaultLabelV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder18SwitchDefaultLabelV06createdeF0ACyF","s18SwiftSyntaxBuilder19AccessLevelModifierV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19AccessLevelModifierV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19AccessLevelModifierV06createdeF0ACyF","s18SwiftSyntaxBuilder19AccessPathComponentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19AccessPathComponentV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19AccessPathComponentV06createdeF0ACyF","s18SwiftSyntaxBuilder19EnumCaseElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder19EnumCaseElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder19EnumCaseElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder19EnumCaseElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder19ExpressibleAsDoStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder19ExpressibleAsDoStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder19ExpressibleAsIfStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder19ExpressibleAsIfStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder19ExpressibleAsIsExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder19ExpressibleAsIsExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder19GenericArgumentListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19GenericArgumentListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19GenericArgumentListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19GenericArgumentListV06createdeF0ACyF","s18SwiftSyntaxBuilder19PostfixIfConfigExprV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder19PostfixIfConfigExprV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder19PostfixIfConfigExprV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder19PostfixIfConfigExprV06createdefG0ACyF","s18SwiftSyntaxBuilder19PoundSourceLocationV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19PoundSourceLocationV06createdeF0ACyF","s18SwiftSyntaxBuilder19PoundSourceLocationV19createDeclBuildableAA0hI0_pyF","s18SwiftSyntaxBuilder19PoundSourceLocationV9buildDecl6format13leadingTrivia0aB00hB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder19PrecedenceGroupDeclV06createdeF0ACyF","s18SwiftSyntaxBuilder19SameTypeRequirementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19SameTypeRequirementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19SameTypeRequirementV06createdeF0ACyF","s18SwiftSyntaxBuilder19TargetFunctionEntryV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19TargetFunctionEntryV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19TargetFunctionEntryV06createdeF0ACyF","s18SwiftSyntaxBuilder19TuplePatternElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19TuplePatternElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19TuplePatternElementV06createdeF0ACyF","s18SwiftSyntaxBuilder19ValueBindingPatternV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder19ValueBindingPatternV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder19ValueBindingPatternV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder19ValueBindingPatternV06createdeF0ACyF","s18SwiftSyntaxBuilder20AvailabilityArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder20AvailabilityArgumentV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder20AvailabilityArgumentV06createdE0ACyF","s18SwiftSyntaxBuilder20AvailabilitySpecListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20AvailabilitySpecListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20AvailabilitySpecListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20AvailabilitySpecListV06createdeF0ACyF","s18SwiftSyntaxBuilder20ClassRestrictionTypeV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20ClassRestrictionTypeV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20ClassRestrictionTypeV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder20ClassRestrictionTypeV06createdeF0ACyF","s18SwiftSyntaxBuilder20ConditionElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20ConditionElementListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20ConditionElementListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20ConditionElementListV06createdeF0ACyF","s18SwiftSyntaxBuilder20DeclNameArgumentListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20DeclNameArgumentListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20DeclNameArgumentListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder20DeclNameArgumentListV06createdefG0ACyF","s18SwiftSyntaxBuilder20ExpressibleAsTryExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder20ExpressibleAsTryExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder20GenericParameterListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20GenericParameterListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20GenericParameterListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20GenericParameterListV06createdeF0ACyF","s18SwiftSyntaxBuilder20MemberTypeIdentifierV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20MemberTypeIdentifierV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20MemberTypeIdentifierV06createE9BuildableAA0eH0_pyF","s18SwiftSyntaxBuilder20MemberTypeIdentifierV06createdeF0ACyF","s18SwiftSyntaxBuilder20OptionalChainingExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20OptionalChainingExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20OptionalChainingExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder20OptionalChainingExprV06createdeF0ACyF","s18SwiftSyntaxBuilder20PatternListBuildableP05builddE06format13leadingTriviaSay0aB00dB0VGAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV06createE9BuildableAA0eH0_pyF","s18SwiftSyntaxBuilder20SimpleTypeIdentifierV06createdeF0ACyF","s18SwiftSyntaxBuilder20TupleExprElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20TupleExprElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20TupleExprElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder20TupleExprElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder20TupleTypeElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20TupleTypeElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder20TupleTypeElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder20TupleTypeElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder21AvailabilityConditionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder21AvailabilityConditionV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder21AvailabilityConditionV06createdE0ACyF","s18SwiftSyntaxBuilder21DictionaryElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21DictionaryElementListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21DictionaryElementListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21DictionaryElementListV06createdeF0ACyF","s18SwiftSyntaxBuilder21DiscardAssignmentExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21DiscardAssignmentExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21DiscardAssignmentExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder21DiscardAssignmentExprV06createdeF0ACyF","s18SwiftSyntaxBuilder21EditorPlaceholderExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21EditorPlaceholderExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21EditorPlaceholderExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder21EditorPlaceholderExprV06createdeF0ACyF","s18SwiftSyntaxBuilder21ExpressibleAsCaseItemP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsCaseItemPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder21ExpressibleAsCaseItemPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder21ExpressibleAsDeclNameP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsDeclNamePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder21ExpressibleAsEnumDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsEnumDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder21ExpressibleAsExprListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsExprListPAAE22createConditionElementAA0iJ0VyF","s18SwiftSyntaxBuilder21ExpressibleAsObjcNameP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsSomeTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsSomeTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder21ExpressibleAsTypeExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder21ExpressibleAsTypeExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder21FunctionParameterListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21FunctionParameterListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21FunctionParameterListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21FunctionParameterListV06createdeF0ACyF","s18SwiftSyntaxBuilder21GenericArgumentClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21GenericArgumentClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21GenericArgumentClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21PrimaryAssociatedTypeV06createdeF0ACyF","s18SwiftSyntaxBuilder21StringLiteralSegmentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21StringLiteralSegmentsV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21StringLiteralSegmentsV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21StringLiteralSegmentsV06createdeF0ACyF","s18SwiftSyntaxBuilder21SymbolicReferenceExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21SymbolicReferenceExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21SymbolicReferenceExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder21SymbolicReferenceExprV06createdeF0ACyF","s18SwiftSyntaxBuilder21TypeInheritanceClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21TypeInheritanceClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21TypeInheritanceClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder21TypeInitializerClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21TypeInitializerClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21TypeInitializerClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder21UnresolvedPatternExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder21UnresolvedPatternExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder21UnresolvedPatternExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder21UnresolvedPatternExprV06createdeF0ACyF","s18SwiftSyntaxBuilder22ClosureCaptureItemListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder22ClosureCaptureItemListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder22ClosureCaptureItemListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ClosureCaptureItemListV06createdefG0ACyF","s18SwiftSyntaxBuilder22CompositionTypeElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22CompositionTypeElementV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22CompositionTypeElementV06createdeF0ACyF","s18SwiftSyntaxBuilder22ConformanceRequirementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder22ConformanceRequirementV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder22ConformanceRequirementV06createdE0ACyF","s18SwiftSyntaxBuilder22DifferentiabilityParamV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder22DifferentiabilityParamV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder22DifferentiabilityParamV06createdE0ACyF","s18SwiftSyntaxBuilder22ExpressibleAsArrayExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsArrayExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsArrayTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsArrayTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsArrowExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsArrowExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsAttributeP06createF0AA0F0VyF","s18SwiftSyntaxBuilder22ExpressibleAsAttributePAAE06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsAwaitExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsAwaitExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsBreakStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsBreakStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsCatchItemP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsCatchItemPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsCatchItemPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder22ExpressibleAsClassDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsClassDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsCodeBlockP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsCodeBlockPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsDeferStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsDeferStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsElseBlockP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsElseBlockPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsForInStmtP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder22ExpressibleAsForInStmtPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsGuardStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsGuardStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsInOutExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder22ExpressibleAsInOutExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsThrowStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsThrowStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsTokenListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsTupleExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsTupleExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsTupleTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsTupleTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsWhileStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsWhileStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsYieldListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsYieldListPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder22ExpressibleAsYieldStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder22ExpressibleAsYieldStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder22GenericParameterClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22GenericParameterClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22GenericParameterClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder22GenericRequirementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22GenericRequirementListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22GenericRequirementListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22GenericRequirementListV06createdeF0ACyF","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder22LabeledSpecializeEntryV06createdeF0ACyF","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder23ClosureCaptureSignatureV06createdeF0ACyF","s18SwiftSyntaxBuilder23DifferentiabilityParamsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder23DifferentiabilityParamsV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder23DifferentiabilityParamsV06createdE0ACyF","s18SwiftSyntaxBuilder23ExpressibleAsAccessPathP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsImportDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsImportDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsReturnStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsReturnStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsSourceFileP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsSourceFilePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsStructDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsStructDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsSwitchCaseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsSwitchCasePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23ExpressibleAsSwitchStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder23ExpressibleAsSwitchStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23PoundSourceLocationArgsV06createdefG0ACyF","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23PrecedenceGroupNameListV06createdefG0ACyF","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder23PrecedenceGroupRelationV06createdeF0ACyF","s18SwiftSyntaxBuilder23TuplePatternElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23TuplePatternElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder23TuplePatternElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder23TuplePatternElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder23UnavailabilityConditionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder23UnavailabilityConditionV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder23UnavailabilityConditionV06createdE0ACyF","s18SwiftSyntaxBuilder24ExpressibleAsCatchClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder24ExpressibleAsCatchClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder24ExpressibleAsCatchClausePAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder24ExpressibleAsClosureExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder24ExpressibleAsClosureExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder24ExpressibleAsKeyPathExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder24ExpressibleAsKeyPathExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder24ExpressibleAsTernaryExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder24ExpressibleAsTernaryExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder24ExpressibleAsWhereClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder24ExpressibleAsWhereClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder24MatchingPatternConditionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder24MatchingPatternConditionV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder24MatchingPatternConditionV06createdeF0ACyF","s18SwiftSyntaxBuilder24OptionalBindingConditionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder24OptionalBindingConditionV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder24OptionalBindingConditionV06createdeF0ACyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorDeclPAAE06createF4ListAA0fI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsAccessorListPAAE06createF5BlockAA0fI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsArrayElementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsArrayElementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsArrayElementPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsCaseItemListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder25ExpressibleAsClosureParamP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsClosureParamPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsClosureParamPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsContinueStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsContinueStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsDeclModifierP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsDeclModifierPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsDeclModifierPAAE06createG4ListAA0gI0VyF","s18SwiftSyntaxBuilder25ExpressibleAsEnumCaseDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder25ExpressibleAsEnumCaseDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsFunctionDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsFunctionDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsFunctionTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsFunctionTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsIfConfigDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder25ExpressibleAsIfConfigDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsMetatypeTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsMetatypeTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsModifierListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsObjCSelectorP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsOperatorDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsOperatorDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsOptionalTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsOptionalTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsProtocolDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsProtocolDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsReturnClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsReturnClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprPAAE011createTupleG7ElementAA0igJ0VyF","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsSequenceExprPAAE19createCodeBlockItemAA0ijK0VyF","s18SwiftSyntaxBuilder25ExpressibleAsSuperRefExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder25ExpressibleAsSuperRefExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsTuplePatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsTuplePatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsVariableDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsVariableDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder25ExpressibleAsVersionTupleP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder25ExpressibleAsVersionTuplePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder25PrecedenceGroupAssignmentV06createdeF0ACyF","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder25PrimaryAssociatedTypeListV06createdefG0ACyF","s18SwiftSyntaxBuilder26CompositionTypeElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder26CompositionTypeElementListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder26CompositionTypeElementListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26CompositionTypeElementListV06createdefG0ACyF","s18SwiftSyntaxBuilder26DifferentiabilityParamListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder26DifferentiabilityParamListV05builddeF06format13leadingTrivia0aB00defB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder26DifferentiabilityParamListV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder26DifferentiabilityParamListV06createdeF0ACyF","s18SwiftSyntaxBuilder26ExpressibleAsAccessorBlockP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsAccessorBlockPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsAttributeListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsCatchItemListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsCodeBlockItemP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsCodeBlockItemPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsCodeBlockItemPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder26ExpressibleAsDeclBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsDeclBuildablePAAE012createMemberF8ListItemAA0ifjK0VyF","s18SwiftSyntaxBuilder26ExpressibleAsDeclBuildablePAAE19createCodeBlockItemAA0ijK0VyF","s18SwiftSyntaxBuilder26ExpressibleAsExprBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsExprBuildablePAAE06createF4ListAA0fI0VyF","s18SwiftSyntaxBuilder26ExpressibleAsExtensionDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsExtensionDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsInheritedTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsInheritedTypePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsInheritedTypePAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder26ExpressibleAsIsTypePatternP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsIsTypePatternPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsObjcNamePieceP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsObjcNamePiecePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsObjcNamePiecePAAE06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsPoundFileExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsPoundFileExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsPoundLineExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder26ExpressibleAsPoundLineExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsStmtBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsStmtBuildablePAAE19createCodeBlockItemAA0ijK0VyF","s18SwiftSyntaxBuilder26ExpressibleAsStringSegmentP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsStringSegmentPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsSubscriptExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsTypeBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder26ExpressibleAsTypeBuildablePAAE18createReturnClauseAA0iJ0VyF","s18SwiftSyntaxBuilder26ExpressibleAsTypealiasDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder26ExpressibleAsTypealiasDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26OperatorPrecedenceAndTypesV06createdefG0ACyF","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder26PrecedenceGroupNameElementV06createdefG0ACyF","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder27AvailabilityLabeledArgumentV06createdeF0ACyF","s18SwiftSyntaxBuilder27ExpressibleAsAssignmentExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsAssignmentExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsAttributedTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsAttributedTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsDictionaryTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsExpressionStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsExpressionStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsIdentifierListP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsIfConfigClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsIfConfigClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsIfConfigClausePAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder27ExpressibleAsMemberDeclListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsMemberDeclListPAAE06createfG5BlockAA0fgJ0VyF","s18SwiftSyntaxBuilder27ExpressibleAsNilLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsNilLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsPatternBindingP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsPatternBindingPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsPatternBindingPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder27ExpressibleAsPoundErrorDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsPoundErrorDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsSpecializeExprP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsSpecializeExprPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder27ExpressibleAsSwitchCaseListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder27ExpressibleAsTypeAnnotationP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder27ExpressibleAsTypeAnnotationPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder27SpecializeAttributeSpecListV06createdefG0ACyF","s18SwiftSyntaxBuilder28ExpressibleAsCatchClauseListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsCompositionTypeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsCompositionTypePAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsCustomAttributeP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsCustomAttributePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsDeclarationStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsDeclarationStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCaseElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCaseElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCaseElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCasePatternP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsEnumCasePatternPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsFallthroughStmtP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsFallthroughStmtPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsForcedValueExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsForcedValueExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsGenericArgumentP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsGenericArgumentPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsGenericArgumentPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder28ExpressibleAsInitializerDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsInitializerDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsKeyPathBaseExprP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder28ExpressibleAsKeyPathBaseExprPAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsMemberDeclBlockP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsMemberDeclBlockPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsObjcKeyPathExprP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder28ExpressibleAsObjcKeyPathExprPAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsOptionalPatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsOptionalPatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsParameterClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsParameterClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundAssertStmtP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundAssertStmtPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundColumnExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundColumnExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundFileIDExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsPoundFileIDExprPAAE19createExprBuildableAA0jK0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsRepeatWhileStmtP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsRepeatWhileStmtPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsSwitchCaseLabelP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder28ExpressibleAsSwitchCaseLabelPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder28ExpressibleAsWildcardPatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder28ExpressibleAsWildcardPatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder28ImplementsAttributeArgumentsV06createdeF0ACyF","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28NamedAttributeStringArgumentV06createdefG0ACyF","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder28PrecedenceGroupAssociativityV06createdeF0ACyF","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV05builddefG06format13leadingTrivia0aB00defgB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder28PrecedenceGroupAttributeListV06createdefG0ACyF","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder29DifferentiabilityParamsClauseV06createdeF0ACyF","s18SwiftSyntaxBuilder29ExpressibleAsArrayElementListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsClosureParamListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsClosureSignatureP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder29ExpressibleAsClosureSignaturePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsConditionElementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder29ExpressibleAsConditionElementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsConditionElementPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder29ExpressibleAsDeclNameArgumentP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsDeclNameArgumentPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsDeclNameArgumentPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFloatLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFloatLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionCallExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionCallExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionCallExprPAAE19createCodeBlockItemAA0jkL0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionDeclNameP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsFunctionDeclNamePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsGenericParameterP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder29ExpressibleAsGenericParameterPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsGenericParameterPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder29ExpressibleAsMemberAccessExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsMemberAccessExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsObjcSelectorExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsObjcSelectorExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsPatternBuildableP06createfG0AA0fG0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsPostfixUnaryExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsPostfixUnaryExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsPoundWarningDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsPoundWarningDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsRegexLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsRegexLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleExprElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleExprElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleExprElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleTypeElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleTypeElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder29ExpressibleAsTupleTypeElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder30AvailabilityVersionRestrictionV06createdeF0ACyF","s18SwiftSyntaxBuilder30ExpressibleAsAccessorParameterP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsAccessorParameterPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsAvailabilityEntryP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsAvailabilityEntryPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsCodeBlockItemListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsCodeBlockItemListPAAE06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsDeclNameArgumentsP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsDeclNameArgumentsPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsDeinitializerDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsDeinitializerDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsDictionaryElementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsDictionaryElementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsDictionaryElementPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsExpressionPatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsExpressionPatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsExpressionSegmentP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsExpressionSegmentPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionParameterP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionParameterPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionParameterPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionSignatureP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsFunctionSignaturePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsIdentifierPatternP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsIdentifierPatternPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsInheritedTypeListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsInitializerClauseP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsInitializerClausePAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsNonEmptyTokenListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsObjCSelectorPieceP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsObjCSelectorPiecePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsObjCSelectorPiecePAAE06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder30ExpressibleAsObjectLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsObjectLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsPoundFilePathExprP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder30ExpressibleAsPoundFilePathExprPAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsPoundFunctionExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsPoundFunctionExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsQualifiedDeclNameP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsQualifiedDeclNamePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder30ExpressibleAsStringLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder30ExpressibleAsStringLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder30MultipleTrailingClosureElementV06createdefG0ACyF","s18SwiftSyntaxBuilder31ExpressibleAsAssociatedtypeDeclP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder31ExpressibleAsAssociatedtypeDeclPAAE06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsBinaryOperatorExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsBinaryOperatorExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsBooleanLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsBooleanLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsClosureCaptureItemP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsClosureCaptureItemPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsClosureCaptureItemPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder31ExpressibleAsElseIfContinuationP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsElseIfContinuationPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericRequirementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericRequirementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericRequirementPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericWhereClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsGenericWhereClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsIfConfigClauseListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder31ExpressibleAsIntegerLiteralExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsIntegerLiteralExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsMemberDeclListItemP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder31ExpressibleAsMemberDeclListItemPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsMemberDeclListItemPAAE06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsPatternBindingListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsPoundDsohandleExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsPoundDsohandleExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsPrefixOperatorExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsPrefixOperatorExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder31ExpressibleAsSwitchDefaultLabelP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder31ExpressibleAsSwitchDefaultLabelPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV05buildG06format13leadingTrivia0aB00gB0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV06createG9BuildableAA0gI0_pyF","s18SwiftSyntaxBuilder31ImplicitlyUnwrappedOptionalTypeV06createdefG0ACyF","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder32DifferentiableAttributeArgumentsV06createdeF0ACyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessLevelModifierP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessLevelModifierPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessPathComponentP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessPathComponentPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsAccessPathComponentPAAE06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder32ExpressibleAsEnumCaseElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder32ExpressibleAsGenericArgumentListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsPostfixIfConfigExprP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder32ExpressibleAsPostfixIfConfigExprPAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsPoundSourceLocationP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsPoundSourceLocationPAAE19createDeclBuildableAA0jK0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsPrecedenceGroupDeclP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsPrecedenceGroupDeclPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsSameTypeRequirementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsSameTypeRequirementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsTargetFunctionEntryP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsTargetFunctionEntryPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsTuplePatternElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsTuplePatternElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder32ExpressibleAsTuplePatternElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder32ExpressibleAsValueBindingPatternP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder32ExpressibleAsValueBindingPatternPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilityArgumentP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilityArgumentPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilityArgumentPAAE06createF8SpecListAA0fiJ0VyF","s18SwiftSyntaxBuilder33ExpressibleAsAvailabilitySpecListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsClassRestrictionTypeP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsClassRestrictionTypePAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsConditionElementListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsDeclNameArgumentListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder33ExpressibleAsGenericParameterListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsMemberTypeIdentifierP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsMemberTypeIdentifierPAAE06createG9BuildableAA0gJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsOptionalChainingExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsOptionalChainingExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierPAAE06createG10AnnotationAA0gJ0VyF","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierPAAE06createG4ExprAA0gJ0VyF","s18SwiftSyntaxBuilder33ExpressibleAsSimpleTypeIdentifierPAAE06createG9BuildableAA0gJ0_pyF","s18SwiftSyntaxBuilder33ExpressibleAsTupleExprElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder33ExpressibleAsTupleTypeElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder34ExpressibleAsAvailabilityConditionP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder34ExpressibleAsAvailabilityConditionPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsDictionaryElementListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsDiscardAssignmentExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsDiscardAssignmentExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsEditorPlaceholderExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsEditorPlaceholderExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsFunctionParameterListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsGenericArgumentClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsGenericArgumentClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsPrimaryAssociatedTypeP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsPrimaryAssociatedTypePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsPrimaryAssociatedTypePAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder34ExpressibleAsStringLiteralSegmentsP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsSymbolicReferenceExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsSymbolicReferenceExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsTypeInheritanceClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsTypeInheritanceClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsTypeInitializerClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsTypeInitializerClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34ExpressibleAsUnresolvedPatternExprP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder34ExpressibleAsUnresolvedPatternExprPAAE06createH9BuildableAA0hJ0_pyF","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0L0VSgtF","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV05builddefgH06format13leadingTrivia0aB00defghB0VAA6FormatV_AG0L0VSgtF","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder34MultipleTrailingClosureElementListV06createdefgH0ACyF","s18SwiftSyntaxBuilder35ExpressibleAsClosureCaptureItemListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder35ExpressibleAsCompositionTypeElementP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder35ExpressibleAsCompositionTypeElementPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder35ExpressibleAsCompositionTypeElementPAAE06createfgH4ListAA0fghJ0VyF","s18SwiftSyntaxBuilder35ExpressibleAsConformanceRequirementP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder35ExpressibleAsConformanceRequirementPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder35ExpressibleAsDifferentiabilityParamP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder35ExpressibleAsDifferentiabilityParamPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder35ExpressibleAsDifferentiabilityParamPAAE06createfG4ListAA0fgI0VyF","s18SwiftSyntaxBuilder35ExpressibleAsGenericParameterClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder35ExpressibleAsGenericParameterClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder35ExpressibleAsGenericRequirementListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder35ExpressibleAsLabeledSpecializeEntryP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder35ExpressibleAsLabeledSpecializeEntryPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsClosureCaptureSignatureP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder36ExpressibleAsClosureCaptureSignaturePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsDifferentiabilityParamsP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder36ExpressibleAsDifferentiabilityParamsPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsPoundSourceLocationArgsP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder36ExpressibleAsPoundSourceLocationArgsPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupNameListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupRelationP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder36ExpressibleAsPrecedenceGroupRelationPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder36ExpressibleAsTuplePatternElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder36ExpressibleAsUnavailabilityConditionP06createfG0AA0fG0VyF","s18SwiftSyntaxBuilder36ExpressibleAsUnavailabilityConditionPAAE06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder37ExpressibleAsMatchingPatternConditionP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder37ExpressibleAsMatchingPatternConditionPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder37ExpressibleAsOptionalBindingConditionP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder37ExpressibleAsOptionalBindingConditionPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder38ExpressibleAsPrecedenceGroupAssignmentP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder38ExpressibleAsPrecedenceGroupAssignmentPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder38ExpressibleAsPrimaryAssociatedTypeListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder39ExpressibleAsCompositionTypeElementListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder39ExpressibleAsDifferentiabilityParamListP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder39ExpressibleAsOperatorPrecedenceAndTypesP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder39ExpressibleAsOperatorPrecedenceAndTypesPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder39ExpressibleAsPrecedenceGroupNameElementP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder39ExpressibleAsPrecedenceGroupNameElementPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder39ExpressibleAsPrecedenceGroupNameElementPAAE06createfgH4ListAA0fghK0VyF","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0K0VSgtF","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV06createB9BuildableAA0bI0_pyF","s18SwiftSyntaxBuilder40DerivativeRegistrationAttributeArgumentsV06createdefG0ACyF","s18SwiftSyntaxBuilder40ExpressibleAsAvailabilityLabeledArgumentP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder40ExpressibleAsAvailabilityLabeledArgumentPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder40ExpressibleAsSpecializeAttributeSpecListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder41ExpressibleAsImplementsAttributeArgumentsP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder41ExpressibleAsImplementsAttributeArgumentsPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder41ExpressibleAsNamedAttributeStringArgumentP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder41ExpressibleAsNamedAttributeStringArgumentPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAssociativityP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAssociativityPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder41ExpressibleAsPrecedenceGroupAttributeListP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder42ExpressibleAsDifferentiabilityParamsClauseP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder42ExpressibleAsDifferentiabilityParamsClausePAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder43ExpressibleAsAvailabilityVersionRestrictionP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder43ExpressibleAsAvailabilityVersionRestrictionPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder43ExpressibleAsMultipleTrailingClosureElementP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder43ExpressibleAsMultipleTrailingClosureElementPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder43ExpressibleAsMultipleTrailingClosureElementPAAE06createfghI4ListAA0fghiK0VyF","s18SwiftSyntaxBuilder44ExpressibleAsImplicitlyUnwrappedOptionalTypeP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder44ExpressibleAsImplicitlyUnwrappedOptionalTypePAAE06createI9BuildableAA0iK0_pyF","s18SwiftSyntaxBuilder45ExpressibleAsDifferentiableAttributeArgumentsP06createfgH0AA0fgH0VyF","s18SwiftSyntaxBuilder45ExpressibleAsDifferentiableAttributeArgumentsPAAE06createB9BuildableAA0bJ0_pyF","s18SwiftSyntaxBuilder47ExpressibleAsMultipleTrailingClosureElementListP06createfghiJ0AA0fghiJ0VyF","s18SwiftSyntaxBuilder53ExpressibleAsDerivativeRegistrationAttributeArgumentsP06createfghI0AA0fghI0VyF","s18SwiftSyntaxBuilder53ExpressibleAsDerivativeRegistrationAttributeArgumentsPAAE06createB9BuildableAA0bK0_pyF","s18SwiftSyntaxBuilder6AsExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder6AsExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder6AsExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder6AsExprV06createdE0ACyF","s18SwiftSyntaxBuilder6DoStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder6DoStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder6DoStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder6DoStmtV06createdE0ACyF","s18SwiftSyntaxBuilder6IfStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder6IfStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder6IfStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder6IfStmtV06createdE0ACyF","s18SwiftSyntaxBuilder6IsExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder6IsExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder6IsExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder6IsExprV06createdE0ACyF","s18SwiftSyntaxBuilder7TryExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder7TryExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder7TryExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder7TryExprV06createdE0ACyF","s18SwiftSyntaxBuilder8CaseItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8CaseItemV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8CaseItemV06createdE0ACyF","s18SwiftSyntaxBuilder8DeclNameV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8DeclNameV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8DeclNameV06createdE0ACyF","s18SwiftSyntaxBuilder8EnumDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8EnumDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8EnumDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder8EnumDeclV06createdE0ACyF","s18SwiftSyntaxBuilder8ExprListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8ExprListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8ExprListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8ExprListV06createdE0ACyF","s18SwiftSyntaxBuilder8ObjcNameV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8ObjcNameV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8ObjcNameV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8ObjcNameV06createdE0ACyF","s18SwiftSyntaxBuilder8SomeTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8SomeTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8SomeTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder8SomeTypeV06createdE0ACyF","s18SwiftSyntaxBuilder8TypeExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder8TypeExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder8TypeExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder8TypeExprV06createdE0ACyF","s18SwiftSyntaxBuilder9ArrayExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ArrayExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ArrayExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ArrayExprV06createdE0ACyF","s18SwiftSyntaxBuilder9ArrayTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ArrayTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ArrayTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ArrayTypeV06createdE0ACyF","s18SwiftSyntaxBuilder9ArrowExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ArrowExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ArrowExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ArrowExprV06createdE0ACyF","s18SwiftSyntaxBuilder9AttributeV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0H0VSgtF","s18SwiftSyntaxBuilder9AttributeV06createB9BuildableAA0bF0_pyF","s18SwiftSyntaxBuilder9AttributeV06createD0ACyF","s18SwiftSyntaxBuilder9AwaitExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9AwaitExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9AwaitExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9AwaitExprV06createdE0ACyF","s18SwiftSyntaxBuilder9BreakStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9BreakStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9BreakStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9BreakStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9CatchItemV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9CatchItemV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9CatchItemV06createdE0ACyF","s18SwiftSyntaxBuilder9ClassDeclV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ClassDeclV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ClassDeclV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ClassDeclV06createdE0ACyF","s18SwiftSyntaxBuilder9CodeBlockV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9CodeBlockV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9CodeBlockV06createdE0ACyF","s18SwiftSyntaxBuilder9DeferStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9DeferStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9DeferStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9DeferStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9ElseBlockV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ElseBlockV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ElseBlockV06createdE0ACyF","s18SwiftSyntaxBuilder9ForInStmtV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder9ForInStmtV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder9ForInStmtV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder9ForInStmtV06createdeF0ACyF","s18SwiftSyntaxBuilder9GuardStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9GuardStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9GuardStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9GuardStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9InOutExprV05buildF06format13leadingTrivia0aB00fB0VAA6FormatV_AG0J0VSgtF","s18SwiftSyntaxBuilder9InOutExprV06createB9BuildableAA0bH0_pyF","s18SwiftSyntaxBuilder9InOutExprV06createF9BuildableAA0fH0_pyF","s18SwiftSyntaxBuilder9InOutExprV06createdeF0ACyF","s18SwiftSyntaxBuilder9ThrowStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9ThrowStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9ThrowStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9ThrowStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9TokenListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9TokenListV05builddE06format13leadingTrivia0aB00deB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9TokenListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9TokenListV06createdE0ACyF","s18SwiftSyntaxBuilder9TupleExprV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9TupleExprV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9TupleExprV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9TupleExprV06createdE0ACyF","s18SwiftSyntaxBuilder9TupleTypeV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9TupleTypeV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9TupleTypeV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9TupleTypeV06createdE0ACyF","s18SwiftSyntaxBuilder9WhileStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9WhileStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9WhileStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9WhileStmtV06createdE0ACyF","s18SwiftSyntaxBuilder9YieldListV05buildB06format13leadingTrivia0aB00B0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9YieldListV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9YieldListV06createdE0ACyF","s18SwiftSyntaxBuilder9YieldStmtV05buildE06format13leadingTrivia0aB00eB0VAA6FormatV_AG0I0VSgtF","s18SwiftSyntaxBuilder9YieldStmtV06createB9BuildableAA0bG0_pyF","s18SwiftSyntaxBuilder9YieldStmtV06createE9BuildableAA0eG0_pyF","s18SwiftSyntaxBuilder9YieldStmtV06createdE0ACyF","s18SwiftSyntaxBuilder010AccessPathC0V10Expressiona","s18SwiftSyntaxBuilder010AccessPathC0V11FinalResulta","s18SwiftSyntaxBuilder010AccessPathC0V9Componenta","s18SwiftSyntaxBuilder012AccessorListC0V10Expressiona","s18SwiftSyntaxBuilder012AccessorListC0V11FinalResulta","s18SwiftSyntaxBuilder012AccessorListC0V9Componenta","s18SwiftSyntaxBuilder012CaseItemListC0V10Expressiona","s18SwiftSyntaxBuilder012CaseItemListC0V11FinalResulta","s18SwiftSyntaxBuilder012CaseItemListC0V9Componenta","s18SwiftSyntaxBuilder012ModifierListC0V10Expressiona","s18SwiftSyntaxBuilder012ModifierListC0V11FinalResulta","s18SwiftSyntaxBuilder012ModifierListC0V9Componenta","s18SwiftSyntaxBuilder012ObjCSelectorC0V10Expressiona","s18SwiftSyntaxBuilder012ObjCSelectorC0V11FinalResulta","s18SwiftSyntaxBuilder012ObjCSelectorC0V9Componenta","s18SwiftSyntaxBuilder013AttributeListC0V10Expressiona","s18SwiftSyntaxBuilder013AttributeListC0V11FinalResulta","s18SwiftSyntaxBuilder013AttributeListC0V9Componenta","s18SwiftSyntaxBuilder013CatchItemListC0V10Expressiona","s18SwiftSyntaxBuilder013CatchItemListC0V11FinalResulta","s18SwiftSyntaxBuilder013CatchItemListC0V9Componenta","s18SwiftSyntaxBuilder014IdentifierListC0V10Expressiona","s18SwiftSyntaxBuilder014IdentifierListC0V11FinalResulta","s18SwiftSyntaxBuilder014IdentifierListC0V9Componenta","s18SwiftSyntaxBuilder014MemberDeclListC0V10Expressiona","s18SwiftSyntaxBuilder014MemberDeclListC0V11FinalResulta","s18SwiftSyntaxBuilder014MemberDeclListC0V9Componenta","s18SwiftSyntaxBuilder014SwitchCaseListC0V10Expressiona","s18SwiftSyntaxBuilder014SwitchCaseListC0V11FinalResulta","s18SwiftSyntaxBuilder014SwitchCaseListC0V9Componenta","s18SwiftSyntaxBuilder015CatchClauseListC0V10Expressiona","s18SwiftSyntaxBuilder015CatchClauseListC0V11FinalResulta","s18SwiftSyntaxBuilder015CatchClauseListC0V9Componenta","s18SwiftSyntaxBuilder016ArrayElementListC0V10Expressiona","s18SwiftSyntaxBuilder016ArrayElementListC0V11FinalResulta","s18SwiftSyntaxBuilder016ArrayElementListC0V9Componenta","s18SwiftSyntaxBuilder016ClosureParamListC0V10Expressiona","s18SwiftSyntaxBuilder016ClosureParamListC0V11FinalResulta","s18SwiftSyntaxBuilder016ClosureParamListC0V9Componenta","s18SwiftSyntaxBuilder017CodeBlockItemListC0V10Expressiona","s18SwiftSyntaxBuilder017CodeBlockItemListC0V11FinalResulta","s18SwiftSyntaxBuilder017CodeBlockItemListC0V9Componenta","s18SwiftSyntaxBuilder017InheritedTypeListC0V10Expressiona","s18SwiftSyntaxBuilder017InheritedTypeListC0V11FinalResulta","s18SwiftSyntaxBuilder017InheritedTypeListC0V9Componenta","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V10Expressiona","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V11FinalResulta","s18SwiftSyntaxBuilder017NonEmptyTokenListC0V9Componenta","s18SwiftSyntaxBuilder018IfConfigClauseListC0V10Expressiona","s18SwiftSyntaxBuilder018IfConfigClauseListC0V11FinalResulta","s18SwiftSyntaxBuilder018IfConfigClauseListC0V9Componenta","s18SwiftSyntaxBuilder018PatternBindingListC0V10Expressiona","s18SwiftSyntaxBuilder018PatternBindingListC0V11FinalResulta","s18SwiftSyntaxBuilder018PatternBindingListC0V9Componenta","s18SwiftSyntaxBuilder019EnumCaseElementListC0V10Expressiona","s18SwiftSyntaxBuilder019EnumCaseElementListC0V11FinalResulta","s18SwiftSyntaxBuilder019EnumCaseElementListC0V9Componenta","s18SwiftSyntaxBuilder019GenericArgumentListC0V10Expressiona","s18SwiftSyntaxBuilder019GenericArgumentListC0V11FinalResulta","s18SwiftSyntaxBuilder019GenericArgumentListC0V9Componenta","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V10Expressiona","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V11FinalResulta","s18SwiftSyntaxBuilder020AvailabilitySpecListC0V9Componenta","s18SwiftSyntaxBuilder020ConditionElementListC0V10Expressiona","s18SwiftSyntaxBuilder020ConditionElementListC0V11FinalResulta","s18SwiftSyntaxBuilder020ConditionElementListC0V9Componenta","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V10Expressiona","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V11FinalResulta","s18SwiftSyntaxBuilder020DeclNameArgumentListC0V9Componenta","s18SwiftSyntaxBuilder020GenericParameterListC0V10Expressiona","s18SwiftSyntaxBuilder020GenericParameterListC0V11FinalResulta","s18SwiftSyntaxBuilder020GenericParameterListC0V9Componenta","s18SwiftSyntaxBuilder020TupleExprElementListC0V10Expressiona","s18SwiftSyntaxBuilder020TupleExprElementListC0V11FinalResulta","s18SwiftSyntaxBuilder020TupleExprElementListC0V9Componenta","s18SwiftSyntaxBuilder020TupleTypeElementListC0V10Expressiona","s18SwiftSyntaxBuilder020TupleTypeElementListC0V11FinalResulta","s18SwiftSyntaxBuilder020TupleTypeElementListC0V9Componenta","s18SwiftSyntaxBuilder021DictionaryElementListC0V10Expressiona","s18SwiftSyntaxBuilder021DictionaryElementListC0V11FinalResulta","s18SwiftSyntaxBuilder021DictionaryElementListC0V9Componenta","s18SwiftSyntaxBuilder021FunctionParameterListC0V10Expressiona","s18SwiftSyntaxBuilder021FunctionParameterListC0V11FinalResulta","s18SwiftSyntaxBuilder021FunctionParameterListC0V9Componenta","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V10Expressiona","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V11FinalResulta","s18SwiftSyntaxBuilder021StringLiteralSegmentsC0V9Componenta","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V10Expressiona","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V11FinalResulta","s18SwiftSyntaxBuilder022ClosureCaptureItemListC0V9Componenta","s18SwiftSyntaxBuilder022GenericRequirementListC0V10Expressiona","s18SwiftSyntaxBuilder022GenericRequirementListC0V11FinalResulta","s18SwiftSyntaxBuilder022GenericRequirementListC0V9Componenta","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V10Expressiona","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V11FinalResulta","s18SwiftSyntaxBuilder023PrecedenceGroupNameListC0V9Componenta","s18SwiftSyntaxBuilder023TuplePatternElementListC0V10Expressiona","s18SwiftSyntaxBuilder023TuplePatternElementListC0V11FinalResulta","s18SwiftSyntaxBuilder023TuplePatternElementListC0V9Componenta","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V10Expressiona","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V11FinalResulta","s18SwiftSyntaxBuilder025PrimaryAssociatedTypeListC0V9Componenta","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V10Expressiona","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V11FinalResulta","s18SwiftSyntaxBuilder026CompositionTypeElementListC0V9Componenta","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V10Expressiona","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V11FinalResulta","s18SwiftSyntaxBuilder026DifferentiabilityParamListC0V9Componenta","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V10Expressiona","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V11FinalResulta","s18SwiftSyntaxBuilder027SpecializeAttributeSpecListC0V9Componenta","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V10Expressiona","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V11FinalResulta","s18SwiftSyntaxBuilder028PrecedenceGroupAttributeListC0V9Componenta","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V10Expressiona","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V11FinalResulta","s18SwiftSyntaxBuilder034MultipleTrailingClosureElementListC0V9Componenta","s18SwiftSyntaxBuilder08ExprListC0V10Expressiona","s18SwiftSyntaxBuilder08ExprListC0V11FinalResulta","s18SwiftSyntaxBuilder08ExprListC0V9Componenta","s18SwiftSyntaxBuilder08ObjcNameC0V10Expressiona","s18SwiftSyntaxBuilder08ObjcNameC0V11FinalResulta","s18SwiftSyntaxBuilder08ObjcNameC0V9Componenta","s18SwiftSyntaxBuilder09TokenListC0V10Expressiona","s18SwiftSyntaxBuilder09TokenListC0V11FinalResulta","s18SwiftSyntaxBuilder09TokenListC0V9Componenta","s11SwiftSyntax010AccessPathB0V","s11SwiftSyntax012AccessorListB0V","s11SwiftSyntax012CaseItemListB0V","s11SwiftSyntax012ModifierListB0V","s11SwiftSyntax012ObjCSelectorB0V","s11SwiftSyntax013AttributeListB0V","s11SwiftSyntax013CatchItemListB0V","s11SwiftSyntax014IdentifierListB0V","s11SwiftSyntax014MemberDeclListB0V","s11SwiftSyntax014SwitchCaseListB0V","s11SwiftSyntax015CatchClauseListB0V","s11SwiftSyntax016ArrayElementListB0V","s11SwiftSyntax016ClosureParamListB0V","s11SwiftSyntax017CodeBlockItemListB0V","s11SwiftSyntax017InheritedTypeListB0V","s11SwiftSyntax017NonEmptyTokenListB0V","s11SwiftSyntax018IfConfigClauseListB0V","s11SwiftSyntax018PatternBindingListB0V","s11SwiftSyntax019EnumCaseElementListB0V","s11SwiftSyntax019GenericArgumentListB0V","s11SwiftSyntax020AvailabilitySpecListB0V","s11SwiftSyntax020ConditionElementListB0V","s11SwiftSyntax020DeclNameArgumentListB0V","s11SwiftSyntax020GenericParameterListB0V","s11SwiftSyntax020TupleExprElementListB0V","s11SwiftSyntax020TupleTypeElementListB0V","s11SwiftSyntax021DictionaryElementListB0V","s11SwiftSyntax021FunctionParameterListB0V","s11SwiftSyntax021StringLiteralSegmentsB0V","s11SwiftSyntax022ClosureCaptureItemListB0V","s11SwiftSyntax022GenericRequirementListB0V","s11SwiftSyntax023PrecedenceGroupNameListB0V","s11SwiftSyntax023TuplePatternElementListB0V","s11SwiftSyntax025PrimaryAssociatedTypeListB0V","s11SwiftSyntax026CompositionTypeElementListB0V","s11SwiftSyntax026DifferentiabilityParamListB0V","s11SwiftSyntax027SpecializeAttributeSpecListB0V","s11SwiftSyntax028PrecedenceGroupAttributeListB0V","s11SwiftSyntax034MultipleTrailingClosureElementListB0V","s11SwiftSyntax04DeclB0V","s11SwiftSyntax04ExprB0V","s11SwiftSyntax04StmtB0V","s11SwiftSyntax04TypeB0V","s11SwiftSyntax05TokenB0V","s11SwiftSyntax07PatternB0V","s11SwiftSyntax08ExprListB0V","s11SwiftSyntax08ObjcNameB0V","s11SwiftSyntax09TokenListB0V","s11SwiftSyntax0B0V","s11SwiftSyntax0B8HashablePAAE2eeoiySbx_xtFZ","s11SwiftSyntax0B8HashablePAAE4hash4intoys6HasherVz_tF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA013ParenthesizedB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA013WithCodeBlockB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA014IdentifiedDeclB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA014WithStatementsB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA017WithTrailingCommaB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA06BracedB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA07LabeledB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02asC0yAA09DeclGroupB0_pSgAaE_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA013ParenthesizedB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA013WithCodeBlockB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA014IdentifiedDeclB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA014WithStatementsB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA017WithTrailingCommaB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA06BracedB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA07LabeledB0_pmF","s11SwiftSyntax0B8ProtocolPAAE02isC0ySbAA09DeclGroupB0_pmF","s11SwiftSyntax0B8ProtocolPAAE10firstTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE10isImplicitSbvp","s11SwiftSyntax0B8ProtocolPAAE11descriptionSSvp","s11SwiftSyntax0B8ProtocolPAAE11endLocation9converter19afterTrailingTriviaAA06SourceE0VAA0jE9ConverterC_SbtF","s11SwiftSyntax0B8ProtocolPAAE11endPositionAA08AbsoluteE0Vvp","s11SwiftSyntax0B8ProtocolPAAE11sourceRange9converter18afterLeadingTrivia0g8TrailingI0AA06SourceE0VAA0K17LocationConverterC_S2btF","s11SwiftSyntax0B8ProtocolPAAE11totalLengthAA06SourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE12isCollectionSbvp","s11SwiftSyntax0B8ProtocolPAAE13contentLengthAA06SourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE13indexInParentSivp","s11SwiftSyntax0B8ProtocolPAAE13leadingTriviaAA0E0VSgvp","s11SwiftSyntax0B8ProtocolPAAE13previousTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE13startLocation9converter18afterLeadingTriviaAA06SourceE0VAA0jE9ConverterC_SbtF","s11SwiftSyntax0B8ProtocolPAAE14classification2atAA0B15ClassifiedRangeVSgAA16AbsolutePositionV_tF","s11SwiftSyntax0B8ProtocolPAAE14classification2atAA0B15ClassifiedRangeVSgSi_tF","s11SwiftSyntax0B8ProtocolPAAE14trailingTriviaAA0E0VSgvp","s11SwiftSyntax0B8ProtocolPAAE15classifications2inAA0B15ClassificationsVAA15ByteSourceRangeV_tF","s11SwiftSyntax0B8ProtocolPAAE15classificationsAA0B15ClassificationsVvp","s11SwiftSyntax0B8ProtocolPAAE16debugDescriptionSSvp","s11SwiftSyntax0B8ProtocolPAAE19leadingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax0B8ProtocolPAAE20trailingTriviaLengthAA06SourceF0Vvp","s11SwiftSyntax0B8ProtocolPAAE27byteSizeAfterTrimmingTriviaSivp","s11SwiftSyntax0B8ProtocolPAAE2idAA0B10IdentifierVvp","s11SwiftSyntax0B8ProtocolPAAE31endPositionBeforeTrailingTriviaAA08AbsoluteE0Vvp","s11SwiftSyntax0B8ProtocolPAAE34positionAfterSkippingLeadingTriviaAA16AbsolutePositionVvp","s11SwiftSyntax0B8ProtocolPAAE4rootAA0B0Vvp","s11SwiftSyntax0B8ProtocolPAAE5indexAA0B13ChildrenIndexVvp","s11SwiftSyntax0B8ProtocolPAAE5write2toyqd__z_ts16TextOutputStreamRd__lF","s11SwiftSyntax0B8ProtocolPAAE6parentAA0B0VSgvp","s11SwiftSyntax0B8ProtocolPAAE6tokensAA13TokenSequenceVvp","s11SwiftSyntax0B8ProtocolPAAE7isTokenSbvp","s11SwiftSyntax0B8ProtocolPAAE8byteSizeSivp","s11SwiftSyntax0B8ProtocolPAAE8childrenAA0B8ChildrenVvp","s11SwiftSyntax0B8ProtocolPAAE8positionAA16AbsolutePositionVvp","s11SwiftSyntax0B8ProtocolPAAE9byteRangeAA010ByteSourceE0Vvp","s11SwiftSyntax0B8ProtocolPAAE9hasParentSbvp","s11SwiftSyntax0B8ProtocolPAAE9isMissingSbvp","s11SwiftSyntax0B8ProtocolPAAE9isPresentSbvp","s11SwiftSyntax0B8ProtocolPAAE9isUnknownSbvp","s11SwiftSyntax0B8ProtocolPAAE9lastTokenAA0eB0VSgvp","s11SwiftSyntax0B8ProtocolPAAE9nextTokenAA0eB0VSgvp","s11SwiftSyntax6TriviaV","sSH4hash4intoys6HasherVz_tF","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSS","sSb","sSf","sSi","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss25ExpressibleByArrayLiteralP","ss25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc","ss25ExpressibleByFloatLiteralP","ss25ExpressibleByFloatLiteralP05floatD0x0cD4TypeQz_tcfc","ss27ExpressibleByBooleanLiteralP","ss27ExpressibleByBooleanLiteralP07booleanD0x0cD4TypeQz_tcfc","ss27ExpressibleByIntegerLiteralP","ss27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc"],"vertices":[{"p":["String","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["String","createReturnClause()"],"f":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18,465]],"s":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18]]},{"p":["String","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["String","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["String","createIdentifierExpr()"],"f":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18,491]],"s":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18]]},{"p":["String","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["String","createIdentifierPattern()"],"f":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18,548]],"s":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18]]},{"p":["String","createStringLiteralExpr()"],"f":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18,557]],"s":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18]]},{"p":["String","createBinaryOperatorExpr()"],"f":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18,559]],"s":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18]]},{"p":["String","createAccessPathComponent()"],"f":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18,573]],"s":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18]]},{"p":["String","createSimpleTypeIdentifier()"],"f":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18,591]],"s":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18]]},{"p":["TokenSyntax","poundEndif"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundEndif",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundEndif",7],[": ",17],["TokenSyntax",18]],"d":"The `#endif` keyword"},{"p":["TokenSyntax","poundError"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundError",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundError",7],[": ",17],["TokenSyntax",18]],"d":"The `#error` keyword"},{"p":["TokenSyntax","rightAngle"],"f":[["static",12],[" ",17],["var",12],[" ",17],["rightAngle",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["rightAngle",7],[": ",17],["TokenSyntax",18]],"d":"The `>` token"},{"p":["TokenSyntax","rightBrace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["rightBrace",7],[": ",17],["TokenSyntax",18]],"d":"The `}` token"},{"p":["TokenSyntax","rightParen"],"f":[["static",12],[" ",17],["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["rightParen",7],[": ",17],["TokenSyntax",18]],"d":"The `)` token"},{"p":["TokenSyntax","capitalSelf"],"f":[["static",12],[" ",17],["var",12],[" ",17],["capitalSelf",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["capitalSelf",7],[": ",17],["TokenSyntax",18]],"d":"The `Self` keyword"},{"p":["TokenSyntax","fallthrough"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`fallthrough`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`fallthrough`",7],[": ",17],["TokenSyntax",18]],"d":"The `fallthrough` keyword"},{"p":["TokenSyntax","fileprivate"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`fileprivate`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`fileprivate`",7],[": ",17],["TokenSyntax",18]],"d":"The `fileprivate` keyword"},{"p":["TokenSyntax","poundAssert"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundAssert",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundAssert",7],[": ",17],["TokenSyntax",18]],"d":"The `#assert` keyword"},{"p":["TokenSyntax","poundColumn"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundColumn",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundColumn",7],[": ",17],["TokenSyntax",18]],"d":"The `#column` keyword"},{"p":["TokenSyntax","poundElseif"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundElseif",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundElseif",7],[": ",17],["TokenSyntax",18]],"d":"The `#elseif` keyword"},{"p":["TokenSyntax","poundFileID"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFileID",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFileID",7],[": ",17],["TokenSyntax",18]],"d":"The `#fileID` keyword"},{"p":["TokenSyntax","singleQuote"],"f":[["static",12],[" ",17],["var",12],[" ",17],["singleQuote",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["singleQuote",7],[": ",17],["TokenSyntax",18]],"d":"The `'` token"},{"p":["TokenSyntax","stringQuote"],"f":[["static",12],[" ",17],["var",12],[" ",17],["stringQuote",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["stringQuote",7],[": ",17],["TokenSyntax",18]],"d":"The `\"` token"},{"p":["TokenSyntax","poundKeyPath"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundKeyPath",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundKeyPath",7],[": ",17],["TokenSyntax",18]],"d":"The `#keyPath` keyword"},{"p":["TokenSyntax","poundWarning"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundWarning",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundWarning",7],[": ",17],["TokenSyntax",18]],"d":"The `#warning` keyword"},{"p":["TokenSyntax","prefixPeriod"],"f":[["static",12],[" ",17],["var",12],[" ",17],["prefixPeriod",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["prefixPeriod",7],[": ",17],["TokenSyntax",18]],"d":"The `.` token"},{"p":["TokenSyntax","poundFilePath"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFilePath",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFilePath",7],[": ",17],["TokenSyntax",18]],"d":"The `#filePath` keyword"},{"p":["TokenSyntax","poundFunction"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFunction",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFunction",7],[": ",17],["TokenSyntax",18]],"d":"The `#function` keyword"},{"p":["TokenSyntax","poundSelector"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundSelector",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundSelector",7],[": ",17],["TokenSyntax",18]],"d":"The `#selector` keyword"},{"p":["TokenSyntax","associatedtype"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`associatedtype`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`associatedtype`",7],[": ",17],["TokenSyntax",18]],"d":"The `associatedtype` keyword"},{"p":["TokenSyntax","poundAvailable"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundAvailable",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundAvailable",7],[": ",17],["TokenSyntax",18]],"d":"The `#available` keyword"},{"p":["TokenSyntax","poundDsohandle"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundDsohandle",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundDsohandle",7],[": ",17],["TokenSyntax",18]],"d":"The `#dsohandle` keyword"},{"p":["TokenSyntax","exclamationMark"],"f":[["static",12],[" ",17],["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["exclamationMark",7],[": ",17],["TokenSyntax",18]],"d":"The `!` token"},{"p":["TokenSyntax","precedencegroup"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`precedencegroup`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`precedencegroup`",7],[": ",17],["TokenSyntax",18]],"d":"The `precedencegroup` keyword"},{"p":["TokenSyntax","prefixAmpersand"],"f":[["static",12],[" ",17],["var",12],[" ",17],["prefixAmpersand",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["prefixAmpersand",7],[": ",17],["TokenSyntax",18]],"d":"The `&` token"},{"p":["TokenSyntax","poundFileLiteral"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFileLiteral",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFileLiteral",7],[": ",17],["TokenSyntax",18]],"d":"The `#fileLiteral` keyword"},{"p":["TokenSyntax","poundUnavailable"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundUnavailable",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundUnavailable",7],[": ",17],["TokenSyntax",18]],"d":"The `#unavailable` keyword"},{"p":["TokenSyntax","infixQuestionMark"],"f":[["static",12],[" ",17],["var",12],[" ",17],["infixQuestionMark",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["infixQuestionMark",7],[": ",17],["TokenSyntax",18]],"d":"The `?` token"},{"p":["TokenSyntax","leftSquareBracket"],"f":[["static",12],[" ",17],["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["leftSquareBracket",7],[": ",17],["TokenSyntax",18]],"d":"The `[` token"},{"p":["TokenSyntax","poundColorLiteral"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundColorLiteral",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundColorLiteral",7],[": ",17],["TokenSyntax",18]],"d":"The `#colorLiteral` keyword"},{"p":["TokenSyntax","poundImageLiteral"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundImageLiteral",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundImageLiteral",7],[": ",17],["TokenSyntax",18]],"d":"The `#imageLiteral` keyword"},{"p":["TokenSyntax","rightSquareBracket"],"f":[["static",12],[" ",17],["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["rightSquareBracket",7],[": ",17],["TokenSyntax",18]],"d":"The `]` token"},{"p":["TokenSyntax","postfixQuestionMark"],"f":[["static",12],[" ",17],["var",12],[" ",17],["postfixQuestionMark",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["postfixQuestionMark",7],[": ",17],["TokenSyntax",18]],"d":"The `?` token"},{"p":["TokenSyntax","poundSourceLocation"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundSourceLocation",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundSourceLocation",7],[": ",17],["TokenSyntax",18]],"d":"The `#sourceLocation` keyword"},{"p":["TokenSyntax","multilineStringQuote"],"f":[["static",12],[" ",17],["var",12],[" ",17],["multilineStringQuote",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["multilineStringQuote",7],[": ",17],["TokenSyntax",18]],"d":"The `\"\"\"` token"},{"p":["TokenSyntax","stringInterpolationAnchor"],"f":[["static",12],[" ",17],["var",12],[" ",17],["stringInterpolationAnchor",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["stringInterpolationAnchor",7],[": ",17],["TokenSyntax",18]],"d":"The `)` token"},{"p":["TokenSyntax","as"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`as`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`as`",7],[": ",17],["TokenSyntax",18]],"d":"The `as` keyword"},{"p":["TokenSyntax","do"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`do`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`do`",7],[": ",17],["TokenSyntax",18]],"d":"The `do` keyword"},{"p":["TokenSyntax","if"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`if`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`if`",7],[": ",17],["TokenSyntax",18]],"d":"The `if` keyword"},{"p":["TokenSyntax","in"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`in`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`in`",7],[": ",17],["TokenSyntax",18]],"d":"The `in` keyword"},{"p":["TokenSyntax","is"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`is`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`is`",7],[": ",17],["TokenSyntax",18]],"d":"The `is` keyword"},{"p":["TokenSyntax","any"],"f":[["static",12],[" ",17],["var",12],[" ",17],["any",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["any",7],[": ",17],["TokenSyntax",18]],"d":"The `Any` keyword"},{"p":["TokenSyntax","eof"],"f":[["static",12],[" ",17],["var",12],[" ",17],["eof",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["eof",7],[": ",17],["TokenSyntax",18]],"d":"The `eof` token"},{"p":["TokenSyntax","for"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`for`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`for`",7],[": ",17],["TokenSyntax",18]],"d":"The `for` keyword"},{"p":["TokenSyntax","let"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`let`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`let`",7],[": ",17],["TokenSyntax",18]],"d":"The `let` keyword"},{"p":["TokenSyntax","nil"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`nil`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`nil`",7],[": ",17],["TokenSyntax",18]],"d":"The `nil` keyword"},{"p":["TokenSyntax","try"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`try`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`try`",7],[": ",17],["TokenSyntax",18]],"d":"The `try` keyword"},{"p":["TokenSyntax","var"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`var`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`var`",7],[": ",17],["TokenSyntax",18]],"d":"The `var` keyword"},{"p":["TokenSyntax","case"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`case`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`case`",7],[": ",17],["TokenSyntax",18]],"d":"The `case` keyword"},{"p":["TokenSyntax","else"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`else`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`else`",7],[": ",17],["TokenSyntax",18]],"d":"The `else` keyword"},{"p":["TokenSyntax","enum"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`enum`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`enum`",7],[": ",17],["TokenSyntax",18]],"d":"The `enum` keyword"},{"p":["TokenSyntax","func"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`func`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`func`",7],[": ",17],["TokenSyntax",18]],"d":"The `func` keyword"},{"p":["TokenSyntax","init"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`init`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`init`",7],[": ",17],["TokenSyntax",18]],"d":"The `init` keyword"},{"p":["TokenSyntax","self"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`self`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`self`",7],[": ",17],["TokenSyntax",18]],"d":"The `self` keyword"},{"p":["TokenSyntax","true"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`true`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`true`",7],[": ",17],["TokenSyntax",18]],"d":"The `true` keyword"},{"p":["TokenSyntax","arrow"],"f":[["static",12],[" ",17],["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["arrow",7],[": ",17],["TokenSyntax",18]],"d":"The `->` token"},{"p":["TokenSyntax","break"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`break`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`break`",7],[": ",17],["TokenSyntax",18]],"d":"The `break` keyword"},{"p":["TokenSyntax","catch"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`catch`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`catch`",7],[": ",17],["TokenSyntax",18]],"d":"The `catch` keyword"},{"p":["TokenSyntax","class"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`class`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`class`",7],[": ",17],["TokenSyntax",18]],"d":"The `class` keyword"},{"p":["TokenSyntax","colon"],"f":[["static",12],[" ",17],["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["colon",7],[": ",17],["TokenSyntax",18]],"d":"The `:` token"},{"p":["TokenSyntax","comma"],"f":[["static",12],[" ",17],["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["comma",7],[": ",17],["TokenSyntax",18]],"d":"The `,` token"},{"p":["TokenSyntax","defer"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`defer`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`defer`",7],[": ",17],["TokenSyntax",18]],"d":"The `defer` keyword"},{"p":["TokenSyntax","equal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["equal",7],[": ",17],["TokenSyntax",18]],"d":"The `=` token"},{"p":["TokenSyntax","false"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`false`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`false`",7],[": ",17],["TokenSyntax",18]],"d":"The `false` keyword"},{"p":["TokenSyntax","guard"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`guard`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`guard`",7],[": ",17],["TokenSyntax",18]],"d":"The `guard` keyword"},{"p":["TokenSyntax","inout"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`inout`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`inout`",7],[": ",17],["TokenSyntax",18]],"d":"The `inout` keyword"},{"p":["TokenSyntax","pound"],"f":[["static",12],[" ",17],["var",12],[" ",17],["pound",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["pound",7],[": ",17],["TokenSyntax",18]],"d":"The `#` token"},{"p":["TokenSyntax","super"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`super`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`super`",7],[": ",17],["TokenSyntax",18]],"d":"The `super` keyword"},{"p":["TokenSyntax","throw"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`throw`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`throw`",7],[": ",17],["TokenSyntax",18]],"d":"The `throw` keyword"},{"p":["TokenSyntax","where"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`where`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`where`",7],[": ",17],["TokenSyntax",18]],"d":"The `where` keyword"},{"p":["TokenSyntax","while"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`while`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`while`",7],[": ",17],["TokenSyntax",18]],"d":"The `while` keyword"},{"p":["TokenSyntax","yield"],"f":[["static",12],[" ",17],["var",12],[" ",17],["yield",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["yield",7],[": ",17],["TokenSyntax",18]],"d":"The `yield` token"},{"p":["TokenSyntax","atSign"],"f":[["static",12],[" ",17],["var",12],[" ",17],["atSign",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["atSign",7],[": ",17],["TokenSyntax",18]],"d":"The `@` token"},{"p":["TokenSyntax","deinit"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`deinit`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`deinit`",7],[": ",17],["TokenSyntax",18]],"d":"The `deinit` keyword"},{"p":["TokenSyntax","import"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`import`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`import`",7],[": ",17],["TokenSyntax",18]],"d":"The `import` keyword"},{"p":["TokenSyntax","period"],"f":[["static",12],[" ",17],["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["period",7],[": ",17],["TokenSyntax",18]],"d":"The `.` token"},{"p":["TokenSyntax","public"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`public`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`public`",7],[": ",17],["TokenSyntax",18]],"d":"The `public` keyword"},{"p":["TokenSyntax","repeat"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`repeat`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`repeat`",7],[": ",17],["TokenSyntax",18]],"d":"The `repeat` keyword"},{"p":["TokenSyntax","return"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`return`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`return`",7],[": ",17],["TokenSyntax",18]],"d":"The `return` keyword"},{"p":["TokenSyntax","static"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`static`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`static`",7],[": ",17],["TokenSyntax",18]],"d":"The `static` keyword"},{"p":["TokenSyntax","struct"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`struct`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`struct`",7],[": ",17],["TokenSyntax",18]],"d":"The `struct` keyword"},{"p":["TokenSyntax","switch"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`switch`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`switch`",7],[": ",17],["TokenSyntax",18]],"d":"The `switch` keyword"},{"p":["TokenSyntax","throws"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`throws`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`throws`",7],[": ",17],["TokenSyntax",18]],"d":"The `throws` keyword"},{"p":["TokenSyntax","default"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`default`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`default`",7],[": ",17],["TokenSyntax",18]],"d":"The `default` keyword"},{"p":["TokenSyntax","poundIf"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundIf",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundIf",7],[": ",17],["TokenSyntax",18]],"d":"The `#if` keyword"},{"p":["TokenSyntax","private"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`private`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`private`",7],[": ",17],["TokenSyntax",18]],"d":"The `private` keyword"},{"p":["TokenSyntax","backtick"],"f":[["static",12],[" ",17],["var",12],[" ",17],["backtick",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["backtick",7],[": ",17],["TokenSyntax",18]],"d":"The ``` token"},{"p":["TokenSyntax","continue"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`continue`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`continue`",7],[": ",17],["TokenSyntax",18]],"d":"The `continue` keyword"},{"p":["TokenSyntax","ellipsis"],"f":[["static",12],[" ",17],["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["ellipsis",7],[": ",17],["TokenSyntax",18]],"d":"The `...` token"},{"p":["TokenSyntax","internal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`internal`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`internal`",7],[": ",17],["TokenSyntax",18]],"d":"The `internal` keyword"},{"p":["TokenSyntax","operator"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`operator`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`operator`",7],[": ",17],["TokenSyntax",18]],"d":"The `operator` keyword"},{"p":["TokenSyntax","protocol"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`protocol`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`protocol`",7],[": ",17],["TokenSyntax",18]],"d":"The `protocol` keyword"},{"p":["TokenSyntax","rethrows"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`rethrows`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`rethrows`",7],[": ",17],["TokenSyntax",18]],"d":"The `rethrows` keyword"},{"p":["TokenSyntax","wildcard"],"f":[["static",12],[" ",17],["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["wildcard",7],[": ",17],["TokenSyntax",18]],"d":"The `_` keyword"},{"p":["TokenSyntax","backslash"],"f":[["static",12],[" ",17],["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["backslash",7],[": ",17],["TokenSyntax",18]],"d":"The `\\` token"},{"p":["TokenSyntax","extension"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`extension`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`extension`",7],[": ",17],["TokenSyntax",18]],"d":"The `extension` keyword"},{"p":["TokenSyntax","leftAngle"],"f":[["static",12],[" ",17],["var",12],[" ",17],["leftAngle",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["leftAngle",7],[": ",17],["TokenSyntax",18]],"d":"The `<` token"},{"p":["TokenSyntax","leftBrace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["leftBrace",7],[": ",17],["TokenSyntax",18]],"d":"The `{` token"},{"p":["TokenSyntax","leftParen"],"f":[["static",12],[" ",17],["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["leftParen",7],[": ",17],["TokenSyntax",18]],"d":"The `(` token"},{"p":["TokenSyntax","poundElse"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundElse",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundElse",7],[": ",17],["TokenSyntax",18]],"d":"The `#else` keyword"},{"p":["TokenSyntax","poundFile"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundFile",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundFile",7],[": ",17],["TokenSyntax",18]],"d":"The `#file` keyword"},{"p":["TokenSyntax","poundLine"],"f":[["static",12],[" ",17],["var",12],[" ",17],["poundLine",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["poundLine",7],[": ",17],["TokenSyntax",18]],"d":"The `#line` keyword"},{"p":["TokenSyntax","semicolon"],"f":[["static",12],[" ",17],["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["semicolon",7],[": ",17],["TokenSyntax",18]],"d":"The `;` token"},{"p":["TokenSyntax","subscript"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`subscript`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`subscript`",7],[": ",17],["TokenSyntax",18]],"d":"The `subscript` keyword"},{"p":["TokenSyntax","typealias"],"f":[["static",12],[" ",17],["var",12],[" ",17],["`typealias`",7],[": ",17],["TokenSyntax",18,2974],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["`typealias`",7],[": ",17],["TokenSyntax",18]],"d":"The `typealias` keyword"},{"p":["TokenSyntax","identifier(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["identifier",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["identifier",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","regexLiteral(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["regexLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["regexLiteral",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","stringLiteral(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["stringLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["stringLiteral",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","stringSegment(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["stringSegment",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["stringSegment",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","integerLiteral(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["integerLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["integerLiteral",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","prefixOperator(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["prefixOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["prefixOperator",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","floatingLiteral(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["floatingLiteral",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["floatingLiteral",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","postfixOperator(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["postfixOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["postfixOperator",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","dollarIdentifier(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["dollarIdentifier",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["dollarIdentifier",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","contextualKeyword(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["contextualKeyword",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["contextualKeyword",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","rawStringDelimiter(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["rawStringDelimiter",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["rawStringDelimiter",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","spacedBinaryOperator(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["spacedBinaryOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["spacedBinaryOperator",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","unspacedBinaryOperator(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["unspacedBinaryOperator",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["unspacedBinaryOperator",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","unknown(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["unknown",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[") -> ",17],["TokenSyntax",18,2974]],"s":[["static",12],[" ",17],["func",12],[" ",17],["unknown",7],["(",17],["String",18],[") -> ",17],["TokenSyntax",18]]},{"p":["TokenSyntax","createNonEmptyTokenList()"],"f":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18,551]],"s":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18]],"d":"Conformance to `ExpressibleAsNonEmptyTokenList`."},{"p":["TokenSyntax","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["TokenSyntax","createTokenList()"],"f":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18,669]],"s":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18]],"d":"Conformance to `ExpressibleAsTokenList`."},{"p":["TokenSyntax","createDeclModifier()"],"f":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18,454]],"s":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18]],"d":"Conformance to `ExpressibleAsDeclModifier`."},{"p":["TokenSyntax","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["TokenSyntax","createIdentifierExpr()"],"f":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18,491]],"s":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18]],"d":"Conformance to `ExpressibleAsIdentifierExpr`."},{"p":["TokenSyntax","createBinaryOperatorExpr()"],"f":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18,559]],"s":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18]],"d":"Conformance to `ExpressibleAsBinaryOperatorExpr`."},{"p":["ExpressibleAsSyntaxBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsSyntaxBuildable",7],[" : ",17],["ExpressibleAsAttributeList",18,221],[", ",17],["ExpressibleAsPrecedenceGroupAttributeList",18,386],[", ",17],["ExpressibleAsSpecializeAttributeSpecList",18,382],[", ",17],["ExpressibleAsStringLiteralSegments",18,354],[", ",17],["ExpressibleAsSwitchCaseList",18,251]],"s":[["protocol",12],[" ",17],["ExpressibleAsSyntaxBuildable",7]]},{"p":["ExpressibleAsAsTypePattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsAsTypePattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,285]],"s":[["protocol",12],[" ",17],["ExpressibleAsAsTypePattern",7]]},{"p":["ExpressibleAsAsExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsAsExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsAsExpr",7]]},{"p":["SyntaxListBuildable"],"f":[["protocol",12],[" ",17],["SyntaxListBuildable",7]],"s":[["protocol",12],[" ",17],["SyntaxListBuildable",7]]},{"p":["SyntaxBuildable"],"f":[["protocol",12],[" ",17],["SyntaxBuildable",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["SyntaxListBuildable",18,141]],"s":[["protocol",12],[" ",17],["SyntaxBuildable",7]]},{"p":["DeclBuildable"],"f":[["protocol",12],[" ",17],["DeclBuildable",7],[" : ",17],["DeclListBuildable",18,148],[", ",17],["ExpressibleAsDeclBuildable",18,224],[", ",17],["SyntaxBuildable",18,142]],"s":[["protocol",12],[" ",17],["DeclBuildable",7]]},{"p":["ExprBuildable"],"f":[["protocol",12],[" ",17],["ExprBuildable",7],[" : ",17],["ExprListBuildable",18,149],[", ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["SyntaxBuildable",18,142]],"s":[["protocol",12],[" ",17],["ExprBuildable",7]]},{"p":["StmtBuildable"],"f":[["protocol",12],[" ",17],["StmtBuildable",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232],[", ",17],["StmtListBuildable",18,150],[", ",17],["SyntaxBuildable",18,142]],"s":[["protocol",12],[" ",17],["StmtBuildable",7]]},{"p":["TypeBuildable"],"f":[["protocol",12],[" ",17],["TypeBuildable",7],[" : ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["SyntaxBuildable",18,142],[", ",17],["TypeListBuildable",18,151]],"s":[["protocol",12],[" ",17],["TypeBuildable",7]]},{"p":["PatternBuildable"],"f":[["protocol",12],[" ",17],["PatternBuildable",7],[" : ",17],["ExpressibleAsPatternBuildable",18,285],[", ",17],["PatternListBuildable",18,156],[", ",17],["SyntaxBuildable",18,142]],"s":[["protocol",12],[" ",17],["PatternBuildable",7]]},{"p":["DeclListBuildable"],"f":[["protocol",12],[" ",17],["DeclListBuildable",7],[" : ",17],["SyntaxListBuildable",18,141]],"s":[["protocol",12],[" ",17],["DeclListBuildable",7]]},{"p":["ExprListBuildable"],"f":[["protocol",12],[" ",17],["ExprListBuildable",7],[" : ",17],["SyntaxListBuildable",18,141]],"s":[["protocol",12],[" ",17],["ExprListBuildable",7]]},{"p":["StmtListBuildable"],"f":[["protocol",12],[" ",17],["StmtListBuildable",7],[" : ",17],["SyntaxListBuildable",18,141]],"s":[["protocol",12],[" ",17],["StmtListBuildable",7]]},{"p":["TypeListBuildable"],"f":[["protocol",12],[" ",17],["TypeListBuildable",7],[" : ",17],["SyntaxListBuildable",18,141]],"s":[["protocol",12],[" ",17],["TypeListBuildable",7]]},{"p":["ExpressibleAsDoStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsDoStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsDoStmt",7]]},{"p":["ExpressibleAsIfStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsIfStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsIfStmt",7]]},{"p":["ExpressibleAsIsExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsIsExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsIsExpr",7]]},{"p":["ExpressibleAsTryExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsTryExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsTryExpr",7]]},{"p":["PatternListBuildable"],"f":[["protocol",12],[" ",17],["PatternListBuildable",7],[" : ",17],["SyntaxListBuildable",18,141]],"s":[["protocol",12],[" ",17],["PatternListBuildable",7]]},{"p":["ExpressibleAsCaseItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsCaseItem",7],[" : ",17],["ExpressibleAsCaseItemList",18,200],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsCaseItem",7]]},{"p":["ExpressibleAsDeclName"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclName",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclName",7]]},{"p":["ExpressibleAsEnumDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumDecl",7]]},{"p":["ExpressibleAsExprList"],"f":[["protocol",12],[" ",17],["ExpressibleAsExprList",7],[" : ",17],["ExpressibleAsConditionElement",18,277]],"s":[["protocol",12],[" ",17],["ExpressibleAsExprList",7]]},{"p":["ExpressibleAsObjcName"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjcName",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjcName",7]]},{"p":["ExpressibleAsSomeType"],"f":[["protocol",12],[" ",17],["ExpressibleAsSomeType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,236]],"s":[["protocol",12],[" ",17],["ExpressibleAsSomeType",7]]},{"p":["ExpressibleAsTypeExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeExpr",7]]},{"p":["ExpressibleAsArrayExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrayExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrayExpr",7]]},{"p":["ExpressibleAsArrayType"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrayType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,236]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrayType",7]]},{"p":["ExpressibleAsArrowExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrowExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrowExpr",7]]},{"p":["ExpressibleAsAttribute"],"f":[["protocol",12],[" ",17],["ExpressibleAsAttribute",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsAttribute",7]]},{"p":["ExpressibleAsAwaitExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsAwaitExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsAwaitExpr",7]]},{"p":["ExpressibleAsBreakStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsBreakStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsBreakStmt",7]]},{"p":["ExpressibleAsCatchItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsCatchItem",7],[" : ",17],["ExpressibleAsCatchItemList",18,222],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsCatchItem",7]]},{"p":["ExpressibleAsClassDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsClassDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsClassDecl",7]]},{"p":["ExpressibleAsCodeBlock"],"f":[["protocol",12],[" ",17],["ExpressibleAsCodeBlock",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsCodeBlock",7]]},{"p":["ExpressibleAsDeferStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeferStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeferStmt",7]]},{"p":["ExpressibleAsElseBlock"],"f":[["protocol",12],[" ",17],["ExpressibleAsElseBlock",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsElseBlock",7]]},{"p":["ExpressibleAsForInStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsForInStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsForInStmt",7]]},{"p":["ExpressibleAsGuardStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsGuardStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsGuardStmt",7]]},{"p":["ExpressibleAsInOutExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsInOutExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsInOutExpr",7]]},{"p":["ExpressibleAsThrowStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsThrowStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsThrowStmt",7]]},{"p":["ExpressibleAsTokenList"],"f":[["protocol",12],[" ",17],["ExpressibleAsTokenList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsTokenList",7]]},{"p":["ExpressibleAsTupleExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleExpr",7]]},{"p":["ExpressibleAsTupleType"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,236]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleType",7]]},{"p":["ExpressibleAsWhileStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsWhileStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsWhileStmt",7]]},{"p":["ExpressibleAsYieldList"],"f":[["protocol",12],[" ",17],["ExpressibleAsYieldList",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsYieldList",7]]},{"p":["ExpressibleAsYieldStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsYieldStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsYieldStmt",7]]},{"p":["ExpressibleAsAccessPath"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessPath",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessPath",7]]},{"p":["ExpressibleAsImportDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsImportDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsImportDecl",7]]},{"p":["ExpressibleAsReturnStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsReturnStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsReturnStmt",7]]},{"p":["ExpressibleAsSourceFile"],"f":[["protocol",12],[" ",17],["ExpressibleAsSourceFile",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsSourceFile",7]]},{"p":["ExpressibleAsStructDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsStructDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsStructDecl",7]]},{"p":["ExpressibleAsSwitchCase"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchCase",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchCase",7]]},{"p":["ExpressibleAsSwitchStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchStmt",7]]},{"p":["ExpressibleAsCatchClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsCatchClause",7],[" : ",17],["ExpressibleAsCatchClauseList",18,253],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsCatchClause",7]]},{"p":["ExpressibleAsClosureExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureExpr",7]]},{"p":["ExpressibleAsKeyPathExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsKeyPathExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsKeyPathExpr",7]]},{"p":["ExpressibleAsTernaryExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsTernaryExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsTernaryExpr",7]]},{"p":["ExpressibleAsWhereClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsWhereClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsWhereClause",7]]},{"p":["ExpressibleAsAccessorDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessorDecl",7],[" : ",17],["ExpressibleAsAccessorList",18,198],[", ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessorDecl",7]]},{"p":["ExpressibleAsAccessorList"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessorList",7],[" : ",17],["ExpressibleAsAccessorBlock",18,220]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessorList",7]]},{"p":["ExpressibleAsArrayElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrayElement",7],[" : ",17],["ExpressibleAsArrayElementList",18,274],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrayElement",7]]},{"p":["ExpressibleAsCaseItemList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCaseItemList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsCaseItemList",7]]},{"p":["ExpressibleAsClosureParam"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureParam",7],[" : ",17],["ExpressibleAsClosureParamList",18,275],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureParam",7]]},{"p":["ExpressibleAsContinueStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsContinueStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsContinueStmt",7]]},{"p":["ExpressibleAsDeclModifier"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclModifier",7],[" : ",17],["ExpressibleAsModifierList",18,209],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclModifier",7]]},{"p":["ExpressibleAsEnumCaseDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseDecl",7]]},{"p":["ExpressibleAsFunctionDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionDecl",7]]},{"p":["ExpressibleAsFunctionType"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,236]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionType",7]]},{"p":["ExpressibleAsIfConfigDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsIfConfigDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsIfConfigDecl",7]]},{"p":["ExpressibleAsMetatypeType"],"f":[["protocol",12],[" ",17],["ExpressibleAsMetatypeType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,236]],"s":[["protocol",12],[" ",17],["ExpressibleAsMetatypeType",7]]},{"p":["ExpressibleAsModifierList"],"f":[["protocol",12],[" ",17],["ExpressibleAsModifierList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsModifierList",7]]},{"p":["ExpressibleAsObjCSelector"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjCSelector",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjCSelector",7]]},{"p":["ExpressibleAsOperatorDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsOperatorDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsOperatorDecl",7]]},{"p":["ExpressibleAsOptionalType"],"f":[["protocol",12],[" ",17],["ExpressibleAsOptionalType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,236]],"s":[["protocol",12],[" ",17],["ExpressibleAsOptionalType",7]]},{"p":["ExpressibleAsProtocolDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsProtocolDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsProtocolDecl",7]]},{"p":["ExpressibleAsReturnClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsReturnClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsReturnClause",7]]},{"p":["ExpressibleAsSequenceExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSequenceExpr",7],[" : ",17],["ExpressibleAsCodeBlockItem",18,223],[", ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["ExpressibleAsTupleExprElement",18,289]],"s":[["protocol",12],[" ",17],["ExpressibleAsSequenceExpr",7]]},{"p":["ExpressibleAsSuperRefExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSuperRefExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsSuperRefExpr",7]]},{"p":["ExpressibleAsTuplePattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsTuplePattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,285]],"s":[["protocol",12],[" ",17],["ExpressibleAsTuplePattern",7]]},{"p":["ExpressibleAsVariableDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsVariableDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsVariableDecl",7]]},{"p":["ExpressibleAsVersionTuple"],"f":[["protocol",12],[" ",17],["ExpressibleAsVersionTuple",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsVersionTuple",7]]},{"p":["ExpressibleAsAccessorBlock"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessorBlock",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessorBlock",7]]},{"p":["ExpressibleAsAttributeList"],"f":[["protocol",12],[" ",17],["ExpressibleAsAttributeList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsAttributeList",7]]},{"p":["ExpressibleAsCatchItemList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCatchItemList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsCatchItemList",7]]},{"p":["ExpressibleAsCodeBlockItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsCodeBlockItem",7],[" : ",17],["ExpressibleAsCodeBlockItemList",18,293]],"s":[["protocol",12],[" ",17],["ExpressibleAsCodeBlockItem",7]]},{"p":["ExpressibleAsDeclBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclBuildable",7],[" : ",17],["ExpressibleAsCodeBlockItem",18,223],[", ",17],["ExpressibleAsMemberDeclListItem",18,320]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclBuildable",7]]},{"p":["ExpressibleAsExprBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsExprBuildable",7],[" : ",17],["ExpressibleAsExprList",18,160]],"s":[["protocol",12],[" ",17],["ExpressibleAsExprBuildable",7]]},{"p":["ExpressibleAsExtensionDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsExtensionDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsExtensionDecl",7]]},{"p":["ExpressibleAsInheritedType"],"f":[["protocol",12],[" ",17],["ExpressibleAsInheritedType",7],[" : ",17],["ExpressibleAsInheritedTypeList",18,302],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsInheritedType",7]]},{"p":["ExpressibleAsIsTypePattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsIsTypePattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,285]],"s":[["protocol",12],[" ",17],["ExpressibleAsIsTypePattern",7]]},{"p":["ExpressibleAsObjcNamePiece"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjcNamePiece",7],[" : ",17],["ExpressibleAsObjcName",18,161],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjcNamePiece",7]]},{"p":["ExpressibleAsPoundFileExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundFileExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundFileExpr",7]]},{"p":["ExpressibleAsPoundLineExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundLineExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundLineExpr",7]]},{"p":["ExpressibleAsStmtBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsStmtBuildable",7],[" : ",17],["ExpressibleAsCodeBlockItem",18,223]],"s":[["protocol",12],[" ",17],["ExpressibleAsStmtBuildable",7]]},{"p":["ExpressibleAsStringSegment"],"f":[["protocol",12],[" ",17],["ExpressibleAsStringSegment",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsStringSegment",7]]},{"p":["ExpressibleAsSubscriptDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsSubscriptDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsSubscriptDecl",7]]},{"p":["ExpressibleAsSubscriptExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSubscriptExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsSubscriptExpr",7]]},{"p":["ExpressibleAsTypeBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeBuildable",7],[" : ",17],["ExpressibleAsReturnClause",18,214]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeBuildable",7]]},{"p":["ExpressibleAsTypealiasDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypealiasDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypealiasDecl",7]]},{"p":["ExpressibleAsAssignmentExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsAssignmentExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsAssignmentExpr",7]]},{"p":["ExpressibleAsAttributedType"],"f":[["protocol",12],[" ",17],["ExpressibleAsAttributedType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,236]],"s":[["protocol",12],[" ",17],["ExpressibleAsAttributedType",7]]},{"p":["ExpressibleAsDictionaryExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsDictionaryExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsDictionaryExpr",7]]},{"p":["ExpressibleAsDictionaryType"],"f":[["protocol",12],[" ",17],["ExpressibleAsDictionaryType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,236]],"s":[["protocol",12],[" ",17],["ExpressibleAsDictionaryType",7]]},{"p":["ExpressibleAsExpressionStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsExpressionStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsExpressionStmt",7]]},{"p":["ExpressibleAsIdentifierExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsIdentifierExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsIdentifierExpr",7]]},{"p":["ExpressibleAsIdentifierList"],"f":[["protocol",12],[" ",17],["ExpressibleAsIdentifierList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsIdentifierList",7]]},{"p":["ExpressibleAsIfConfigClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsIfConfigClause",7],[" : ",17],["ExpressibleAsIfConfigClauseList",18,318],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsIfConfigClause",7]]},{"p":["ExpressibleAsMemberDeclList"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclList",7],[" : ",17],["ExpressibleAsMemberDeclBlock",18,264]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclList",7]]},{"p":["ExpressibleAsNilLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsNilLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsNilLiteralExpr",7]]},{"p":["ExpressibleAsPatternBinding"],"f":[["protocol",12],[" ",17],["ExpressibleAsPatternBinding",7],[" : ",17],["ExpressibleAsPatternBindingList",18,321],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsPatternBinding",7]]},{"p":["ExpressibleAsPoundErrorDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundErrorDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundErrorDecl",7]]},{"p":["ExpressibleAsSpecializeExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSpecializeExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsSpecializeExpr",7]]},{"p":["ExpressibleAsSwitchCaseList"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchCaseList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchCaseList",7]]},{"p":["ExpressibleAsTypeAnnotation"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeAnnotation",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeAnnotation",7]]},{"p":["ExpressibleAsCatchClauseList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCatchClauseList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsCatchClauseList",7]]},{"p":["ExpressibleAsCompositionType"],"f":[["protocol",12],[" ",17],["ExpressibleAsCompositionType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,236]],"s":[["protocol",12],[" ",17],["ExpressibleAsCompositionType",7]]},{"p":["ExpressibleAsCustomAttribute"],"f":[["protocol",12],[" ",17],["ExpressibleAsCustomAttribute",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsCustomAttribute",7]]},{"p":["ExpressibleAsDeclarationStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclarationStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclarationStmt",7]]},{"p":["ExpressibleAsEnumCaseElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseElement",7],[" : ",17],["ExpressibleAsEnumCaseElementList",18,327],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseElement",7]]},{"p":["ExpressibleAsEnumCasePattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumCasePattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,285]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumCasePattern",7]]},{"p":["ExpressibleAsFallthroughStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsFallthroughStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsFallthroughStmt",7]]},{"p":["ExpressibleAsForcedValueExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsForcedValueExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsForcedValueExpr",7]]},{"p":["ExpressibleAsGenericArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericArgument",7],[" : ",17],["ExpressibleAsGenericArgumentList",18,328],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericArgument",7]]},{"p":["ExpressibleAsInitializerDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsInitializerDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsInitializerDecl",7]]},{"p":["ExpressibleAsKeyPathBaseExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsKeyPathBaseExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsKeyPathBaseExpr",7]]},{"p":["ExpressibleAsMemberDeclBlock"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclBlock",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclBlock",7]]},{"p":["ExpressibleAsObjcKeyPathExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjcKeyPathExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjcKeyPathExpr",7]]},{"p":["ExpressibleAsOptionalPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsOptionalPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,285]],"s":[["protocol",12],[" ",17],["ExpressibleAsOptionalPattern",7]]},{"p":["ExpressibleAsParameterClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsParameterClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsParameterClause",7]]},{"p":["ExpressibleAsPoundAssertStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundAssertStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundAssertStmt",7]]},{"p":["ExpressibleAsPoundColumnExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundColumnExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundColumnExpr",7]]},{"p":["ExpressibleAsPoundFileIDExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundFileIDExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundFileIDExpr",7]]},{"p":["ExpressibleAsRepeatWhileStmt"],"f":[["protocol",12],[" ",17],["ExpressibleAsRepeatWhileStmt",7],[" : ",17],["ExpressibleAsStmtBuildable",18,232]],"s":[["protocol",12],[" ",17],["ExpressibleAsRepeatWhileStmt",7]]},{"p":["ExpressibleAsSwitchCaseLabel"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchCaseLabel",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchCaseLabel",7]]},{"p":["ExpressibleAsWildcardPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsWildcardPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,285]],"s":[["protocol",12],[" ",17],["ExpressibleAsWildcardPattern",7]]},{"p":["ExpressibleAsArrayElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsArrayElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsArrayElementList",7]]},{"p":["ExpressibleAsClosureParamList"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureParamList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureParamList",7]]},{"p":["ExpressibleAsClosureSignature"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureSignature",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureSignature",7]]},{"p":["ExpressibleAsConditionElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsConditionElement",7],[" : ",17],["ExpressibleAsConditionElementList",18,339],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsConditionElement",7]]},{"p":["ExpressibleAsDeclNameArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArgument",7],[" : ",17],["ExpressibleAsDeclNameArgumentList",18,340],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArgument",7]]},{"p":["ExpressibleAsFloatLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsFloatLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsFloatLiteralExpr",7]]},{"p":["ExpressibleAsFunctionCallExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionCallExpr",7],[" : ",17],["ExpressibleAsCodeBlockItem",18,223],[", ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionCallExpr",7]]},{"p":["ExpressibleAsFunctionDeclName"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionDeclName",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionDeclName",7]]},{"p":["ExpressibleAsGenericParameter"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericParameter",7],[" : ",17],["ExpressibleAsGenericParameterList",18,341],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericParameter",7]]},{"p":["ExpressibleAsMemberAccessExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberAccessExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberAccessExpr",7]]},{"p":["ExpressibleAsObjcSelectorExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjcSelectorExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjcSelectorExpr",7]]},{"p":["ExpressibleAsPatternBuildable"],"f":[["protocol",12],[" ",17],["ExpressibleAsPatternBuildable",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPatternBuildable",7]]},{"p":["ExpressibleAsPostfixUnaryExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPostfixUnaryExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsPostfixUnaryExpr",7]]},{"p":["ExpressibleAsPoundWarningDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundWarningDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundWarningDecl",7]]},{"p":["ExpressibleAsRegexLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsRegexLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsRegexLiteralExpr",7]]},{"p":["ExpressibleAsTupleExprElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleExprElement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["ExpressibleAsTupleExprElementList",18,345]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleExprElement",7]]},{"p":["ExpressibleAsTupleTypeElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleTypeElement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["ExpressibleAsTupleTypeElementList",18,346]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleTypeElement",7]]},{"p":["ExpressibleAsAccessorParameter"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessorParameter",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessorParameter",7]]},{"p":["ExpressibleAsAvailabilityEntry"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityEntry",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityEntry",7]]},{"p":["ExpressibleAsCodeBlockItemList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCodeBlockItemList",7],[" : ",17],["ExpressibleAsCodeBlock",18,172]],"s":[["protocol",12],[" ",17],["ExpressibleAsCodeBlockItemList",7]]},{"p":["ExpressibleAsDeclNameArguments"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArguments",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArguments",7]]},{"p":["ExpressibleAsDeinitializerDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeinitializerDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeinitializerDecl",7]]},{"p":["ExpressibleAsDictionaryElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsDictionaryElement",7],[" : ",17],["ExpressibleAsDictionaryElementList",18,348],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsDictionaryElement",7]]},{"p":["ExpressibleAsExpressionPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsExpressionPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,285]],"s":[["protocol",12],[" ",17],["ExpressibleAsExpressionPattern",7]]},{"p":["ExpressibleAsExpressionSegment"],"f":[["protocol",12],[" ",17],["ExpressibleAsExpressionSegment",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsExpressionSegment",7]]},{"p":["ExpressibleAsFunctionParameter"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionParameter",7],[" : ",17],["ExpressibleAsFunctionParameterList",18,351],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionParameter",7]]},{"p":["ExpressibleAsFunctionSignature"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionSignature",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionSignature",7]]},{"p":["ExpressibleAsIdentifierPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsIdentifierPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,285]],"s":[["protocol",12],[" ",17],["ExpressibleAsIdentifierPattern",7]]},{"p":["ExpressibleAsInheritedTypeList"],"f":[["protocol",12],[" ",17],["ExpressibleAsInheritedTypeList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsInheritedTypeList",7]]},{"p":["ExpressibleAsInitializerClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsInitializerClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsInitializerClause",7]]},{"p":["ExpressibleAsNonEmptyTokenList"],"f":[["protocol",12],[" ",17],["ExpressibleAsNonEmptyTokenList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsNonEmptyTokenList",7]]},{"p":["ExpressibleAsObjCSelectorPiece"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjCSelectorPiece",7],[" : ",17],["ExpressibleAsObjCSelector",18,210],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjCSelectorPiece",7]]},{"p":["ExpressibleAsObjectLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsObjectLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsObjectLiteralExpr",7]]},{"p":["ExpressibleAsPoundFilePathExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundFilePathExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundFilePathExpr",7]]},{"p":["ExpressibleAsPoundFunctionExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundFunctionExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundFunctionExpr",7]]},{"p":["ExpressibleAsQualifiedDeclName"],"f":[["protocol",12],[" ",17],["ExpressibleAsQualifiedDeclName",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsQualifiedDeclName",7]]},{"p":["ExpressibleAsStringLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsStringLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsStringLiteralExpr",7]]},{"p":["ExpressibleAsAssociatedtypeDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsAssociatedtypeDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsAssociatedtypeDecl",7]]},{"p":["ExpressibleAsBinaryOperatorExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsBinaryOperatorExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsBinaryOperatorExpr",7]]},{"p":["ExpressibleAsBooleanLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsBooleanLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsBooleanLiteralExpr",7]]},{"p":["ExpressibleAsClosureCaptureItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureItem",7],[" : ",17],["ExpressibleAsClosureCaptureItemList",18,359],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureItem",7]]},{"p":["ExpressibleAsElseIfContinuation"],"f":[["protocol",12],[" ",17],["ExpressibleAsElseIfContinuation",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsElseIfContinuation",7]]},{"p":["ExpressibleAsGenericRequirement"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericRequirement",7],[" : ",17],["ExpressibleAsGenericRequirementList",18,364],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericRequirement",7]]},{"p":["ExpressibleAsGenericWhereClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericWhereClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericWhereClause",7]]},{"p":["ExpressibleAsIfConfigClauseList"],"f":[["protocol",12],[" ",17],["ExpressibleAsIfConfigClauseList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsIfConfigClauseList",7]]},{"p":["ExpressibleAsIntegerLiteralExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsIntegerLiteralExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsIntegerLiteralExpr",7]]},{"p":["ExpressibleAsMemberDeclListItem"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclListItem",7],[" : ",17],["ExpressibleAsMemberDeclList",18,246]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberDeclListItem",7]]},{"p":["ExpressibleAsPatternBindingList"],"f":[["protocol",12],[" ",17],["ExpressibleAsPatternBindingList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPatternBindingList",7]]},{"p":["ExpressibleAsPoundDsohandleExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundDsohandleExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundDsohandleExpr",7]]},{"p":["ExpressibleAsPrefixOperatorExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrefixOperatorExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrefixOperatorExpr",7]]},{"p":["ExpressibleAsSwitchDefaultLabel"],"f":[["protocol",12],[" ",17],["ExpressibleAsSwitchDefaultLabel",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsSwitchDefaultLabel",7]]},{"p":["ExpressibleAsAccessLevelModifier"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessLevelModifier",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessLevelModifier",7]]},{"p":["ExpressibleAsAccessPathComponent"],"f":[["protocol",12],[" ",17],["ExpressibleAsAccessPathComponent",7],[" : ",17],["ExpressibleAsAccessPath",18,185],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsAccessPathComponent",7]]},{"p":["ExpressibleAsEnumCaseElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsEnumCaseElementList",7]]},{"p":["ExpressibleAsGenericArgumentList"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericArgumentList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericArgumentList",7]]},{"p":["ExpressibleAsPostfixIfConfigExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsPostfixIfConfigExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsPostfixIfConfigExpr",7]]},{"p":["ExpressibleAsPoundSourceLocation"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundSourceLocation",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundSourceLocation",7]]},{"p":["ExpressibleAsPrecedenceGroupDecl"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupDecl",7],[" : ",17],["ExpressibleAsDeclBuildable",18,224]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupDecl",7]]},{"p":["ExpressibleAsSameTypeRequirement"],"f":[["protocol",12],[" ",17],["ExpressibleAsSameTypeRequirement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsSameTypeRequirement",7]]},{"p":["ExpressibleAsTargetFunctionEntry"],"f":[["protocol",12],[" ",17],["ExpressibleAsTargetFunctionEntry",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsTargetFunctionEntry",7]]},{"p":["ExpressibleAsTuplePatternElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsTuplePatternElement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["ExpressibleAsTuplePatternElementList",18,371]],"s":[["protocol",12],[" ",17],["ExpressibleAsTuplePatternElement",7]]},{"p":["ExpressibleAsValueBindingPattern"],"f":[["protocol",12],[" ",17],["ExpressibleAsValueBindingPattern",7],[" : ",17],["ExpressibleAsPatternBuildable",18,285]],"s":[["protocol",12],[" ",17],["ExpressibleAsValueBindingPattern",7]]},{"p":["ExpressibleAsAvailabilityArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityArgument",7],[" : ",17],["ExpressibleAsAvailabilitySpecList",18,337],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityArgument",7]]},{"p":["ExpressibleAsAvailabilitySpecList"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilitySpecList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilitySpecList",7]]},{"p":["ExpressibleAsClassRestrictionType"],"f":[["protocol",12],[" ",17],["ExpressibleAsClassRestrictionType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,236]],"s":[["protocol",12],[" ",17],["ExpressibleAsClassRestrictionType",7]]},{"p":["ExpressibleAsConditionElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsConditionElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsConditionElementList",7]]},{"p":["ExpressibleAsDeclNameArgumentList"],"f":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArgumentList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsDeclNameArgumentList",7]]},{"p":["ExpressibleAsGenericParameterList"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericParameterList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericParameterList",7]]},{"p":["ExpressibleAsMemberTypeIdentifier"],"f":[["protocol",12],[" ",17],["ExpressibleAsMemberTypeIdentifier",7],[" : ",17],["ExpressibleAsTypeBuildable",18,236]],"s":[["protocol",12],[" ",17],["ExpressibleAsMemberTypeIdentifier",7]]},{"p":["ExpressibleAsOptionalChainingExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsOptionalChainingExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsOptionalChainingExpr",7]]},{"p":["ExpressibleAsSimpleTypeIdentifier"],"f":[["protocol",12],[" ",17],["ExpressibleAsSimpleTypeIdentifier",7],[" : ",17],["ExpressibleAsTypeAnnotation",18,252],[", ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["ExpressibleAsTypeExpr",18,163]],"s":[["protocol",12],[" ",17],["ExpressibleAsSimpleTypeIdentifier",7]]},{"p":["ExpressibleAsTupleExprElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleExprElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleExprElementList",7]]},{"p":["ExpressibleAsTupleTypeElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsTupleTypeElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsTupleTypeElementList",7]]},{"p":["ExpressibleAsAvailabilityCondition"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityCondition",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityCondition",7]]},{"p":["ExpressibleAsDictionaryElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsDictionaryElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsDictionaryElementList",7]]},{"p":["ExpressibleAsDiscardAssignmentExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsDiscardAssignmentExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsDiscardAssignmentExpr",7]]},{"p":["ExpressibleAsEditorPlaceholderExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsEditorPlaceholderExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsEditorPlaceholderExpr",7]]},{"p":["ExpressibleAsFunctionParameterList"],"f":[["protocol",12],[" ",17],["ExpressibleAsFunctionParameterList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsFunctionParameterList",7]]},{"p":["ExpressibleAsGenericArgumentClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericArgumentClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericArgumentClause",7]]},{"p":["ExpressibleAsPrimaryAssociatedType"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedType",7],[" : ",17],["ExpressibleAsPrimaryAssociatedTypeList",18,376],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedType",7]]},{"p":["ExpressibleAsStringLiteralSegments"],"f":[["protocol",12],[" ",17],["ExpressibleAsStringLiteralSegments",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsStringLiteralSegments",7]]},{"p":["ExpressibleAsSymbolicReferenceExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsSymbolicReferenceExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsSymbolicReferenceExpr",7]]},{"p":["ExpressibleAsTypeInheritanceClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeInheritanceClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeInheritanceClause",7]]},{"p":["ExpressibleAsTypeInitializerClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsTypeInitializerClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsTypeInitializerClause",7]]},{"p":["ExpressibleAsUnresolvedPatternExpr"],"f":[["protocol",12],[" ",17],["ExpressibleAsUnresolvedPatternExpr",7],[" : ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["protocol",12],[" ",17],["ExpressibleAsUnresolvedPatternExpr",7]]},{"p":["ExpressibleAsClosureCaptureItemList"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureItemList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureItemList",7]]},{"p":["ExpressibleAsCompositionTypeElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsCompositionTypeElement",7],[" : ",17],["ExpressibleAsCompositionTypeElementList",18,377],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsCompositionTypeElement",7]]},{"p":["ExpressibleAsConformanceRequirement"],"f":[["protocol",12],[" ",17],["ExpressibleAsConformanceRequirement",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsConformanceRequirement",7]]},{"p":["ExpressibleAsDifferentiabilityParam"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParam",7],[" : ",17],["ExpressibleAsDifferentiabilityParamList",18,378],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParam",7]]},{"p":["ExpressibleAsGenericParameterClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericParameterClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericParameterClause",7]]},{"p":["ExpressibleAsGenericRequirementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsGenericRequirementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsGenericRequirementList",7]]},{"p":["ExpressibleAsLabeledSpecializeEntry"],"f":[["protocol",12],[" ",17],["ExpressibleAsLabeledSpecializeEntry",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsLabeledSpecializeEntry",7]]},{"p":["ExpressibleAsClosureCaptureSignature"],"f":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureSignature",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsClosureCaptureSignature",7]]},{"p":["ExpressibleAsDifferentiabilityParams"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParams",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParams",7]]},{"p":["ExpressibleAsPoundSourceLocationArgs"],"f":[["protocol",12],[" ",17],["ExpressibleAsPoundSourceLocationArgs",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsPoundSourceLocationArgs",7]]},{"p":["ExpressibleAsPrecedenceGroupNameList"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupNameList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupNameList",7]]},{"p":["ExpressibleAsPrecedenceGroupRelation"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupRelation",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupRelation",7]]},{"p":["ExpressibleAsTuplePatternElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsTuplePatternElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsTuplePatternElementList",7]]},{"p":["ExpressibleAsUnavailabilityCondition"],"f":[["protocol",12],[" ",17],["ExpressibleAsUnavailabilityCondition",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsUnavailabilityCondition",7]]},{"p":["ExpressibleAsMatchingPatternCondition"],"f":[["protocol",12],[" ",17],["ExpressibleAsMatchingPatternCondition",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsMatchingPatternCondition",7]]},{"p":["ExpressibleAsOptionalBindingCondition"],"f":[["protocol",12],[" ",17],["ExpressibleAsOptionalBindingCondition",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsOptionalBindingCondition",7]]},{"p":["ExpressibleAsPrecedenceGroupAssignment"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAssignment",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAssignment",7]]},{"p":["ExpressibleAsPrimaryAssociatedTypeList"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedTypeList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrimaryAssociatedTypeList",7]]},{"p":["ExpressibleAsCompositionTypeElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsCompositionTypeElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsCompositionTypeElementList",7]]},{"p":["ExpressibleAsDifferentiabilityParamList"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParamList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParamList",7]]},{"p":["ExpressibleAsOperatorPrecedenceAndTypes"],"f":[["protocol",12],[" ",17],["ExpressibleAsOperatorPrecedenceAndTypes",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsOperatorPrecedenceAndTypes",7]]},{"p":["ExpressibleAsPrecedenceGroupNameElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupNameElement",7],[" : ",17],["ExpressibleAsPrecedenceGroupNameList",18,369],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupNameElement",7]]},{"p":["ExpressibleAsAvailabilityLabeledArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityLabeledArgument",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityLabeledArgument",7]]},{"p":["ExpressibleAsSpecializeAttributeSpecList"],"f":[["protocol",12],[" ",17],["ExpressibleAsSpecializeAttributeSpecList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsSpecializeAttributeSpecList",7]]},{"p":["ExpressibleAsImplementsAttributeArguments"],"f":[["protocol",12],[" ",17],["ExpressibleAsImplementsAttributeArguments",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsImplementsAttributeArguments",7]]},{"p":["ExpressibleAsNamedAttributeStringArgument"],"f":[["protocol",12],[" ",17],["ExpressibleAsNamedAttributeStringArgument",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsNamedAttributeStringArgument",7]]},{"p":["ExpressibleAsPrecedenceGroupAssociativity"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAssociativity",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAssociativity",7]]},{"p":["ExpressibleAsPrecedenceGroupAttributeList"],"f":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAttributeList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsPrecedenceGroupAttributeList",7]]},{"p":["ExpressibleAsDifferentiabilityParamsClause"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParamsClause",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiabilityParamsClause",7]]},{"p":["ExpressibleAsAvailabilityVersionRestriction"],"f":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityVersionRestriction",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsAvailabilityVersionRestriction",7]]},{"p":["ExpressibleAsMultipleTrailingClosureElement"],"f":[["protocol",12],[" ",17],["ExpressibleAsMultipleTrailingClosureElement",7],[" : ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,392],[", ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsMultipleTrailingClosureElement",7]]},{"p":["ExpressibleAsImplicitlyUnwrappedOptionalType"],"f":[["protocol",12],[" ",17],["ExpressibleAsImplicitlyUnwrappedOptionalType",7],[" : ",17],["ExpressibleAsTypeBuildable",18,236]],"s":[["protocol",12],[" ",17],["ExpressibleAsImplicitlyUnwrappedOptionalType",7]]},{"p":["ExpressibleAsDifferentiableAttributeArguments"],"f":[["protocol",12],[" ",17],["ExpressibleAsDifferentiableAttributeArguments",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsDifferentiableAttributeArguments",7]]},{"p":["ExpressibleAsMultipleTrailingClosureElementList"],"f":[["protocol",12],[" ",17],["ExpressibleAsMultipleTrailingClosureElementList",7]],"s":[["protocol",12],[" ",17],["ExpressibleAsMultipleTrailingClosureElementList",7]]},{"p":["ExpressibleAsDerivativeRegistrationAttributeArguments"],"f":[["protocol",12],[" ",17],["ExpressibleAsDerivativeRegistrationAttributeArguments",7],[" : ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["protocol",12],[" ",17],["ExpressibleAsDerivativeRegistrationAttributeArguments",7]]},{"p":["AccessPathBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["AccessPathBuilder",7]],"s":[["struct",12],[" ",17],["AccessPathBuilder",7]]},{"p":["AccessorListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["AccessorListBuilder",7]],"s":[["struct",12],[" ",17],["AccessorListBuilder",7]]},{"p":["CaseItemListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CaseItemListBuilder",7]],"s":[["struct",12],[" ",17],["CaseItemListBuilder",7]]},{"p":["ModifierListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ModifierListBuilder",7]],"s":[["struct",12],[" ",17],["ModifierListBuilder",7]]},{"p":["ObjCSelectorBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ObjCSelectorBuilder",7]],"s":[["struct",12],[" ",17],["ObjCSelectorBuilder",7]]},{"p":["AttributeListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["AttributeListBuilder",7]],"s":[["struct",12],[" ",17],["AttributeListBuilder",7]]},{"p":["CatchItemListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CatchItemListBuilder",7]],"s":[["struct",12],[" ",17],["CatchItemListBuilder",7]]},{"p":["IdentifierListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["IdentifierListBuilder",7]],"s":[["struct",12],[" ",17],["IdentifierListBuilder",7]]},{"p":["MemberDeclListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["MemberDeclListBuilder",7]],"s":[["struct",12],[" ",17],["MemberDeclListBuilder",7]]},{"p":["SwitchCaseListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["SwitchCaseListBuilder",7]],"s":[["struct",12],[" ",17],["SwitchCaseListBuilder",7]]},{"p":["CatchClauseListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CatchClauseListBuilder",7]],"s":[["struct",12],[" ",17],["CatchClauseListBuilder",7]]},{"p":["ArrayElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ArrayElementListBuilder",7]],"s":[["struct",12],[" ",17],["ArrayElementListBuilder",7]]},{"p":["ClosureParamListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ClosureParamListBuilder",7]],"s":[["struct",12],[" ",17],["ClosureParamListBuilder",7]]},{"p":["CodeBlockItemListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CodeBlockItemListBuilder",7]],"s":[["struct",12],[" ",17],["CodeBlockItemListBuilder",7]]},{"p":["InheritedTypeListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["InheritedTypeListBuilder",7]],"s":[["struct",12],[" ",17],["InheritedTypeListBuilder",7]]},{"p":["NonEmptyTokenListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["NonEmptyTokenListBuilder",7]],"s":[["struct",12],[" ",17],["NonEmptyTokenListBuilder",7]]},{"p":["IfConfigClauseListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["IfConfigClauseListBuilder",7]],"s":[["struct",12],[" ",17],["IfConfigClauseListBuilder",7]]},{"p":["PatternBindingListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["PatternBindingListBuilder",7]],"s":[["struct",12],[" ",17],["PatternBindingListBuilder",7]]},{"p":["EnumCaseElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["EnumCaseElementListBuilder",7]],"s":[["struct",12],[" ",17],["EnumCaseElementListBuilder",7]]},{"p":["GenericArgumentListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["GenericArgumentListBuilder",7]],"s":[["struct",12],[" ",17],["GenericArgumentListBuilder",7]]},{"p":["AvailabilitySpecListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["AvailabilitySpecListBuilder",7]],"s":[["struct",12],[" ",17],["AvailabilitySpecListBuilder",7]]},{"p":["ConditionElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ConditionElementListBuilder",7]],"s":[["struct",12],[" ",17],["ConditionElementListBuilder",7]]},{"p":["DeclNameArgumentListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["DeclNameArgumentListBuilder",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentListBuilder",7]]},{"p":["GenericParameterListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["GenericParameterListBuilder",7]],"s":[["struct",12],[" ",17],["GenericParameterListBuilder",7]]},{"p":["TupleExprElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["TupleExprElementListBuilder",7]],"s":[["struct",12],[" ",17],["TupleExprElementListBuilder",7]]},{"p":["TupleTypeElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["TupleTypeElementListBuilder",7]],"s":[["struct",12],[" ",17],["TupleTypeElementListBuilder",7]]},{"p":["DictionaryElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["DictionaryElementListBuilder",7]],"s":[["struct",12],[" ",17],["DictionaryElementListBuilder",7]]},{"p":["FunctionParameterListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["FunctionParameterListBuilder",7]],"s":[["struct",12],[" ",17],["FunctionParameterListBuilder",7]]},{"p":["StringLiteralSegmentsBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["StringLiteralSegmentsBuilder",7]],"s":[["struct",12],[" ",17],["StringLiteralSegmentsBuilder",7]]},{"p":["ClosureCaptureItemListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ClosureCaptureItemListBuilder",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItemListBuilder",7]]},{"p":["GenericRequirementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["GenericRequirementListBuilder",7]],"s":[["struct",12],[" ",17],["GenericRequirementListBuilder",7]]},{"p":["PrecedenceGroupNameListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["PrecedenceGroupNameListBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameListBuilder",7]]},{"p":["TuplePatternElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["TuplePatternElementListBuilder",7]],"s":[["struct",12],[" ",17],["TuplePatternElementListBuilder",7]]},{"p":["PrimaryAssociatedTypeListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["PrimaryAssociatedTypeListBuilder",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeListBuilder",7]]},{"p":["CompositionTypeElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["CompositionTypeElementListBuilder",7]],"s":[["struct",12],[" ",17],["CompositionTypeElementListBuilder",7]]},{"p":["DifferentiabilityParamListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["DifferentiabilityParamListBuilder",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamListBuilder",7]]},{"p":["SpecializeAttributeSpecListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["SpecializeAttributeSpecListBuilder",7]],"s":[["struct",12],[" ",17],["SpecializeAttributeSpecListBuilder",7]]},{"p":["PrecedenceGroupAttributeListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["PrecedenceGroupAttributeListBuilder",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAttributeListBuilder",7]]},{"p":["MultipleTrailingClosureElementListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["MultipleTrailingClosureElementListBuilder",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElementListBuilder",7]]},{"p":["ExprListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ExprListBuilder",7]],"s":[["struct",12],[" ",17],["ExprListBuilder",7]]},{"p":["ObjcNameBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["ObjcNameBuilder",7]],"s":[["struct",12],[" ",17],["ObjcNameBuilder",7]]},{"p":["TokenListBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["TokenListBuilder",7]],"s":[["struct",12],[" ",17],["TokenListBuilder",7]]},{"p":["AccessPath"],"f":[["struct",12],[" ",17],["AccessPath",7]],"s":[["struct",12],[" ",17],["AccessPath",7]],"d":"`AccessPath` represents a collection of `AccessPathComponent`s."},{"p":["ImportDecl"],"f":[["struct",12],[" ",17],["ImportDecl",7]],"s":[["struct",12],[" ",17],["ImportDecl",7]]},{"p":["ReturnStmt"],"f":[["struct",12],[" ",17],["ReturnStmt",7]],"s":[["struct",12],[" ",17],["ReturnStmt",7]]},{"p":["SourceFile"],"f":[["struct",12],[" ",17],["SourceFile",7]],"s":[["struct",12],[" ",17],["SourceFile",7]]},{"p":["StructDecl"],"f":[["struct",12],[" ",17],["StructDecl",7]],"s":[["struct",12],[" ",17],["StructDecl",7]]},{"p":["SwitchCase"],"f":[["struct",12],[" ",17],["SwitchCase",7]],"s":[["struct",12],[" ",17],["SwitchCase",7]]},{"p":["SwitchStmt"],"f":[["struct",12],[" ",17],["SwitchStmt",7]],"s":[["struct",12],[" ",17],["SwitchStmt",7]]},{"p":["CatchClause"],"f":[["struct",12],[" ",17],["CatchClause",7]],"s":[["struct",12],[" ",17],["CatchClause",7]]},{"p":["ClosureExpr"],"f":[["struct",12],[" ",17],["ClosureExpr",7]],"s":[["struct",12],[" ",17],["ClosureExpr",7]]},{"p":["KeyPathExpr"],"f":[["struct",12],[" ",17],["KeyPathExpr",7]],"s":[["struct",12],[" ",17],["KeyPathExpr",7]]},{"p":["TernaryExpr"],"f":[["struct",12],[" ",17],["TernaryExpr",7]],"s":[["struct",12],[" ",17],["TernaryExpr",7]]},{"p":["WhereClause"],"f":[["struct",12],[" ",17],["WhereClause",7]],"s":[["struct",12],[" ",17],["WhereClause",7]]},{"p":["AccessorDecl"],"f":[["struct",12],[" ",17],["AccessorDecl",7]],"s":[["struct",12],[" ",17],["AccessorDecl",7]]},{"p":["AccessorList"],"f":[["struct",12],[" ",17],["AccessorList",7]],"s":[["struct",12],[" ",17],["AccessorList",7]],"d":"`AccessorList` represents a collection of `AccessorDecl`s."},{"p":["ArrayElement"],"f":[["struct",12],[" ",17],["ArrayElement",7]],"s":[["struct",12],[" ",17],["ArrayElement",7]]},{"p":["CaseItemList"],"f":[["struct",12],[" ",17],["CaseItemList",7]],"s":[["struct",12],[" ",17],["CaseItemList",7]],"d":"`CaseItemList` represents a collection of `CaseItem`s."},{"p":["ClosureParam"],"f":[["struct",12],[" ",17],["ClosureParam",7]],"s":[["struct",12],[" ",17],["ClosureParam",7]]},{"p":["ContinueStmt"],"f":[["struct",12],[" ",17],["ContinueStmt",7]],"s":[["struct",12],[" ",17],["ContinueStmt",7]]},{"p":["DeclModifier"],"f":[["struct",12],[" ",17],["DeclModifier",7]],"s":[["struct",12],[" ",17],["DeclModifier",7]]},{"p":["EnumCaseDecl"],"f":[["struct",12],[" ",17],["EnumCaseDecl",7]],"s":[["struct",12],[" ",17],["EnumCaseDecl",7]],"d":"A `case` declaration of a Swift `enum`. It can have 1 or more`EnumCaseElement`s inside, each declaring a different case of theenum."},{"p":["FunctionDecl"],"f":[["struct",12],[" ",17],["FunctionDecl",7]],"s":[["struct",12],[" ",17],["FunctionDecl",7]]},{"p":["FunctionType"],"f":[["struct",12],[" ",17],["FunctionType",7]],"s":[["struct",12],[" ",17],["FunctionType",7]]},{"p":["IfConfigDecl"],"f":[["struct",12],[" ",17],["IfConfigDecl",7]],"s":[["struct",12],[" ",17],["IfConfigDecl",7]]},{"p":["MetatypeType"],"f":[["struct",12],[" ",17],["MetatypeType",7]],"s":[["struct",12],[" ",17],["MetatypeType",7]]},{"p":["ModifierList"],"f":[["struct",12],[" ",17],["ModifierList",7]],"s":[["struct",12],[" ",17],["ModifierList",7]],"d":"`ModifierList` represents a collection of `DeclModifier`s."},{"p":["ObjCSelector"],"f":[["struct",12],[" ",17],["ObjCSelector",7]],"s":[["struct",12],[" ",17],["ObjCSelector",7]],"d":"`ObjCSelector` represents a collection of `ObjCSelectorPiece`s."},{"p":["OperatorDecl"],"f":[["struct",12],[" ",17],["OperatorDecl",7]],"s":[["struct",12],[" ",17],["OperatorDecl",7]],"d":"A Swift `operator` declaration."},{"p":["OptionalType"],"f":[["struct",12],[" ",17],["OptionalType",7]],"s":[["struct",12],[" ",17],["OptionalType",7]]},{"p":["ProtocolDecl"],"f":[["struct",12],[" ",17],["ProtocolDecl",7]],"s":[["struct",12],[" ",17],["ProtocolDecl",7]]},{"p":["ReturnClause"],"f":[["struct",12],[" ",17],["ReturnClause",7]],"s":[["struct",12],[" ",17],["ReturnClause",7]]},{"p":["SequenceExpr"],"f":[["struct",12],[" ",17],["SequenceExpr",7]],"s":[["struct",12],[" ",17],["SequenceExpr",7]]},{"p":["SuperRefExpr"],"f":[["struct",12],[" ",17],["SuperRefExpr",7]],"s":[["struct",12],[" ",17],["SuperRefExpr",7]]},{"p":["TuplePattern"],"f":[["struct",12],[" ",17],["TuplePattern",7]],"s":[["struct",12],[" ",17],["TuplePattern",7]]},{"p":["VariableDecl"],"f":[["struct",12],[" ",17],["VariableDecl",7]],"s":[["struct",12],[" ",17],["VariableDecl",7]]},{"p":["VersionTuple"],"f":[["struct",12],[" ",17],["VersionTuple",7]],"s":[["struct",12],[" ",17],["VersionTuple",7]],"d":"A version number of the form major.minor.patch in which the minorand patch part may be ommited."},{"p":["AccessorBlock"],"f":[["struct",12],[" ",17],["AccessorBlock",7]],"s":[["struct",12],[" ",17],["AccessorBlock",7]]},{"p":["AsTypePattern"],"f":[["struct",12],[" ",17],["AsTypePattern",7]],"s":[["struct",12],[" ",17],["AsTypePattern",7]]},{"p":["AttributeList"],"f":[["struct",12],[" ",17],["AttributeList",7]],"s":[["struct",12],[" ",17],["AttributeList",7]],"d":"`AttributeList` represents a collection of `SyntaxBuildable`s."},{"p":["CatchItemList"],"f":[["struct",12],[" ",17],["CatchItemList",7]],"s":[["struct",12],[" ",17],["CatchItemList",7]],"d":"`CatchItemList` represents a collection of `CatchItem`s."},{"p":["CodeBlockItem"],"f":[["struct",12],[" ",17],["CodeBlockItem",7]],"s":[["struct",12],[" ",17],["CodeBlockItem",7]],"d":"A CodeBlockItem is any Syntax node that appears on its own line insidea CodeBlock."},{"p":["ExtensionDecl"],"f":[["struct",12],[" ",17],["ExtensionDecl",7]],"s":[["struct",12],[" ",17],["ExtensionDecl",7]]},{"p":["InheritedType"],"f":[["struct",12],[" ",17],["InheritedType",7]],"s":[["struct",12],[" ",17],["InheritedType",7]]},{"p":["IsTypePattern"],"f":[["struct",12],[" ",17],["IsTypePattern",7]],"s":[["struct",12],[" ",17],["IsTypePattern",7]]},{"p":["ObjcNamePiece"],"f":[["struct",12],[" ",17],["ObjcNamePiece",7]],"s":[["struct",12],[" ",17],["ObjcNamePiece",7]]},{"p":["PoundFileExpr"],"f":[["struct",12],[" ",17],["PoundFileExpr",7]],"s":[["struct",12],[" ",17],["PoundFileExpr",7]]},{"p":["PoundLineExpr"],"f":[["struct",12],[" ",17],["PoundLineExpr",7]],"s":[["struct",12],[" ",17],["PoundLineExpr",7]]},{"p":["StringSegment"],"f":[["struct",12],[" ",17],["StringSegment",7]],"s":[["struct",12],[" ",17],["StringSegment",7]]},{"p":["SubscriptDecl"],"f":[["struct",12],[" ",17],["SubscriptDecl",7]],"s":[["struct",12],[" ",17],["SubscriptDecl",7]]},{"p":["SubscriptExpr"],"f":[["struct",12],[" ",17],["SubscriptExpr",7]],"s":[["struct",12],[" ",17],["SubscriptExpr",7]]},{"p":["TypealiasDecl"],"f":[["struct",12],[" ",17],["TypealiasDecl",7]],"s":[["struct",12],[" ",17],["TypealiasDecl",7]]},{"p":["AssignmentExpr"],"f":[["struct",12],[" ",17],["AssignmentExpr",7]],"s":[["struct",12],[" ",17],["AssignmentExpr",7]]},{"p":["AttributedType"],"f":[["struct",12],[" ",17],["AttributedType",7]],"s":[["struct",12],[" ",17],["AttributedType",7]]},{"p":["DictionaryExpr"],"f":[["struct",12],[" ",17],["DictionaryExpr",7]],"s":[["struct",12],[" ",17],["DictionaryExpr",7]]},{"p":["DictionaryType"],"f":[["struct",12],[" ",17],["DictionaryType",7]],"s":[["struct",12],[" ",17],["DictionaryType",7]]},{"p":["ExpressionStmt"],"f":[["struct",12],[" ",17],["ExpressionStmt",7]],"s":[["struct",12],[" ",17],["ExpressionStmt",7]]},{"p":["IdentifierExpr"],"f":[["struct",12],[" ",17],["IdentifierExpr",7]],"s":[["struct",12],[" ",17],["IdentifierExpr",7]]},{"p":["IdentifierList"],"f":[["struct",12],[" ",17],["IdentifierList",7]],"s":[["struct",12],[" ",17],["IdentifierList",7]],"d":"`IdentifierList` represents a collection of `TokenSyntax`s."},{"p":["IfConfigClause"],"f":[["struct",12],[" ",17],["IfConfigClause",7]],"s":[["struct",12],[" ",17],["IfConfigClause",7]]},{"p":["MemberDeclList"],"f":[["struct",12],[" ",17],["MemberDeclList",7]],"s":[["struct",12],[" ",17],["MemberDeclList",7]],"d":"`MemberDeclList` represents a collection of `MemberDeclListItem`s."},{"p":["NilLiteralExpr"],"f":[["struct",12],[" ",17],["NilLiteralExpr",7]],"s":[["struct",12],[" ",17],["NilLiteralExpr",7]]},{"p":["PatternBinding"],"f":[["struct",12],[" ",17],["PatternBinding",7]],"s":[["struct",12],[" ",17],["PatternBinding",7]]},{"p":["PoundErrorDecl"],"f":[["struct",12],[" ",17],["PoundErrorDecl",7]],"s":[["struct",12],[" ",17],["PoundErrorDecl",7]]},{"p":["SpecializeExpr"],"f":[["struct",12],[" ",17],["SpecializeExpr",7]],"s":[["struct",12],[" ",17],["SpecializeExpr",7]]},{"p":["SwitchCaseList"],"f":[["struct",12],[" ",17],["SwitchCaseList",7]],"s":[["struct",12],[" ",17],["SwitchCaseList",7]],"d":"`SwitchCaseList` represents a collection of `SyntaxBuildable`s."},{"p":["TypeAnnotation"],"f":[["struct",12],[" ",17],["TypeAnnotation",7]],"s":[["struct",12],[" ",17],["TypeAnnotation",7]]},{"p":["CatchClauseList"],"f":[["struct",12],[" ",17],["CatchClauseList",7]],"s":[["struct",12],[" ",17],["CatchClauseList",7]],"d":"`CatchClauseList` represents a collection of `CatchClause`s."},{"p":["CompositionType"],"f":[["struct",12],[" ",17],["CompositionType",7]],"s":[["struct",12],[" ",17],["CompositionType",7]]},{"p":["CustomAttribute"],"f":[["struct",12],[" ",17],["CustomAttribute",7]],"s":[["struct",12],[" ",17],["CustomAttribute",7]],"d":"A custom `@` attribute."},{"p":["DeclarationStmt"],"f":[["struct",12],[" ",17],["DeclarationStmt",7]],"s":[["struct",12],[" ",17],["DeclarationStmt",7]]},{"p":["EnumCaseElement"],"f":[["struct",12],[" ",17],["EnumCaseElement",7]],"s":[["struct",12],[" ",17],["EnumCaseElement",7]],"d":"An element of an enum case, containing the name of the case and,optionally, either associated values or an assignment to a raw value."},{"p":["EnumCasePattern"],"f":[["struct",12],[" ",17],["EnumCasePattern",7]],"s":[["struct",12],[" ",17],["EnumCasePattern",7]]},{"p":["FallthroughStmt"],"f":[["struct",12],[" ",17],["FallthroughStmt",7]],"s":[["struct",12],[" ",17],["FallthroughStmt",7]]},{"p":["ForcedValueExpr"],"f":[["struct",12],[" ",17],["ForcedValueExpr",7]],"s":[["struct",12],[" ",17],["ForcedValueExpr",7]]},{"p":["GenericArgument"],"f":[["struct",12],[" ",17],["GenericArgument",7]],"s":[["struct",12],[" ",17],["GenericArgument",7]]},{"p":["InitializerDecl"],"f":[["struct",12],[" ",17],["InitializerDecl",7]],"s":[["struct",12],[" ",17],["InitializerDecl",7]]},{"p":["KeyPathBaseExpr"],"f":[["struct",12],[" ",17],["KeyPathBaseExpr",7]],"s":[["struct",12],[" ",17],["KeyPathBaseExpr",7]]},{"p":["MemberDeclBlock"],"f":[["struct",12],[" ",17],["MemberDeclBlock",7]],"s":[["struct",12],[" ",17],["MemberDeclBlock",7]]},{"p":["ObjcKeyPathExpr"],"f":[["struct",12],[" ",17],["ObjcKeyPathExpr",7]],"s":[["struct",12],[" ",17],["ObjcKeyPathExpr",7]]},{"p":["OptionalPattern"],"f":[["struct",12],[" ",17],["OptionalPattern",7]],"s":[["struct",12],[" ",17],["OptionalPattern",7]]},{"p":["ParameterClause"],"f":[["struct",12],[" ",17],["ParameterClause",7]],"s":[["struct",12],[" ",17],["ParameterClause",7]]},{"p":["PoundAssertStmt"],"f":[["struct",12],[" ",17],["PoundAssertStmt",7]],"s":[["struct",12],[" ",17],["PoundAssertStmt",7]]},{"p":["PoundColumnExpr"],"f":[["struct",12],[" ",17],["PoundColumnExpr",7]],"s":[["struct",12],[" ",17],["PoundColumnExpr",7]]},{"p":["PoundFileIDExpr"],"f":[["struct",12],[" ",17],["PoundFileIDExpr",7]],"s":[["struct",12],[" ",17],["PoundFileIDExpr",7]]},{"p":["RepeatWhileStmt"],"f":[["struct",12],[" ",17],["RepeatWhileStmt",7]],"s":[["struct",12],[" ",17],["RepeatWhileStmt",7]]},{"p":["SwitchCaseLabel"],"f":[["struct",12],[" ",17],["SwitchCaseLabel",7]],"s":[["struct",12],[" ",17],["SwitchCaseLabel",7]]},{"p":["WildcardPattern"],"f":[["struct",12],[" ",17],["WildcardPattern",7]],"s":[["struct",12],[" ",17],["WildcardPattern",7]]},{"p":["ArrayElementList"],"f":[["struct",12],[" ",17],["ArrayElementList",7]],"s":[["struct",12],[" ",17],["ArrayElementList",7]],"d":"`ArrayElementList` represents a collection of `ArrayElement`s."},{"p":["ClosureParamList"],"f":[["struct",12],[" ",17],["ClosureParamList",7]],"s":[["struct",12],[" ",17],["ClosureParamList",7]],"d":"`ClosureParamList` represents a collection of `ClosureParam`s."},{"p":["ClosureSignature"],"f":[["struct",12],[" ",17],["ClosureSignature",7]],"s":[["struct",12],[" ",17],["ClosureSignature",7]]},{"p":["ConditionElement"],"f":[["struct",12],[" ",17],["ConditionElement",7]],"s":[["struct",12],[" ",17],["ConditionElement",7]]},{"p":["DeclNameArgument"],"f":[["struct",12],[" ",17],["DeclNameArgument",7]],"s":[["struct",12],[" ",17],["DeclNameArgument",7]]},{"p":["FloatLiteralExpr"],"f":[["struct",12],[" ",17],["FloatLiteralExpr",7]],"s":[["struct",12],[" ",17],["FloatLiteralExpr",7]]},{"p":["FunctionCallExpr"],"f":[["struct",12],[" ",17],["FunctionCallExpr",7]],"s":[["struct",12],[" ",17],["FunctionCallExpr",7]]},{"p":["FunctionDeclName"],"f":[["struct",12],[" ",17],["FunctionDeclName",7]],"s":[["struct",12],[" ",17],["FunctionDeclName",7]],"d":"A function declaration name (e.g. `foo(_:_:)`)."},{"p":["GenericParameter"],"f":[["struct",12],[" ",17],["GenericParameter",7]],"s":[["struct",12],[" ",17],["GenericParameter",7]]},{"p":["MemberAccessExpr"],"f":[["struct",12],[" ",17],["MemberAccessExpr",7]],"s":[["struct",12],[" ",17],["MemberAccessExpr",7]]},{"p":["ObjcSelectorExpr"],"f":[["struct",12],[" ",17],["ObjcSelectorExpr",7]],"s":[["struct",12],[" ",17],["ObjcSelectorExpr",7]]},{"p":["PostfixUnaryExpr"],"f":[["struct",12],[" ",17],["PostfixUnaryExpr",7]],"s":[["struct",12],[" ",17],["PostfixUnaryExpr",7]]},{"p":["PoundWarningDecl"],"f":[["struct",12],[" ",17],["PoundWarningDecl",7]],"s":[["struct",12],[" ",17],["PoundWarningDecl",7]]},{"p":["RegexLiteralExpr"],"f":[["struct",12],[" ",17],["RegexLiteralExpr",7]],"s":[["struct",12],[" ",17],["RegexLiteralExpr",7]]},{"p":["TupleExprElement"],"f":[["struct",12],[" ",17],["TupleExprElement",7]],"s":[["struct",12],[" ",17],["TupleExprElement",7]]},{"p":["TupleTypeElement"],"f":[["struct",12],[" ",17],["TupleTypeElement",7]],"s":[["struct",12],[" ",17],["TupleTypeElement",7]]},{"p":["AccessorParameter"],"f":[["struct",12],[" ",17],["AccessorParameter",7]],"s":[["struct",12],[" ",17],["AccessorParameter",7]]},{"p":["AvailabilityEntry"],"f":[["struct",12],[" ",17],["AvailabilityEntry",7]],"s":[["struct",12],[" ",17],["AvailabilityEntry",7]],"d":"The availability argument for the _specialize attribute"},{"p":["CodeBlockItemList"],"f":[["struct",12],[" ",17],["CodeBlockItemList",7]],"s":[["struct",12],[" ",17],["CodeBlockItemList",7]],"d":"`CodeBlockItemList` represents a collection of `CodeBlockItem`s."},{"p":["DeclNameArguments"],"f":[["struct",12],[" ",17],["DeclNameArguments",7]],"s":[["struct",12],[" ",17],["DeclNameArguments",7]]},{"p":["DeinitializerDecl"],"f":[["struct",12],[" ",17],["DeinitializerDecl",7]],"s":[["struct",12],[" ",17],["DeinitializerDecl",7]]},{"p":["DictionaryElement"],"f":[["struct",12],[" ",17],["DictionaryElement",7]],"s":[["struct",12],[" ",17],["DictionaryElement",7]]},{"p":["ExpressionPattern"],"f":[["struct",12],[" ",17],["ExpressionPattern",7]],"s":[["struct",12],[" ",17],["ExpressionPattern",7]]},{"p":["ExpressionSegment"],"f":[["struct",12],[" ",17],["ExpressionSegment",7]],"s":[["struct",12],[" ",17],["ExpressionSegment",7]]},{"p":["FunctionParameter"],"f":[["struct",12],[" ",17],["FunctionParameter",7]],"s":[["struct",12],[" ",17],["FunctionParameter",7]]},{"p":["FunctionSignature"],"f":[["struct",12],[" ",17],["FunctionSignature",7]],"s":[["struct",12],[" ",17],["FunctionSignature",7]]},{"p":["IdentifierPattern"],"f":[["struct",12],[" ",17],["IdentifierPattern",7]],"s":[["struct",12],[" ",17],["IdentifierPattern",7]]},{"p":["InheritedTypeList"],"f":[["struct",12],[" ",17],["InheritedTypeList",7]],"s":[["struct",12],[" ",17],["InheritedTypeList",7]],"d":"`InheritedTypeList` represents a collection of `InheritedType`s."},{"p":["InitializerClause"],"f":[["struct",12],[" ",17],["InitializerClause",7]],"s":[["struct",12],[" ",17],["InitializerClause",7]]},{"p":["NonEmptyTokenList"],"f":[["struct",12],[" ",17],["NonEmptyTokenList",7]],"s":[["struct",12],[" ",17],["NonEmptyTokenList",7]],"d":"`NonEmptyTokenList` represents a collection of `TokenSyntax`s."},{"p":["ObjCSelectorPiece"],"f":[["struct",12],[" ",17],["ObjCSelectorPiece",7]],"s":[["struct",12],[" ",17],["ObjCSelectorPiece",7]],"d":"A piece of an Objective-C selector. Either consisiting of just anidentifier for a nullary selector, an identifier and a colon for alabeled argument or just a colon for an unlabeled argument"},{"p":["ObjectLiteralExpr"],"f":[["struct",12],[" ",17],["ObjectLiteralExpr",7]],"s":[["struct",12],[" ",17],["ObjectLiteralExpr",7]]},{"p":["PoundFilePathExpr"],"f":[["struct",12],[" ",17],["PoundFilePathExpr",7]],"s":[["struct",12],[" ",17],["PoundFilePathExpr",7]]},{"p":["PoundFunctionExpr"],"f":[["struct",12],[" ",17],["PoundFunctionExpr",7]],"s":[["struct",12],[" ",17],["PoundFunctionExpr",7]]},{"p":["QualifiedDeclName"],"f":[["struct",12],[" ",17],["QualifiedDeclName",7]],"s":[["struct",12],[" ",17],["QualifiedDeclName",7]],"d":"An optionally qualified function declaration name (e.g. `+(_:_:)`,`A.B.C.foo(_:_:)`)."},{"p":["StringLiteralExpr"],"f":[["struct",12],[" ",17],["StringLiteralExpr",7]],"s":[["struct",12],[" ",17],["StringLiteralExpr",7]]},{"p":["AssociatedtypeDecl"],"f":[["struct",12],[" ",17],["AssociatedtypeDecl",7]],"s":[["struct",12],[" ",17],["AssociatedtypeDecl",7]]},{"p":["BinaryOperatorExpr"],"f":[["struct",12],[" ",17],["BinaryOperatorExpr",7]],"s":[["struct",12],[" ",17],["BinaryOperatorExpr",7]]},{"p":["BooleanLiteralExpr"],"f":[["struct",12],[" ",17],["BooleanLiteralExpr",7]],"s":[["struct",12],[" ",17],["BooleanLiteralExpr",7]]},{"p":["ClosureCaptureItem"],"f":[["struct",12],[" ",17],["ClosureCaptureItem",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItem",7]]},{"p":["ElseIfContinuation"],"f":[["struct",12],[" ",17],["ElseIfContinuation",7]],"s":[["struct",12],[" ",17],["ElseIfContinuation",7]]},{"p":["GenericRequirement"],"f":[["struct",12],[" ",17],["GenericRequirement",7]],"s":[["struct",12],[" ",17],["GenericRequirement",7]]},{"p":["GenericWhereClause"],"f":[["struct",12],[" ",17],["GenericWhereClause",7]],"s":[["struct",12],[" ",17],["GenericWhereClause",7]]},{"p":["IfConfigClauseList"],"f":[["struct",12],[" ",17],["IfConfigClauseList",7]],"s":[["struct",12],[" ",17],["IfConfigClauseList",7]],"d":"`IfConfigClauseList` represents a collection of `IfConfigClause`s."},{"p":["IntegerLiteralExpr"],"f":[["struct",12],[" ",17],["IntegerLiteralExpr",7]],"s":[["struct",12],[" ",17],["IntegerLiteralExpr",7]]},{"p":["MemberDeclListItem"],"f":[["struct",12],[" ",17],["MemberDeclListItem",7]],"s":[["struct",12],[" ",17],["MemberDeclListItem",7]],"d":"A member declaration of a type consisting of a declaration and anoptional semicolon;"},{"p":["PatternBindingList"],"f":[["struct",12],[" ",17],["PatternBindingList",7]],"s":[["struct",12],[" ",17],["PatternBindingList",7]],"d":"`PatternBindingList` represents a collection of `PatternBinding`s."},{"p":["PoundDsohandleExpr"],"f":[["struct",12],[" ",17],["PoundDsohandleExpr",7]],"s":[["struct",12],[" ",17],["PoundDsohandleExpr",7]]},{"p":["PrefixOperatorExpr"],"f":[["struct",12],[" ",17],["PrefixOperatorExpr",7]],"s":[["struct",12],[" ",17],["PrefixOperatorExpr",7]]},{"p":["SwitchDefaultLabel"],"f":[["struct",12],[" ",17],["SwitchDefaultLabel",7]],"s":[["struct",12],[" ",17],["SwitchDefaultLabel",7]]},{"p":["AccessLevelModifier"],"f":[["struct",12],[" ",17],["AccessLevelModifier",7]],"s":[["struct",12],[" ",17],["AccessLevelModifier",7]]},{"p":["AccessPathComponent"],"f":[["struct",12],[" ",17],["AccessPathComponent",7]],"s":[["struct",12],[" ",17],["AccessPathComponent",7]]},{"p":["EnumCaseElementList"],"f":[["struct",12],[" ",17],["EnumCaseElementList",7]],"s":[["struct",12],[" ",17],["EnumCaseElementList",7]],"d":"A collection of 0 or more `EnumCaseElement`s."},{"p":["GenericArgumentList"],"f":[["struct",12],[" ",17],["GenericArgumentList",7]],"s":[["struct",12],[" ",17],["GenericArgumentList",7]],"d":"`GenericArgumentList` represents a collection of `GenericArgument`s."},{"p":["PostfixIfConfigExpr"],"f":[["struct",12],[" ",17],["PostfixIfConfigExpr",7]],"s":[["struct",12],[" ",17],["PostfixIfConfigExpr",7]]},{"p":["PoundSourceLocation"],"f":[["struct",12],[" ",17],["PoundSourceLocation",7]],"s":[["struct",12],[" ",17],["PoundSourceLocation",7]]},{"p":["PrecedenceGroupDecl"],"f":[["struct",12],[" ",17],["PrecedenceGroupDecl",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupDecl",7]],"d":"A Swift `precedencegroup` declaration."},{"p":["SameTypeRequirement"],"f":[["struct",12],[" ",17],["SameTypeRequirement",7]],"s":[["struct",12],[" ",17],["SameTypeRequirement",7]]},{"p":["TargetFunctionEntry"],"f":[["struct",12],[" ",17],["TargetFunctionEntry",7]],"s":[["struct",12],[" ",17],["TargetFunctionEntry",7]],"d":"A labeled argument for the `@_specialize` attribute with a functiondecl value like`target: myFunc(_:)`"},{"p":["TuplePatternElement"],"f":[["struct",12],[" ",17],["TuplePatternElement",7]],"s":[["struct",12],[" ",17],["TuplePatternElement",7]]},{"p":["ValueBindingPattern"],"f":[["struct",12],[" ",17],["ValueBindingPattern",7]],"s":[["struct",12],[" ",17],["ValueBindingPattern",7]]},{"p":["AvailabilityArgument"],"f":[["struct",12],[" ",17],["AvailabilityArgument",7]],"s":[["struct",12],[" ",17],["AvailabilityArgument",7]],"d":"A single argument to an `@available` argument like `*`, `iOS 10.1`,or `message: \"This has been deprecated\"`."},{"p":["AvailabilitySpecList"],"f":[["struct",12],[" ",17],["AvailabilitySpecList",7]],"s":[["struct",12],[" ",17],["AvailabilitySpecList",7]],"d":"`AvailabilitySpecList` represents a collection of `AvailabilityArgument`s."},{"p":["ClassRestrictionType"],"f":[["struct",12],[" ",17],["ClassRestrictionType",7]],"s":[["struct",12],[" ",17],["ClassRestrictionType",7]]},{"p":["ConditionElementList"],"f":[["struct",12],[" ",17],["ConditionElementList",7]],"s":[["struct",12],[" ",17],["ConditionElementList",7]],"d":"`ConditionElementList` represents a collection of `ConditionElement`s."},{"p":["DeclNameArgumentList"],"f":[["struct",12],[" ",17],["DeclNameArgumentList",7]],"s":[["struct",12],[" ",17],["DeclNameArgumentList",7]],"d":"`DeclNameArgumentList` represents a collection of `DeclNameArgument`s."},{"p":["GenericParameterList"],"f":[["struct",12],[" ",17],["GenericParameterList",7]],"s":[["struct",12],[" ",17],["GenericParameterList",7]],"d":"`GenericParameterList` represents a collection of `GenericParameter`s."},{"p":["MemberTypeIdentifier"],"f":[["struct",12],[" ",17],["MemberTypeIdentifier",7]],"s":[["struct",12],[" ",17],["MemberTypeIdentifier",7]]},{"p":["OptionalChainingExpr"],"f":[["struct",12],[" ",17],["OptionalChainingExpr",7]],"s":[["struct",12],[" ",17],["OptionalChainingExpr",7]]},{"p":["SimpleTypeIdentifier"],"f":[["struct",12],[" ",17],["SimpleTypeIdentifier",7]],"s":[["struct",12],[" ",17],["SimpleTypeIdentifier",7]]},{"p":["TupleExprElementList"],"f":[["struct",12],[" ",17],["TupleExprElementList",7]],"s":[["struct",12],[" ",17],["TupleExprElementList",7]],"d":"`TupleExprElementList` represents a collection of `TupleExprElement`s."},{"p":["TupleTypeElementList"],"f":[["struct",12],[" ",17],["TupleTypeElementList",7]],"s":[["struct",12],[" ",17],["TupleTypeElementList",7]],"d":"`TupleTypeElementList` represents a collection of `TupleTypeElement`s."},{"p":["AvailabilityCondition"],"f":[["struct",12],[" ",17],["AvailabilityCondition",7]],"s":[["struct",12],[" ",17],["AvailabilityCondition",7]]},{"p":["DictionaryElementList"],"f":[["struct",12],[" ",17],["DictionaryElementList",7]],"s":[["struct",12],[" ",17],["DictionaryElementList",7]],"d":"`DictionaryElementList` represents a collection of `DictionaryElement`s."},{"p":["DiscardAssignmentExpr"],"f":[["struct",12],[" ",17],["DiscardAssignmentExpr",7]],"s":[["struct",12],[" ",17],["DiscardAssignmentExpr",7]]},{"p":["EditorPlaceholderExpr"],"f":[["struct",12],[" ",17],["EditorPlaceholderExpr",7]],"s":[["struct",12],[" ",17],["EditorPlaceholderExpr",7]]},{"p":["FunctionParameterList"],"f":[["struct",12],[" ",17],["FunctionParameterList",7]],"s":[["struct",12],[" ",17],["FunctionParameterList",7]],"d":"`FunctionParameterList` represents a collection of `FunctionParameter`s."},{"p":["GenericArgumentClause"],"f":[["struct",12],[" ",17],["GenericArgumentClause",7]],"s":[["struct",12],[" ",17],["GenericArgumentClause",7]]},{"p":["PrimaryAssociatedType"],"f":[["struct",12],[" ",17],["PrimaryAssociatedType",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedType",7]]},{"p":["StringLiteralSegments"],"f":[["struct",12],[" ",17],["StringLiteralSegments",7]],"s":[["struct",12],[" ",17],["StringLiteralSegments",7]],"d":"`StringLiteralSegments` represents a collection of `SyntaxBuildable`s."},{"p":["SymbolicReferenceExpr"],"f":[["struct",12],[" ",17],["SymbolicReferenceExpr",7]],"s":[["struct",12],[" ",17],["SymbolicReferenceExpr",7]]},{"p":["TypeInheritanceClause"],"f":[["struct",12],[" ",17],["TypeInheritanceClause",7]],"s":[["struct",12],[" ",17],["TypeInheritanceClause",7]]},{"p":["TypeInitializerClause"],"f":[["struct",12],[" ",17],["TypeInitializerClause",7]],"s":[["struct",12],[" ",17],["TypeInitializerClause",7]]},{"p":["UnresolvedPatternExpr"],"f":[["struct",12],[" ",17],["UnresolvedPatternExpr",7]],"s":[["struct",12],[" ",17],["UnresolvedPatternExpr",7]]},{"p":["ClosureCaptureItemList"],"f":[["struct",12],[" ",17],["ClosureCaptureItemList",7]],"s":[["struct",12],[" ",17],["ClosureCaptureItemList",7]],"d":"`ClosureCaptureItemList` represents a collection of `ClosureCaptureItem`s."},{"p":["CompositionTypeElement"],"f":[["struct",12],[" ",17],["CompositionTypeElement",7]],"s":[["struct",12],[" ",17],["CompositionTypeElement",7]]},{"p":["ConformanceRequirement"],"f":[["struct",12],[" ",17],["ConformanceRequirement",7]],"s":[["struct",12],[" ",17],["ConformanceRequirement",7]]},{"p":["DifferentiabilityParam"],"f":[["struct",12],[" ",17],["DifferentiabilityParam",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParam",7]],"d":"A differentiability parameter: either the \"self\" identifier, a functionparameter name, or a function parameter index."},{"p":["GenericParameterClause"],"f":[["struct",12],[" ",17],["GenericParameterClause",7]],"s":[["struct",12],[" ",17],["GenericParameterClause",7]]},{"p":["GenericRequirementList"],"f":[["struct",12],[" ",17],["GenericRequirementList",7]],"s":[["struct",12],[" ",17],["GenericRequirementList",7]],"d":"`GenericRequirementList` represents a collection of `GenericRequirement`s."},{"p":["LabeledSpecializeEntry"],"f":[["struct",12],[" ",17],["LabeledSpecializeEntry",7]],"s":[["struct",12],[" ",17],["LabeledSpecializeEntry",7]],"d":"A labeled argument for the `@_specialize` attribute like`exported: true`"},{"p":["ClosureCaptureSignature"],"f":[["struct",12],[" ",17],["ClosureCaptureSignature",7]],"s":[["struct",12],[" ",17],["ClosureCaptureSignature",7]]},{"p":["DifferentiabilityParams"],"f":[["struct",12],[" ",17],["DifferentiabilityParams",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParams",7]],"d":"The differentiability parameters."},{"p":["PoundSourceLocationArgs"],"f":[["struct",12],[" ",17],["PoundSourceLocationArgs",7]],"s":[["struct",12],[" ",17],["PoundSourceLocationArgs",7]]},{"p":["PrecedenceGroupNameList"],"f":[["struct",12],[" ",17],["PrecedenceGroupNameList",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameList",7]],"d":"`PrecedenceGroupNameList` represents a collection of `PrecedenceGroupNameElement`s."},{"p":["PrecedenceGroupRelation"],"f":[["struct",12],[" ",17],["PrecedenceGroupRelation",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupRelation",7]],"d":"Specify the new precedence group's relation to existing precedencegroups."},{"p":["TuplePatternElementList"],"f":[["struct",12],[" ",17],["TuplePatternElementList",7]],"s":[["struct",12],[" ",17],["TuplePatternElementList",7]],"d":"`TuplePatternElementList` represents a collection of `TuplePatternElement`s."},{"p":["UnavailabilityCondition"],"f":[["struct",12],[" ",17],["UnavailabilityCondition",7]],"s":[["struct",12],[" ",17],["UnavailabilityCondition",7]]},{"p":["MatchingPatternCondition"],"f":[["struct",12],[" ",17],["MatchingPatternCondition",7]],"s":[["struct",12],[" ",17],["MatchingPatternCondition",7]]},{"p":["OptionalBindingCondition"],"f":[["struct",12],[" ",17],["OptionalBindingCondition",7]],"s":[["struct",12],[" ",17],["OptionalBindingCondition",7]]},{"p":["PrecedenceGroupAssignment"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssignment",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssignment",7]],"d":"Specifies the precedence of an operator when used in an operationthat includes optional chaining."},{"p":["PrimaryAssociatedTypeList"],"f":[["struct",12],[" ",17],["PrimaryAssociatedTypeList",7]],"s":[["struct",12],[" ",17],["PrimaryAssociatedTypeList",7]],"d":"`PrimaryAssociatedTypeList` represents a collection of `PrimaryAssociatedType`s."},{"p":["CompositionTypeElementList"],"f":[["struct",12],[" ",17],["CompositionTypeElementList",7]],"s":[["struct",12],[" ",17],["CompositionTypeElementList",7]],"d":"`CompositionTypeElementList` represents a collection of `CompositionTypeElement`s."},{"p":["DifferentiabilityParamList"],"f":[["struct",12],[" ",17],["DifferentiabilityParamList",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamList",7]],"d":"`DifferentiabilityParamList` represents a collection of `DifferentiabilityParam`s."},{"p":["OperatorPrecedenceAndTypes"],"f":[["struct",12],[" ",17],["OperatorPrecedenceAndTypes",7]],"s":[["struct",12],[" ",17],["OperatorPrecedenceAndTypes",7]],"d":"A clause to specify precedence group in infix operator declarations, and designated types in any operator declaration."},{"p":["PrecedenceGroupNameElement"],"f":[["struct",12],[" ",17],["PrecedenceGroupNameElement",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupNameElement",7]]},{"p":["AvailabilityLabeledArgument"],"f":[["struct",12],[" ",17],["AvailabilityLabeledArgument",7]],"s":[["struct",12],[" ",17],["AvailabilityLabeledArgument",7]],"d":"A argument to an `@available` attribute that consists of a label anda value, e.g. `message: \"This has been deprecated\"`."},{"p":["SpecializeAttributeSpecList"],"f":[["struct",12],[" ",17],["SpecializeAttributeSpecList",7]],"s":[["struct",12],[" ",17],["SpecializeAttributeSpecList",7]],"d":"A collection of arguments for the `@_specialize` attribute"},{"p":["ImplementsAttributeArguments"],"f":[["struct",12],[" ",17],["ImplementsAttributeArguments",7]],"s":[["struct",12],[" ",17],["ImplementsAttributeArguments",7]],"d":"The arguments for the `@_implements` attribute of the form`Type, methodName(arg1Label:arg2Label:)`"},{"p":["NamedAttributeStringArgument"],"f":[["struct",12],[" ",17],["NamedAttributeStringArgument",7]],"s":[["struct",12],[" ",17],["NamedAttributeStringArgument",7]],"d":"The argument for the `@_dynamic_replacement` or `@_private`attribute of the form `for: \"function()\"` or `sourceFile:\"Src.swift\"`"},{"p":["PrecedenceGroupAssociativity"],"f":[["struct",12],[" ",17],["PrecedenceGroupAssociativity",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAssociativity",7]],"d":"Specifies how a sequence of operators with the same precedence levelare grouped together in the absence of grouping parentheses."},{"p":["PrecedenceGroupAttributeList"],"f":[["struct",12],[" ",17],["PrecedenceGroupAttributeList",7]],"s":[["struct",12],[" ",17],["PrecedenceGroupAttributeList",7]],"d":"`PrecedenceGroupAttributeList` represents a collection of `SyntaxBuildable`s."},{"p":["DifferentiabilityParamsClause"],"f":[["struct",12],[" ",17],["DifferentiabilityParamsClause",7]],"s":[["struct",12],[" ",17],["DifferentiabilityParamsClause",7]],"d":"A clause containing differentiability parameters."},{"p":["AvailabilityVersionRestriction"],"f":[["struct",12],[" ",17],["AvailabilityVersionRestriction",7]],"s":[["struct",12],[" ",17],["AvailabilityVersionRestriction",7]],"d":"An argument to `@available` that restricts the availability on acertain platform to a version, e.g. `iOS 10` or `swift 3.4`."},{"p":["MultipleTrailingClosureElement"],"f":[["struct",12],[" ",17],["MultipleTrailingClosureElement",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElement",7]]},{"p":["ImplicitlyUnwrappedOptionalType"],"f":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalType",7]],"s":[["struct",12],[" ",17],["ImplicitlyUnwrappedOptionalType",7]]},{"p":["DifferentiableAttributeArguments"],"f":[["struct",12],[" ",17],["DifferentiableAttributeArguments",7]],"s":[["struct",12],[" ",17],["DifferentiableAttributeArguments",7]],"d":"The arguments for the `@differentiable` attribute: an optionaldifferentiability kind, an optional differentiability parameter clause,and an optional 'where' clause."},{"p":["MultipleTrailingClosureElementList"],"f":[["struct",12],[" ",17],["MultipleTrailingClosureElementList",7]],"s":[["struct",12],[" ",17],["MultipleTrailingClosureElementList",7]],"d":"`MultipleTrailingClosureElementList` represents a collection of `MultipleTrailingClosureElement`s."},{"p":["DerivativeRegistrationAttributeArguments"],"f":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArguments",7]],"s":[["struct",12],[" ",17],["DerivativeRegistrationAttributeArguments",7]],"d":"The arguments for the '@derivative(of:)' and '@transpose(of:)'attributes: the 'of:' label, the original declaration name, and anoptional differentiability parameter list."},{"p":["AsExpr"],"f":[["struct",12],[" ",17],["AsExpr",7]],"s":[["struct",12],[" ",17],["AsExpr",7]]},{"p":["DoStmt"],"f":[["struct",12],[" ",17],["DoStmt",7]],"s":[["struct",12],[" ",17],["DoStmt",7]]},{"p":["Format"],"f":[["struct",12],[" ",17],["Format",7]],"s":[["struct",12],[" ",17],["Format",7]]},{"p":["IfStmt"],"f":[["struct",12],[" ",17],["IfStmt",7]],"s":[["struct",12],[" ",17],["IfStmt",7]]},{"p":["IsExpr"],"f":[["struct",12],[" ",17],["IsExpr",7]],"s":[["struct",12],[" ",17],["IsExpr",7]]},{"p":["TryExpr"],"f":[["struct",12],[" ",17],["TryExpr",7]],"s":[["struct",12],[" ",17],["TryExpr",7]]},{"p":["CaseItem"],"f":[["struct",12],[" ",17],["CaseItem",7]],"s":[["struct",12],[" ",17],["CaseItem",7]]},{"p":["DeclName"],"f":[["struct",12],[" ",17],["DeclName",7]],"s":[["struct",12],[" ",17],["DeclName",7]]},{"p":["EnumDecl"],"f":[["struct",12],[" ",17],["EnumDecl",7]],"s":[["struct",12],[" ",17],["EnumDecl",7]],"d":"A Swift `enum` declaration."},{"p":["ExprList"],"f":[["struct",12],[" ",17],["ExprList",7]],"s":[["struct",12],[" ",17],["ExprList",7]],"d":"A list of expressions connected by operators. This list is containedby a `SequenceExprSyntax`."},{"p":["ObjcName"],"f":[["struct",12],[" ",17],["ObjcName",7]],"s":[["struct",12],[" ",17],["ObjcName",7]],"d":"`ObjcName` represents a collection of `ObjcNamePiece`s."},{"p":["SomeType"],"f":[["struct",12],[" ",17],["SomeType",7]],"s":[["struct",12],[" ",17],["SomeType",7]]},{"p":["TypeExpr"],"f":[["struct",12],[" ",17],["TypeExpr",7]],"s":[["struct",12],[" ",17],["TypeExpr",7]]},{"p":["ArrayExpr"],"f":[["struct",12],[" ",17],["ArrayExpr",7]],"s":[["struct",12],[" ",17],["ArrayExpr",7]]},{"p":["ArrayType"],"f":[["struct",12],[" ",17],["ArrayType",7]],"s":[["struct",12],[" ",17],["ArrayType",7]]},{"p":["ArrowExpr"],"f":[["struct",12],[" ",17],["ArrowExpr",7]],"s":[["struct",12],[" ",17],["ArrowExpr",7]]},{"p":["Attribute"],"f":[["struct",12],[" ",17],["Attribute",7]],"s":[["struct",12],[" ",17],["Attribute",7]],"d":"An `@` attribute."},{"p":["AwaitExpr"],"f":[["struct",12],[" ",17],["AwaitExpr",7]],"s":[["struct",12],[" ",17],["AwaitExpr",7]]},{"p":["BreakStmt"],"f":[["struct",12],[" ",17],["BreakStmt",7]],"s":[["struct",12],[" ",17],["BreakStmt",7]]},{"p":["CatchItem"],"f":[["struct",12],[" ",17],["CatchItem",7]],"s":[["struct",12],[" ",17],["CatchItem",7]]},{"p":["ClassDecl"],"f":[["struct",12],[" ",17],["ClassDecl",7]],"s":[["struct",12],[" ",17],["ClassDecl",7]]},{"p":["CodeBlock"],"f":[["struct",12],[" ",17],["CodeBlock",7]],"s":[["struct",12],[" ",17],["CodeBlock",7]]},{"p":["DeferStmt"],"f":[["struct",12],[" ",17],["DeferStmt",7]],"s":[["struct",12],[" ",17],["DeferStmt",7]]},{"p":["ElseBlock"],"f":[["struct",12],[" ",17],["ElseBlock",7]],"s":[["struct",12],[" ",17],["ElseBlock",7]]},{"p":["ForInStmt"],"f":[["struct",12],[" ",17],["ForInStmt",7]],"s":[["struct",12],[" ",17],["ForInStmt",7]]},{"p":["GuardStmt"],"f":[["struct",12],[" ",17],["GuardStmt",7]],"s":[["struct",12],[" ",17],["GuardStmt",7]]},{"p":["InOutExpr"],"f":[["struct",12],[" ",17],["InOutExpr",7]],"s":[["struct",12],[" ",17],["InOutExpr",7]]},{"p":["ThrowStmt"],"f":[["struct",12],[" ",17],["ThrowStmt",7]],"s":[["struct",12],[" ",17],["ThrowStmt",7]]},{"p":["TokenList"],"f":[["struct",12],[" ",17],["TokenList",7]],"s":[["struct",12],[" ",17],["TokenList",7]],"d":"`TokenList` represents a collection of `TokenSyntax`s."},{"p":["TupleExpr"],"f":[["struct",12],[" ",17],["TupleExpr",7]],"s":[["struct",12],[" ",17],["TupleExpr",7]]},{"p":["TupleType"],"f":[["struct",12],[" ",17],["TupleType",7]],"s":[["struct",12],[" ",17],["TupleType",7]]},{"p":["WhileStmt"],"f":[["struct",12],[" ",17],["WhileStmt",7]],"s":[["struct",12],[" ",17],["WhileStmt",7]]},{"p":["YieldList"],"f":[["struct",12],[" ",17],["YieldList",7]],"s":[["struct",12],[" ",17],["YieldList",7]]},{"p":["YieldStmt"],"f":[["struct",12],[" ",17],["YieldStmt",7]],"s":[["struct",12],[" ",17],["YieldStmt",7]]},{"p":["AccessPath","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsAccessPathComponent",18,326],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsAccessPathComponent",18],["...)",17]]},{"p":["AccessPath","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsAccessPathComponent",18,326],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsAccessPathComponent",18],["])",17]],"d":"Creates a `AccessPath` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsAccessPathComponent`"},{"p":["ImportDecl","init(attributes:modifiers:importTok:importKind:path:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["importTok",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`import`, ",17],["importKind",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["path",1],[": ",17],["ExpressibleAsAccessPath",18,185],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["importTok",1],[": ",17],["TokenSyntax",18],[", ",17],["importKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["path",1],[": ",17],["ExpressibleAsAccessPath",18],[")",17]],"d":"Creates a `ImportDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - importTok: \n  - importKind: \n  - path: "},{"p":["ImportDecl","init(importTok:importKind:attributesBuilder:modifiersBuilder:pathBuilder:)"],"f":[["init",10],["(",17],["importTok",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`import`, ",17],["importKind",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil }, ",17],["pathBuilder",1],[": () -> ",17],["ExpressibleAsAccessPath",18,185],[" = { AccessPath([]) })",17]],"s":[["init",10],["(",17],["importTok",1],[": ",17],["TokenSyntax",18],[", ",17],["importKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["pathBuilder",1],[": () -> ",17],["ExpressibleAsAccessPath",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ReturnStmt","init(returnKeyword:expression:)"],"f":[["init",10],["(",17],["returnKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`return`, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],["? = nil)",17]],"s":[["init",10],["(",17],["returnKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],["?)",17]],"d":"Creates a `ReturnStmt` using the provided parameters.\n- Parameters:\n  - returnKeyword: \n  - expression: "},{"p":["SourceFile","init(statementsBuilder:)"],"f":[["init",10],["(",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,293],[")",17]],"s":[["init",10],["(",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows passing in statements using a result builder instead of having to wrap them in a `CodeBlockItemList`."},{"p":["SourceFile","init(statements:eofToken:)"],"f":[["init",10],["(",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18,293],[", ",17],["eofToken",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18],[", ",17],["eofToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SourceFile` using the provided parameters.\n- Parameters:\n  - statements: \n  - eofToken: "},{"p":["SourceFile","init(eofToken:statementsBuilder:)"],"f":[["init",10],["(",17],["eofToken",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,293],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["eofToken",1],[": ",17],["TokenSyntax",18],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["StructDecl","init(attributes:modifiers:structKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:members:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["structKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`struct`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,264],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["structKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `StructDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - structKeyword: \n  - identifier: \n  - genericParameterClause: \n  - inheritanceClause: \n  - genericWhereClause: \n  - members: "},{"p":["StructDecl","init(structKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:attributesBuilder:modifiersBuilder:membersBuilder:)"],"f":[["init",10],["(",17],["structKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`struct`, ",17],["identifier",1],[": ",17],["String",18,3043],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil }, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,246],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["structKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows passing in members using a result builder instead of having to wrap them in a `MemberDeclBlock`."},{"p":["StructDecl","init(structKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:members:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["structKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`struct`, ",17],["identifier",1],[": ",17],["String",18,3043],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,264],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil })",17]],"s":[["init",10],["(",17],["structKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchCase","init(unknownAttr:label:statementsBuilder:)"],"f":[["init",10],["(",17],["unknownAttr",1],[": ",17],["ExpressibleAsAttribute",18,167],["? = nil, ",17],["label",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,293],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["unknownAttr",1],[": ",17],["ExpressibleAsAttribute",18],["?, ",17],["label",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchCase","init(unknownAttr:label:statements:)"],"f":[["init",10],["(",17],["unknownAttr",1],[": ",17],["ExpressibleAsAttribute",18,167],["? = nil, ",17],["label",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18,293],[")",17]],"s":[["init",10],["(",17],["unknownAttr",1],[": ",17],["ExpressibleAsAttribute",18],["?, ",17],["label",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"Creates a `SwitchCase` using the provided parameters.\n- Parameters:\n  - unknownAttr: \n  - label: \n  - statements: "},{"p":["SwitchStmt","init(labelName:labelColon:switchKeyword:expression:leftBrace:rightBrace:casesBuilder:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3043],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`switch`, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftBrace`, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightBrace`, ",17],["casesBuilder",1],[": () -> ",17],["ExpressibleAsSwitchCaseList",18,251],[" = { SwitchCaseList([]) })",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["casesBuilder",1],[": () -> ",17],["ExpressibleAsSwitchCaseList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchStmt","init(labelName:labelColon:switchKeyword:expression:leftBrace:cases:rightBrace:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`switch`, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftBrace`, ",17],["cases",1],[": ",17],["ExpressibleAsSwitchCaseList",18,251],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["switchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["cases",1],[": ",17],["ExpressibleAsSwitchCaseList",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SwitchStmt` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - switchKeyword: \n  - expression: \n  - leftBrace: \n  - cases: \n  - rightBrace: "},{"p":["CatchClause","init(catchKeyword:catchItems:body:)"],"f":[["init",10],["(",17],["catchKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`catch`, ",17],["catchItems",1],[": ",17],["ExpressibleAsCatchItemList",18,222],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[")",17]],"s":[["init",10],["(",17],["catchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["catchItems",1],[": ",17],["ExpressibleAsCatchItemList",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `CatchClause` using the provided parameters.\n- Parameters:\n  - catchKeyword: \n  - catchItems: \n  - body: "},{"p":["CatchClause","init(catchKeyword:body:catchItemsBuilder:)"],"f":[["init",10],["(",17],["catchKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`catch`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[", ",17],["catchItemsBuilder",1],[": () -> ",17],["ExpressibleAsCatchItemList",18,222],["? = { nil })",17]],"s":[["init",10],["(",17],["catchKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["catchItemsBuilder",1],[": () -> ",17],["ExpressibleAsCatchItemList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureExpr","init(leftBrace:signature:rightBrace:statementsBuilder:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftBrace`, ",17],["signature",1],[": ",17],["ExpressibleAsClosureSignature",18,276],["? = nil, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightBrace`, ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,293],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["signature",1],[": ",17],["ExpressibleAsClosureSignature",18],["?, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureExpr","init(leftBrace:signature:statements:rightBrace:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftBrace`, ",17],["signature",1],[": ",17],["ExpressibleAsClosureSignature",18,276],["? = nil, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18,293],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["signature",1],[": ",17],["ExpressibleAsClosureSignature",18],["?, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ClosureExpr` using the provided parameters.\n- Parameters:\n  - leftBrace: \n  - signature: \n  - statements: \n  - rightBrace: "},{"p":["KeyPathExpr","init(backslash:rootExpr:expression:)"],"f":[["init",10],["(",17],["backslash",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`backslash`, ",17],["rootExpr",1],[": ",17],["ExpressibleAsExprBuildable",18,225],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["backslash",1],[": ",17],["TokenSyntax",18],[", ",17],["rootExpr",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `KeyPathExpr` using the provided parameters.\n- Parameters:\n  - backslash: \n  - rootExpr: \n  - expression: "},{"p":["TernaryExpr","init(conditionExpression:questionMark:firstChoice:colonMark:secondChoice:)"],"f":[["init",10],["(",17],["conditionExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`infixQuestionMark`, ",17],["firstChoice",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["colonMark",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["secondChoice",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["conditionExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[", ",17],["firstChoice",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["colonMark",1],[": ",17],["TokenSyntax",18],[", ",17],["secondChoice",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `TernaryExpr` using the provided parameters.\n- Parameters:\n  - conditionExpression: \n  - questionMark: \n  - firstChoice: \n  - colonMark: \n  - secondChoice: "},{"p":["WhereClause","init(whereKeyword:guardResult:)"],"f":[["init",10],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`where`, ",17],["guardResult",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["guardResult",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `WhereClause` using the provided parameters.\n- Parameters:\n  - whereKeyword: \n  - guardResult: "},{"p":["AccessorDecl","init(attributes:modifier:accessorKind:parameter:asyncKeyword:throwsKeyword:body:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifier",18,203],["? = nil, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["parameter",1],[": ",17],["ExpressibleAsAccessorParameter",18,291],["? = nil, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifier",18],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18],[", ",17],["parameter",1],[": ",17],["ExpressibleAsAccessorParameter",18],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?)",17]],"d":"Creates a `AccessorDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifier: \n  - accessorKind: \n  - parameter: \n  - asyncKeyword: \n  - throwsKeyword: \n  - body: "},{"p":["AccessorDecl","init(modifier:accessorKind:parameter:asyncKeyword:throwsKeyword:body:attributesBuilder:)"],"f":[["init",10],["(",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifier",18,203],["? = nil, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["parameter",1],[": ",17],["ExpressibleAsAccessorParameter",18,291],["? = nil, ",17],["asyncKeyword",1],[": ",17],["String",18,3043],["?, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil })",17]],"s":[["init",10],["(",17],["modifier",1],[": ",17],["ExpressibleAsDeclModifier",18],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18],[", ",17],["parameter",1],[": ",17],["ExpressibleAsAccessorParameter",18],["?, ",17],["asyncKeyword",1],[": ",17],["String",18],["?, ",17],["throwsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AccessorList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsAccessorDecl",18,197],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsAccessorDecl",18],["...)",17]]},{"p":["AccessorList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsAccessorDecl",18,197],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsAccessorDecl",18],["])",17]],"d":"Creates a `AccessorList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsAccessorDecl`"},{"p":["ArrayElement","init(expression:trailingComma:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ArrayElement` using the provided parameters.\n- Parameters:\n  - expression: \n  - trailingComma: "},{"p":["CaseItemList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCaseItem",18,157],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCaseItem",18],["...)",17]]},{"p":["CaseItemList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCaseItem",18,157],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCaseItem",18],["])",17]],"d":"Creates a `CaseItemList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCaseItem`"},{"p":["ClosureParam","init(name:trailingComma:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ClosureParam` using the provided parameters.\n- Parameters:\n  - name: \n  - trailingComma: "},{"p":["ContinueStmt","init(continueKeyword:label:)"],"f":[["init",10],["(",17],["continueKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`continue`, ",17],["label",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["continueKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["label",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ContinueStmt` using the provided parameters.\n- Parameters:\n  - continueKeyword: \n  - label: "},{"p":["ContinueStmt","init(continueKeyword:label:)"],"f":[["init",10],["(",17],["continueKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`continue`, ",17],["label",1],[": ",17],["String",18,3043],["?)",17]],"s":[["init",10],["(",17],["continueKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["label",1],[": ",17],["String",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DeclModifier","init(name:detailLeftParen:detail:detailRightParen:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["detailLeftParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["detail",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["detailRightParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["detailLeftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["detail",1],[": ",17],["TokenSyntax",18],["?, ",17],["detailRightParen",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `DeclModifier` using the provided parameters.\n- Parameters:\n  - name: \n  - detailLeftParen: \n  - detail: \n  - detailRightParen: "},{"p":["DeclModifier","init(name:detailLeftParen:detail:detailRightParen:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["detailLeftParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["detail",1],[": ",17],["String",18,3043],["?, ",17],["detailRightParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["detailLeftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["detail",1],[": ",17],["String",18],["?, ",17],["detailRightParen",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["EnumCaseDecl","init(attributes:modifiers:caseKeyword:elements:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`case`, ",17],["elements",1],[": ",17],["ExpressibleAsEnumCaseElementList",18,327],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["ExpressibleAsEnumCaseElementList",18],[")",17]],"d":"Creates a `EnumCaseDecl` using the provided parameters.\n- Parameters:\n  - attributes: The attributes applied to the case declaration.\n  - modifiers: The declaration modifiers applied to the case declaration.\n  - caseKeyword: The `case` keyword for this case.\n  - elements: The elements this case declares."},{"p":["EnumCaseDecl","init(caseKeyword:attributesBuilder:modifiersBuilder:elementsBuilder:)"],"f":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`case`, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil }, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsEnumCaseElementList",18,327],[" = { EnumCaseElementList([]) })",17]],"s":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsEnumCaseElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionDecl","init(attributes:modifiers:funcKeyword:identifier:genericParameterClause:signature:genericWhereClause:body:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["funcKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`func`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18,300],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["funcKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?)",17]],"d":"Creates a `FunctionDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - funcKeyword: \n  - identifier: \n  - genericParameterClause: \n  - signature: \n  - genericWhereClause: \n  - body: "},{"p":["FunctionDecl","init(funcKeyword:identifier:genericParameterClause:signature:genericWhereClause:attributesBuilder:modifiersBuilder:bodyBuilder:)"],"f":[["init",10],["(",17],["funcKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`func`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18,300],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil }, ",17],["bodyBuilder",1],[": () -> ",17],["CodeBlockItemList",18,540],["? = { nil })",17]],"s":[["init",10],["(",17],["funcKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["bodyBuilder",1],[": () -> ",17],["CodeBlockItemList",18],["?)",17]],"d":"A convenience initializer that allows passing in members using a result builder instead of having to wrap them in a `MemberDeclBlock`."},{"p":["FunctionDecl","init(funcKeyword:identifier:genericParameterClause:signature:genericWhereClause:body:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["funcKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`func`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18,300],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil })",17]],"s":[["init",10],["(",17],["funcKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["signature",1],[": ",17],["ExpressibleAsFunctionSignature",18],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionType","init(leftParen:rightParen:asyncKeyword:throwsOrRethrowsKeyword:arrow:returnType:argumentsBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`, ",17],["asyncKeyword",1],[": ",17],["String",18,3043],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["arrow",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`arrow`, ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsTupleTypeElementList",18,346],[" = { TupleTypeElementList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["asyncKeyword",1],[": ",17],["String",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["arrow",1],[": ",17],["TokenSyntax",18],[", ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsTupleTypeElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionType","init(leftParen:arguments:rightParen:asyncKeyword:throwsOrRethrowsKeyword:arrow:returnType:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["arguments",1],[": ",17],["ExpressibleAsTupleTypeElementList",18,346],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["arrow",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`arrow`, ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["ExpressibleAsTupleTypeElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["arrow",1],[": ",17],["TokenSyntax",18],[", ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `FunctionType` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - arguments: \n  - rightParen: \n  - asyncKeyword: \n  - throwsOrRethrowsKeyword: \n  - arrow: \n  - returnType: "},{"p":["IfConfigDecl","init(poundEndif:clausesBuilder:)"],"f":[["init",10],["(",17],["poundEndif",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundEndif`, ",17],["clausesBuilder",1],[": () -> ",17],["ExpressibleAsIfConfigClauseList",18,318],[" = { IfConfigClauseList([]) })",17]],"s":[["init",10],["(",17],["poundEndif",1],[": ",17],["TokenSyntax",18],[", ",17],["clausesBuilder",1],[": () -> ",17],["ExpressibleAsIfConfigClauseList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["IfConfigDecl","init(clauses:poundEndif:)"],"f":[["init",10],["(",17],["clauses",1],[": ",17],["ExpressibleAsIfConfigClauseList",18,318],[", ",17],["poundEndif",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundEndif`)",17]],"s":[["init",10],["(",17],["clauses",1],[": ",17],["ExpressibleAsIfConfigClauseList",18],[", ",17],["poundEndif",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `IfConfigDecl` using the provided parameters.\n- Parameters:\n  - clauses: \n  - poundEndif: "},{"p":["MetatypeType","init(baseType:period:typeOrProtocol:)"],"f":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["period",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`period`, ",17],["typeOrProtocol",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["typeOrProtocol",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `MetatypeType` using the provided parameters.\n- Parameters:\n  - baseType: \n  - period: \n  - typeOrProtocol: "},{"p":["MetatypeType","init(baseType:period:typeOrProtocol:)"],"f":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["period",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`period`, ",17],["typeOrProtocol",1],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["typeOrProtocol",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ModifierList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsDeclModifier",18,203],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsDeclModifier",18],["...)",17]]},{"p":["ModifierList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsDeclModifier",18,203],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsDeclModifier",18],["])",17]],"d":"Creates a `ModifierList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsDeclModifier`"},{"p":["ObjCSelector","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsObjCSelectorPiece",18,305],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsObjCSelectorPiece",18],["...)",17]]},{"p":["ObjCSelector","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsObjCSelectorPiece",18,305],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsObjCSelectorPiece",18],["])",17]],"d":"Creates a `ObjCSelector` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsObjCSelectorPiece`"},{"p":["OperatorDecl","init(attributes:modifiers:operatorKeyword:identifier:operatorPrecedenceAndTypes:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`operator`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["operatorPrecedenceAndTypes",1],[": ",17],["ExpressibleAsOperatorPrecedenceAndTypes",18,379],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["operatorPrecedenceAndTypes",1],[": ",17],["ExpressibleAsOperatorPrecedenceAndTypes",18],["?)",17]],"d":"Creates a `OperatorDecl` using the provided parameters.\n- Parameters:\n  - attributes: The attributes applied to the 'operator' declaration.\n  - modifiers: The declaration modifiers applied to the 'operator'declaration.\n  - operatorKeyword: \n  - identifier: \n  - operatorPrecedenceAndTypes: Optionally specify a precedence group and designated types."},{"p":["OperatorDecl","init(operatorKeyword:identifier:operatorPrecedenceAndTypes:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`operator`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["operatorPrecedenceAndTypes",1],[": ",17],["ExpressibleAsOperatorPrecedenceAndTypes",18,379],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil })",17]],"s":[["init",10],["(",17],["operatorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["operatorPrecedenceAndTypes",1],[": ",17],["ExpressibleAsOperatorPrecedenceAndTypes",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["OptionalType","init(wrappedType:questionMark:)"],"f":[["init",10],["(",17],["wrappedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`postfixQuestionMark`)",17]],"s":[["init",10],["(",17],["wrappedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `OptionalType` using the provided parameters.\n- Parameters:\n  - wrappedType: \n  - questionMark: "},{"p":["ProtocolDecl","init(attributes:modifiers:protocolKeyword:identifier:inheritanceClause:genericWhereClause:members:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`protocol`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,264],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `ProtocolDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - protocolKeyword: \n  - identifier: \n  - inheritanceClause: \n  - genericWhereClause: \n  - members: "},{"p":["ProtocolDecl","init(protocolKeyword:identifier:inheritanceClause:genericWhereClause:attributesBuilder:modifiersBuilder:membersBuilder:)"],"f":[["init",10],["(",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`protocol`, ",17],["identifier",1],[": ",17],["String",18,3043],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil }, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,246],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows passing in members using a result builder instead of having to wrap them in a `MemberDeclBlock`."},{"p":["ProtocolDecl","init(protocolKeyword:identifier:inheritanceClause:genericWhereClause:members:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`protocol`, ",17],["identifier",1],[": ",17],["String",18,3043],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,264],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil })",17]],"s":[["init",10],["(",17],["protocolKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ReturnClause","init(arrow:returnType:)"],"f":[["init",10],["(",17],["arrow",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`arrow`, ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["arrow",1],[": ",17],["TokenSyntax",18],[", ",17],["returnType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `ReturnClause` using the provided parameters.\n- Parameters:\n  - arrow: \n  - returnType: "},{"p":["SequenceExpr","init(elementsBuilder:)"],"f":[["init",10],["(",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsExprList",18,160],[" = { ExprList([]) })",17]],"s":[["init",10],["(",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsExprList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SequenceExpr","init(elements:)"],"f":[["init",10],["(",17],["elements",1],[": ",17],["ExpressibleAsExprList",18,160],[")",17]],"s":[["init",10],["(",17],["elements",1],[": ",17],["ExpressibleAsExprList",18],[")",17]],"d":"Creates a `SequenceExpr` using the provided parameters.\n- Parameters:\n  - elements: "},{"p":["SuperRefExpr","init(superKeyword:)"],"f":[["init",10],["(",17],["superKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`super`)",17]],"s":[["init",10],["(",17],["superKeyword",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SuperRefExpr` using the provided parameters.\n- Parameters:\n  - superKeyword: "},{"p":["TuplePattern","init(leftParen:rightParen:elementsBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsTuplePatternElementList",18,371],[" = { TuplePatternElementList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsTuplePatternElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TuplePattern","init(leftParen:elements:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["elements",1],[": ",17],["ExpressibleAsTuplePatternElementList",18,371],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["ExpressibleAsTuplePatternElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `TuplePattern` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - elements: \n  - rightParen: "},{"p":["VariableDecl","init(attributes:modifiers:letOrVarKeyword:bindings:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["bindings",1],[": ",17],["ExpressibleAsPatternBindingList",18,321],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["bindings",1],[": ",17],["ExpressibleAsPatternBindingList",18],[")",17]],"d":"Creates a `VariableDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - letOrVarKeyword: \n  - bindings: "},{"p":["VariableDecl","init(letOrVarKeyword:attributesBuilder:modifiersBuilder:bindingsBuilder:)"],"f":[["init",10],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil }, ",17],["bindingsBuilder",1],[": () -> ",17],["ExpressibleAsPatternBindingList",18,321],[" = { PatternBindingList([]) })",17]],"s":[["init",10],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["bindingsBuilder",1],[": () -> ",17],["ExpressibleAsPatternBindingList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["VariableDecl","init(_:name:type:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["letOrVarKeyword",2],[": ",17],["TokenSyntax",18,2974],[", ",17],["name",1],[": ",17],["ExpressibleAsIdentifierPattern",18,301],[", ",17],["type",1],[": ",17],["ExpressibleAsTypeAnnotation",18,252],[")",17]],"s":[["init",10],["(",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["ExpressibleAsIdentifierPattern",18],[", ",17],["type",1],[": ",17],["ExpressibleAsTypeAnnotation",18],[")",17]]},{"p":["VersionTuple","init(majorMinor:patchPeriod:patchVersion:)"],"f":[["init",10],["(",17],["majorMinor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["patchVersion",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["majorMinor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18],["?, ",17],["patchVersion",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `VersionTuple` using the provided parameters.\n- Parameters:\n  - majorMinor: In case the version consists only of the major version, aninteger literal that specifies the major version. In casethe version consists of major and minor version number, afloating literal in which the decimal part is interpretedas the minor version.\n  - patchPeriod: If the version contains a patch number, the periodseparating the minor from the patch number.\n  - patchVersion: The patch version if specified."},{"p":["VersionTuple","init(majorMinor:patchPeriod:patchVersion:)"],"f":[["init",10],["(",17],["majorMinor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["patchVersion",1],[": ",17],["String",18,3043],["?)",17]],"s":[["init",10],["(",17],["majorMinor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["patchPeriod",1],[": ",17],["TokenSyntax",18],["?, ",17],["patchVersion",1],[": ",17],["String",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AccessorBlock","init(leftBrace:rightBrace:accessorsBuilder:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftBrace`, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightBrace`, ",17],["accessorsBuilder",1],[": () -> ",17],["ExpressibleAsAccessorList",18,198],[" = { AccessorList([]) })",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["accessorsBuilder",1],[": () -> ",17],["ExpressibleAsAccessorList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AccessorBlock","init(leftBrace:accessors:rightBrace:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftBrace`, ",17],["accessors",1],[": ",17],["ExpressibleAsAccessorList",18,198],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["accessors",1],[": ",17],["ExpressibleAsAccessorList",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AccessorBlock` using the provided parameters.\n- Parameters:\n  - leftBrace: \n  - accessors: \n  - rightBrace: "},{"p":["AsTypePattern","init(pattern:asKeyword:type:)"],"f":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,285],[", ",17],["asKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`as`, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["asKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `AsTypePattern` using the provided parameters.\n- Parameters:\n  - pattern: \n  - asKeyword: \n  - type: "},{"p":["AttributeList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]]},{"p":["AttributeList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,138],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `AttributeList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["CatchItemList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCatchItem",18,170],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCatchItem",18],["...)",17]]},{"p":["CatchItemList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCatchItem",18,170],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCatchItem",18],["])",17]],"d":"Creates a `CatchItemList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCatchItem`"},{"p":["CodeBlockItem","init(item:semicolon:errorTokens:)"],"f":[["init",10],["(",17],["item",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["errorTokens",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["? = nil)",17]],"s":[["init",10],["(",17],["item",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],["?, ",17],["errorTokens",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?)",17]],"d":"Creates a `CodeBlockItem` using the provided parameters.\n- Parameters:\n  - item: The underlying node inside the code block.\n  - semicolon: If present, the trailing semicolon at the end of the item.\n  - errorTokens: "},{"p":["ExtensionDecl","init(attributes:modifiers:extensionKeyword:extendedType:inheritanceClause:genericWhereClause:members:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`extension`, ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,264],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `ExtensionDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - extensionKeyword: \n  - extendedType: \n  - inheritanceClause: \n  - genericWhereClause: \n  - members: "},{"p":["ExtensionDecl","init(extensionKeyword:extendedType:inheritanceClause:genericWhereClause:attributesBuilder:modifiersBuilder:membersBuilder:)"],"f":[["init",10],["(",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`extension`, ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil }, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,246],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows passing in members using a result builder instead of having to wrap them in a `MemberDeclBlock`."},{"p":["ExtensionDecl","init(extensionKeyword:extendedType:inheritanceClause:genericWhereClause:members:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`extension`, ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,264],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil })",17]],"s":[["init",10],["(",17],["extensionKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["extendedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["InheritedType","init(typeName:trailingComma:)"],"f":[["init",10],["(",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `InheritedType` using the provided parameters.\n- Parameters:\n  - typeName: \n  - trailingComma: "},{"p":["IsTypePattern","init(isKeyword:type:)"],"f":[["init",10],["(",17],["isKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`is`, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["isKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `IsTypePattern` using the provided parameters.\n- Parameters:\n  - isKeyword: \n  - type: "},{"p":["ObjcNamePiece","init(name:dot:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["dot",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["dot",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ObjcNamePiece` using the provided parameters.\n- Parameters:\n  - name: \n  - dot: "},{"p":["ObjcNamePiece","init(name:dot:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3043],[", ",17],["dot",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["dot",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PoundFileExpr","init(poundFile:)"],"f":[["init",10],["(",17],["poundFile",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundFile`)",17]],"s":[["init",10],["(",17],["poundFile",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundFileExpr` using the provided parameters.\n- Parameters:\n  - poundFile: "},{"p":["PoundLineExpr","init(poundLine:)"],"f":[["init",10],["(",17],["poundLine",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundLine`)",17]],"s":[["init",10],["(",17],["poundLine",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundLineExpr` using the provided parameters.\n- Parameters:\n  - poundLine: "},{"p":["StringSegment","init(content:)"],"f":[["init",10],["(",17],["content",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["content",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `StringSegment` using the provided parameters.\n- Parameters:\n  - content: "},{"p":["StringSegment","init(content:)"],"f":[["init",10],["(",17],["content",1],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["content",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SubscriptDecl","init(attributes:modifiers:subscriptKeyword:genericParameterClause:indices:result:genericWhereClause:accessor:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`subscript`, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["indices",1],[": ",17],["ExpressibleAsParameterClause",18,267],[", ",17],["result",1],[": ",17],["ExpressibleAsReturnClause",18,214],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["indices",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["result",1],[": ",17],["ExpressibleAsReturnClause",18],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?)",17]],"d":"Creates a `SubscriptDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - subscriptKeyword: \n  - genericParameterClause: \n  - indices: \n  - result: \n  - genericWhereClause: \n  - accessor: "},{"p":["SubscriptDecl","init(subscriptKeyword:genericParameterClause:indices:result:genericWhereClause:accessor:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`subscript`, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["indices",1],[": ",17],["ExpressibleAsParameterClause",18,267],[", ",17],["result",1],[": ",17],["ExpressibleAsReturnClause",18,214],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil })",17]],"s":[["init",10],["(",17],["subscriptKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["indices",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["result",1],[": ",17],["ExpressibleAsReturnClause",18],[", ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SubscriptExpr","init(calledExpression:leftBracket:rightBracket:trailingClosure:argumentListBuilder:additionalTrailingClosuresBuilder:)"],"f":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["leftBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftSquareBracket`, ",17],["rightBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightSquareBracket`, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,193],["? = nil, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,345],[" = { TupleExprElementList([]) }, ",17],["additionalTrailingClosuresBuilder",1],[": () -> ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,392],["? = { nil })",17]],"s":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["leftBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["rightBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["additionalTrailingClosuresBuilder",1],[": () -> ",17],["ExpressibleAsMultipleTrailingClosureElementList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SubscriptExpr","init(calledExpression:leftBracket:argumentList:rightBracket:trailingClosure:additionalTrailingClosures:)"],"f":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["leftBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftSquareBracket`, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18,345],[", ",17],["rightBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightSquareBracket`, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,193],["? = nil, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,392],["? = nil)",17]],"s":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["leftBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["rightBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18],["?)",17]],"d":"Creates a `SubscriptExpr` using the provided parameters.\n- Parameters:\n  - calledExpression: \n  - leftBracket: \n  - argumentList: \n  - rightBracket: \n  - trailingClosure: \n  - additionalTrailingClosures: "},{"p":["TypealiasDecl","init(attributes:modifiers:typealiasKeyword:identifier:genericParameterClause:initializer:genericWhereClause:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`typealias`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,357],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"Creates a `TypealiasDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - typealiasKeyword: \n  - identifier: \n  - genericParameterClause: \n  - initializer: \n  - genericWhereClause: "},{"p":["TypealiasDecl","init(typealiasKeyword:identifier:genericParameterClause:initializer:genericWhereClause:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`typealias`, ",17],["identifier",1],[": ",17],["String",18,3043],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,357],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil })",17]],"s":[["init",10],["(",17],["typealiasKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AssignmentExpr","init(assignToken:)"],"f":[["init",10],["(",17],["assignToken",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`equal`)",17]],"s":[["init",10],["(",17],["assignToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AssignmentExpr` using the provided parameters.\n- Parameters:\n  - assignToken: "},{"p":["AttributedType","init(specifier:baseType:attributesBuilder:)"],"f":[["init",10],["(",17],["specifier",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil })",17]],"s":[["init",10],["(",17],["specifier",1],[": ",17],["TokenSyntax",18],["?, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AttributedType","init(specifier:attributes:baseType:)"],"f":[["init",10],["(",17],["specifier",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["specifier",1],[": ",17],["TokenSyntax",18],["?, ",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `AttributedType` using the provided parameters.\n- Parameters:\n  - specifier: \n  - attributes: \n  - baseType: "},{"p":["DictionaryExpr","init(leftSquare:content:rightSquare:)"],"f":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftSquareBracket`, ",17],["content",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["content",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DictionaryExpr` using the provided parameters.\n- Parameters:\n  - leftSquare: \n  - content: \n  - rightSquare: "},{"p":["DictionaryType","init(leftSquareBracket:keyType:colon:valueType:rightSquareBracket:)"],"f":[["init",10],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftSquareBracket`, ",17],["keyType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["valueType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["keyType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["valueType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DictionaryType` using the provided parameters.\n- Parameters:\n  - leftSquareBracket: \n  - keyType: \n  - colon: \n  - valueType: \n  - rightSquareBracket: "},{"p":["ExpressionStmt","init(expression:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `ExpressionStmt` using the provided parameters.\n- Parameters:\n  - expression: "},{"p":["IdentifierExpr","init(identifier:declNameArguments:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,294],["? = nil)",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `IdentifierExpr` using the provided parameters.\n- Parameters:\n  - identifier: \n  - declNameArguments: "},{"p":["IdentifierExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["identifier",2],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["IdentifierList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["TokenSyntax",18,2974],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["TokenSyntax",18],["...)",17]]},{"p":["IdentifierList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,2974],["])",17]],"s":[["init",10],["([",17],["TokenSyntax",18],["])",17]],"d":"Creates a `IdentifierList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `TokenSyntax`"},{"p":["IfConfigClause","init(poundKeyword:condition:elements:)"],"f":[["init",10],["(",17],["poundKeyword",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,225],["? = nil, ",17],["elements",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[")",17]],"s":[["init",10],["(",17],["poundKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["elements",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `IfConfigClause` using the provided parameters.\n- Parameters:\n  - poundKeyword: \n  - condition: \n  - elements: "},{"p":["MemberDeclList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsMemberDeclListItem",18,320],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsMemberDeclListItem",18],["...)",17]]},{"p":["MemberDeclList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsMemberDeclListItem",18,320],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsMemberDeclListItem",18],["])",17]],"d":"Creates a `MemberDeclList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsMemberDeclListItem`"},{"p":["NilLiteralExpr","init(nilKeyword:)"],"f":[["init",10],["(",17],["nilKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`nil`)",17]],"s":[["init",10],["(",17],["nilKeyword",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `NilLiteralExpr` using the provided parameters.\n- Parameters:\n  - nilKeyword: "},{"p":["PatternBinding","init(pattern:typeAnnotation:initializer:accessor:trailingComma:)"],"f":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,285],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,252],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18,303],["? = nil, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["accessor",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `PatternBinding` using the provided parameters.\n- Parameters:\n  - pattern: \n  - typeAnnotation: \n  - initializer: \n  - accessor: \n  - trailingComma: "},{"p":["PoundErrorDecl","init(poundError:leftParen:message:rightParen:)"],"f":[["init",10],["(",17],["poundError",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundError`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["message",1],[": ",17],["ExpressibleAsStringLiteralExpr",18,310],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundError",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["message",1],[": ",17],["ExpressibleAsStringLiteralExpr",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundErrorDecl` using the provided parameters.\n- Parameters:\n  - poundError: \n  - leftParen: \n  - message: \n  - rightParen: "},{"p":["SpecializeExpr","init(expression:genericArgumentClause:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,352],[")",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],[")",17]],"d":"Creates a `SpecializeExpr` using the provided parameters.\n- Parameters:\n  - expression: \n  - genericArgumentClause: "},{"p":["SwitchCaseList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]]},{"p":["SwitchCaseList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,138],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `SwitchCaseList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["TypeAnnotation","init(colon:type:)"],"f":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `TypeAnnotation` using the provided parameters.\n- Parameters:\n  - colon: \n  - type: "},{"p":["TypeAnnotation","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["type",2],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["CatchClauseList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCatchClause",18,192],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCatchClause",18],["...)",17]]},{"p":["CatchClauseList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCatchClause",18,192],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCatchClause",18],["])",17]],"d":"Creates a `CatchClauseList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCatchClause`"},{"p":["CompositionType","init(elementsBuilder:)"],"f":[["init",10],["(",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsCompositionTypeElementList",18,377],[" = { CompositionTypeElementList([]) })",17]],"s":[["init",10],["(",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsCompositionTypeElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CompositionType","init(elements:)"],"f":[["init",10],["(",17],["elements",1],[": ",17],["ExpressibleAsCompositionTypeElementList",18,377],[")",17]],"s":[["init",10],["(",17],["elements",1],[": ",17],["ExpressibleAsCompositionTypeElementList",18],[")",17]],"d":"Creates a `CompositionType` using the provided parameters.\n- Parameters:\n  - elements: "},{"p":["CustomAttribute","init(atSignToken:attributeName:leftParen:rightParen:argumentListBuilder:)"],"f":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`atSign`, ",17],["attributeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,345],["? = { nil })",17]],"s":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["attributeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CustomAttribute","init(atSignToken:attributeName:leftParen:argumentList:rightParen:)"],"f":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`atSign`, ",17],["attributeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18,345],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["attributeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `CustomAttribute` using the provided parameters.\n- Parameters:\n  - atSignToken: The `@` sign.\n  - attributeName: The name of the attribute.\n  - leftParen: \n  - argumentList: \n  - rightParen: "},{"p":["DeclarationStmt","init(declaration:)"],"f":[["init",10],["(",17],["declaration",1],[": ",17],["ExpressibleAsDeclBuildable",18,224],[")",17]],"s":[["init",10],["(",17],["declaration",1],[": ",17],["ExpressibleAsDeclBuildable",18],[")",17]],"d":"Creates a `DeclarationStmt` using the provided parameters.\n- Parameters:\n  - declaration: "},{"p":["EnumCaseElement","init(identifier:associatedValue:rawValue:trailingComma:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["associatedValue",1],[": ",17],["ExpressibleAsParameterClause",18,267],["? = nil, ",17],["rawValue",1],[": ",17],["ExpressibleAsInitializerClause",18,303],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["associatedValue",1],[": ",17],["ExpressibleAsParameterClause",18],["?, ",17],["rawValue",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `EnumCaseElement` using the provided parameters.\n- Parameters:\n  - identifier: The name of this case.\n  - associatedValue: The set of associated values of the case.\n  - rawValue: The raw value of this enum element, if present.\n  - trailingComma: The trailing comma of this element, if the case hasmultiple elements."},{"p":["EnumCaseElement","init(identifier:associatedValue:rawValue:trailingComma:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["String",18,3043],[", ",17],["associatedValue",1],[": ",17],["ExpressibleAsParameterClause",18,267],["? = nil, ",17],["rawValue",1],[": ",17],["ExpressibleAsInitializerClause",18,303],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["String",18],[", ",17],["associatedValue",1],[": ",17],["ExpressibleAsParameterClause",18],["?, ",17],["rawValue",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["EnumCasePattern","init(type:period:caseName:associatedTuple:)"],"f":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],["? = nil, ",17],["period",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`period`, ",17],["caseName",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["associatedTuple",1],[": ",17],["ExpressibleAsTuplePattern",18,217],["? = nil)",17]],"s":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["caseName",1],[": ",17],["TokenSyntax",18],[", ",17],["associatedTuple",1],[": ",17],["ExpressibleAsTuplePattern",18],["?)",17]],"d":"Creates a `EnumCasePattern` using the provided parameters.\n- Parameters:\n  - type: \n  - period: \n  - caseName: \n  - associatedTuple: "},{"p":["EnumCasePattern","init(type:period:caseName:associatedTuple:)"],"f":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],["? = nil, ",17],["period",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`period`, ",17],["caseName",1],[": ",17],["String",18,3043],[", ",17],["associatedTuple",1],[": ",17],["ExpressibleAsTuplePattern",18,217],["? = nil)",17]],"s":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["caseName",1],[": ",17],["String",18],[", ",17],["associatedTuple",1],[": ",17],["ExpressibleAsTuplePattern",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FallthroughStmt","init(fallthroughKeyword:)"],"f":[["init",10],["(",17],["fallthroughKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`fallthrough`)",17]],"s":[["init",10],["(",17],["fallthroughKeyword",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `FallthroughStmt` using the provided parameters.\n- Parameters:\n  - fallthroughKeyword: "},{"p":["ForcedValueExpr","init(expression:exclamationMark:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`exclamationMark`)",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ForcedValueExpr` using the provided parameters.\n- Parameters:\n  - expression: \n  - exclamationMark: "},{"p":["GenericArgument","init(argumentType:trailingComma:)"],"f":[["init",10],["(",17],["argumentType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["argumentType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `GenericArgument` using the provided parameters.\n- Parameters:\n  - argumentType: \n  - trailingComma: "},{"p":["InitializerDecl","init(attributes:modifiers:initKeyword:optionalMark:genericParameterClause:parameters:throwsOrRethrowsKeyword:genericWhereClause:body:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["initKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`init`, ",17],["optionalMark",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["parameters",1],[": ",17],["ExpressibleAsParameterClause",18,267],[", ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["initKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["optionalMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["parameters",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?)",17]],"d":"Creates a `InitializerDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - initKeyword: \n  - optionalMark: \n  - genericParameterClause: \n  - parameters: \n  - throwsOrRethrowsKeyword: \n  - genericWhereClause: \n  - body: "},{"p":["InitializerDecl","init(initKeyword:optionalMark:genericParameterClause:parameters:throwsOrRethrowsKeyword:genericWhereClause:body:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["initKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`init`, ",17],["optionalMark",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["parameters",1],[": ",17],["ExpressibleAsParameterClause",18,267],[", ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil })",17]],"s":[["init",10],["(",17],["initKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["optionalMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["parameters",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["KeyPathBaseExpr","init(period:)"],"f":[["init",10],["(",17],["period",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`period`)",17]],"s":[["init",10],["(",17],["period",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `KeyPathBaseExpr` using the provided parameters.\n- Parameters:\n  - period: "},{"p":["MemberDeclBlock","init(leftBrace:rightBrace:membersBuilder:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftBrace`, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightBrace`, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,246],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["MemberDeclBlock","init(leftBrace:members:rightBrace:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftBrace`, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclList",18,246],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclList",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `MemberDeclBlock` using the provided parameters.\n- Parameters:\n  - leftBrace: \n  - members: \n  - rightBrace: "},{"p":["ObjcKeyPathExpr","init(keyPath:leftParen:rightParen:nameBuilder:)"],"f":[["init",10],["(",17],["keyPath",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundKeyPath`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`, ",17],["nameBuilder",1],[": () -> ",17],["ExpressibleAsObjcName",18,161],[" = { ObjcName([]) })",17]],"s":[["init",10],["(",17],["keyPath",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["nameBuilder",1],[": () -> ",17],["ExpressibleAsObjcName",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ObjcKeyPathExpr","init(keyPath:leftParen:name:rightParen:)"],"f":[["init",10],["(",17],["keyPath",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundKeyPath`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["name",1],[": ",17],["ExpressibleAsObjcName",18,161],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["keyPath",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["ExpressibleAsObjcName",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ObjcKeyPathExpr` using the provided parameters.\n- Parameters:\n  - keyPath: \n  - leftParen: \n  - name: \n  - rightParen: "},{"p":["OptionalPattern","init(subPattern:questionMark:)"],"f":[["init",10],["(",17],["subPattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,285],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`postfixQuestionMark`)",17]],"s":[["init",10],["(",17],["subPattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `OptionalPattern` using the provided parameters.\n- Parameters:\n  - subPattern: \n  - questionMark: "},{"p":["ParameterClause","init(leftParen:rightParen:parameterListBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`, ",17],["parameterListBuilder",1],[": () -> ",17],["ExpressibleAsFunctionParameterList",18,351],[" = { FunctionParameterList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["parameterListBuilder",1],[": () -> ",17],["ExpressibleAsFunctionParameterList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ParameterClause","init(leftParen:parameterList:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["parameterList",1],[": ",17],["ExpressibleAsFunctionParameterList",18,351],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["parameterList",1],[": ",17],["ExpressibleAsFunctionParameterList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ParameterClause` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - parameterList: \n  - rightParen: "},{"p":["PoundAssertStmt","init(poundAssert:leftParen:condition:comma:message:rightParen:)"],"f":[["init",10],["(",17],["poundAssert",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundAssert`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["message",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundAssert",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["message",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundAssertStmt` using the provided parameters.\n- Parameters:\n  - poundAssert: \n  - leftParen: \n  - condition: The assertion condition.\n  - comma: The comma after the assertion condition.\n  - message: The assertion message.\n  - rightParen: "},{"p":["PoundAssertStmt","init(poundAssert:leftParen:condition:comma:message:rightParen:)"],"f":[["init",10],["(",17],["poundAssert",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundAssert`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["message",1],[": ",17],["String",18,3043],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundAssert",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["message",1],[": ",17],["String",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PoundColumnExpr","init(poundColumn:)"],"f":[["init",10],["(",17],["poundColumn",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundColumn`)",17]],"s":[["init",10],["(",17],["poundColumn",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundColumnExpr` using the provided parameters.\n- Parameters:\n  - poundColumn: "},{"p":["PoundFileIDExpr","init(poundFileID:)"],"f":[["init",10],["(",17],["poundFileID",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundFileID`)",17]],"s":[["init",10],["(",17],["poundFileID",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundFileIDExpr` using the provided parameters.\n- Parameters:\n  - poundFileID: "},{"p":["RepeatWhileStmt","init(labelName:labelColon:repeatKeyword:body:whileKeyword:condition:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`repeat`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[", ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`while`, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `RepeatWhileStmt` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - repeatKeyword: \n  - body: \n  - whileKeyword: \n  - condition: "},{"p":["RepeatWhileStmt","init(labelName:labelColon:repeatKeyword:body:whileKeyword:condition:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3043],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`repeat`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[", ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`while`, ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["repeatKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["condition",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchCaseLabel","init(caseKeyword:caseItems:colon:)"],"f":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`case`, ",17],["caseItems",1],[": ",17],["ExpressibleAsCaseItemList",18,200],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`)",17]],"s":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["caseItems",1],[": ",17],["ExpressibleAsCaseItemList",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SwitchCaseLabel` using the provided parameters.\n- Parameters:\n  - caseKeyword: \n  - caseItems: \n  - colon: "},{"p":["SwitchCaseLabel","init(caseKeyword:colon:caseItemsBuilder:)"],"f":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`case`, ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["caseItemsBuilder",1],[": () -> ",17],["ExpressibleAsCaseItemList",18,200],[" = { CaseItemList([]) })",17]],"s":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["caseItemsBuilder",1],[": () -> ",17],["ExpressibleAsCaseItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["WildcardPattern","init(wildcard:typeAnnotation:)"],"f":[["init",10],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`wildcard`, ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,252],["? = nil)",17]],"s":[["init",10],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?)",17]],"d":"Creates a `WildcardPattern` using the provided parameters.\n- Parameters:\n  - wildcard: \n  - typeAnnotation: "},{"p":["ArrayElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsArrayElement",18,199],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsArrayElement",18],["...)",17]]},{"p":["ArrayElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsArrayElement",18,199],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsArrayElement",18],["])",17]],"d":"Creates a `ArrayElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsArrayElement`"},{"p":["ClosureParamList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsClosureParam",18,201],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsClosureParam",18],["...)",17]]},{"p":["ClosureParamList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsClosureParam",18,201],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsClosureParam",18],["])",17]],"d":"Creates a `ClosureParamList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsClosureParam`"},{"p":["ClosureSignature","init(attributes:capture:input:asyncKeyword:throwsTok:output:inTok:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["capture",1],[": ",17],["ExpressibleAsClosureCaptureSignature",18,366],["? = nil, ",17],["input",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["? = nil, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18,214],["? = nil, ",17],["inTok",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`in`)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["capture",1],[": ",17],["ExpressibleAsClosureCaptureSignature",18],["?, ",17],["input",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18],["?, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18],["?, ",17],["inTok",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ClosureSignature` using the provided parameters.\n- Parameters:\n  - attributes: \n  - capture: \n  - input: \n  - asyncKeyword: \n  - throwsTok: \n  - output: \n  - inTok: "},{"p":["ClosureSignature","init(capture:input:asyncKeyword:throwsTok:output:inTok:attributesBuilder:)"],"f":[["init",10],["(",17],["capture",1],[": ",17],["ExpressibleAsClosureCaptureSignature",18,366],["? = nil, ",17],["input",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["? = nil, ",17],["asyncKeyword",1],[": ",17],["String",18,3043],["?, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18,214],["? = nil, ",17],["inTok",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`in`, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil })",17]],"s":[["init",10],["(",17],["capture",1],[": ",17],["ExpressibleAsClosureCaptureSignature",18],["?, ",17],["input",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["asyncKeyword",1],[": ",17],["String",18],["?, ",17],["throwsTok",1],[": ",17],["TokenSyntax",18],["?, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18],["?, ",17],["inTok",1],[": ",17],["TokenSyntax",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ConditionElement","init(condition:trailingComma:)"],"f":[["init",10],["(",17],["condition",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["condition",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ConditionElement` using the provided parameters.\n- Parameters:\n  - condition: \n  - trailingComma: "},{"p":["DeclNameArgument","init(name:colon:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DeclNameArgument` using the provided parameters.\n- Parameters:\n  - name: \n  - colon: "},{"p":["FloatLiteralExpr","init(floatLiteral:)"],"f":[["init",10],["(",17],["floatLiteral",1],[" ",17],["value",2],[": ",17],["Float",18,3045],[")",17]],"s":[["init",10],["(",17],["floatLiteral",1],[": ",17],["Float",18],[")",17]]},{"p":["FloatLiteralExpr","init(floatingDigits:)"],"f":[["init",10],["(",17],["floatingDigits",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["floatingDigits",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `FloatLiteralExpr` using the provided parameters.\n- Parameters:\n  - floatingDigits: "},{"p":["FloatLiteralExpr","init(floatingDigits:)"],"f":[["init",10],["(",17],["floatingDigits",1],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["floatingDigits",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FloatLiteralExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Float",18,3045],[")",17]],"s":[["init",10],["(",17],["Float",18],[")",17]]},{"p":["FunctionCallExpr","init(calledExpression:leftParen:rightParen:trailingClosure:argumentListBuilder:additionalTrailingClosuresBuilder:)"],"f":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,193],["? = nil, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,345],[" = { TupleExprElementList([]) }, ",17],["additionalTrailingClosuresBuilder",1],[": () -> ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,392],["? = { nil })",17]],"s":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["additionalTrailingClosuresBuilder",1],[": () -> ",17],["ExpressibleAsMultipleTrailingClosureElementList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionCallExpr","init(calledExpression:leftParen:argumentList:rightParen:trailingClosure:additionalTrailingClosures:)"],"f":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18,345],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,193],["? = nil, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18,392],["? = nil)",17]],"s":[["init",10],["(",17],["calledExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argumentList",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["additionalTrailingClosures",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElementList",18],["?)",17]],"d":"Creates a `FunctionCallExpr` using the provided parameters.\n- Parameters:\n  - calledExpression: \n  - leftParen: \n  - argumentList: \n  - rightParen: \n  - trailingClosure: \n  - additionalTrailingClosures: "},{"p":["FunctionCallExpr","init(_:leftParen:rightParen:trailingClosure:argumentListBuilder:additionalTrailingClosuresBuilder:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["calledExpression",2],[": ",17],["ExpressibleAsIdentifierExpr",18,243],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18,193],["? = nil, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,345],[" = { TupleExprElementList([]) }, ",17],["additionalTrailingClosuresBuilder",1],[": () -> ",17],["MultipleTrailingClosureElementList",18,639],["? = { nil })",17]],"s":[["init",10],["(",17],["ExpressibleAsIdentifierExpr",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["trailingClosure",1],[": ",17],["ExpressibleAsClosureExpr",18],["?, ",17],["argumentListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["additionalTrailingClosuresBuilder",1],[": () -> ",17],["MultipleTrailingClosureElementList",18],["?)",17]]},{"p":["FunctionDeclName","init(name:arguments:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,294],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `FunctionDeclName` using the provided parameters.\n- Parameters:\n  - name: The base name of the referenced function.\n  - arguments: The argument labels of the referenced function, optionallyspecified."},{"p":["GenericParameter","init(attributes:name:colon:inheritedType:trailingComma:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `GenericParameter` using the provided parameters.\n- Parameters:\n  - attributes: \n  - name: \n  - colon: \n  - inheritedType: \n  - trailingComma: "},{"p":["GenericParameter","init(name:colon:inheritedType:trailingComma:attributesBuilder:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3043],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil })",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["MemberAccessExpr","init(base:dot:name:declNameArguments:)"],"f":[["init",10],["(",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18,225],["? = nil, ",17],["dot",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,294],["? = nil)",17]],"s":[["init",10],["(",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `MemberAccessExpr` using the provided parameters.\n- Parameters:\n  - base: \n  - dot: \n  - name: \n  - declNameArguments: "},{"p":["ObjcSelectorExpr","init(poundSelector:leftParen:kind:colon:name:rightParen:)"],"f":[["init",10],["(",17],["poundSelector",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundSelector`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["kind",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["name",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundSelector",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["kind",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ObjcSelectorExpr` using the provided parameters.\n- Parameters:\n  - poundSelector: \n  - leftParen: \n  - kind: \n  - colon: \n  - name: \n  - rightParen: "},{"p":["ObjcSelectorExpr","init(poundSelector:leftParen:kind:colon:name:rightParen:)"],"f":[["init",10],["(",17],["poundSelector",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundSelector`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["kind",1],[": ",17],["String",18,3043],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["name",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundSelector",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["kind",1],[": ",17],["String",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PostfixUnaryExpr","init(expression:operatorToken:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["operatorToken",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["operatorToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PostfixUnaryExpr` using the provided parameters.\n- Parameters:\n  - expression: \n  - operatorToken: "},{"p":["PostfixUnaryExpr","init(expression:operatorToken:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["operatorToken",1],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["operatorToken",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PoundWarningDecl","init(poundWarning:leftParen:message:rightParen:)"],"f":[["init",10],["(",17],["poundWarning",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundWarning`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["message",1],[": ",17],["ExpressibleAsStringLiteralExpr",18,310],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundWarning",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["message",1],[": ",17],["ExpressibleAsStringLiteralExpr",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundWarningDecl` using the provided parameters.\n- Parameters:\n  - poundWarning: \n  - leftParen: \n  - message: \n  - rightParen: "},{"p":["RegexLiteralExpr","init(regex:)"],"f":[["init",10],["(",17],["regex",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["regex",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `RegexLiteralExpr` using the provided parameters.\n- Parameters:\n  - regex: "},{"p":["RegexLiteralExpr","init(regex:)"],"f":[["init",10],["(",17],["regex",1],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["regex",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TupleExprElement","init(label:colon:expression:trailingComma:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `TupleExprElement` using the provided parameters.\n- Parameters:\n  - label: \n  - colon: \n  - expression: \n  - trailingComma: "},{"p":["TupleTypeElement","init(inOut:name:secondName:colon:type:ellipsis:initializer:trailingComma:)"],"f":[["init",10],["(",17],["inOut",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["secondName",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["ellipsis",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18,303],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["inOut",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["ellipsis",1],[": ",17],["TokenSyntax",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `TupleTypeElement` using the provided parameters.\n- Parameters:\n  - inOut: \n  - name: \n  - secondName: \n  - colon: \n  - type: \n  - ellipsis: \n  - initializer: \n  - trailingComma: "},{"p":["AccessorParameter","init(leftParen:name:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AccessorParameter` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - name: \n  - rightParen: "},{"p":["AccessorParameter","init(leftParen:name:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["name",1],[": ",17],["String",18,3043],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["String",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AvailabilityEntry","init(label:colon:availabilityList:semicolon:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["availabilityList",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18,337],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`semicolon`)",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilityList",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AvailabilityEntry` using the provided parameters.\n- Parameters:\n  - label: The label of the argument\n  - colon: The colon separating the label and the value\n  - availabilityList: \n  - semicolon: "},{"p":["AvailabilityEntry","init(label:colon:semicolon:availabilityListBuilder:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,3043],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["semicolon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`semicolon`, ",17],["availabilityListBuilder",1],[": () -> ",17],["ExpressibleAsAvailabilitySpecList",18,337],[" = { AvailabilitySpecList([]) })",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilityListBuilder",1],[": () -> ",17],["ExpressibleAsAvailabilitySpecList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CodeBlockItemList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCodeBlockItem",18,223],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCodeBlockItem",18],["...)",17]]},{"p":["CodeBlockItemList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCodeBlockItem",18,223],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCodeBlockItem",18],["])",17]],"d":"Creates a `CodeBlockItemList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCodeBlockItem`"},{"p":["DeclNameArguments","init(leftParen:rightParen:argumentsBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`, ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsDeclNameArgumentList",18,340],[" = { DeclNameArgumentList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsDeclNameArgumentList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DeclNameArguments","init(leftParen:arguments:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArgumentList",18,340],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArgumentList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DeclNameArguments` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - arguments: \n  - rightParen: "},{"p":["DeinitializerDecl","init(attributes:modifiers:deinitKeyword:body:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`deinit`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `DeinitializerDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - deinitKeyword: \n  - body: "},{"p":["DeinitializerDecl","init(deinitKeyword:body:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`deinit`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil })",17]],"s":[["init",10],["(",17],["deinitKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DictionaryElement","init(keyExpression:colon:valueExpression:trailingComma:)"],"f":[["init",10],["(",17],["keyExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["valueExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["keyExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["valueExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `DictionaryElement` using the provided parameters.\n- Parameters:\n  - keyExpression: \n  - colon: \n  - valueExpression: \n  - trailingComma: "},{"p":["ExpressionPattern","init(expression:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `ExpressionPattern` using the provided parameters.\n- Parameters:\n  - expression: "},{"p":["ExpressionSegment","init(backslash:delimiter:leftParen:rightParen:expressionsBuilder:)"],"f":[["init",10],["(",17],["backslash",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`backslash`, ",17],["delimiter",1],[": ",17],["String",18,3043],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`stringInterpolationAnchor`, ",17],["expressionsBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,345],[" = { TupleExprElementList([]) })",17]],"s":[["init",10],["(",17],["backslash",1],[": ",17],["TokenSyntax",18],[", ",17],["delimiter",1],[": ",17],["String",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["expressionsBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ExpressionSegment","init(backslash:delimiter:leftParen:expressions:rightParen:)"],"f":[["init",10],["(",17],["backslash",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`backslash`, ",17],["delimiter",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["expressions",1],[": ",17],["ExpressibleAsTupleExprElementList",18,345],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`stringInterpolationAnchor`)",17]],"s":[["init",10],["(",17],["backslash",1],[": ",17],["TokenSyntax",18],[", ",17],["delimiter",1],[": ",17],["TokenSyntax",18],["?, ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["expressions",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ExpressionSegment` using the provided parameters.\n- Parameters:\n  - backslash: \n  - delimiter: \n  - leftParen: \n  - expressions: \n  - rightParen: "},{"p":["FunctionParameter","init(attributes:firstName:secondName:colon:type:ellipsis:defaultArgument:trailingComma:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["firstName",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["secondName",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],["? = nil, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["defaultArgument",1],[": ",17],["ExpressibleAsInitializerClause",18,303],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["firstName",1],[": ",17],["TokenSyntax",18],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18],["?, ",17],["defaultArgument",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `FunctionParameter` using the provided parameters.\n- Parameters:\n  - attributes: \n  - firstName: \n  - secondName: \n  - colon: \n  - type: \n  - ellipsis: \n  - defaultArgument: \n  - trailingComma: "},{"p":["FunctionParameter","init(firstName:secondName:colon:type:ellipsis:defaultArgument:trailingComma:attributesBuilder:)"],"f":[["init",10],["(",17],["firstName",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["secondName",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],["? = nil, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["defaultArgument",1],[": ",17],["ExpressibleAsInitializerClause",18,303],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil })",17]],"s":[["init",10],["(",17],["firstName",1],[": ",17],["TokenSyntax",18],["?, ",17],["secondName",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["ellipsis",1],[": ",17],["TokenSyntax",18],["?, ",17],["defaultArgument",1],[": ",17],["ExpressibleAsInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionSignature","init(input:asyncOrReasyncKeyword:throwsOrRethrowsKeyword:output:)"],"f":[["init",10],["(",17],["input",1],[": ",17],["ExpressibleAsParameterClause",18,267],[", ",17],["asyncOrReasyncKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18,214],["? = nil)",17]],"s":[["init",10],["(",17],["input",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["asyncOrReasyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18],["?)",17]],"d":"Creates a `FunctionSignature` using the provided parameters.\n- Parameters:\n  - input: \n  - asyncOrReasyncKeyword: \n  - throwsOrRethrowsKeyword: \n  - output: "},{"p":["FunctionSignature","init(input:asyncOrReasyncKeyword:throwsOrRethrowsKeyword:output:)"],"f":[["init",10],["(",17],["input",1],[": ",17],["ExpressibleAsParameterClause",18,267],[", ",17],["asyncOrReasyncKeyword",1],[": ",17],["String",18,3043],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18,214],["? = nil)",17]],"s":[["init",10],["(",17],["input",1],[": ",17],["ExpressibleAsParameterClause",18],[", ",17],["asyncOrReasyncKeyword",1],[": ",17],["String",18],["?, ",17],["throwsOrRethrowsKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["output",1],[": ",17],["ExpressibleAsReturnClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["IdentifierPattern","init(identifier:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `IdentifierPattern` using the provided parameters.\n- Parameters:\n  - identifier: "},{"p":["IdentifierPattern","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["identifier",2],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["InheritedTypeList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsInheritedType",18,227],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsInheritedType",18],["...)",17]]},{"p":["InheritedTypeList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsInheritedType",18,227],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsInheritedType",18],["])",17]],"d":"Creates a `InheritedTypeList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsInheritedType`"},{"p":["InitializerClause","init(equal:value:)"],"f":[["init",10],["(",17],["equal",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`equal`, ",17],["value",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["equal",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `InitializerClause` using the provided parameters.\n- Parameters:\n  - equal: \n  - value: "},{"p":["NonEmptyTokenList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["TokenSyntax",18,2974],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["TokenSyntax",18],["...)",17]]},{"p":["NonEmptyTokenList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,2974],["])",17]],"s":[["init",10],["([",17],["TokenSyntax",18],["])",17]],"d":"Creates a `NonEmptyTokenList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `TokenSyntax`"},{"p":["ObjCSelectorPiece","init(name:colon:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ObjCSelectorPiece` using the provided parameters.\n- Parameters:\n  - name: \n  - colon: "},{"p":["ObjCSelectorPiece","init(name:colon:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3043],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],["?, ",17],["colon",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ObjectLiteralExpr","init(identifier:leftParen:rightParen:argumentsBuilder:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`, ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,345],[" = { TupleExprElementList([]) })",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ObjectLiteralExpr","init(identifier:leftParen:arguments:rightParen:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["arguments",1],[": ",17],["ExpressibleAsTupleExprElementList",18,345],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ObjectLiteralExpr` using the provided parameters.\n- Parameters:\n  - identifier: \n  - leftParen: \n  - arguments: \n  - rightParen: "},{"p":["PoundFilePathExpr","init(poundFilePath:)"],"f":[["init",10],["(",17],["poundFilePath",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundFilePath`)",17]],"s":[["init",10],["(",17],["poundFilePath",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundFilePathExpr` using the provided parameters.\n- Parameters:\n  - poundFilePath: "},{"p":["PoundFunctionExpr","init(poundFunction:)"],"f":[["init",10],["(",17],["poundFunction",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundFunction`)",17]],"s":[["init",10],["(",17],["poundFunction",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundFunctionExpr` using the provided parameters.\n- Parameters:\n  - poundFunction: "},{"p":["QualifiedDeclName","init(baseType:dot:name:arguments:)"],"f":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],["? = nil, ",17],["dot",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,294],["? = nil)",17]],"s":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["dot",1],[": ",17],["TokenSyntax",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `QualifiedDeclName` using the provided parameters.\n- Parameters:\n  - baseType: The base type of the qualified name, optionally specified.\n  - dot: \n  - name: The base name of the referenced function.\n  - arguments: The argument labels of the referenced function, optionallyspecified."},{"p":["StringLiteralExpr","init(openDelimiter:openQuote:closeQuote:closeDelimiter:segmentsBuilder:)"],"f":[["init",10],["(",17],["openDelimiter",1],[": ",17],["String",18,3043],["?, ",17],["openQuote",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["closeDelimiter",1],[": ",17],["String",18,3043],["?, ",17],["segmentsBuilder",1],[": () -> ",17],["ExpressibleAsStringLiteralSegments",18,354],[" = { StringLiteralSegments([]) })",17]],"s":[["init",10],["(",17],["openDelimiter",1],[": ",17],["String",18],["?, ",17],["openQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["closeDelimiter",1],[": ",17],["String",18],["?, ",17],["segmentsBuilder",1],[": () -> ",17],["ExpressibleAsStringLiteralSegments",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["StringLiteralExpr","init(openDelimiter:openQuote:segments:closeQuote:closeDelimiter:)"],"f":[["init",10],["(",17],["openDelimiter",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["openQuote",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["segments",1],[": ",17],["ExpressibleAsStringLiteralSegments",18,354],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["closeDelimiter",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["openDelimiter",1],[": ",17],["TokenSyntax",18],["?, ",17],["openQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["segments",1],[": ",17],["ExpressibleAsStringLiteralSegments",18],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["closeDelimiter",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `StringLiteralExpr` using the provided parameters.\n- Parameters:\n  - openDelimiter: \n  - openQuote: \n  - segments: \n  - closeQuote: \n  - closeDelimiter: "},{"p":["StringLiteralExpr","init(_:openQuote:closeQuote:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["String",18,3043],[", ",17],["openQuote",1],[": ",17],["TokenSyntax",18,2974],[" = .stringQuote, ",17],["closeQuote",1],[": ",17],["TokenSyntax",18,2974],[" = .stringQuote)",17]],"s":[["init",10],["(",17],["String",18],[", ",17],["openQuote",1],[": ",17],["TokenSyntax",18],[", ",17],["closeQuote",1],[": ",17],["TokenSyntax",18],[")",17]]},{"p":["AssociatedtypeDecl","init(attributes:modifiers:associatedtypeKeyword:identifier:inheritanceClause:initializer:genericWhereClause:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`associatedtype`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,357],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"Creates a `AssociatedtypeDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - associatedtypeKeyword: \n  - identifier: \n  - inheritanceClause: \n  - initializer: \n  - genericWhereClause: "},{"p":["AssociatedtypeDecl","init(associatedtypeKeyword:identifier:inheritanceClause:initializer:genericWhereClause:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`associatedtype`, ",17],["identifier",1],[": ",17],["String",18,3043],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,357],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil })",17]],"s":[["init",10],["(",17],["associatedtypeKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["BinaryOperatorExpr","init(operatorToken:)"],"f":[["init",10],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `BinaryOperatorExpr` using the provided parameters.\n- Parameters:\n  - operatorToken: "},{"p":["BinaryOperatorExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["BooleanLiteralExpr","init(booleanLiteral:)"],"f":[["init",10],["(",17],["booleanLiteral",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["booleanLiteral",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `BooleanLiteralExpr` using the provided parameters.\n- Parameters:\n  - booleanLiteral: "},{"p":["BooleanLiteralExpr","init(booleanLiteral:)"],"f":[["init",10],["(",17],["booleanLiteral",1],[" ",17],["value",2],[": ",17],["Bool",18,3044],[")",17]],"s":[["init",10],["(",17],["booleanLiteral",1],[": ",17],["Bool",18],[")",17]]},{"p":["BooleanLiteralExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Bool",18,3044],[")",17]],"s":[["init",10],["(",17],["Bool",18],[")",17]]},{"p":["ClosureCaptureItem","init(name:assignToken:expression:trailingComma:specifierBuilder:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3043],["?, ",17],["assignToken",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["specifierBuilder",1],[": () -> ",17],["ExpressibleAsTokenList",18,179],["? = { nil })",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],["?, ",17],["assignToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["specifierBuilder",1],[": () -> ",17],["ExpressibleAsTokenList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureCaptureItem","init(specifier:name:assignToken:expression:trailingComma:)"],"f":[["init",10],["(",17],["specifier",1],[": ",17],["ExpressibleAsTokenList",18,179],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["assignToken",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["specifier",1],[": ",17],["ExpressibleAsTokenList",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],["?, ",17],["assignToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `ClosureCaptureItem` using the provided parameters.\n- Parameters:\n  - specifier: \n  - name: \n  - assignToken: \n  - expression: \n  - trailingComma: "},{"p":["ElseIfContinuation","init(ifStatement:)"],"f":[["init",10],["(",17],["ifStatement",1],[": ",17],["ExpressibleAsIfStmt",18,153],[")",17]],"s":[["init",10],["(",17],["ifStatement",1],[": ",17],["ExpressibleAsIfStmt",18],[")",17]],"d":"Creates a `ElseIfContinuation` using the provided parameters.\n- Parameters:\n  - ifStatement: "},{"p":["GenericRequirement","init(body:trailingComma:)"],"f":[["init",10],["(",17],["body",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["body",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `GenericRequirement` using the provided parameters.\n- Parameters:\n  - body: \n  - trailingComma: "},{"p":["GenericWhereClause","init(whereKeyword:requirementListBuilder:)"],"f":[["init",10],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`where`, ",17],["requirementListBuilder",1],[": () -> ",17],["ExpressibleAsGenericRequirementList",18,364],[" = { GenericRequirementList([]) })",17]],"s":[["init",10],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["requirementListBuilder",1],[": () -> ",17],["ExpressibleAsGenericRequirementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GenericWhereClause","init(whereKeyword:requirementList:)"],"f":[["init",10],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`where`, ",17],["requirementList",1],[": ",17],["ExpressibleAsGenericRequirementList",18,364],[")",17]],"s":[["init",10],["(",17],["whereKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["requirementList",1],[": ",17],["ExpressibleAsGenericRequirementList",18],[")",17]],"d":"Creates a `GenericWhereClause` using the provided parameters.\n- Parameters:\n  - whereKeyword: \n  - requirementList: "},{"p":["IfConfigClauseList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsIfConfigClause",18,245],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsIfConfigClause",18],["...)",17]]},{"p":["IfConfigClauseList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsIfConfigClause",18,245],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsIfConfigClause",18],["])",17]],"d":"Creates a `IfConfigClauseList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsIfConfigClause`"},{"p":["IntegerLiteralExpr","init(integerLiteral:)"],"f":[["init",10],["(",17],["integerLiteral",1],[" ",17],["value",2],[": ",17],["Int",18,3046],[")",17]],"s":[["init",10],["(",17],["integerLiteral",1],[": ",17],["Int",18],[")",17]]},{"p":["IntegerLiteralExpr","init(digits:)"],"f":[["init",10],["(",17],["digits",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["digits",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `IntegerLiteralExpr` using the provided parameters.\n- Parameters:\n  - digits: "},{"p":["IntegerLiteralExpr","init(digits:)"],"f":[["init",10],["(",17],["digits",1],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["digits",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["IntegerLiteralExpr","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Int",18,3046],[")",17]],"s":[["init",10],["(",17],["Int",18],[")",17]]},{"p":["MemberDeclListItem","init(decl:semicolon:)"],"f":[["init",10],["(",17],["decl",1],[": ",17],["ExpressibleAsDeclBuildable",18,224],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["decl",1],[": ",17],["ExpressibleAsDeclBuildable",18],[", ",17],["semicolon",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `MemberDeclListItem` using the provided parameters.\n- Parameters:\n  - decl: The declaration of the type member.\n  - semicolon: An optional trailing semicolon."},{"p":["PatternBindingList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsPatternBinding",18,248],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsPatternBinding",18],["...)",17]]},{"p":["PatternBindingList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsPatternBinding",18,248],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsPatternBinding",18],["])",17]],"d":"Creates a `PatternBindingList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsPatternBinding`"},{"p":["PoundDsohandleExpr","init(poundDsohandle:)"],"f":[["init",10],["(",17],["poundDsohandle",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundDsohandle`)",17]],"s":[["init",10],["(",17],["poundDsohandle",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundDsohandleExpr` using the provided parameters.\n- Parameters:\n  - poundDsohandle: "},{"p":["PrefixOperatorExpr","init(operatorToken:postfixExpression:)"],"f":[["init",10],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["postfixExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["operatorToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["postfixExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `PrefixOperatorExpr` using the provided parameters.\n- Parameters:\n  - operatorToken: \n  - postfixExpression: "},{"p":["PrefixOperatorExpr","init(operatorToken:postfixExpression:)"],"f":[["init",10],["(",17],["operatorToken",1],[": ",17],["String",18,3043],["?, ",17],["postfixExpression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["operatorToken",1],[": ",17],["String",18],["?, ",17],["postfixExpression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SwitchDefaultLabel","init(defaultKeyword:colon:)"],"f":[["init",10],["(",17],["defaultKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`default`, ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`)",17]],"s":[["init",10],["(",17],["defaultKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `SwitchDefaultLabel` using the provided parameters.\n- Parameters:\n  - defaultKeyword: \n  - colon: "},{"p":["AccessLevelModifier","init(name:leftParen:modifier:rightParen:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["modifier",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["modifier",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `AccessLevelModifier` using the provided parameters.\n- Parameters:\n  - name: \n  - leftParen: \n  - modifier: \n  - rightParen: "},{"p":["AccessLevelModifier","init(name:leftParen:modifier:rightParen:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3043],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["modifier",1],[": ",17],["String",18,3043],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["modifier",1],[": ",17],["String",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AccessPathComponent","init(name:trailingDot:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["trailingDot",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingDot",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `AccessPathComponent` using the provided parameters.\n- Parameters:\n  - name: \n  - trailingDot: "},{"p":["AccessPathComponent","init(name:trailingDot:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3043],[", ",17],["trailingDot",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["trailingDot",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["EnumCaseElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsEnumCaseElement",18,257],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsEnumCaseElement",18],["...)",17]]},{"p":["EnumCaseElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsEnumCaseElement",18,257],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsEnumCaseElement",18],["])",17]],"d":"Creates a `EnumCaseElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsEnumCaseElement`"},{"p":["GenericArgumentList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsGenericArgument",18,261],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsGenericArgument",18],["...)",17]]},{"p":["GenericArgumentList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsGenericArgument",18,261],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsGenericArgument",18],["])",17]],"d":"Creates a `GenericArgumentList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsGenericArgument`"},{"p":["PostfixIfConfigExpr","init(base:config:)"],"f":[["init",10],["(",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18,225],["? = nil, ",17],["config",1],[": ",17],["ExpressibleAsIfConfigDecl",18,207],[")",17]],"s":[["init",10],["(",17],["base",1],[": ",17],["ExpressibleAsExprBuildable",18],["?, ",17],["config",1],[": ",17],["ExpressibleAsIfConfigDecl",18],[")",17]],"d":"Creates a `PostfixIfConfigExpr` using the provided parameters.\n- Parameters:\n  - base: \n  - config: "},{"p":["PoundSourceLocation","init(poundSourceLocation:leftParen:args:rightParen:)"],"f":[["init",10],["(",17],["poundSourceLocation",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundSourceLocation`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["args",1],[": ",17],["ExpressibleAsPoundSourceLocationArgs",18,368],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundSourceLocation",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["args",1],[": ",17],["ExpressibleAsPoundSourceLocationArgs",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundSourceLocation` using the provided parameters.\n- Parameters:\n  - poundSourceLocation: \n  - leftParen: \n  - args: \n  - rightParen: "},{"p":["PrecedenceGroupDecl","init(attributes:modifiers:precedencegroupKeyword:identifier:leftBrace:groupAttributes:rightBrace:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`precedencegroup`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftBrace`, ",17],["groupAttributes",1],[": ",17],["ExpressibleAsPrecedenceGroupAttributeList",18,386],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["groupAttributes",1],[": ",17],["ExpressibleAsPrecedenceGroupAttributeList",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PrecedenceGroupDecl` using the provided parameters.\n- Parameters:\n  - attributes: The attributes applied to the 'precedencegroup' declaration.\n  - modifiers: The declaration modifiers applied to the 'precedencegroup'declaration.\n  - precedencegroupKeyword: \n  - identifier: The name of this precedence group.\n  - leftBrace: \n  - groupAttributes: The characteristics of this precedence group.\n  - rightBrace: "},{"p":["PrecedenceGroupDecl","init(precedencegroupKeyword:identifier:leftBrace:rightBrace:attributesBuilder:modifiersBuilder:groupAttributesBuilder:)"],"f":[["init",10],["(",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`precedencegroup`, ",17],["identifier",1],[": ",17],["String",18,3043],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftBrace`, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightBrace`, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil }, ",17],["groupAttributesBuilder",1],[": () -> ",17],["ExpressibleAsPrecedenceGroupAttributeList",18,386],[" = { PrecedenceGroupAttributeList([]) })",17]],"s":[["init",10],["(",17],["precedencegroupKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["groupAttributesBuilder",1],[": () -> ",17],["ExpressibleAsPrecedenceGroupAttributeList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SameTypeRequirement","init(leftTypeIdentifier:equalityToken:rightTypeIdentifier:)"],"f":[["init",10],["(",17],["leftTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["equalityToken",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["rightTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["leftTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["equalityToken",1],[": ",17],["TokenSyntax",18],[", ",17],["rightTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `SameTypeRequirement` using the provided parameters.\n- Parameters:\n  - leftTypeIdentifier: \n  - equalityToken: \n  - rightTypeIdentifier: "},{"p":["TargetFunctionEntry","init(label:colon:delcname:trailingComma:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["delcname",1],[": ",17],["ExpressibleAsDeclName",18,158],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["delcname",1],[": ",17],["ExpressibleAsDeclName",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `TargetFunctionEntry` using the provided parameters.\n- Parameters:\n  - label: The label of the argument\n  - colon: The colon separating the label and the value\n  - delcname: The value for this argument\n  - trailingComma: A trailing comma if this argument is followed by another one"},{"p":["TargetFunctionEntry","init(label:colon:delcname:trailingComma:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,3043],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["delcname",1],[": ",17],["ExpressibleAsDeclName",18,158],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["delcname",1],[": ",17],["ExpressibleAsDeclName",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TuplePatternElement","init(labelName:labelColon:pattern:trailingComma:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,285],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `TuplePatternElement` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - pattern: \n  - trailingComma: "},{"p":["TuplePatternElement","init(labelName:labelColon:pattern:trailingComma:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3043],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,285],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ValueBindingPattern","init(letOrVarKeyword:valuePattern:)"],"f":[["init",10],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["valuePattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,285],[")",17]],"s":[["init",10],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["valuePattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[")",17]],"d":"Creates a `ValueBindingPattern` using the provided parameters.\n- Parameters:\n  - letOrVarKeyword: \n  - valuePattern: "},{"p":["AvailabilityArgument","init(entry:trailingComma:)"],"f":[["init",10],["(",17],["entry",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["entry",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `AvailabilityArgument` using the provided parameters.\n- Parameters:\n  - entry: The actual argument\n  - trailingComma: A trailing comma if the argument is followed by anotherargument"},{"p":["AvailabilitySpecList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsAvailabilityArgument",18,336],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsAvailabilityArgument",18],["...)",17]]},{"p":["AvailabilitySpecList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsAvailabilityArgument",18,336],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsAvailabilityArgument",18],["])",17]],"d":"Creates a `AvailabilitySpecList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsAvailabilityArgument`"},{"p":["ClassRestrictionType","init(classKeyword:)"],"f":[["init",10],["(",17],["classKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`class`)",17]],"s":[["init",10],["(",17],["classKeyword",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ClassRestrictionType` using the provided parameters.\n- Parameters:\n  - classKeyword: "},{"p":["ConditionElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsConditionElement",18,277],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsConditionElement",18],["...)",17]]},{"p":["ConditionElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsConditionElement",18,277],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsConditionElement",18],["])",17]],"d":"Creates a `ConditionElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsConditionElement`"},{"p":["DeclNameArgumentList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsDeclNameArgument",18,278],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsDeclNameArgument",18],["...)",17]]},{"p":["DeclNameArgumentList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsDeclNameArgument",18,278],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsDeclNameArgument",18],["])",17]],"d":"Creates a `DeclNameArgumentList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsDeclNameArgument`"},{"p":["GenericParameterList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsGenericParameter",18,282],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsGenericParameter",18],["...)",17]]},{"p":["GenericParameterList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsGenericParameter",18,282],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsGenericParameter",18],["])",17]],"d":"Creates a `GenericParameterList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsGenericParameter`"},{"p":["MemberTypeIdentifier","init(baseType:period:name:genericArgumentClause:)"],"f":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["period",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,352],["? = nil)",17]],"s":[["init",10],["(",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],[", ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],["?)",17]],"d":"Creates a `MemberTypeIdentifier` using the provided parameters.\n- Parameters:\n  - baseType: \n  - period: \n  - name: \n  - genericArgumentClause: "},{"p":["OptionalChainingExpr","init(expression:questionMark:)"],"f":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`postfixQuestionMark`)",17]],"s":[["init",10],["(",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["questionMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `OptionalChainingExpr` using the provided parameters.\n- Parameters:\n  - expression: \n  - questionMark: "},{"p":["SimpleTypeIdentifier","init(name:genericArgumentClause:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,352],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],["?)",17]],"d":"Creates a `SimpleTypeIdentifier` using the provided parameters.\n- Parameters:\n  - name: \n  - genericArgumentClause: "},{"p":["SimpleTypeIdentifier","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["name",2],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]]},{"p":["TupleExprElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsTupleExprElement",18,289],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsTupleExprElement",18],["...)",17]]},{"p":["TupleExprElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsTupleExprElement",18,289],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsTupleExprElement",18],["])",17]],"d":"Creates a `TupleExprElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsTupleExprElement`"},{"p":["TupleTypeElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsTupleTypeElement",18,290],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsTupleTypeElement",18],["...)",17]]},{"p":["TupleTypeElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsTupleTypeElement",18,290],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsTupleTypeElement",18],["])",17]],"d":"Creates a `TupleTypeElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsTupleTypeElement`"},{"p":["AvailabilityCondition","init(poundAvailableKeyword:leftParen:rightParen:availabilitySpecBuilder:)"],"f":[["init",10],["(",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundAvailable`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`, ",17],["availabilitySpecBuilder",1],[": () -> ",17],["ExpressibleAsAvailabilitySpecList",18,337],[" = { AvailabilitySpecList([]) })",17]],"s":[["init",10],["(",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilitySpecBuilder",1],[": () -> ",17],["ExpressibleAsAvailabilitySpecList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AvailabilityCondition","init(poundAvailableKeyword:leftParen:availabilitySpec:rightParen:)"],"f":[["init",10],["(",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundAvailable`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["availabilitySpec",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18,337],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundAvailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilitySpec",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `AvailabilityCondition` using the provided parameters.\n- Parameters:\n  - poundAvailableKeyword: \n  - leftParen: \n  - availabilitySpec: \n  - rightParen: "},{"p":["DictionaryElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsDictionaryElement",18,296],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsDictionaryElement",18],["...)",17]]},{"p":["DictionaryElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsDictionaryElement",18,296],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsDictionaryElement",18],["])",17]],"d":"Creates a `DictionaryElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsDictionaryElement`"},{"p":["DiscardAssignmentExpr","init(wildcard:)"],"f":[["init",10],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`wildcard`)",17]],"s":[["init",10],["(",17],["wildcard",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DiscardAssignmentExpr` using the provided parameters.\n- Parameters:\n  - wildcard: "},{"p":["EditorPlaceholderExpr","init(identifier:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `EditorPlaceholderExpr` using the provided parameters.\n- Parameters:\n  - identifier: "},{"p":["EditorPlaceholderExpr","init(identifier:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["FunctionParameterList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsFunctionParameter",18,299],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsFunctionParameter",18],["...)",17]]},{"p":["FunctionParameterList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsFunctionParameter",18,299],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsFunctionParameter",18],["])",17]],"d":"Creates a `FunctionParameterList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsFunctionParameter`"},{"p":["GenericArgumentClause","init(leftAngleBracket:rightAngleBracket:argumentsBuilder:)"],"f":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftAngle`, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightAngle`, ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsGenericArgumentList",18,328],[" = { GenericArgumentList([]) })",17]],"s":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["argumentsBuilder",1],[": () -> ",17],["ExpressibleAsGenericArgumentList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GenericArgumentClause","init(leftAngleBracket:arguments:rightAngleBracket:)"],"f":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftAngle`, ",17],["arguments",1],[": ",17],["ExpressibleAsGenericArgumentList",18,328],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightAngle`)",17]],"s":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["arguments",1],[": ",17],["ExpressibleAsGenericArgumentList",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `GenericArgumentClause` using the provided parameters.\n- Parameters:\n  - leftAngleBracket: \n  - arguments: \n  - rightAngleBracket: "},{"p":["PrimaryAssociatedType","init(attributes:name:colon:inheritedType:initializer:trailingComma:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,357],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `PrimaryAssociatedType` using the provided parameters.\n- Parameters:\n  - attributes: \n  - name: \n  - colon: \n  - inheritedType: \n  - initializer: \n  - trailingComma: "},{"p":["PrimaryAssociatedType","init(name:colon:inheritedType:initializer:trailingComma:attributesBuilder:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3043],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18,357],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil })",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],["?, ",17],["inheritedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsTypeInitializerClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["StringLiteralSegments","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]]},{"p":["StringLiteralSegments","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,138],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `StringLiteralSegments` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["SymbolicReferenceExpr","init(identifier:genericArgumentClause:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,352],["? = nil)",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],["?)",17]],"d":"Creates a `SymbolicReferenceExpr` using the provided parameters.\n- Parameters:\n  - identifier: \n  - genericArgumentClause: "},{"p":["SymbolicReferenceExpr","init(identifier:genericArgumentClause:)"],"f":[["init",10],["(",17],["identifier",1],[": ",17],["String",18,3043],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18,352],["? = nil)",17]],"s":[["init",10],["(",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericArgumentClause",1],[": ",17],["ExpressibleAsGenericArgumentClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TypeInheritanceClause","init(colon:inheritedTypeCollection:)"],"f":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["inheritedTypeCollection",1],[": ",17],["ExpressibleAsInheritedTypeList",18,302],[")",17]],"s":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["inheritedTypeCollection",1],[": ",17],["ExpressibleAsInheritedTypeList",18],[")",17]],"d":"Creates a `TypeInheritanceClause` using the provided parameters.\n- Parameters:\n  - colon: \n  - inheritedTypeCollection: "},{"p":["TypeInheritanceClause","init(colon:inheritedTypeCollectionBuilder:)"],"f":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["inheritedTypeCollectionBuilder",1],[": () -> ",17],["ExpressibleAsInheritedTypeList",18,302],[" = { InheritedTypeList([]) })",17]],"s":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["inheritedTypeCollectionBuilder",1],[": () -> ",17],["ExpressibleAsInheritedTypeList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TypeInitializerClause","init(equal:value:)"],"f":[["init",10],["(",17],["equal",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`equal`, ",17],["value",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["equal",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `TypeInitializerClause` using the provided parameters.\n- Parameters:\n  - equal: \n  - value: "},{"p":["UnresolvedPatternExpr","init(pattern:)"],"f":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,285],[")",17]],"s":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[")",17]],"d":"Creates a `UnresolvedPatternExpr` using the provided parameters.\n- Parameters:\n  - pattern: "},{"p":["ClosureCaptureItemList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsClosureCaptureItem",18,314],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsClosureCaptureItem",18],["...)",17]]},{"p":["ClosureCaptureItemList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsClosureCaptureItem",18,314],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsClosureCaptureItem",18],["])",17]],"d":"Creates a `ClosureCaptureItemList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsClosureCaptureItem`"},{"p":["CompositionTypeElement","init(type:ampersand:)"],"f":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["ampersand",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["ampersand",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `CompositionTypeElement` using the provided parameters.\n- Parameters:\n  - type: \n  - ampersand: "},{"p":["ConformanceRequirement","init(leftTypeIdentifier:colon:rightTypeIdentifier:)"],"f":[["init",10],["(",17],["leftTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["rightTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["leftTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["rightTypeIdentifier",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `ConformanceRequirement` using the provided parameters.\n- Parameters:\n  - leftTypeIdentifier: \n  - colon: \n  - rightTypeIdentifier: "},{"p":["DifferentiabilityParam","init(parameter:trailingComma:)"],"f":[["init",10],["(",17],["parameter",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["parameter",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `DifferentiabilityParam` using the provided parameters.\n- Parameters:\n  - parameter: \n  - trailingComma: "},{"p":["GenericParameterClause","init(leftAngleBracket:rightAngleBracket:genericParameterListBuilder:)"],"f":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftAngle`, ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightAngle`, ",17],["genericParameterListBuilder",1],[": () -> ",17],["ExpressibleAsGenericParameterList",18,341],[" = { GenericParameterList([]) })",17]],"s":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterListBuilder",1],[": () -> ",17],["ExpressibleAsGenericParameterList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GenericParameterClause","init(leftAngleBracket:genericParameterList:rightAngleBracket:)"],"f":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftAngle`, ",17],["genericParameterList",1],[": ",17],["ExpressibleAsGenericParameterList",18,341],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightAngle`)",17]],"s":[["init",10],["(",17],["leftAngleBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterList",1],[": ",17],["ExpressibleAsGenericParameterList",18],[", ",17],["rightAngleBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `GenericParameterClause` using the provided parameters.\n- Parameters:\n  - leftAngleBracket: \n  - genericParameterList: \n  - rightAngleBracket: "},{"p":["GenericRequirementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsGenericRequirement",18,316],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsGenericRequirement",18],["...)",17]]},{"p":["GenericRequirementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsGenericRequirement",18,316],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsGenericRequirement",18],["])",17]],"d":"Creates a `GenericRequirementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsGenericRequirement`"},{"p":["LabeledSpecializeEntry","init(label:colon:value:trailingComma:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["value",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `LabeledSpecializeEntry` using the provided parameters.\n- Parameters:\n  - label: The label of the argument\n  - colon: The colon separating the label and the value\n  - value: The value for this argument\n  - trailingComma: A trailing comma if this argument is followed by another one"},{"p":["LabeledSpecializeEntry","init(label:colon:value:trailingComma:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,3043],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["value",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureCaptureSignature","init(leftSquare:rightSquare:itemsBuilder:)"],"f":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftSquareBracket`, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightSquareBracket`, ",17],["itemsBuilder",1],[": () -> ",17],["ExpressibleAsClosureCaptureItemList",18,359],["? = { nil })",17]],"s":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["itemsBuilder",1],[": () -> ",17],["ExpressibleAsClosureCaptureItemList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ClosureCaptureSignature","init(leftSquare:items:rightSquare:)"],"f":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftSquareBracket`, ",17],["items",1],[": ",17],["ExpressibleAsClosureCaptureItemList",18,359],["? = nil, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["items",1],[": ",17],["ExpressibleAsClosureCaptureItemList",18],["?, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ClosureCaptureSignature` using the provided parameters.\n- Parameters:\n  - leftSquare: \n  - items: \n  - rightSquare: "},{"p":["DifferentiabilityParams","init(leftParen:diffParams:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamList",18,378],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `DifferentiabilityParams` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - diffParams: The parameters for differentiation.\n  - rightParen: "},{"p":["DifferentiabilityParams","init(leftParen:rightParen:diffParamsBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`, ",17],["diffParamsBuilder",1],[": () -> ",17],["ExpressibleAsDifferentiabilityParamList",18,378],[" = { DifferentiabilityParamList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["diffParamsBuilder",1],[": () -> ",17],["ExpressibleAsDifferentiabilityParamList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PoundSourceLocationArgs","init(fileArgLabel:fileArgColon:fileName:comma:lineArgLabel:lineArgColon:lineNumber:)"],"f":[["init",10],["(",17],["fileArgLabel",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["fileName",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`comma`, ",17],["lineArgLabel",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["lineNumber",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["fileArgLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["fileName",1],[": ",17],["TokenSyntax",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],[", ",17],["lineArgLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["lineNumber",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PoundSourceLocationArgs` using the provided parameters.\n- Parameters:\n  - fileArgLabel: \n  - fileArgColon: \n  - fileName: \n  - comma: \n  - lineArgLabel: \n  - lineArgColon: \n  - lineNumber: "},{"p":["PoundSourceLocationArgs","init(fileArgLabel:fileArgColon:fileName:comma:lineArgLabel:lineArgColon:lineNumber:)"],"f":[["init",10],["(",17],["fileArgLabel",1],[": ",17],["String",18,3043],[", ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["fileName",1],[": ",17],["String",18,3043],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`comma`, ",17],["lineArgLabel",1],[": ",17],["String",18,3043],[", ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["lineNumber",1],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["fileArgLabel",1],[": ",17],["String",18],[", ",17],["fileArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["fileName",1],[": ",17],["String",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],[", ",17],["lineArgLabel",1],[": ",17],["String",18],[", ",17],["lineArgColon",1],[": ",17],["TokenSyntax",18],[", ",17],["lineNumber",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrecedenceGroupNameList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsPrecedenceGroupNameElement",18,380],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsPrecedenceGroupNameElement",18],["...)",17]]},{"p":["PrecedenceGroupNameList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsPrecedenceGroupNameElement",18,380],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsPrecedenceGroupNameElement",18],["])",17]],"d":"Creates a `PrecedenceGroupNameList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsPrecedenceGroupNameElement`"},{"p":["PrecedenceGroupRelation","init(higherThanOrLowerThan:colon:otherNamesBuilder:)"],"f":[["init",10],["(",17],["higherThanOrLowerThan",1],[": ",17],["String",18,3043],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["otherNamesBuilder",1],[": () -> ",17],["ExpressibleAsPrecedenceGroupNameList",18,369],[" = { PrecedenceGroupNameList([]) })",17]],"s":[["init",10],["(",17],["higherThanOrLowerThan",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["otherNamesBuilder",1],[": () -> ",17],["ExpressibleAsPrecedenceGroupNameList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrecedenceGroupRelation","init(higherThanOrLowerThan:colon:otherNames:)"],"f":[["init",10],["(",17],["higherThanOrLowerThan",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["otherNames",1],[": ",17],["ExpressibleAsPrecedenceGroupNameList",18,369],[")",17]],"s":[["init",10],["(",17],["higherThanOrLowerThan",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["otherNames",1],[": ",17],["ExpressibleAsPrecedenceGroupNameList",18],[")",17]],"d":"Creates a `PrecedenceGroupRelation` using the provided parameters.\n- Parameters:\n  - higherThanOrLowerThan: The relation to specified other precedence groups.\n  - colon: \n  - otherNames: The name of other precedence group to which this precedencegroup relates."},{"p":["TuplePatternElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsTuplePatternElement",18,334],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsTuplePatternElement",18],["...)",17]]},{"p":["TuplePatternElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsTuplePatternElement",18,334],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsTuplePatternElement",18],["])",17]],"d":"Creates a `TuplePatternElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsTuplePatternElement`"},{"p":["UnavailabilityCondition","init(poundUnavailableKeyword:leftParen:rightParen:availabilitySpecBuilder:)"],"f":[["init",10],["(",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundUnavailable`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`, ",17],["availabilitySpecBuilder",1],[": () -> ",17],["ExpressibleAsAvailabilitySpecList",18,337],[" = { AvailabilitySpecList([]) })",17]],"s":[["init",10],["(",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilitySpecBuilder",1],[": () -> ",17],["ExpressibleAsAvailabilitySpecList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["UnavailabilityCondition","init(poundUnavailableKeyword:leftParen:availabilitySpec:rightParen:)"],"f":[["init",10],["(",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`poundUnavailable`, ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["availabilitySpec",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18,337],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["poundUnavailableKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["availabilitySpec",1],[": ",17],["ExpressibleAsAvailabilitySpecList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `UnavailabilityCondition` using the provided parameters.\n- Parameters:\n  - poundUnavailableKeyword: \n  - leftParen: \n  - availabilitySpec: \n  - rightParen: "},{"p":["MatchingPatternCondition","init(caseKeyword:pattern:typeAnnotation:initializer:)"],"f":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`case`, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,285],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,252],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18,303],[")",17]],"s":[["init",10],["(",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18],[")",17]],"d":"Creates a `MatchingPatternCondition` using the provided parameters.\n- Parameters:\n  - caseKeyword: \n  - pattern: \n  - typeAnnotation: \n  - initializer: "},{"p":["OptionalBindingCondition","init(letOrVarKeyword:pattern:typeAnnotation:initializer:)"],"f":[["init",10],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,285],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,252],["? = nil, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18,303],[")",17]],"s":[["init",10],["(",17],["letOrVarKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["initializer",1],[": ",17],["ExpressibleAsInitializerClause",18],[")",17]],"d":"Creates a `OptionalBindingCondition` using the provided parameters.\n- Parameters:\n  - letOrVarKeyword: \n  - pattern: \n  - typeAnnotation: \n  - initializer: "},{"p":["PrecedenceGroupAssignment","init(assignmentKeyword:colon:flag:)"],"f":[["init",10],["(",17],["assignmentKeyword",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["flag",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["assignmentKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["flag",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PrecedenceGroupAssignment` using the provided parameters.\n- Parameters:\n  - assignmentKeyword: \n  - colon: \n  - flag: When true, an operator in the corresponding precedence groupuses the same grouping rules during optional chaining as theassignment operators from the standard library. Otherwise,operators in the precedence group follows the same optionalchaining rules as operators that don't perform assignment."},{"p":["PrecedenceGroupAssignment","init(assignmentKeyword:colon:flag:)"],"f":[["init",10],["(",17],["assignmentKeyword",1],[": ",17],["String",18,3043],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["flag",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["assignmentKeyword",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["flag",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrimaryAssociatedTypeList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsPrimaryAssociatedType",18,353],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsPrimaryAssociatedType",18],["...)",17]]},{"p":["PrimaryAssociatedTypeList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsPrimaryAssociatedType",18,353],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsPrimaryAssociatedType",18],["])",17]],"d":"Creates a `PrimaryAssociatedTypeList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsPrimaryAssociatedType`"},{"p":["CompositionTypeElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsCompositionTypeElement",18,360],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsCompositionTypeElement",18],["...)",17]]},{"p":["CompositionTypeElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsCompositionTypeElement",18,360],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsCompositionTypeElement",18],["])",17]],"d":"Creates a `CompositionTypeElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsCompositionTypeElement`"},{"p":["DifferentiabilityParamList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsDifferentiabilityParam",18,362],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsDifferentiabilityParam",18],["...)",17]]},{"p":["DifferentiabilityParamList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsDifferentiabilityParam",18,362],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsDifferentiabilityParam",18],["])",17]],"d":"Creates a `DifferentiabilityParamList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsDifferentiabilityParam`"},{"p":["OperatorPrecedenceAndTypes","init(colon:precedenceGroupAndDesignatedTypes:)"],"f":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["precedenceGroupAndDesignatedTypes",1],[": ",17],["ExpressibleAsIdentifierList",18,244],[")",17]],"s":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["precedenceGroupAndDesignatedTypes",1],[": ",17],["ExpressibleAsIdentifierList",18],[")",17]],"d":"Creates a `OperatorPrecedenceAndTypes` using the provided parameters.\n- Parameters:\n  - colon: \n  - precedenceGroupAndDesignatedTypes: The precedence group and designated types for this operator"},{"p":["OperatorPrecedenceAndTypes","init(colon:precedenceGroupAndDesignatedTypesBuilder:)"],"f":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["precedenceGroupAndDesignatedTypesBuilder",1],[": () -> ",17],["ExpressibleAsIdentifierList",18,244],[" = { IdentifierList([]) })",17]],"s":[["init",10],["(",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["precedenceGroupAndDesignatedTypesBuilder",1],[": () -> ",17],["ExpressibleAsIdentifierList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrecedenceGroupNameElement","init(name:trailingComma:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `PrecedenceGroupNameElement` using the provided parameters.\n- Parameters:\n  - name: \n  - trailingComma: "},{"p":["PrecedenceGroupNameElement","init(name:trailingComma:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,3043],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AvailabilityLabeledArgument","init(label:colon:value:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["value",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `AvailabilityLabeledArgument` using the provided parameters.\n- Parameters:\n  - label: The label of the argument\n  - colon: The colon separating label and value\n  - value: The value of this labeled argument"},{"p":["AvailabilityLabeledArgument","init(label:colon:value:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,3043],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["value",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["SpecializeAttributeSpecList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]]},{"p":["SpecializeAttributeSpecList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,138],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `SpecializeAttributeSpecList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["ImplementsAttributeArguments","init(type:comma:declBaseName:declNameArguments:)"],"f":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsSimpleTypeIdentifier",18,344],[", ",17],["comma",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`comma`, ",17],["declBaseName",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,294],["? = nil)",17]],"s":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsSimpleTypeIdentifier",18],[", ",17],["comma",1],[": ",17],["TokenSyntax",18],[", ",17],["declBaseName",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `ImplementsAttributeArguments` using the provided parameters.\n- Parameters:\n  - type: The type for which the method with this attributeimplements a requirement.\n  - comma: The comma separating the type and method name\n  - declBaseName: The base name of the protocol's requirement.\n  - declNameArguments: The argument labels of the protocol's requirement if itis a function requirement."},{"p":["NamedAttributeStringArgument","init(nameTok:colon:stringOrDeclname:)"],"f":[["init",10],["(",17],["nameTok",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["stringOrDeclname",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[")",17]],"s":[["init",10],["(",17],["nameTok",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["stringOrDeclname",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `NamedAttributeStringArgument` using the provided parameters.\n- Parameters:\n  - nameTok: The label of the argument\n  - colon: The colon separating the label and the value\n  - stringOrDeclname: "},{"p":["PrecedenceGroupAssociativity","init(associativityKeyword:colon:value:)"],"f":[["init",10],["(",17],["associativityKeyword",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["value",1],[": ",17],["TokenSyntax",18,2974],[")",17]],"s":[["init",10],["(",17],["associativityKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `PrecedenceGroupAssociativity` using the provided parameters.\n- Parameters:\n  - associativityKeyword: \n  - colon: \n  - value: Operators that are `left`-associative group left-to-right.Operators that are `right`-associative group right-to-left.Operators that are specified with an associativity of `none`don't associate at all"},{"p":["PrecedenceGroupAssociativity","init(associativityKeyword:colon:value:)"],"f":[["init",10],["(",17],["associativityKeyword",1],[": ",17],["String",18,3043],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["value",1],[": ",17],["String",18,3043],[")",17]],"s":[["init",10],["(",17],["associativityKeyword",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["value",1],[": ",17],["String",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["PrecedenceGroupAttributeList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["...)",17]]},{"p":["PrecedenceGroupAttributeList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsSyntaxBuildable",18,138],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsSyntaxBuildable",18],["])",17]],"d":"Creates a `PrecedenceGroupAttributeList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsSyntaxBuildable`"},{"p":["DifferentiabilityParamsClause","init(wrtLabel:colon:parameters:)"],"f":[["init",10],["(",17],["wrtLabel",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["parameters",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[")",17]],"s":[["init",10],["(",17],["wrtLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["parameters",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `DifferentiabilityParamsClause` using the provided parameters.\n- Parameters:\n  - wrtLabel: The \"wrt\" label.\n  - colon: The colon separating \"wrt\" and the parameter list.\n  - parameters: "},{"p":["DifferentiabilityParamsClause","init(wrtLabel:colon:parameters:)"],"f":[["init",10],["(",17],["wrtLabel",1],[": ",17],["String",18,3043],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["parameters",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[")",17]],"s":[["init",10],["(",17],["wrtLabel",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["parameters",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AvailabilityVersionRestriction","init(platform:version:)"],"f":[["init",10],["(",17],["platform",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["version",1],[": ",17],["ExpressibleAsVersionTuple",18,219],["? = nil)",17]],"s":[["init",10],["(",17],["platform",1],[": ",17],["TokenSyntax",18],[", ",17],["version",1],[": ",17],["ExpressibleAsVersionTuple",18],["?)",17]],"d":"Creates a `AvailabilityVersionRestriction` using the provided parameters.\n- Parameters:\n  - platform: The name of the OS on which the availability should berestricted or 'swift' if the availability should berestricted based on a Swift version.\n  - version: "},{"p":["AvailabilityVersionRestriction","init(platform:version:)"],"f":[["init",10],["(",17],["platform",1],[": ",17],["String",18,3043],[", ",17],["version",1],[": ",17],["ExpressibleAsVersionTuple",18,219],["? = nil)",17]],"s":[["init",10],["(",17],["platform",1],[": ",17],["String",18],[", ",17],["version",1],[": ",17],["ExpressibleAsVersionTuple",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["MultipleTrailingClosureElement","init(label:colon:closure:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["closure",1],[": ",17],["ExpressibleAsClosureExpr",18,193],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["closure",1],[": ",17],["ExpressibleAsClosureExpr",18],[")",17]],"d":"Creates a `MultipleTrailingClosureElement` using the provided parameters.\n- Parameters:\n  - label: \n  - colon: \n  - closure: "},{"p":["ImplicitlyUnwrappedOptionalType","init(wrappedType:exclamationMark:)"],"f":[["init",10],["(",17],["wrappedType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`exclamationMark`)",17]],"s":[["init",10],["(",17],["wrappedType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["exclamationMark",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ImplicitlyUnwrappedOptionalType` using the provided parameters.\n- Parameters:\n  - wrappedType: \n  - exclamationMark: "},{"p":["DifferentiableAttributeArguments","init(diffKind:diffKindComma:diffParams:diffParamsComma:whereClause:)"],"f":[["init",10],["(",17],["diffKind",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18,387],["? = nil, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["whereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil)",17]],"s":[["init",10],["(",17],["diffKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18],["?, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["whereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"Creates a `DifferentiableAttributeArguments` using the provided parameters.\n- Parameters:\n  - diffKind: \n  - diffKindComma: The comma following the differentiability kind, if it exists.\n  - diffParams: \n  - diffParamsComma: The comma following the differentiability parameters clause,if it exists.\n  - whereClause: "},{"p":["DifferentiableAttributeArguments","init(diffKind:diffKindComma:diffParams:diffParamsComma:whereClause:)"],"f":[["init",10],["(",17],["diffKind",1],[": ",17],["String",18,3043],["?, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18,387],["? = nil, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["whereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil)",17]],"s":[["init",10],["(",17],["diffKind",1],[": ",17],["String",18],["?, ",17],["diffKindComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18],["?, ",17],["diffParamsComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["whereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["MultipleTrailingClosureElementList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsMultipleTrailingClosureElement",18,389],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsMultipleTrailingClosureElement",18],["...)",17]]},{"p":["MultipleTrailingClosureElementList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsMultipleTrailingClosureElement",18,389],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsMultipleTrailingClosureElement",18],["])",17]],"d":"Creates a `MultipleTrailingClosureElementList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsMultipleTrailingClosureElement`"},{"p":["DerivativeRegistrationAttributeArguments","init(ofLabel:colon:originalDeclName:period:accessorKind:comma:diffParams:)"],"f":[["init",10],["(",17],["ofLabel",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["originalDeclName",1],[": ",17],["ExpressibleAsQualifiedDeclName",18,309],[", ",17],["period",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["comma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18,387],["? = nil)",17]],"s":[["init",10],["(",17],["ofLabel",1],[": ",17],["TokenSyntax",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["originalDeclName",1],[": ",17],["ExpressibleAsQualifiedDeclName",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],["?, ",17],["accessorKind",1],[": ",17],["TokenSyntax",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18],["?)",17]],"d":"Creates a `DerivativeRegistrationAttributeArguments` using the provided parameters.\n- Parameters:\n  - ofLabel: The \"of\" label.\n  - colon: The colon separating the \"of\" label and the originaldeclaration name.\n  - originalDeclName: The referenced original declaration name.\n  - period: The period separating the original declaration name and theaccessor name.\n  - accessorKind: The accessor name.\n  - comma: \n  - diffParams: "},{"p":["DerivativeRegistrationAttributeArguments","init(ofLabel:colon:originalDeclName:period:accessorKind:comma:diffParams:)"],"f":[["init",10],["(",17],["ofLabel",1],[": ",17],["String",18,3043],[", ",17],["colon",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`colon`, ",17],["originalDeclName",1],[": ",17],["ExpressibleAsQualifiedDeclName",18,309],[", ",17],["period",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["accessorKind",1],[": ",17],["String",18,3043],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18,387],["? = nil)",17]],"s":[["init",10],["(",17],["ofLabel",1],[": ",17],["String",18],[", ",17],["colon",1],[": ",17],["TokenSyntax",18],[", ",17],["originalDeclName",1],[": ",17],["ExpressibleAsQualifiedDeclName",18],[", ",17],["period",1],[": ",17],["TokenSyntax",18],["?, ",17],["accessorKind",1],[": ",17],["String",18],["?, ",17],["comma",1],[": ",17],["TokenSyntax",18],["?, ",17],["diffParams",1],[": ",17],["ExpressibleAsDifferentiabilityParamsClause",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["AsExpr","init(asTok:questionOrExclamationMark:typeName:)"],"f":[["init",10],["(",17],["asTok",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`as`, ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["asTok",1],[": ",17],["TokenSyntax",18],[", ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `AsExpr` using the provided parameters.\n- Parameters:\n  - asTok: \n  - questionOrExclamationMark: \n  - typeName: "},{"p":["DoStmt","init(labelName:labelColon:doKeyword:body:catchClausesBuilder:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3043],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`do`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[", ",17],["catchClausesBuilder",1],[": () -> ",17],["ExpressibleAsCatchClauseList",18,253],["? = { nil })",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["catchClausesBuilder",1],[": () -> ",17],["ExpressibleAsCatchClauseList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["DoStmt","init(labelName:labelColon:doKeyword:body:catchClauses:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`do`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[", ",17],["catchClauses",1],[": ",17],["ExpressibleAsCatchClauseList",18,253],["? = nil)",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["doKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["catchClauses",1],[": ",17],["ExpressibleAsCatchClauseList",18],["?)",17]],"d":"Creates a `DoStmt` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - doKeyword: \n  - body: \n  - catchClauses: "},{"p":["Format","init(indentWidth:)"],"f":[["init",10],["(",17],["indentWidth",1],[": ",17],["Int",18,3046],[" = 4)",17]],"s":[["init",10],["(",17],["indentWidth",1],[": ",17],["Int",18],[")",17]]},{"p":["IfStmt","init(labelName:labelColon:ifKeyword:conditions:body:elseKeyword:elseBody:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`if`, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18,339],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["elseBody",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["? = nil)",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["elseBody",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?)",17]],"d":"Creates a `IfStmt` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - ifKeyword: \n  - conditions: \n  - body: \n  - elseKeyword: \n  - elseBody: "},{"p":["IfStmt","init(labelName:labelColon:ifKeyword:body:elseKeyword:elseBody:conditionsBuilder:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3043],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`if`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["elseBody",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["? = nil, ",17],["conditionsBuilder",1],[": () -> ",17],["ExpressibleAsConditionElementList",18,339],[" = { ConditionElementList([]) })",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["ifKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["elseBody",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["conditionsBuilder",1],[": () -> ",17],["ExpressibleAsConditionElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["IsExpr","init(isTok:typeName:)"],"f":[["init",10],["(",17],["isTok",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`is`, ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["isTok",1],[": ",17],["TokenSyntax",18],[", ",17],["typeName",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `IsExpr` using the provided parameters.\n- Parameters:\n  - isTok: \n  - typeName: "},{"p":["TryExpr","init(tryKeyword:questionOrExclamationMark:expression:)"],"f":[["init",10],["(",17],["tryKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`try`, ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["tryKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["questionOrExclamationMark",1],[": ",17],["TokenSyntax",18],["?, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `TryExpr` using the provided parameters.\n- Parameters:\n  - tryKeyword: \n  - questionOrExclamationMark: \n  - expression: "},{"p":["CaseItem","init(pattern:whereClause:trailingComma:)"],"f":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,285],[", ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18,196],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `CaseItem` using the provided parameters.\n- Parameters:\n  - pattern: \n  - whereClause: \n  - trailingComma: "},{"p":["DeclName","init(declBaseName:declNameArguments:)"],"f":[["init",10],["(",17],["declBaseName",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18,294],["? = nil)",17]],"s":[["init",10],["(",17],["declBaseName",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[", ",17],["declNameArguments",1],[": ",17],["ExpressibleAsDeclNameArguments",18],["?)",17]],"d":"Creates a `DeclName` using the provided parameters.\n- Parameters:\n  - declBaseName: The base name of the protocol's requirement.\n  - declNameArguments: The argument labels of the protocol's requirement if itis a function requirement."},{"p":["EnumDecl","init(attributes:modifiers:enumKeyword:identifier:genericParameters:inheritanceClause:genericWhereClause:members:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["enumKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`enum`, ",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,264],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["enumKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `EnumDecl` using the provided parameters.\n- Parameters:\n  - attributes: The attributes applied to the enum declaration.\n  - modifiers: The declaration modifiers applied to the enum declaration.\n  - enumKeyword: The `enum` keyword for this declaration.\n  - identifier: The name of this enum.\n  - genericParameters: The generic parameters, if any, for this enum.\n  - inheritanceClause: The inheritance clause describing conformances or rawvalues for this enum.\n  - genericWhereClause: The `where` clause that applies to the generic parameters ofthis enum.\n  - members: The cases and other members of this enum."},{"p":["EnumDecl","init(enumKeyword:identifier:genericParameters:inheritanceClause:genericWhereClause:attributesBuilder:modifiersBuilder:membersBuilder:)"],"f":[["init",10],["(",17],["enumKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`enum`, ",17],["identifier",1],[": ",17],["String",18,3043],[", ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil }, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,246],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["enumKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows passing in members using a result builder instead of having to wrap them in a `MemberDeclBlock`."},{"p":["EnumDecl","init(enumKeyword:identifier:genericParameters:inheritanceClause:genericWhereClause:members:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["enumKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`enum`, ",17],["identifier",1],[": ",17],["String",18,3043],[", ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,264],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil })",17]],"s":[["init",10],["(",17],["enumKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameters",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ExprList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsExprBuildable",18,225],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsExprBuildable",18],["...)",17]]},{"p":["ExprList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsExprBuildable",18,225],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsExprBuildable",18],["])",17]],"d":"Creates a `ExprList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsExprBuildable`"},{"p":["ObjcName","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["ExpressibleAsObjcNamePiece",18,229],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["ExpressibleAsObjcNamePiece",18],["...)",17]]},{"p":["ObjcName","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["ExpressibleAsObjcNamePiece",18,229],["])",17]],"s":[["init",10],["([",17],["ExpressibleAsObjcNamePiece",18],["])",17]],"d":"Creates a `ObjcName` with the provided list of elements.\n- Parameters:\n  - elements: A list of `ExpressibleAsObjcNamePiece`"},{"p":["SomeType","init(someSpecifier:baseType:)"],"f":[["init",10],["(",17],["someSpecifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["someSpecifier",1],[": ",17],["TokenSyntax",18],[", ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `SomeType` using the provided parameters.\n- Parameters:\n  - someSpecifier: \n  - baseType: "},{"p":["SomeType","init(someSpecifier:baseType:)"],"f":[["init",10],["(",17],["someSpecifier",1],[": ",17],["String",18,3043],[", ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["someSpecifier",1],[": ",17],["String",18],[", ",17],["baseType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TypeExpr","init(type:)"],"f":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[")",17]],"s":[["init",10],["(",17],["type",1],[": ",17],["ExpressibleAsTypeBuildable",18],[")",17]],"d":"Creates a `TypeExpr` using the provided parameters.\n- Parameters:\n  - type: "},{"p":["ArrayExpr","init(leftSquare:rightSquare:elementsBuilder:)"],"f":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftSquareBracket`, ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightSquareBracket`, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsArrayElementList",18,274],[" = { ArrayElementList([]) })",17]],"s":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsArrayElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["ArrayExpr","init(leftSquare:elements:rightSquare:)"],"f":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftSquareBracket`, ",17],["elements",1],[": ",17],["ExpressibleAsArrayElementList",18,274],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leftSquare",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["ExpressibleAsArrayElementList",18],[", ",17],["rightSquare",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ArrayExpr` using the provided parameters.\n- Parameters:\n  - leftSquare: \n  - elements: \n  - rightSquare: "},{"p":["ArrayType","init(leftSquareBracket:elementType:rightSquareBracket:)"],"f":[["init",10],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftSquareBracket`, ",17],["elementType",1],[": ",17],["ExpressibleAsTypeBuildable",18,236],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightSquareBracket`)",17]],"s":[["init",10],["(",17],["leftSquareBracket",1],[": ",17],["TokenSyntax",18],[", ",17],["elementType",1],[": ",17],["ExpressibleAsTypeBuildable",18],[", ",17],["rightSquareBracket",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ArrayType` using the provided parameters.\n- Parameters:\n  - leftSquareBracket: \n  - elementType: \n  - rightSquareBracket: "},{"p":["ArrowExpr","init(asyncKeyword:throwsToken:arrowToken:)"],"f":[["init",10],["(",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`arrow`)",17]],"s":[["init",10],["(",17],["asyncKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `ArrowExpr` using the provided parameters.\n- Parameters:\n  - asyncKeyword: \n  - throwsToken: \n  - arrowToken: "},{"p":["ArrowExpr","init(asyncKeyword:throwsToken:arrowToken:)"],"f":[["init",10],["(",17],["asyncKeyword",1],[": ",17],["String",18,3043],["?, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`arrow`)",17]],"s":[["init",10],["(",17],["asyncKeyword",1],[": ",17],["String",18],["?, ",17],["throwsToken",1],[": ",17],["TokenSyntax",18],["?, ",17],["arrowToken",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["Attribute","init(atSignToken:attributeName:leftParen:argument:rightParen:tokenListBuilder:)"],"f":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`atSign`, ",17],["attributeName",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["argument",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["tokenListBuilder",1],[": () -> ",17],["ExpressibleAsTokenList",18,179],["? = { nil })",17]],"s":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["attributeName",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argument",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["tokenListBuilder",1],[": () -> ",17],["ExpressibleAsTokenList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["Attribute","init(atSignToken:attributeName:leftParen:argument:rightParen:tokenList:)"],"f":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`atSign`, ",17],["attributeName",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["argument",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["tokenList",1],[": ",17],["ExpressibleAsTokenList",18,179],["? = nil)",17]],"s":[["init",10],["(",17],["atSignToken",1],[": ",17],["TokenSyntax",18],[", ",17],["attributeName",1],[": ",17],["TokenSyntax",18],[", ",17],["leftParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["argument",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],["?, ",17],["tokenList",1],[": ",17],["ExpressibleAsTokenList",18],["?)",17]],"d":"Creates a `Attribute` using the provided parameters.\n- Parameters:\n  - atSignToken: The `@` sign.\n  - attributeName: The name of the attribute.\n  - leftParen: If the attribute takes arguments, the opening parenthesis.\n  - argument: The arguments of the attribute. In case the attributetakes multiple arguments, they are gather in theappropriate takes first.\n  - rightParen: If the attribute takes arguments, the closing parenthesis.\n  - tokenList: "},{"p":["AwaitExpr","init(awaitKeyword:expression:)"],"f":[["init",10],["(",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `AwaitExpr` using the provided parameters.\n- Parameters:\n  - awaitKeyword: \n  - expression: "},{"p":["AwaitExpr","init(awaitKeyword:expression:)"],"f":[["init",10],["(",17],["awaitKeyword",1],[": ",17],["String",18,3043],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["awaitKeyword",1],[": ",17],["String",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["BreakStmt","init(breakKeyword:label:)"],"f":[["init",10],["(",17],["breakKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`break`, ",17],["label",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["breakKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["label",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `BreakStmt` using the provided parameters.\n- Parameters:\n  - breakKeyword: \n  - label: "},{"p":["BreakStmt","init(breakKeyword:label:)"],"f":[["init",10],["(",17],["breakKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`break`, ",17],["label",1],[": ",17],["String",18,3043],["?)",17]],"s":[["init",10],["(",17],["breakKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["label",1],[": ",17],["String",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CatchItem","init(pattern:whereClause:trailingComma:)"],"f":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,285],["? = nil, ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18,196],["? = nil, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil)",17]],"s":[["init",10],["(",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],["?, ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18],["?, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?)",17]],"d":"Creates a `CatchItem` using the provided parameters.\n- Parameters:\n  - pattern: \n  - whereClause: \n  - trailingComma: "},{"p":["ClassDecl","init(attributes:modifiers:classOrActorKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:members:)"],"f":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18,221],["? = nil, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18,209],["? = nil, ",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,264],[")",17]],"s":[["init",10],["(",17],["attributes",1],[": ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiers",1],[": ",17],["ExpressibleAsModifierList",18],["?, ",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["TokenSyntax",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[")",17]],"d":"Creates a `ClassDecl` using the provided parameters.\n- Parameters:\n  - attributes: \n  - modifiers: \n  - classOrActorKeyword: \n  - identifier: \n  - genericParameterClause: \n  - inheritanceClause: \n  - genericWhereClause: \n  - members: "},{"p":["ClassDecl","init(classOrActorKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:attributesBuilder:modifiersBuilder:membersBuilder:)"],"f":[["init",10],["(",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["identifier",1],[": ",17],["String",18,3043],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil }, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18,246],[" = { MemberDeclList([]) })",17]],"s":[["init",10],["(",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?, ",17],["membersBuilder",1],[": () -> ",17],["ExpressibleAsMemberDeclList",18],[")",17]],"d":"A convenience initializer that allows passing in members using a result builder instead of having to wrap them in a `MemberDeclBlock`."},{"p":["ClassDecl","init(classOrActorKeyword:identifier:genericParameterClause:inheritanceClause:genericWhereClause:members:attributesBuilder:modifiersBuilder:)"],"f":[["init",10],["(",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18,2974],[", ",17],["identifier",1],[": ",17],["String",18,3043],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18,363],["? = nil, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18,356],["? = nil, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18,317],["? = nil, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18,264],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18,221],["? = { nil }, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18,209],["? = { nil })",17]],"s":[["init",10],["(",17],["classOrActorKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["identifier",1],[": ",17],["String",18],[", ",17],["genericParameterClause",1],[": ",17],["ExpressibleAsGenericParameterClause",18],["?, ",17],["inheritanceClause",1],[": ",17],["ExpressibleAsTypeInheritanceClause",18],["?, ",17],["genericWhereClause",1],[": ",17],["ExpressibleAsGenericWhereClause",18],["?, ",17],["members",1],[": ",17],["ExpressibleAsMemberDeclBlock",18],[", ",17],["attributesBuilder",1],[": () -> ",17],["ExpressibleAsAttributeList",18],["?, ",17],["modifiersBuilder",1],[": () -> ",17],["ExpressibleAsModifierList",18],["?)",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CodeBlock","init(leftBrace:rightBrace:statementsBuilder:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftBrace`, ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightBrace`, ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18,293],[" = { CodeBlockItemList([]) })",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["statementsBuilder",1],[": () -> ",17],["ExpressibleAsCodeBlockItemList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["CodeBlock","init(leftBrace:statements:rightBrace:)"],"f":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftBrace`, ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18,293],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightBrace`)",17]],"s":[["init",10],["(",17],["leftBrace",1],[": ",17],["TokenSyntax",18],[", ",17],["statements",1],[": ",17],["ExpressibleAsCodeBlockItemList",18],[", ",17],["rightBrace",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `CodeBlock` using the provided parameters.\n- Parameters:\n  - leftBrace: \n  - statements: \n  - rightBrace: "},{"p":["DeferStmt","init(deferKeyword:body:)"],"f":[["init",10],["(",17],["deferKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`defer`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[")",17]],"s":[["init",10],["(",17],["deferKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `DeferStmt` using the provided parameters.\n- Parameters:\n  - deferKeyword: \n  - body: "},{"p":["ElseBlock","init(elseKeyword:body:)"],"f":[["init",10],["(",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`else`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[")",17]],"s":[["init",10],["(",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `ElseBlock` using the provided parameters.\n- Parameters:\n  - elseKeyword: \n  - body: "},{"p":["ForInStmt","init(labelName:labelColon:forKeyword:tryKeyword:awaitKeyword:caseKeyword:pattern:typeAnnotation:inKeyword:sequenceExpr:whereClause:body:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`for`, ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,285],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,252],["? = nil, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`in`, ",17],["sequenceExpr",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18,196],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[")",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["awaitKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["sequenceExpr",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `ForInStmt` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - forKeyword: \n  - tryKeyword: \n  - awaitKeyword: \n  - caseKeyword: \n  - pattern: \n  - typeAnnotation: \n  - inKeyword: \n  - sequenceExpr: \n  - whereClause: \n  - body: "},{"p":["ForInStmt","init(labelName:labelColon:forKeyword:tryKeyword:awaitKeyword:caseKeyword:pattern:typeAnnotation:inKeyword:sequenceExpr:whereClause:body:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3043],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`for`, ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["awaitKeyword",1],[": ",17],["String",18,3043],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18,285],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18,252],["? = nil, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`in`, ",17],["sequenceExpr",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[", ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18,196],["? = nil, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[")",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["forKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["tryKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["awaitKeyword",1],[": ",17],["String",18],["?, ",17],["caseKeyword",1],[": ",17],["TokenSyntax",18],["?, ",17],["pattern",1],[": ",17],["ExpressibleAsPatternBuildable",18],[", ",17],["typeAnnotation",1],[": ",17],["ExpressibleAsTypeAnnotation",18],["?, ",17],["inKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["sequenceExpr",1],[": ",17],["ExpressibleAsExprBuildable",18],[", ",17],["whereClause",1],[": ",17],["ExpressibleAsWhereClause",18],["?, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GuardStmt","init(guardKeyword:elseKeyword:body:conditionsBuilder:)"],"f":[["init",10],["(",17],["guardKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`guard`, ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`else`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[", ",17],["conditionsBuilder",1],[": () -> ",17],["ExpressibleAsConditionElementList",18,339],[" = { ConditionElementList([]) })",17]],"s":[["init",10],["(",17],["guardKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["conditionsBuilder",1],[": () -> ",17],["ExpressibleAsConditionElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["GuardStmt","init(guardKeyword:conditions:elseKeyword:body:)"],"f":[["init",10],["(",17],["guardKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`guard`, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18,339],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`else`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[")",17]],"s":[["init",10],["(",17],["guardKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18],[", ",17],["elseKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `GuardStmt` using the provided parameters.\n- Parameters:\n  - guardKeyword: \n  - conditions: \n  - elseKeyword: \n  - body: "},{"p":["InOutExpr","init(ampersand:expression:)"],"f":[["init",10],["(",17],["ampersand",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`prefixAmpersand`, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["ampersand",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `InOutExpr` using the provided parameters.\n- Parameters:\n  - ampersand: \n  - expression: "},{"p":["ThrowStmt","init(throwKeyword:expression:)"],"f":[["init",10],["(",17],["throwKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`throw`, ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18,225],[")",17]],"s":[["init",10],["(",17],["throwKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["expression",1],[": ",17],["ExpressibleAsExprBuildable",18],[")",17]],"d":"Creates a `ThrowStmt` using the provided parameters.\n- Parameters:\n  - throwKeyword: \n  - expression: "},{"p":["TokenList","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["TokenSyntax",18,2974],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["TokenSyntax",18],["...)",17]]},{"p":["TokenList","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elements",2],[": [",17],["TokenSyntax",18,2974],["])",17]],"s":[["init",10],["([",17],["TokenSyntax",18],["])",17]],"d":"Creates a `TokenList` with the provided list of elements.\n- Parameters:\n  - elements: A list of `TokenSyntax`"},{"p":["TupleExpr","init(leftParen:rightParen:elementListBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`, ",17],["elementListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18,345],[" = { TupleExprElementList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementListBuilder",1],[": () -> ",17],["ExpressibleAsTupleExprElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TupleExpr","init(leftParen:elementList:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["elementList",1],[": ",17],["ExpressibleAsTupleExprElementList",18,345],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementList",1],[": ",17],["ExpressibleAsTupleExprElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `TupleExpr` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - elementList: \n  - rightParen: "},{"p":["TupleType","init(leftParen:rightParen:elementsBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`, ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsTupleTypeElementList",18,346],[" = { TupleTypeElementList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementsBuilder",1],[": () -> ",17],["ExpressibleAsTupleTypeElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["TupleType","init(leftParen:elements:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["elements",1],[": ",17],["ExpressibleAsTupleTypeElementList",18,346],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elements",1],[": ",17],["ExpressibleAsTupleTypeElementList",18],[", ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `TupleType` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - elements: \n  - rightParen: "},{"p":["WhileStmt","init(labelName:labelColon:whileKeyword:conditions:body:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`while`, ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18,339],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[")",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["TokenSyntax",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["conditions",1],[": ",17],["ExpressibleAsConditionElementList",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[")",17]],"d":"Creates a `WhileStmt` using the provided parameters.\n- Parameters:\n  - labelName: \n  - labelColon: \n  - whileKeyword: \n  - conditions: \n  - body: "},{"p":["WhileStmt","init(labelName:labelColon:whileKeyword:body:conditionsBuilder:)"],"f":[["init",10],["(",17],["labelName",1],[": ",17],["String",18,3043],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`while`, ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18,172],[", ",17],["conditionsBuilder",1],[": () -> ",17],["ExpressibleAsConditionElementList",18,339],[" = { ConditionElementList([]) })",17]],"s":[["init",10],["(",17],["labelName",1],[": ",17],["String",18],["?, ",17],["labelColon",1],[": ",17],["TokenSyntax",18],["?, ",17],["whileKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["body",1],[": ",17],["ExpressibleAsCodeBlock",18],[", ",17],["conditionsBuilder",1],[": () -> ",17],["ExpressibleAsConditionElementList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["YieldList","init(leftParen:elementList:trailingComma:rightParen:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["elementList",1],[": ",17],["ExpressibleAsExprList",18,160],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`)",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementList",1],[": ",17],["ExpressibleAsExprList",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[")",17]],"d":"Creates a `YieldList` using the provided parameters.\n- Parameters:\n  - leftParen: \n  - elementList: \n  - trailingComma: \n  - rightParen: "},{"p":["YieldList","init(leftParen:trailingComma:rightParen:elementListBuilder:)"],"f":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`leftParen`, ",17],["trailingComma",1],[": ",17],["TokenSyntax",18,2974],["? = nil, ",17],["rightParen",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`rightParen`, ",17],["elementListBuilder",1],[": () -> ",17],["ExpressibleAsExprList",18,160],[" = { ExprList([]) })",17]],"s":[["init",10],["(",17],["leftParen",1],[": ",17],["TokenSyntax",18],[", ",17],["trailingComma",1],[": ",17],["TokenSyntax",18],["?, ",17],["rightParen",1],[": ",17],["TokenSyntax",18],[", ",17],["elementListBuilder",1],[": () -> ",17],["ExpressibleAsExprList",18],[")",17]],"d":"A convenience initializer that allows:\n - Initializing syntax collections using result builders\n - Initializing tokens without default text using strings"},{"p":["YieldStmt","init(yieldKeyword:yields:)"],"f":[["init",10],["(",17],["yieldKeyword",1],[": ",17],["TokenSyntax",18,2974],[" = TokenSyntax.`yield`, ",17],["yields",1],[": ",17],["ExpressibleAsSyntaxBuildable",18,138],[")",17]],"s":[["init",10],["(",17],["yieldKeyword",1],[": ",17],["TokenSyntax",18],[", ",17],["yields",1],[": ",17],["ExpressibleAsSyntaxBuildable",18],[")",17]],"d":"Creates a `YieldStmt` using the provided parameters.\n- Parameters:\n  - yieldKeyword: \n  - yields: "},{"p":["Format","indentWidth"],"f":[["let",12],[" ",17],["indentWidth",7],[": ",17],["Int",18,3046]],"s":[["let",12],[" ",17],["indentWidth",7],[": ",17],["Int",18]]},{"p":["AccessPathBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807],["]) -> ",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["AccessPathBuilder",18],[".",17],["Component",18],["]) -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["AccessPathBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807],["...) -> ",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["AccessPathBuilder",18],[".",17],["Component",18],["...) -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["AccessPathBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807],[") -> ",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["AccessPathBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AccessPathBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807],[") -> ",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["AccessPathBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AccessPathBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807],["?) -> ",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["AccessPathBuilder",18],[".",17],["Component",18],["?) -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["AccessPathBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["AccessPathBuilder",18,394],[".",17],["Expression",18,2805],[") -> ",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["AccessPathBuilder",18],[".",17],["Expression",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["AccessPathBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807],[") -> ",17],["AccessPathBuilder",18,394],[".",17],["FinalResult",18,2806]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["AccessPathBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["AccessPathBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807],[") -> ",17],["AccessPathBuilder",18,394],[".",17],["Component",18,2807]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["AccessPathBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessPathBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["AccessorListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810],["]) -> ",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["AccessorListBuilder",18],[".",17],["Component",18],["]) -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["AccessorListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810],["...) -> ",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["AccessorListBuilder",18],[".",17],["Component",18],["...) -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["AccessorListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810],[") -> ",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["AccessorListBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AccessorListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810],[") -> ",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["AccessorListBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AccessorListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810],["?) -> ",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["AccessorListBuilder",18],[".",17],["Component",18],["?) -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["AccessorListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["AccessorListBuilder",18,395],[".",17],["Expression",18,2808],[") -> ",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["AccessorListBuilder",18],[".",17],["Expression",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["AccessorListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810],[") -> ",17],["AccessorListBuilder",18,395],[".",17],["FinalResult",18,2809]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["AccessorListBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["AccessorListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810],[") -> ",17],["AccessorListBuilder",18,395],[".",17],["Component",18,2810]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["AccessorListBuilder",18],[".",17],["Component",18],[") -> ",17],["AccessorListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CaseItemListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813],["]) -> ",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CaseItemListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CaseItemListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813],["...) -> ",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CaseItemListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CaseItemListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813],[") -> ",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CaseItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CaseItemListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813],[") -> ",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CaseItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CaseItemListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813],["?) -> ",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CaseItemListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CaseItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CaseItemListBuilder",18,396],[".",17],["Expression",18,2811],[") -> ",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CaseItemListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CaseItemListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813],[") -> ",17],["CaseItemListBuilder",18,396],[".",17],["FinalResult",18,2812]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CaseItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CaseItemListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813],[") -> ",17],["CaseItemListBuilder",18,396],[".",17],["Component",18,2813]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CaseItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CaseItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ModifierListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816],["]) -> ",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ModifierListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ModifierListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816],["...) -> ",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ModifierListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ModifierListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816],[") -> ",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ModifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ModifierListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816],[") -> ",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ModifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ModifierListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816],["?) -> ",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ModifierListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ModifierListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ModifierListBuilder",18,397],[".",17],["Expression",18,2814],[") -> ",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ModifierListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ModifierListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816],[") -> ",17],["ModifierListBuilder",18,397],[".",17],["FinalResult",18,2815]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ModifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ModifierListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816],[") -> ",17],["ModifierListBuilder",18,397],[".",17],["Component",18,2816]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ModifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["ModifierListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ObjCSelectorBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819],["]) -> ",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],["]) -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ObjCSelectorBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819],["...) -> ",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],["...) -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ObjCSelectorBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819],[") -> ",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ObjCSelectorBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819],[") -> ",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ObjCSelectorBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819],["?) -> ",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],["?) -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ObjCSelectorBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ObjCSelectorBuilder",18,398],[".",17],["Expression",18,2817],[") -> ",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Expression",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ObjCSelectorBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819],[") -> ",17],["ObjCSelectorBuilder",18,398],[".",17],["FinalResult",18,2818]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ObjCSelectorBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819],[") -> ",17],["ObjCSelectorBuilder",18,398],[".",17],["Component",18,2819]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ObjCSelectorBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjCSelectorBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["AttributeListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822],["]) -> ",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["AttributeListBuilder",18],[".",17],["Component",18],["]) -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["AttributeListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822],["...) -> ",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["AttributeListBuilder",18],[".",17],["Component",18],["...) -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["AttributeListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822],[") -> ",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["AttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AttributeListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822],[") -> ",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["AttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AttributeListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822],["?) -> ",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["AttributeListBuilder",18],[".",17],["Component",18],["?) -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["AttributeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["AttributeListBuilder",18,399],[".",17],["Expression",18,2820],[") -> ",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["AttributeListBuilder",18],[".",17],["Expression",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["AttributeListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822],[") -> ",17],["AttributeListBuilder",18,399],[".",17],["FinalResult",18,2821]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["AttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["AttributeListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822],[") -> ",17],["AttributeListBuilder",18,399],[".",17],["Component",18,2822]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["AttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["AttributeListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CatchItemListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825],["]) -> ",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CatchItemListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CatchItemListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825],["...) -> ",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CatchItemListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CatchItemListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825],[") -> ",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CatchItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CatchItemListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825],[") -> ",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CatchItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CatchItemListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825],["?) -> ",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CatchItemListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CatchItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CatchItemListBuilder",18,400],[".",17],["Expression",18,2823],[") -> ",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CatchItemListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CatchItemListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825],[") -> ",17],["CatchItemListBuilder",18,400],[".",17],["FinalResult",18,2824]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CatchItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CatchItemListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825],[") -> ",17],["CatchItemListBuilder",18,400],[".",17],["Component",18,2825]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CatchItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["IdentifierListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828],["]) -> ",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["IdentifierListBuilder",18],[".",17],["Component",18],["]) -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["IdentifierListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828],["...) -> ",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["IdentifierListBuilder",18],[".",17],["Component",18],["...) -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["IdentifierListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828],[") -> ",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["IdentifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["IdentifierListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828],[") -> ",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["IdentifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["IdentifierListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828],["?) -> ",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["IdentifierListBuilder",18],[".",17],["Component",18],["?) -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["IdentifierListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["IdentifierListBuilder",18,401],[".",17],["Expression",18,2826],[") -> ",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["IdentifierListBuilder",18],[".",17],["Expression",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["IdentifierListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828],[") -> ",17],["IdentifierListBuilder",18,401],[".",17],["FinalResult",18,2827]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["IdentifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["IdentifierListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828],[") -> ",17],["IdentifierListBuilder",18,401],[".",17],["Component",18,2828]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["IdentifierListBuilder",18],[".",17],["Component",18],[") -> ",17],["IdentifierListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["MemberDeclListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831],["]) -> ",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["MemberDeclListBuilder",18],[".",17],["Component",18],["]) -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["MemberDeclListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831],["...) -> ",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Component",18],["...) -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["MemberDeclListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831],[") -> ",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["MemberDeclListBuilder",18],[".",17],["Component",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["MemberDeclListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831],[") -> ",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["MemberDeclListBuilder",18],[".",17],["Component",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["MemberDeclListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831],["?) -> ",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Component",18],["?) -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["MemberDeclListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["MemberDeclListBuilder",18,402],[".",17],["Expression",18,2829],[") -> ",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Expression",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["MemberDeclListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831],[") -> ",17],["MemberDeclListBuilder",18,402],[".",17],["FinalResult",18,2830]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Component",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["MemberDeclListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831],[") -> ",17],["MemberDeclListBuilder",18,402],[".",17],["Component",18,2831]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["MemberDeclListBuilder",18],[".",17],["Component",18],[") -> ",17],["MemberDeclListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["SwitchCaseListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834],["]) -> ",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],["]) -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["SwitchCaseListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834],["...) -> ",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],["...) -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["SwitchCaseListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834],[") -> ",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["SwitchCaseListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834],[") -> ",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["SwitchCaseListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834],["?) -> ",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],["?) -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["SwitchCaseListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["SwitchCaseListBuilder",18,403],[".",17],["Expression",18,2832],[") -> ",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Expression",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["SwitchCaseListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834],[") -> ",17],["SwitchCaseListBuilder",18,403],[".",17],["FinalResult",18,2833]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["SwitchCaseListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834],[") -> ",17],["SwitchCaseListBuilder",18,403],[".",17],["Component",18,2834]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["SwitchCaseListBuilder",18],[".",17],["Component",18],[") -> ",17],["SwitchCaseListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CatchClauseListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837],["]) -> ",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CatchClauseListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CatchClauseListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837],["...) -> ",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CatchClauseListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837],[") -> ",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CatchClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CatchClauseListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837],[") -> ",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CatchClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CatchClauseListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837],["?) -> ",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CatchClauseListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CatchClauseListBuilder",18,404],[".",17],["Expression",18,2835],[") -> ",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CatchClauseListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837],[") -> ",17],["CatchClauseListBuilder",18,404],[".",17],["FinalResult",18,2836]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CatchClauseListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837],[") -> ",17],["CatchClauseListBuilder",18,404],[".",17],["Component",18,2837]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CatchClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["CatchClauseListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ArrayElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840],["]) -> ",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ArrayElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ArrayElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840],["...) -> ",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ArrayElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840],[") -> ",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ArrayElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ArrayElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840],[") -> ",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ArrayElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ArrayElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840],["?) -> ",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ArrayElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ArrayElementListBuilder",18,405],[".",17],["Expression",18,2838],[") -> ",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ArrayElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840],[") -> ",17],["ArrayElementListBuilder",18,405],[".",17],["FinalResult",18,2839]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ArrayElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840],[") -> ",17],["ArrayElementListBuilder",18,405],[".",17],["Component",18,2840]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ArrayElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ArrayElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ClosureParamListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843],["]) -> ",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ClosureParamListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ClosureParamListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843],["...) -> ",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ClosureParamListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843],[") -> ",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ClosureParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ClosureParamListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843],[") -> ",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ClosureParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ClosureParamListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843],["?) -> ",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ClosureParamListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ClosureParamListBuilder",18,406],[".",17],["Expression",18,2841],[") -> ",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ClosureParamListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843],[") -> ",17],["ClosureParamListBuilder",18,406],[".",17],["FinalResult",18,2842]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ClosureParamListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843],[") -> ",17],["ClosureParamListBuilder",18,406],[".",17],["Component",18,2843]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ClosureParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureParamListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CodeBlockItemListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846],["...) -> ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CodeBlockItemListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846],["]) -> ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CodeBlockItemListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846],[") -> ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CodeBlockItemListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846],[") -> ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CodeBlockItemListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846],["?) -> ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CodeBlockItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Expression",18,2844],[") -> ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CodeBlockItemListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846],[") -> ",17],["CodeBlockItemListBuilder",18,407],[".",17],["FinalResult",18,2845]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CodeBlockItemListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846],[") -> ",17],["CodeBlockItemListBuilder",18,407],[".",17],["Component",18,2846]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["CodeBlockItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["InheritedTypeListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849],["]) -> ",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],["]) -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["InheritedTypeListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849],["...) -> ",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],["...) -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["InheritedTypeListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849],[") -> ",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["InheritedTypeListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849],[") -> ",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["InheritedTypeListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849],["?) -> ",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],["?) -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["InheritedTypeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["InheritedTypeListBuilder",18,408],[".",17],["Expression",18,2847],[") -> ",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Expression",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["InheritedTypeListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849],[") -> ",17],["InheritedTypeListBuilder",18,408],[".",17],["FinalResult",18,2848]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["InheritedTypeListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849],[") -> ",17],["InheritedTypeListBuilder",18,408],[".",17],["Component",18,2849]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["InheritedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["InheritedTypeListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["NonEmptyTokenListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852],["]) -> ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],["]) -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["NonEmptyTokenListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852],["...) -> ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],["...) -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["NonEmptyTokenListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852],[") -> ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["NonEmptyTokenListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852],[") -> ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["NonEmptyTokenListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852],["?) -> ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],["?) -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["NonEmptyTokenListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Expression",18,2850],[") -> ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Expression",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["NonEmptyTokenListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852],[") -> ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["FinalResult",18,2851]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["NonEmptyTokenListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852],[") -> ",17],["NonEmptyTokenListBuilder",18,409],[".",17],["Component",18,2852]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["NonEmptyTokenListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["IfConfigClauseListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855],["]) -> ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],["]) -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["IfConfigClauseListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855],["...) -> ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],["...) -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["IfConfigClauseListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855],[") -> ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["IfConfigClauseListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855],[") -> ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["IfConfigClauseListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855],["?) -> ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],["?) -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["IfConfigClauseListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Expression",18,2853],[") -> ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Expression",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["IfConfigClauseListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855],[") -> ",17],["IfConfigClauseListBuilder",18,410],[".",17],["FinalResult",18,2854]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["IfConfigClauseListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855],[") -> ",17],["IfConfigClauseListBuilder",18,410],[".",17],["Component",18,2855]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18],[") -> ",17],["IfConfigClauseListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["PatternBindingListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858],["]) -> ",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["PatternBindingListBuilder",18],[".",17],["Component",18],["]) -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["PatternBindingListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858],["...) -> ",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Component",18],["...) -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["PatternBindingListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858],[") -> ",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["PatternBindingListBuilder",18],[".",17],["Component",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PatternBindingListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858],[") -> ",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["PatternBindingListBuilder",18],[".",17],["Component",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PatternBindingListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858],["?) -> ",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Component",18],["?) -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["PatternBindingListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["PatternBindingListBuilder",18,411],[".",17],["Expression",18,2856],[") -> ",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Expression",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["PatternBindingListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858],[") -> ",17],["PatternBindingListBuilder",18,411],[".",17],["FinalResult",18,2857]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Component",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["PatternBindingListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858],[") -> ",17],["PatternBindingListBuilder",18,411],[".",17],["Component",18,2858]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["PatternBindingListBuilder",18],[".",17],["Component",18],[") -> ",17],["PatternBindingListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["EnumCaseElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861],["]) -> ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["EnumCaseElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861],["...) -> ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["EnumCaseElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861],[") -> ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["EnumCaseElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861],[") -> ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["EnumCaseElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861],["?) -> ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["EnumCaseElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Expression",18,2859],[") -> ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["EnumCaseElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861],[") -> ",17],["EnumCaseElementListBuilder",18,412],[".",17],["FinalResult",18,2860]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["EnumCaseElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861],[") -> ",17],["EnumCaseElementListBuilder",18,412],[".",17],["Component",18,2861]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["EnumCaseElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["GenericArgumentListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864],["]) -> ",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],["]) -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["GenericArgumentListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864],["...) -> ",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],["...) -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["GenericArgumentListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864],[") -> ",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericArgumentListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864],[") -> ",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericArgumentListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864],["?) -> ",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],["?) -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["GenericArgumentListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["GenericArgumentListBuilder",18,413],[".",17],["Expression",18,2862],[") -> ",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Expression",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["GenericArgumentListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864],[") -> ",17],["GenericArgumentListBuilder",18,413],[".",17],["FinalResult",18,2863]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["GenericArgumentListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864],[") -> ",17],["GenericArgumentListBuilder",18,413],[".",17],["Component",18,2864]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["GenericArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericArgumentListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["AvailabilitySpecListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867],[") -> ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["AvailabilitySpecListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867],["]) -> ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],["]) -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["AvailabilitySpecListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867],["...) -> ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],["...) -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["AvailabilitySpecListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867],[") -> ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AvailabilitySpecListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867],[") -> ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["AvailabilitySpecListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867],["?) -> ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],["?) -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["AvailabilitySpecListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Expression",18,2865],[") -> ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Expression",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["AvailabilitySpecListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["Component",18,2867],[") -> ",17],["AvailabilitySpecListBuilder",18,414],[".",17],["FinalResult",18,2866]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["AvailabilitySpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["AvailabilitySpecListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ConditionElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870],["]) -> ",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ConditionElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ConditionElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870],["...) -> ",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ConditionElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870],[") -> ",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ConditionElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ConditionElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870],[") -> ",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ConditionElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ConditionElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870],["?) -> ",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ConditionElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ConditionElementListBuilder",18,415],[".",17],["Expression",18,2868],[") -> ",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ConditionElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870],[") -> ",17],["ConditionElementListBuilder",18,415],[".",17],["FinalResult",18,2869]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ConditionElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870],[") -> ",17],["ConditionElementListBuilder",18,415],[".",17],["Component",18,2870]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ConditionElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["ConditionElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["DeclNameArgumentListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873],["]) -> ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],["]) -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["DeclNameArgumentListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873],["...) -> ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],["...) -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["DeclNameArgumentListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873],[") -> ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DeclNameArgumentListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873],[") -> ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DeclNameArgumentListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873],["?) -> ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],["?) -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["DeclNameArgumentListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Expression",18,2871],[") -> ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Expression",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["DeclNameArgumentListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873],[") -> ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["FinalResult",18,2872]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["DeclNameArgumentListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873],[") -> ",17],["DeclNameArgumentListBuilder",18,416],[".",17],["Component",18,2873]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18],[") -> ",17],["DeclNameArgumentListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["GenericParameterListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876],["]) -> ",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["GenericParameterListBuilder",18],[".",17],["Component",18],["]) -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["GenericParameterListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876],["...) -> ",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Component",18],["...) -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["GenericParameterListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876],[") -> ",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["GenericParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericParameterListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876],[") -> ",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["GenericParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericParameterListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876],["?) -> ",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Component",18],["?) -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["GenericParameterListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["GenericParameterListBuilder",18,417],[".",17],["Expression",18,2874],[") -> ",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Expression",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["GenericParameterListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876],[") -> ",17],["GenericParameterListBuilder",18,417],[".",17],["FinalResult",18,2875]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["GenericParameterListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876],[") -> ",17],["GenericParameterListBuilder",18,417],[".",17],["Component",18,2876]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["GenericParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericParameterListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["TupleExprElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879],["]) -> ",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["TupleExprElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879],["...) -> ",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["TupleExprElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879],[") -> ",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TupleExprElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879],[") -> ",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TupleExprElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879],["?) -> ",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["TupleExprElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["TupleExprElementListBuilder",18,418],[".",17],["Expression",18,2877],[") -> ",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["TupleExprElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879],[") -> ",17],["TupleExprElementListBuilder",18,418],[".",17],["FinalResult",18,2878]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["TupleExprElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879],[") -> ",17],["TupleExprElementListBuilder",18,418],[".",17],["Component",18,2879]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["TupleExprElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleExprElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["TupleTypeElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882],["]) -> ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["TupleTypeElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882],["...) -> ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["TupleTypeElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882],[") -> ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TupleTypeElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882],[") -> ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TupleTypeElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882],["?) -> ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["TupleTypeElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Expression",18,2880],[") -> ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["TupleTypeElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882],[") -> ",17],["TupleTypeElementListBuilder",18,419],[".",17],["FinalResult",18,2881]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["TupleTypeElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882],[") -> ",17],["TupleTypeElementListBuilder",18,419],[".",17],["Component",18,2882]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TupleTypeElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["DictionaryElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885],["]) -> ",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["DictionaryElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885],["...) -> ",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["DictionaryElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885],[") -> ",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DictionaryElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885],[") -> ",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DictionaryElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885],["?) -> ",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["DictionaryElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["DictionaryElementListBuilder",18,420],[".",17],["Expression",18,2883],[") -> ",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["DictionaryElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885],[") -> ",17],["DictionaryElementListBuilder",18,420],[".",17],["FinalResult",18,2884]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["DictionaryElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885],[") -> ",17],["DictionaryElementListBuilder",18,420],[".",17],["Component",18,2885]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["DictionaryElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["DictionaryElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["FunctionParameterListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888],["]) -> ",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],["]) -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["FunctionParameterListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888],["...) -> ",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],["...) -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["FunctionParameterListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888],[") -> ",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["FunctionParameterListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888],[") -> ",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["FunctionParameterListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888],["?) -> ",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],["?) -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["FunctionParameterListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["FunctionParameterListBuilder",18,421],[".",17],["Expression",18,2886],[") -> ",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Expression",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["FunctionParameterListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888],[") -> ",17],["FunctionParameterListBuilder",18,421],[".",17],["FinalResult",18,2887]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["FunctionParameterListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888],[") -> ",17],["FunctionParameterListBuilder",18,421],[".",17],["Component",18,2888]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["FunctionParameterListBuilder",18],[".",17],["Component",18],[") -> ",17],["FunctionParameterListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["StringLiteralSegmentsBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891],["]) -> ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],["]) -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["StringLiteralSegmentsBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891],["...) -> ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],["...) -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["StringLiteralSegmentsBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891],[") -> ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["StringLiteralSegmentsBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891],[") -> ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["StringLiteralSegmentsBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891],["?) -> ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],["?) -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["StringLiteralSegmentsBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Expression",18,2889],[") -> ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Expression",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["StringLiteralSegmentsBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891],[") -> ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["FinalResult",18,2890]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["StringLiteralSegmentsBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891],[") -> ",17],["StringLiteralSegmentsBuilder",18,422],[".",17],["Component",18,2891]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18],[") -> ",17],["StringLiteralSegmentsBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ClosureCaptureItemListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894],["]) -> ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ClosureCaptureItemListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894],["...) -> ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ClosureCaptureItemListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894],[") -> ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ClosureCaptureItemListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894],[") -> ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ClosureCaptureItemListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894],["?) -> ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ClosureCaptureItemListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Expression",18,2892],[") -> ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ClosureCaptureItemListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894],[") -> ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["FinalResult",18,2893]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ClosureCaptureItemListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894],[") -> ",17],["ClosureCaptureItemListBuilder",18,423],[".",17],["Component",18,2894]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18],[") -> ",17],["ClosureCaptureItemListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["GenericRequirementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897],["]) -> ",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["GenericRequirementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897],["...) -> ",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["GenericRequirementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897],[") -> ",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericRequirementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897],[") -> ",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["GenericRequirementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897],["?) -> ",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["GenericRequirementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["GenericRequirementListBuilder",18,424],[".",17],["Expression",18,2895],[") -> ",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["GenericRequirementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897],[") -> ",17],["GenericRequirementListBuilder",18,424],[".",17],["FinalResult",18,2896]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["GenericRequirementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897],[") -> ",17],["GenericRequirementListBuilder",18,424],[".",17],["Component",18,2897]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["GenericRequirementListBuilder",18],[".",17],["Component",18],[") -> ",17],["GenericRequirementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["PrecedenceGroupNameListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900],["]) -> ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],["]) -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["PrecedenceGroupNameListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900],["...) -> ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],["...) -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["PrecedenceGroupNameListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900],[") -> ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrecedenceGroupNameListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900],[") -> ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrecedenceGroupNameListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900],["?) -> ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],["?) -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["PrecedenceGroupNameListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Expression",18,2898],[") -> ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Expression",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["PrecedenceGroupNameListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900],[") -> ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["FinalResult",18,2899]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["PrecedenceGroupNameListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900],[") -> ",17],["PrecedenceGroupNameListBuilder",18,425],[".",17],["Component",18,2900]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupNameListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["TuplePatternElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903],["]) -> ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["TuplePatternElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903],["...) -> ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["TuplePatternElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903],[") -> ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TuplePatternElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903],[") -> ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TuplePatternElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903],["?) -> ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["TuplePatternElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Expression",18,2901],[") -> ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["TuplePatternElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903],[") -> ",17],["TuplePatternElementListBuilder",18,426],[".",17],["FinalResult",18,2902]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["TuplePatternElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903],[") -> ",17],["TuplePatternElementListBuilder",18,426],[".",17],["Component",18,2903]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["TuplePatternElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["PrimaryAssociatedTypeListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906],["]) -> ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],["]) -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["PrimaryAssociatedTypeListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906],["...) -> ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],["...) -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["PrimaryAssociatedTypeListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrimaryAssociatedTypeListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrimaryAssociatedTypeListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906],["?) -> ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],["?) -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["PrimaryAssociatedTypeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Expression",18,2904],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Expression",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["PrimaryAssociatedTypeListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["FinalResult",18,2905]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["PrimaryAssociatedTypeListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18,427],[".",17],["Component",18,2906]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrimaryAssociatedTypeListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["CompositionTypeElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909],["]) -> ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["CompositionTypeElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909],["...) -> ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["CompositionTypeElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909],[") -> ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CompositionTypeElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909],[") -> ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["CompositionTypeElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909],["?) -> ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["CompositionTypeElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Expression",18,2907],[") -> ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["CompositionTypeElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909],[") -> ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["FinalResult",18,2908]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["CompositionTypeElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909],[") -> ",17],["CompositionTypeElementListBuilder",18,428],[".",17],["Component",18,2909]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["CompositionTypeElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["DifferentiabilityParamListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912],["]) -> ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],["]) -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["DifferentiabilityParamListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912],["...) -> ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],["...) -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["DifferentiabilityParamListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912],[") -> ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DifferentiabilityParamListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912],[") -> ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["DifferentiabilityParamListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912],["?) -> ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],["?) -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["DifferentiabilityParamListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Expression",18,2910],[") -> ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Expression",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["DifferentiabilityParamListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912],[") -> ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["FinalResult",18,2911]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["DifferentiabilityParamListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912],[") -> ",17],["DifferentiabilityParamListBuilder",18,429],[".",17],["Component",18,2912]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18],[") -> ",17],["DifferentiabilityParamListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["SpecializeAttributeSpecListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915],["]) -> ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],["]) -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["SpecializeAttributeSpecListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915],["...) -> ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],["...) -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["SpecializeAttributeSpecListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["SpecializeAttributeSpecListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["SpecializeAttributeSpecListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915],["?) -> ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],["?) -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["SpecializeAttributeSpecListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Expression",18,2913],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Expression",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["SpecializeAttributeSpecListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["FinalResult",18,2914]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["SpecializeAttributeSpecListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915],[") -> ",17],["SpecializeAttributeSpecListBuilder",18,430],[".",17],["Component",18,2915]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18],[") -> ",17],["SpecializeAttributeSpecListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["PrecedenceGroupAttributeListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918],["]) -> ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],["]) -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["PrecedenceGroupAttributeListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918],["...) -> ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],["...) -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["PrecedenceGroupAttributeListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrecedenceGroupAttributeListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["PrecedenceGroupAttributeListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918],["?) -> ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],["?) -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["PrecedenceGroupAttributeListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Expression",18,2916],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Expression",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["PrecedenceGroupAttributeListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["FinalResult",18,2917]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["PrecedenceGroupAttributeListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18,431],[".",17],["Component",18,2918]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18],[") -> ",17],["PrecedenceGroupAttributeListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["MultipleTrailingClosureElementListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921],["]) -> ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],["]) -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["MultipleTrailingClosureElementListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921],["...) -> ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],["...) -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["MultipleTrailingClosureElementListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["MultipleTrailingClosureElementListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["MultipleTrailingClosureElementListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921],["?) -> ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],["?) -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["MultipleTrailingClosureElementListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Expression",18,2919],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Expression",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["MultipleTrailingClosureElementListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["FinalResult",18,2920]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["MultipleTrailingClosureElementListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18,432],[".",17],["Component",18,2921]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18],[") -> ",17],["MultipleTrailingClosureElementListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ExprListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924],["]) -> ",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ExprListBuilder",18],[".",17],["Component",18],["]) -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ExprListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924],["...) -> ",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ExprListBuilder",18],[".",17],["Component",18],["...) -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ExprListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924],[") -> ",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ExprListBuilder",18],[".",17],["Component",18],[") -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ExprListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924],[") -> ",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ExprListBuilder",18],[".",17],["Component",18],[") -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ExprListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924],["?) -> ",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ExprListBuilder",18],[".",17],["Component",18],["?) -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ExprListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ExprListBuilder",18,433],[".",17],["Expression",18,2922],[") -> ",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ExprListBuilder",18],[".",17],["Expression",18],[") -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ExprListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924],[") -> ",17],["ExprListBuilder",18,433],[".",17],["FinalResult",18,2923]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ExprListBuilder",18],[".",17],["Component",18],[") -> ",17],["ExprListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ExprListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924],[") -> ",17],["ExprListBuilder",18,433],[".",17],["Component",18,2924]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ExprListBuilder",18],[".",17],["Component",18],[") -> ",17],["ExprListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ObjcNameBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927],["]) -> ",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["ObjcNameBuilder",18],[".",17],["Component",18],["]) -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["ObjcNameBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927],["...) -> ",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["ObjcNameBuilder",18],[".",17],["Component",18],["...) -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["ObjcNameBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927],[") -> ",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["ObjcNameBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ObjcNameBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927],[") -> ",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["ObjcNameBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["ObjcNameBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927],["?) -> ",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["ObjcNameBuilder",18],[".",17],["Component",18],["?) -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["ObjcNameBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["ObjcNameBuilder",18,434],[".",17],["Expression",18,2925],[") -> ",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["ObjcNameBuilder",18],[".",17],["Expression",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["ObjcNameBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927],[") -> ",17],["ObjcNameBuilder",18,434],[".",17],["FinalResult",18,2926]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["ObjcNameBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["ObjcNameBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927],[") -> ",17],["ObjcNameBuilder",18,434],[".",17],["Component",18,2927]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["ObjcNameBuilder",18],[".",17],["Component",18],[") -> ",17],["ObjcNameBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["TokenListBuilder","buildArray(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["(",17],["_",1],[" ",17],["components",2],[": [",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930],["]) -> ",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildArray",7],["([",17],["TokenListBuilder",18],[".",17],["Component",18],["]) -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"Enables support for 'for..in' loops by combining the\nresults of all iterations into a single result."},{"p":["TokenListBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930],["...) -> ",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["TokenListBuilder",18],[".",17],["Component",18],["...) -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"Required by every result builder to build combined results from\nstatement blocks."},{"p":["TokenListBuilder","buildEither(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930],[") -> ",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["first",1],[": ",17],["TokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(second:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TokenListBuilder","buildEither(second:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930],[") -> ",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildEither",7],["(",17],["second",1],[": ",17],["TokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"With buildEither(first:), enables support for 'if-else' and 'switch'\nstatements by folding conditional results into a single result."},{"p":["TokenListBuilder","buildOptional(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930],["?) -> ",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildOptional",7],["(",17],["TokenListBuilder",18],[".",17],["Component",18],["?) -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"Enables support for `if` statements that do not have an `else`."},{"p":["TokenListBuilder","buildExpression(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["_",1],[" ",17],["expression",2],[": ",17],["TokenListBuilder",18,435],[".",17],["Expression",18,2928],[") -> ",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildExpression",7],["(",17],["TokenListBuilder",18],[".",17],["Expression",18],[") -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"If declared, provides contextual type information for statement\nexpressions to translate them into partial results."},{"p":["TokenListBuilder","buildFinalResult(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930],[") -> ",17],["TokenListBuilder",18,435],[".",17],["FinalResult",18,2929]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildFinalResult",7],["(",17],["TokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["TokenListBuilder",18],[".",17],["FinalResult",18]],"d":"If declared, this will be called on the partial result from the outermost\nblock statement to produce the final returned result."},{"p":["TokenListBuilder","buildLimitedAvailability(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["_",1],[" ",17],["component",2],[": ",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930],[") -> ",17],["TokenListBuilder",18,435],[".",17],["Component",18,2930]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildLimitedAvailability",7],["(",17],["TokenListBuilder",18],[".",17],["Component",18],[") -> ",17],["TokenListBuilder",18],[".",17],["Component",18]],"d":"If declared, this will be called on the partial result of an 'if\n#available' block to allow the result builder to erase type\ninformation."},{"p":["ExpressibleAsSyntaxBuildable","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSyntaxBuildable","createAttributeList()"],"f":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18,473]],"s":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18]],"d":"Conformance to `ExpressibleAsAttributeList`."},{"p":["ExpressibleAsSyntaxBuildable","createSwitchCaseList()"],"f":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18,499]],"s":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18]],"d":"Conformance to `ExpressibleAsSwitchCaseList`."},{"p":["ExpressibleAsSyntaxBuildable","createStringLiteralSegments()"],"f":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18,601]],"s":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18]],"d":"Conformance to `ExpressibleAsStringLiteralSegments`."},{"p":["ExpressibleAsSyntaxBuildable","createSpecializeAttributeSpecList()"],"f":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18,629]],"s":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18]],"d":"Conformance to `ExpressibleAsSpecializeAttributeSpecList`."},{"p":["ExpressibleAsSyntaxBuildable","createPrecedenceGroupAttributeList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18,633]],"s":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupAttributeList`."},{"p":["ExpressibleAsAsTypePattern","createAsTypePattern()"],"f":[["func",12],[" ",17],["createAsTypePattern",7],["() -> ",17],["AsTypePattern",18,472]],"s":[["func",12],[" ",17],["createAsTypePattern",7],["() -> ",17],["AsTypePattern",18]]},{"p":["ExpressibleAsAsTypePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsAsExpr","createAsExpr()"],"f":[["func",12],[" ",17],["createAsExpr",7],["() -> ",17],["AsExpr",18,641]],"s":[["func",12],[" ",17],["createAsExpr",7],["() -> ",17],["AsExpr",18]]},{"p":["ExpressibleAsAsExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["SyntaxListBuildable","buildSyntaxList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntaxList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["?) -> [",17],["Syntax",18,2979],["]",17]],"s":[["func",12],[" ",17],["buildSyntaxList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["Syntax",18],["]",17]],"d":"Builds list of `Syntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `Syntax`."},{"p":["SyntaxBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["?) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `Syntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `Syntax`."},{"p":["SyntaxBuildable","buildSyntaxList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntaxList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> [",17],["Syntax",18,2979],["]",17]],"s":[["func",12],[" ",17],["buildSyntaxList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["Syntax",18],["]",17]],"d":"Builds list of `Syntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `Syntax`.\n\nSatisfies conformance to `SyntaxListBuildable`."},{"p":["SyntaxBuildable","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsSyntaxBuildable`."},{"p":["AccessPath","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["AccessPath","buildAccessPath(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildAccessPath",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["AccessPathSyntax",18,2931]],"s":[["func",12],[" ",17],["buildAccessPath",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["AccessPathSyntax",18]]},{"p":["AccessPath","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessPath` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessPath","createAccessPath()"],"f":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18,436]],"s":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18]],"d":"Conformance to `ExpressibleAsAccessPath`."},{"p":["ImportDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["ImportDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ImportDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ImportDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`ImportDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ImportDecl","createImportDecl()"],"f":[["func",12],[" ",17],["createImportDecl",7],["() -> ",17],["ImportDecl",18,437]],"s":[["func",12],[" ",17],["createImportDecl",7],["() -> ",17],["ImportDecl",18]],"d":"Conformance to `ExpressibleAsImportDecl`."},{"p":["ReturnStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["ReturnStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ReturnStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ReturnStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ReturnStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ReturnStmt","createReturnStmt()"],"f":[["func",12],[" ",17],["createReturnStmt",7],["() -> ",17],["ReturnStmt",18,438]],"s":[["func",12],[" ",17],["createReturnStmt",7],["() -> ",17],["ReturnStmt",18]],"d":"Conformance to `ExpressibleAsReturnStmt`."},{"p":["SourceFile","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["SourceFile","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SourceFile` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SourceFile","createSourceFile()"],"f":[["func",12],[" ",17],["createSourceFile",7],["() -> ",17],["SourceFile",18,439]],"s":[["func",12],[" ",17],["createSourceFile",7],["() -> ",17],["SourceFile",18]],"d":"Conformance to `ExpressibleAsSourceFile`."},{"p":["StructDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["StructDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`StructDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["StructDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`StructDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["StructDecl","createStructDecl()"],"f":[["func",12],[" ",17],["createStructDecl",7],["() -> ",17],["StructDecl",18,440]],"s":[["func",12],[" ",17],["createStructDecl",7],["() -> ",17],["StructDecl",18]],"d":"Conformance to `ExpressibleAsStructDecl`."},{"p":["SwitchCase","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["SwitchCase","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchCase` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SwitchCase","createSwitchCase()"],"f":[["func",12],[" ",17],["createSwitchCase",7],["() -> ",17],["SwitchCase",18,441]],"s":[["func",12],[" ",17],["createSwitchCase",7],["() -> ",17],["SwitchCase",18]],"d":"Conformance to `ExpressibleAsSwitchCase`."},{"p":["SwitchStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["SwitchStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SwitchStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`SwitchStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SwitchStmt","createSwitchStmt()"],"f":[["func",12],[" ",17],["createSwitchStmt",7],["() -> ",17],["SwitchStmt",18,442]],"s":[["func",12],[" ",17],["createSwitchStmt",7],["() -> ",17],["SwitchStmt",18]],"d":"Conformance to `ExpressibleAsSwitchStmt`."},{"p":["CatchClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CatchClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CatchClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CatchClause","createCatchClause()"],"f":[["func",12],[" ",17],["createCatchClause",7],["() -> ",17],["CatchClause",18,443]],"s":[["func",12],[" ",17],["createCatchClause",7],["() -> ",17],["CatchClause",18]],"d":"Conformance to `ExpressibleAsCatchClause`."},{"p":["ClosureExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ClosureExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ClosureExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureExpr","createClosureExpr()"],"f":[["func",12],[" ",17],["createClosureExpr",7],["() -> ",17],["ClosureExpr",18,444]],"s":[["func",12],[" ",17],["createClosureExpr",7],["() -> ",17],["ClosureExpr",18]],"d":"Conformance to `ExpressibleAsClosureExpr`."},{"p":["KeyPathExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["KeyPathExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`KeyPathExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["KeyPathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`KeyPathExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["KeyPathExpr","createKeyPathExpr()"],"f":[["func",12],[" ",17],["createKeyPathExpr",7],["() -> ",17],["KeyPathExpr",18,445]],"s":[["func",12],[" ",17],["createKeyPathExpr",7],["() -> ",17],["KeyPathExpr",18]],"d":"Conformance to `ExpressibleAsKeyPathExpr`."},{"p":["TernaryExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["TernaryExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TernaryExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TernaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`TernaryExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TernaryExpr","createTernaryExpr()"],"f":[["func",12],[" ",17],["createTernaryExpr",7],["() -> ",17],["TernaryExpr",18,446]],"s":[["func",12],[" ",17],["createTernaryExpr",7],["() -> ",17],["TernaryExpr",18]],"d":"Conformance to `ExpressibleAsTernaryExpr`."},{"p":["WhereClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["WhereClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`WhereClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["WhereClause","createWhereClause()"],"f":[["func",12],[" ",17],["createWhereClause",7],["() -> ",17],["WhereClause",18,447]],"s":[["func",12],[" ",17],["createWhereClause",7],["() -> ",17],["WhereClause",18]],"d":"Conformance to `ExpressibleAsWhereClause`."},{"p":["AccessorDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["AccessorDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessorDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`AccessorDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessorDecl","createAccessorDecl()"],"f":[["func",12],[" ",17],["createAccessorDecl",7],["() -> ",17],["AccessorDecl",18,448]],"s":[["func",12],[" ",17],["createAccessorDecl",7],["() -> ",17],["AccessorDecl",18]],"d":"Conformance to `ExpressibleAsAccessorDecl`."},{"p":["AccessorList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["AccessorList","buildAccessorList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildAccessorList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["AccessorListSyntax",18,2932]],"s":[["func",12],[" ",17],["buildAccessorList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["AccessorListSyntax",18]]},{"p":["AccessorList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessorList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessorList","createAccessorList()"],"f":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18,449]],"s":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18]],"d":"Conformance to `ExpressibleAsAccessorList`."},{"p":["ArrayElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ArrayElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrayElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrayElement","createArrayElement()"],"f":[["func",12],[" ",17],["createArrayElement",7],["() -> ",17],["ArrayElement",18,450]],"s":[["func",12],[" ",17],["createArrayElement",7],["() -> ",17],["ArrayElement",18]],"d":"Conformance to `ExpressibleAsArrayElement`."},{"p":["CaseItemList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["CaseItemList","buildCaseItemList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCaseItemList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["CaseItemListSyntax",18,2933]],"s":[["func",12],[" ",17],["buildCaseItemList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CaseItemListSyntax",18]]},{"p":["CaseItemList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CaseItemList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CaseItemList","createCaseItemList()"],"f":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18,451]],"s":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18]],"d":"Conformance to `ExpressibleAsCaseItemList`."},{"p":["ClosureParam","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ClosureParam","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureParam` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureParam","createClosureParam()"],"f":[["func",12],[" ",17],["createClosureParam",7],["() -> ",17],["ClosureParam",18,452]],"s":[["func",12],[" ",17],["createClosureParam",7],["() -> ",17],["ClosureParam",18]],"d":"Conformance to `ExpressibleAsClosureParam`."},{"p":["ContinueStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["ContinueStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ContinueStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ContinueStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ContinueStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ContinueStmt","createContinueStmt()"],"f":[["func",12],[" ",17],["createContinueStmt",7],["() -> ",17],["ContinueStmt",18,453]],"s":[["func",12],[" ",17],["createContinueStmt",7],["() -> ",17],["ContinueStmt",18]],"d":"Conformance to `ExpressibleAsContinueStmt`."},{"p":["DeclModifier","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DeclModifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclModifier` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclModifier","createDeclModifier()"],"f":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18,454]],"s":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18]],"d":"Conformance to `ExpressibleAsDeclModifier`."},{"p":["EnumCaseDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["EnumCaseDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumCaseDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumCaseDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`EnumCaseDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumCaseDecl","createEnumCaseDecl()"],"f":[["func",12],[" ",17],["createEnumCaseDecl",7],["() -> ",17],["EnumCaseDecl",18,455]],"s":[["func",12],[" ",17],["createEnumCaseDecl",7],["() -> ",17],["EnumCaseDecl",18]],"d":"Conformance to `ExpressibleAsEnumCaseDecl`."},{"p":["FunctionDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["FunctionDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`FunctionDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionDecl","createFunctionDecl()"],"f":[["func",12],[" ",17],["createFunctionDecl",7],["() -> ",17],["FunctionDecl",18,456]],"s":[["func",12],[" ",17],["createFunctionDecl",7],["() -> ",17],["FunctionDecl",18]],"d":"Conformance to `ExpressibleAsFunctionDecl`."},{"p":["FunctionType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["FunctionType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`FunctionType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionType","createFunctionType()"],"f":[["func",12],[" ",17],["createFunctionType",7],["() -> ",17],["FunctionType",18,457]],"s":[["func",12],[" ",17],["createFunctionType",7],["() -> ",17],["FunctionType",18]],"d":"Conformance to `ExpressibleAsFunctionType`."},{"p":["IfConfigDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["IfConfigDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IfConfigDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IfConfigDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`IfConfigDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IfConfigDecl","createIfConfigDecl()"],"f":[["func",12],[" ",17],["createIfConfigDecl",7],["() -> ",17],["IfConfigDecl",18,458]],"s":[["func",12],[" ",17],["createIfConfigDecl",7],["() -> ",17],["IfConfigDecl",18]],"d":"Conformance to `ExpressibleAsIfConfigDecl`."},{"p":["MetatypeType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["MetatypeType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MetatypeType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MetatypeType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`MetatypeType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MetatypeType","createMetatypeType()"],"f":[["func",12],[" ",17],["createMetatypeType",7],["() -> ",17],["MetatypeType",18,459]],"s":[["func",12],[" ",17],["createMetatypeType",7],["() -> ",17],["MetatypeType",18]],"d":"Conformance to `ExpressibleAsMetatypeType`."},{"p":["ModifierList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ModifierList","buildModifierList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildModifierList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ModifierListSyntax",18,2934]],"s":[["func",12],[" ",17],["buildModifierList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ModifierListSyntax",18]]},{"p":["ModifierList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ModifierList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ModifierList","createModifierList()"],"f":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18,460]],"s":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18]],"d":"Conformance to `ExpressibleAsModifierList`."},{"p":["ObjCSelector","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ObjCSelector","buildObjCSelector(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildObjCSelector",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ObjCSelectorSyntax",18,2935]],"s":[["func",12],[" ",17],["buildObjCSelector",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ObjCSelectorSyntax",18]]},{"p":["ObjCSelector","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjCSelector` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjCSelector","createObjCSelector()"],"f":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18,461]],"s":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18]],"d":"Conformance to `ExpressibleAsObjCSelector`."},{"p":["OperatorDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["OperatorDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OperatorDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OperatorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`OperatorDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OperatorDecl","createOperatorDecl()"],"f":[["func",12],[" ",17],["createOperatorDecl",7],["() -> ",17],["OperatorDecl",18,462]],"s":[["func",12],[" ",17],["createOperatorDecl",7],["() -> ",17],["OperatorDecl",18]],"d":"Conformance to `ExpressibleAsOperatorDecl`."},{"p":["OptionalType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["OptionalType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OptionalType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`OptionalType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalType","createOptionalType()"],"f":[["func",12],[" ",17],["createOptionalType",7],["() -> ",17],["OptionalType",18,463]],"s":[["func",12],[" ",17],["createOptionalType",7],["() -> ",17],["OptionalType",18]],"d":"Conformance to `ExpressibleAsOptionalType`."},{"p":["ProtocolDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["ProtocolDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ProtocolDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ProtocolDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`ProtocolDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ProtocolDecl","createProtocolDecl()"],"f":[["func",12],[" ",17],["createProtocolDecl",7],["() -> ",17],["ProtocolDecl",18,464]],"s":[["func",12],[" ",17],["createProtocolDecl",7],["() -> ",17],["ProtocolDecl",18]],"d":"Conformance to `ExpressibleAsProtocolDecl`."},{"p":["ReturnClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ReturnClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ReturnClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ReturnClause","createReturnClause()"],"f":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18,465]],"s":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18]],"d":"Conformance to `ExpressibleAsReturnClause`."},{"p":["SequenceExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["SequenceExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SequenceExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SequenceExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SequenceExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SequenceExpr","createSequenceExpr()"],"f":[["func",12],[" ",17],["createSequenceExpr",7],["() -> ",17],["SequenceExpr",18,466]],"s":[["func",12],[" ",17],["createSequenceExpr",7],["() -> ",17],["SequenceExpr",18]],"d":"Conformance to `ExpressibleAsSequenceExpr`."},{"p":["SuperRefExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["SuperRefExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SuperRefExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SuperRefExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SuperRefExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SuperRefExpr","createSuperRefExpr()"],"f":[["func",12],[" ",17],["createSuperRefExpr",7],["() -> ",17],["SuperRefExpr",18,467]],"s":[["func",12],[" ",17],["createSuperRefExpr",7],["() -> ",17],["SuperRefExpr",18]],"d":"Conformance to `ExpressibleAsSuperRefExpr`."},{"p":["TuplePattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["PatternSyntax",18,2975]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["TuplePattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TuplePattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TuplePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`TuplePattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TuplePattern","createTuplePattern()"],"f":[["func",12],[" ",17],["createTuplePattern",7],["() -> ",17],["TuplePattern",18,468]],"s":[["func",12],[" ",17],["createTuplePattern",7],["() -> ",17],["TuplePattern",18]],"d":"Conformance to `ExpressibleAsTuplePattern`."},{"p":["VariableDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["VariableDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`VariableDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["VariableDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`VariableDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["VariableDecl","createVariableDecl()"],"f":[["func",12],[" ",17],["createVariableDecl",7],["() -> ",17],["VariableDecl",18,469]],"s":[["func",12],[" ",17],["createVariableDecl",7],["() -> ",17],["VariableDecl",18]],"d":"Conformance to `ExpressibleAsVariableDecl`."},{"p":["VersionTuple","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["VersionTuple","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`VersionTuple` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["VersionTuple","createVersionTuple()"],"f":[["func",12],[" ",17],["createVersionTuple",7],["() -> ",17],["VersionTuple",18,470]],"s":[["func",12],[" ",17],["createVersionTuple",7],["() -> ",17],["VersionTuple",18]],"d":"Conformance to `ExpressibleAsVersionTuple`."},{"p":["AccessorBlock","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AccessorBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessorBlock` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessorBlock","createAccessorBlock()"],"f":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18,471]],"s":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18]],"d":"Conformance to `ExpressibleAsAccessorBlock`."},{"p":["AsTypePattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["PatternSyntax",18,2975]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["AsTypePattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AsTypePattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AsTypePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`AsTypePattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AsTypePattern","createAsTypePattern()"],"f":[["func",12],[" ",17],["createAsTypePattern",7],["() -> ",17],["AsTypePattern",18,472]],"s":[["func",12],[" ",17],["createAsTypePattern",7],["() -> ",17],["AsTypePattern",18]],"d":"Conformance to `ExpressibleAsAsTypePattern`."},{"p":["AttributeList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["AttributeList","buildAttributeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildAttributeList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["AttributeListSyntax",18,2936]],"s":[["func",12],[" ",17],["buildAttributeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["AttributeListSyntax",18]]},{"p":["AttributeList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AttributeList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AttributeList","createAttributeList()"],"f":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18,473]],"s":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18]],"d":"Conformance to `ExpressibleAsAttributeList`."},{"p":["CatchItemList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["CatchItemList","buildCatchItemList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCatchItemList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["CatchItemListSyntax",18,2937]],"s":[["func",12],[" ",17],["buildCatchItemList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CatchItemListSyntax",18]]},{"p":["CatchItemList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CatchItemList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CatchItemList","createCatchItemList()"],"f":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18,474]],"s":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18]],"d":"Conformance to `ExpressibleAsCatchItemList`."},{"p":["CodeBlockItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CodeBlockItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CodeBlockItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CodeBlockItem","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,475]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to `ExpressibleAsCodeBlockItem`."},{"p":["DeclBuildable","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["?) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Builds a `DeclSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `DeclSyntax`."},{"p":["DeclBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `DeclSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A new `Syntax` with the builded `DeclSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["DeclBuildable","buildDeclList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDeclList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> [",17],["DeclSyntax",18,2970],["]",17]],"s":[["func",12],[" ",17],["buildDeclList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["DeclSyntax",18],["]",17]],"d":"Builds list of `DeclSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `DeclSyntax`.\n\nSatisfies conformance to `DeclListBuildable`."},{"p":["DeclBuildable","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsDeclBuildable`."},{"p":["ExprBuildable","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["?) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Builds a `ExprSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `ExprSyntax`."},{"p":["ExprBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `ExprSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A new `Syntax` with the builded `ExprSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["ExprBuildable","buildExprList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> [",17],["ExprSyntax",18,2971],["]",17]],"s":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["ExprSyntax",18],["]",17]],"d":"Builds list of `ExprSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `ExprSyntax`.\n\nSatisfies conformance to `ExprListBuildable`."},{"p":["ExprBuildable","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsExprBuildable`."},{"p":["ExtensionDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["ExtensionDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExtensionDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExtensionDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`ExtensionDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExtensionDecl","createExtensionDecl()"],"f":[["func",12],[" ",17],["createExtensionDecl",7],["() -> ",17],["ExtensionDecl",18,476]],"s":[["func",12],[" ",17],["createExtensionDecl",7],["() -> ",17],["ExtensionDecl",18]],"d":"Conformance to `ExpressibleAsExtensionDecl`."},{"p":["InheritedType","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["InheritedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InheritedType` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InheritedType","createInheritedType()"],"f":[["func",12],[" ",17],["createInheritedType",7],["() -> ",17],["InheritedType",18,477]],"s":[["func",12],[" ",17],["createInheritedType",7],["() -> ",17],["InheritedType",18]],"d":"Conformance to `ExpressibleAsInheritedType`."},{"p":["IsTypePattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["PatternSyntax",18,2975]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["IsTypePattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IsTypePattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IsTypePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`IsTypePattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IsTypePattern","createIsTypePattern()"],"f":[["func",12],[" ",17],["createIsTypePattern",7],["() -> ",17],["IsTypePattern",18,478]],"s":[["func",12],[" ",17],["createIsTypePattern",7],["() -> ",17],["IsTypePattern",18]],"d":"Conformance to `ExpressibleAsIsTypePattern`."},{"p":["ObjcNamePiece","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ObjcNamePiece","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjcNamePiece` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjcNamePiece","createObjcNamePiece()"],"f":[["func",12],[" ",17],["createObjcNamePiece",7],["() -> ",17],["ObjcNamePiece",18,479]],"s":[["func",12],[" ",17],["createObjcNamePiece",7],["() -> ",17],["ObjcNamePiece",18]],"d":"Conformance to `ExpressibleAsObjcNamePiece`."},{"p":["PoundFileExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PoundFileExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundFileExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFileExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundFileExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFileExpr","createPoundFileExpr()"],"f":[["func",12],[" ",17],["createPoundFileExpr",7],["() -> ",17],["PoundFileExpr",18,480]],"s":[["func",12],[" ",17],["createPoundFileExpr",7],["() -> ",17],["PoundFileExpr",18]],"d":"Conformance to `ExpressibleAsPoundFileExpr`."},{"p":["PoundLineExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PoundLineExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundLineExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundLineExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundLineExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundLineExpr","createPoundLineExpr()"],"f":[["func",12],[" ",17],["createPoundLineExpr",7],["() -> ",17],["PoundLineExpr",18,481]],"s":[["func",12],[" ",17],["createPoundLineExpr",7],["() -> ",17],["PoundLineExpr",18]],"d":"Conformance to `ExpressibleAsPoundLineExpr`."},{"p":["StmtBuildable","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["?) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Builds a `StmtSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `StmtSyntax`."},{"p":["StmtBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `StmtSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A new `Syntax` with the builded `StmtSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["StmtBuildable","buildStmtList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmtList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> [",17],["StmtSyntax",18,2972],["]",17]],"s":[["func",12],[" ",17],["buildStmtList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["StmtSyntax",18],["]",17]],"d":"Builds list of `StmtSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `StmtSyntax`.\n\nSatisfies conformance to `StmtListBuildable`."},{"p":["StmtBuildable","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsStmtBuildable`."},{"p":["StringSegment","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["StringSegment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`StringSegment` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["StringSegment","createStringSegment()"],"f":[["func",12],[" ",17],["createStringSegment",7],["() -> ",17],["StringSegment",18,482]],"s":[["func",12],[" ",17],["createStringSegment",7],["() -> ",17],["StringSegment",18]],"d":"Conformance to `ExpressibleAsStringSegment`."},{"p":["SubscriptDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["SubscriptDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SubscriptDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SubscriptDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`SubscriptDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SubscriptDecl","createSubscriptDecl()"],"f":[["func",12],[" ",17],["createSubscriptDecl",7],["() -> ",17],["SubscriptDecl",18,483]],"s":[["func",12],[" ",17],["createSubscriptDecl",7],["() -> ",17],["SubscriptDecl",18]],"d":"Conformance to `ExpressibleAsSubscriptDecl`."},{"p":["SubscriptExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["SubscriptExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SubscriptExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SubscriptExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SubscriptExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SubscriptExpr","createSubscriptExpr()"],"f":[["func",12],[" ",17],["createSubscriptExpr",7],["() -> ",17],["SubscriptExpr",18,484]],"s":[["func",12],[" ",17],["createSubscriptExpr",7],["() -> ",17],["SubscriptExpr",18]],"d":"Conformance to `ExpressibleAsSubscriptExpr`."},{"p":["TypeBuildable","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["?) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Builds a `TypeSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `TypeSyntax`."},{"p":["TypeBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `TypeSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A new `Syntax` with the builded `TypeSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["TypeBuildable","buildTypeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTypeList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> [",17],["TypeSyntax",18,2973],["]",17]],"s":[["func",12],[" ",17],["buildTypeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["TypeSyntax",18],["]",17]],"d":"Builds list of `TypeSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `TypeSyntax`.\n\nSatisfies conformance to `TypeListBuildable`."},{"p":["TypeBuildable","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsTypeBuildable`."},{"p":["TypealiasDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["TypealiasDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypealiasDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypealiasDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`TypealiasDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypealiasDecl","createTypealiasDecl()"],"f":[["func",12],[" ",17],["createTypealiasDecl",7],["() -> ",17],["TypealiasDecl",18,485]],"s":[["func",12],[" ",17],["createTypealiasDecl",7],["() -> ",17],["TypealiasDecl",18]],"d":"Conformance to `ExpressibleAsTypealiasDecl`."},{"p":["AssignmentExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["AssignmentExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AssignmentExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AssignmentExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`AssignmentExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AssignmentExpr","createAssignmentExpr()"],"f":[["func",12],[" ",17],["createAssignmentExpr",7],["() -> ",17],["AssignmentExpr",18,486]],"s":[["func",12],[" ",17],["createAssignmentExpr",7],["() -> ",17],["AssignmentExpr",18]],"d":"Conformance to `ExpressibleAsAssignmentExpr`."},{"p":["AttributedType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["AttributedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AttributedType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AttributedType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`AttributedType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AttributedType","createAttributedType()"],"f":[["func",12],[" ",17],["createAttributedType",7],["() -> ",17],["AttributedType",18,487]],"s":[["func",12],[" ",17],["createAttributedType",7],["() -> ",17],["AttributedType",18]],"d":"Conformance to `ExpressibleAsAttributedType`."},{"p":["DictionaryExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["DictionaryExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DictionaryExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DictionaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`DictionaryExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DictionaryExpr","createDictionaryExpr()"],"f":[["func",12],[" ",17],["createDictionaryExpr",7],["() -> ",17],["DictionaryExpr",18,488]],"s":[["func",12],[" ",17],["createDictionaryExpr",7],["() -> ",17],["DictionaryExpr",18]],"d":"Conformance to `ExpressibleAsDictionaryExpr`."},{"p":["DictionaryType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["DictionaryType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DictionaryType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DictionaryType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`DictionaryType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DictionaryType","createDictionaryType()"],"f":[["func",12],[" ",17],["createDictionaryType",7],["() -> ",17],["DictionaryType",18,489]],"s":[["func",12],[" ",17],["createDictionaryType",7],["() -> ",17],["DictionaryType",18]],"d":"Conformance to `ExpressibleAsDictionaryType`."},{"p":["ExpressionStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["ExpressionStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExpressionStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExpressionStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ExpressionStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExpressionStmt","createExpressionStmt()"],"f":[["func",12],[" ",17],["createExpressionStmt",7],["() -> ",17],["ExpressionStmt",18,490]],"s":[["func",12],[" ",17],["createExpressionStmt",7],["() -> ",17],["ExpressionStmt",18]],"d":"Conformance to `ExpressibleAsExpressionStmt`."},{"p":["IdentifierExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["IdentifierExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IdentifierExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IdentifierExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`IdentifierExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IdentifierExpr","createIdentifierExpr()"],"f":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18,491]],"s":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18]],"d":"Conformance to `ExpressibleAsIdentifierExpr`."},{"p":["IdentifierList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["IdentifierList","buildIdentifierList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildIdentifierList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["IdentifierListSyntax",18,2938]],"s":[["func",12],[" ",17],["buildIdentifierList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["IdentifierListSyntax",18]]},{"p":["IdentifierList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IdentifierList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IdentifierList","createIdentifierList()"],"f":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18,492]],"s":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18]],"d":"Conformance to `ExpressibleAsIdentifierList`."},{"p":["IfConfigClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["IfConfigClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IfConfigClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IfConfigClause","createIfConfigClause()"],"f":[["func",12],[" ",17],["createIfConfigClause",7],["() -> ",17],["IfConfigClause",18,493]],"s":[["func",12],[" ",17],["createIfConfigClause",7],["() -> ",17],["IfConfigClause",18]],"d":"Conformance to `ExpressibleAsIfConfigClause`."},{"p":["MemberDeclList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["MemberDeclList","buildMemberDeclList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildMemberDeclList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["MemberDeclListSyntax",18,2939]],"s":[["func",12],[" ",17],["buildMemberDeclList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["MemberDeclListSyntax",18]]},{"p":["MemberDeclList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberDeclList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberDeclList","createMemberDeclList()"],"f":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18,494]],"s":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18]],"d":"Conformance to `ExpressibleAsMemberDeclList`."},{"p":["NilLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["NilLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`NilLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["NilLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`NilLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["NilLiteralExpr","createNilLiteralExpr()"],"f":[["func",12],[" ",17],["createNilLiteralExpr",7],["() -> ",17],["NilLiteralExpr",18,495]],"s":[["func",12],[" ",17],["createNilLiteralExpr",7],["() -> ",17],["NilLiteralExpr",18]],"d":"Conformance to `ExpressibleAsNilLiteralExpr`."},{"p":["PatternBinding","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PatternBinding","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PatternBinding` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PatternBinding","createPatternBinding()"],"f":[["func",12],[" ",17],["createPatternBinding",7],["() -> ",17],["PatternBinding",18,496]],"s":[["func",12],[" ",17],["createPatternBinding",7],["() -> ",17],["PatternBinding",18]],"d":"Conformance to `ExpressibleAsPatternBinding`."},{"p":["PoundErrorDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["PoundErrorDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundErrorDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundErrorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`PoundErrorDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundErrorDecl","createPoundErrorDecl()"],"f":[["func",12],[" ",17],["createPoundErrorDecl",7],["() -> ",17],["PoundErrorDecl",18,497]],"s":[["func",12],[" ",17],["createPoundErrorDecl",7],["() -> ",17],["PoundErrorDecl",18]],"d":"Conformance to `ExpressibleAsPoundErrorDecl`."},{"p":["SpecializeExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["SpecializeExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SpecializeExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SpecializeExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SpecializeExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SpecializeExpr","createSpecializeExpr()"],"f":[["func",12],[" ",17],["createSpecializeExpr",7],["() -> ",17],["SpecializeExpr",18,498]],"s":[["func",12],[" ",17],["createSpecializeExpr",7],["() -> ",17],["SpecializeExpr",18]],"d":"Conformance to `ExpressibleAsSpecializeExpr`."},{"p":["SwitchCaseList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["SwitchCaseList","buildSwitchCaseList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSwitchCaseList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["SwitchCaseListSyntax",18,2940]],"s":[["func",12],[" ",17],["buildSwitchCaseList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["SwitchCaseListSyntax",18]]},{"p":["SwitchCaseList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchCaseList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SwitchCaseList","createSwitchCaseList()"],"f":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18,499]],"s":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18]],"d":"Conformance to `ExpressibleAsSwitchCaseList`."},{"p":["TypeAnnotation","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TypeAnnotation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypeAnnotation` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypeAnnotation","createTypeAnnotation()"],"f":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18,500]],"s":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18]],"d":"Conformance to `ExpressibleAsTypeAnnotation`."},{"p":["CatchClauseList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["CatchClauseList","buildCatchClauseList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCatchClauseList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["CatchClauseListSyntax",18,2941]],"s":[["func",12],[" ",17],["buildCatchClauseList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CatchClauseListSyntax",18]]},{"p":["CatchClauseList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CatchClauseList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CatchClauseList","createCatchClauseList()"],"f":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18,501]],"s":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18]],"d":"Conformance to `ExpressibleAsCatchClauseList`."},{"p":["CompositionType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["CompositionType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CompositionType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CompositionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`CompositionType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CompositionType","createCompositionType()"],"f":[["func",12],[" ",17],["createCompositionType",7],["() -> ",17],["CompositionType",18,502]],"s":[["func",12],[" ",17],["createCompositionType",7],["() -> ",17],["CompositionType",18]],"d":"Conformance to `ExpressibleAsCompositionType`."},{"p":["CustomAttribute","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CustomAttribute","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CustomAttribute` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CustomAttribute","createCustomAttribute()"],"f":[["func",12],[" ",17],["createCustomAttribute",7],["() -> ",17],["CustomAttribute",18,503]],"s":[["func",12],[" ",17],["createCustomAttribute",7],["() -> ",17],["CustomAttribute",18]],"d":"Conformance to `ExpressibleAsCustomAttribute`."},{"p":["DeclarationStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["DeclarationStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclarationStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclarationStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`DeclarationStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclarationStmt","createDeclarationStmt()"],"f":[["func",12],[" ",17],["createDeclarationStmt",7],["() -> ",17],["DeclarationStmt",18,504]],"s":[["func",12],[" ",17],["createDeclarationStmt",7],["() -> ",17],["DeclarationStmt",18]],"d":"Conformance to `ExpressibleAsDeclarationStmt`."},{"p":["EnumCaseElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["EnumCaseElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumCaseElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumCaseElement","createEnumCaseElement()"],"f":[["func",12],[" ",17],["createEnumCaseElement",7],["() -> ",17],["EnumCaseElement",18,505]],"s":[["func",12],[" ",17],["createEnumCaseElement",7],["() -> ",17],["EnumCaseElement",18]],"d":"Conformance to `ExpressibleAsEnumCaseElement`."},{"p":["EnumCasePattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["PatternSyntax",18,2975]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["EnumCasePattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumCasePattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumCasePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`EnumCasePattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumCasePattern","createEnumCasePattern()"],"f":[["func",12],[" ",17],["createEnumCasePattern",7],["() -> ",17],["EnumCasePattern",18,506]],"s":[["func",12],[" ",17],["createEnumCasePattern",7],["() -> ",17],["EnumCasePattern",18]],"d":"Conformance to `ExpressibleAsEnumCasePattern`."},{"p":["FallthroughStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["FallthroughStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FallthroughStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FallthroughStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`FallthroughStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FallthroughStmt","createFallthroughStmt()"],"f":[["func",12],[" ",17],["createFallthroughStmt",7],["() -> ",17],["FallthroughStmt",18,507]],"s":[["func",12],[" ",17],["createFallthroughStmt",7],["() -> ",17],["FallthroughStmt",18]],"d":"Conformance to `ExpressibleAsFallthroughStmt`."},{"p":["ForcedValueExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ForcedValueExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ForcedValueExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ForcedValueExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ForcedValueExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ForcedValueExpr","createForcedValueExpr()"],"f":[["func",12],[" ",17],["createForcedValueExpr",7],["() -> ",17],["ForcedValueExpr",18,508]],"s":[["func",12],[" ",17],["createForcedValueExpr",7],["() -> ",17],["ForcedValueExpr",18]],"d":"Conformance to `ExpressibleAsForcedValueExpr`."},{"p":["GenericArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["GenericArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericArgument","createGenericArgument()"],"f":[["func",12],[" ",17],["createGenericArgument",7],["() -> ",17],["GenericArgument",18,509]],"s":[["func",12],[" ",17],["createGenericArgument",7],["() -> ",17],["GenericArgument",18]],"d":"Conformance to `ExpressibleAsGenericArgument`."},{"p":["InitializerDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["InitializerDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InitializerDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InitializerDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`InitializerDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InitializerDecl","createInitializerDecl()"],"f":[["func",12],[" ",17],["createInitializerDecl",7],["() -> ",17],["InitializerDecl",18,510]],"s":[["func",12],[" ",17],["createInitializerDecl",7],["() -> ",17],["InitializerDecl",18]],"d":"Conformance to `ExpressibleAsInitializerDecl`."},{"p":["KeyPathBaseExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["KeyPathBaseExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`KeyPathBaseExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["KeyPathBaseExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`KeyPathBaseExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["KeyPathBaseExpr","createKeyPathBaseExpr()"],"f":[["func",12],[" ",17],["createKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExpr",18,511]],"s":[["func",12],[" ",17],["createKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExpr",18]],"d":"Conformance to `ExpressibleAsKeyPathBaseExpr`."},{"p":["MemberDeclBlock","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["MemberDeclBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberDeclBlock` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberDeclBlock","createMemberDeclBlock()"],"f":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18,512]],"s":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18]],"d":"Conformance to `ExpressibleAsMemberDeclBlock`."},{"p":["ObjcKeyPathExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ObjcKeyPathExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjcKeyPathExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjcKeyPathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ObjcKeyPathExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjcKeyPathExpr","createObjcKeyPathExpr()"],"f":[["func",12],[" ",17],["createObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExpr",18,513]],"s":[["func",12],[" ",17],["createObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExpr",18]],"d":"Conformance to `ExpressibleAsObjcKeyPathExpr`."},{"p":["OptionalPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["PatternSyntax",18,2975]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["OptionalPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OptionalPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`OptionalPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalPattern","createOptionalPattern()"],"f":[["func",12],[" ",17],["createOptionalPattern",7],["() -> ",17],["OptionalPattern",18,514]],"s":[["func",12],[" ",17],["createOptionalPattern",7],["() -> ",17],["OptionalPattern",18]],"d":"Conformance to `ExpressibleAsOptionalPattern`."},{"p":["ParameterClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ParameterClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ParameterClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ParameterClause","createParameterClause()"],"f":[["func",12],[" ",17],["createParameterClause",7],["() -> ",17],["ParameterClause",18,515]],"s":[["func",12],[" ",17],["createParameterClause",7],["() -> ",17],["ParameterClause",18]],"d":"Conformance to `ExpressibleAsParameterClause`."},{"p":["PoundAssertStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["PoundAssertStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundAssertStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundAssertStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`PoundAssertStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundAssertStmt","createPoundAssertStmt()"],"f":[["func",12],[" ",17],["createPoundAssertStmt",7],["() -> ",17],["PoundAssertStmt",18,516]],"s":[["func",12],[" ",17],["createPoundAssertStmt",7],["() -> ",17],["PoundAssertStmt",18]],"d":"Conformance to `ExpressibleAsPoundAssertStmt`."},{"p":["PoundColumnExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PoundColumnExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundColumnExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundColumnExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundColumnExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundColumnExpr","createPoundColumnExpr()"],"f":[["func",12],[" ",17],["createPoundColumnExpr",7],["() -> ",17],["PoundColumnExpr",18,517]],"s":[["func",12],[" ",17],["createPoundColumnExpr",7],["() -> ",17],["PoundColumnExpr",18]],"d":"Conformance to `ExpressibleAsPoundColumnExpr`."},{"p":["PoundFileIDExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundFileIDExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFileIDExpr","createPoundFileIDExpr()"],"f":[["func",12],[" ",17],["createPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExpr",18,518]],"s":[["func",12],[" ",17],["createPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExpr",18]],"d":"Conformance to `ExpressibleAsPoundFileIDExpr`."},{"p":["PoundFileIDExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundFileIDExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFileIDExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["RepeatWhileStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["RepeatWhileStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`RepeatWhileStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["RepeatWhileStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`RepeatWhileStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["RepeatWhileStmt","createRepeatWhileStmt()"],"f":[["func",12],[" ",17],["createRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmt",18,519]],"s":[["func",12],[" ",17],["createRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmt",18]],"d":"Conformance to `ExpressibleAsRepeatWhileStmt`."},{"p":["SwitchCaseLabel","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["SwitchCaseLabel","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchCaseLabel` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SwitchCaseLabel","createSwitchCaseLabel()"],"f":[["func",12],[" ",17],["createSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabel",18,520]],"s":[["func",12],[" ",17],["createSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabel",18]],"d":"Conformance to `ExpressibleAsSwitchCaseLabel`."},{"p":["WildcardPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["PatternSyntax",18,2975]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["WildcardPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`WildcardPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["WildcardPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`WildcardPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["WildcardPattern","createWildcardPattern()"],"f":[["func",12],[" ",17],["createWildcardPattern",7],["() -> ",17],["WildcardPattern",18,521]],"s":[["func",12],[" ",17],["createWildcardPattern",7],["() -> ",17],["WildcardPattern",18]],"d":"Conformance to `ExpressibleAsWildcardPattern`."},{"p":["ArrayElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ArrayElementList","buildArrayElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildArrayElementList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ArrayElementListSyntax",18,2942]],"s":[["func",12],[" ",17],["buildArrayElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ArrayElementListSyntax",18]]},{"p":["ArrayElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrayElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrayElementList","createArrayElementList()"],"f":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18,522]],"s":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18]],"d":"Conformance to `ExpressibleAsArrayElementList`."},{"p":["ClosureParamList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ClosureParamList","buildClosureParamList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildClosureParamList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ClosureParamListSyntax",18,2943]],"s":[["func",12],[" ",17],["buildClosureParamList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ClosureParamListSyntax",18]]},{"p":["ClosureParamList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureParamList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureParamList","createClosureParamList()"],"f":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18,523]],"s":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18]],"d":"Conformance to `ExpressibleAsClosureParamList`."},{"p":["ClosureSignature","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ClosureSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureSignature` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureSignature","createClosureSignature()"],"f":[["func",12],[" ",17],["createClosureSignature",7],["() -> ",17],["ClosureSignature",18,524]],"s":[["func",12],[" ",17],["createClosureSignature",7],["() -> ",17],["ClosureSignature",18]],"d":"Conformance to `ExpressibleAsClosureSignature`."},{"p":["ConditionElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ConditionElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ConditionElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ConditionElement","createConditionElement()"],"f":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18,525]],"s":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18]],"d":"Conformance to `ExpressibleAsConditionElement`."},{"p":["DeclNameArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DeclNameArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclNameArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclNameArgument","createDeclNameArgument()"],"f":[["func",12],[" ",17],["createDeclNameArgument",7],["() -> ",17],["DeclNameArgument",18,526]],"s":[["func",12],[" ",17],["createDeclNameArgument",7],["() -> ",17],["DeclNameArgument",18]],"d":"Conformance to `ExpressibleAsDeclNameArgument`."},{"p":["FloatLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["FloatLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FloatLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FloatLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`FloatLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FloatLiteralExpr","createFloatLiteralExpr()"],"f":[["func",12],[" ",17],["createFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExpr",18,527]],"s":[["func",12],[" ",17],["createFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExpr",18]],"d":"Conformance to `ExpressibleAsFloatLiteralExpr`."},{"p":["FunctionCallExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["FunctionCallExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionCallExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionCallExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`FunctionCallExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionCallExpr","createFunctionCallExpr()"],"f":[["func",12],[" ",17],["createFunctionCallExpr",7],["() -> ",17],["FunctionCallExpr",18,528]],"s":[["func",12],[" ",17],["createFunctionCallExpr",7],["() -> ",17],["FunctionCallExpr",18]],"d":"Conformance to `ExpressibleAsFunctionCallExpr`."},{"p":["FunctionDeclName","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["FunctionDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionDeclName` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionDeclName","createFunctionDeclName()"],"f":[["func",12],[" ",17],["createFunctionDeclName",7],["() -> ",17],["FunctionDeclName",18,529]],"s":[["func",12],[" ",17],["createFunctionDeclName",7],["() -> ",17],["FunctionDeclName",18]],"d":"Conformance to `ExpressibleAsFunctionDeclName`."},{"p":["GenericParameter","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["GenericParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericParameter` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericParameter","createGenericParameter()"],"f":[["func",12],[" ",17],["createGenericParameter",7],["() -> ",17],["GenericParameter",18,530]],"s":[["func",12],[" ",17],["createGenericParameter",7],["() -> ",17],["GenericParameter",18]],"d":"Conformance to `ExpressibleAsGenericParameter`."},{"p":["MemberAccessExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["MemberAccessExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberAccessExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberAccessExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`MemberAccessExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberAccessExpr","createMemberAccessExpr()"],"f":[["func",12],[" ",17],["createMemberAccessExpr",7],["() -> ",17],["MemberAccessExpr",18,531]],"s":[["func",12],[" ",17],["createMemberAccessExpr",7],["() -> ",17],["MemberAccessExpr",18]],"d":"Conformance to `ExpressibleAsMemberAccessExpr`."},{"p":["ObjcSelectorExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ObjcSelectorExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjcSelectorExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjcSelectorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ObjcSelectorExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjcSelectorExpr","createObjcSelectorExpr()"],"f":[["func",12],[" ",17],["createObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExpr",18,532]],"s":[["func",12],[" ",17],["createObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExpr",18]],"d":"Conformance to `ExpressibleAsObjcSelectorExpr`."},{"p":["PatternBuildable","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["?) -> ",17],["PatternSyntax",18,2975]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Builds a `PatternSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `PatternSyntax`."},{"p":["PatternBuildable","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Builds a `PatternSyntax`.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A new `Syntax` with the builded `PatternSyntax`.\n\nSatisfies conformance to `SyntaxBuildable`."},{"p":["PatternBuildable","buildPatternList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPatternList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> [",17],["PatternSyntax",18,2975],["]",17]],"s":[["func",12],[" ",17],["buildPatternList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["PatternSyntax",18],["]",17]],"d":"Builds list of `PatternSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `PatternSyntax`.\n\nSatisfies conformance to `PatternListBuildable`."},{"p":["PatternBuildable","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"Satisfies conformance to `ExpressibleAsPatternBuildable`."},{"p":["PostfixUnaryExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PostfixUnaryExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PostfixUnaryExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PostfixUnaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PostfixUnaryExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PostfixUnaryExpr","createPostfixUnaryExpr()"],"f":[["func",12],[" ",17],["createPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExpr",18,533]],"s":[["func",12],[" ",17],["createPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExpr",18]],"d":"Conformance to `ExpressibleAsPostfixUnaryExpr`."},{"p":["PoundWarningDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["PoundWarningDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundWarningDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundWarningDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`PoundWarningDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundWarningDecl","createPoundWarningDecl()"],"f":[["func",12],[" ",17],["createPoundWarningDecl",7],["() -> ",17],["PoundWarningDecl",18,534]],"s":[["func",12],[" ",17],["createPoundWarningDecl",7],["() -> ",17],["PoundWarningDecl",18]],"d":"Conformance to `ExpressibleAsPoundWarningDecl`."},{"p":["RegexLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["RegexLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`RegexLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["RegexLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`RegexLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["RegexLiteralExpr","createRegexLiteralExpr()"],"f":[["func",12],[" ",17],["createRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExpr",18,535]],"s":[["func",12],[" ",17],["createRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExpr",18]],"d":"Conformance to `ExpressibleAsRegexLiteralExpr`."},{"p":["TupleExprElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TupleExprElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleExprElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleExprElement","createTupleExprElement()"],"f":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18,536]],"s":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18]],"d":"Conformance to `ExpressibleAsTupleExprElement`."},{"p":["TupleTypeElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TupleTypeElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleTypeElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleTypeElement","createTupleTypeElement()"],"f":[["func",12],[" ",17],["createTupleTypeElement",7],["() -> ",17],["TupleTypeElement",18,537]],"s":[["func",12],[" ",17],["createTupleTypeElement",7],["() -> ",17],["TupleTypeElement",18]],"d":"Conformance to `ExpressibleAsTupleTypeElement`."},{"p":["AccessorParameter","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AccessorParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessorParameter` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessorParameter","createAccessorParameter()"],"f":[["func",12],[" ",17],["createAccessorParameter",7],["() -> ",17],["AccessorParameter",18,538]],"s":[["func",12],[" ",17],["createAccessorParameter",7],["() -> ",17],["AccessorParameter",18]],"d":"Conformance to `ExpressibleAsAccessorParameter`."},{"p":["AvailabilityEntry","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AvailabilityEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityEntry` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AvailabilityEntry","createAvailabilityEntry()"],"f":[["func",12],[" ",17],["createAvailabilityEntry",7],["() -> ",17],["AvailabilityEntry",18,539]],"s":[["func",12],[" ",17],["createAvailabilityEntry",7],["() -> ",17],["AvailabilityEntry",18]],"d":"Conformance to `ExpressibleAsAvailabilityEntry`."},{"p":["CodeBlockItemList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["CodeBlockItemList","buildCodeBlockItemList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCodeBlockItemList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["CodeBlockItemListSyntax",18,2944]],"s":[["func",12],[" ",17],["buildCodeBlockItemList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CodeBlockItemListSyntax",18]]},{"p":["CodeBlockItemList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CodeBlockItemList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CodeBlockItemList","createCodeBlockItemList()"],"f":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18,540]],"s":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18]],"d":"Conformance to `ExpressibleAsCodeBlockItemList`."},{"p":["DeclListBuildable","buildDeclList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDeclList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["?) -> [",17],["DeclSyntax",18,2970],["]",17]],"s":[["func",12],[" ",17],["buildDeclList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["DeclSyntax",18],["]",17]],"d":"Builds list of `DeclSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `DeclSyntax`."},{"p":["DeclNameArguments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DeclNameArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclNameArguments` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclNameArguments","createDeclNameArguments()"],"f":[["func",12],[" ",17],["createDeclNameArguments",7],["() -> ",17],["DeclNameArguments",18,541]],"s":[["func",12],[" ",17],["createDeclNameArguments",7],["() -> ",17],["DeclNameArguments",18]],"d":"Conformance to `ExpressibleAsDeclNameArguments`."},{"p":["DeinitializerDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["DeinitializerDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeinitializerDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeinitializerDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`DeinitializerDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeinitializerDecl","createDeinitializerDecl()"],"f":[["func",12],[" ",17],["createDeinitializerDecl",7],["() -> ",17],["DeinitializerDecl",18,542]],"s":[["func",12],[" ",17],["createDeinitializerDecl",7],["() -> ",17],["DeinitializerDecl",18]],"d":"Conformance to `ExpressibleAsDeinitializerDecl`."},{"p":["DictionaryElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DictionaryElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DictionaryElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DictionaryElement","createDictionaryElement()"],"f":[["func",12],[" ",17],["createDictionaryElement",7],["() -> ",17],["DictionaryElement",18,543]],"s":[["func",12],[" ",17],["createDictionaryElement",7],["() -> ",17],["DictionaryElement",18]],"d":"Conformance to `ExpressibleAsDictionaryElement`."},{"p":["ExprListBuildable","buildExprList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["?) -> [",17],["ExprSyntax",18,2971],["]",17]],"s":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["ExprSyntax",18],["]",17]],"d":"Builds list of `ExprSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `ExprSyntax`."},{"p":["ExpressionPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["PatternSyntax",18,2975]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["ExpressionPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExpressionPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExpressionPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`ExpressionPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExpressionPattern","createExpressionPattern()"],"f":[["func",12],[" ",17],["createExpressionPattern",7],["() -> ",17],["ExpressionPattern",18,544]],"s":[["func",12],[" ",17],["createExpressionPattern",7],["() -> ",17],["ExpressionPattern",18]],"d":"Conformance to `ExpressibleAsExpressionPattern`."},{"p":["ExpressionSegment","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ExpressionSegment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExpressionSegment` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExpressionSegment","createExpressionSegment()"],"f":[["func",12],[" ",17],["createExpressionSegment",7],["() -> ",17],["ExpressionSegment",18,545]],"s":[["func",12],[" ",17],["createExpressionSegment",7],["() -> ",17],["ExpressionSegment",18]],"d":"Conformance to `ExpressibleAsExpressionSegment`."},{"p":["FunctionParameter","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["FunctionParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionParameter` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionParameter","createFunctionParameter()"],"f":[["func",12],[" ",17],["createFunctionParameter",7],["() -> ",17],["FunctionParameter",18,546]],"s":[["func",12],[" ",17],["createFunctionParameter",7],["() -> ",17],["FunctionParameter",18]],"d":"Conformance to `ExpressibleAsFunctionParameter`."},{"p":["FunctionSignature","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["FunctionSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionSignature` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionSignature","createFunctionSignature()"],"f":[["func",12],[" ",17],["createFunctionSignature",7],["() -> ",17],["FunctionSignature",18,547]],"s":[["func",12],[" ",17],["createFunctionSignature",7],["() -> ",17],["FunctionSignature",18]],"d":"Conformance to `ExpressibleAsFunctionSignature`."},{"p":["IdentifierPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["PatternSyntax",18,2975]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["IdentifierPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IdentifierPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IdentifierPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`IdentifierPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IdentifierPattern","createIdentifierPattern()"],"f":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18,548]],"s":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18]],"d":"Conformance to `ExpressibleAsIdentifierPattern`."},{"p":["InheritedTypeList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["InheritedTypeList","buildInheritedTypeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildInheritedTypeList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["InheritedTypeListSyntax",18,2945]],"s":[["func",12],[" ",17],["buildInheritedTypeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["InheritedTypeListSyntax",18]]},{"p":["InheritedTypeList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InheritedTypeList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InheritedTypeList","createInheritedTypeList()"],"f":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18,549]],"s":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18]],"d":"Conformance to `ExpressibleAsInheritedTypeList`."},{"p":["InitializerClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["InitializerClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InitializerClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InitializerClause","createInitializerClause()"],"f":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18,550]],"s":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18]],"d":"Conformance to `ExpressibleAsInitializerClause`."},{"p":["NonEmptyTokenList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["NonEmptyTokenList","buildNonEmptyTokenList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildNonEmptyTokenList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["NonEmptyTokenListSyntax",18,2946]],"s":[["func",12],[" ",17],["buildNonEmptyTokenList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["NonEmptyTokenListSyntax",18]]},{"p":["NonEmptyTokenList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`NonEmptyTokenList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["NonEmptyTokenList","createNonEmptyTokenList()"],"f":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18,551]],"s":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18]],"d":"Conformance to `ExpressibleAsNonEmptyTokenList`."},{"p":["ObjCSelectorPiece","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ObjCSelectorPiece","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjCSelectorPiece` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjCSelectorPiece","createObjCSelectorPiece()"],"f":[["func",12],[" ",17],["createObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPiece",18,552]],"s":[["func",12],[" ",17],["createObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPiece",18]],"d":"Conformance to `ExpressibleAsObjCSelectorPiece`."},{"p":["ObjectLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ObjectLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjectLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjectLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ObjectLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjectLiteralExpr","createObjectLiteralExpr()"],"f":[["func",12],[" ",17],["createObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExpr",18,553]],"s":[["func",12],[" ",17],["createObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExpr",18]],"d":"Conformance to `ExpressibleAsObjectLiteralExpr`."},{"p":["PoundFilePathExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PoundFilePathExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundFilePathExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFilePathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundFilePathExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFilePathExpr","createPoundFilePathExpr()"],"f":[["func",12],[" ",17],["createPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExpr",18,554]],"s":[["func",12],[" ",17],["createPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExpr",18]],"d":"Conformance to `ExpressibleAsPoundFilePathExpr`."},{"p":["PoundFunctionExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PoundFunctionExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundFunctionExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFunctionExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundFunctionExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundFunctionExpr","createPoundFunctionExpr()"],"f":[["func",12],[" ",17],["createPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExpr",18,555]],"s":[["func",12],[" ",17],["createPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExpr",18]],"d":"Conformance to `ExpressibleAsPoundFunctionExpr`."},{"p":["QualifiedDeclName","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["QualifiedDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`QualifiedDeclName` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["QualifiedDeclName","createQualifiedDeclName()"],"f":[["func",12],[" ",17],["createQualifiedDeclName",7],["() -> ",17],["QualifiedDeclName",18,556]],"s":[["func",12],[" ",17],["createQualifiedDeclName",7],["() -> ",17],["QualifiedDeclName",18]],"d":"Conformance to `ExpressibleAsQualifiedDeclName`."},{"p":["StmtListBuildable","buildStmtList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmtList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["?) -> [",17],["StmtSyntax",18,2972],["]",17]],"s":[["func",12],[" ",17],["buildStmtList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["StmtSyntax",18],["]",17]],"d":"Builds list of `StmtSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `StmtSyntax`."},{"p":["StringLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["StringLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`StringLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["StringLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`StringLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["StringLiteralExpr","createStringLiteralExpr()"],"f":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18,557]],"s":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18]],"d":"Conformance to `ExpressibleAsStringLiteralExpr`."},{"p":["TypeListBuildable","buildTypeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTypeList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["?) -> [",17],["TypeSyntax",18,2973],["]",17]],"s":[["func",12],[" ",17],["buildTypeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["TypeSyntax",18],["]",17]],"d":"Builds list of `TypeSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `TypeSyntax`."},{"p":["AssociatedtypeDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["AssociatedtypeDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AssociatedtypeDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AssociatedtypeDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`AssociatedtypeDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AssociatedtypeDecl","createAssociatedtypeDecl()"],"f":[["func",12],[" ",17],["createAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDecl",18,558]],"s":[["func",12],[" ",17],["createAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDecl",18]],"d":"Conformance to `ExpressibleAsAssociatedtypeDecl`."},{"p":["BinaryOperatorExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["BinaryOperatorExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BinaryOperatorExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BinaryOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`BinaryOperatorExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BinaryOperatorExpr","createBinaryOperatorExpr()"],"f":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18,559]],"s":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18]],"d":"Conformance to `ExpressibleAsBinaryOperatorExpr`."},{"p":["BooleanLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["BooleanLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BooleanLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BooleanLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`BooleanLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BooleanLiteralExpr","createBooleanLiteralExpr()"],"f":[["func",12],[" ",17],["createBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExpr",18,560]],"s":[["func",12],[" ",17],["createBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExpr",18]],"d":"Conformance to `ExpressibleAsBooleanLiteralExpr`."},{"p":["ClosureCaptureItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ClosureCaptureItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureCaptureItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureCaptureItem","createClosureCaptureItem()"],"f":[["func",12],[" ",17],["createClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItem",18,561]],"s":[["func",12],[" ",17],["createClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItem",18]],"d":"Conformance to `ExpressibleAsClosureCaptureItem`."},{"p":["ElseIfContinuation","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ElseIfContinuation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ElseIfContinuation` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ElseIfContinuation","createElseIfContinuation()"],"f":[["func",12],[" ",17],["createElseIfContinuation",7],["() -> ",17],["ElseIfContinuation",18,562]],"s":[["func",12],[" ",17],["createElseIfContinuation",7],["() -> ",17],["ElseIfContinuation",18]],"d":"Conformance to `ExpressibleAsElseIfContinuation`."},{"p":["GenericRequirement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["GenericRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericRequirement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericRequirement","createGenericRequirement()"],"f":[["func",12],[" ",17],["createGenericRequirement",7],["() -> ",17],["GenericRequirement",18,563]],"s":[["func",12],[" ",17],["createGenericRequirement",7],["() -> ",17],["GenericRequirement",18]],"d":"Conformance to `ExpressibleAsGenericRequirement`."},{"p":["GenericWhereClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["GenericWhereClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericWhereClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericWhereClause","createGenericWhereClause()"],"f":[["func",12],[" ",17],["createGenericWhereClause",7],["() -> ",17],["GenericWhereClause",18,564]],"s":[["func",12],[" ",17],["createGenericWhereClause",7],["() -> ",17],["GenericWhereClause",18]],"d":"Conformance to `ExpressibleAsGenericWhereClause`."},{"p":["IfConfigClauseList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["IfConfigClauseList","buildIfConfigClauseList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildIfConfigClauseList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["IfConfigClauseListSyntax",18,2947]],"s":[["func",12],[" ",17],["buildIfConfigClauseList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["IfConfigClauseListSyntax",18]]},{"p":["IfConfigClauseList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IfConfigClauseList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IfConfigClauseList","createIfConfigClauseList()"],"f":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18,565]],"s":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18]],"d":"Conformance to `ExpressibleAsIfConfigClauseList`."},{"p":["IntegerLiteralExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["IntegerLiteralExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IntegerLiteralExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IntegerLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`IntegerLiteralExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IntegerLiteralExpr","createIntegerLiteralExpr()"],"f":[["func",12],[" ",17],["createIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExpr",18,566]],"s":[["func",12],[" ",17],["createIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExpr",18]],"d":"Conformance to `ExpressibleAsIntegerLiteralExpr`."},{"p":["MemberDeclListItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["MemberDeclListItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberDeclListItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberDeclListItem","createMemberDeclListItem()"],"f":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18,567]],"s":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18]],"d":"Conformance to `ExpressibleAsMemberDeclListItem`."},{"p":["PatternBindingList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["PatternBindingList","buildPatternBindingList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPatternBindingList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["PatternBindingListSyntax",18,2948]],"s":[["func",12],[" ",17],["buildPatternBindingList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternBindingListSyntax",18]]},{"p":["PatternBindingList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PatternBindingList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PatternBindingList","createPatternBindingList()"],"f":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18,568]],"s":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18]],"d":"Conformance to `ExpressibleAsPatternBindingList`."},{"p":["PoundDsohandleExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PoundDsohandleExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundDsohandleExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundDsohandleExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PoundDsohandleExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundDsohandleExpr","createPoundDsohandleExpr()"],"f":[["func",12],[" ",17],["createPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExpr",18,569]],"s":[["func",12],[" ",17],["createPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExpr",18]],"d":"Conformance to `ExpressibleAsPoundDsohandleExpr`."},{"p":["PrefixOperatorExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PrefixOperatorExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrefixOperatorExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrefixOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PrefixOperatorExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrefixOperatorExpr","createPrefixOperatorExpr()"],"f":[["func",12],[" ",17],["createPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExpr",18,570]],"s":[["func",12],[" ",17],["createPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExpr",18]],"d":"Conformance to `ExpressibleAsPrefixOperatorExpr`."},{"p":["SwitchDefaultLabel","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["SwitchDefaultLabel","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SwitchDefaultLabel` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SwitchDefaultLabel","createSwitchDefaultLabel()"],"f":[["func",12],[" ",17],["createSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabel",18,571]],"s":[["func",12],[" ",17],["createSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabel",18]],"d":"Conformance to `ExpressibleAsSwitchDefaultLabel`."},{"p":["AccessLevelModifier","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AccessLevelModifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessLevelModifier` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessLevelModifier","createAccessLevelModifier()"],"f":[["func",12],[" ",17],["createAccessLevelModifier",7],["() -> ",17],["AccessLevelModifier",18,572]],"s":[["func",12],[" ",17],["createAccessLevelModifier",7],["() -> ",17],["AccessLevelModifier",18]],"d":"Conformance to `ExpressibleAsAccessLevelModifier`."},{"p":["AccessPathComponent","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AccessPathComponent","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AccessPathComponent` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AccessPathComponent","createAccessPathComponent()"],"f":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18,573]],"s":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18]],"d":"Conformance to `ExpressibleAsAccessPathComponent`."},{"p":["EnumCaseElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["EnumCaseElementList","buildEnumCaseElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildEnumCaseElementList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["EnumCaseElementListSyntax",18,2949]],"s":[["func",12],[" ",17],["buildEnumCaseElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["EnumCaseElementListSyntax",18]]},{"p":["EnumCaseElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumCaseElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumCaseElementList","createEnumCaseElementList()"],"f":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18,574]],"s":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18]],"d":"Conformance to `ExpressibleAsEnumCaseElementList`."},{"p":["ExpressibleAsDoStmt","createDoStmt()"],"f":[["func",12],[" ",17],["createDoStmt",7],["() -> ",17],["DoStmt",18,642]],"s":[["func",12],[" ",17],["createDoStmt",7],["() -> ",17],["DoStmt",18]]},{"p":["ExpressibleAsDoStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsIfStmt","createIfStmt()"],"f":[["func",12],[" ",17],["createIfStmt",7],["() -> ",17],["IfStmt",18,644]],"s":[["func",12],[" ",17],["createIfStmt",7],["() -> ",17],["IfStmt",18]]},{"p":["ExpressibleAsIfStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsIsExpr","createIsExpr()"],"f":[["func",12],[" ",17],["createIsExpr",7],["() -> ",17],["IsExpr",18,645]],"s":[["func",12],[" ",17],["createIsExpr",7],["() -> ",17],["IsExpr",18]]},{"p":["ExpressibleAsIsExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["GenericArgumentList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["GenericArgumentList","buildGenericArgumentList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildGenericArgumentList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["GenericArgumentListSyntax",18,2950]],"s":[["func",12],[" ",17],["buildGenericArgumentList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["GenericArgumentListSyntax",18]]},{"p":["GenericArgumentList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericArgumentList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericArgumentList","createGenericArgumentList()"],"f":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18,575]],"s":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18]],"d":"Conformance to `ExpressibleAsGenericArgumentList`."},{"p":["PostfixIfConfigExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["PostfixIfConfigExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PostfixIfConfigExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PostfixIfConfigExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`PostfixIfConfigExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PostfixIfConfigExpr","createPostfixIfConfigExpr()"],"f":[["func",12],[" ",17],["createPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExpr",18,576]],"s":[["func",12],[" ",17],["createPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExpr",18]],"d":"Conformance to `ExpressibleAsPostfixIfConfigExpr`."},{"p":["PoundSourceLocation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundSourceLocation` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundSourceLocation","createPoundSourceLocation()"],"f":[["func",12],[" ",17],["createPoundSourceLocation",7],["() -> ",17],["PoundSourceLocation",18,577]],"s":[["func",12],[" ",17],["createPoundSourceLocation",7],["() -> ",17],["PoundSourceLocation",18]],"d":"Conformance to `ExpressibleAsPoundSourceLocation`."},{"p":["PoundSourceLocation","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`PoundSourceLocation` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundSourceLocation","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["PrecedenceGroupDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["PrecedenceGroupDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`PrecedenceGroupDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupDecl","createPrecedenceGroupDecl()"],"f":[["func",12],[" ",17],["createPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDecl",18,578]],"s":[["func",12],[" ",17],["createPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDecl",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupDecl`."},{"p":["SameTypeRequirement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["SameTypeRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SameTypeRequirement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SameTypeRequirement","createSameTypeRequirement()"],"f":[["func",12],[" ",17],["createSameTypeRequirement",7],["() -> ",17],["SameTypeRequirement",18,579]],"s":[["func",12],[" ",17],["createSameTypeRequirement",7],["() -> ",17],["SameTypeRequirement",18]],"d":"Conformance to `ExpressibleAsSameTypeRequirement`."},{"p":["TargetFunctionEntry","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TargetFunctionEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TargetFunctionEntry` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TargetFunctionEntry","createTargetFunctionEntry()"],"f":[["func",12],[" ",17],["createTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntry",18,580]],"s":[["func",12],[" ",17],["createTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntry",18]],"d":"Conformance to `ExpressibleAsTargetFunctionEntry`."},{"p":["TuplePatternElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TuplePatternElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TuplePatternElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TuplePatternElement","createTuplePatternElement()"],"f":[["func",12],[" ",17],["createTuplePatternElement",7],["() -> ",17],["TuplePatternElement",18,581]],"s":[["func",12],[" ",17],["createTuplePatternElement",7],["() -> ",17],["TuplePatternElement",18]],"d":"Conformance to `ExpressibleAsTuplePatternElement`."},{"p":["ValueBindingPattern","buildPattern(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["PatternSyntax",18,2975]],"s":[["func",12],[" ",17],["buildPattern",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PatternSyntax",18]],"d":"Conformance to `PatternBuildable`."},{"p":["ValueBindingPattern","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ValueBindingPattern` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ValueBindingPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]],"d":"`ValueBindingPattern` might conform to `ExpressibleAsPatternBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createPatternBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ValueBindingPattern","createValueBindingPattern()"],"f":[["func",12],[" ",17],["createValueBindingPattern",7],["() -> ",17],["ValueBindingPattern",18,582]],"s":[["func",12],[" ",17],["createValueBindingPattern",7],["() -> ",17],["ValueBindingPattern",18]],"d":"Conformance to `ExpressibleAsValueBindingPattern`."},{"p":["AvailabilityArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AvailabilityArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AvailabilityArgument","createAvailabilityArgument()"],"f":[["func",12],[" ",17],["createAvailabilityArgument",7],["() -> ",17],["AvailabilityArgument",18,583]],"s":[["func",12],[" ",17],["createAvailabilityArgument",7],["() -> ",17],["AvailabilityArgument",18]],"d":"Conformance to `ExpressibleAsAvailabilityArgument`."},{"p":["AvailabilitySpecList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["AvailabilitySpecList","buildAvailabilitySpecList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildAvailabilitySpecList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["AvailabilitySpecListSyntax",18,2951]],"s":[["func",12],[" ",17],["buildAvailabilitySpecList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["AvailabilitySpecListSyntax",18]]},{"p":["AvailabilitySpecList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilitySpecList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AvailabilitySpecList","createAvailabilitySpecList()"],"f":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18,584]],"s":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18]],"d":"Conformance to `ExpressibleAsAvailabilitySpecList`."},{"p":["ClassRestrictionType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["ClassRestrictionType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClassRestrictionType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClassRestrictionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`ClassRestrictionType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClassRestrictionType","createClassRestrictionType()"],"f":[["func",12],[" ",17],["createClassRestrictionType",7],["() -> ",17],["ClassRestrictionType",18,585]],"s":[["func",12],[" ",17],["createClassRestrictionType",7],["() -> ",17],["ClassRestrictionType",18]],"d":"Conformance to `ExpressibleAsClassRestrictionType`."},{"p":["ConditionElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ConditionElementList","buildConditionElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildConditionElementList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ConditionElementListSyntax",18,2952]],"s":[["func",12],[" ",17],["buildConditionElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ConditionElementListSyntax",18]]},{"p":["ConditionElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ConditionElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ConditionElementList","createConditionElementList()"],"f":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18,586]],"s":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18]],"d":"Conformance to `ExpressibleAsConditionElementList`."},{"p":["DeclNameArgumentList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["DeclNameArgumentList","buildDeclNameArgumentList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDeclNameArgumentList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclNameArgumentListSyntax",18,2953]],"s":[["func",12],[" ",17],["buildDeclNameArgumentList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclNameArgumentListSyntax",18]]},{"p":["DeclNameArgumentList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclNameArgumentList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclNameArgumentList","createDeclNameArgumentList()"],"f":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18,587]],"s":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18]],"d":"Conformance to `ExpressibleAsDeclNameArgumentList`."},{"p":["ExpressibleAsTryExpr","createTryExpr()"],"f":[["func",12],[" ",17],["createTryExpr",7],["() -> ",17],["TryExpr",18,646]],"s":[["func",12],[" ",17],["createTryExpr",7],["() -> ",17],["TryExpr",18]]},{"p":["ExpressibleAsTryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["GenericParameterList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["GenericParameterList","buildGenericParameterList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildGenericParameterList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["GenericParameterListSyntax",18,2954]],"s":[["func",12],[" ",17],["buildGenericParameterList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["GenericParameterListSyntax",18]]},{"p":["GenericParameterList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericParameterList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericParameterList","createGenericParameterList()"],"f":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18,588]],"s":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18]],"d":"Conformance to `ExpressibleAsGenericParameterList`."},{"p":["MemberTypeIdentifier","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["MemberTypeIdentifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MemberTypeIdentifier` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberTypeIdentifier","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`MemberTypeIdentifier` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MemberTypeIdentifier","createMemberTypeIdentifier()"],"f":[["func",12],[" ",17],["createMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifier",18,589]],"s":[["func",12],[" ",17],["createMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifier",18]],"d":"Conformance to `ExpressibleAsMemberTypeIdentifier`."},{"p":["OptionalChainingExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["OptionalChainingExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OptionalChainingExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalChainingExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`OptionalChainingExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalChainingExpr","createOptionalChainingExpr()"],"f":[["func",12],[" ",17],["createOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExpr",18,590]],"s":[["func",12],[" ",17],["createOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExpr",18]],"d":"Conformance to `ExpressibleAsOptionalChainingExpr`."},{"p":["PatternListBuildable","buildPatternList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPatternList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["?) -> [",17],["PatternSyntax",18,2975],["]",17]],"s":[["func",12],[" ",17],["buildPatternList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> [",17],["PatternSyntax",18],["]",17]],"d":"Builds list of `PatternSyntax`s.\n- Parameter format: The `Format` to use.\n- Parameter leadingTrivia: Replaces the the last leading trivia if not nil.\n- Returns: A list of `PatternSyntax`."},{"p":["SimpleTypeIdentifier","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["SimpleTypeIdentifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SimpleTypeIdentifier` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SimpleTypeIdentifier","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`SimpleTypeIdentifier` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SimpleTypeIdentifier","createSimpleTypeIdentifier()"],"f":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18,591]],"s":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18]],"d":"Conformance to `ExpressibleAsSimpleTypeIdentifier`."},{"p":["TupleExprElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["TupleExprElementList","buildTupleExprElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTupleExprElementList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TupleExprElementListSyntax",18,2955]],"s":[["func",12],[" ",17],["buildTupleExprElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TupleExprElementListSyntax",18]]},{"p":["TupleExprElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleExprElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleExprElementList","createTupleExprElementList()"],"f":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18,592]],"s":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18]],"d":"Conformance to `ExpressibleAsTupleExprElementList`."},{"p":["TupleTypeElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["TupleTypeElementList","buildTupleTypeElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTupleTypeElementList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TupleTypeElementListSyntax",18,2956]],"s":[["func",12],[" ",17],["buildTupleTypeElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TupleTypeElementListSyntax",18]]},{"p":["TupleTypeElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleTypeElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleTypeElementList","createTupleTypeElementList()"],"f":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18,593]],"s":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18]],"d":"Conformance to `ExpressibleAsTupleTypeElementList`."},{"p":["AvailabilityCondition","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AvailabilityCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityCondition` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AvailabilityCondition","createAvailabilityCondition()"],"f":[["func",12],[" ",17],["createAvailabilityCondition",7],["() -> ",17],["AvailabilityCondition",18,594]],"s":[["func",12],[" ",17],["createAvailabilityCondition",7],["() -> ",17],["AvailabilityCondition",18]],"d":"Conformance to `ExpressibleAsAvailabilityCondition`."},{"p":["DictionaryElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["DictionaryElementList","buildDictionaryElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDictionaryElementList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DictionaryElementListSyntax",18,2957]],"s":[["func",12],[" ",17],["buildDictionaryElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DictionaryElementListSyntax",18]]},{"p":["DictionaryElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DictionaryElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DictionaryElementList","createDictionaryElementList()"],"f":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18,595]],"s":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18]],"d":"Conformance to `ExpressibleAsDictionaryElementList`."},{"p":["DiscardAssignmentExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["DiscardAssignmentExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DiscardAssignmentExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DiscardAssignmentExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`DiscardAssignmentExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DiscardAssignmentExpr","createDiscardAssignmentExpr()"],"f":[["func",12],[" ",17],["createDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExpr",18,596]],"s":[["func",12],[" ",17],["createDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExpr",18]],"d":"Conformance to `ExpressibleAsDiscardAssignmentExpr`."},{"p":["EditorPlaceholderExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["EditorPlaceholderExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EditorPlaceholderExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EditorPlaceholderExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`EditorPlaceholderExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EditorPlaceholderExpr","createEditorPlaceholderExpr()"],"f":[["func",12],[" ",17],["createEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExpr",18,597]],"s":[["func",12],[" ",17],["createEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExpr",18]],"d":"Conformance to `ExpressibleAsEditorPlaceholderExpr`."},{"p":["ExpressibleAsCaseItem","createCaseItem()"],"f":[["func",12],[" ",17],["createCaseItem",7],["() -> ",17],["CaseItem",18,647]],"s":[["func",12],[" ",17],["createCaseItem",7],["() -> ",17],["CaseItem",18]]},{"p":["ExpressibleAsCaseItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCaseItem","createCaseItemList()"],"f":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18,451]],"s":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18]],"d":"Conformance to `ExpressibleAsCaseItemList`."},{"p":["ExpressibleAsDeclName","createDeclName()"],"f":[["func",12],[" ",17],["createDeclName",7],["() -> ",17],["DeclName",18,648]],"s":[["func",12],[" ",17],["createDeclName",7],["() -> ",17],["DeclName",18]]},{"p":["ExpressibleAsDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsEnumDecl","createEnumDecl()"],"f":[["func",12],[" ",17],["createEnumDecl",7],["() -> ",17],["EnumDecl",18,649]],"s":[["func",12],[" ",17],["createEnumDecl",7],["() -> ",17],["EnumDecl",18]]},{"p":["ExpressibleAsEnumDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsExprList","createExprList()"],"f":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18,650]],"s":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18]]},{"p":["ExpressibleAsExprList","createConditionElement()"],"f":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18,525]],"s":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18]],"d":"Conformance to `ExpressibleAsConditionElement`."},{"p":["ExpressibleAsObjcName","createObjcName()"],"f":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18,651]],"s":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18]]},{"p":["ExpressibleAsSomeType","createSomeType()"],"f":[["func",12],[" ",17],["createSomeType",7],["() -> ",17],["SomeType",18,652]],"s":[["func",12],[" ",17],["createSomeType",7],["() -> ",17],["SomeType",18]]},{"p":["ExpressibleAsSomeType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsTypeExpr","createTypeExpr()"],"f":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18,653]],"s":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18]]},{"p":["ExpressibleAsTypeExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["FunctionParameterList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["FunctionParameterList","buildFunctionParameterList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildFunctionParameterList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["FunctionParameterListSyntax",18,2958]],"s":[["func",12],[" ",17],["buildFunctionParameterList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["FunctionParameterListSyntax",18]]},{"p":["FunctionParameterList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`FunctionParameterList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["FunctionParameterList","createFunctionParameterList()"],"f":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18,598]],"s":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18]],"d":"Conformance to `ExpressibleAsFunctionParameterList`."},{"p":["GenericArgumentClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["GenericArgumentClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericArgumentClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericArgumentClause","createGenericArgumentClause()"],"f":[["func",12],[" ",17],["createGenericArgumentClause",7],["() -> ",17],["GenericArgumentClause",18,599]],"s":[["func",12],[" ",17],["createGenericArgumentClause",7],["() -> ",17],["GenericArgumentClause",18]],"d":"Conformance to `ExpressibleAsGenericArgumentClause`."},{"p":["PrimaryAssociatedType","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PrimaryAssociatedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrimaryAssociatedType` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrimaryAssociatedType","createPrimaryAssociatedType()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedType",18,600]],"s":[["func",12],[" ",17],["createPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedType",18]],"d":"Conformance to `ExpressibleAsPrimaryAssociatedType`."},{"p":["StringLiteralSegments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["StringLiteralSegments","buildStringLiteralSegments(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStringLiteralSegments",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StringLiteralSegmentsSyntax",18,2959]],"s":[["func",12],[" ",17],["buildStringLiteralSegments",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StringLiteralSegmentsSyntax",18]]},{"p":["StringLiteralSegments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`StringLiteralSegments` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["StringLiteralSegments","createStringLiteralSegments()"],"f":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18,601]],"s":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18]],"d":"Conformance to `ExpressibleAsStringLiteralSegments`."},{"p":["SymbolicReferenceExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["SymbolicReferenceExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SymbolicReferenceExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SymbolicReferenceExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`SymbolicReferenceExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SymbolicReferenceExpr","createSymbolicReferenceExpr()"],"f":[["func",12],[" ",17],["createSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExpr",18,602]],"s":[["func",12],[" ",17],["createSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExpr",18]],"d":"Conformance to `ExpressibleAsSymbolicReferenceExpr`."},{"p":["TypeInheritanceClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TypeInheritanceClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypeInheritanceClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypeInheritanceClause","createTypeInheritanceClause()"],"f":[["func",12],[" ",17],["createTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClause",18,603]],"s":[["func",12],[" ",17],["createTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClause",18]],"d":"Conformance to `ExpressibleAsTypeInheritanceClause`."},{"p":["TypeInitializerClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["TypeInitializerClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypeInitializerClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypeInitializerClause","createTypeInitializerClause()"],"f":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18,604]],"s":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18]],"d":"Conformance to `ExpressibleAsTypeInitializerClause`."},{"p":["UnresolvedPatternExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["UnresolvedPatternExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`UnresolvedPatternExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["UnresolvedPatternExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`UnresolvedPatternExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["UnresolvedPatternExpr","createUnresolvedPatternExpr()"],"f":[["func",12],[" ",17],["createUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExpr",18,605]],"s":[["func",12],[" ",17],["createUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExpr",18]],"d":"Conformance to `ExpressibleAsUnresolvedPatternExpr`."},{"p":["ClosureCaptureItemList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ClosureCaptureItemList","buildClosureCaptureItemList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildClosureCaptureItemList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ClosureCaptureItemListSyntax",18,2960]],"s":[["func",12],[" ",17],["buildClosureCaptureItemList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ClosureCaptureItemListSyntax",18]]},{"p":["ClosureCaptureItemList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureCaptureItemList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureCaptureItemList","createClosureCaptureItemList()"],"f":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18,606]],"s":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18]],"d":"Conformance to `ExpressibleAsClosureCaptureItemList`."},{"p":["CompositionTypeElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CompositionTypeElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CompositionTypeElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CompositionTypeElement","createCompositionTypeElement()"],"f":[["func",12],[" ",17],["createCompositionTypeElement",7],["() -> ",17],["CompositionTypeElement",18,607]],"s":[["func",12],[" ",17],["createCompositionTypeElement",7],["() -> ",17],["CompositionTypeElement",18]],"d":"Conformance to `ExpressibleAsCompositionTypeElement`."},{"p":["ConformanceRequirement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ConformanceRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ConformanceRequirement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ConformanceRequirement","createConformanceRequirement()"],"f":[["func",12],[" ",17],["createConformanceRequirement",7],["() -> ",17],["ConformanceRequirement",18,608]],"s":[["func",12],[" ",17],["createConformanceRequirement",7],["() -> ",17],["ConformanceRequirement",18]],"d":"Conformance to `ExpressibleAsConformanceRequirement`."},{"p":["DifferentiabilityParam","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DifferentiabilityParam","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiabilityParam` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DifferentiabilityParam","createDifferentiabilityParam()"],"f":[["func",12],[" ",17],["createDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParam",18,609]],"s":[["func",12],[" ",17],["createDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParam",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParam`."},{"p":["ExpressibleAsArrayExpr","createArrayExpr()"],"f":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18,654]],"s":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18]]},{"p":["ExpressibleAsArrayExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsArrayType","createArrayType()"],"f":[["func",12],[" ",17],["createArrayType",7],["() -> ",17],["ArrayType",18,655]],"s":[["func",12],[" ",17],["createArrayType",7],["() -> ",17],["ArrayType",18]]},{"p":["ExpressibleAsArrayType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsArrowExpr","createArrowExpr()"],"f":[["func",12],[" ",17],["createArrowExpr",7],["() -> ",17],["ArrowExpr",18,656]],"s":[["func",12],[" ",17],["createArrowExpr",7],["() -> ",17],["ArrowExpr",18]]},{"p":["ExpressibleAsArrowExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsAttribute","createAttribute()"],"f":[["func",12],[" ",17],["createAttribute",7],["() -> ",17],["Attribute",18,657]],"s":[["func",12],[" ",17],["createAttribute",7],["() -> ",17],["Attribute",18]]},{"p":["ExpressibleAsAttribute","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAwaitExpr","createAwaitExpr()"],"f":[["func",12],[" ",17],["createAwaitExpr",7],["() -> ",17],["AwaitExpr",18,658]],"s":[["func",12],[" ",17],["createAwaitExpr",7],["() -> ",17],["AwaitExpr",18]]},{"p":["ExpressibleAsAwaitExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsBreakStmt","createBreakStmt()"],"f":[["func",12],[" ",17],["createBreakStmt",7],["() -> ",17],["BreakStmt",18,659]],"s":[["func",12],[" ",17],["createBreakStmt",7],["() -> ",17],["BreakStmt",18]]},{"p":["ExpressibleAsBreakStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsCatchItem","createCatchItem()"],"f":[["func",12],[" ",17],["createCatchItem",7],["() -> ",17],["CatchItem",18,660]],"s":[["func",12],[" ",17],["createCatchItem",7],["() -> ",17],["CatchItem",18]]},{"p":["ExpressibleAsCatchItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCatchItem","createCatchItemList()"],"f":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18,474]],"s":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18]],"d":"Conformance to `ExpressibleAsCatchItemList`."},{"p":["ExpressibleAsClassDecl","createClassDecl()"],"f":[["func",12],[" ",17],["createClassDecl",7],["() -> ",17],["ClassDecl",18,661]],"s":[["func",12],[" ",17],["createClassDecl",7],["() -> ",17],["ClassDecl",18]]},{"p":["ExpressibleAsClassDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsCodeBlock","createCodeBlock()"],"f":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18,662]],"s":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18]]},{"p":["ExpressibleAsCodeBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeferStmt","createDeferStmt()"],"f":[["func",12],[" ",17],["createDeferStmt",7],["() -> ",17],["DeferStmt",18,663]],"s":[["func",12],[" ",17],["createDeferStmt",7],["() -> ",17],["DeferStmt",18]]},{"p":["ExpressibleAsDeferStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsElseBlock","createElseBlock()"],"f":[["func",12],[" ",17],["createElseBlock",7],["() -> ",17],["ElseBlock",18,664]],"s":[["func",12],[" ",17],["createElseBlock",7],["() -> ",17],["ElseBlock",18]]},{"p":["ExpressibleAsElseBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsForInStmt","createForInStmt()"],"f":[["func",12],[" ",17],["createForInStmt",7],["() -> ",17],["ForInStmt",18,665]],"s":[["func",12],[" ",17],["createForInStmt",7],["() -> ",17],["ForInStmt",18]]},{"p":["ExpressibleAsForInStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsGuardStmt","createGuardStmt()"],"f":[["func",12],[" ",17],["createGuardStmt",7],["() -> ",17],["GuardStmt",18,666]],"s":[["func",12],[" ",17],["createGuardStmt",7],["() -> ",17],["GuardStmt",18]]},{"p":["ExpressibleAsGuardStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsInOutExpr","createInOutExpr()"],"f":[["func",12],[" ",17],["createInOutExpr",7],["() -> ",17],["InOutExpr",18,667]],"s":[["func",12],[" ",17],["createInOutExpr",7],["() -> ",17],["InOutExpr",18]]},{"p":["ExpressibleAsInOutExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsThrowStmt","createThrowStmt()"],"f":[["func",12],[" ",17],["createThrowStmt",7],["() -> ",17],["ThrowStmt",18,668]],"s":[["func",12],[" ",17],["createThrowStmt",7],["() -> ",17],["ThrowStmt",18]]},{"p":["ExpressibleAsThrowStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsTokenList","createTokenList()"],"f":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18,669]],"s":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18]]},{"p":["ExpressibleAsTupleExpr","createTupleExpr()"],"f":[["func",12],[" ",17],["createTupleExpr",7],["() -> ",17],["TupleExpr",18,670]],"s":[["func",12],[" ",17],["createTupleExpr",7],["() -> ",17],["TupleExpr",18]]},{"p":["ExpressibleAsTupleExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTupleType","createTupleType()"],"f":[["func",12],[" ",17],["createTupleType",7],["() -> ",17],["TupleType",18,671]],"s":[["func",12],[" ",17],["createTupleType",7],["() -> ",17],["TupleType",18]]},{"p":["ExpressibleAsTupleType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsWhileStmt","createWhileStmt()"],"f":[["func",12],[" ",17],["createWhileStmt",7],["() -> ",17],["WhileStmt",18,672]],"s":[["func",12],[" ",17],["createWhileStmt",7],["() -> ",17],["WhileStmt",18]]},{"p":["ExpressibleAsWhileStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsYieldList","createYieldList()"],"f":[["func",12],[" ",17],["createYieldList",7],["() -> ",17],["YieldList",18,673]],"s":[["func",12],[" ",17],["createYieldList",7],["() -> ",17],["YieldList",18]]},{"p":["ExpressibleAsYieldList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsYieldStmt","createYieldStmt()"],"f":[["func",12],[" ",17],["createYieldStmt",7],["() -> ",17],["YieldStmt",18,674]],"s":[["func",12],[" ",17],["createYieldStmt",7],["() -> ",17],["YieldStmt",18]]},{"p":["ExpressibleAsYieldStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["GenericParameterClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["GenericParameterClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericParameterClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericParameterClause","createGenericParameterClause()"],"f":[["func",12],[" ",17],["createGenericParameterClause",7],["() -> ",17],["GenericParameterClause",18,610]],"s":[["func",12],[" ",17],["createGenericParameterClause",7],["() -> ",17],["GenericParameterClause",18]],"d":"Conformance to `ExpressibleAsGenericParameterClause`."},{"p":["GenericRequirementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["GenericRequirementList","buildGenericRequirementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildGenericRequirementList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["GenericRequirementListSyntax",18,2961]],"s":[["func",12],[" ",17],["buildGenericRequirementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["GenericRequirementListSyntax",18]]},{"p":["GenericRequirementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GenericRequirementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GenericRequirementList","createGenericRequirementList()"],"f":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18,611]],"s":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18]],"d":"Conformance to `ExpressibleAsGenericRequirementList`."},{"p":["LabeledSpecializeEntry","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["LabeledSpecializeEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`LabeledSpecializeEntry` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["LabeledSpecializeEntry","createLabeledSpecializeEntry()"],"f":[["func",12],[" ",17],["createLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntry",18,612]],"s":[["func",12],[" ",17],["createLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntry",18]],"d":"Conformance to `ExpressibleAsLabeledSpecializeEntry`."},{"p":["ClosureCaptureSignature","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ClosureCaptureSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClosureCaptureSignature` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClosureCaptureSignature","createClosureCaptureSignature()"],"f":[["func",12],[" ",17],["createClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignature",18,613]],"s":[["func",12],[" ",17],["createClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignature",18]],"d":"Conformance to `ExpressibleAsClosureCaptureSignature`."},{"p":["DifferentiabilityParams","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DifferentiabilityParams","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiabilityParams` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DifferentiabilityParams","createDifferentiabilityParams()"],"f":[["func",12],[" ",17],["createDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParams",18,614]],"s":[["func",12],[" ",17],["createDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParams",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParams`."},{"p":["ExpressibleAsAccessPath","createAccessPath()"],"f":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18,436]],"s":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18]]},{"p":["ExpressibleAsImportDecl","createImportDecl()"],"f":[["func",12],[" ",17],["createImportDecl",7],["() -> ",17],["ImportDecl",18,437]],"s":[["func",12],[" ",17],["createImportDecl",7],["() -> ",17],["ImportDecl",18]]},{"p":["ExpressibleAsImportDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsReturnStmt","createReturnStmt()"],"f":[["func",12],[" ",17],["createReturnStmt",7],["() -> ",17],["ReturnStmt",18,438]],"s":[["func",12],[" ",17],["createReturnStmt",7],["() -> ",17],["ReturnStmt",18]]},{"p":["ExpressibleAsReturnStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsSourceFile","createSourceFile()"],"f":[["func",12],[" ",17],["createSourceFile",7],["() -> ",17],["SourceFile",18,439]],"s":[["func",12],[" ",17],["createSourceFile",7],["() -> ",17],["SourceFile",18]]},{"p":["ExpressibleAsSourceFile","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsStructDecl","createStructDecl()"],"f":[["func",12],[" ",17],["createStructDecl",7],["() -> ",17],["StructDecl",18,440]],"s":[["func",12],[" ",17],["createStructDecl",7],["() -> ",17],["StructDecl",18]]},{"p":["ExpressibleAsStructDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsSwitchCase","createSwitchCase()"],"f":[["func",12],[" ",17],["createSwitchCase",7],["() -> ",17],["SwitchCase",18,441]],"s":[["func",12],[" ",17],["createSwitchCase",7],["() -> ",17],["SwitchCase",18]]},{"p":["ExpressibleAsSwitchCase","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSwitchStmt","createSwitchStmt()"],"f":[["func",12],[" ",17],["createSwitchStmt",7],["() -> ",17],["SwitchStmt",18,442]],"s":[["func",12],[" ",17],["createSwitchStmt",7],["() -> ",17],["SwitchStmt",18]]},{"p":["ExpressibleAsSwitchStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["PoundSourceLocationArgs","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PoundSourceLocationArgs","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PoundSourceLocationArgs` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PoundSourceLocationArgs","createPoundSourceLocationArgs()"],"f":[["func",12],[" ",17],["createPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgs",18,615]],"s":[["func",12],[" ",17],["createPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgs",18]],"d":"Conformance to `ExpressibleAsPoundSourceLocationArgs`."},{"p":["PrecedenceGroupNameList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["PrecedenceGroupNameList","buildPrecedenceGroupNameList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPrecedenceGroupNameList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["PrecedenceGroupNameListSyntax",18,2962]],"s":[["func",12],[" ",17],["buildPrecedenceGroupNameList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PrecedenceGroupNameListSyntax",18]]},{"p":["PrecedenceGroupNameList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupNameList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupNameList","createPrecedenceGroupNameList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18,616]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupNameList`."},{"p":["PrecedenceGroupRelation","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PrecedenceGroupRelation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupRelation` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupRelation","createPrecedenceGroupRelation()"],"f":[["func",12],[" ",17],["createPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelation",18,617]],"s":[["func",12],[" ",17],["createPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelation",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupRelation`."},{"p":["TuplePatternElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["TuplePatternElementList","buildTuplePatternElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTuplePatternElementList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TuplePatternElementListSyntax",18,2963]],"s":[["func",12],[" ",17],["buildTuplePatternElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TuplePatternElementListSyntax",18]]},{"p":["TuplePatternElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TuplePatternElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TuplePatternElementList","createTuplePatternElementList()"],"f":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18,618]],"s":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18]],"d":"Conformance to `ExpressibleAsTuplePatternElementList`."},{"p":["UnavailabilityCondition","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["UnavailabilityCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`UnavailabilityCondition` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["UnavailabilityCondition","createUnavailabilityCondition()"],"f":[["func",12],[" ",17],["createUnavailabilityCondition",7],["() -> ",17],["UnavailabilityCondition",18,619]],"s":[["func",12],[" ",17],["createUnavailabilityCondition",7],["() -> ",17],["UnavailabilityCondition",18]],"d":"Conformance to `ExpressibleAsUnavailabilityCondition`."},{"p":["ExpressibleAsCatchClause","createCatchClause()"],"f":[["func",12],[" ",17],["createCatchClause",7],["() -> ",17],["CatchClause",18,443]],"s":[["func",12],[" ",17],["createCatchClause",7],["() -> ",17],["CatchClause",18]]},{"p":["ExpressibleAsCatchClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCatchClause","createCatchClauseList()"],"f":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18,501]],"s":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18]],"d":"Conformance to `ExpressibleAsCatchClauseList`."},{"p":["ExpressibleAsClosureExpr","createClosureExpr()"],"f":[["func",12],[" ",17],["createClosureExpr",7],["() -> ",17],["ClosureExpr",18,444]],"s":[["func",12],[" ",17],["createClosureExpr",7],["() -> ",17],["ClosureExpr",18]]},{"p":["ExpressibleAsClosureExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsKeyPathExpr","createKeyPathExpr()"],"f":[["func",12],[" ",17],["createKeyPathExpr",7],["() -> ",17],["KeyPathExpr",18,445]],"s":[["func",12],[" ",17],["createKeyPathExpr",7],["() -> ",17],["KeyPathExpr",18]]},{"p":["ExpressibleAsKeyPathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTernaryExpr","createTernaryExpr()"],"f":[["func",12],[" ",17],["createTernaryExpr",7],["() -> ",17],["TernaryExpr",18,446]],"s":[["func",12],[" ",17],["createTernaryExpr",7],["() -> ",17],["TernaryExpr",18]]},{"p":["ExpressibleAsTernaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsWhereClause","createWhereClause()"],"f":[["func",12],[" ",17],["createWhereClause",7],["() -> ",17],["WhereClause",18,447]],"s":[["func",12],[" ",17],["createWhereClause",7],["() -> ",17],["WhereClause",18]]},{"p":["ExpressibleAsWhereClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["MatchingPatternCondition","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["MatchingPatternCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MatchingPatternCondition` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MatchingPatternCondition","createMatchingPatternCondition()"],"f":[["func",12],[" ",17],["createMatchingPatternCondition",7],["() -> ",17],["MatchingPatternCondition",18,620]],"s":[["func",12],[" ",17],["createMatchingPatternCondition",7],["() -> ",17],["MatchingPatternCondition",18]],"d":"Conformance to `ExpressibleAsMatchingPatternCondition`."},{"p":["OptionalBindingCondition","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["OptionalBindingCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OptionalBindingCondition` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OptionalBindingCondition","createOptionalBindingCondition()"],"f":[["func",12],[" ",17],["createOptionalBindingCondition",7],["() -> ",17],["OptionalBindingCondition",18,621]],"s":[["func",12],[" ",17],["createOptionalBindingCondition",7],["() -> ",17],["OptionalBindingCondition",18]],"d":"Conformance to `ExpressibleAsOptionalBindingCondition`."},{"p":["ExpressibleAsAccessorDecl","createAccessorDecl()"],"f":[["func",12],[" ",17],["createAccessorDecl",7],["() -> ",17],["AccessorDecl",18,448]],"s":[["func",12],[" ",17],["createAccessorDecl",7],["() -> ",17],["AccessorDecl",18]]},{"p":["ExpressibleAsAccessorDecl","createAccessorList()"],"f":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18,449]],"s":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18]],"d":"Conformance to `ExpressibleAsAccessorList`."},{"p":["ExpressibleAsAccessorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsAccessorList","createAccessorList()"],"f":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18,449]],"s":[["func",12],[" ",17],["createAccessorList",7],["() -> ",17],["AccessorList",18]]},{"p":["ExpressibleAsAccessorList","createAccessorBlock()"],"f":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18,471]],"s":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18]],"d":"Conformance to `ExpressibleAsAccessorBlock`."},{"p":["ExpressibleAsArrayElement","createArrayElement()"],"f":[["func",12],[" ",17],["createArrayElement",7],["() -> ",17],["ArrayElement",18,450]],"s":[["func",12],[" ",17],["createArrayElement",7],["() -> ",17],["ArrayElement",18]]},{"p":["ExpressibleAsArrayElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsArrayElement","createArrayElementList()"],"f":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18,522]],"s":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18]],"d":"Conformance to `ExpressibleAsArrayElementList`."},{"p":["ExpressibleAsCaseItemList","createCaseItemList()"],"f":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18,451]],"s":[["func",12],[" ",17],["createCaseItemList",7],["() -> ",17],["CaseItemList",18]]},{"p":["ExpressibleAsClosureParam","createClosureParam()"],"f":[["func",12],[" ",17],["createClosureParam",7],["() -> ",17],["ClosureParam",18,452]],"s":[["func",12],[" ",17],["createClosureParam",7],["() -> ",17],["ClosureParam",18]]},{"p":["ExpressibleAsClosureParam","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsClosureParam","createClosureParamList()"],"f":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18,523]],"s":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18]],"d":"Conformance to `ExpressibleAsClosureParamList`."},{"p":["ExpressibleAsContinueStmt","createContinueStmt()"],"f":[["func",12],[" ",17],["createContinueStmt",7],["() -> ",17],["ContinueStmt",18,453]],"s":[["func",12],[" ",17],["createContinueStmt",7],["() -> ",17],["ContinueStmt",18]]},{"p":["ExpressibleAsContinueStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsDeclModifier","createDeclModifier()"],"f":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18,454]],"s":[["func",12],[" ",17],["createDeclModifier",7],["() -> ",17],["DeclModifier",18]]},{"p":["ExpressibleAsDeclModifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeclModifier","createModifierList()"],"f":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18,460]],"s":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18]],"d":"Conformance to `ExpressibleAsModifierList`."},{"p":["ExpressibleAsEnumCaseDecl","createEnumCaseDecl()"],"f":[["func",12],[" ",17],["createEnumCaseDecl",7],["() -> ",17],["EnumCaseDecl",18,455]],"s":[["func",12],[" ",17],["createEnumCaseDecl",7],["() -> ",17],["EnumCaseDecl",18]]},{"p":["ExpressibleAsEnumCaseDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsFunctionDecl","createFunctionDecl()"],"f":[["func",12],[" ",17],["createFunctionDecl",7],["() -> ",17],["FunctionDecl",18,456]],"s":[["func",12],[" ",17],["createFunctionDecl",7],["() -> ",17],["FunctionDecl",18]]},{"p":["ExpressibleAsFunctionDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsFunctionType","createFunctionType()"],"f":[["func",12],[" ",17],["createFunctionType",7],["() -> ",17],["FunctionType",18,457]],"s":[["func",12],[" ",17],["createFunctionType",7],["() -> ",17],["FunctionType",18]]},{"p":["ExpressibleAsFunctionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsIfConfigDecl","createIfConfigDecl()"],"f":[["func",12],[" ",17],["createIfConfigDecl",7],["() -> ",17],["IfConfigDecl",18,458]],"s":[["func",12],[" ",17],["createIfConfigDecl",7],["() -> ",17],["IfConfigDecl",18]]},{"p":["ExpressibleAsIfConfigDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsMetatypeType","createMetatypeType()"],"f":[["func",12],[" ",17],["createMetatypeType",7],["() -> ",17],["MetatypeType",18,459]],"s":[["func",12],[" ",17],["createMetatypeType",7],["() -> ",17],["MetatypeType",18]]},{"p":["ExpressibleAsMetatypeType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsModifierList","createModifierList()"],"f":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18,460]],"s":[["func",12],[" ",17],["createModifierList",7],["() -> ",17],["ModifierList",18]]},{"p":["ExpressibleAsObjCSelector","createObjCSelector()"],"f":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18,461]],"s":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18]]},{"p":["ExpressibleAsOperatorDecl","createOperatorDecl()"],"f":[["func",12],[" ",17],["createOperatorDecl",7],["() -> ",17],["OperatorDecl",18,462]],"s":[["func",12],[" ",17],["createOperatorDecl",7],["() -> ",17],["OperatorDecl",18]]},{"p":["ExpressibleAsOperatorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsOptionalType","createOptionalType()"],"f":[["func",12],[" ",17],["createOptionalType",7],["() -> ",17],["OptionalType",18,463]],"s":[["func",12],[" ",17],["createOptionalType",7],["() -> ",17],["OptionalType",18]]},{"p":["ExpressibleAsOptionalType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsProtocolDecl","createProtocolDecl()"],"f":[["func",12],[" ",17],["createProtocolDecl",7],["() -> ",17],["ProtocolDecl",18,464]],"s":[["func",12],[" ",17],["createProtocolDecl",7],["() -> ",17],["ProtocolDecl",18]]},{"p":["ExpressibleAsProtocolDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsReturnClause","createReturnClause()"],"f":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18,465]],"s":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18]]},{"p":["ExpressibleAsReturnClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSequenceExpr","createSequenceExpr()"],"f":[["func",12],[" ",17],["createSequenceExpr",7],["() -> ",17],["SequenceExpr",18,466]],"s":[["func",12],[" ",17],["createSequenceExpr",7],["() -> ",17],["SequenceExpr",18]]},{"p":["ExpressibleAsSequenceExpr","createTupleExprElement()"],"f":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18,536]],"s":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18]],"d":"Conformance to `ExpressibleAsTupleExprElement`."},{"p":["ExpressibleAsSequenceExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsSequenceExpr","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,475]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to `ExpressibleAsCodeBlockItem`."},{"p":["ExpressibleAsSuperRefExpr","createSuperRefExpr()"],"f":[["func",12],[" ",17],["createSuperRefExpr",7],["() -> ",17],["SuperRefExpr",18,467]],"s":[["func",12],[" ",17],["createSuperRefExpr",7],["() -> ",17],["SuperRefExpr",18]]},{"p":["ExpressibleAsSuperRefExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTuplePattern","createTuplePattern()"],"f":[["func",12],[" ",17],["createTuplePattern",7],["() -> ",17],["TuplePattern",18,468]],"s":[["func",12],[" ",17],["createTuplePattern",7],["() -> ",17],["TuplePattern",18]]},{"p":["ExpressibleAsTuplePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsVariableDecl","createVariableDecl()"],"f":[["func",12],[" ",17],["createVariableDecl",7],["() -> ",17],["VariableDecl",18,469]],"s":[["func",12],[" ",17],["createVariableDecl",7],["() -> ",17],["VariableDecl",18]]},{"p":["ExpressibleAsVariableDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsVersionTuple","createVersionTuple()"],"f":[["func",12],[" ",17],["createVersionTuple",7],["() -> ",17],["VersionTuple",18,470]],"s":[["func",12],[" ",17],["createVersionTuple",7],["() -> ",17],["VersionTuple",18]]},{"p":["ExpressibleAsVersionTuple","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["PrecedenceGroupAssignment","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PrecedenceGroupAssignment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupAssignment` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupAssignment","createPrecedenceGroupAssignment()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignment",18,622]],"s":[["func",12],[" ",17],["createPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignment",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupAssignment`."},{"p":["PrimaryAssociatedTypeList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["PrimaryAssociatedTypeList","buildPrimaryAssociatedTypeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPrimaryAssociatedTypeList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["PrimaryAssociatedTypeListSyntax",18,2964]],"s":[["func",12],[" ",17],["buildPrimaryAssociatedTypeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PrimaryAssociatedTypeListSyntax",18]]},{"p":["PrimaryAssociatedTypeList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrimaryAssociatedTypeList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrimaryAssociatedTypeList","createPrimaryAssociatedTypeList()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18,623]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18]],"d":"Conformance to `ExpressibleAsPrimaryAssociatedTypeList`."},{"p":["CompositionTypeElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["CompositionTypeElementList","buildCompositionTypeElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildCompositionTypeElementList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["CompositionTypeElementListSyntax",18,2965]],"s":[["func",12],[" ",17],["buildCompositionTypeElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["CompositionTypeElementListSyntax",18]]},{"p":["CompositionTypeElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CompositionTypeElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CompositionTypeElementList","createCompositionTypeElementList()"],"f":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18,624]],"s":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18]],"d":"Conformance to `ExpressibleAsCompositionTypeElementList`."},{"p":["DifferentiabilityParamList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["DifferentiabilityParamList","buildDifferentiabilityParamList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDifferentiabilityParamList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DifferentiabilityParamListSyntax",18,2966]],"s":[["func",12],[" ",17],["buildDifferentiabilityParamList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DifferentiabilityParamListSyntax",18]]},{"p":["DifferentiabilityParamList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiabilityParamList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DifferentiabilityParamList","createDifferentiabilityParamList()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18,625]],"s":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParamList`."},{"p":["ExpressibleAsAccessorBlock","createAccessorBlock()"],"f":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18,471]],"s":[["func",12],[" ",17],["createAccessorBlock",7],["() -> ",17],["AccessorBlock",18]]},{"p":["ExpressibleAsAccessorBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAttributeList","createAttributeList()"],"f":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18,473]],"s":[["func",12],[" ",17],["createAttributeList",7],["() -> ",17],["AttributeList",18]]},{"p":["ExpressibleAsCatchItemList","createCatchItemList()"],"f":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18,474]],"s":[["func",12],[" ",17],["createCatchItemList",7],["() -> ",17],["CatchItemList",18]]},{"p":["ExpressibleAsCodeBlockItem","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,475]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]]},{"p":["ExpressibleAsCodeBlockItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCodeBlockItem","createCodeBlockItemList()"],"f":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18,540]],"s":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18]],"d":"Conformance to `ExpressibleAsCodeBlockItemList`."},{"p":["ExpressibleAsDeclBuildable","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsDeclBuildable","createMemberDeclListItem()"],"f":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18,567]],"s":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18]],"d":"Conformance to `ExpressibleAsMemberDeclListItem`."},{"p":["ExpressibleAsDeclBuildable","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,475]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to `ExpressibleAsCodeBlockItem`."},{"p":["ExpressibleAsExprBuildable","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsExprBuildable","createExprList()"],"f":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18,650]],"s":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18]],"d":"Conformance to `ExpressibleAsExprList`."},{"p":["ExpressibleAsExtensionDecl","createExtensionDecl()"],"f":[["func",12],[" ",17],["createExtensionDecl",7],["() -> ",17],["ExtensionDecl",18,476]],"s":[["func",12],[" ",17],["createExtensionDecl",7],["() -> ",17],["ExtensionDecl",18]]},{"p":["ExpressibleAsExtensionDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsInheritedType","createInheritedType()"],"f":[["func",12],[" ",17],["createInheritedType",7],["() -> ",17],["InheritedType",18,477]],"s":[["func",12],[" ",17],["createInheritedType",7],["() -> ",17],["InheritedType",18]]},{"p":["ExpressibleAsInheritedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsInheritedType","createInheritedTypeList()"],"f":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18,549]],"s":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18]],"d":"Conformance to `ExpressibleAsInheritedTypeList`."},{"p":["ExpressibleAsIsTypePattern","createIsTypePattern()"],"f":[["func",12],[" ",17],["createIsTypePattern",7],["() -> ",17],["IsTypePattern",18,478]],"s":[["func",12],[" ",17],["createIsTypePattern",7],["() -> ",17],["IsTypePattern",18]]},{"p":["ExpressibleAsIsTypePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsObjcNamePiece","createObjcNamePiece()"],"f":[["func",12],[" ",17],["createObjcNamePiece",7],["() -> ",17],["ObjcNamePiece",18,479]],"s":[["func",12],[" ",17],["createObjcNamePiece",7],["() -> ",17],["ObjcNamePiece",18]]},{"p":["ExpressibleAsObjcNamePiece","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsObjcNamePiece","createObjcName()"],"f":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18,651]],"s":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18]],"d":"Conformance to `ExpressibleAsObjcName`."},{"p":["ExpressibleAsPoundFileExpr","createPoundFileExpr()"],"f":[["func",12],[" ",17],["createPoundFileExpr",7],["() -> ",17],["PoundFileExpr",18,480]],"s":[["func",12],[" ",17],["createPoundFileExpr",7],["() -> ",17],["PoundFileExpr",18]]},{"p":["ExpressibleAsPoundFileExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundLineExpr","createPoundLineExpr()"],"f":[["func",12],[" ",17],["createPoundLineExpr",7],["() -> ",17],["PoundLineExpr",18,481]],"s":[["func",12],[" ",17],["createPoundLineExpr",7],["() -> ",17],["PoundLineExpr",18]]},{"p":["ExpressibleAsPoundLineExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsStmtBuildable","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsStmtBuildable","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,475]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to `ExpressibleAsCodeBlockItem`."},{"p":["ExpressibleAsStringSegment","createStringSegment()"],"f":[["func",12],[" ",17],["createStringSegment",7],["() -> ",17],["StringSegment",18,482]],"s":[["func",12],[" ",17],["createStringSegment",7],["() -> ",17],["StringSegment",18]]},{"p":["ExpressibleAsStringSegment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSubscriptDecl","createSubscriptDecl()"],"f":[["func",12],[" ",17],["createSubscriptDecl",7],["() -> ",17],["SubscriptDecl",18,483]],"s":[["func",12],[" ",17],["createSubscriptDecl",7],["() -> ",17],["SubscriptDecl",18]]},{"p":["ExpressibleAsSubscriptDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsSubscriptExpr","createSubscriptExpr()"],"f":[["func",12],[" ",17],["createSubscriptExpr",7],["() -> ",17],["SubscriptExpr",18,484]],"s":[["func",12],[" ",17],["createSubscriptExpr",7],["() -> ",17],["SubscriptExpr",18]]},{"p":["ExpressibleAsSubscriptExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTypeBuildable","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsTypeBuildable","createReturnClause()"],"f":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18,465]],"s":[["func",12],[" ",17],["createReturnClause",7],["() -> ",17],["ReturnClause",18]],"d":"Conformance to `ExpressibleAsReturnClause`."},{"p":["ExpressibleAsTypealiasDecl","createTypealiasDecl()"],"f":[["func",12],[" ",17],["createTypealiasDecl",7],["() -> ",17],["TypealiasDecl",18,485]],"s":[["func",12],[" ",17],["createTypealiasDecl",7],["() -> ",17],["TypealiasDecl",18]]},{"p":["ExpressibleAsTypealiasDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["OperatorPrecedenceAndTypes","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["OperatorPrecedenceAndTypes","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`OperatorPrecedenceAndTypes` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["OperatorPrecedenceAndTypes","createOperatorPrecedenceAndTypes()"],"f":[["func",12],[" ",17],["createOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypes",18,626]],"s":[["func",12],[" ",17],["createOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypes",18]],"d":"Conformance to `ExpressibleAsOperatorPrecedenceAndTypes`."},{"p":["PrecedenceGroupNameElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PrecedenceGroupNameElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupNameElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupNameElement","createPrecedenceGroupNameElement()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElement",18,627]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElement",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupNameElement`."},{"p":["AvailabilityLabeledArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AvailabilityLabeledArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityLabeledArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AvailabilityLabeledArgument","createAvailabilityLabeledArgument()"],"f":[["func",12],[" ",17],["createAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgument",18,628]],"s":[["func",12],[" ",17],["createAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgument",18]],"d":"Conformance to `ExpressibleAsAvailabilityLabeledArgument`."},{"p":["ExpressibleAsAssignmentExpr","createAssignmentExpr()"],"f":[["func",12],[" ",17],["createAssignmentExpr",7],["() -> ",17],["AssignmentExpr",18,486]],"s":[["func",12],[" ",17],["createAssignmentExpr",7],["() -> ",17],["AssignmentExpr",18]]},{"p":["ExpressibleAsAssignmentExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsAttributedType","createAttributedType()"],"f":[["func",12],[" ",17],["createAttributedType",7],["() -> ",17],["AttributedType",18,487]],"s":[["func",12],[" ",17],["createAttributedType",7],["() -> ",17],["AttributedType",18]]},{"p":["ExpressibleAsAttributedType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsDictionaryExpr","createDictionaryExpr()"],"f":[["func",12],[" ",17],["createDictionaryExpr",7],["() -> ",17],["DictionaryExpr",18,488]],"s":[["func",12],[" ",17],["createDictionaryExpr",7],["() -> ",17],["DictionaryExpr",18]]},{"p":["ExpressibleAsDictionaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsDictionaryType","createDictionaryType()"],"f":[["func",12],[" ",17],["createDictionaryType",7],["() -> ",17],["DictionaryType",18,489]],"s":[["func",12],[" ",17],["createDictionaryType",7],["() -> ",17],["DictionaryType",18]]},{"p":["ExpressibleAsDictionaryType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsExpressionStmt","createExpressionStmt()"],"f":[["func",12],[" ",17],["createExpressionStmt",7],["() -> ",17],["ExpressionStmt",18,490]],"s":[["func",12],[" ",17],["createExpressionStmt",7],["() -> ",17],["ExpressionStmt",18]]},{"p":["ExpressibleAsExpressionStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsIdentifierExpr","createIdentifierExpr()"],"f":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18,491]],"s":[["func",12],[" ",17],["createIdentifierExpr",7],["() -> ",17],["IdentifierExpr",18]]},{"p":["ExpressibleAsIdentifierExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsIdentifierList","createIdentifierList()"],"f":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18,492]],"s":[["func",12],[" ",17],["createIdentifierList",7],["() -> ",17],["IdentifierList",18]]},{"p":["ExpressibleAsIfConfigClause","createIfConfigClause()"],"f":[["func",12],[" ",17],["createIfConfigClause",7],["() -> ",17],["IfConfigClause",18,493]],"s":[["func",12],[" ",17],["createIfConfigClause",7],["() -> ",17],["IfConfigClause",18]]},{"p":["ExpressibleAsIfConfigClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsIfConfigClause","createIfConfigClauseList()"],"f":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18,565]],"s":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18]],"d":"Conformance to `ExpressibleAsIfConfigClauseList`."},{"p":["ExpressibleAsMemberDeclList","createMemberDeclList()"],"f":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18,494]],"s":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18]]},{"p":["ExpressibleAsMemberDeclList","createMemberDeclBlock()"],"f":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18,512]],"s":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18]],"d":"Conformance to `ExpressibleAsMemberDeclBlock`."},{"p":["ExpressibleAsNilLiteralExpr","createNilLiteralExpr()"],"f":[["func",12],[" ",17],["createNilLiteralExpr",7],["() -> ",17],["NilLiteralExpr",18,495]],"s":[["func",12],[" ",17],["createNilLiteralExpr",7],["() -> ",17],["NilLiteralExpr",18]]},{"p":["ExpressibleAsNilLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPatternBinding","createPatternBinding()"],"f":[["func",12],[" ",17],["createPatternBinding",7],["() -> ",17],["PatternBinding",18,496]],"s":[["func",12],[" ",17],["createPatternBinding",7],["() -> ",17],["PatternBinding",18]]},{"p":["ExpressibleAsPatternBinding","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPatternBinding","createPatternBindingList()"],"f":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18,568]],"s":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18]],"d":"Conformance to `ExpressibleAsPatternBindingList`."},{"p":["ExpressibleAsPoundErrorDecl","createPoundErrorDecl()"],"f":[["func",12],[" ",17],["createPoundErrorDecl",7],["() -> ",17],["PoundErrorDecl",18,497]],"s":[["func",12],[" ",17],["createPoundErrorDecl",7],["() -> ",17],["PoundErrorDecl",18]]},{"p":["ExpressibleAsPoundErrorDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsSpecializeExpr","createSpecializeExpr()"],"f":[["func",12],[" ",17],["createSpecializeExpr",7],["() -> ",17],["SpecializeExpr",18,498]],"s":[["func",12],[" ",17],["createSpecializeExpr",7],["() -> ",17],["SpecializeExpr",18]]},{"p":["ExpressibleAsSpecializeExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsSwitchCaseList","createSwitchCaseList()"],"f":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18,499]],"s":[["func",12],[" ",17],["createSwitchCaseList",7],["() -> ",17],["SwitchCaseList",18]]},{"p":["ExpressibleAsTypeAnnotation","createTypeAnnotation()"],"f":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18,500]],"s":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18]]},{"p":["ExpressibleAsTypeAnnotation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["SpecializeAttributeSpecList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["SpecializeAttributeSpecList","buildSpecializeAttributeSpecList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSpecializeAttributeSpecList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["SpecializeAttributeSpecListSyntax",18,2967]],"s":[["func",12],[" ",17],["buildSpecializeAttributeSpecList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["SpecializeAttributeSpecListSyntax",18]]},{"p":["SpecializeAttributeSpecList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SpecializeAttributeSpecList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SpecializeAttributeSpecList","createSpecializeAttributeSpecList()"],"f":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18,629]],"s":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18]],"d":"Conformance to `ExpressibleAsSpecializeAttributeSpecList`."},{"p":["ExpressibleAsCatchClauseList","createCatchClauseList()"],"f":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18,501]],"s":[["func",12],[" ",17],["createCatchClauseList",7],["() -> ",17],["CatchClauseList",18]]},{"p":["ExpressibleAsCompositionType","createCompositionType()"],"f":[["func",12],[" ",17],["createCompositionType",7],["() -> ",17],["CompositionType",18,502]],"s":[["func",12],[" ",17],["createCompositionType",7],["() -> ",17],["CompositionType",18]]},{"p":["ExpressibleAsCompositionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsCustomAttribute","createCustomAttribute()"],"f":[["func",12],[" ",17],["createCustomAttribute",7],["() -> ",17],["CustomAttribute",18,503]],"s":[["func",12],[" ",17],["createCustomAttribute",7],["() -> ",17],["CustomAttribute",18]]},{"p":["ExpressibleAsCustomAttribute","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeclarationStmt","createDeclarationStmt()"],"f":[["func",12],[" ",17],["createDeclarationStmt",7],["() -> ",17],["DeclarationStmt",18,504]],"s":[["func",12],[" ",17],["createDeclarationStmt",7],["() -> ",17],["DeclarationStmt",18]]},{"p":["ExpressibleAsDeclarationStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsEnumCaseElement","createEnumCaseElement()"],"f":[["func",12],[" ",17],["createEnumCaseElement",7],["() -> ",17],["EnumCaseElement",18,505]],"s":[["func",12],[" ",17],["createEnumCaseElement",7],["() -> ",17],["EnumCaseElement",18]]},{"p":["ExpressibleAsEnumCaseElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsEnumCaseElement","createEnumCaseElementList()"],"f":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18,574]],"s":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18]],"d":"Conformance to `ExpressibleAsEnumCaseElementList`."},{"p":["ExpressibleAsEnumCasePattern","createEnumCasePattern()"],"f":[["func",12],[" ",17],["createEnumCasePattern",7],["() -> ",17],["EnumCasePattern",18,506]],"s":[["func",12],[" ",17],["createEnumCasePattern",7],["() -> ",17],["EnumCasePattern",18]]},{"p":["ExpressibleAsEnumCasePattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsFallthroughStmt","createFallthroughStmt()"],"f":[["func",12],[" ",17],["createFallthroughStmt",7],["() -> ",17],["FallthroughStmt",18,507]],"s":[["func",12],[" ",17],["createFallthroughStmt",7],["() -> ",17],["FallthroughStmt",18]]},{"p":["ExpressibleAsFallthroughStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsForcedValueExpr","createForcedValueExpr()"],"f":[["func",12],[" ",17],["createForcedValueExpr",7],["() -> ",17],["ForcedValueExpr",18,508]],"s":[["func",12],[" ",17],["createForcedValueExpr",7],["() -> ",17],["ForcedValueExpr",18]]},{"p":["ExpressibleAsForcedValueExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsGenericArgument","createGenericArgument()"],"f":[["func",12],[" ",17],["createGenericArgument",7],["() -> ",17],["GenericArgument",18,509]],"s":[["func",12],[" ",17],["createGenericArgument",7],["() -> ",17],["GenericArgument",18]]},{"p":["ExpressibleAsGenericArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericArgument","createGenericArgumentList()"],"f":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18,575]],"s":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18]],"d":"Conformance to `ExpressibleAsGenericArgumentList`."},{"p":["ExpressibleAsInitializerDecl","createInitializerDecl()"],"f":[["func",12],[" ",17],["createInitializerDecl",7],["() -> ",17],["InitializerDecl",18,510]],"s":[["func",12],[" ",17],["createInitializerDecl",7],["() -> ",17],["InitializerDecl",18]]},{"p":["ExpressibleAsInitializerDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsKeyPathBaseExpr","createKeyPathBaseExpr()"],"f":[["func",12],[" ",17],["createKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExpr",18,511]],"s":[["func",12],[" ",17],["createKeyPathBaseExpr",7],["() -> ",17],["KeyPathBaseExpr",18]]},{"p":["ExpressibleAsKeyPathBaseExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsMemberDeclBlock","createMemberDeclBlock()"],"f":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18,512]],"s":[["func",12],[" ",17],["createMemberDeclBlock",7],["() -> ",17],["MemberDeclBlock",18]]},{"p":["ExpressibleAsMemberDeclBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsObjcKeyPathExpr","createObjcKeyPathExpr()"],"f":[["func",12],[" ",17],["createObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExpr",18,513]],"s":[["func",12],[" ",17],["createObjcKeyPathExpr",7],["() -> ",17],["ObjcKeyPathExpr",18]]},{"p":["ExpressibleAsObjcKeyPathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsOptionalPattern","createOptionalPattern()"],"f":[["func",12],[" ",17],["createOptionalPattern",7],["() -> ",17],["OptionalPattern",18,514]],"s":[["func",12],[" ",17],["createOptionalPattern",7],["() -> ",17],["OptionalPattern",18]]},{"p":["ExpressibleAsOptionalPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsParameterClause","createParameterClause()"],"f":[["func",12],[" ",17],["createParameterClause",7],["() -> ",17],["ParameterClause",18,515]],"s":[["func",12],[" ",17],["createParameterClause",7],["() -> ",17],["ParameterClause",18]]},{"p":["ExpressibleAsParameterClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPoundAssertStmt","createPoundAssertStmt()"],"f":[["func",12],[" ",17],["createPoundAssertStmt",7],["() -> ",17],["PoundAssertStmt",18,516]],"s":[["func",12],[" ",17],["createPoundAssertStmt",7],["() -> ",17],["PoundAssertStmt",18]]},{"p":["ExpressibleAsPoundAssertStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsPoundColumnExpr","createPoundColumnExpr()"],"f":[["func",12],[" ",17],["createPoundColumnExpr",7],["() -> ",17],["PoundColumnExpr",18,517]],"s":[["func",12],[" ",17],["createPoundColumnExpr",7],["() -> ",17],["PoundColumnExpr",18]]},{"p":["ExpressibleAsPoundColumnExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundFileIDExpr","createPoundFileIDExpr()"],"f":[["func",12],[" ",17],["createPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExpr",18,518]],"s":[["func",12],[" ",17],["createPoundFileIDExpr",7],["() -> ",17],["PoundFileIDExpr",18]]},{"p":["ExpressibleAsPoundFileIDExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsRepeatWhileStmt","createRepeatWhileStmt()"],"f":[["func",12],[" ",17],["createRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmt",18,519]],"s":[["func",12],[" ",17],["createRepeatWhileStmt",7],["() -> ",17],["RepeatWhileStmt",18]]},{"p":["ExpressibleAsRepeatWhileStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]]},{"p":["ExpressibleAsSwitchCaseLabel","createSwitchCaseLabel()"],"f":[["func",12],[" ",17],["createSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabel",18,520]],"s":[["func",12],[" ",17],["createSwitchCaseLabel",7],["() -> ",17],["SwitchCaseLabel",18]]},{"p":["ExpressibleAsSwitchCaseLabel","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsWildcardPattern","createWildcardPattern()"],"f":[["func",12],[" ",17],["createWildcardPattern",7],["() -> ",17],["WildcardPattern",18,521]],"s":[["func",12],[" ",17],["createWildcardPattern",7],["() -> ",17],["WildcardPattern",18]]},{"p":["ExpressibleAsWildcardPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ImplementsAttributeArguments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ImplementsAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ImplementsAttributeArguments` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ImplementsAttributeArguments","createImplementsAttributeArguments()"],"f":[["func",12],[" ",17],["createImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArguments",18,630]],"s":[["func",12],[" ",17],["createImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArguments",18]],"d":"Conformance to `ExpressibleAsImplementsAttributeArguments`."},{"p":["NamedAttributeStringArgument","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["NamedAttributeStringArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`NamedAttributeStringArgument` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["NamedAttributeStringArgument","createNamedAttributeStringArgument()"],"f":[["func",12],[" ",17],["createNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgument",18,631]],"s":[["func",12],[" ",17],["createNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgument",18]],"d":"Conformance to `ExpressibleAsNamedAttributeStringArgument`."},{"p":["PrecedenceGroupAssociativity","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["PrecedenceGroupAssociativity","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupAssociativity` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupAssociativity","createPrecedenceGroupAssociativity()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativity",18,632]],"s":[["func",12],[" ",17],["createPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativity",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupAssociativity`."},{"p":["PrecedenceGroupAttributeList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["PrecedenceGroupAttributeList","buildPrecedenceGroupAttributeList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildPrecedenceGroupAttributeList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["PrecedenceGroupAttributeListSyntax",18,2968]],"s":[["func",12],[" ",17],["buildPrecedenceGroupAttributeList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["PrecedenceGroupAttributeListSyntax",18]]},{"p":["PrecedenceGroupAttributeList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`PrecedenceGroupAttributeList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["PrecedenceGroupAttributeList","createPrecedenceGroupAttributeList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18,633]],"s":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupAttributeList`."},{"p":["DifferentiabilityParamsClause","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DifferentiabilityParamsClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiabilityParamsClause` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DifferentiabilityParamsClause","createDifferentiabilityParamsClause()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClause",18,634]],"s":[["func",12],[" ",17],["createDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClause",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParamsClause`."},{"p":["ExpressibleAsArrayElementList","createArrayElementList()"],"f":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18,522]],"s":[["func",12],[" ",17],["createArrayElementList",7],["() -> ",17],["ArrayElementList",18]]},{"p":["ExpressibleAsClosureParamList","createClosureParamList()"],"f":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18,523]],"s":[["func",12],[" ",17],["createClosureParamList",7],["() -> ",17],["ClosureParamList",18]]},{"p":["ExpressibleAsClosureSignature","createClosureSignature()"],"f":[["func",12],[" ",17],["createClosureSignature",7],["() -> ",17],["ClosureSignature",18,524]],"s":[["func",12],[" ",17],["createClosureSignature",7],["() -> ",17],["ClosureSignature",18]]},{"p":["ExpressibleAsClosureSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsConditionElement","createConditionElement()"],"f":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18,525]],"s":[["func",12],[" ",17],["createConditionElement",7],["() -> ",17],["ConditionElement",18]]},{"p":["ExpressibleAsConditionElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsConditionElement","createConditionElementList()"],"f":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18,586]],"s":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18]],"d":"Conformance to `ExpressibleAsConditionElementList`."},{"p":["ExpressibleAsDeclNameArgument","createDeclNameArgument()"],"f":[["func",12],[" ",17],["createDeclNameArgument",7],["() -> ",17],["DeclNameArgument",18,526]],"s":[["func",12],[" ",17],["createDeclNameArgument",7],["() -> ",17],["DeclNameArgument",18]]},{"p":["ExpressibleAsDeclNameArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeclNameArgument","createDeclNameArgumentList()"],"f":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18,587]],"s":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18]],"d":"Conformance to `ExpressibleAsDeclNameArgumentList`."},{"p":["ExpressibleAsFloatLiteralExpr","createFloatLiteralExpr()"],"f":[["func",12],[" ",17],["createFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExpr",18,527]],"s":[["func",12],[" ",17],["createFloatLiteralExpr",7],["() -> ",17],["FloatLiteralExpr",18]]},{"p":["ExpressibleAsFloatLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsFunctionCallExpr","createFunctionCallExpr()"],"f":[["func",12],[" ",17],["createFunctionCallExpr",7],["() -> ",17],["FunctionCallExpr",18,528]],"s":[["func",12],[" ",17],["createFunctionCallExpr",7],["() -> ",17],["FunctionCallExpr",18]]},{"p":["ExpressibleAsFunctionCallExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsFunctionCallExpr","createCodeBlockItem()"],"f":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18,475]],"s":[["func",12],[" ",17],["createCodeBlockItem",7],["() -> ",17],["CodeBlockItem",18]],"d":"Conformance to `ExpressibleAsCodeBlockItem`."},{"p":["ExpressibleAsFunctionDeclName","createFunctionDeclName()"],"f":[["func",12],[" ",17],["createFunctionDeclName",7],["() -> ",17],["FunctionDeclName",18,529]],"s":[["func",12],[" ",17],["createFunctionDeclName",7],["() -> ",17],["FunctionDeclName",18]]},{"p":["ExpressibleAsFunctionDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericParameter","createGenericParameter()"],"f":[["func",12],[" ",17],["createGenericParameter",7],["() -> ",17],["GenericParameter",18,530]],"s":[["func",12],[" ",17],["createGenericParameter",7],["() -> ",17],["GenericParameter",18]]},{"p":["ExpressibleAsGenericParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericParameter","createGenericParameterList()"],"f":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18,588]],"s":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18]],"d":"Conformance to `ExpressibleAsGenericParameterList`."},{"p":["ExpressibleAsMemberAccessExpr","createMemberAccessExpr()"],"f":[["func",12],[" ",17],["createMemberAccessExpr",7],["() -> ",17],["MemberAccessExpr",18,531]],"s":[["func",12],[" ",17],["createMemberAccessExpr",7],["() -> ",17],["MemberAccessExpr",18]]},{"p":["ExpressibleAsMemberAccessExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsObjcSelectorExpr","createObjcSelectorExpr()"],"f":[["func",12],[" ",17],["createObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExpr",18,532]],"s":[["func",12],[" ",17],["createObjcSelectorExpr",7],["() -> ",17],["ObjcSelectorExpr",18]]},{"p":["ExpressibleAsObjcSelectorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPatternBuildable","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsPostfixUnaryExpr","createPostfixUnaryExpr()"],"f":[["func",12],[" ",17],["createPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExpr",18,533]],"s":[["func",12],[" ",17],["createPostfixUnaryExpr",7],["() -> ",17],["PostfixUnaryExpr",18]]},{"p":["ExpressibleAsPostfixUnaryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundWarningDecl","createPoundWarningDecl()"],"f":[["func",12],[" ",17],["createPoundWarningDecl",7],["() -> ",17],["PoundWarningDecl",18,534]],"s":[["func",12],[" ",17],["createPoundWarningDecl",7],["() -> ",17],["PoundWarningDecl",18]]},{"p":["ExpressibleAsPoundWarningDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsRegexLiteralExpr","createRegexLiteralExpr()"],"f":[["func",12],[" ",17],["createRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExpr",18,535]],"s":[["func",12],[" ",17],["createRegexLiteralExpr",7],["() -> ",17],["RegexLiteralExpr",18]]},{"p":["ExpressibleAsRegexLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTupleExprElement","createTupleExprElement()"],"f":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18,536]],"s":[["func",12],[" ",17],["createTupleExprElement",7],["() -> ",17],["TupleExprElement",18]]},{"p":["ExpressibleAsTupleExprElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTupleExprElement","createTupleExprElementList()"],"f":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18,592]],"s":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18]],"d":"Conformance to `ExpressibleAsTupleExprElementList`."},{"p":["ExpressibleAsTupleTypeElement","createTupleTypeElement()"],"f":[["func",12],[" ",17],["createTupleTypeElement",7],["() -> ",17],["TupleTypeElement",18,537]],"s":[["func",12],[" ",17],["createTupleTypeElement",7],["() -> ",17],["TupleTypeElement",18]]},{"p":["ExpressibleAsTupleTypeElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTupleTypeElement","createTupleTypeElementList()"],"f":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18,593]],"s":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18]],"d":"Conformance to `ExpressibleAsTupleTypeElementList`."},{"p":["AvailabilityVersionRestriction","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["AvailabilityVersionRestriction","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AvailabilityVersionRestriction` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AvailabilityVersionRestriction","createAvailabilityVersionRestriction()"],"f":[["func",12],[" ",17],["createAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestriction",18,635]],"s":[["func",12],[" ",17],["createAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestriction",18]],"d":"Conformance to `ExpressibleAsAvailabilityVersionRestriction`."},{"p":["ExpressibleAsAccessorParameter","createAccessorParameter()"],"f":[["func",12],[" ",17],["createAccessorParameter",7],["() -> ",17],["AccessorParameter",18,538]],"s":[["func",12],[" ",17],["createAccessorParameter",7],["() -> ",17],["AccessorParameter",18]]},{"p":["ExpressibleAsAccessorParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAvailabilityEntry","createAvailabilityEntry()"],"f":[["func",12],[" ",17],["createAvailabilityEntry",7],["() -> ",17],["AvailabilityEntry",18,539]],"s":[["func",12],[" ",17],["createAvailabilityEntry",7],["() -> ",17],["AvailabilityEntry",18]]},{"p":["ExpressibleAsAvailabilityEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCodeBlockItemList","createCodeBlockItemList()"],"f":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18,540]],"s":[["func",12],[" ",17],["createCodeBlockItemList",7],["() -> ",17],["CodeBlockItemList",18]]},{"p":["ExpressibleAsCodeBlockItemList","createCodeBlock()"],"f":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18,662]],"s":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18]],"d":"Conformance to `ExpressibleAsCodeBlock`."},{"p":["ExpressibleAsDeclNameArguments","createDeclNameArguments()"],"f":[["func",12],[" ",17],["createDeclNameArguments",7],["() -> ",17],["DeclNameArguments",18,541]],"s":[["func",12],[" ",17],["createDeclNameArguments",7],["() -> ",17],["DeclNameArguments",18]]},{"p":["ExpressibleAsDeclNameArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDeinitializerDecl","createDeinitializerDecl()"],"f":[["func",12],[" ",17],["createDeinitializerDecl",7],["() -> ",17],["DeinitializerDecl",18,542]],"s":[["func",12],[" ",17],["createDeinitializerDecl",7],["() -> ",17],["DeinitializerDecl",18]]},{"p":["ExpressibleAsDeinitializerDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsDictionaryElement","createDictionaryElement()"],"f":[["func",12],[" ",17],["createDictionaryElement",7],["() -> ",17],["DictionaryElement",18,543]],"s":[["func",12],[" ",17],["createDictionaryElement",7],["() -> ",17],["DictionaryElement",18]]},{"p":["ExpressibleAsDictionaryElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDictionaryElement","createDictionaryElementList()"],"f":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18,595]],"s":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18]],"d":"Conformance to `ExpressibleAsDictionaryElementList`."},{"p":["ExpressibleAsExpressionPattern","createExpressionPattern()"],"f":[["func",12],[" ",17],["createExpressionPattern",7],["() -> ",17],["ExpressionPattern",18,544]],"s":[["func",12],[" ",17],["createExpressionPattern",7],["() -> ",17],["ExpressionPattern",18]]},{"p":["ExpressibleAsExpressionPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsExpressionSegment","createExpressionSegment()"],"f":[["func",12],[" ",17],["createExpressionSegment",7],["() -> ",17],["ExpressionSegment",18,545]],"s":[["func",12],[" ",17],["createExpressionSegment",7],["() -> ",17],["ExpressionSegment",18]]},{"p":["ExpressibleAsExpressionSegment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsFunctionParameter","createFunctionParameter()"],"f":[["func",12],[" ",17],["createFunctionParameter",7],["() -> ",17],["FunctionParameter",18,546]],"s":[["func",12],[" ",17],["createFunctionParameter",7],["() -> ",17],["FunctionParameter",18]]},{"p":["ExpressibleAsFunctionParameter","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsFunctionParameter","createFunctionParameterList()"],"f":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18,598]],"s":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18]],"d":"Conformance to `ExpressibleAsFunctionParameterList`."},{"p":["ExpressibleAsFunctionSignature","createFunctionSignature()"],"f":[["func",12],[" ",17],["createFunctionSignature",7],["() -> ",17],["FunctionSignature",18,547]],"s":[["func",12],[" ",17],["createFunctionSignature",7],["() -> ",17],["FunctionSignature",18]]},{"p":["ExpressibleAsFunctionSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsIdentifierPattern","createIdentifierPattern()"],"f":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18,548]],"s":[["func",12],[" ",17],["createIdentifierPattern",7],["() -> ",17],["IdentifierPattern",18]]},{"p":["ExpressibleAsIdentifierPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsInheritedTypeList","createInheritedTypeList()"],"f":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18,549]],"s":[["func",12],[" ",17],["createInheritedTypeList",7],["() -> ",17],["InheritedTypeList",18]]},{"p":["ExpressibleAsInitializerClause","createInitializerClause()"],"f":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18,550]],"s":[["func",12],[" ",17],["createInitializerClause",7],["() -> ",17],["InitializerClause",18]]},{"p":["ExpressibleAsInitializerClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsNonEmptyTokenList","createNonEmptyTokenList()"],"f":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18,551]],"s":[["func",12],[" ",17],["createNonEmptyTokenList",7],["() -> ",17],["NonEmptyTokenList",18]]},{"p":["ExpressibleAsObjCSelectorPiece","createObjCSelectorPiece()"],"f":[["func",12],[" ",17],["createObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPiece",18,552]],"s":[["func",12],[" ",17],["createObjCSelectorPiece",7],["() -> ",17],["ObjCSelectorPiece",18]]},{"p":["ExpressibleAsObjCSelectorPiece","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsObjCSelectorPiece","createObjCSelector()"],"f":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18,461]],"s":[["func",12],[" ",17],["createObjCSelector",7],["() -> ",17],["ObjCSelector",18]],"d":"Conformance to `ExpressibleAsObjCSelector`."},{"p":["ExpressibleAsObjectLiteralExpr","createObjectLiteralExpr()"],"f":[["func",12],[" ",17],["createObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExpr",18,553]],"s":[["func",12],[" ",17],["createObjectLiteralExpr",7],["() -> ",17],["ObjectLiteralExpr",18]]},{"p":["ExpressibleAsObjectLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundFilePathExpr","createPoundFilePathExpr()"],"f":[["func",12],[" ",17],["createPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExpr",18,554]],"s":[["func",12],[" ",17],["createPoundFilePathExpr",7],["() -> ",17],["PoundFilePathExpr",18]]},{"p":["ExpressibleAsPoundFilePathExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundFunctionExpr","createPoundFunctionExpr()"],"f":[["func",12],[" ",17],["createPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExpr",18,555]],"s":[["func",12],[" ",17],["createPoundFunctionExpr",7],["() -> ",17],["PoundFunctionExpr",18]]},{"p":["ExpressibleAsPoundFunctionExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsQualifiedDeclName","createQualifiedDeclName()"],"f":[["func",12],[" ",17],["createQualifiedDeclName",7],["() -> ",17],["QualifiedDeclName",18,556]],"s":[["func",12],[" ",17],["createQualifiedDeclName",7],["() -> ",17],["QualifiedDeclName",18]]},{"p":["ExpressibleAsQualifiedDeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsStringLiteralExpr","createStringLiteralExpr()"],"f":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18,557]],"s":[["func",12],[" ",17],["createStringLiteralExpr",7],["() -> ",17],["StringLiteralExpr",18]]},{"p":["ExpressibleAsStringLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["MultipleTrailingClosureElement","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["MultipleTrailingClosureElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MultipleTrailingClosureElement` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MultipleTrailingClosureElement","createMultipleTrailingClosureElement()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElement",18,636]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElement",18]],"d":"Conformance to `ExpressibleAsMultipleTrailingClosureElement`."},{"p":["ExpressibleAsAssociatedtypeDecl","createAssociatedtypeDecl()"],"f":[["func",12],[" ",17],["createAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDecl",18,558]],"s":[["func",12],[" ",17],["createAssociatedtypeDecl",7],["() -> ",17],["AssociatedtypeDecl",18]]},{"p":["ExpressibleAsAssociatedtypeDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsBinaryOperatorExpr","createBinaryOperatorExpr()"],"f":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18,559]],"s":[["func",12],[" ",17],["createBinaryOperatorExpr",7],["() -> ",17],["BinaryOperatorExpr",18]]},{"p":["ExpressibleAsBinaryOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsBooleanLiteralExpr","createBooleanLiteralExpr()"],"f":[["func",12],[" ",17],["createBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExpr",18,560]],"s":[["func",12],[" ",17],["createBooleanLiteralExpr",7],["() -> ",17],["BooleanLiteralExpr",18]]},{"p":["ExpressibleAsBooleanLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsClosureCaptureItem","createClosureCaptureItem()"],"f":[["func",12],[" ",17],["createClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItem",18,561]],"s":[["func",12],[" ",17],["createClosureCaptureItem",7],["() -> ",17],["ClosureCaptureItem",18]]},{"p":["ExpressibleAsClosureCaptureItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsClosureCaptureItem","createClosureCaptureItemList()"],"f":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18,606]],"s":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18]],"d":"Conformance to `ExpressibleAsClosureCaptureItemList`."},{"p":["ExpressibleAsElseIfContinuation","createElseIfContinuation()"],"f":[["func",12],[" ",17],["createElseIfContinuation",7],["() -> ",17],["ElseIfContinuation",18,562]],"s":[["func",12],[" ",17],["createElseIfContinuation",7],["() -> ",17],["ElseIfContinuation",18]]},{"p":["ExpressibleAsElseIfContinuation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericRequirement","createGenericRequirement()"],"f":[["func",12],[" ",17],["createGenericRequirement",7],["() -> ",17],["GenericRequirement",18,563]],"s":[["func",12],[" ",17],["createGenericRequirement",7],["() -> ",17],["GenericRequirement",18]]},{"p":["ExpressibleAsGenericRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericRequirement","createGenericRequirementList()"],"f":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18,611]],"s":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18]],"d":"Conformance to `ExpressibleAsGenericRequirementList`."},{"p":["ExpressibleAsGenericWhereClause","createGenericWhereClause()"],"f":[["func",12],[" ",17],["createGenericWhereClause",7],["() -> ",17],["GenericWhereClause",18,564]],"s":[["func",12],[" ",17],["createGenericWhereClause",7],["() -> ",17],["GenericWhereClause",18]]},{"p":["ExpressibleAsGenericWhereClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsIfConfigClauseList","createIfConfigClauseList()"],"f":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18,565]],"s":[["func",12],[" ",17],["createIfConfigClauseList",7],["() -> ",17],["IfConfigClauseList",18]]},{"p":["ExpressibleAsIntegerLiteralExpr","createIntegerLiteralExpr()"],"f":[["func",12],[" ",17],["createIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExpr",18,566]],"s":[["func",12],[" ",17],["createIntegerLiteralExpr",7],["() -> ",17],["IntegerLiteralExpr",18]]},{"p":["ExpressibleAsIntegerLiteralExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsMemberDeclListItem","createMemberDeclListItem()"],"f":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18,567]],"s":[["func",12],[" ",17],["createMemberDeclListItem",7],["() -> ",17],["MemberDeclListItem",18]]},{"p":["ExpressibleAsMemberDeclListItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMemberDeclListItem","createMemberDeclList()"],"f":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18,494]],"s":[["func",12],[" ",17],["createMemberDeclList",7],["() -> ",17],["MemberDeclList",18]],"d":"Conformance to `ExpressibleAsMemberDeclList`."},{"p":["ExpressibleAsPatternBindingList","createPatternBindingList()"],"f":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18,568]],"s":[["func",12],[" ",17],["createPatternBindingList",7],["() -> ",17],["PatternBindingList",18]]},{"p":["ExpressibleAsPoundDsohandleExpr","createPoundDsohandleExpr()"],"f":[["func",12],[" ",17],["createPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExpr",18,569]],"s":[["func",12],[" ",17],["createPoundDsohandleExpr",7],["() -> ",17],["PoundDsohandleExpr",18]]},{"p":["ExpressibleAsPoundDsohandleExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPrefixOperatorExpr","createPrefixOperatorExpr()"],"f":[["func",12],[" ",17],["createPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExpr",18,570]],"s":[["func",12],[" ",17],["createPrefixOperatorExpr",7],["() -> ",17],["PrefixOperatorExpr",18]]},{"p":["ExpressibleAsPrefixOperatorExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsSwitchDefaultLabel","createSwitchDefaultLabel()"],"f":[["func",12],[" ",17],["createSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabel",18,571]],"s":[["func",12],[" ",17],["createSwitchDefaultLabel",7],["() -> ",17],["SwitchDefaultLabel",18]]},{"p":["ExpressibleAsSwitchDefaultLabel","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ImplicitlyUnwrappedOptionalType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["ImplicitlyUnwrappedOptionalType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ImplicitlyUnwrappedOptionalType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ImplicitlyUnwrappedOptionalType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`ImplicitlyUnwrappedOptionalType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ImplicitlyUnwrappedOptionalType","createImplicitlyUnwrappedOptionalType()"],"f":[["func",12],[" ",17],["createImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalType",18,637]],"s":[["func",12],[" ",17],["createImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalType",18]],"d":"Conformance to `ExpressibleAsImplicitlyUnwrappedOptionalType`."},{"p":["DifferentiableAttributeArguments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DifferentiableAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DifferentiableAttributeArguments` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DifferentiableAttributeArguments","createDifferentiableAttributeArguments()"],"f":[["func",12],[" ",17],["createDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArguments",18,638]],"s":[["func",12],[" ",17],["createDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArguments",18]],"d":"Conformance to `ExpressibleAsDifferentiableAttributeArguments`."},{"p":["ExpressibleAsAccessLevelModifier","createAccessLevelModifier()"],"f":[["func",12],[" ",17],["createAccessLevelModifier",7],["() -> ",17],["AccessLevelModifier",18,572]],"s":[["func",12],[" ",17],["createAccessLevelModifier",7],["() -> ",17],["AccessLevelModifier",18]]},{"p":["ExpressibleAsAccessLevelModifier","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAccessPathComponent","createAccessPathComponent()"],"f":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18,573]],"s":[["func",12],[" ",17],["createAccessPathComponent",7],["() -> ",17],["AccessPathComponent",18]]},{"p":["ExpressibleAsAccessPathComponent","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAccessPathComponent","createAccessPath()"],"f":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18,436]],"s":[["func",12],[" ",17],["createAccessPath",7],["() -> ",17],["AccessPath",18]],"d":"Conformance to `ExpressibleAsAccessPath`."},{"p":["ExpressibleAsEnumCaseElementList","createEnumCaseElementList()"],"f":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18,574]],"s":[["func",12],[" ",17],["createEnumCaseElementList",7],["() -> ",17],["EnumCaseElementList",18]]},{"p":["ExpressibleAsGenericArgumentList","createGenericArgumentList()"],"f":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18,575]],"s":[["func",12],[" ",17],["createGenericArgumentList",7],["() -> ",17],["GenericArgumentList",18]]},{"p":["ExpressibleAsPostfixIfConfigExpr","createPostfixIfConfigExpr()"],"f":[["func",12],[" ",17],["createPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExpr",18,576]],"s":[["func",12],[" ",17],["createPostfixIfConfigExpr",7],["() -> ",17],["PostfixIfConfigExpr",18]]},{"p":["ExpressibleAsPostfixIfConfigExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsPoundSourceLocation","createPoundSourceLocation()"],"f":[["func",12],[" ",17],["createPoundSourceLocation",7],["() -> ",17],["PoundSourceLocation",18,577]],"s":[["func",12],[" ",17],["createPoundSourceLocation",7],["() -> ",17],["PoundSourceLocation",18]]},{"p":["ExpressibleAsPoundSourceLocation","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupDecl","createPrecedenceGroupDecl()"],"f":[["func",12],[" ",17],["createPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDecl",18,578]],"s":[["func",12],[" ",17],["createPrecedenceGroupDecl",7],["() -> ",17],["PrecedenceGroupDecl",18]]},{"p":["ExpressibleAsPrecedenceGroupDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]]},{"p":["ExpressibleAsSameTypeRequirement","createSameTypeRequirement()"],"f":[["func",12],[" ",17],["createSameTypeRequirement",7],["() -> ",17],["SameTypeRequirement",18,579]],"s":[["func",12],[" ",17],["createSameTypeRequirement",7],["() -> ",17],["SameTypeRequirement",18]]},{"p":["ExpressibleAsSameTypeRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTargetFunctionEntry","createTargetFunctionEntry()"],"f":[["func",12],[" ",17],["createTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntry",18,580]],"s":[["func",12],[" ",17],["createTargetFunctionEntry",7],["() -> ",17],["TargetFunctionEntry",18]]},{"p":["ExpressibleAsTargetFunctionEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTuplePatternElement","createTuplePatternElement()"],"f":[["func",12],[" ",17],["createTuplePatternElement",7],["() -> ",17],["TuplePatternElement",18,581]],"s":[["func",12],[" ",17],["createTuplePatternElement",7],["() -> ",17],["TuplePatternElement",18]]},{"p":["ExpressibleAsTuplePatternElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTuplePatternElement","createTuplePatternElementList()"],"f":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18,618]],"s":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18]],"d":"Conformance to `ExpressibleAsTuplePatternElementList`."},{"p":["ExpressibleAsValueBindingPattern","createValueBindingPattern()"],"f":[["func",12],[" ",17],["createValueBindingPattern",7],["() -> ",17],["ValueBindingPattern",18,582]],"s":[["func",12],[" ",17],["createValueBindingPattern",7],["() -> ",17],["ValueBindingPattern",18]]},{"p":["ExpressibleAsValueBindingPattern","createPatternBuildable()"],"f":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18,147]],"s":[["func",12],[" ",17],["createPatternBuildable",7],["() -> ",17],["PatternBuildable",18]]},{"p":["ExpressibleAsAvailabilityArgument","createAvailabilityArgument()"],"f":[["func",12],[" ",17],["createAvailabilityArgument",7],["() -> ",17],["AvailabilityArgument",18,583]],"s":[["func",12],[" ",17],["createAvailabilityArgument",7],["() -> ",17],["AvailabilityArgument",18]]},{"p":["ExpressibleAsAvailabilityArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAvailabilityArgument","createAvailabilitySpecList()"],"f":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18,584]],"s":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18]],"d":"Conformance to `ExpressibleAsAvailabilitySpecList`."},{"p":["ExpressibleAsAvailabilitySpecList","createAvailabilitySpecList()"],"f":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18,584]],"s":[["func",12],[" ",17],["createAvailabilitySpecList",7],["() -> ",17],["AvailabilitySpecList",18]]},{"p":["ExpressibleAsClassRestrictionType","createClassRestrictionType()"],"f":[["func",12],[" ",17],["createClassRestrictionType",7],["() -> ",17],["ClassRestrictionType",18,585]],"s":[["func",12],[" ",17],["createClassRestrictionType",7],["() -> ",17],["ClassRestrictionType",18]]},{"p":["ExpressibleAsClassRestrictionType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsConditionElementList","createConditionElementList()"],"f":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18,586]],"s":[["func",12],[" ",17],["createConditionElementList",7],["() -> ",17],["ConditionElementList",18]]},{"p":["ExpressibleAsDeclNameArgumentList","createDeclNameArgumentList()"],"f":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18,587]],"s":[["func",12],[" ",17],["createDeclNameArgumentList",7],["() -> ",17],["DeclNameArgumentList",18]]},{"p":["ExpressibleAsGenericParameterList","createGenericParameterList()"],"f":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18,588]],"s":[["func",12],[" ",17],["createGenericParameterList",7],["() -> ",17],["GenericParameterList",18]]},{"p":["ExpressibleAsMemberTypeIdentifier","createMemberTypeIdentifier()"],"f":[["func",12],[" ",17],["createMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifier",18,589]],"s":[["func",12],[" ",17],["createMemberTypeIdentifier",7],["() -> ",17],["MemberTypeIdentifier",18]]},{"p":["ExpressibleAsMemberTypeIdentifier","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsOptionalChainingExpr","createOptionalChainingExpr()"],"f":[["func",12],[" ",17],["createOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExpr",18,590]],"s":[["func",12],[" ",17],["createOptionalChainingExpr",7],["() -> ",17],["OptionalChainingExpr",18]]},{"p":["ExpressibleAsOptionalChainingExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsSimpleTypeIdentifier","createSimpleTypeIdentifier()"],"f":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18,591]],"s":[["func",12],[" ",17],["createSimpleTypeIdentifier",7],["() -> ",17],["SimpleTypeIdentifier",18]]},{"p":["ExpressibleAsSimpleTypeIdentifier","createTypeAnnotation()"],"f":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18,500]],"s":[["func",12],[" ",17],["createTypeAnnotation",7],["() -> ",17],["TypeAnnotation",18]],"d":"Conformance to `ExpressibleAsTypeAnnotation`."},{"p":["ExpressibleAsSimpleTypeIdentifier","createTypeExpr()"],"f":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18,653]],"s":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18]],"d":"Conformance to `ExpressibleAsTypeExpr`."},{"p":["ExpressibleAsSimpleTypeIdentifier","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsTupleExprElementList","createTupleExprElementList()"],"f":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18,592]],"s":[["func",12],[" ",17],["createTupleExprElementList",7],["() -> ",17],["TupleExprElementList",18]]},{"p":["ExpressibleAsTupleTypeElementList","createTupleTypeElementList()"],"f":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18,593]],"s":[["func",12],[" ",17],["createTupleTypeElementList",7],["() -> ",17],["TupleTypeElementList",18]]},{"p":["ExpressibleAsAvailabilityCondition","createAvailabilityCondition()"],"f":[["func",12],[" ",17],["createAvailabilityCondition",7],["() -> ",17],["AvailabilityCondition",18,594]],"s":[["func",12],[" ",17],["createAvailabilityCondition",7],["() -> ",17],["AvailabilityCondition",18]]},{"p":["ExpressibleAsAvailabilityCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDictionaryElementList","createDictionaryElementList()"],"f":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18,595]],"s":[["func",12],[" ",17],["createDictionaryElementList",7],["() -> ",17],["DictionaryElementList",18]]},{"p":["ExpressibleAsDiscardAssignmentExpr","createDiscardAssignmentExpr()"],"f":[["func",12],[" ",17],["createDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExpr",18,596]],"s":[["func",12],[" ",17],["createDiscardAssignmentExpr",7],["() -> ",17],["DiscardAssignmentExpr",18]]},{"p":["ExpressibleAsDiscardAssignmentExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsEditorPlaceholderExpr","createEditorPlaceholderExpr()"],"f":[["func",12],[" ",17],["createEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExpr",18,597]],"s":[["func",12],[" ",17],["createEditorPlaceholderExpr",7],["() -> ",17],["EditorPlaceholderExpr",18]]},{"p":["ExpressibleAsEditorPlaceholderExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsFunctionParameterList","createFunctionParameterList()"],"f":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18,598]],"s":[["func",12],[" ",17],["createFunctionParameterList",7],["() -> ",17],["FunctionParameterList",18]]},{"p":["ExpressibleAsGenericArgumentClause","createGenericArgumentClause()"],"f":[["func",12],[" ",17],["createGenericArgumentClause",7],["() -> ",17],["GenericArgumentClause",18,599]],"s":[["func",12],[" ",17],["createGenericArgumentClause",7],["() -> ",17],["GenericArgumentClause",18]]},{"p":["ExpressibleAsGenericArgumentClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrimaryAssociatedType","createPrimaryAssociatedType()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedType",18,600]],"s":[["func",12],[" ",17],["createPrimaryAssociatedType",7],["() -> ",17],["PrimaryAssociatedType",18]]},{"p":["ExpressibleAsPrimaryAssociatedType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrimaryAssociatedType","createPrimaryAssociatedTypeList()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18,623]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18]],"d":"Conformance to `ExpressibleAsPrimaryAssociatedTypeList`."},{"p":["ExpressibleAsStringLiteralSegments","createStringLiteralSegments()"],"f":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18,601]],"s":[["func",12],[" ",17],["createStringLiteralSegments",7],["() -> ",17],["StringLiteralSegments",18]]},{"p":["ExpressibleAsSymbolicReferenceExpr","createSymbolicReferenceExpr()"],"f":[["func",12],[" ",17],["createSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExpr",18,602]],"s":[["func",12],[" ",17],["createSymbolicReferenceExpr",7],["() -> ",17],["SymbolicReferenceExpr",18]]},{"p":["ExpressibleAsSymbolicReferenceExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["ExpressibleAsTypeInheritanceClause","createTypeInheritanceClause()"],"f":[["func",12],[" ",17],["createTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClause",18,603]],"s":[["func",12],[" ",17],["createTypeInheritanceClause",7],["() -> ",17],["TypeInheritanceClause",18]]},{"p":["ExpressibleAsTypeInheritanceClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTypeInitializerClause","createTypeInitializerClause()"],"f":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18,604]],"s":[["func",12],[" ",17],["createTypeInitializerClause",7],["() -> ",17],["TypeInitializerClause",18]]},{"p":["ExpressibleAsTypeInitializerClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsUnresolvedPatternExpr","createUnresolvedPatternExpr()"],"f":[["func",12],[" ",17],["createUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExpr",18,605]],"s":[["func",12],[" ",17],["createUnresolvedPatternExpr",7],["() -> ",17],["UnresolvedPatternExpr",18]]},{"p":["ExpressibleAsUnresolvedPatternExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]]},{"p":["MultipleTrailingClosureElementList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["MultipleTrailingClosureElementList","buildMultipleTrailingClosureElementList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildMultipleTrailingClosureElementList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["MultipleTrailingClosureElementListSyntax",18,2969]],"s":[["func",12],[" ",17],["buildMultipleTrailingClosureElementList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["MultipleTrailingClosureElementListSyntax",18]]},{"p":["MultipleTrailingClosureElementList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`MultipleTrailingClosureElementList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["MultipleTrailingClosureElementList","createMultipleTrailingClosureElementList()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18,639]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18]],"d":"Conformance to `ExpressibleAsMultipleTrailingClosureElementList`."},{"p":["ExpressibleAsClosureCaptureItemList","createClosureCaptureItemList()"],"f":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18,606]],"s":[["func",12],[" ",17],["createClosureCaptureItemList",7],["() -> ",17],["ClosureCaptureItemList",18]]},{"p":["ExpressibleAsCompositionTypeElement","createCompositionTypeElement()"],"f":[["func",12],[" ",17],["createCompositionTypeElement",7],["() -> ",17],["CompositionTypeElement",18,607]],"s":[["func",12],[" ",17],["createCompositionTypeElement",7],["() -> ",17],["CompositionTypeElement",18]]},{"p":["ExpressibleAsCompositionTypeElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsCompositionTypeElement","createCompositionTypeElementList()"],"f":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18,624]],"s":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18]],"d":"Conformance to `ExpressibleAsCompositionTypeElementList`."},{"p":["ExpressibleAsConformanceRequirement","createConformanceRequirement()"],"f":[["func",12],[" ",17],["createConformanceRequirement",7],["() -> ",17],["ConformanceRequirement",18,608]],"s":[["func",12],[" ",17],["createConformanceRequirement",7],["() -> ",17],["ConformanceRequirement",18]]},{"p":["ExpressibleAsConformanceRequirement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDifferentiabilityParam","createDifferentiabilityParam()"],"f":[["func",12],[" ",17],["createDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParam",18,609]],"s":[["func",12],[" ",17],["createDifferentiabilityParam",7],["() -> ",17],["DifferentiabilityParam",18]]},{"p":["ExpressibleAsDifferentiabilityParam","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDifferentiabilityParam","createDifferentiabilityParamList()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18,625]],"s":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18]],"d":"Conformance to `ExpressibleAsDifferentiabilityParamList`."},{"p":["ExpressibleAsGenericParameterClause","createGenericParameterClause()"],"f":[["func",12],[" ",17],["createGenericParameterClause",7],["() -> ",17],["GenericParameterClause",18,610]],"s":[["func",12],[" ",17],["createGenericParameterClause",7],["() -> ",17],["GenericParameterClause",18]]},{"p":["ExpressibleAsGenericParameterClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsGenericRequirementList","createGenericRequirementList()"],"f":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18,611]],"s":[["func",12],[" ",17],["createGenericRequirementList",7],["() -> ",17],["GenericRequirementList",18]]},{"p":["ExpressibleAsLabeledSpecializeEntry","createLabeledSpecializeEntry()"],"f":[["func",12],[" ",17],["createLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntry",18,612]],"s":[["func",12],[" ",17],["createLabeledSpecializeEntry",7],["() -> ",17],["LabeledSpecializeEntry",18]]},{"p":["ExpressibleAsLabeledSpecializeEntry","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsClosureCaptureSignature","createClosureCaptureSignature()"],"f":[["func",12],[" ",17],["createClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignature",18,613]],"s":[["func",12],[" ",17],["createClosureCaptureSignature",7],["() -> ",17],["ClosureCaptureSignature",18]]},{"p":["ExpressibleAsClosureCaptureSignature","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsDifferentiabilityParams","createDifferentiabilityParams()"],"f":[["func",12],[" ",17],["createDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParams",18,614]],"s":[["func",12],[" ",17],["createDifferentiabilityParams",7],["() -> ",17],["DifferentiabilityParams",18]]},{"p":["ExpressibleAsDifferentiabilityParams","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPoundSourceLocationArgs","createPoundSourceLocationArgs()"],"f":[["func",12],[" ",17],["createPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgs",18,615]],"s":[["func",12],[" ",17],["createPoundSourceLocationArgs",7],["() -> ",17],["PoundSourceLocationArgs",18]]},{"p":["ExpressibleAsPoundSourceLocationArgs","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupNameList","createPrecedenceGroupNameList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18,616]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18]]},{"p":["ExpressibleAsPrecedenceGroupRelation","createPrecedenceGroupRelation()"],"f":[["func",12],[" ",17],["createPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelation",18,617]],"s":[["func",12],[" ",17],["createPrecedenceGroupRelation",7],["() -> ",17],["PrecedenceGroupRelation",18]]},{"p":["ExpressibleAsPrecedenceGroupRelation","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsTuplePatternElementList","createTuplePatternElementList()"],"f":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18,618]],"s":[["func",12],[" ",17],["createTuplePatternElementList",7],["() -> ",17],["TuplePatternElementList",18]]},{"p":["ExpressibleAsUnavailabilityCondition","createUnavailabilityCondition()"],"f":[["func",12],[" ",17],["createUnavailabilityCondition",7],["() -> ",17],["UnavailabilityCondition",18,619]],"s":[["func",12],[" ",17],["createUnavailabilityCondition",7],["() -> ",17],["UnavailabilityCondition",18]]},{"p":["ExpressibleAsUnavailabilityCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMatchingPatternCondition","createMatchingPatternCondition()"],"f":[["func",12],[" ",17],["createMatchingPatternCondition",7],["() -> ",17],["MatchingPatternCondition",18,620]],"s":[["func",12],[" ",17],["createMatchingPatternCondition",7],["() -> ",17],["MatchingPatternCondition",18]]},{"p":["ExpressibleAsMatchingPatternCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsOptionalBindingCondition","createOptionalBindingCondition()"],"f":[["func",12],[" ",17],["createOptionalBindingCondition",7],["() -> ",17],["OptionalBindingCondition",18,621]],"s":[["func",12],[" ",17],["createOptionalBindingCondition",7],["() -> ",17],["OptionalBindingCondition",18]]},{"p":["ExpressibleAsOptionalBindingCondition","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupAssignment","createPrecedenceGroupAssignment()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignment",18,622]],"s":[["func",12],[" ",17],["createPrecedenceGroupAssignment",7],["() -> ",17],["PrecedenceGroupAssignment",18]]},{"p":["ExpressibleAsPrecedenceGroupAssignment","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrimaryAssociatedTypeList","createPrimaryAssociatedTypeList()"],"f":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18,623]],"s":[["func",12],[" ",17],["createPrimaryAssociatedTypeList",7],["() -> ",17],["PrimaryAssociatedTypeList",18]]},{"p":["ExpressibleAsCompositionTypeElementList","createCompositionTypeElementList()"],"f":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18,624]],"s":[["func",12],[" ",17],["createCompositionTypeElementList",7],["() -> ",17],["CompositionTypeElementList",18]]},{"p":["ExpressibleAsDifferentiabilityParamList","createDifferentiabilityParamList()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18,625]],"s":[["func",12],[" ",17],["createDifferentiabilityParamList",7],["() -> ",17],["DifferentiabilityParamList",18]]},{"p":["ExpressibleAsOperatorPrecedenceAndTypes","createOperatorPrecedenceAndTypes()"],"f":[["func",12],[" ",17],["createOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypes",18,626]],"s":[["func",12],[" ",17],["createOperatorPrecedenceAndTypes",7],["() -> ",17],["OperatorPrecedenceAndTypes",18]]},{"p":["ExpressibleAsOperatorPrecedenceAndTypes","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupNameElement","createPrecedenceGroupNameElement()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElement",18,627]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameElement",7],["() -> ",17],["PrecedenceGroupNameElement",18]]},{"p":["ExpressibleAsPrecedenceGroupNameElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupNameElement","createPrecedenceGroupNameList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18,616]],"s":[["func",12],[" ",17],["createPrecedenceGroupNameList",7],["() -> ",17],["PrecedenceGroupNameList",18]],"d":"Conformance to `ExpressibleAsPrecedenceGroupNameList`."},{"p":["DerivativeRegistrationAttributeArguments","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DerivativeRegistrationAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DerivativeRegistrationAttributeArguments` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DerivativeRegistrationAttributeArguments","createDerivativeRegistrationAttributeArguments()"],"f":[["func",12],[" ",17],["createDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArguments",18,640]],"s":[["func",12],[" ",17],["createDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArguments",18]],"d":"Conformance to `ExpressibleAsDerivativeRegistrationAttributeArguments`."},{"p":["ExpressibleAsAvailabilityLabeledArgument","createAvailabilityLabeledArgument()"],"f":[["func",12],[" ",17],["createAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgument",18,628]],"s":[["func",12],[" ",17],["createAvailabilityLabeledArgument",7],["() -> ",17],["AvailabilityLabeledArgument",18]]},{"p":["ExpressibleAsAvailabilityLabeledArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsSpecializeAttributeSpecList","createSpecializeAttributeSpecList()"],"f":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18,629]],"s":[["func",12],[" ",17],["createSpecializeAttributeSpecList",7],["() -> ",17],["SpecializeAttributeSpecList",18]]},{"p":["ExpressibleAsImplementsAttributeArguments","createImplementsAttributeArguments()"],"f":[["func",12],[" ",17],["createImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArguments",18,630]],"s":[["func",12],[" ",17],["createImplementsAttributeArguments",7],["() -> ",17],["ImplementsAttributeArguments",18]]},{"p":["ExpressibleAsImplementsAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsNamedAttributeStringArgument","createNamedAttributeStringArgument()"],"f":[["func",12],[" ",17],["createNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgument",18,631]],"s":[["func",12],[" ",17],["createNamedAttributeStringArgument",7],["() -> ",17],["NamedAttributeStringArgument",18]]},{"p":["ExpressibleAsNamedAttributeStringArgument","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupAssociativity","createPrecedenceGroupAssociativity()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativity",18,632]],"s":[["func",12],[" ",17],["createPrecedenceGroupAssociativity",7],["() -> ",17],["PrecedenceGroupAssociativity",18]]},{"p":["ExpressibleAsPrecedenceGroupAssociativity","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsPrecedenceGroupAttributeList","createPrecedenceGroupAttributeList()"],"f":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18,633]],"s":[["func",12],[" ",17],["createPrecedenceGroupAttributeList",7],["() -> ",17],["PrecedenceGroupAttributeList",18]]},{"p":["ExpressibleAsDifferentiabilityParamsClause","createDifferentiabilityParamsClause()"],"f":[["func",12],[" ",17],["createDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClause",18,634]],"s":[["func",12],[" ",17],["createDifferentiabilityParamsClause",7],["() -> ",17],["DifferentiabilityParamsClause",18]]},{"p":["ExpressibleAsDifferentiabilityParamsClause","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsAvailabilityVersionRestriction","createAvailabilityVersionRestriction()"],"f":[["func",12],[" ",17],["createAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestriction",18,635]],"s":[["func",12],[" ",17],["createAvailabilityVersionRestriction",7],["() -> ",17],["AvailabilityVersionRestriction",18]]},{"p":["ExpressibleAsAvailabilityVersionRestriction","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMultipleTrailingClosureElement","createMultipleTrailingClosureElement()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElement",18,636]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElement",7],["() -> ",17],["MultipleTrailingClosureElement",18]]},{"p":["ExpressibleAsMultipleTrailingClosureElement","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMultipleTrailingClosureElement","createMultipleTrailingClosureElementList()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18,639]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18]],"d":"Conformance to `ExpressibleAsMultipleTrailingClosureElementList`."},{"p":["ExpressibleAsImplicitlyUnwrappedOptionalType","createImplicitlyUnwrappedOptionalType()"],"f":[["func",12],[" ",17],["createImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalType",18,637]],"s":[["func",12],[" ",17],["createImplicitlyUnwrappedOptionalType",7],["() -> ",17],["ImplicitlyUnwrappedOptionalType",18]]},{"p":["ExpressibleAsImplicitlyUnwrappedOptionalType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]]},{"p":["ExpressibleAsDifferentiableAttributeArguments","createDifferentiableAttributeArguments()"],"f":[["func",12],[" ",17],["createDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArguments",18,638]],"s":[["func",12],[" ",17],["createDifferentiableAttributeArguments",7],["() -> ",17],["DifferentiableAttributeArguments",18]]},{"p":["ExpressibleAsDifferentiableAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["ExpressibleAsMultipleTrailingClosureElementList","createMultipleTrailingClosureElementList()"],"f":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18,639]],"s":[["func",12],[" ",17],["createMultipleTrailingClosureElementList",7],["() -> ",17],["MultipleTrailingClosureElementList",18]]},{"p":["ExpressibleAsDerivativeRegistrationAttributeArguments","createDerivativeRegistrationAttributeArguments()"],"f":[["func",12],[" ",17],["createDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArguments",18,640]],"s":[["func",12],[" ",17],["createDerivativeRegistrationAttributeArguments",7],["() -> ",17],["DerivativeRegistrationAttributeArguments",18]]},{"p":["ExpressibleAsDerivativeRegistrationAttributeArguments","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]]},{"p":["AsExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["AsExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AsExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AsExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`AsExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AsExpr","createAsExpr()"],"f":[["func",12],[" ",17],["createAsExpr",7],["() -> ",17],["AsExpr",18,641]],"s":[["func",12],[" ",17],["createAsExpr",7],["() -> ",17],["AsExpr",18]],"d":"Conformance to `ExpressibleAsAsExpr`."},{"p":["DoStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["DoStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DoStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DoStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`DoStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DoStmt","createDoStmt()"],"f":[["func",12],[" ",17],["createDoStmt",7],["() -> ",17],["DoStmt",18,642]],"s":[["func",12],[" ",17],["createDoStmt",7],["() -> ",17],["DoStmt",18]],"d":"Conformance to `ExpressibleAsDoStmt`."},{"p":["IfStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["IfStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IfStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IfStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`IfStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IfStmt","createIfStmt()"],"f":[["func",12],[" ",17],["createIfStmt",7],["() -> ",17],["IfStmt",18,644]],"s":[["func",12],[" ",17],["createIfStmt",7],["() -> ",17],["IfStmt",18]],"d":"Conformance to `ExpressibleAsIfStmt`."},{"p":["IsExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["IsExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`IsExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IsExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`IsExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["IsExpr","createIsExpr()"],"f":[["func",12],[" ",17],["createIsExpr",7],["() -> ",17],["IsExpr",18,645]],"s":[["func",12],[" ",17],["createIsExpr",7],["() -> ",17],["IsExpr",18]],"d":"Conformance to `ExpressibleAsIsExpr`."},{"p":["TryExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["TryExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TryExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TryExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`TryExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TryExpr","createTryExpr()"],"f":[["func",12],[" ",17],["createTryExpr",7],["() -> ",17],["TryExpr",18,646]],"s":[["func",12],[" ",17],["createTryExpr",7],["() -> ",17],["TryExpr",18]],"d":"Conformance to `ExpressibleAsTryExpr`."},{"p":["CaseItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CaseItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CaseItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CaseItem","createCaseItem()"],"f":[["func",12],[" ",17],["createCaseItem",7],["() -> ",17],["CaseItem",18,647]],"s":[["func",12],[" ",17],["createCaseItem",7],["() -> ",17],["CaseItem",18]],"d":"Conformance to `ExpressibleAsCaseItem`."},{"p":["DeclName","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["DeclName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeclName` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeclName","createDeclName()"],"f":[["func",12],[" ",17],["createDeclName",7],["() -> ",17],["DeclName",18,648]],"s":[["func",12],[" ",17],["createDeclName",7],["() -> ",17],["DeclName",18]],"d":"Conformance to `ExpressibleAsDeclName`."},{"p":["EnumDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["EnumDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`EnumDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`EnumDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["EnumDecl","createEnumDecl()"],"f":[["func",12],[" ",17],["createEnumDecl",7],["() -> ",17],["EnumDecl",18,649]],"s":[["func",12],[" ",17],["createEnumDecl",7],["() -> ",17],["EnumDecl",18]],"d":"Conformance to `ExpressibleAsEnumDecl`."},{"p":["ExprList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ExprList","buildExprList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprListSyntax",18,2976]],"s":[["func",12],[" ",17],["buildExprList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprListSyntax",18]]},{"p":["ExprList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ExprList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ExprList","createExprList()"],"f":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18,650]],"s":[["func",12],[" ",17],["createExprList",7],["() -> ",17],["ExprList",18]],"d":"Conformance to `ExpressibleAsExprList`."},{"p":["ObjcName","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["ObjcName","buildObjcName(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildObjcName",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ObjcNameSyntax",18,2977]],"s":[["func",12],[" ",17],["buildObjcName",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ObjcNameSyntax",18]]},{"p":["ObjcName","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ObjcName` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ObjcName","createObjcName()"],"f":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18,651]],"s":[["func",12],[" ",17],["createObjcName",7],["() -> ",17],["ObjcName",18]],"d":"Conformance to `ExpressibleAsObjcName`."},{"p":["SomeType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["SomeType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`SomeType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SomeType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`SomeType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["SomeType","createSomeType()"],"f":[["func",12],[" ",17],["createSomeType",7],["() -> ",17],["SomeType",18,652]],"s":[["func",12],[" ",17],["createSomeType",7],["() -> ",17],["SomeType",18]],"d":"Conformance to `ExpressibleAsSomeType`."},{"p":["TypeExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["TypeExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TypeExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypeExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`TypeExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TypeExpr","createTypeExpr()"],"f":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18,653]],"s":[["func",12],[" ",17],["createTypeExpr",7],["() -> ",17],["TypeExpr",18]],"d":"Conformance to `ExpressibleAsTypeExpr`."},{"p":["ArrayExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ArrayExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrayExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrayExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ArrayExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrayExpr","createArrayExpr()"],"f":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18,654]],"s":[["func",12],[" ",17],["createArrayExpr",7],["() -> ",17],["ArrayExpr",18]],"d":"Conformance to `ExpressibleAsArrayExpr`."},{"p":["ArrayType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["ArrayType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrayType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrayType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`ArrayType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrayType","createArrayType()"],"f":[["func",12],[" ",17],["createArrayType",7],["() -> ",17],["ArrayType",18,655]],"s":[["func",12],[" ",17],["createArrayType",7],["() -> ",17],["ArrayType",18]],"d":"Conformance to `ExpressibleAsArrayType`."},{"p":["ArrowExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["ArrowExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ArrowExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrowExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`ArrowExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ArrowExpr","createArrowExpr()"],"f":[["func",12],[" ",17],["createArrowExpr",7],["() -> ",17],["ArrowExpr",18,656]],"s":[["func",12],[" ",17],["createArrowExpr",7],["() -> ",17],["ArrowExpr",18]],"d":"Conformance to `ExpressibleAsArrowExpr`."},{"p":["Attribute","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["Attribute","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`Attribute` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["Attribute","createAttribute()"],"f":[["func",12],[" ",17],["createAttribute",7],["() -> ",17],["Attribute",18,657]],"s":[["func",12],[" ",17],["createAttribute",7],["() -> ",17],["Attribute",18]],"d":"Conformance to `ExpressibleAsAttribute`."},{"p":["AwaitExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["AwaitExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`AwaitExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AwaitExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`AwaitExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["AwaitExpr","createAwaitExpr()"],"f":[["func",12],[" ",17],["createAwaitExpr",7],["() -> ",17],["AwaitExpr",18,658]],"s":[["func",12],[" ",17],["createAwaitExpr",7],["() -> ",17],["AwaitExpr",18]],"d":"Conformance to `ExpressibleAsAwaitExpr`."},{"p":["BreakStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["BreakStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`BreakStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BreakStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`BreakStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["BreakStmt","createBreakStmt()"],"f":[["func",12],[" ",17],["createBreakStmt",7],["() -> ",17],["BreakStmt",18,659]],"s":[["func",12],[" ",17],["createBreakStmt",7],["() -> ",17],["BreakStmt",18]],"d":"Conformance to `ExpressibleAsBreakStmt`."},{"p":["CatchItem","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CatchItem","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CatchItem` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CatchItem","createCatchItem()"],"f":[["func",12],[" ",17],["createCatchItem",7],["() -> ",17],["CatchItem",18,660]],"s":[["func",12],[" ",17],["createCatchItem",7],["() -> ",17],["CatchItem",18]],"d":"Conformance to `ExpressibleAsCatchItem`."},{"p":["ClassDecl","buildDecl(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["DeclSyntax",18,2970]],"s":[["func",12],[" ",17],["buildDecl",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["DeclSyntax",18]],"d":"Conformance to `DeclBuildable`."},{"p":["ClassDecl","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ClassDecl` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClassDecl","createDeclBuildable()"],"f":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18,143]],"s":[["func",12],[" ",17],["createDeclBuildable",7],["() -> ",17],["DeclBuildable",18]],"d":"`ClassDecl` might conform to `ExpressibleAsDeclBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createDeclBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ClassDecl","createClassDecl()"],"f":[["func",12],[" ",17],["createClassDecl",7],["() -> ",17],["ClassDecl",18,661]],"s":[["func",12],[" ",17],["createClassDecl",7],["() -> ",17],["ClassDecl",18]],"d":"Conformance to `ExpressibleAsClassDecl`."},{"p":["CodeBlock","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["CodeBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`CodeBlock` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["CodeBlock","createCodeBlock()"],"f":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18,662]],"s":[["func",12],[" ",17],["createCodeBlock",7],["() -> ",17],["CodeBlock",18]],"d":"Conformance to `ExpressibleAsCodeBlock`."},{"p":["DeferStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["DeferStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`DeferStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeferStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`DeferStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["DeferStmt","createDeferStmt()"],"f":[["func",12],[" ",17],["createDeferStmt",7],["() -> ",17],["DeferStmt",18,663]],"s":[["func",12],[" ",17],["createDeferStmt",7],["() -> ",17],["DeferStmt",18]],"d":"Conformance to `ExpressibleAsDeferStmt`."},{"p":["ElseBlock","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["ElseBlock","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ElseBlock` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ElseBlock","createElseBlock()"],"f":[["func",12],[" ",17],["createElseBlock",7],["() -> ",17],["ElseBlock",18,664]],"s":[["func",12],[" ",17],["createElseBlock",7],["() -> ",17],["ElseBlock",18]],"d":"Conformance to `ExpressibleAsElseBlock`."},{"p":["ForInStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["ForInStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ForInStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ForInStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ForInStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ForInStmt","createForInStmt()"],"f":[["func",12],[" ",17],["createForInStmt",7],["() -> ",17],["ForInStmt",18,665]],"s":[["func",12],[" ",17],["createForInStmt",7],["() -> ",17],["ForInStmt",18]],"d":"Conformance to `ExpressibleAsForInStmt`."},{"p":["GuardStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["GuardStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`GuardStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GuardStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`GuardStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["GuardStmt","createGuardStmt()"],"f":[["func",12],[" ",17],["createGuardStmt",7],["() -> ",17],["GuardStmt",18,666]],"s":[["func",12],[" ",17],["createGuardStmt",7],["() -> ",17],["GuardStmt",18]],"d":"Conformance to `ExpressibleAsGuardStmt`."},{"p":["InOutExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["InOutExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`InOutExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InOutExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`InOutExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["InOutExpr","createInOutExpr()"],"f":[["func",12],[" ",17],["createInOutExpr",7],["() -> ",17],["InOutExpr",18,667]],"s":[["func",12],[" ",17],["createInOutExpr",7],["() -> ",17],["InOutExpr",18]],"d":"Conformance to `ExpressibleAsInOutExpr`."},{"p":["ThrowStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["ThrowStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`ThrowStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ThrowStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`ThrowStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["ThrowStmt","createThrowStmt()"],"f":[["func",12],[" ",17],["createThrowStmt",7],["() -> ",17],["ThrowStmt",18,668]],"s":[["func",12],[" ",17],["createThrowStmt",7],["() -> ",17],["ThrowStmt",18]],"d":"Conformance to `ExpressibleAsThrowStmt`."},{"p":["TokenList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]]},{"p":["TokenList","buildTokenList(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildTokenList",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TokenListSyntax",18,2978]],"s":[["func",12],[" ",17],["buildTokenList",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TokenListSyntax",18]]},{"p":["TokenList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TokenList` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TokenList","createTokenList()"],"f":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18,669]],"s":[["func",12],[" ",17],["createTokenList",7],["() -> ",17],["TokenList",18]],"d":"Conformance to `ExpressibleAsTokenList`."},{"p":["TupleExpr","buildExpr(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["ExprSyntax",18,2971]],"s":[["func",12],[" ",17],["buildExpr",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["ExprSyntax",18]],"d":"Conformance to `ExprBuildable`."},{"p":["TupleExpr","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleExpr` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleExpr","createExprBuildable()"],"f":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18,144]],"s":[["func",12],[" ",17],["createExprBuildable",7],["() -> ",17],["ExprBuildable",18]],"d":"`TupleExpr` might conform to `ExpressibleAsExprBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createExprBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleExpr","createTupleExpr()"],"f":[["func",12],[" ",17],["createTupleExpr",7],["() -> ",17],["TupleExpr",18,670]],"s":[["func",12],[" ",17],["createTupleExpr",7],["() -> ",17],["TupleExpr",18]],"d":"Conformance to `ExpressibleAsTupleExpr`."},{"p":["TupleType","buildType(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["TypeSyntax",18,2973]],"s":[["func",12],[" ",17],["buildType",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["TypeSyntax",18]],"d":"Conformance to `TypeBuildable`."},{"p":["TupleType","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`TupleType` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleType","createTypeBuildable()"],"f":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18,146]],"s":[["func",12],[" ",17],["createTypeBuildable",7],["() -> ",17],["TypeBuildable",18]],"d":"`TupleType` might conform to `ExpressibleAsTypeBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createTypeBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["TupleType","createTupleType()"],"f":[["func",12],[" ",17],["createTupleType",7],["() -> ",17],["TupleType",18,671]],"s":[["func",12],[" ",17],["createTupleType",7],["() -> ",17],["TupleType",18]],"d":"Conformance to `ExpressibleAsTupleType`."},{"p":["WhileStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["WhileStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`WhileStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["WhileStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`WhileStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["WhileStmt","createWhileStmt()"],"f":[["func",12],[" ",17],["createWhileStmt",7],["() -> ",17],["WhileStmt",18,672]],"s":[["func",12],[" ",17],["createWhileStmt",7],["() -> ",17],["WhileStmt",18]],"d":"Conformance to `ExpressibleAsWhileStmt`."},{"p":["YieldList","buildSyntax(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["Syntax",18,2979]],"s":[["func",12],[" ",17],["buildSyntax",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["Syntax",18]],"d":"Conformance to `SyntaxBuildable`."},{"p":["YieldList","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`YieldList` might conform to `ExpressibleAsSyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["YieldList","createYieldList()"],"f":[["func",12],[" ",17],["createYieldList",7],["() -> ",17],["YieldList",18,673]],"s":[["func",12],[" ",17],["createYieldList",7],["() -> ",17],["YieldList",18]],"d":"Conformance to `ExpressibleAsYieldList`."},{"p":["YieldStmt","buildStmt(format:leadingTrivia:)"],"f":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18,643],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18,3039],["? = nil) -> ",17],["StmtSyntax",18,2972]],"s":[["func",12],[" ",17],["buildStmt",7],["(",17],["format",1],[": ",17],["Format",18],[", ",17],["leadingTrivia",1],[": ",17],["Trivia",18],["?) -> ",17],["StmtSyntax",18]],"d":"Conformance to `StmtBuildable`."},{"p":["YieldStmt","createSyntaxBuildable()"],"f":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18,142]],"s":[["func",12],[" ",17],["createSyntaxBuildable",7],["() -> ",17],["SyntaxBuildable",18]],"d":"`YieldStmt` might conform to `SyntaxBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createSyntaxBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["YieldStmt","createStmtBuildable()"],"f":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18,145]],"s":[["func",12],[" ",17],["createStmtBuildable",7],["() -> ",17],["StmtBuildable",18]],"d":"`YieldStmt` might conform to `ExpressibleAsStmtBuildable` via different `ExpressibleAs*` paths.\nThus, there are multiple default implementations for `createStmtBuildable`, some of which perform conversions through `ExpressibleAs*` protocols.\nTo resolve the ambiguity, provide a fixed implementation that doesn't perform any conversions."},{"p":["YieldStmt","createYieldStmt()"],"f":[["func",12],[" ",17],["createYieldStmt",7],["() -> ",17],["YieldStmt",18,674]],"s":[["func",12],[" ",17],["createYieldStmt",7],["() -> ",17],["YieldStmt",18]],"d":"Conformance to `ExpressibleAsYieldStmt`."},{"p":["AccessPathBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsAccessPathComponent",18,326]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["AccessPathBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["AccessPath",18,436]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["AccessPathBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsAccessPathComponent",18,326],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["AccessorListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsAccessorDecl",18,197]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["AccessorListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["AccessorList",18,449]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["AccessorListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsAccessorDecl",18,197],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CaseItemListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCaseItem",18,157]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CaseItemListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CaseItemList",18,451]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CaseItemListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCaseItem",18,157],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ModifierListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsDeclModifier",18,203]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ModifierListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ModifierList",18,460]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ModifierListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsDeclModifier",18,203],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ObjCSelectorBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsObjCSelectorPiece",18,305]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ObjCSelectorBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ObjCSelector",18,461]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ObjCSelectorBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsObjCSelectorPiece",18,305],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["AttributeListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["AttributeListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["AttributeList",18,473]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["AttributeListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,138],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CatchItemListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCatchItem",18,170]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CatchItemListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CatchItemList",18,474]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CatchItemListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCatchItem",18,170],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["IdentifierListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["TokenSyntax",18,2974]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["IdentifierListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["IdentifierList",18,492]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["IdentifierListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["TokenSyntax",18,2974],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["MemberDeclListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsMemberDeclListItem",18,320]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["MemberDeclListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["MemberDeclList",18,494]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["MemberDeclListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsMemberDeclListItem",18,320],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["SwitchCaseListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["SwitchCaseListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["SwitchCaseList",18,499]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["SwitchCaseListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,138],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CatchClauseListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCatchClause",18,192]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CatchClauseListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CatchClauseList",18,501]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CatchClauseListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCatchClause",18,192],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ArrayElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsArrayElement",18,199]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ArrayElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ArrayElementList",18,522]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ArrayElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsArrayElement",18,199],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ClosureParamListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsClosureParam",18,201]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ClosureParamListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ClosureParamList",18,523]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ClosureParamListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsClosureParam",18,201],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CodeBlockItemListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCodeBlockItem",18,223]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CodeBlockItemListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CodeBlockItemList",18,540]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CodeBlockItemListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCodeBlockItem",18,223],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["InheritedTypeListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsInheritedType",18,227]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["InheritedTypeListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["InheritedTypeList",18,549]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["InheritedTypeListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsInheritedType",18,227],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["NonEmptyTokenListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["TokenSyntax",18,2974]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["NonEmptyTokenListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["NonEmptyTokenList",18,551]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["NonEmptyTokenListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["TokenSyntax",18,2974],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["IfConfigClauseListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsIfConfigClause",18,245]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["IfConfigClauseListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["IfConfigClauseList",18,565]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["IfConfigClauseListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsIfConfigClause",18,245],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["PatternBindingListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsPatternBinding",18,248]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["PatternBindingListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["PatternBindingList",18,568]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["PatternBindingListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsPatternBinding",18,248],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["EnumCaseElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsEnumCaseElement",18,257]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["EnumCaseElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["EnumCaseElementList",18,574]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["EnumCaseElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsEnumCaseElement",18,257],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["GenericArgumentListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsGenericArgument",18,261]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["GenericArgumentListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["GenericArgumentList",18,575]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["GenericArgumentListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsGenericArgument",18,261],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["AvailabilitySpecListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsAvailabilityArgument",18,336]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["AvailabilitySpecListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["AvailabilitySpecList",18,584]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["AvailabilitySpecListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsAvailabilityArgument",18,336],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ConditionElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsConditionElement",18,277]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ConditionElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ConditionElementList",18,586]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ConditionElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsConditionElement",18,277],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["DeclNameArgumentListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsDeclNameArgument",18,278]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["DeclNameArgumentListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["DeclNameArgumentList",18,587]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["DeclNameArgumentListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsDeclNameArgument",18,278],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["GenericParameterListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsGenericParameter",18,282]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["GenericParameterListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["GenericParameterList",18,588]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["GenericParameterListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsGenericParameter",18,282],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["TupleExprElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsTupleExprElement",18,289]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["TupleExprElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["TupleExprElementList",18,592]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["TupleExprElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsTupleExprElement",18,289],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["TupleTypeElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsTupleTypeElement",18,290]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["TupleTypeElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["TupleTypeElementList",18,593]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["TupleTypeElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsTupleTypeElement",18,290],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["DictionaryElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsDictionaryElement",18,296]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["DictionaryElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["DictionaryElementList",18,595]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["DictionaryElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsDictionaryElement",18,296],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["FunctionParameterListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsFunctionParameter",18,299]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["FunctionParameterListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["FunctionParameterList",18,598]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["FunctionParameterListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsFunctionParameter",18,299],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["StringLiteralSegmentsBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["StringLiteralSegmentsBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["StringLiteralSegments",18,601]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["StringLiteralSegmentsBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,138],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ClosureCaptureItemListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsClosureCaptureItem",18,314]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ClosureCaptureItemListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ClosureCaptureItemList",18,606]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ClosureCaptureItemListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsClosureCaptureItem",18,314],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["GenericRequirementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsGenericRequirement",18,316]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["GenericRequirementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["GenericRequirementList",18,611]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["GenericRequirementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsGenericRequirement",18,316],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["PrecedenceGroupNameListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsPrecedenceGroupNameElement",18,380]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["PrecedenceGroupNameListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["PrecedenceGroupNameList",18,616]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["PrecedenceGroupNameListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsPrecedenceGroupNameElement",18,380],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["TuplePatternElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsTuplePatternElement",18,334]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["TuplePatternElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["TuplePatternElementList",18,618]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["TuplePatternElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsTuplePatternElement",18,334],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["PrimaryAssociatedTypeListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsPrimaryAssociatedType",18,353]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["PrimaryAssociatedTypeListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["PrimaryAssociatedTypeList",18,623]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["PrimaryAssociatedTypeListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsPrimaryAssociatedType",18,353],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["CompositionTypeElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsCompositionTypeElement",18,360]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["CompositionTypeElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["CompositionTypeElementList",18,624]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["CompositionTypeElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsCompositionTypeElement",18,360],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["DifferentiabilityParamListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsDifferentiabilityParam",18,362]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["DifferentiabilityParamListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["DifferentiabilityParamList",18,625]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["DifferentiabilityParamListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsDifferentiabilityParam",18,362],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["SpecializeAttributeSpecListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["SpecializeAttributeSpecListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["SpecializeAttributeSpecList",18,629]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["SpecializeAttributeSpecListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,138],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["PrecedenceGroupAttributeListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsSyntaxBuildable",18,138]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["PrecedenceGroupAttributeListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["PrecedenceGroupAttributeList",18,633]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["PrecedenceGroupAttributeListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsSyntaxBuildable",18,138],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["MultipleTrailingClosureElementListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsMultipleTrailingClosureElement",18,389]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["MultipleTrailingClosureElementListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["MultipleTrailingClosureElementList",18,639]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["MultipleTrailingClosureElementListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsMultipleTrailingClosureElement",18,389],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ExprListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsExprBuildable",18,225]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ExprListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ExprList",18,650]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ExprListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsExprBuildable",18,225],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["ObjcNameBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["ExpressibleAsObjcNamePiece",18,229]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["ObjcNameBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["ObjcName",18,651]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["ObjcNameBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["ExpressibleAsObjcNamePiece",18,229],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."},{"p":["TokenListBuilder","Expression"],"f":[["typealias",12],[" ",17],["Expression",7],[" = ",17],["TokenSyntax",18,2974]],"s":[["typealias",12],[" ",17],["Expression",7]],"d":"The type of individual statement expressions in the transformed function,\nwhich defaults to Component if buildExpression() is not provided."},{"p":["TokenListBuilder","FinalResult"],"f":[["typealias",12],[" ",17],["FinalResult",7],[" = ",17],["TokenList",18,669]],"s":[["typealias",12],[" ",17],["FinalResult",7]],"d":"The type of the final returned result, which defaults to Component if\nbuildFinalResult() is not provided."},{"p":["TokenListBuilder","Component"],"f":[["typealias",12],[" ",17],["Component",7],[" = [",17],["TokenSyntax",18,2974],["]",17]],"s":[["typealias",12],[" ",17],["Component",7]],"d":"The type of a partial result, which will be carried through all of the\nbuild methods."}],"edges":{"conformer":[138,221,[],138,251,[],138,354,[],138,382,[],138,386,[],139,285,[],140,138,[],140,160,[],140,221,[],140,225,[],140,251,[],140,277,[],140,339,[],140,354,[],140,382,[],140,386,[],142,138,[],142,141,[],142,221,[],142,251,[],142,354,[],142,382,[],142,386,[],143,138,[],143,141,[],143,142,[],143,148,[],143,172,[],143,221,[],143,223,[],143,224,[],143,246,[],143,251,[],143,264,[],143,293,[],143,320,[],143,354,[],143,382,[],143,386,[],144,138,[],144,141,[],144,142,[],144,149,[],144,160,[],144,221,[],144,225,[],144,251,[],144,277,[],144,339,[],144,354,[],144,382,[],144,386,[],145,138,[],145,141,[],145,142,[],145,150,[],145,172,[],145,221,[],145,223,[],145,232,[],145,251,[],145,293,[],145,354,[],145,382,[],145,386,[],146,138,[],146,141,[],146,142,[],146,151,[],146,214,[],146,221,[],146,236,[],146,251,[],146,354,[],146,382,[],146,386,[],147,138,[],147,141,[],147,142,[],147,156,[],147,221,[],147,251,[],147,285,[],147,354,[],147,382,[],147,386,[],148,141,[],149,141,[],150,141,[],151,141,[],152,138,[],152,172,[],152,221,[],152,223,[],152,232,[],152,251,[],152,293,[],152,354,[],152,382,[],152,386,[],153,138,[],153,172,[],153,221,[],153,223,[],153,232,[],153,251,[],153,293,[],153,354,[],153,382,[],153,386,[],154,138,[],154,160,[],154,221,[],154,225,[],154,251,[],154,277,[],154,339,[],154,354,[],154,382,[],154,386,[],155,138,[],155,160,[],155,221,[],155,225,[],155,251,[],155,277,[],155,339,[],155,354,[],155,382,[],155,386,[],156,141,[],157,138,[],157,200,[],157,221,[],157,251,[],157,354,[],157,382,[],157,386,[],158,138,[],158,221,[],158,251,[],158,354,[],158,382,[],158,386,[],159,138,[],159,172,[],159,221,[],159,223,[],159,224,[],159,246,[],159,251,[],159,264,[],159,293,[],159,320,[],159,354,[],159,382,[],159,386,[],160,138,[],160,221,[],160,251,[],160,277,[],160,339,[],160,354,[],160,382,[],160,386,[],162,138,[],162,214,[],162,221,[],162,236,[],162,251,[],162,354,[],162,382,[],162,386,[],163,138,[],163,160,[],163,221,[],163,225,[],163,251,[],163,277,[],163,339,[],163,354,[],163,382,[],163,386,[],164,138,[],164,160,[],164,221,[],164,225,[],164,251,[],164,277,[],164,339,[],164,354,[],164,382,[],164,386,[],165,138,[],165,214,[],165,221,[],165,236,[],165,251,[],165,354,[],165,382,[],165,386,[],166,138,[],166,160,[],166,221,[],166,225,[],166,251,[],166,277,[],166,339,[],166,354,[],166,382,[],166,386,[],167,138,[],167,221,[],167,251,[],167,354,[],167,382,[],167,386,[],168,138,[],168,160,[],168,221,[],168,225,[],168,251,[],168,277,[],168,339,[],168,354,[],168,382,[],168,386,[],169,138,[],169,172,[],169,221,[],169,223,[],169,232,[],169,251,[],169,293,[],169,354,[],169,382,[],169,386,[],170,138,[],170,221,[],170,222,[],170,251,[],170,354,[],170,382,[],170,386,[],171,138,[],171,172,[],171,221,[],171,223,[],171,224,[],171,246,[],171,251,[],171,264,[],171,293,[],171,320,[],171,354,[],171,382,[],171,386,[],172,138,[],172,221,[],172,251,[],172,354,[],172,382,[],172,386,[],173,138,[],173,172,[],173,221,[],173,223,[],173,232,[],173,251,[],173,293,[],173,354,[],173,382,[],173,386,[],174,138,[],174,221,[],174,251,[],174,354,[],174,382,[],174,386,[],175,138,[],175,172,[],175,221,[],175,223,[],175,232,[],175,251,[],175,293,[],175,354,[],175,382,[],175,386,[],176,138,[],176,172,[],176,221,[],176,223,[],176,232,[],176,251,[],176,293,[],176,354,[],176,382,[],176,386,[],177,138,[],177,160,[],177,221,[],177,225,[],177,251,[],177,277,[],177,339,[],177,354,[],177,382,[],177,386,[],178,138,[],178,172,[],178,221,[],178,223,[],178,232,[],178,251,[],178,293,[],178,354,[],178,382,[],178,386,[],180,138,[],180,160,[],180,221,[],180,225,[],180,251,[],180,277,[],180,339,[],180,354,[],180,382,[],180,386,[],181,138,[],181,214,[],181,221,[],181,236,[],181,251,[],181,354,[],181,382,[],181,386,[],182,138,[],182,172,[],182,221,[],182,223,[],182,232,[],182,251,[],182,293,[],182,354,[],182,382,[],182,386,[],183,138,[],183,221,[],183,251,[],183,354,[],183,382,[],183,386,[],184,138,[],184,172,[],184,221,[],184,223,[],184,232,[],184,251,[],184,293,[],184,354,[],184,382,[],184,386,[],186,138,[],186,172,[],186,221,[],186,223,[],186,224,[],186,246,[],186,251,[],186,264,[],186,293,[],186,320,[],186,354,[],186,382,[],186,386,[],187,138,[],187,172,[],187,221,[],187,223,[],187,232,[],187,251,[],187,293,[],187,354,[],187,382,[],187,386,[],188,138,[],188,221,[],188,251,[],188,354,[],188,382,[],188,386,[],189,138,[],189,172,[],189,221,[],189,223,[],189,224,[],189,246,[],189,251,[],189,264,[],189,293,[],189,320,[],189,354,[],189,382,[],189,386,[],190,138,[],190,221,[],190,251,[],190,354,[],190,382,[],190,386,[],191,138,[],191,172,[],191,221,[],191,223,[],191,232,[],191,251,[],191,293,[],191,354,[],191,382,[],191,386,[],192,138,[],192,221,[],192,251,[],192,253,[],192,354,[],192,382,[],192,386,[],193,138,[],193,160,[],193,221,[],193,225,[],193,251,[],193,277,[],193,339,[],193,354,[],193,382,[],193,386,[],194,138,[],194,160,[],194,221,[],194,225,[],194,251,[],194,277,[],194,339,[],194,354,[],194,382,[],194,386,[],195,138,[],195,160,[],195,221,[],195,225,[],195,251,[],195,277,[],195,339,[],195,354,[],195,382,[],195,386,[],196,138,[],196,221,[],196,251,[],196,354,[],196,382,[],196,386,[],197,138,[],197,172,[],197,198,[],197,220,[],197,221,[],197,223,[],197,224,[],197,246,[],197,251,[],197,264,[],197,293,[],197,320,[],197,354,[],197,382,[],197,386,[],198,138,[],198,220,[],198,221,[],198,251,[],198,354,[],198,382,[],198,386,[],199,138,[],199,221,[],199,251,[],199,274,[],199,354,[],199,382,[],199,386,[],201,138,[],201,221,[],201,251,[],201,275,[],201,354,[],201,382,[],201,386,[],202,138,[],202,172,[],202,221,[],202,223,[],202,232,[],202,251,[],202,293,[],202,354,[],202,382,[],202,386,[],203,138,[],203,209,[],203,221,[],203,251,[],203,354,[],203,382,[],203,386,[],204,138,[],204,172,[],204,221,[],204,223,[],204,224,[],204,246,[],204,251,[],204,264,[],204,293,[],204,320,[],204,354,[],204,382,[],204,386,[],205,138,[],205,172,[],205,221,[],205,223,[],205,224,[],205,246,[],205,251,[],205,264,[],205,293,[],205,320,[],205,354,[],205,382,[],205,386,[],206,138,[],206,214,[],206,221,[],206,236,[],206,251,[],206,354,[],206,382,[],206,386,[],207,138,[],207,172,[],207,221,[],207,223,[],207,224,[],207,246,[],207,251,[],207,264,[],207,293,[],207,320,[],207,354,[],207,382,[],207,386,[],208,138,[],208,214,[],208,221,[],208,236,[],208,251,[],208,354,[],208,382,[],208,386,[],211,138,[],211,172,[],211,221,[],211,223,[],211,224,[],211,246,[],211,251,[],211,264,[],211,293,[],211,320,[],211,354,[],211,382,[],211,386,[],212,138,[],212,214,[],212,221,[],212,236,[],212,251,[],212,354,[],212,382,[],212,386,[],213,138,[],213,172,[],213,221,[],213,223,[],213,224,[],213,246,[],213,251,[],213,264,[],213,293,[],213,320,[],213,354,[],213,382,[],213,386,[],214,138,[],214,221,[],214,251,[],214,354,[],214,382,[],214,386,[],215,138,[],215,160,[],215,172,[],215,221,[],215,223,[],215,225,[],215,251,[],215,277,[],215,289,[],215,293,[],215,339,[],215,345,[],215,354,[],215,382,[],215,386,[],216,138,[],216,160,[],216,221,[],216,225,[],216,251,[],216,277,[],216,339,[],216,354,[],216,382,[],216,386,[],217,285,[],218,138,[],218,172,[],218,221,[],218,223,[],218,224,[],218,246,[],218,251,[],218,264,[],218,293,[],218,320,[],218,354,[],218,382,[],218,386,[],219,138,[],219,221,[],219,251,[],219,354,[],219,382,[],219,386,[],220,138,[],220,221,[],220,251,[],220,354,[],220,382,[],220,386,[],223,138,[],223,172,[],223,221,[],223,251,[],223,293,[],223,354,[],223,382,[],223,386,[],224,138,[],224,172,[],224,221,[],224,223,[],224,246,[],224,251,[],224,264,[],224,293,[],224,320,[],224,354,[],224,382,[],224,386,[],225,138,[],225,160,[],225,221,[],225,251,[],225,277,[],225,339,[],225,354,[],225,382,[],225,386,[],226,138,[],226,172,[],226,221,[],226,223,[],226,224,[],226,246,[],226,251,[],226,264,[],226,293,[],226,320,[],226,354,[],226,382,[],226,386,[],227,138,[],227,221,[],227,251,[],227,302,[],227,354,[],227,382,[],227,386,[],228,285,[],229,138,[],229,161,[],229,221,[],229,251,[],229,354,[],229,382,[],229,386,[],230,138,[],230,160,[],230,221,[],230,225,[],230,251,[],230,277,[],230,339,[],230,354,[],230,382,[],230,386,[],231,138,[],231,160,[],231,221,[],231,225,[],231,251,[],231,277,[],231,339,[],231,354,[],231,382,[],231,386,[],232,138,[],232,172,[],232,221,[],232,223,[],232,251,[],232,293,[],232,354,[],232,382,[],232,386,[],233,138,[],233,221,[],233,251,[],233,354,[],233,382,[],233,386,[],234,138,[],234,172,[],234,221,[],234,223,[],234,224,[],234,246,[],234,251,[],234,264,[],234,293,[],234,320,[],234,354,[],234,382,[],234,386,[],235,138,[],235,160,[],235,221,[],235,225,[],235,251,[],235,277,[],235,339,[],235,354,[],235,382,[],235,386,[],236,138,[],236,214,[],236,221,[],236,251,[],236,354,[],236,382,[],236,386,[],237,138,[],237,172,[],237,221,[],237,223,[],237,224,[],237,246,[],237,251,[],237,264,[],237,293,[],237,320,[],237,354,[],237,382,[],237,386,[],238,138,[],238,160,[],238,221,[],238,225,[],238,251,[],238,277,[],238,339,[],238,354,[],238,382,[],238,386,[],239,138,[],239,214,[],239,221,[],239,236,[],239,251,[],239,354,[],239,382,[],239,386,[],240,138,[],240,160,[],240,221,[],240,225,[],240,251,[],240,277,[],240,339,[],240,354,[],240,382,[],240,386,[],241,138,[],241,214,[],241,221,[],241,236,[],241,251,[],241,354,[],241,382,[],241,386,[],242,138,[],242,172,[],242,221,[],242,223,[],242,232,[],242,251,[],242,293,[],242,354,[],242,382,[],242,386,[],243,138,[],243,160,[],243,221,[],243,225,[],243,251,[],243,277,[],243,339,[],243,354,[],243,382,[],243,386,[],245,138,[],245,221,[],245,251,[],245,318,[],245,354,[],245,382,[],245,386,[],246,138,[],246,221,[],246,251,[],246,264,[],246,354,[],246,382,[],246,386,[],247,138,[],247,160,[],247,221,[],247,225,[],247,251,[],247,277,[],247,339,[],247,354,[],247,382,[],247,386,[],248,138,[],248,221,[],248,251,[],248,321,[],248,354,[],248,382,[],248,386,[],249,138,[],249,172,[],249,221,[],249,223,[],249,224,[],249,246,[],249,251,[],249,264,[],249,293,[],249,320,[],249,354,[],249,382,[],249,386,[],250,138,[],250,160,[],250,221,[],250,225,[],250,251,[],250,277,[],250,339,[],250,354,[],250,382,[],250,386,[],252,138,[],252,221,[],252,251,[],252,354,[],252,382,[],252,386,[],254,138,[],254,214,[],254,221,[],254,236,[],254,251,[],254,354,[],254,382,[],254,386,[],255,138,[],255,221,[],255,251,[],255,354,[],255,382,[],255,386,[],256,138,[],256,172,[],256,221,[],256,223,[],256,232,[],256,251,[],256,293,[],256,354,[],256,382,[],256,386,[],257,138,[],257,221,[],257,251,[],257,327,[],257,354,[],257,382,[],257,386,[],258,285,[],259,138,[],259,172,[],259,221,[],259,223,[],259,232,[],259,251,[],259,293,[],259,354,[],259,382,[],259,386,[],260,138,[],260,160,[],260,221,[],260,225,[],260,251,[],260,277,[],260,339,[],260,354,[],260,382,[],260,386,[],261,138,[],261,221,[],261,251,[],261,328,[],261,354,[],261,382,[],261,386,[],262,138,[],262,172,[],262,221,[],262,223,[],262,224,[],262,246,[],262,251,[],262,264,[],262,293,[],262,320,[],262,354,[],262,382,[],262,386,[],263,138,[],263,160,[],263,221,[],263,225,[],263,251,[],263,277,[],263,339,[],263,354,[],263,382,[],263,386,[],264,138,[],264,221,[],264,251,[],264,354,[],264,382,[],264,386,[],265,138,[],265,160,[],265,221,[],265,225,[],265,251,[],265,277,[],265,339,[],265,354,[],265,382,[],265,386,[],266,285,[],267,138,[],267,221,[],267,251,[],267,354,[],267,382,[],267,386,[],268,138,[],268,172,[],268,221,[],268,223,[],268,232,[],268,251,[],268,293,[],268,354,[],268,382,[],268,386,[],269,138,[],269,160,[],269,221,[],269,225,[],269,251,[],269,277,[],269,339,[],269,354,[],269,382,[],269,386,[],270,138,[],270,160,[],270,221,[],270,225,[],270,251,[],270,277,[],270,339,[],270,354,[],270,382,[],270,386,[],271,138,[],271,172,[],271,221,[],271,223,[],271,232,[],271,251,[],271,293,[],271,354,[],271,382,[],271,386,[],272,138,[],272,221,[],272,251,[],272,354,[],272,382,[],272,386,[],273,285,[],276,138,[],276,221,[],276,251,[],276,354,[],276,382,[],276,386,[],277,138,[],277,221,[],277,251,[],277,339,[],277,354,[],277,382,[],277,386,[],278,138,[],278,221,[],278,251,[],278,340,[],278,354,[],278,382,[],278,386,[],279,138,[],279,160,[],279,221,[],279,225,[],279,251,[],279,277,[],279,339,[],279,354,[],279,382,[],279,386,[],280,138,[],280,160,[],280,172,[],280,221,[],280,223,[],280,225,[],280,251,[],280,277,[],280,293,[],280,339,[],280,354,[],280,382,[],280,386,[],281,138,[],281,221,[],281,251,[],281,354,[],281,382,[],281,386,[],282,138,[],282,221,[],282,251,[],282,341,[],282,354,[],282,382,[],282,386,[],283,138,[],283,160,[],283,221,[],283,225,[],283,251,[],283,277,[],283,339,[],283,354,[],283,382,[],283,386,[],284,138,[],284,160,[],284,221,[],284,225,[],284,251,[],284,277,[],284,339,[],284,354,[],284,382,[],284,386,[],286,138,[],286,160,[],286,221,[],286,225,[],286,251,[],286,277,[],286,339,[],286,354,[],286,382,[],286,386,[],287,138,[],287,172,[],287,221,[],287,223,[],287,224,[],287,246,[],287,251,[],287,264,[],287,293,[],287,320,[],287,354,[],287,382,[],287,386,[],288,138,[],288,160,[],288,221,[],288,225,[],288,251,[],288,277,[],288,339,[],288,354,[],288,382,[],288,386,[],289,138,[],289,221,[],289,251,[],289,345,[],289,354,[],289,382,[],289,386,[],290,138,[],290,221,[],290,251,[],290,346,[],290,354,[],290,382,[],290,386,[],291,138,[],291,221,[],291,251,[],291,354,[],291,382,[],291,386,[],292,138,[],292,221,[],292,251,[],292,354,[],292,382,[],292,386,[],293,138,[],293,172,[],293,221,[],293,251,[],293,354,[],293,382,[],293,386,[],294,138,[],294,221,[],294,251,[],294,354,[],294,382,[],294,386,[],295,138,[],295,172,[],295,221,[],295,223,[],295,224,[],295,246,[],295,251,[],295,264,[],295,293,[],295,320,[],295,354,[],295,382,[],295,386,[],296,138,[],296,221,[],296,251,[],296,348,[],296,354,[],296,382,[],296,386,[],297,285,[],298,138,[],298,221,[],298,251,[],298,354,[],298,382,[],298,386,[],299,138,[],299,221,[],299,251,[],299,351,[],299,354,[],299,382,[],299,386,[],300,138,[],300,221,[],300,251,[],300,354,[],300,382,[],300,386,[],301,285,[],303,138,[],303,221,[],303,251,[],303,354,[],303,382,[],303,386,[],305,138,[],305,210,[],305,221,[],305,251,[],305,354,[],305,382,[],305,386,[],306,138,[],306,160,[],306,221,[],306,225,[],306,251,[],306,277,[],306,339,[],306,354,[],306,382,[],306,386,[],307,138,[],307,160,[],307,221,[],307,225,[],307,251,[],307,277,[],307,339,[],307,354,[],307,382,[],307,386,[],308,138,[],308,160,[],308,221,[],308,225,[],308,251,[],308,277,[],308,339,[],308,354,[],308,382,[],308,386,[],309,138,[],309,221,[],309,251,[],309,354,[],309,382,[],309,386,[],310,138,[],310,160,[],310,221,[],310,225,[],310,251,[],310,277,[],310,339,[],310,354,[],310,382,[],310,386,[],311,138,[],311,172,[],311,221,[],311,223,[],311,224,[],311,246,[],311,251,[],311,264,[],311,293,[],311,320,[],311,354,[],311,382,[],311,386,[],312,138,[],312,160,[],312,221,[],312,225,[],312,251,[],312,277,[],312,339,[],312,354,[],312,382,[],312,386,[],313,138,[],313,160,[],313,221,[],313,225,[],313,251,[],313,277,[],313,339,[],313,354,[],313,382,[],313,386,[],314,138,[],314,221,[],314,251,[],314,354,[],314,359,[],314,382,[],314,386,[],315,138,[],315,221,[],315,251,[],315,354,[],315,382,[],315,386,[],316,138,[],316,221,[],316,251,[],316,354,[],316,364,[],316,382,[],316,386,[],317,138,[],317,221,[],317,251,[],317,354,[],317,382,[],317,386,[],319,138,[],319,160,[],319,221,[],319,225,[],319,251,[],319,277,[],319,339,[],319,354,[],319,382,[],319,386,[],320,138,[],320,221,[],320,246,[],320,251,[],320,264,[],320,354,[],320,382,[],320,386,[],322,138,[],322,160,[],322,221,[],322,225,[],322,251,[],322,277,[],322,339,[],322,354,[],322,382,[],322,386,[],323,138,[],323,160,[],323,221,[],323,225,[],323,251,[],323,277,[],323,339,[],323,354,[],323,382,[],323,386,[],324,138,[],324,221,[],324,251,[],324,354,[],324,382,[],324,386,[],325,138,[],325,221,[],325,251,[],325,354,[],325,382,[],325,386,[],326,138,[],326,185,[],326,221,[],326,251,[],326,354,[],326,382,[],326,386,[],329,138,[],329,160,[],329,221,[],329,225,[],329,251,[],329,277,[],329,339,[],329,354,[],329,382,[],329,386,[],330,138,[],330,172,[],330,221,[],330,223,[],330,224,[],330,246,[],330,251,[],330,264,[],330,293,[],330,320,[],330,354,[],330,382,[],330,386,[],331,138,[],331,172,[],331,221,[],331,223,[],331,224,[],331,246,[],331,251,[],331,264,[],331,293,[],331,320,[],331,354,[],331,382,[],331,386,[],332,138,[],332,221,[],332,251,[],332,354,[],332,382,[],332,386,[],333,138,[],333,221,[],333,251,[],333,354,[],333,382,[],333,386,[],334,138,[],334,221,[],334,251,[],334,354,[],334,371,[],334,382,[],334,386,[],335,285,[],336,138,[],336,221,[],336,251,[],336,337,[],336,354,[],336,382,[],336,386,[],338,138,[],338,214,[],338,221,[],338,236,[],338,251,[],338,354,[],338,382,[],338,386,[],342,138,[],342,214,[],342,221,[],342,236,[],342,251,[],342,354,[],342,382,[],342,386,[],343,138,[],343,160,[],343,221,[],343,225,[],343,251,[],343,277,[],343,339,[],343,354,[],343,382,[],343,386,[],344,138,[],344,160,[],344,163,[],344,214,[],344,221,[],344,225,[],344,236,[],344,251,[],344,252,[],344,277,[],344,339,[],344,354,[],344,382,[],344,386,[],347,138,[],347,221,[],347,251,[],347,354,[],347,382,[],347,386,[],349,138,[],349,160,[],349,221,[],349,225,[],349,251,[],349,277,[],349,339,[],349,354,[],349,382,[],349,386,[],350,138,[],350,160,[],350,221,[],350,225,[],350,251,[],350,277,[],350,339,[],350,354,[],350,382,[],350,386,[],352,138,[],352,221,[],352,251,[],352,354,[],352,382,[],352,386,[],353,138,[],353,221,[],353,251,[],353,354,[],353,376,[],353,382,[],353,386,[],355,138,[],355,160,[],355,221,[],355,225,[],355,251,[],355,277,[],355,339,[],355,354,[],355,382,[],355,386,[],356,138,[],356,221,[],356,251,[],356,354,[],356,382,[],356,386,[],357,138,[],357,221,[],357,251,[],357,354,[],357,382,[],357,386,[],358,138,[],358,160,[],358,221,[],358,225,[],358,251,[],358,277,[],358,339,[],358,354,[],358,382,[],358,386,[],360,138,[],360,221,[],360,251,[],360,354,[],360,377,[],360,382,[],360,386,[],361,138,[],361,221,[],361,251,[],361,354,[],361,382,[],361,386,[],362,138,[],362,221,[],362,251,[],362,354,[],362,378,[],362,382,[],362,386,[],363,138,[],363,221,[],363,251,[],363,354,[],363,382,[],363,386,[],365,138,[],365,221,[],365,251,[],365,354,[],365,382,[],365,386,[],366,138,[],366,221,[],366,251,[],366,354,[],366,382,[],366,386,[],367,138,[],367,221,[],367,251,[],367,354,[],367,382,[],367,386,[],368,138,[],368,221,[],368,251,[],368,354,[],368,382,[],368,386,[],370,138,[],370,221,[],370,251,[],370,354,[],370,382,[],370,386,[],372,138,[],372,221,[],372,251,[],372,354,[],372,382,[],372,386,[],373,138,[],373,221,[],373,251,[],373,354,[],373,382,[],373,386,[],374,138,[],374,221,[],374,251,[],374,354,[],374,382,[],374,386,[],375,138,[],375,221,[],375,251,[],375,354,[],375,382,[],375,386,[],379,138,[],379,221,[],379,251,[],379,354,[],379,382,[],379,386,[],380,138,[],380,221,[],380,251,[],380,354,[],380,369,[],380,382,[],380,386,[],381,138,[],381,221,[],381,251,[],381,354,[],381,382,[],381,386,[],383,138,[],383,221,[],383,251,[],383,354,[],383,382,[],383,386,[],384,138,[],384,221,[],384,251,[],384,354,[],384,382,[],384,386,[],385,138,[],385,221,[],385,251,[],385,354,[],385,382,[],385,386,[],387,138,[],387,221,[],387,251,[],387,354,[],387,382,[],387,386,[],388,138,[],388,221,[],388,251,[],388,354,[],388,382,[],388,386,[],389,138,[],389,221,[],389,251,[],389,354,[],389,382,[],389,386,[],389,392,[],390,138,[],390,214,[],390,221,[],390,236,[],390,251,[],390,354,[],390,382,[],390,386,[],391,138,[],391,221,[],391,251,[],391,354,[],391,382,[],391,386,[],393,138,[],393,221,[],393,251,[],393,354,[],393,382,[],393,386,[],436,138,[],436,141,[],436,142,[],436,185,[],436,221,[],436,251,[],436,354,[],436,382,[],436,386,[],436,3048,[],437,138,[],437,141,[],437,142,[],437,143,[],437,148,[],437,172,[],437,186,[],437,221,[],437,223,[],437,224,[],437,246,[],437,251,[],437,264,[],437,293,[],437,320,[],437,354,[],437,382,[],437,386,[],438,138,[],438,141,[],438,142,[],438,145,[],438,150,[],438,172,[],438,187,[],438,221,[],438,223,[],438,232,[],438,251,[],438,293,[],438,354,[],438,382,[],438,386,[],439,138,[],439,141,[],439,142,[],439,188,[],439,221,[],439,251,[],439,354,[],439,382,[],439,386,[],440,138,[],440,141,[],440,142,[],440,143,[],440,148,[],440,172,[],440,189,[],440,221,[],440,223,[],440,224,[],440,246,[],440,251,[],440,264,[],440,293,[],440,320,[],440,354,[],440,382,[],440,386,[],441,138,[],441,141,[],441,142,[],441,190,[],441,221,[],441,251,[],441,354,[],441,382,[],441,386,[],442,138,[],442,141,[],442,142,[],442,145,[],442,150,[],442,172,[],442,191,[],442,221,[],442,223,[],442,232,[],442,251,[],442,293,[],442,354,[],442,382,[],442,386,[],443,138,[],443,141,[],443,142,[],443,192,[],443,221,[],443,251,[],443,253,[],443,354,[],443,382,[],443,386,[],444,138,[],444,141,[],444,142,[],444,144,[],444,149,[],444,160,[],444,193,[],444,221,[],444,225,[],444,251,[],444,277,[],444,339,[],444,354,[],444,382,[],444,386,[],445,138,[],445,141,[],445,142,[],445,144,[],445,149,[],445,160,[],445,194,[],445,221,[],445,225,[],445,251,[],445,277,[],445,339,[],445,354,[],445,382,[],445,386,[],446,138,[],446,141,[],446,142,[],446,144,[],446,149,[],446,160,[],446,195,[],446,221,[],446,225,[],446,251,[],446,277,[],446,339,[],446,354,[],446,382,[],446,386,[],447,138,[],447,141,[],447,142,[],447,196,[],447,221,[],447,251,[],447,354,[],447,382,[],447,386,[],448,138,[],448,141,[],448,142,[],448,143,[],448,148,[],448,172,[],448,197,[],448,198,[],448,220,[],448,221,[],448,223,[],448,224,[],448,246,[],448,251,[],448,264,[],448,293,[],448,320,[],448,354,[],448,382,[],448,386,[],449,138,[],449,141,[],449,142,[],449,198,[],449,220,[],449,221,[],449,251,[],449,354,[],449,382,[],449,386,[],449,3048,[],450,138,[],450,141,[],450,142,[],450,199,[],450,221,[],450,251,[],450,274,[],450,354,[],450,382,[],450,386,[],451,138,[],451,141,[],451,142,[],451,200,[],451,221,[],451,251,[],451,354,[],451,382,[],451,386,[],451,3048,[],452,138,[],452,141,[],452,142,[],452,201,[],452,221,[],452,251,[],452,275,[],452,354,[],452,382,[],452,386,[],453,138,[],453,141,[],453,142,[],453,145,[],453,150,[],453,172,[],453,202,[],453,221,[],453,223,[],453,232,[],453,251,[],453,293,[],453,354,[],453,382,[],453,386,[],454,138,[],454,141,[],454,142,[],454,203,[],454,209,[],454,221,[],454,251,[],454,354,[],454,382,[],454,386,[],455,138,[],455,141,[],455,142,[],455,143,[],455,148,[],455,172,[],455,204,[],455,221,[],455,223,[],455,224,[],455,246,[],455,251,[],455,264,[],455,293,[],455,320,[],455,354,[],455,382,[],455,386,[],456,138,[],456,141,[],456,142,[],456,143,[],456,148,[],456,172,[],456,205,[],456,221,[],456,223,[],456,224,[],456,246,[],456,251,[],456,264,[],456,293,[],456,320,[],456,354,[],456,382,[],456,386,[],457,138,[],457,141,[],457,142,[],457,146,[],457,151,[],457,206,[],457,214,[],457,221,[],457,236,[],457,251,[],457,354,[],457,382,[],457,386,[],458,138,[],458,141,[],458,142,[],458,143,[],458,148,[],458,172,[],458,207,[],458,221,[],458,223,[],458,224,[],458,246,[],458,251,[],458,264,[],458,293,[],458,320,[],458,354,[],458,382,[],458,386,[],459,138,[],459,141,[],459,142,[],459,146,[],459,151,[],459,208,[],459,214,[],459,221,[],459,236,[],459,251,[],459,354,[],459,382,[],459,386,[],460,138,[],460,141,[],460,142,[],460,209,[],460,221,[],460,251,[],460,354,[],460,382,[],460,386,[],460,3048,[],461,138,[],461,141,[],461,142,[],461,210,[],461,221,[],461,251,[],461,354,[],461,382,[],461,386,[],461,3048,[],462,138,[],462,141,[],462,142,[],462,143,[],462,148,[],462,172,[],462,211,[],462,221,[],462,223,[],462,224,[],462,246,[],462,251,[],462,264,[],462,293,[],462,320,[],462,354,[],462,382,[],462,386,[],463,138,[],463,141,[],463,142,[],463,146,[],463,151,[],463,212,[],463,214,[],463,221,[],463,236,[],463,251,[],463,354,[],463,382,[],463,386,[],464,138,[],464,141,[],464,142,[],464,143,[],464,148,[],464,172,[],464,213,[],464,221,[],464,223,[],464,224,[],464,246,[],464,251,[],464,264,[],464,293,[],464,320,[],464,354,[],464,382,[],464,386,[],465,138,[],465,141,[],465,142,[],465,214,[],465,221,[],465,251,[],465,354,[],465,382,[],465,386,[],466,138,[],466,141,[],466,142,[],466,144,[],466,149,[],466,160,[],466,172,[],466,215,[],466,221,[],466,223,[],466,225,[],466,251,[],466,277,[],466,289,[],466,293,[],466,339,[],466,345,[],466,354,[],466,382,[],466,386,[],467,138,[],467,141,[],467,142,[],467,144,[],467,149,[],467,160,[],467,216,[],467,221,[],467,225,[],467,251,[],467,277,[],467,339,[],467,354,[],467,382,[],467,386,[],468,138,[],468,141,[],468,142,[],468,147,[],468,156,[],468,217,[],468,221,[],468,251,[],468,285,[],468,354,[],468,382,[],468,386,[],469,138,[],469,141,[],469,142,[],469,143,[],469,148,[],469,172,[],469,218,[],469,221,[],469,223,[],469,224,[],469,246,[],469,251,[],469,264,[],469,293,[],469,320,[],469,354,[],469,382,[],469,386,[],470,138,[],470,141,[],470,142,[],470,219,[],470,221,[],470,251,[],470,354,[],470,382,[],470,386,[],471,138,[],471,141,[],471,142,[],471,220,[],471,221,[],471,251,[],471,354,[],471,382,[],471,386,[],472,138,[],472,139,[],472,141,[],472,142,[],472,147,[],472,156,[],472,221,[],472,251,[],472,285,[],472,354,[],472,382,[],472,386,[],473,138,[],473,141,[],473,142,[],473,221,[],473,251,[],473,354,[],473,382,[],473,386,[],473,3048,[],474,138,[],474,141,[],474,142,[],474,221,[],474,222,[],474,251,[],474,354,[],474,382,[],474,386,[],474,3048,[],475,138,[],475,141,[],475,142,[],475,172,[],475,221,[],475,223,[],475,251,[],475,293,[],475,354,[],475,382,[],475,386,[],476,138,[],476,141,[],476,142,[],476,143,[],476,148,[],476,172,[],476,221,[],476,223,[],476,224,[],476,226,[],476,246,[],476,251,[],476,264,[],476,293,[],476,320,[],476,354,[],476,382,[],476,386,[],477,138,[],477,141,[],477,142,[],477,221,[],477,227,[],477,251,[],477,302,[],477,354,[],477,382,[],477,386,[],478,138,[],478,141,[],478,142,[],478,147,[],478,156,[],478,221,[],478,228,[],478,251,[],478,285,[],478,354,[],478,382,[],478,386,[],479,138,[],479,141,[],479,142,[],479,161,[],479,221,[],479,229,[],479,251,[],479,354,[],479,382,[],479,386,[],480,138,[],480,141,[],480,142,[],480,144,[],480,149,[],480,160,[],480,221,[],480,225,[],480,230,[],480,251,[],480,277,[],480,339,[],480,354,[],480,382,[],480,386,[],481,138,[],481,141,[],481,142,[],481,144,[],481,149,[],481,160,[],481,221,[],481,225,[],481,231,[],481,251,[],481,277,[],481,339,[],481,354,[],481,382,[],481,386,[],482,138,[],482,141,[],482,142,[],482,221,[],482,233,[],482,251,[],482,354,[],482,382,[],482,386,[],483,138,[],483,141,[],483,142,[],483,143,[],483,148,[],483,172,[],483,221,[],483,223,[],483,224,[],483,234,[],483,246,[],483,251,[],483,264,[],483,293,[],483,320,[],483,354,[],483,382,[],483,386,[],484,138,[],484,141,[],484,142,[],484,144,[],484,149,[],484,160,[],484,221,[],484,225,[],484,235,[],484,251,[],484,277,[],484,339,[],484,354,[],484,382,[],484,386,[],485,138,[],485,141,[],485,142,[],485,143,[],485,148,[],485,172,[],485,221,[],485,223,[],485,224,[],485,237,[],485,246,[],485,251,[],485,264,[],485,293,[],485,320,[],485,354,[],485,382,[],485,386,[],486,138,[],486,141,[],486,142,[],486,144,[],486,149,[],486,160,[],486,221,[],486,225,[],486,238,[],486,251,[],486,277,[],486,339,[],486,354,[],486,382,[],486,386,[],487,138,[],487,141,[],487,142,[],487,146,[],487,151,[],487,214,[],487,221,[],487,236,[],487,239,[],487,251,[],487,354,[],487,382,[],487,386,[],488,138,[],488,141,[],488,142,[],488,144,[],488,149,[],488,160,[],488,221,[],488,225,[],488,240,[],488,251,[],488,277,[],488,339,[],488,354,[],488,382,[],488,386,[],489,138,[],489,141,[],489,142,[],489,146,[],489,151,[],489,214,[],489,221,[],489,236,[],489,241,[],489,251,[],489,354,[],489,382,[],489,386,[],490,138,[],490,141,[],490,142,[],490,145,[],490,150,[],490,172,[],490,221,[],490,223,[],490,232,[],490,242,[],490,251,[],490,293,[],490,354,[],490,382,[],490,386,[],491,138,[],491,141,[],491,142,[],491,144,[],491,149,[],491,160,[],491,221,[],491,225,[],491,243,[],491,251,[],491,277,[],491,339,[],491,354,[],491,382,[],491,386,[],492,138,[],492,141,[],492,142,[],492,221,[],492,244,[],492,251,[],492,354,[],492,382,[],492,386,[],492,3048,[],493,138,[],493,141,[],493,142,[],493,221,[],493,245,[],493,251,[],493,318,[],493,354,[],493,382,[],493,386,[],494,138,[],494,141,[],494,142,[],494,221,[],494,246,[],494,251,[],494,264,[],494,354,[],494,382,[],494,386,[],494,3048,[],495,138,[],495,141,[],495,142,[],495,144,[],495,149,[],495,160,[],495,221,[],495,225,[],495,247,[],495,251,[],495,277,[],495,339,[],495,354,[],495,382,[],495,386,[],496,138,[],496,141,[],496,142,[],496,221,[],496,248,[],496,251,[],496,321,[],496,354,[],496,382,[],496,386,[],497,138,[],497,141,[],497,142,[],497,143,[],497,148,[],497,172,[],497,221,[],497,223,[],497,224,[],497,246,[],497,249,[],497,251,[],497,264,[],497,293,[],497,320,[],497,354,[],497,382,[],497,386,[],498,138,[],498,141,[],498,142,[],498,144,[],498,149,[],498,160,[],498,221,[],498,225,[],498,250,[],498,251,[],498,277,[],498,339,[],498,354,[],498,382,[],498,386,[],499,138,[],499,141,[],499,142,[],499,221,[],499,251,[],499,354,[],499,382,[],499,386,[],499,3048,[],500,138,[],500,141,[],500,142,[],500,221,[],500,251,[],500,252,[],500,354,[],500,382,[],500,386,[],501,138,[],501,141,[],501,142,[],501,221,[],501,251,[],501,253,[],501,354,[],501,382,[],501,386,[],501,3048,[],502,138,[],502,141,[],502,142,[],502,146,[],502,151,[],502,214,[],502,221,[],502,236,[],502,251,[],502,254,[],502,354,[],502,382,[],502,386,[],503,138,[],503,141,[],503,142,[],503,221,[],503,251,[],503,255,[],503,354,[],503,382,[],503,386,[],504,138,[],504,141,[],504,142,[],504,145,[],504,150,[],504,172,[],504,221,[],504,223,[],504,232,[],504,251,[],504,256,[],504,293,[],504,354,[],504,382,[],504,386,[],505,138,[],505,141,[],505,142,[],505,221,[],505,251,[],505,257,[],505,327,[],505,354,[],505,382,[],505,386,[],506,138,[],506,141,[],506,142,[],506,147,[],506,156,[],506,221,[],506,251,[],506,258,[],506,285,[],506,354,[],506,382,[],506,386,[],507,138,[],507,141,[],507,142,[],507,145,[],507,150,[],507,172,[],507,221,[],507,223,[],507,232,[],507,251,[],507,259,[],507,293,[],507,354,[],507,382,[],507,386,[],508,138,[],508,141,[],508,142,[],508,144,[],508,149,[],508,160,[],508,221,[],508,225,[],508,251,[],508,260,[],508,277,[],508,339,[],508,354,[],508,382,[],508,386,[],509,138,[],509,141,[],509,142,[],509,221,[],509,251,[],509,261,[],509,328,[],509,354,[],509,382,[],509,386,[],510,138,[],510,141,[],510,142,[],510,143,[],510,148,[],510,172,[],510,221,[],510,223,[],510,224,[],510,246,[],510,251,[],510,262,[],510,264,[],510,293,[],510,320,[],510,354,[],510,382,[],510,386,[],511,138,[],511,141,[],511,142,[],511,144,[],511,149,[],511,160,[],511,221,[],511,225,[],511,251,[],511,263,[],511,277,[],511,339,[],511,354,[],511,382,[],511,386,[],512,138,[],512,141,[],512,142,[],512,221,[],512,251,[],512,264,[],512,354,[],512,382,[],512,386,[],513,138,[],513,141,[],513,142,[],513,144,[],513,149,[],513,160,[],513,221,[],513,225,[],513,251,[],513,265,[],513,277,[],513,339,[],513,354,[],513,382,[],513,386,[],514,138,[],514,141,[],514,142,[],514,147,[],514,156,[],514,221,[],514,251,[],514,266,[],514,285,[],514,354,[],514,382,[],514,386,[],515,138,[],515,141,[],515,142,[],515,221,[],515,251,[],515,267,[],515,354,[],515,382,[],515,386,[],516,138,[],516,141,[],516,142,[],516,145,[],516,150,[],516,172,[],516,221,[],516,223,[],516,232,[],516,251,[],516,268,[],516,293,[],516,354,[],516,382,[],516,386,[],517,138,[],517,141,[],517,142,[],517,144,[],517,149,[],517,160,[],517,221,[],517,225,[],517,251,[],517,269,[],517,277,[],517,339,[],517,354,[],517,382,[],517,386,[],518,138,[],518,141,[],518,142,[],518,144,[],518,149,[],518,160,[],518,221,[],518,225,[],518,251,[],518,270,[],518,277,[],518,339,[],518,354,[],518,382,[],518,386,[],519,138,[],519,141,[],519,142,[],519,145,[],519,150,[],519,172,[],519,221,[],519,223,[],519,232,[],519,251,[],519,271,[],519,293,[],519,354,[],519,382,[],519,386,[],520,138,[],520,141,[],520,142,[],520,221,[],520,251,[],520,272,[],520,354,[],520,382,[],520,386,[],521,138,[],521,141,[],521,142,[],521,147,[],521,156,[],521,221,[],521,251,[],521,273,[],521,285,[],521,354,[],521,382,[],521,386,[],522,138,[],522,141,[],522,142,[],522,221,[],522,251,[],522,274,[],522,354,[],522,382,[],522,386,[],522,3048,[],523,138,[],523,141,[],523,142,[],523,221,[],523,251,[],523,275,[],523,354,[],523,382,[],523,386,[],523,3048,[],524,138,[],524,141,[],524,142,[],524,221,[],524,251,[],524,276,[],524,354,[],524,382,[],524,386,[],525,138,[],525,141,[],525,142,[],525,221,[],525,251,[],525,277,[],525,339,[],525,354,[],525,382,[],525,386,[],526,138,[],526,141,[],526,142,[],526,221,[],526,251,[],526,278,[],526,340,[],526,354,[],526,382,[],526,386,[],527,138,[],527,141,[],527,142,[],527,144,[],527,149,[],527,160,[],527,221,[],527,225,[],527,251,[],527,277,[],527,279,[],527,339,[],527,354,[],527,382,[],527,386,[],527,3050,[],528,138,[],528,141,[],528,142,[],528,144,[],528,149,[],528,160,[],528,172,[],528,221,[],528,223,[],528,225,[],528,251,[],528,277,[],528,280,[],528,293,[],528,339,[],528,354,[],528,382,[],528,386,[],529,138,[],529,141,[],529,142,[],529,221,[],529,251,[],529,281,[],529,354,[],529,382,[],529,386,[],530,138,[],530,141,[],530,142,[],530,221,[],530,251,[],530,282,[],530,341,[],530,354,[],530,382,[],530,386,[],531,138,[],531,141,[],531,142,[],531,144,[],531,149,[],531,160,[],531,221,[],531,225,[],531,251,[],531,277,[],531,283,[],531,339,[],531,354,[],531,382,[],531,386,[],532,138,[],532,141,[],532,142,[],532,144,[],532,149,[],532,160,[],532,221,[],532,225,[],532,251,[],532,277,[],532,284,[],532,339,[],532,354,[],532,382,[],532,386,[],533,138,[],533,141,[],533,142,[],533,144,[],533,149,[],533,160,[],533,221,[],533,225,[],533,251,[],533,277,[],533,286,[],533,339,[],533,354,[],533,382,[],533,386,[],534,138,[],534,141,[],534,142,[],534,143,[],534,148,[],534,172,[],534,221,[],534,223,[],534,224,[],534,246,[],534,251,[],534,264,[],534,287,[],534,293,[],534,320,[],534,354,[],534,382,[],534,386,[],535,138,[],535,141,[],535,142,[],535,144,[],535,149,[],535,160,[],535,221,[],535,225,[],535,251,[],535,277,[],535,288,[],535,339,[],535,354,[],535,382,[],535,386,[],536,138,[],536,141,[],536,142,[],536,221,[],536,251,[],536,289,[],536,345,[],536,354,[],536,382,[],536,386,[],537,138,[],537,141,[],537,142,[],537,221,[],537,251,[],537,290,[],537,346,[],537,354,[],537,382,[],537,386,[],538,138,[],538,141,[],538,142,[],538,221,[],538,251,[],538,291,[],538,354,[],538,382,[],538,386,[],539,138,[],539,141,[],539,142,[],539,221,[],539,251,[],539,292,[],539,354,[],539,382,[],539,386,[],540,138,[],540,141,[],540,142,[],540,172,[],540,221,[],540,251,[],540,293,[],540,354,[],540,382,[],540,386,[],540,3048,[],541,138,[],541,141,[],541,142,[],541,221,[],541,251,[],541,294,[],541,354,[],541,382,[],541,386,[],542,138,[],542,141,[],542,142,[],542,143,[],542,148,[],542,172,[],542,221,[],542,223,[],542,224,[],542,246,[],542,251,[],542,264,[],542,293,[],542,295,[],542,320,[],542,354,[],542,382,[],542,386,[],543,138,[],543,141,[],543,142,[],543,221,[],543,251,[],543,296,[],543,348,[],543,354,[],543,382,[],543,386,[],544,138,[],544,141,[],544,142,[],544,147,[],544,156,[],544,221,[],544,251,[],544,285,[],544,297,[],544,354,[],544,382,[],544,386,[],545,138,[],545,141,[],545,142,[],545,221,[],545,251,[],545,298,[],545,354,[],545,382,[],545,386,[],546,138,[],546,141,[],546,142,[],546,221,[],546,251,[],546,299,[],546,351,[],546,354,[],546,382,[],546,386,[],547,138,[],547,141,[],547,142,[],547,221,[],547,251,[],547,300,[],547,354,[],547,382,[],547,386,[],548,138,[],548,141,[],548,142,[],548,147,[],548,156,[],548,221,[],548,251,[],548,285,[],548,301,[],548,354,[],548,382,[],548,386,[],549,138,[],549,141,[],549,142,[],549,221,[],549,251,[],549,302,[],549,354,[],549,382,[],549,386,[],549,3048,[],550,138,[],550,141,[],550,142,[],550,221,[],550,251,[],550,303,[],550,354,[],550,382,[],550,386,[],551,138,[],551,141,[],551,142,[],551,221,[],551,251,[],551,304,[],551,354,[],551,382,[],551,386,[],551,3048,[],552,138,[],552,141,[],552,142,[],552,210,[],552,221,[],552,251,[],552,305,[],552,354,[],552,382,[],552,386,[],553,138,[],553,141,[],553,142,[],553,144,[],553,149,[],553,160,[],553,221,[],553,225,[],553,251,[],553,277,[],553,306,[],553,339,[],553,354,[],553,382,[],553,386,[],554,138,[],554,141,[],554,142,[],554,144,[],554,149,[],554,160,[],554,221,[],554,225,[],554,251,[],554,277,[],554,307,[],554,339,[],554,354,[],554,382,[],554,386,[],555,138,[],555,141,[],555,142,[],555,144,[],555,149,[],555,160,[],555,221,[],555,225,[],555,251,[],555,277,[],555,308,[],555,339,[],555,354,[],555,382,[],555,386,[],556,138,[],556,141,[],556,142,[],556,221,[],556,251,[],556,309,[],556,354,[],556,382,[],556,386,[],557,138,[],557,141,[],557,142,[],557,144,[],557,149,[],557,160,[],557,221,[],557,225,[],557,251,[],557,277,[],557,310,[],557,339,[],557,354,[],557,382,[],557,386,[],558,138,[],558,141,[],558,142,[],558,143,[],558,148,[],558,172,[],558,221,[],558,223,[],558,224,[],558,246,[],558,251,[],558,264,[],558,293,[],558,311,[],558,320,[],558,354,[],558,382,[],558,386,[],559,138,[],559,141,[],559,142,[],559,144,[],559,149,[],559,160,[],559,221,[],559,225,[],559,251,[],559,277,[],559,312,[],559,339,[],559,354,[],559,382,[],559,386,[],560,138,[],560,141,[],560,142,[],560,144,[],560,149,[],560,160,[],560,221,[],560,225,[],560,251,[],560,277,[],560,313,[],560,339,[],560,354,[],560,382,[],560,386,[],560,3052,[],561,138,[],561,141,[],561,142,[],561,221,[],561,251,[],561,314,[],561,354,[],561,359,[],561,382,[],561,386,[],562,138,[],562,141,[],562,142,[],562,221,[],562,251,[],562,315,[],562,354,[],562,382,[],562,386,[],563,138,[],563,141,[],563,142,[],563,221,[],563,251,[],563,316,[],563,354,[],563,364,[],563,382,[],563,386,[],564,138,[],564,141,[],564,142,[],564,221,[],564,251,[],564,317,[],564,354,[],564,382,[],564,386,[],565,138,[],565,141,[],565,142,[],565,221,[],565,251,[],565,318,[],565,354,[],565,382,[],565,386,[],565,3048,[],566,138,[],566,141,[],566,142,[],566,144,[],566,149,[],566,160,[],566,221,[],566,225,[],566,251,[],566,277,[],566,319,[],566,339,[],566,354,[],566,382,[],566,386,[],566,3054,[],567,138,[],567,141,[],567,142,[],567,221,[],567,246,[],567,251,[],567,264,[],567,320,[],567,354,[],567,382,[],567,386,[],568,138,[],568,141,[],568,142,[],568,221,[],568,251,[],568,321,[],568,354,[],568,382,[],568,386,[],568,3048,[],569,138,[],569,141,[],569,142,[],569,144,[],569,149,[],569,160,[],569,221,[],569,225,[],569,251,[],569,277,[],569,322,[],569,339,[],569,354,[],569,382,[],569,386,[],570,138,[],570,141,[],570,142,[],570,144,[],570,149,[],570,160,[],570,221,[],570,225,[],570,251,[],570,277,[],570,323,[],570,339,[],570,354,[],570,382,[],570,386,[],571,138,[],571,141,[],571,142,[],571,221,[],571,251,[],571,324,[],571,354,[],571,382,[],571,386,[],572,138,[],572,141,[],572,142,[],572,221,[],572,251,[],572,325,[],572,354,[],572,382,[],572,386,[],573,138,[],573,141,[],573,142,[],573,185,[],573,221,[],573,251,[],573,326,[],573,354,[],573,382,[],573,386,[],574,138,[],574,141,[],574,142,[],574,221,[],574,251,[],574,327,[],574,354,[],574,382,[],574,386,[],574,3048,[],575,138,[],575,141,[],575,142,[],575,221,[],575,251,[],575,328,[],575,354,[],575,382,[],575,386,[],575,3048,[],576,138,[],576,141,[],576,142,[],576,144,[],576,149,[],576,160,[],576,221,[],576,225,[],576,251,[],576,277,[],576,329,[],576,339,[],576,354,[],576,382,[],576,386,[],577,138,[],577,141,[],577,142,[],577,143,[],577,148,[],577,172,[],577,221,[],577,223,[],577,224,[],577,246,[],577,251,[],577,264,[],577,293,[],577,320,[],577,330,[],577,354,[],577,382,[],577,386,[],578,138,[],578,141,[],578,142,[],578,143,[],578,148,[],578,172,[],578,221,[],578,223,[],578,224,[],578,246,[],578,251,[],578,264,[],578,293,[],578,320,[],578,331,[],578,354,[],578,382,[],578,386,[],579,138,[],579,141,[],579,142,[],579,221,[],579,251,[],579,332,[],579,354,[],579,382,[],579,386,[],580,138,[],580,141,[],580,142,[],580,221,[],580,251,[],580,333,[],580,354,[],580,382,[],580,386,[],581,138,[],581,141,[],581,142,[],581,221,[],581,251,[],581,334,[],581,354,[],581,371,[],581,382,[],581,386,[],582,138,[],582,141,[],582,142,[],582,147,[],582,156,[],582,221,[],582,251,[],582,285,[],582,335,[],582,354,[],582,382,[],582,386,[],583,138,[],583,141,[],583,142,[],583,221,[],583,251,[],583,336,[],583,337,[],583,354,[],583,382,[],583,386,[],584,138,[],584,141,[],584,142,[],584,221,[],584,251,[],584,337,[],584,354,[],584,382,[],584,386,[],584,3048,[],585,138,[],585,141,[],585,142,[],585,146,[],585,151,[],585,214,[],585,221,[],585,236,[],585,251,[],585,338,[],585,354,[],585,382,[],585,386,[],586,138,[],586,141,[],586,142,[],586,221,[],586,251,[],586,339,[],586,354,[],586,382,[],586,386,[],586,3048,[],587,138,[],587,141,[],587,142,[],587,221,[],587,251,[],587,340,[],587,354,[],587,382,[],587,386,[],587,3048,[],588,138,[],588,141,[],588,142,[],588,221,[],588,251,[],588,341,[],588,354,[],588,382,[],588,386,[],588,3048,[],589,138,[],589,141,[],589,142,[],589,146,[],589,151,[],589,214,[],589,221,[],589,236,[],589,251,[],589,342,[],589,354,[],589,382,[],589,386,[],590,138,[],590,141,[],590,142,[],590,144,[],590,149,[],590,160,[],590,221,[],590,225,[],590,251,[],590,277,[],590,339,[],590,343,[],590,354,[],590,382,[],590,386,[],591,138,[],591,141,[],591,142,[],591,146,[],591,151,[],591,160,[],591,163,[],591,214,[],591,221,[],591,225,[],591,236,[],591,251,[],591,252,[],591,277,[],591,339,[],591,344,[],591,354,[],591,382,[],591,386,[],592,138,[],592,141,[],592,142,[],592,221,[],592,251,[],592,345,[],592,354,[],592,382,[],592,386,[],592,3048,[],593,138,[],593,141,[],593,142,[],593,221,[],593,251,[],593,346,[],593,354,[],593,382,[],593,386,[],593,3048,[],594,138,[],594,141,[],594,142,[],594,221,[],594,251,[],594,347,[],594,354,[],594,382,[],594,386,[],595,138,[],595,141,[],595,142,[],595,221,[],595,251,[],595,348,[],595,354,[],595,382,[],595,386,[],595,3048,[],596,138,[],596,141,[],596,142,[],596,144,[],596,149,[],596,160,[],596,221,[],596,225,[],596,251,[],596,277,[],596,339,[],596,349,[],596,354,[],596,382,[],596,386,[],597,138,[],597,141,[],597,142,[],597,144,[],597,149,[],597,160,[],597,221,[],597,225,[],597,251,[],597,277,[],597,339,[],597,350,[],597,354,[],597,382,[],597,386,[],598,138,[],598,141,[],598,142,[],598,221,[],598,251,[],598,351,[],598,354,[],598,382,[],598,386,[],598,3048,[],599,138,[],599,141,[],599,142,[],599,221,[],599,251,[],599,352,[],599,354,[],599,382,[],599,386,[],600,138,[],600,141,[],600,142,[],600,221,[],600,251,[],600,353,[],600,354,[],600,376,[],600,382,[],600,386,[],601,138,[],601,141,[],601,142,[],601,221,[],601,251,[],601,354,[],601,382,[],601,386,[],601,3048,[],602,138,[],602,141,[],602,142,[],602,144,[],602,149,[],602,160,[],602,221,[],602,225,[],602,251,[],602,277,[],602,339,[],602,354,[],602,355,[],602,382,[],602,386,[],603,138,[],603,141,[],603,142,[],603,221,[],603,251,[],603,354,[],603,356,[],603,382,[],603,386,[],604,138,[],604,141,[],604,142,[],604,221,[],604,251,[],604,354,[],604,357,[],604,382,[],604,386,[],605,138,[],605,141,[],605,142,[],605,144,[],605,149,[],605,160,[],605,221,[],605,225,[],605,251,[],605,277,[],605,339,[],605,354,[],605,358,[],605,382,[],605,386,[],606,138,[],606,141,[],606,142,[],606,221,[],606,251,[],606,354,[],606,359,[],606,382,[],606,386,[],606,3048,[],607,138,[],607,141,[],607,142,[],607,221,[],607,251,[],607,354,[],607,360,[],607,377,[],607,382,[],607,386,[],608,138,[],608,141,[],608,142,[],608,221,[],608,251,[],608,354,[],608,361,[],608,382,[],608,386,[],609,138,[],609,141,[],609,142,[],609,221,[],609,251,[],609,354,[],609,362,[],609,378,[],609,382,[],609,386,[],610,138,[],610,141,[],610,142,[],610,221,[],610,251,[],610,354,[],610,363,[],610,382,[],610,386,[],611,138,[],611,141,[],611,142,[],611,221,[],611,251,[],611,354,[],611,364,[],611,382,[],611,386,[],611,3048,[],612,138,[],612,141,[],612,142,[],612,221,[],612,251,[],612,354,[],612,365,[],612,382,[],612,386,[],613,138,[],613,141,[],613,142,[],613,221,[],613,251,[],613,354,[],613,366,[],613,382,[],613,386,[],614,138,[],614,141,[],614,142,[],614,221,[],614,251,[],614,354,[],614,367,[],614,382,[],614,386,[],615,138,[],615,141,[],615,142,[],615,221,[],615,251,[],615,354,[],615,368,[],615,382,[],615,386,[],616,138,[],616,141,[],616,142,[],616,221,[],616,251,[],616,354,[],616,369,[],616,382,[],616,386,[],616,3048,[],617,138,[],617,141,[],617,142,[],617,221,[],617,251,[],617,354,[],617,370,[],617,382,[],617,386,[],618,138,[],618,141,[],618,142,[],618,221,[],618,251,[],618,354,[],618,371,[],618,382,[],618,386,[],618,3048,[],619,138,[],619,141,[],619,142,[],619,221,[],619,251,[],619,354,[],619,372,[],619,382,[],619,386,[],620,138,[],620,141,[],620,142,[],620,221,[],620,251,[],620,354,[],620,373,[],620,382,[],620,386,[],621,138,[],621,141,[],621,142,[],621,221,[],621,251,[],621,354,[],621,374,[],621,382,[],621,386,[],622,138,[],622,141,[],622,142,[],622,221,[],622,251,[],622,354,[],622,375,[],622,382,[],622,386,[],623,138,[],623,141,[],623,142,[],623,221,[],623,251,[],623,354,[],623,376,[],623,382,[],623,386,[],623,3048,[],624,138,[],624,141,[],624,142,[],624,221,[],624,251,[],624,354,[],624,377,[],624,382,[],624,386,[],624,3048,[],625,138,[],625,141,[],625,142,[],625,221,[],625,251,[],625,354,[],625,378,[],625,382,[],625,386,[],625,3048,[],626,138,[],626,141,[],626,142,[],626,221,[],626,251,[],626,354,[],626,379,[],626,382,[],626,386,[],627,138,[],627,141,[],627,142,[],627,221,[],627,251,[],627,354,[],627,369,[],627,380,[],627,382,[],627,386,[],628,138,[],628,141,[],628,142,[],628,221,[],628,251,[],628,354,[],628,381,[],628,382,[],628,386,[],629,138,[],629,141,[],629,142,[],629,221,[],629,251,[],629,354,[],629,382,[],629,386,[],629,3048,[],630,138,[],630,141,[],630,142,[],630,221,[],630,251,[],630,354,[],630,382,[],630,383,[],630,386,[],631,138,[],631,141,[],631,142,[],631,221,[],631,251,[],631,354,[],631,382,[],631,384,[],631,386,[],632,138,[],632,141,[],632,142,[],632,221,[],632,251,[],632,354,[],632,382,[],632,385,[],632,386,[],633,138,[],633,141,[],633,142,[],633,221,[],633,251,[],633,354,[],633,382,[],633,386,[],633,3048,[],634,138,[],634,141,[],634,142,[],634,221,[],634,251,[],634,354,[],634,382,[],634,386,[],634,387,[],635,138,[],635,141,[],635,142,[],635,221,[],635,251,[],635,354,[],635,382,[],635,386,[],635,388,[],636,138,[],636,141,[],636,142,[],636,221,[],636,251,[],636,354,[],636,382,[],636,386,[],636,389,[],636,392,[],637,138,[],637,141,[],637,142,[],637,146,[],637,151,[],637,214,[],637,221,[],637,236,[],637,251,[],637,354,[],637,382,[],637,386,[],637,390,[],638,138,[],638,141,[],638,142,[],638,221,[],638,251,[],638,354,[],638,382,[],638,386,[],638,391,[],639,138,[],639,141,[],639,142,[],639,221,[],639,251,[],639,354,[],639,382,[],639,386,[],639,392,[],639,3048,[],640,138,[],640,141,[],640,142,[],640,221,[],640,251,[],640,354,[],640,382,[],640,386,[],640,393,[],641,138,[],641,140,[],641,141,[],641,142,[],641,144,[],641,149,[],641,160,[],641,221,[],641,225,[],641,251,[],641,277,[],641,339,[],641,354,[],641,382,[],641,386,[],642,138,[],642,141,[],642,142,[],642,145,[],642,150,[],642,152,[],642,172,[],642,221,[],642,223,[],642,232,[],642,251,[],642,293,[],642,354,[],642,382,[],642,386,[],644,138,[],644,141,[],644,142,[],644,145,[],644,150,[],644,153,[],644,172,[],644,221,[],644,223,[],644,232,[],644,251,[],644,293,[],644,354,[],644,382,[],644,386,[],645,138,[],645,141,[],645,142,[],645,144,[],645,149,[],645,154,[],645,160,[],645,221,[],645,225,[],645,251,[],645,277,[],645,339,[],645,354,[],645,382,[],645,386,[],646,138,[],646,141,[],646,142,[],646,144,[],646,149,[],646,155,[],646,160,[],646,221,[],646,225,[],646,251,[],646,277,[],646,339,[],646,354,[],646,382,[],646,386,[],647,138,[],647,141,[],647,142,[],647,157,[],647,200,[],647,221,[],647,251,[],647,354,[],647,382,[],647,386,[],648,138,[],648,141,[],648,142,[],648,158,[],648,221,[],648,251,[],648,354,[],648,382,[],648,386,[],649,138,[],649,141,[],649,142,[],649,143,[],649,148,[],649,159,[],649,172,[],649,221,[],649,223,[],649,224,[],649,246,[],649,251,[],649,264,[],649,293,[],649,320,[],649,354,[],649,382,[],649,386,[],650,138,[],650,141,[],650,142,[],650,160,[],650,221,[],650,251,[],650,277,[],650,339,[],650,354,[],650,382,[],650,386,[],650,3048,[],651,138,[],651,141,[],651,142,[],651,161,[],651,221,[],651,251,[],651,354,[],651,382,[],651,386,[],651,3048,[],652,138,[],652,141,[],652,142,[],652,146,[],652,151,[],652,162,[],652,214,[],652,221,[],652,236,[],652,251,[],652,354,[],652,382,[],652,386,[],653,138,[],653,141,[],653,142,[],653,144,[],653,149,[],653,160,[],653,163,[],653,221,[],653,225,[],653,251,[],653,277,[],653,339,[],653,354,[],653,382,[],653,386,[],654,138,[],654,141,[],654,142,[],654,144,[],654,149,[],654,160,[],654,164,[],654,221,[],654,225,[],654,251,[],654,277,[],654,339,[],654,354,[],654,382,[],654,386,[],655,138,[],655,141,[],655,142,[],655,146,[],655,151,[],655,165,[],655,214,[],655,221,[],655,236,[],655,251,[],655,354,[],655,382,[],655,386,[],656,138,[],656,141,[],656,142,[],656,144,[],656,149,[],656,160,[],656,166,[],656,221,[],656,225,[],656,251,[],656,277,[],656,339,[],656,354,[],656,382,[],656,386,[],657,138,[],657,141,[],657,142,[],657,167,[],657,221,[],657,251,[],657,354,[],657,382,[],657,386,[],658,138,[],658,141,[],658,142,[],658,144,[],658,149,[],658,160,[],658,168,[],658,221,[],658,225,[],658,251,[],658,277,[],658,339,[],658,354,[],658,382,[],658,386,[],659,138,[],659,141,[],659,142,[],659,145,[],659,150,[],659,169,[],659,172,[],659,221,[],659,223,[],659,232,[],659,251,[],659,293,[],659,354,[],659,382,[],659,386,[],660,138,[],660,141,[],660,142,[],660,170,[],660,221,[],660,222,[],660,251,[],660,354,[],660,382,[],660,386,[],661,138,[],661,141,[],661,142,[],661,143,[],661,148,[],661,171,[],661,172,[],661,221,[],661,223,[],661,224,[],661,246,[],661,251,[],661,264,[],661,293,[],661,320,[],661,354,[],661,382,[],661,386,[],662,138,[],662,141,[],662,142,[],662,172,[],662,221,[],662,251,[],662,354,[],662,382,[],662,386,[],663,138,[],663,141,[],663,142,[],663,145,[],663,150,[],663,172,[],663,173,[],663,221,[],663,223,[],663,232,[],663,251,[],663,293,[],663,354,[],663,382,[],663,386,[],664,138,[],664,141,[],664,142,[],664,174,[],664,221,[],664,251,[],664,354,[],664,382,[],664,386,[],665,138,[],665,141,[],665,142,[],665,145,[],665,150,[],665,172,[],665,175,[],665,221,[],665,223,[],665,232,[],665,251,[],665,293,[],665,354,[],665,382,[],665,386,[],666,138,[],666,141,[],666,142,[],666,145,[],666,150,[],666,172,[],666,176,[],666,221,[],666,223,[],666,232,[],666,251,[],666,293,[],666,354,[],666,382,[],666,386,[],667,138,[],667,141,[],667,142,[],667,144,[],667,149,[],667,160,[],667,177,[],667,221,[],667,225,[],667,251,[],667,277,[],667,339,[],667,354,[],667,382,[],667,386,[],668,138,[],668,141,[],668,142,[],668,145,[],668,150,[],668,172,[],668,178,[],668,221,[],668,223,[],668,232,[],668,251,[],668,293,[],668,354,[],668,382,[],668,386,[],669,138,[],669,141,[],669,142,[],669,179,[],669,221,[],669,251,[],669,354,[],669,382,[],669,386,[],669,3048,[],670,138,[],670,141,[],670,142,[],670,144,[],670,149,[],670,160,[],670,180,[],670,221,[],670,225,[],670,251,[],670,277,[],670,339,[],670,354,[],670,382,[],670,386,[],671,138,[],671,141,[],671,142,[],671,146,[],671,151,[],671,181,[],671,214,[],671,221,[],671,236,[],671,251,[],671,354,[],671,382,[],671,386,[],672,138,[],672,141,[],672,142,[],672,145,[],672,150,[],672,172,[],672,182,[],672,221,[],672,223,[],672,232,[],672,251,[],672,293,[],672,354,[],672,382,[],672,386,[],673,138,[],673,141,[],673,142,[],673,183,[],673,221,[],673,251,[],673,354,[],673,382,[],673,386,[],674,138,[],674,141,[],674,142,[],674,145,[],674,150,[],674,172,[],674,184,[],674,221,[],674,223,[],674,232,[],674,251,[],674,293,[],674,354,[],674,382,[],674,386,[],2974,179,[],2974,203,[],2974,243,[],2974,304,[],2974,312,[],3043,214,[],3043,243,[],3043,301,[],3043,310,[],3043,312,[],3043,326,[],3043,344,[]],"feature":[1421,436,1421,437,1421,438,1421,439,1421,440,1421,441,1421,442,1421,443,1421,444,1421,445,1421,446,1421,447,1421,448,1421,449,1421,450,1421,451,1421,452,1421,453,1421,454,1421,455,1421,456,1421,457,1421,458,1421,459,1421,460,1421,461,1421,462,1421,463,1421,464,1421,465,1421,466,1421,467,1421,468,1421,469,1421,470,1421,471,1421,472,1421,474,1421,475,1421,476,1421,477,1421,478,1421,479,1421,480,1421,481,1421,482,1421,483,1421,484,1421,485,1421,486,1421,487,1421,488,1421,489,1421,490,1421,491,1421,492,1421,493,1421,494,1421,495,1421,496,1421,497,1421,498,1421,499,1421,500,1421,501,1421,502,1421,503,1421,504,1421,505,1421,506,1421,507,1421,508,1421,509,1421,510,1421,511,1421,512,1421,513,1421,514,1421,515,1421,516,1421,517,1421,518,1421,519,1421,520,1421,521,1421,522,1421,523,1421,524,1421,525,1421,526,1421,527,1421,528,1421,529,1421,530,1421,531,1421,532,1421,533,1421,534,1421,535,1421,536,1421,537,1421,538,1421,539,1421,540,1421,541,1421,542,1421,543,1421,544,1421,545,1421,546,1421,547,1421,548,1421,549,1421,550,1421,551,1421,552,1421,553,1421,554,1421,555,1421,556,1421,557,1421,558,1421,559,1421,560,1421,561,1421,562,1421,563,1421,564,1421,565,1421,566,1421,567,1421,568,1421,569,1421,570,1421,571,1421,572,1421,573,1421,574,1421,575,1421,576,1421,577,1421,578,1421,579,1421,580,1421,581,1421,582,1421,583,1421,584,1421,585,1421,586,1421,587,1421,588,1421,589,1421,590,1421,591,1421,592,1421,593,1421,594,1421,595,1421,596,1421,597,1421,598,1421,599,1421,600,1421,601,1421,602,1421,603,1421,604,1421,605,1421,606,1421,607,1421,608,1421,609,1421,610,1421,611,1421,612,1421,613,1421,614,1421,615,1421,616,1421,617,1421,618,1421,619,1421,620,1421,621,1421,622,1421,623,1421,624,1421,625,1421,626,1421,627,1421,628,1421,629,1421,630,1421,631,1421,632,1421,633,1421,634,1421,635,1421,636,1421,637,1421,638,1421,639,1421,640,1421,641,1421,642,1421,644,1421,645,1421,646,1421,647,1421,648,1421,649,1421,650,1421,651,1421,652,1421,653,1421,654,1421,655,1421,656,1421,657,1421,658,1421,659,1421,660,1421,661,1421,662,1421,663,1421,664,1421,665,1421,666,1421,667,1421,668,1421,669,1421,670,1421,671,1421,672,1421,673,1421,674,1421,2974,1421,3043,1422,436,1422,437,1422,438,1422,439,1422,440,1422,441,1422,442,1422,443,1422,444,1422,445,1422,446,1422,447,1422,448,1422,449,1422,450,1422,451,1422,452,1422,453,1422,454,1422,455,1422,456,1422,457,1422,458,1422,459,1422,460,1422,461,1422,462,1422,463,1422,464,1422,465,1422,466,1422,467,1422,468,1422,469,1422,470,1422,471,1422,472,1422,473,1422,474,1422,475,1422,476,1422,477,1422,478,1422,479,1422,480,1422,481,1422,482,1422,483,1422,484,1422,485,1422,486,1422,487,1422,488,1422,489,1422,490,1422,491,1422,492,1422,493,1422,494,1422,495,1422,496,1422,497,1422,498,1422,500,1422,501,1422,502,1422,503,1422,504,1422,505,1422,506,1422,507,1422,508,1422,509,1422,510,1422,511,1422,512,1422,513,1422,514,1422,515,1422,516,1422,517,1422,518,1422,519,1422,520,1422,521,1422,522,1422,523,1422,524,1422,525,1422,526,1422,527,1422,528,1422,529,1422,530,1422,531,1422,532,1422,533,1422,534,1422,535,1422,536,1422,537,1422,538,1422,539,1422,540,1422,541,1422,542,1422,543,1422,544,1422,545,1422,546,1422,547,1422,548,1422,549,1422,550,1422,551,1422,552,1422,553,1422,554,1422,555,1422,556,1422,557,1422,558,1422,559,1422,560,1422,561,1422,562,1422,563,1422,564,1422,565,1422,566,1422,567,1422,568,1422,569,1422,570,1422,571,1422,572,1422,573,1422,574,1422,575,1422,576,1422,577,1422,578,1422,579,1422,580,1422,581,1422,582,1422,583,1422,584,1422,585,1422,586,1422,587,1422,588,1422,589,1422,590,1422,591,1422,592,1422,593,1422,594,1422,595,1422,596,1422,597,1422,598,1422,599,1422,600,1422,601,1422,602,1422,603,1422,604,1422,605,1422,606,1422,607,1422,608,1422,609,1422,610,1422,611,1422,612,1422,613,1422,614,1422,615,1422,616,1422,617,1422,618,1422,619,1422,620,1422,621,1422,622,1422,623,1422,624,1422,625,1422,626,1422,627,1422,628,1422,629,1422,630,1422,631,1422,632,1422,633,1422,634,1422,635,1422,636,1422,637,1422,638,1422,639,1422,640,1422,641,1422,642,1422,644,1422,645,1422,646,1422,647,1422,648,1422,649,1422,650,1422,651,1422,652,1422,653,1422,654,1422,655,1422,656,1422,657,1422,658,1422,659,1422,660,1422,661,1422,662,1422,663,1422,664,1422,665,1422,666,1422,667,1422,668,1422,669,1422,670,1422,671,1422,672,1422,673,1422,674,1422,2974,1422,3043,1423,436,1423,437,1423,438,1423,439,1423,440,1423,441,1423,442,1423,443,1423,444,1423,445,1423,446,1423,447,1423,448,1423,449,1423,450,1423,451,1423,452,1423,453,1423,454,1423,455,1423,456,1423,457,1423,458,1423,459,1423,460,1423,461,1423,462,1423,463,1423,464,1423,465,1423,466,1423,467,1423,468,1423,469,1423,470,1423,471,1423,472,1423,473,1423,474,1423,475,1423,476,1423,477,1423,478,1423,479,1423,480,1423,481,1423,482,1423,483,1423,484,1423,485,1423,486,1423,487,1423,488,1423,489,1423,490,1423,491,1423,492,1423,493,1423,494,1423,495,1423,496,1423,497,1423,498,1423,499,1423,500,1423,501,1423,502,1423,503,1423,504,1423,505,1423,506,1423,507,1423,508,1423,509,1423,510,1423,511,1423,512,1423,513,1423,514,1423,515,1423,516,1423,517,1423,518,1423,519,1423,520,1423,521,1423,522,1423,523,1423,524,1423,525,1423,526,1423,527,1423,528,1423,529,1423,530,1423,531,1423,532,1423,533,1423,534,1423,535,1423,536,1423,537,1423,538,1423,539,1423,540,1423,541,1423,542,1423,543,1423,544,1423,545,1423,546,1423,547,1423,548,1423,549,1423,550,1423,551,1423,552,1423,553,1423,554,1423,555,1423,556,1423,557,1423,558,1423,559,1423,560,1423,561,1423,562,1423,563,1423,564,1423,565,1423,566,1423,567,1423,568,1423,569,1423,570,1423,571,1423,572,1423,573,1423,574,1423,575,1423,576,1423,577,1423,578,1423,579,1423,580,1423,581,1423,582,1423,583,1423,584,1423,585,1423,586,1423,587,1423,588,1423,589,1423,590,1423,591,1423,592,1423,593,1423,594,1423,595,1423,596,1423,597,1423,598,1423,599,1423,600,1423,602,1423,603,1423,604,1423,605,1423,606,1423,607,1423,608,1423,609,1423,610,1423,611,1423,612,1423,613,1423,614,1423,615,1423,616,1423,617,1423,618,1423,619,1423,620,1423,621,1423,622,1423,623,1423,624,1423,625,1423,626,1423,627,1423,628,1423,629,1423,630,1423,631,1423,632,1423,633,1423,634,1423,635,1423,636,1423,637,1423,638,1423,639,1423,640,1423,641,1423,642,1423,644,1423,645,1423,646,1423,647,1423,648,1423,649,1423,650,1423,651,1423,652,1423,653,1423,654,1423,655,1423,656,1423,657,1423,658,1423,659,1423,660,1423,661,1423,662,1423,663,1423,664,1423,665,1423,666,1423,667,1423,668,1423,669,1423,670,1423,671,1423,672,1423,673,1423,674,1423,2974,1423,3043,1424,436,1424,437,1424,438,1424,439,1424,440,1424,441,1424,442,1424,443,1424,444,1424,445,1424,446,1424,447,1424,448,1424,449,1424,450,1424,451,1424,452,1424,453,1424,454,1424,455,1424,456,1424,457,1424,458,1424,459,1424,460,1424,461,1424,462,1424,463,1424,464,1424,465,1424,466,1424,467,1424,468,1424,469,1424,470,1424,471,1424,472,1424,473,1424,474,1424,475,1424,476,1424,477,1424,478,1424,479,1424,480,1424,481,1424,482,1424,483,1424,484,1424,485,1424,486,1424,487,1424,488,1424,489,1424,490,1424,491,1424,492,1424,493,1424,494,1424,495,1424,496,1424,497,1424,498,1424,499,1424,500,1424,501,1424,502,1424,503,1424,504,1424,505,1424,506,1424,507,1424,508,1424,509,1424,510,1424,511,1424,512,1424,513,1424,514,1424,515,1424,516,1424,517,1424,518,1424,519,1424,520,1424,521,1424,522,1424,523,1424,524,1424,525,1424,526,1424,527,1424,528,1424,529,1424,530,1424,531,1424,532,1424,533,1424,534,1424,535,1424,536,1424,537,1424,538,1424,539,1424,540,1424,541,1424,542,1424,543,1424,544,1424,545,1424,546,1424,547,1424,548,1424,549,1424,550,1424,551,1424,552,1424,553,1424,554,1424,555,1424,556,1424,557,1424,558,1424,559,1424,560,1424,561,1424,562,1424,563,1424,564,1424,565,1424,566,1424,567,1424,568,1424,569,1424,570,1424,571,1424,572,1424,573,1424,574,1424,575,1424,576,1424,577,1424,578,1424,579,1424,580,1424,581,1424,582,1424,583,1424,584,1424,585,1424,586,1424,587,1424,588,1424,589,1424,590,1424,591,1424,592,1424,593,1424,594,1424,595,1424,596,1424,597,1424,598,1424,599,1424,600,1424,601,1424,602,1424,603,1424,604,1424,605,1424,606,1424,607,1424,608,1424,609,1424,610,1424,611,1424,612,1424,613,1424,614,1424,615,1424,616,1424,617,1424,618,1424,619,1424,620,1424,621,1424,622,1424,623,1424,624,1424,625,1424,626,1424,627,1424,628,1424,630,1424,631,1424,632,1424,633,1424,634,1424,635,1424,636,1424,637,1424,638,1424,639,1424,640,1424,641,1424,642,1424,644,1424,645,1424,646,1424,647,1424,648,1424,649,1424,650,1424,651,1424,652,1424,653,1424,654,1424,655,1424,656,1424,657,1424,658,1424,659,1424,660,1424,661,1424,662,1424,663,1424,664,1424,665,1424,666,1424,667,1424,668,1424,669,1424,670,1424,671,1424,672,1424,673,1424,674,1424,2974,1424,3043,1425,436,1425,437,1425,438,1425,439,1425,440,1425,441,1425,442,1425,443,1425,444,1425,445,1425,446,1425,447,1425,448,1425,449,1425,450,1425,451,1425,452,1425,453,1425,454,1425,455,1425,456,1425,457,1425,458,1425,459,1425,460,1425,461,1425,462,1425,463,1425,464,1425,465,1425,466,1425,467,1425,468,1425,469,1425,470,1425,471,1425,472,1425,473,1425,474,1425,475,1425,476,1425,477,1425,478,1425,479,1425,480,1425,481,1425,482,1425,483,1425,484,1425,485,1425,486,1425,487,1425,488,1425,489,1425,490,1425,491,1425,492,1425,493,1425,494,1425,495,1425,496,1425,497,1425,498,1425,499,1425,500,1425,501,1425,502,1425,503,1425,504,1425,505,1425,506,1425,507,1425,508,1425,509,1425,510,1425,511,1425,512,1425,513,1425,514,1425,515,1425,516,1425,517,1425,518,1425,519,1425,520,1425,521,1425,522,1425,523,1425,524,1425,525,1425,526,1425,527,1425,528,1425,529,1425,530,1425,531,1425,532,1425,533,1425,534,1425,535,1425,536,1425,537,1425,538,1425,539,1425,540,1425,541,1425,542,1425,543,1425,544,1425,545,1425,546,1425,547,1425,548,1425,549,1425,550,1425,551,1425,552,1425,553,1425,554,1425,555,1425,556,1425,557,1425,558,1425,559,1425,560,1425,561,1425,562,1425,563,1425,564,1425,565,1425,566,1425,567,1425,568,1425,569,1425,570,1425,571,1425,572,1425,573,1425,574,1425,575,1425,576,1425,577,1425,578,1425,579,1425,580,1425,581,1425,582,1425,583,1425,584,1425,585,1425,586,1425,587,1425,588,1425,589,1425,590,1425,591,1425,592,1425,593,1425,594,1425,595,1425,596,1425,597,1425,598,1425,599,1425,600,1425,601,1425,602,1425,603,1425,604,1425,605,1425,606,1425,607,1425,608,1425,609,1425,610,1425,611,1425,612,1425,613,1425,614,1425,615,1425,616,1425,617,1425,618,1425,619,1425,620,1425,621,1425,622,1425,623,1425,624,1425,625,1425,626,1425,627,1425,628,1425,629,1425,630,1425,631,1425,632,1425,634,1425,635,1425,636,1425,637,1425,638,1425,639,1425,640,1425,641,1425,642,1425,644,1425,645,1425,646,1425,647,1425,648,1425,649,1425,650,1425,651,1425,652,1425,653,1425,654,1425,655,1425,656,1425,657,1425,658,1425,659,1425,660,1425,661,1425,662,1425,663,1425,664,1425,665,1425,666,1425,667,1425,668,1425,669,1425,670,1425,671,1425,672,1425,673,1425,674,1425,2974,1425,3043,1432,436,1432,437,1432,438,1432,439,1432,440,1432,441,1432,442,1432,443,1432,444,1432,445,1432,446,1432,447,1432,448,1432,449,1432,450,1432,451,1432,452,1432,453,1432,454,1432,455,1432,456,1432,457,1432,458,1432,459,1432,460,1432,461,1432,462,1432,463,1432,464,1432,465,1432,466,1432,467,1432,468,1432,469,1432,470,1432,471,1432,472,1432,473,1432,474,1432,475,1432,476,1432,477,1432,478,1432,479,1432,480,1432,481,1432,482,1432,483,1432,484,1432,485,1432,486,1432,487,1432,488,1432,489,1432,490,1432,491,1432,492,1432,493,1432,494,1432,495,1432,496,1432,497,1432,498,1432,499,1432,500,1432,501,1432,502,1432,503,1432,504,1432,505,1432,506,1432,507,1432,508,1432,509,1432,510,1432,511,1432,512,1432,513,1432,514,1432,515,1432,516,1432,517,1432,518,1432,519,1432,520,1432,521,1432,522,1432,523,1432,524,1432,525,1432,526,1432,527,1432,528,1432,529,1432,530,1432,531,1432,532,1432,533,1432,534,1432,535,1432,536,1432,537,1432,538,1432,539,1432,540,1432,541,1432,542,1432,543,1432,544,1432,545,1432,546,1432,547,1432,548,1432,549,1432,550,1432,551,1432,552,1432,553,1432,554,1432,555,1432,556,1432,557,1432,558,1432,559,1432,560,1432,561,1432,562,1432,563,1432,564,1432,565,1432,566,1432,567,1432,568,1432,569,1432,570,1432,571,1432,572,1432,573,1432,574,1432,575,1432,576,1432,577,1432,578,1432,579,1432,580,1432,581,1432,582,1432,583,1432,584,1432,585,1432,586,1432,587,1432,588,1432,589,1432,590,1432,591,1432,592,1432,593,1432,594,1432,595,1432,596,1432,597,1432,598,1432,599,1432,600,1432,601,1432,602,1432,603,1432,604,1432,605,1432,606,1432,607,1432,608,1432,609,1432,610,1432,611,1432,612,1432,613,1432,614,1432,615,1432,616,1432,617,1432,618,1432,619,1432,620,1432,621,1432,622,1432,623,1432,624,1432,625,1432,626,1432,627,1432,628,1432,629,1432,630,1432,631,1432,632,1432,633,1432,634,1432,635,1432,636,1432,637,1432,638,1432,639,1432,640,1432,641,1432,642,1432,644,1432,645,1432,646,1432,647,1432,648,1432,649,1432,650,1432,651,1432,652,1432,653,1432,654,1432,655,1432,656,1432,657,1432,658,1432,659,1432,660,1432,661,1432,662,1432,663,1432,664,1432,665,1432,666,1432,667,1432,668,1432,669,1432,670,1432,671,1432,672,1432,673,1432,674,1584,437,1584,440,1584,448,1584,455,1584,456,1584,458,1584,462,1584,464,1584,469,1584,476,1584,483,1584,485,1584,497,1584,510,1584,534,1584,542,1584,558,1584,577,1584,578,1584,649,1584,661,1585,437,1585,440,1585,448,1585,455,1585,456,1585,458,1585,462,1585,464,1585,469,1585,476,1585,483,1585,485,1585,497,1585,510,1585,534,1585,542,1585,558,1585,577,1585,578,1585,649,1585,661,1588,444,1588,445,1588,446,1588,466,1588,467,1588,480,1588,481,1588,484,1588,486,1588,488,1588,491,1588,495,1588,498,1588,508,1588,511,1588,513,1588,517,1588,518,1588,527,1588,528,1588,531,1588,532,1588,533,1588,535,1588,553,1588,554,1588,555,1588,557,1588,559,1588,560,1588,566,1588,569,1588,570,1588,576,1588,590,1588,596,1588,597,1588,602,1588,605,1588,641,1588,645,1588,646,1588,653,1588,654,1588,656,1588,658,1588,667,1588,670,1589,444,1589,445,1589,446,1589,466,1589,467,1589,480,1589,481,1589,484,1589,486,1589,488,1589,491,1589,495,1589,498,1589,508,1589,511,1589,513,1589,517,1589,518,1589,527,1589,528,1589,531,1589,532,1589,533,1589,535,1589,553,1589,554,1589,555,1589,557,1589,559,1589,560,1589,566,1589,569,1589,570,1589,576,1589,590,1589,596,1589,597,1589,602,1589,605,1589,641,1589,645,1589,646,1589,653,1589,654,1589,656,1589,658,1589,667,1589,670,1614,438,1614,442,1614,453,1614,490,1614,504,1614,507,1614,516,1614,519,1614,642,1614,644,1614,659,1614,663,1614,665,1614,666,1614,668,1614,672,1614,674,1615,438,1615,442,1615,453,1615,490,1615,504,1615,507,1615,516,1615,519,1615,642,1615,644,1615,659,1615,663,1615,665,1615,666,1615,668,1615,672,1615,674,1629,457,1629,459,1629,463,1629,487,1629,489,1629,502,1629,585,1629,589,1629,591,1629,637,1629,652,1629,655,1629,671,1630,457,1630,459,1630,463,1630,487,1630,489,1630,502,1630,585,1630,589,1630,591,1630,637,1630,652,1630,655,1630,671,1811,468,1811,472,1811,478,1811,506,1811,514,1811,521,1811,544,1811,548,1811,582,1812,468,1812,472,1812,478,1812,506,1812,514,1812,521,1812,544,1812,548,1812,582,2064,647,2070,444,2070,445,2070,446,2070,466,2070,467,2070,480,2070,481,2070,484,2070,486,2070,488,2070,491,2070,495,2070,498,2070,508,2070,511,2070,513,2070,517,2070,518,2070,527,2070,528,2070,531,2070,532,2070,533,2070,535,2070,553,2070,554,2070,555,2070,557,2070,559,2070,560,2070,566,2070,569,2070,570,2070,576,2070,590,2070,591,2070,596,2070,597,2070,602,2070,605,2070,641,2070,645,2070,646,2070,650,2070,653,2070,654,2070,656,2070,658,2070,667,2070,670,2070,2974,2070,3043,2075,591,2131,660,2207,443,2223,448,2226,448,2226,449,2229,450,2233,452,2238,454,2238,2974,2260,466,2262,466,2292,437,2292,438,2292,440,2292,442,2292,448,2292,453,2292,455,2292,456,2292,458,2292,462,2292,464,2292,466,2292,469,2292,475,2292,476,2292,483,2292,485,2292,490,2292,497,2292,504,2292,507,2292,510,2292,516,2292,519,2292,528,2292,534,2292,542,2292,558,2292,577,2292,578,2292,642,2292,644,2292,649,2292,659,2292,661,2292,663,2292,665,2292,666,2292,668,2292,672,2292,674,2294,437,2294,440,2294,448,2294,455,2294,456,2294,458,2294,462,2294,464,2294,469,2294,476,2294,483,2294,485,2294,497,2294,510,2294,534,2294,542,2294,558,2294,577,2294,578,2294,649,2294,661,2295,437,2295,440,2295,448,2295,455,2295,456,2295,458,2295,462,2295,464,2295,469,2295,476,2295,483,2295,485,2295,497,2295,510,2295,534,2295,542,2295,558,2295,577,2295,578,2295,649,2295,661,2297,444,2297,445,2297,446,2297,466,2297,467,2297,480,2297,481,2297,484,2297,486,2297,488,2297,491,2297,495,2297,498,2297,508,2297,511,2297,513,2297,517,2297,518,2297,527,2297,528,2297,531,2297,532,2297,533,2297,535,2297,553,2297,554,2297,555,2297,557,2297,559,2297,560,2297,566,2297,569,2297,570,2297,576,2297,590,2297,591,2297,596,2297,597,2297,602,2297,605,2297,641,2297,645,2297,646,2297,653,2297,654,2297,656,2297,658,2297,667,2297,670,2297,2974,2297,3043,2302,477,2307,479,2313,438,2313,442,2313,453,2313,490,2313,504,2313,507,2313,516,2313,519,2313,642,2313,644,2313,659,2313,663,2313,665,2313,666,2313,668,2313,672,2313,674,2321,457,2321,459,2321,463,2321,487,2321,489,2321,502,2321,585,2321,589,2321,591,2321,637,2321,652,2321,655,2321,671,2348,493,2350,437,2350,440,2350,448,2350,455,2350,456,2350,458,2350,462,2350,464,2350,469,2350,476,2350,483,2350,485,2350,494,2350,497,2350,510,2350,534,2350,542,2350,558,2350,567,2350,577,2350,578,2350,649,2350,661,2355,496,2376,505,2385,509,2432,444,2432,445,2432,446,2432,466,2432,467,2432,480,2432,481,2432,484,2432,486,2432,488,2432,491,2432,495,2432,498,2432,508,2432,511,2432,513,2432,517,2432,518,2432,525,2432,527,2432,528,2432,531,2432,532,2432,533,2432,535,2432,553,2432,554,2432,555,2432,557,2432,559,2432,560,2432,566,2432,569,2432,570,2432,576,2432,590,2432,591,2432,596,2432,597,2432,602,2432,605,2432,641,2432,645,2432,646,2432,650,2432,653,2432,654,2432,656,2432,658,2432,667,2432,670,2432,2974,2432,3043,2435,526,2440,528,2445,530,2459,466,2459,536,2462,537,2471,437,2471,438,2471,440,2471,442,2471,448,2471,453,2471,455,2471,456,2471,458,2471,462,2471,464,2471,466,2471,469,2471,475,2471,476,2471,483,2471,485,2471,490,2471,497,2471,504,2471,507,2471,510,2471,516,2471,519,2471,528,2471,534,2471,540,2471,542,2471,558,2471,577,2471,578,2471,642,2471,644,2471,649,2471,659,2471,661,2471,663,2471,665,2471,666,2471,668,2471,672,2471,674,2478,543,2485,546,2496,552,2518,561,2523,563,2531,437,2531,440,2531,448,2531,455,2531,456,2531,458,2531,462,2531,464,2531,469,2531,476,2531,483,2531,485,2531,497,2531,510,2531,534,2531,542,2531,558,2531,567,2531,577,2531,578,2531,649,2531,661,2550,573,2550,3043,2565,581,2570,583,2582,591,2582,3043,2583,591,2583,3043,2599,600,2616,607,2621,609,2652,627,2672,636,2980,2974,2981,2974,2982,2974,2983,2974,2984,2974,2985,2974,2986,2974,2987,2974,2988,2974,2989,2974,2990,2974,2991,2974,2992,2974,2993,2974,2994,2974,2995,2974,2996,2974,2997,2974,2998,2974,2999,2974,3000,2974,3001,2974,3002,2974,3003,2974,3004,2974,3005,2974,3006,2974,3007,2974,3008,2974,3009,2974,3010,2974,3011,2974,3012,2974,3013,2974,3014,2974,3015,2974,3016,2974,3017,2974,3018,2974,3019,2974,3020,2974,3021,2974,3022,2974,3023,2974,3024,2974,3025,2974,3026,2974,3027,2974,3028,2974,3029,2974,3030,2974,3031,2974,3032,2974,3033,2974,3034,2974,3035,2974,3036,2974,3037,2974,3038,2974,3042,2974,3047,2974],"member":[0,3043,1,3043,2,3043,3,3043,4,3043,5,3043,6,3043,7,3043,8,3043,9,3043,10,3043,11,2974,12,2974,13,2974,14,2974,15,2974,16,2974,17,2974,18,2974,19,2974,20,2974,21,2974,22,2974,23,2974,24,2974,25,2974,26,2974,27,2974,28,2974,29,2974,30,2974,31,2974,32,2974,33,2974,34,2974,35,2974,36,2974,37,2974,38,2974,39,2974,40,2974,41,2974,42,2974,43,2974,44,2974,45,2974,46,2974,47,2974,48,2974,49,2974,50,2974,51,2974,52,2974,53,2974,54,2974,55,2974,56,2974,57,2974,58,2974,59,2974,60,2974,61,2974,62,2974,63,2974,64,2974,65,2974,66,2974,67,2974,68,2974,69,2974,70,2974,71,2974,72,2974,73,2974,74,2974,75,2974,76,2974,77,2974,78,2974,79,2974,80,2974,81,2974,82,2974,83,2974,84,2974,85,2974,86,2974,87,2974,88,2974,89,2974,90,2974,91,2974,92,2974,93,2974,94,2974,95,2974,96,2974,97,2974,98,2974,99,2974,100,2974,101,2974,102,2974,103,2974,104,2974,105,2974,106,2974,107,2974,108,2974,109,2974,110,2974,111,2974,112,2974,113,2974,114,2974,115,2974,116,2974,117,2974,118,2974,119,2974,120,2974,121,2974,122,2974,123,2974,124,2974,125,2974,126,2974,127,2974,128,2974,129,2974,130,2974,131,2974,132,2974,133,2974,134,2974,135,2974,136,2974,137,2974,675,436,676,436,677,437,678,437,679,438,680,439,681,439,682,439,683,440,684,440,685,440,686,441,687,441,688,442,689,442,690,443,691,443,692,444,693,444,694,445,695,446,696,447,697,448,698,448,699,449,700,449,701,450,702,451,703,451,704,452,705,453,706,453,707,454,708,454,709,455,710,455,711,456,712,456,713,456,714,457,715,457,716,458,717,458,718,459,719,459,720,460,721,460,722,461,723,461,724,462,725,462,726,463,727,464,728,464,729,464,730,465,731,466,732,466,733,467,734,468,735,468,736,469,737,469,738,469,739,470,740,470,741,471,742,471,743,472,744,473,745,473,746,474,747,474,748,475,749,476,750,476,751,476,752,477,753,478,754,479,755,479,756,480,757,481,758,482,759,482,760,483,761,483,762,484,763,484,764,485,765,485,766,486,767,487,768,487,769,488,770,489,771,490,772,491,773,491,774,492,775,492,776,493,777,494,778,494,779,495,780,496,781,497,782,498,783,499,784,499,785,500,786,500,787,501,788,501,789,502,790,502,791,503,792,503,793,504,794,505,795,505,796,506,797,506,798,507,799,508,800,509,801,510,802,510,803,511,804,512,805,512,806,513,807,513,808,514,809,515,810,515,811,516,812,516,813,517,814,518,815,519,816,519,817,520,818,520,819,521,820,522,821,522,822,523,823,523,824,524,825,524,826,525,827,526,828,527,829,527,830,527,831,527,832,528,833,528,834,528,835,529,836,530,837,530,838,531,839,532,840,532,841,533,842,533,843,534,844,535,845,535,846,536,847,537,848,538,849,538,850,539,851,539,852,540,853,540,854,541,855,541,856,542,857,542,858,543,859,544,860,545,861,545,862,546,863,546,864,547,865,547,866,548,867,548,868,549,869,549,870,550,871,551,872,551,873,552,874,552,875,553,876,553,877,554,878,555,879,556,880,557,881,557,882,557,883,558,884,558,885,559,886,559,887,560,888,560,889,560,890,561,891,561,892,562,893,563,894,564,895,564,896,565,897,565,898,566,899,566,900,566,901,566,902,567,903,568,904,568,905,569,906,570,907,570,908,571,909,572,910,572,911,573,912,573,913,574,914,574,915,575,916,575,917,576,918,577,919,578,920,578,921,579,922,580,923,580,924,581,925,581,926,582,927,583,928,584,929,584,930,585,931,586,932,586,933,587,934,587,935,588,936,588,937,589,938,590,939,591,940,591,941,592,942,592,943,593,944,593,945,594,946,594,947,595,948,595,949,596,950,597,951,597,952,598,953,598,954,599,955,599,956,600,957,600,958,601,959,601,960,602,961,602,962,603,963,603,964,604,965,605,966,606,967,606,968,607,969,608,970,609,971,610,972,610,973,611,974,611,975,612,976,612,977,613,978,613,979,614,980,614,981,615,982,615,983,616,984,616,985,617,986,617,987,618,988,618,989,619,990,619,991,620,992,621,993,622,994,622,995,623,996,623,997,624,998,624,999,625,1000,625,1001,626,1002,626,1003,627,1004,627,1005,628,1006,628,1007,629,1008,629,1009,630,1010,631,1011,632,1012,632,1013,633,1014,633,1015,634,1016,634,1017,635,1018,635,1019,636,1020,637,1021,638,1022,638,1023,639,1024,639,1025,640,1026,640,1027,641,1028,642,1029,642,1030,643,1031,644,1032,644,1033,645,1034,646,1035,647,1036,648,1037,649,1038,649,1039,649,1040,650,1041,650,1042,651,1043,651,1044,652,1045,652,1046,653,1047,654,1048,654,1049,655,1050,656,1051,656,1052,657,1053,657,1054,658,1055,658,1056,659,1057,659,1058,660,1059,661,1060,661,1061,661,1062,662,1063,662,1064,663,1065,664,1066,665,1067,665,1068,666,1069,666,1070,667,1071,668,1072,669,1073,669,1074,670,1075,670,1076,671,1077,671,1078,672,1079,672,1080,673,1081,673,1082,674,1083,643,1084,394,1085,394,1086,394,1087,394,1088,394,1089,394,1090,394,1091,394,1092,395,1093,395,1094,395,1095,395,1096,395,1097,395,1098,395,1099,395,1100,396,1101,396,1102,396,1103,396,1104,396,1105,396,1106,396,1107,396,1108,397,1109,397,1110,397,1111,397,1112,397,1113,397,1114,397,1115,397,1116,398,1117,398,1118,398,1119,398,1120,398,1121,398,1122,398,1123,398,1124,399,1125,399,1126,399,1127,399,1128,399,1129,399,1130,399,1131,399,1132,400,1133,400,1134,400,1135,400,1136,400,1137,400,1138,400,1139,400,1140,401,1141,401,1142,401,1143,401,1144,401,1145,401,1146,401,1147,401,1148,402,1149,402,1150,402,1151,402,1152,402,1153,402,1154,402,1155,402,1156,403,1157,403,1158,403,1159,403,1160,403,1161,403,1162,403,1163,403,1164,404,1165,404,1166,404,1167,404,1168,404,1169,404,1170,404,1171,404,1172,405,1173,405,1174,405,1175,405,1176,405,1177,405,1178,405,1179,405,1180,406,1181,406,1182,406,1183,406,1184,406,1185,406,1186,406,1187,406,1188,407,1189,407,1190,407,1191,407,1192,407,1193,407,1194,407,1195,407,1196,408,1197,408,1198,408,1199,408,1200,408,1201,408,1202,408,1203,408,1204,409,1205,409,1206,409,1207,409,1208,409,1209,409,1210,409,1211,409,1212,410,1213,410,1214,410,1215,410,1216,410,1217,410,1218,410,1219,410,1220,411,1221,411,1222,411,1223,411,1224,411,1225,411,1226,411,1227,411,1228,412,1229,412,1230,412,1231,412,1232,412,1233,412,1234,412,1235,412,1236,413,1237,413,1238,413,1239,413,1240,413,1241,413,1242,413,1243,413,1244,414,1245,414,1246,414,1247,414,1248,414,1249,414,1250,414,1251,414,1252,415,1253,415,1254,415,1255,415,1256,415,1257,415,1258,415,1259,415,1260,416,1261,416,1262,416,1263,416,1264,416,1265,416,1266,416,1267,416,1268,417,1269,417,1270,417,1271,417,1272,417,1273,417,1274,417,1275,417,1276,418,1277,418,1278,418,1279,418,1280,418,1281,418,1282,418,1283,418,1284,419,1285,419,1286,419,1287,419,1288,419,1289,419,1290,419,1291,419,1292,420,1293,420,1294,420,1295,420,1296,420,1297,420,1298,420,1299,420,1300,421,1301,421,1302,421,1303,421,1304,421,1305,421,1306,421,1307,421,1308,422,1309,422,1310,422,1311,422,1312,422,1313,422,1314,422,1315,422,1316,423,1317,423,1318,423,1319,423,1320,423,1321,423,1322,423,1323,423,1324,424,1325,424,1326,424,1327,424,1328,424,1329,424,1330,424,1331,424,1332,425,1333,425,1334,425,1335,425,1336,425,1337,425,1338,425,1339,425,1340,426,1341,426,1342,426,1343,426,1344,426,1345,426,1346,426,1347,426,1348,427,1349,427,1350,427,1351,427,1352,427,1353,427,1354,427,1355,427,1356,428,1357,428,1358,428,1359,428,1360,428,1361,428,1362,428,1363,428,1364,429,1365,429,1366,429,1367,429,1368,429,1369,429,1370,429,1371,429,1372,430,1373,430,1374,430,1375,430,1376,430,1377,430,1378,430,1379,430,1380,431,1381,431,1382,431,1383,431,1384,431,1385,431,1386,431,1387,431,1388,432,1389,432,1390,432,1391,432,1392,432,1393,432,1394,432,1395,432,1396,433,1397,433,1398,433,1399,433,1400,433,1401,433,1402,433,1403,433,1404,434,1405,434,1406,434,1407,434,1408,434,1409,434,1410,434,1411,434,1412,435,1413,435,1414,435,1415,435,1416,435,1417,435,1418,435,1419,435,1434,436,1435,436,1436,436,1437,436,1438,437,1439,437,1440,437,1441,437,1442,438,1443,438,1444,438,1445,438,1446,439,1447,439,1448,439,1449,440,1450,440,1451,440,1452,440,1453,441,1454,441,1455,441,1456,442,1457,442,1458,442,1459,442,1460,443,1461,443,1462,443,1463,444,1464,444,1465,444,1466,444,1467,445,1468,445,1469,445,1470,445,1471,446,1472,446,1473,446,1474,446,1475,447,1476,447,1477,447,1478,448,1479,448,1480,448,1481,448,1482,449,1483,449,1484,449,1485,449,1486,450,1487,450,1488,450,1489,451,1490,451,1491,451,1492,451,1493,452,1494,452,1495,452,1496,453,1497,453,1498,453,1499,453,1500,454,1501,454,1502,454,1503,455,1504,455,1505,455,1506,455,1507,456,1508,456,1509,456,1510,456,1511,457,1512,457,1513,457,1514,457,1515,458,1516,458,1517,458,1518,458,1519,459,1520,459,1521,459,1522,459,1523,460,1524,460,1525,460,1526,460,1527,461,1528,461,1529,461,1530,461,1531,462,1532,462,1533,462,1534,462,1535,463,1536,463,1537,463,1538,463,1539,464,1540,464,1541,464,1542,464,1543,465,1544,465,1545,465,1546,466,1547,466,1548,466,1549,466,1550,467,1551,467,1552,467,1553,467,1554,468,1555,468,1556,468,1557,468,1558,469,1559,469,1560,469,1561,469,1562,470,1563,470,1564,470,1565,471,1566,471,1567,471,1568,472,1569,472,1570,472,1571,472,1572,473,1573,473,1574,473,1575,473,1576,474,1577,474,1578,474,1579,474,1580,475,1581,475,1582,475,1591,476,1592,476,1593,476,1594,476,1595,477,1596,477,1597,477,1598,478,1599,478,1600,478,1601,478,1602,479,1603,479,1604,479,1605,480,1606,480,1607,480,1608,480,1609,481,1610,481,1611,481,1612,481,1617,482,1618,482,1619,482,1620,483,1621,483,1622,483,1623,483,1624,484,1625,484,1626,484,1627,484,1632,485,1633,485,1634,485,1635,485,1636,486,1637,486,1638,486,1639,486,1640,487,1641,487,1642,487,1643,487,1644,488,1645,488,1646,488,1647,488,1648,489,1649,489,1650,489,1651,489,1652,490,1653,490,1654,490,1655,490,1656,491,1657,491,1658,491,1659,491,1660,492,1661,492,1662,492,1663,492,1664,493,1665,493,1666,493,1667,494,1668,494,1669,494,1670,494,1671,495,1672,495,1673,495,1674,495,1675,496,1676,496,1677,496,1678,497,1679,497,1680,497,1681,497,1682,498,1683,498,1684,498,1685,498,1686,499,1687,499,1688,499,1689,499,1690,500,1691,500,1692,500,1693,501,1694,501,1695,501,1696,501,1697,502,1698,502,1699,502,1700,502,1701,503,1702,503,1703,503,1704,504,1705,504,1706,504,1707,504,1708,505,1709,505,1710,505,1711,506,1712,506,1713,506,1714,506,1715,507,1716,507,1717,507,1718,507,1719,508,1720,508,1721,508,1722,508,1723,509,1724,509,1725,509,1726,510,1727,510,1728,510,1729,510,1730,511,1731,511,1732,511,1733,511,1734,512,1735,512,1736,512,1737,513,1738,513,1739,513,1740,513,1741,514,1742,514,1743,514,1744,514,1745,515,1746,515,1747,515,1748,516,1749,516,1750,516,1751,516,1752,517,1753,517,1754,517,1755,517,1756,518,1757,518,1758,518,1759,518,1760,519,1761,519,1762,519,1763,519,1764,520,1765,520,1766,520,1767,521,1768,521,1769,521,1770,521,1771,522,1772,522,1773,522,1774,522,1775,523,1776,523,1777,523,1778,523,1779,524,1780,524,1781,524,1782,525,1783,525,1784,525,1785,526,1786,526,1787,526,1788,527,1789,527,1790,527,1791,527,1792,528,1793,528,1794,528,1795,528,1796,529,1797,529,1798,529,1799,530,1800,530,1801,530,1802,531,1803,531,1804,531,1805,531,1806,532,1807,532,1808,532,1809,532,1814,533,1815,533,1816,533,1817,533,1818,534,1819,534,1820,534,1821,534,1822,535,1823,535,1824,535,1825,535,1826,536,1827,536,1828,536,1829,537,1830,537,1831,537,1832,538,1833,538,1834,538,1835,539,1836,539,1837,539,1838,540,1839,540,1840,540,1841,540,1843,541,1844,541,1845,541,1846,542,1847,542,1848,542,1849,542,1850,543,1851,543,1852,543,1854,544,1855,544,1856,544,1857,544,1858,545,1859,545,1860,545,1861,546,1862,546,1863,546,1864,547,1865,547,1866,547,1867,548,1868,548,1869,548,1870,548,1871,549,1872,549,1873,549,1874,549,1875,550,1876,550,1877,550,1878,551,1879,551,1880,551,1881,551,1882,552,1883,552,1884,552,1885,553,1886,553,1887,553,1888,553,1889,554,1890,554,1891,554,1892,554,1893,555,1894,555,1895,555,1896,555,1897,556,1898,556,1899,556,1901,557,1902,557,1903,557,1904,557,1906,558,1907,558,1908,558,1909,558,1910,559,1911,559,1912,559,1913,559,1914,560,1915,560,1916,560,1917,560,1918,561,1919,561,1920,561,1921,562,1922,562,1923,562,1924,563,1925,563,1926,563,1927,564,1928,564,1929,564,1930,565,1931,565,1932,565,1933,565,1934,566,1935,566,1936,566,1937,566,1938,567,1939,567,1940,567,1941,568,1942,568,1943,568,1944,568,1945,569,1946,569,1947,569,1948,569,1949,570,1950,570,1951,570,1952,570,1953,571,1954,571,1955,571,1956,572,1957,572,1958,572,1959,573,1960,573,1961,573,1962,574,1963,574,1964,574,1965,574,1972,575,1973,575,1974,575,1975,575,1976,576,1977,576,1978,576,1979,576,1980,577,1981,577,1982,577,1983,577,1984,578,1985,578,1986,578,1987,578,1988,579,1989,579,1990,579,1991,580,1992,580,1993,580,1994,581,1995,581,1996,581,1997,582,1998,582,1999,582,2000,582,2001,583,2002,583,2003,583,2004,584,2005,584,2006,584,2007,584,2008,585,2009,585,2010,585,2011,585,2012,586,2013,586,2014,586,2015,586,2016,587,2017,587,2018,587,2019,587,2022,588,2023,588,2024,588,2025,588,2026,589,2027,589,2028,589,2029,589,2030,590,2031,590,2032,590,2033,590,2035,591,2036,591,2037,591,2038,591,2039,592,2040,592,2041,592,2042,592,2043,593,2044,593,2045,593,2046,593,2047,594,2048,594,2049,594,2050,595,2051,595,2052,595,2053,595,2054,596,2055,596,2056,596,2057,596,2058,597,2059,597,2060,597,2061,597,2076,598,2077,598,2078,598,2079,598,2080,599,2081,599,2082,599,2083,600,2084,600,2085,600,2086,601,2087,601,2088,601,2089,601,2090,602,2091,602,2092,602,2093,602,2094,603,2095,603,2096,603,2097,604,2098,604,2099,604,2100,605,2101,605,2102,605,2103,605,2104,606,2105,606,2106,606,2107,606,2108,607,2109,607,2110,607,2111,608,2112,608,2113,608,2114,609,2115,609,2116,609,2159,610,2160,610,2161,610,2162,611,2163,611,2164,611,2165,611,2166,612,2167,612,2168,612,2169,613,2170,613,2171,613,2172,614,2173,614,2174,614,2188,615,2189,615,2190,615,2191,616,2192,616,2193,616,2194,616,2195,617,2196,617,2197,617,2198,618,2199,618,2200,618,2201,618,2202,619,2203,619,2204,619,2216,620,2217,620,2218,620,2219,621,2220,621,2221,621,2271,622,2272,622,2273,622,2274,623,2275,623,2276,623,2277,623,2278,624,2279,624,2280,624,2281,624,2282,625,2283,625,2284,625,2285,625,2291,223,2324,626,2325,626,2326,626,2327,627,2328,627,2329,627,2330,628,2331,628,2332,628,2363,629,2364,629,2365,629,2366,629,2410,630,2411,630,2412,630,2413,631,2414,631,2415,631,2416,632,2417,632,2418,632,2419,633,2420,633,2421,633,2422,633,2423,634,2424,634,2425,634,2463,635,2464,635,2465,635,2507,636,2508,636,2509,636,2530,320,2539,637,2540,637,2541,637,2542,637,2543,638,2544,638,2545,638,2609,639,2610,639,2611,639,2612,639,2653,640,2654,640,2655,640,2680,641,2681,641,2682,641,2683,641,2684,642,2685,642,2686,642,2687,642,2688,644,2689,644,2690,644,2691,644,2692,645,2693,645,2694,645,2695,645,2696,646,2697,646,2698,646,2699,646,2700,647,2701,647,2702,647,2703,648,2704,648,2705,648,2706,649,2707,649,2708,649,2709,649,2710,650,2711,650,2712,650,2713,650,2714,651,2715,651,2716,651,2717,651,2718,652,2719,652,2720,652,2721,652,2722,653,2723,653,2724,653,2725,653,2726,654,2727,654,2728,654,2729,654,2730,655,2731,655,2732,655,2733,655,2734,656,2735,656,2736,656,2737,656,2738,657,2739,657,2740,657,2741,658,2742,658,2743,658,2744,658,2745,659,2746,659,2747,659,2748,659,2749,660,2750,660,2751,660,2752,661,2753,661,2754,661,2755,661,2756,662,2757,662,2758,662,2759,663,2760,663,2761,663,2762,663,2763,664,2764,664,2765,664,2766,665,2767,665,2768,665,2769,665,2770,666,2771,666,2772,666,2773,666,2774,667,2775,667,2776,667,2777,667,2778,668,2779,668,2780,668,2781,668,2782,669,2783,669,2784,669,2785,669,2786,670,2787,670,2788,670,2789,670,2790,671,2791,671,2792,671,2793,671,2794,672,2795,672,2796,672,2797,672,2798,673,2799,673,2800,673,2801,674,2802,674,2803,674,2804,674,2805,394,2806,394,2807,394,2808,395,2809,395,2810,395,2811,396,2812,396,2813,396,2814,397,2815,397,2816,397,2817,398,2818,398,2819,398,2820,399,2821,399,2822,399,2823,400,2824,400,2825,400,2826,401,2827,401,2828,401,2829,402,2830,402,2831,402,2832,403,2833,403,2834,403,2835,404,2836,404,2837,404,2838,405,2839,405,2840,405,2841,406,2842,406,2843,406,2844,407,2845,407,2846,407,2847,408,2848,408,2849,408,2850,409,2851,409,2852,409,2853,410,2854,410,2855,410,2856,411,2857,411,2858,411,2859,412,2860,412,2861,412,2862,413,2863,413,2864,413,2865,414,2866,414,2867,414,2868,415,2869,415,2870,415,2871,416,2872,416,2873,416,2874,417,2875,417,2876,417,2877,418,2878,418,2879,418,2880,419,2881,419,2882,419,2883,420,2884,420,2885,420,2886,421,2887,421,2888,421,2889,422,2890,422,2891,422,2892,423,2893,423,2894,423,2895,424,2896,424,2897,424,2898,425,2899,425,2900,425,2901,426,2902,426,2903,426,2904,427,2905,427,2906,427,2907,428,2908,428,2909,428,2910,429,2911,429,2912,429,2913,430,2914,430,2915,430,2916,431,2917,431,2918,431,2919,432,2920,432,2921,432,2922,433,2923,433,2924,433,2925,434,2926,434,2927,434,2928,435,2929,435,2930,435],"requirement":[1420,138,1426,139,1428,140,1430,141,1431,142,1583,143,1587,144,1613,145,1628,146,1810,147,1842,148,1853,149,1900,150,1905,151,1966,152,1968,153,1970,154,2020,155,2034,156,2062,157,2065,158,2067,159,2069,160,2071,161,2072,162,2074,163,2117,164,2119,165,2121,166,2123,167,2125,168,2127,169,2129,170,2132,171,2134,172,2136,173,2138,174,2140,175,2142,176,2144,177,2146,178,2148,179,2149,180,2151,181,2153,182,2155,183,2157,184,2175,185,2176,186,2178,187,2180,188,2182,189,2184,190,2186,191,2205,192,2208,193,2210,194,2212,195,2214,196,2222,197,2225,198,2227,199,2230,200,2231,201,2234,202,2236,203,2239,204,2241,205,2243,206,2245,207,2247,208,2249,209,2250,210,2251,211,2253,212,2255,213,2257,214,2259,215,2263,216,2265,217,2267,218,2269,219,2286,220,2288,221,2289,222,2290,223,2293,224,2296,225,2298,226,2300,227,2303,228,2305,229,2308,230,2310,231,2312,232,2314,233,2316,234,2318,235,2320,236,2322,237,2333,238,2335,239,2337,240,2339,241,2341,242,2343,243,2345,244,2346,245,2349,246,2351,247,2353,248,2356,249,2358,250,2360,251,2361,252,2367,253,2368,254,2370,255,2372,256,2374,257,2377,258,2379,259,2381,260,2383,261,2386,262,2388,263,2390,264,2392,265,2394,266,2396,267,2398,268,2400,269,2402,270,2404,271,2406,272,2408,273,2426,274,2427,275,2428,276,2430,277,2433,278,2436,279,2438,280,2441,281,2443,282,2446,283,2448,284,2450,285,2451,286,2453,287,2455,288,2457,289,2460,290,2466,291,2468,292,2470,293,2472,294,2474,295,2476,296,2479,297,2481,298,2483,299,2486,300,2488,301,2490,302,2491,303,2493,304,2494,305,2497,306,2499,307,2501,308,2503,309,2505,310,2510,311,2512,312,2514,313,2516,314,2519,315,2521,316,2524,317,2526,318,2527,319,2529,320,2532,321,2533,322,2535,323,2537,324,2546,325,2548,326,2551,327,2552,328,2553,329,2555,330,2557,331,2559,332,2561,333,2563,334,2566,335,2568,336,2571,337,2572,338,2574,339,2575,340,2576,341,2577,342,2579,343,2581,344,2585,345,2586,346,2587,347,2589,348,2590,349,2592,350,2594,351,2595,352,2597,353,2600,354,2601,355,2603,356,2605,357,2607,358,2613,359,2614,360,2617,361,2619,362,2622,363,2624,364,2625,365,2627,366,2629,367,2631,368,2633,369,2634,370,2636,371,2637,372,2639,373,2641,374,2643,375,2645,376,2646,377,2647,378,2648,379,2650,380,2656,381,2658,382,2659,383,2661,384,2663,385,2665,386,2666,387,2668,388,2670,389,2673,390,2675,391,2677,392,2678,393],"defaultImplementation":[1421,2288,1422,2360,1423,2600,1424,2658,1425,2665,1427,2450,1429,2296,1432,1430,1433,1420,1584,1431,1585,1842,1586,2293,1588,1431,1589,1853,1590,2296,1614,1431,1615,1900,1616,2312,1629,1431,1630,1905,1631,2320,1811,1431,1812,2034,1813,2450,1967,2312,1969,2312,1971,2296,2021,2296,2063,1420,2064,2230,2066,1420,2068,2293,2070,2430,2073,2320,2075,2296,2118,2296,2120,2320,2122,2296,2124,1420,2126,2296,2128,2312,2130,1420,2131,2289,2133,2293,2135,1420,2137,2312,2139,1420,2141,2312,2143,2312,2145,2296,2147,2312,2150,2296,2152,2320,2154,2312,2156,1420,2158,2312,2177,2293,2179,2312,2181,1420,2183,2293,2185,1420,2187,2312,2206,1420,2207,2367,2209,2296,2211,2296,2213,2296,2215,1420,2223,2225,2224,2293,2226,2286,2228,1420,2229,2426,2232,1420,2233,2427,2235,2312,2237,1420,2238,2249,2240,2293,2242,2293,2244,2320,2246,2293,2248,2320,2252,2293,2254,2320,2256,2293,2258,1420,2260,2457,2261,2296,2262,2290,2264,2296,2266,2450,2268,2293,2270,1420,2287,1420,2292,2470,2294,2529,2295,2290,2297,2069,2299,2293,2301,1420,2302,2490,2304,2450,2306,1420,2307,2071,2309,2296,2311,2296,2313,2290,2315,1420,2317,2293,2319,2296,2321,2257,2323,2293,2334,2296,2336,2320,2338,2296,2340,2320,2342,2312,2344,2296,2347,1420,2348,2526,2350,2390,2352,2296,2354,1420,2355,2532,2357,2293,2359,2296,2362,1420,2369,2320,2371,1420,2373,2312,2375,1420,2376,2551,2378,2450,2380,2312,2382,2296,2384,1420,2385,2552,2387,2293,2389,2296,2391,1420,2393,2296,2395,2450,2397,1420,2399,2312,2401,2296,2403,2296,2405,2312,2407,1420,2409,2450,2429,1420,2431,1420,2432,2574,2434,1420,2435,2575,2437,2296,2439,2296,2440,2290,2442,1420,2444,1420,2445,2576,2447,2296,2449,2296,2452,2296,2454,2293,2456,2296,2458,1420,2459,2585,2461,1420,2462,2586,2467,1420,2469,1420,2471,2134,2473,1420,2475,2293,2477,1420,2478,2589,2480,2450,2482,1420,2484,1420,2485,2594,2487,1420,2489,2450,2492,1420,2495,1420,2496,2250,2498,2296,2500,2296,2502,2296,2504,1420,2506,2296,2511,2293,2513,2296,2515,2296,2517,1420,2518,2613,2520,1420,2522,1420,2523,2624,2525,1420,2528,2296,2531,2349,2534,2296,2536,2296,2538,1420,2547,1420,2549,1420,2550,2175,2554,2296,2556,2293,2558,2293,2560,1420,2562,1420,2564,1420,2565,2636,2567,2450,2569,1420,2570,2571,2573,2320,2578,2320,2580,2296,2582,2361,2583,2074,2584,2320,2588,1420,2591,2296,2593,2296,2596,1420,2598,1420,2599,2645,2602,2296,2604,1420,2606,1420,2608,2296,2615,1420,2616,2646,2618,1420,2620,1420,2621,2647,2623,1420,2626,1420,2628,1420,2630,1420,2632,1420,2635,1420,2638,1420,2640,1420,2642,1420,2644,1420,2649,1420,2651,1420,2652,2633,2657,1420,2660,1420,2662,1420,2664,1420,2667,1420,2669,1420,2671,1420,2672,2677,2674,2320,2676,1420,2679,1420]},"hints":[0,1420,1,2257,2,2296,3,2320,4,2343,5,2450,6,2488,7,2505,8,2512,9,2548,10,2581,131,2493,132,1420,133,2148,134,2236,135,2296,136,2343,137,2512,675,3049,699,3049,702,3049,720,3049,722,3049,744,3049,746,3049,774,3049,777,3049,783,3049,787,3049,820,3049,822,3049,828,3051,852,3049,868,3049,871,3049,888,3053,896,3049,898,3055,903,3049,913,3049,915,3049,928,3049,931,3049,933,3049,935,3049,941,3049,943,3049,947,3049,952,3049,958,3049,966,3049,973,3049,983,3049,987,3049,995,3049,997,3049,999,3049,1007,3049,1013,3049,1023,3049,1040,3049,1042,3049,1072,3049,1421,1421,1422,1422,1423,1423,1424,1424,1425,1425,1432,1432,1434,1431,1436,1420,1437,2175,1438,1583,1439,1420,1440,2293,1441,2176,1442,1613,1443,1420,1444,2312,1445,2178,1446,1431,1447,1420,1448,2180,1449,1583,1450,1420,1451,2293,1452,2182,1453,1431,1454,1420,1455,2184,1456,1613,1457,1420,1458,2312,1459,2186,1460,1431,1461,1420,1462,2205,1463,1587,1464,1420,1465,2296,1466,2208,1467,1587,1468,1420,1469,2296,1470,2210,1471,1587,1472,1420,1473,2296,1474,2212,1475,1431,1476,1420,1477,2214,1478,1583,1479,1420,1480,2293,1481,2222,1482,1431,1484,1420,1485,2225,1486,1431,1487,1420,1488,2227,1489,1431,1491,1420,1492,2230,1493,1431,1494,1420,1495,2231,1496,1613,1497,1420,1498,2312,1499,2234,1500,1431,1501,1420,1502,2236,1503,1583,1504,1420,1505,2293,1506,2239,1507,1583,1508,1420,1509,2293,1510,2241,1511,1628,1512,1420,1513,2320,1514,2243,1515,1583,1516,1420,1517,2293,1518,2245,1519,1628,1520,1420,1521,2320,1522,2247,1523,1431,1525,1420,1526,2249,1527,1431,1529,1420,1530,2250,1531,1583,1532,1420,1533,2293,1534,2251,1535,1628,1536,1420,1537,2320,1538,2253,1539,1583,1540,1420,1541,2293,1542,2255,1543,1431,1544,1420,1545,2257,1546,1587,1547,1420,1548,2296,1549,2259,1550,1587,1551,1420,1552,2296,1553,2263,1554,1810,1555,1420,1556,2450,1557,2265,1558,1583,1559,1420,1560,2293,1561,2267,1562,1431,1563,1420,1564,2269,1565,1431,1566,1420,1567,2286,1568,1810,1569,1420,1570,2450,1571,1426,1572,1431,1574,1420,1575,2288,1576,1431,1578,1420,1579,2289,1580,1431,1581,1420,1582,2290,1584,1584,1585,1585,1588,1588,1589,1589,1591,1583,1592,1420,1593,2293,1594,2298,1595,1431,1596,1420,1597,2300,1598,1810,1599,1420,1600,2450,1601,2303,1602,1431,1603,1420,1604,2305,1605,1587,1606,1420,1607,2296,1608,2308,1609,1587,1610,1420,1611,2296,1612,2310,1614,1614,1615,1615,1617,1431,1618,1420,1619,2314,1620,1583,1621,1420,1622,2293,1623,2316,1624,1587,1625,1420,1626,2296,1627,2318,1629,1629,1630,1630,1632,1583,1633,1420,1634,2293,1635,2322,1636,1587,1637,1420,1638,2296,1639,2333,1640,1628,1641,1420,1642,2320,1643,2335,1644,1587,1645,1420,1646,2296,1647,2337,1648,1628,1649,1420,1650,2320,1651,2339,1652,1613,1653,1420,1654,2312,1655,2341,1656,1587,1657,1420,1658,2296,1659,2343,1660,1431,1662,1420,1663,2345,1664,1431,1665,1420,1666,2346,1667,1431,1669,1420,1670,2349,1671,1587,1672,1420,1673,2296,1674,2351,1675,1431,1676,1420,1677,2353,1678,1583,1679,1420,1680,2293,1681,2356,1682,1587,1683,1420,1684,2296,1685,2358,1686,1431,1688,1420,1689,2360,1690,1431,1691,1420,1692,2361,1693,1431,1695,1420,1696,2367,1697,1628,1698,1420,1699,2320,1700,2368,1701,1431,1702,1420,1703,2370,1704,1613,1705,1420,1706,2312,1707,2372,1708,1431,1709,1420,1710,2374,1711,1810,1712,1420,1713,2450,1714,2377,1715,1613,1716,1420,1717,2312,1718,2379,1719,1587,1720,1420,1721,2296,1722,2381,1723,1431,1724,1420,1725,2383,1726,1583,1727,1420,1728,2293,1729,2386,1730,1587,1731,1420,1732,2296,1733,2388,1734,1431,1735,1420,1736,2390,1737,1587,1738,1420,1739,2296,1740,2392,1741,1810,1742,1420,1743,2450,1744,2394,1745,1431,1746,1420,1747,2396,1748,1613,1749,1420,1750,2312,1751,2398,1752,1587,1753,1420,1754,2296,1755,2400,1756,1420,1757,2402,1758,2296,1759,1587,1760,1613,1761,1420,1762,2312,1763,2404,1764,1431,1765,1420,1766,2406,1767,1810,1768,1420,1769,2450,1770,2408,1771,1431,1773,1420,1774,2426,1775,1431,1777,1420,1778,2427,1779,1431,1780,1420,1781,2428,1782,1431,1783,1420,1784,2430,1785,1431,1786,1420,1787,2433,1788,1587,1789,1420,1790,2296,1791,2436,1792,1587,1793,1420,1794,2296,1795,2438,1796,1431,1797,1420,1798,2441,1799,1431,1800,1420,1801,2443,1802,1587,1803,1420,1804,2296,1805,2446,1806,1587,1807,1420,1808,2296,1809,2448,1811,1811,1812,1812,1814,1587,1815,1420,1816,2296,1817,2451,1818,1583,1819,1420,1820,2293,1821,2453,1822,1587,1823,1420,1824,2296,1825,2455,1826,1431,1827,1420,1828,2457,1829,1431,1830,1420,1831,2460,1832,1431,1833,1420,1834,2466,1835,1431,1836,1420,1837,2468,1838,1431,1840,1420,1841,2470,1843,1431,1844,1420,1845,2472,1846,1583,1847,1420,1848,2293,1849,2474,1850,1431,1851,1420,1852,2476,1854,1810,1855,1420,1856,2450,1857,2479,1858,1431,1859,1420,1860,2481,1861,1431,1862,1420,1863,2483,1864,1431,1865,1420,1866,2486,1867,1810,1868,1420,1869,2450,1870,2488,1871,1431,1873,1420,1874,2490,1875,1431,1876,1420,1877,2491,1878,1431,1880,1420,1881,2493,1882,1431,1883,1420,1884,2494,1885,1587,1886,1420,1887,2296,1888,2497,1889,1587,1890,1420,1891,2296,1892,2499,1893,1587,1894,1420,1895,2296,1896,2501,1897,1431,1898,1420,1899,2503,1901,1587,1902,1420,1903,2296,1904,2505,1906,1583,1907,1420,1908,2293,1909,2510,1910,1587,1911,1420,1912,2296,1913,2512,1914,1587,1915,1420,1916,2296,1917,2514,1918,1431,1919,1420,1920,2516,1921,1431,1922,1420,1923,2519,1924,1431,1925,1420,1926,2521,1927,1431,1928,1420,1929,2524,1930,1431,1932,1420,1933,2526,1934,1587,1935,1420,1936,2296,1937,2527,1938,1431,1939,1420,1940,2529,1941,1431,1943,1420,1944,2532,1945,1587,1946,1420,1947,2296,1948,2533,1949,1587,1950,1420,1951,2296,1952,2535,1953,1431,1954,1420,1955,2537,1956,1431,1957,1420,1958,2546,1959,1431,1960,1420,1961,2548,1962,1431,1964,1420,1965,2551,1972,1431,1974,1420,1975,2552,1976,1587,1977,1420,1978,2296,1979,2553,1980,1420,1981,2555,1982,2293,1983,1583,1984,1583,1985,1420,1986,2293,1987,2557,1988,1431,1989,1420,1990,2559,1991,1431,1992,1420,1993,2561,1994,1431,1995,1420,1996,2563,1997,1810,1998,1420,1999,2450,2000,2566,2001,1431,2002,1420,2003,2568,2004,1431,2006,1420,2007,2571,2008,1628,2009,1420,2010,2320,2011,2572,2012,1431,2014,1420,2015,2574,2016,1431,2018,1420,2019,2575,2022,1431,2024,1420,2025,2576,2026,1628,2027,1420,2028,2320,2029,2577,2030,1587,2031,1420,2032,2296,2033,2579,2035,1628,2036,1420,2037,2320,2038,2581,2039,1431,2041,1420,2042,2585,2043,1431,2045,1420,2046,2586,2047,1431,2048,1420,2049,2587,2050,1431,2052,1420,2053,2589,2054,1587,2055,1420,2056,2296,2057,2590,2058,1587,2059,1420,2060,2296,2061,2592,2064,2064,2070,2070,2075,2075,2076,1431,2078,1420,2079,2594,2080,1431,2081,1420,2082,2595,2083,1431,2084,1420,2085,2597,2086,1431,2088,1420,2089,2600,2090,1587,2091,1420,2092,2296,2093,2601,2094,1431,2095,1420,2096,2603,2097,1431,2098,1420,2099,2605,2100,1587,2101,1420,2102,2296,2103,2607,2104,1431,2106,1420,2107,2613,2108,1431,2109,1420,2110,2614,2111,1431,2112,1420,2113,2617,2114,1431,2115,1420,2116,2619,2131,2131,2159,1431,2160,1420,2161,2622,2162,1431,2164,1420,2165,2624,2166,1431,2167,1420,2168,2625,2169,1431,2170,1420,2171,2627,2172,1431,2173,1420,2174,2629,2188,1431,2189,1420,2190,2631,2191,1431,2193,1420,2194,2633,2195,1431,2196,1420,2197,2634,2198,1431,2200,1420,2201,2636,2202,1431,2203,1420,2204,2637,2207,2207,2216,1431,2217,1420,2218,2639,2219,1431,2220,1420,2221,2641,2223,2223,2226,2226,2229,2229,2233,2233,2238,2238,2260,2260,2262,2262,2271,1431,2272,1420,2273,2643,2274,1431,2276,1420,2277,2645,2278,1431,2280,1420,2281,2646,2282,1431,2284,1420,2285,2647,2292,2292,2294,2294,2295,2295,2297,2297,2302,2302,2307,2307,2313,2313,2321,2321,2324,1431,2325,1420,2326,2648,2327,1431,2328,1420,2329,2650,2330,1431,2331,1420,2332,2656,2348,2348,2350,2350,2355,2355,2363,1431,2365,1420,2366,2658,2376,2376,2385,2385,2410,1431,2411,1420,2412,2659,2413,1431,2414,1420,2415,2661,2416,1431,2417,1420,2418,2663,2419,1431,2421,1420,2422,2665,2423,1431,2424,1420,2425,2666,2432,2432,2435,2435,2440,2440,2445,2445,2459,2459,2462,2462,2463,1431,2464,1420,2465,2668,2471,2471,2478,2478,2485,2485,2496,2496,2507,1431,2508,1420,2509,2670,2518,2518,2523,2523,2531,2531,2539,1628,2540,1420,2541,2320,2542,2673,2543,1431,2544,1420,2545,2675,2550,2550,2565,2565,2570,2570,2582,2582,2583,2583,2599,2599,2609,1431,2611,1420,2612,2677,2616,2616,2621,2621,2652,2652,2653,1431,2654,1420,2655,2678,2672,2672,2680,1587,2681,1420,2682,2296,2683,1428,2684,1613,2685,1420,2686,2312,2687,1966,2688,1613,2689,1420,2690,2312,2691,1968,2692,1587,2693,1420,2694,2296,2695,1970,2696,1587,2697,1420,2698,2296,2699,2020,2700,1431,2701,1420,2702,2062,2703,1431,2704,1420,2705,2065,2706,1583,2707,1420,2708,2293,2709,2067,2710,1431,2712,1420,2713,2069,2714,1431,2716,1420,2717,2071,2718,1628,2719,1420,2720,2320,2721,2072,2722,1587,2723,1420,2724,2296,2725,2074,2726,1587,2727,1420,2728,2296,2729,2117,2730,1628,2731,1420,2732,2320,2733,2119,2734,1587,2735,1420,2736,2296,2737,2121,2738,1431,2739,1420,2740,2123,2741,1587,2742,1420,2743,2296,2744,2125,2745,1613,2746,1420,2747,2312,2748,2127,2749,1431,2750,1420,2751,2129,2752,1583,2753,1420,2754,2293,2755,2132,2756,1431,2757,1420,2758,2134,2759,1613,2760,1420,2761,2312,2762,2136,2763,1431,2764,1420,2765,2138,2766,1613,2767,1420,2768,2312,2769,2140,2770,1613,2771,1420,2772,2312,2773,2142,2774,1587,2775,1420,2776,2296,2777,2144,2778,1613,2779,1420,2780,2312,2781,2146,2782,1431,2784,1420,2785,2148,2786,1587,2787,1420,2788,2296,2789,2149,2790,1628,2791,1420,2792,2320,2793,2151,2794,1613,2795,1420,2796,2312,2797,2153,2798,1431,2799,1420,2800,2155,2801,1613,2802,1420,2803,2312,2804,2157,2980,3041,2981,3040,2982,2982,2983,2983,2984,2984,2985,2985,2986,2986,2987,2987,2988,2988,2989,2989,2990,2990,2991,2991,2992,2992,2993,2993,2994,2994,2995,2995,2996,2996,2997,2997,2998,2998,2999,2999,3000,3000,3001,3001,3002,3002,3003,3003,3004,3004,3005,3005,3006,3006,3007,3007,3008,3008,3009,3009,3010,3010,3011,3011,3012,3012,3013,3013,3014,3014,3015,3015,3016,3016,3017,3017,3018,3018,3019,3019,3020,3020,3021,3021,3022,3022,3023,3023,3024,3024,3025,3025,3026,3026,3027,3027,3028,3028,3029,3029,3030,3030,3031,3031,3032,3032,3033,3033,3034,3034,3035,3035,3036,3036,3037,3037,3038,3038,3042,3042,3047,3047],"sourcemap":[{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/BinaryOperatorExprConvenienceInitializers.swift","symbols":[15,9,886]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/BooleanLiteralExprConvenienceInitializers.swift","symbols":[15,9,889,21,9,888]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/ClassDeclConvenienceInitializers.swift","symbols":[16,9,1060]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/EnumDeclConvenienceInitializers.swift","symbols":[16,9,1038]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/ExtensionDeclConvenienceInitializers.swift","symbols":[16,9,750]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/FloatLiteralExprConvenienceInitializers.swift","symbols":[13,9,831,19,9,828]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/Format.swift","symbols":[14,14,643,15,13,1083,19,9,1030]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/FunctionCallExprConvenienceInitializers.swift","symbols":[16,9,834]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/FunctionDeclConvenienceInitializers.swift","symbols":[16,9,712]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/IdentifierExprConvenienceInitializers.swift","symbols":[13,9,773]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/IdentifierPatternConvenienceInitializers.swift","symbols":[13,9,867]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/IntegerLiteralExprConvenienceInitializers.swift","symbols":[15,9,901,21,9,898]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/ProtocolDeclConvenienceInitializers.swift","symbols":[16,9,728]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/SimpleTypeIdentifierConvenienceInitializers.swift","symbols":[15,9,940]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/SourceFileConvenienceInitializers.swift","symbols":[14,9,680]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/StringConvenienceInitializers.swift","symbols":[13,14,10,19,14,6,25,14,4,31,14,7,37,14,8,43,14,1,49,14,9,56,14,3,63,14,5,70,14,2,73,14,0]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/StringLiteralExprConvenienceInitializers.swift","symbols":[15,9,882]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/StructDeclConvenienceInitializers.swift","symbols":[16,9,684]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/TypeAnnotationConvenienceInitializers.swift","symbols":[13,9,786]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/VariableDeclConvenienceInitializers.swift","symbols":[15,9,738]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/BuildableBaseProtocols.swift","symbols":[17,16,148,22,7,1842,25,16,143,30,7,1583,35,7,1586,45,7,1585,55,7,1584,61,16,149,66,7,1853,69,16,144,74,7,1587,79,7,1590,89,7,1589,99,7,1588,105,16,156,110,7,2034,113,16,147,118,7,1810,123,7,1813,133,7,1812,143,7,1811,149,16,150,154,7,1900,157,16,145,162,7,1613,167,7,1616,177,7,1615,187,7,1614,193,16,141,198,7,1430,201,16,142,206,7,1431,211,7,1433,221,7,1432,228,16,151,233,7,1905,236,16,146,241,7,1628,246,7,1631,256,7,1630,266,7,1629]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/BuildableCollectionNodes.swift","symbols":[17,14,540,23,9,853,27,9,852,31,14,1839,42,14,1838,47,14,1841,54,14,1840,60,14,592,66,9,942,70,9,941,74,14,2040,85,14,2039,90,14,2042,97,14,2041,103,14,522,109,9,821,113,9,820,117,14,1772,128,14,1771,133,14,1774,140,14,1773,146,14,595,152,9,948,156,9,947,160,14,2051,171,14,2050,176,14,2053,183,14,2052,189,14,601,195,9,959,199,9,958,203,14,2087,214,14,2086,219,14,2089,226,14,2088,232,14,587,238,9,934,242,9,933,246,14,2017,257,14,2016,262,14,2019,269,14,2018,275,14,650,281,9,1041,285,9,1040,289,14,2711,300,14,2710,305,14,2713,312,14,2712,318,14,606,324,9,967,328,9,966,332,14,2105,343,14,2104,348,14,2107,355,14,2106,361,14,523,367,9,823,371,9,822,375,14,1776,386,14,1775,391,14,1778,398,14,1777,404,14,639,410,9,1024,414,9,1023,418,14,2610,429,14,2609,434,14,2612,441,14,2611,447,14,651,453,9,1043,457,9,1042,461,14,2715,472,14,2714,477,14,2717,484,14,2716,490,14,598,496,9,953,500,9,952,504,14,2077,515,14,2076,520,14,2079,527,14,2078,533,14,565,539,9,897,543,9,896,547,14,1931,558,14,1930,563,14,1933,570,14,1932,576,14,549,582,9,869,586,9,868,590,14,1872,601,14,1871,606,14,1874,613,14,1873,619,14,494,625,9,778,629,9,777,633,14,1668,644,14,1667,649,14,1670,656,14,1669,662,14,460,668,9,721,672,9,720,676,14,1524,687,14,1523,692,14,1526,699,14,1525,705,14,436,711,9,676,715,9,675,719,14,1435,730,14,1434,735,14,1437,742,14,1436,748,14,449,754,9,700,758,9,699,762,14,1483,773,14,1482,778,14,1485,785,14,1484,791,14,568,797,9,904,801,9,903,805,14,1942,816,14,1941,821,14,1944,828,14,1943,834,14,574,840,9,914,844,9,913,848,14,1963,859,14,1962,864,14,1965,871,14,1964,877,14,492,883,9,775,887,9,774,891,14,1661,900,14,1660,905,14,1663,912,14,1662,918,14,633,924,9,1014,928,9,1013,932,14,2420,943,14,2419,948,14,2422,955,14,2421,961,14,616,967,9,984,971,9,983,975,14,2192,986,14,2191,991,14,2194,998,14,2193,1004,14,669,1010,9,1073,1014,9,1072,1018,14,2783,1027,14,2782,1032,14,2785,1039,14,2784,1045,14,551,1051,9,872,1055,9,871,1059,14,1879,1068,14,1878,1073,14,1881,1080,14,1880,1086,14,473,1092,9,745,1096,9,744,1100,14,1573,1111,14,1572,1116,14,1575,1123,14,1574,1129,14,629,1135,9,1008,1139,9,1007,1143,14,2364,1154,14,2363,1159,14,2366,1166,14,2365,1172,14,461,1178,9,723,1182,9,722,1186,14,1528,1197,14,1527,1202,14,1530,1209,14,1529,1215,14,625,1221,9,1000,1225,9,999,1229,14,2283,1240,14,2282,1245,14,2285,1252,14,2284,1258,14,499,1264,9,784,1268,9,783,1272,14,1687,1283,14,1686,1288,14,1689,1295,14,1688,1301,14,501,1307,9,788,1311,9,787,1315,14,1694,1326,14,1693,1331,14,1696,1338,14,1695,1344,14,451,1350,9,703,1354,9,702,1358,14,1490,1369,14,1489,1374,14,1492,1381,14,1491,1387,14,474,1393,9,747,1397,9,746,1401,14,1577,1412,14,1576,1417,14,1579,1424,14,1578,1430,14,586,1436,9,932,1440,9,931,1444,14,2013,1455,14,2012,1460,14,2015,1467,14,2014,1473,14,611,1479,9,974,1483,9,973,1487,14,2163,1498,14,2162,1503,14,2165,1510,14,2164,1516,14,588,1522,9,936,1526,9,935,1530,14,2023,1541,14,2022,1546,14,2025,1553,14,2024,1559,14,623,1565,9,996,1569,9,995,1573,14,2275,1584,14,2274,1589,14,2277,1596,14,2276,1602,14,624,1608,9,998,1612,9,997,1616,14,2279,1627,14,2278,1632,14,2281,1639,14,2280,1645,14,593,1651,9,944,1655,9,943,1659,14,2044,1670,14,2043,1675,14,2046,1682,14,2045,1688,14,575,1694,9,916,1698,9,915,1702,14,1973,1713,14,1972,1718,14,1975,1725,14,1974,1731,14,618,1737,9,988,1741,9,987,1745,14,2199,1756,14,2198,1761,14,2201,1768,14,2200,1774,14,584,1780,9,929,1784,9,928,1788,14,2005,1799,14,2004,1804,14,2007,1811,14,2006]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/BuildableNodes.swift","symbols":[17,14,475,27,9,748,53,14,1580,59,14,1582,66,14,1581,71,14,662,81,9,1063,96,9,1062,122,14,2756,128,14,2758,135,14,2757,140,14,667,148,9,1070,171,14,2774,177,14,2777,184,14,2776,191,14,2775,195,14,517,201,9,813,221,14,1752,227,14,1755,234,14,1754,241,14,1753,245,14,646,255,9,1034,282,14,2696,288,14,2699,295,14,2698,302,14,2697,306,14,658,314,9,1054,326,9,1055,349,14,2741,355,14,2744,362,14,2743,369,14,2742,373,14,526,381,9,827,404,14,1785,410,14,1787,417,14,1786,422,14,541,432,9,855,447,9,854,473,14,1843,479,14,1845,486,14,1844,491,14,491,499,9,772,521,14,1656,527,14,1659,534,14,1658,541,14,1657,545,14,467,551,9,733,571,14,1550,577,14,1553,584,14,1552,591,14,1551,595,14,495,601,9,779,621,14,1671,627,14,1674,634,14,1673,641,14,1672,645,14,596,651,9,949,671,14,2054,677,14,2057,684,14,2056,691,14,2055,695,14,486,701,9,766,721,14,1636,727,14,1639,734,14,1638,741,14,1637,745,14,466,751,9,732,760,9,731,780,14,1546,786,14,1549,793,14,1548,800,14,1547,804,14,481,810,9,757,830,14,1609,836,14,1612,843,14,1611,850,14,1610,854,14,480,860,9,756,880,14,1605,886,14,1608,893,14,1607,900,14,1606,904,14,518,910,9,814,930,14,1759,936,14,1757,943,14,1758,950,14,1756,954,14,554,960,9,877,980,14,1889,986,14,1892,993,14,1891,1000,14,1890,1004,14,555,1010,9,878,1030,14,1893,1036,14,1896,1043,14,1895,1050,14,1894,1054,14,569,1060,9,905,1080,14,1945,1086,14,1948,1093,14,1947,1100,14,1946,1104,14,602,1112,9,960,1123,9,961,1146,14,2090,1152,14,2093,1159,14,2092,1166,14,2091,1170,14,570,1178,9,906,1189,9,907,1212,14,1949,1218,14,1952,1225,14,1951,1232,14,1950,1236,14,559,1242,9,885,1261,14,1910,1267,14,1913,1274,14,1912,1281,14,1911,1285,14,656,1295,9,1050,1311,9,1051,1337,14,2734,1343,14,2737,1350,14,2736,1357,14,2735,1361,14,527,1367,9,829,1376,9,830,1396,14,1788,1402,14,1791,1409,14,1790,1416,14,1789,1420,14,670,1430,9,1075,1445,9,1074,1471,14,2786,1477,14,2789,1484,14,2788,1491,14,2787,1495,14,654,1505,9,1048,1520,9,1047,1546,14,2726,1552,14,2729,1559,14,2728,1566,14,2727,1570,14,488,1580,9,769,1607,14,1644,1613,14,1647,1620,14,1646,1627,14,1645,1631,14,536,1643,9,846,1673,14,1826,1679,14,1828,1686,14,1827,1691,14,450,1699,9,701,1722,14,1486,1728,14,1488,1735,14,1487,1740,14,543,1752,9,858,1782,14,1850,1788,14,1852,1795,14,1851,1800,14,566,1806,9,899,1815,9,900,1835,14,1934,1841,14,1937,1848,14,1936,1855,14,1935,1859,14,560,1865,9,887,1885,14,1914,1891,14,1917,1898,14,1916,1905,14,1915,1909,14,446,1923,9,695,1956,14,1471,1962,14,1474,1969,14,1473,1976,14,1472,1980,14,531,1992,9,838,2021,14,1802,2027,14,1805,2034,14,1804,2041,14,1803,2045,14,645,2053,9,1033,2076,14,2692,2082,14,2695,2089,14,2694,2096,14,2693,2100,14,641,2110,9,1027,2137,14,2680,2143,14,2683,2150,14,2682,2157,14,2681,2161,14,653,2167,9,1046,2186,14,2722,2192,14,2725,2199,14,2724,2206,14,2723,2210,14,561,2224,9,891,2243,9,890,2275,14,1918,2281,14,1920,2288,14,1919,2293,14,613,2303,9,978,2318,9,977,2344,14,2169,2350,14,2171,2357,14,2170,2362,14,452,2370,9,704,2393,14,1493,2399,14,1495,2406,14,1494,2411,14,524,2429,9,824,2453,9,825,2491,14,1779,2497,14,1781,2504,14,1780,2509,14,444,2521,9,693,2538,9,692,2567,14,1463,2573,14,1466,2580,14,1465,2587,14,1464,2591,14,605,2597,9,965,2616,14,2100,2622,14,2103,2629,14,2102,2636,14,2101,2640,14,636,2650,9,1019,2676,14,2507,2682,14,2509,2689,14,2508,2694,14,528,2710,9,833,2731,9,832,2766,14,1792,2772,14,1795,2779,14,1794,2786,14,1793,2790,14,484,2806,9,763,2827,9,762,2862,14,1624,2868,14,1627,2875,14,1626,2882,14,1625,2886,14,590,2894,9,938,2917,14,2030,2923,14,2033,2930,14,2032,2937,14,2031,2941,14,508,2949,9,799,2972,14,1719,2978,14,1722,2985,14,1721,2992,14,1720,2996,14,533,3004,9,841,3015,9,842,3038,14,1814,3044,14,1817,3051,14,1816,3058,14,1815,3062,14,498,3070,9,782,3092,14,1682,3098,14,1685,3105,14,1684,3112,14,1683,3116,14,482,3122,9,758,3131,9,759,3151,14,1617,3157,14,1619,3164,14,1618,3169,14,545,3183,9,861,3203,9,860,3235,14,1858,3241,14,1860,3248,14,1859,3253,14,557,3267,9,881,3286,9,880,3318,14,1901,3324,14,1904,3331,14,1903,3338,14,1902,3342,14,535,3348,9,844,3357,9,845,3377,14,1822,3383,14,1825,3390,14,1824,3397,14,1823,3401,14,445,3411,9,694,3437,14,1467,3443,14,1470,3450,14,1469,3457,14,1468,3461,14,511,3467,9,803,3487,14,1730,3493,14,1733,3500,14,1732,3507,14,1731,3511,14,479,3519,9,754,3531,9,755,3554,14,1602,3560,14,1604,3567,14,1603,3572,14,513,3584,9,807,3602,9,806,3631,14,1737,3637,14,1740,3644,14,1739,3651,14,1738,3655,14,532,3671,9,839,3695,9,840,3730,14,1806,3736,14,1809,3743,14,1808,3750,14,1807,3754,14,576,3762,9,917,3784,14,1976,3790,14,1979,3797,14,1978,3804,14,1977,3808,14,597,3814,9,950,3823,9,951,3843,14,2058,3849,14,2061,3856,14,2060,3863,14,2059,3867,14,553,3879,9,876,3897,9,875,3926,14,1885,3932,14,1888,3939,14,1887,3946,14,1886,3950,14,604,3958,9,964,3981,14,2097,3987,14,2099,3994,14,2098,3999,14,485,4017,9,764,4039,9,765,4077,14,1632,4083,14,1635,4090,14,1634,4097,14,1633,4101,14,558,4119,9,883,4141,9,884,4179,14,1906,4185,14,1909,4192,14,1908,4199,14,1907,4203,14,515,4213,9,810,4228,9,809,4254,14,1745,4260,14,1747,4267,14,1746,4272,14,465,4280,9,730,4303,14,1543,4309,14,1545,4316,14,1544,4321,14,547,4333,9,864,4350,9,865,4379,14,1864,4385,14,1866,4392,14,1865,4397,14,493,4407,9,776,4433,14,1664,4439,14,1666,4446,14,1665,4451,14,458,4459,9,717,4471,9,716,4494,14,1515,4500,14,1518,4507,14,1517,4514,14,1516,4518,14,497,4530,9,781,4561,14,1678,4567,14,1681,4574,14,1680,4581,14,1679,4585,14,534,4597,9,843,4628,14,1818,4634,14,1821,4641,14,1820,4648,14,1819,4652,14,577,4664,9,918,4695,14,1983,4701,14,1981,4708,14,1982,4715,14,1980,4719,14,615,4737,9,981,4763,9,982,4801,14,2188,4807,14,2190,4814,14,2189,4819,14,454,4831,9,707,4849,9,708,4878,14,1500,4884,14,1502,4891,14,1501,4896,14,477,4904,9,752,4927,14,1595,4933,14,1597,4940,14,1596,4945,14,603,4953,9,962,4965,9,963,4988,14,2094,4994,14,2096,5001,14,2095,5006,14,661,5026,9,1059,5049,9,1061,5090,14,2752,5096,14,2755,5103,14,2754,5110,14,2753,5114,14,440,5134,9,683,5158,9,685,5199,14,1449,5205,14,1452,5212,14,1451,5219,14,1450,5223,14,464,5241,9,727,5263,9,729,5301,14,1539,5307,14,1542,5314,14,1541,5321,14,1540,5325,14,476,5343,9,749,5365,9,751,5403,14,1591,5409,14,1594,5416,14,1593,5423,14,1592,5427,14,512,5437,9,805,5452,9,804,5478,14,1734,5484,14,1736,5491,14,1735,5497,14,567,5505,9,902,5528,14,1938,5534,14,1940,5541,14,1939,5546,14,439,5554,9,681,5565,9,682,5588,14,1446,5594,14,1448,5601,14,1447,5606,14,550,5614,9,870,5637,14,1875,5643,14,1877,5650,14,1876,5655,14,546,5675,9,862,5701,9,863,5742,14,1861,5748,14,1863,5755,14,1862,5760,14,456,5780,9,711,5804,9,713,5845,14,1507,5851,14,1510,5858,14,1509,5865,14,1508,5869,14,510,5891,9,801,5919,9,802,5963,14,1726,5969,14,1729,5976,14,1728,5983,14,1727,5987,14,542,5999,9,856,6015,9,857,6044,14,1846,6050,14,1849,6057,14,1848,6064,14,1847,6068,14,483,6088,9,760,6112,9,761,6153,14,1620,6159,14,1623,6166,14,1622,6173,14,1621,6177,14,572,6189,9,909,6206,9,910,6235,14,1956,6241,14,1958,6248,14,1957,6253,14,573,6261,9,911,6273,9,912,6296,14,1959,6302,14,1961,6309,14,1960,6314,14,437,6328,9,677,6347,9,678,6379,14,1438,6385,14,1441,6392,14,1440,6399,14,1439,6403,14,538,6413,9,848,6428,9,849,6454,14,1832,6460,14,1834,6467,14,1833,6472,14,448,6490,9,697,6514,9,698,6552,14,1478,6558,14,1481,6565,14,1480,6572,14,1479,6576,14,471,6586,9,742,6601,9,741,6627,14,1565,6633,14,1567,6640,14,1566,6645,14,496,6659,9,780,6691,14,1675,6697,14,1677,6704,14,1676,6709,14,469,6721,9,736,6737,9,737,6766,14,1558,6772,14,1561,6779,14,1560,6786,14,1559,6791,14,505,6803,9,794,6819,9,795,6848,14,1708,6854,14,1710,6861,14,1709,6867,14,455,6879,9,709,6895,9,710,6924,14,1503,6930,14,1506,6937,14,1505,6944,14,1504,6949,14,649,6969,9,1037,6993,9,1039,7034,14,2706,7040,14,2709,7047,14,2708,7054,14,2707,7059,14,462,7073,9,724,7091,9,725,7123,14,1531,7129,14,1534,7136,14,1533,7143,14,1532,7148,14,626,7156,9,1001,7168,9,1002,7191,14,2324,7197,14,2326,7204,14,2325,7210,14,578,7228,9,919,7252,9,920,7290,14,1984,7296,14,1987,7303,14,1986,7310,14,1985,7315,14,617,7325,9,986,7340,9,985,7366,14,2195,7372,14,2197,7379,14,2196,7384,14,627,7392,9,1003,7404,9,1004,7427,14,2327,7433,14,2329,7440,14,2328,7446,14,622,7456,9,993,7472,9,994,7498,14,2271,7504,14,2273,7511,14,2272,7517,14,632,7527,9,1011,7543,9,1012,7569,14,2416,7575,14,2418,7582,14,2417,7588,14,503,7602,9,792,7622,9,791,7654,14,1701,7660,14,1703,7667,14,1702,7673,14,657,7689,9,1053,7711,9,1052,7746,14,2738,7752,14,2740,7759,14,2739,7765,14,539,7777,9,850,7794,9,851,7823,14,1835,7829,14,1837,7836,14,1836,7842,14,612,7854,9,975,7871,9,976,7900,14,2166,7906,14,2168,7913,14,2167,7919,14,580,7931,9,922,7948,9,923,7977,14,1991,7983,14,1993,7990,14,1992,7996,14,631,8006,9,1010,8032,14,2413,8038,14,2415,8045,14,2414,8050,14,648,8058,9,1036,8080,14,2703,8086,14,2705,8093,14,2704,8099,14,630,8111,9,1009,8140,14,2410,8146,14,2412,8153,14,2411,8159,14,552,8167,9,873,8179,9,874,8202,14,1882,8208,14,1884,8215,14,1883,8221,14,638,8235,9,1021,8255,9,1022,8287,14,2543,8293,14,2545,8300,14,2544,8306,14,634,8316,9,1015,8331,9,1016,8357,14,2423,8363,14,2425,8370,14,2424,8376,14,614,8386,9,979,8401,9,980,8427,14,2172,8433,14,2174,8440,14,2173,8446,14,609,8454,9,970,8477,14,2114,8483,14,2116,8490,14,2115,8496,14,640,8514,9,1025,8540,9,1026,8578,14,2653,8584,14,2655,8591,14,2654,8597,14,556,8609,9,879,8638,14,1897,8644,14,1899,8651,14,1898,8657,14,529,8665,9,835,8687,14,1796,8693,14,1798,8700,14,1797,8705,14,453,8713,9,705,8725,9,706,8748,14,1496,8754,14,1499,8761,14,1498,8768,14,1497,8772,14,672,8786,9,1078,8805,9,1079,8837,14,2794,8843,14,2797,8850,14,2796,8857,14,2795,8861,14,663,8869,9,1064,8892,14,2759,8898,14,2762,8905,14,2761,8912,14,2760,8916,14,490,8922,9,771,8941,14,1652,8947,14,1655,8954,14,1654,8961,14,1653,8965,14,519,8981,9,815,9003,9,816,9038,14,1760,9044,14,1763,9051,14,1762,9058,14,1761,9062,14,666,9074,9,1069,9091,9,1068,9120,14,2770,9126,14,2773,9133,14,2772,9140,14,2771,9144,14,447,9152,9,696,9175,14,1475,9181,14,1477,9188,14,1476,9193,14,665,9221,9,1066,9258,9,1067,9311,14,2766,9317,14,2769,9324,14,2768,9331,14,2767,9335,14,442,9353,9,689,9378,9,688,9416,14,1456,9422,14,1459,9429,14,1458,9436,14,1457,9440,14,642,9454,9,1029,9473,9,1028,9505,14,2684,9511,14,2687,9518,14,2686,9525,14,2685,9529,14,438,9537,9,679,9560,14,1442,9566,14,1445,9573,14,1444,9580,14,1443,9584,14,674,9592,9,1082,9615,14,2801,9621,14,2804,9628,14,2803,9635,14,2802,9639,14,673,9651,9,1080,9669,9,1081,9698,14,2798,9704,14,2800,9711,14,2799,9716,14,507,9722,9,798,9742,14,1715,9748,14,1718,9755,14,1717,9762,14,1716,9766,14,659,9774,9,1056,9786,9,1057,9809,14,2745,9815,14,2748,9822,14,2747,9829,14,2746,9833,14,525,9841,9,826,9864,14,1782,9870,14,1784,9877,14,1783,9882,14,594,9894,9,946,9912,9,945,9941,14,2047,9947,14,2049,9954,14,2048,9959,14,620,9971,9,991,10000,14,2216,10006,14,2218,10013,14,2217,10018,14,621,10030,9,992,10059,14,2219,10065,14,2221,10072,14,2220,10077,14,619,10089,9,990,10107,9,989,10136,14,2202,10142,14,2204,10149,14,2203,10154,14,504,10160,9,793,10179,14,1704,10185,14,1707,10192,14,1706,10199,14,1705,10203,14,668,10211,9,1071,10234,14,2778,10240,14,2781,10247,14,2780,10254,14,2779,10258,14,644,10276,9,1031,10300,9,1032,10338,14,2688,10344,14,2691,10351,14,2690,10358,14,2689,10362,14,562,10368,9,892,10387,14,1921,10393,14,1923,10400,14,1922,10405,14,664,10413,9,1065,10436,14,2763,10442,14,2765,10449,14,2764,10454,14,441,10464,9,687,10477,9,686,10503,14,1453,10509,14,1455,10516,14,1454,10521,14,571,10529,9,908,10553,14,1953,10559,14,1955,10566,14,1954,10571,14,647,10581,9,1035,10607,14,2700,10613,14,2702,10620,14,2701,10625,14,660,10635,9,1058,10661,14,2749,10667,14,2751,10674,14,2750,10679,14,520,10689,9,817,10704,9,818,10730,14,1764,10736,14,1766,10743,14,1765,10748,14,443,10758,9,690,10772,9,691,10798,14,1460,10804,14,1462,10811,14,1461,10816,14,516,10832,9,811,10855,9,812,10890,14,1748,10896,14,1751,10903,14,1750,10910,14,1749,10914,14,564,10922,9,895,10934,9,894,10957,14,1927,10963,14,1929,10970,14,1928,10975,14,563,10983,9,893,11006,14,1924,11012,14,1926,11019,14,1925,11024,14,579,11034,9,921,11059,14,1988,11065,14,1990,11072,14,1989,11077,14,530,11091,9,836,11110,9,837,11142,14,1799,11148,14,1801,11155,14,1800,11160,14,600,11176,9,956,11197,9,957,11232,14,2083,11238,14,2085,11245,14,2084,11250,14,610,11260,9,972,11275,9,971,11301,14,2159,11307,14,2161,11314,14,2160,11319,14,608,11329,9,969,11355,14,2111,11361,14,2113,11368,14,2112,11373,14,591,11381,9,939,11403,14,2035,11409,14,2038,11416,14,2037,11423,14,2036,11427,14,589,11439,9,937,11468,14,2026,11474,14,2029,11481,14,2028,11488,14,2027,11492,14,585,11498,9,930,11518,14,2008,11524,14,2011,11531,14,2010,11538,14,2009,11542,14,655,11552,9,1049,11579,14,2730,11585,14,2733,11592,14,2732,11599,14,2731,11603,14,489,11617,9,770,11651,14,1648,11657,14,1651,11664,14,1650,11671,14,1649,11675,14,459,11685,9,718,11700,9,719,11726,14,1519,11732,14,1522,11739,14,1521,11746,14,1520,11750,14,463,11758,9,726,11781,14,1535,11787,14,1538,11794,14,1537,11801,14,1536,11805,14,652,11813,9,1044,11825,9,1045,11848,14,2718,11854,14,2721,11861,14,2720,11868,14,2719,11872,14,637,11880,9,1020,11903,14,2539,11909,14,2542,11916,14,2541,11923,14,2540,11927,14,607,11935,9,968,11958,14,2108,11964,14,2110,11971,14,2109,11976,14,502,11982,9,790,11991,9,789,12011,14,1697,12017,14,1700,12024,14,1699,12031,14,1698,12035,14,537,12055,9,847,12099,14,1829,12105,14,1831,12112,14,1830,12117,14,671,12127,9,1077,12142,9,1076,12168,14,2790,12174,14,2793,12181,14,2792,12188,14,2791,12192,14,457,12210,9,715,12236,9,714,12274,14,1511,12280,14,1514,12287,14,1513,12294,14,1512,12298,14,487,12308,9,768,12322,9,767,12348,14,1640,12354,14,1643,12361,14,1642,12368,14,1641,12372,14,509,12380,9,800,12403,14,1723,12409,14,1725,12416,14,1724,12421,14,599,12431,9,955,12446,9,954,12472,14,2080,12478,14,2082,12485,14,2081,12490,14,500,12498,9,785,12521,14,1690,12527,14,1692,12534,14,1691,12539,14,506,12551,9,796,12567,9,797,12596,14,1711,12602,14,1714,12609,14,1713,12616,14,1712,12620,14,478,12628,9,753,12651,14,1598,12657,14,1601,12664,14,1600,12671,14,1599,12675,14,514,12683,9,808,12706,14,1741,12712,14,1744,12719,14,1743,12726,14,1742,12730,14,548,12736,9,866,12755,14,1867,12761,14,1870,12768,14,1869,12775,14,1868,12779,14,472,12789,9,743,12815,14,1568,12821,14,1571,12828,14,1570,12835,14,1569,12839,14,468,12849,9,735,12864,9,734,12890,14,1554,12896,14,1557,12903,14,1556,12910,14,1555,12914,14,521,12922,9,819,12945,14,1767,12951,14,1770,12958,14,1769,12965,14,1768,12969,14,581,12981,9,924,12998,9,925,13027,14,1994,13033,14,1996,13040,14,1995,13045,14,544,13051,9,859,13070,14,1854,13076,14,1857,13083,14,1856,13090,14,1855,13094,14,582,13102,9,926,13125,14,1997,13131,14,2000,13138,14,1999,13145,14,1998,13150,14,583,13158,9,927,13181,14,2001,13187,14,2003,13194,14,2002,13200,14,628,13210,9,1005,13224,9,1006,13250,14,2330,13256,14,2332,13263,14,2331,13269,14,635,13277,9,1017,13288,9,1018,13311,14,2463,13317,14,2465,13324,14,2464,13330,14,470,13340,9,739,13354,9,740,13380,14,1562,13386,14,1564,13393,14,1563]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/ExpressibleAsProtocols.swift","symbols":[16,16,224,17,7,2293,22,7,2295,26,7,2294,31,16,225,32,7,2296,37,7,2297,42,16,285,43,7,2450,46,16,232,47,7,2312,52,7,2313,57,16,138,58,7,1420,63,7,1423,67,7,1425,71,7,1421,75,7,1424,79,7,1422,84,16,236,85,7,2320,90,7,2321,95,16,223,96,7,2290,101,7,2292,104,7,2291,109,16,293,110,7,2470,115,7,2471,120,16,172,121,7,2134,125,7,2135,130,16,177,131,7,2144,135,7,2145,140,16,269,141,7,2400,145,7,2401,150,16,345,151,7,2585,154,16,274,155,7,2426,158,16,348,159,7,2589,162,16,354,163,7,2600,166,16,155,167,7,2020,171,7,2021,176,16,168,177,7,2125,181,7,2126,186,16,278,187,7,2433,192,7,2435,195,7,2434,200,16,340,201,7,2575,204,16,294,205,7,2472,209,7,2473,214,16,243,215,7,2343,219,7,2344,224,16,216,225,7,2263,229,7,2264,234,16,247,235,7,2351,239,7,2352,244,16,349,245,7,2590,249,7,2591,254,16,238,255,7,2333,259,7,2334,264,16,215,265,7,2259,270,7,2262,274,7,2260,277,7,2261,282,16,160,283,7,2069,288,7,2070,293,16,231,294,7,2310,298,7,2311,303,16,230,304,7,2308,308,7,2309,313,16,270,314,7,2402,318,7,2403,323,16,307,324,7,2499,328,7,2500,333,16,308,334,7,2501,338,7,2502,343,16,322,344,7,2533,348,7,2534,353,16,355,354,7,2601,358,7,2602,363,16,323,364,7,2535,368,7,2536,373,16,312,374,7,2512,378,7,2513,383,16,166,384,7,2121,388,7,2122,393,16,279,394,7,2436,398,7,2437,403,16,180,404,7,2149,408,7,2150,413,16,164,414,7,2117,418,7,2118,423,16,240,424,7,2337,428,7,2338,433,16,289,434,7,2457,439,7,2459,442,7,2458,447,16,199,448,7,2227,453,7,2229,456,7,2228,461,16,296,462,7,2476,467,7,2478,470,7,2477,475,16,319,476,7,2527,480,7,2528,485,16,313,486,7,2514,490,7,2515,495,16,195,496,7,2212,500,7,2213,505,16,283,506,7,2446,510,7,2447,515,16,154,516,7,1970,520,7,1971,525,16,140,526,7,1428,530,7,1429,535,16,163,536,7,2074,540,7,2075,545,16,314,546,7,2516,551,7,2518,554,7,2517,559,16,359,560,7,2613,563,16,366,564,7,2627,568,7,2628,573,16,201,574,7,2231,579,7,2233,582,7,2232,587,16,275,588,7,2427,591,16,276,592,7,2428,596,7,2429,601,16,193,602,7,2208,606,7,2209,611,16,358,612,7,2607,616,7,2608,621,16,389,622,7,2670,627,7,2672,630,7,2671,635,16,392,636,7,2677,639,16,280,640,7,2438,645,7,2440,648,7,2439,653,16,235,654,7,2318,658,7,2319,663,16,343,664,7,2579,668,7,2580,673,16,260,674,7,2381,678,7,2382,683,16,286,684,7,2451,688,7,2452,693,16,250,694,7,2358,698,7,2359,703,16,233,704,7,2314,708,7,2315,713,16,298,714,7,2481,718,7,2482,723,16,310,724,7,2505,728,7,2506,733,16,288,734,7,2455,738,7,2456,743,16,194,744,7,2210,748,7,2211,753,16,263,754,7,2388,758,7,2389,763,16,229,764,7,2305,769,7,2307,772,7,2306,777,16,161,778,7,2071,781,16,265,782,7,2392,786,7,2393,791,16,284,792,7,2448,796,7,2449,801,16,329,802,7,2553,806,7,2554,811,16,350,812,7,2592,816,7,2593,821,16,306,822,7,2497,826,7,2498,831,16,357,832,7,2605,836,7,2606,841,16,237,842,7,2322,846,7,2323,851,16,311,852,7,2510,856,7,2511,861,16,351,862,7,2594,865,16,267,866,7,2396,870,7,2397,875,16,214,876,7,2257,880,7,2258,885,16,300,886,7,2486,890,7,2487,895,16,245,896,7,2346,901,7,2348,904,7,2347,909,16,318,910,7,2526,913,16,207,914,7,2245,918,7,2246,923,16,249,924,7,2356,928,7,2357,933,16,287,934,7,2453,938,7,2454,943,16,330,944,7,2555,948,7,2556,953,16,368,954,7,2631,958,7,2632,963,16,203,964,7,2236,969,7,2238,972,7,2237,977,16,227,978,7,2300,983,7,2302,986,7,2301,991,16,302,992,7,2490,995,16,356,996,7,2603,1000,7,2604,1005,16,171,1006,7,2132,1010,7,2133,1015,16,189,1016,7,2182,1020,7,2183,1025,16,213,1026,7,2255,1030,7,2256,1035,16,226,1036,7,2298,1040,7,2299,1045,16,264,1046,7,2390,1050,7,2391,1055,16,246,1056,7,2349,1061,7,2350,1066,16,320,1067,7,2529,1072,7,2531,1075,7,2530,1080,16,188,1081,7,2180,1085,7,2181,1090,16,303,1091,7,2491,1095,7,2492,1100,16,299,1101,7,2483,1106,7,2485,1109,7,2484,1114,16,209,1115,7,2249,1118,16,205,1119,7,2241,1123,7,2242,1128,16,262,1129,7,2386,1133,7,2387,1138,16,295,1139,7,2474,1143,7,2475,1148,16,234,1149,7,2316,1153,7,2317,1158,16,325,1159,7,2546,1163,7,2547,1168,16,326,1169,7,2548,1174,7,2550,1177,7,2549,1182,16,185,1183,7,2175,1186,16,186,1187,7,2176,1191,7,2177,1196,16,291,1197,7,2466,1201,7,2467,1206,16,197,1207,7,2222,1212,7,2223,1215,7,2224,1220,16,198,1221,7,2225,1226,7,2226,1231,16,220,1232,7,2286,1236,7,2287,1241,16,248,1242,7,2353,1247,7,2355,1250,7,2354,1255,16,321,1256,7,2532,1259,16,218,1260,7,2267,1264,7,2268,1269,16,257,1270,7,2374,1275,7,2376,1278,7,2375,1283,16,327,1284,7,2551,1287,16,204,1288,7,2239,1292,7,2240,1297,16,159,1298,7,2067,1302,7,2068,1307,16,211,1308,7,2251,1312,7,2252,1317,16,244,1318,7,2345,1321,16,379,1322,7,2648,1326,7,2649,1331,16,331,1332,7,2557,1336,7,2558,1341,16,386,1342,7,2665,1345,16,370,1346,7,2634,1350,7,2635,1355,16,369,1356,7,2633,1359,16,380,1360,7,2650,1365,7,2652,1368,7,2651,1373,16,375,1374,7,2643,1378,7,2644,1383,16,385,1384,7,2663,1388,7,2664,1393,16,179,1394,7,2148,1397,16,304,1398,7,2493,1401,16,255,1402,7,2370,1406,7,2371,1411,16,167,1412,7,2123,1416,7,2124,1421,16,221,1422,7,2288,1425,16,382,1426,7,2658,1429,16,292,1430,7,2468,1434,7,2469,1439,16,365,1440,7,2625,1444,7,2626,1449,16,333,1450,7,2561,1454,7,2562,1459,16,384,1460,7,2661,1464,7,2662,1469,16,158,1470,7,2065,1474,7,2066,1479,16,383,1480,7,2659,1484,7,2660,1489,16,305,1490,7,2494,1495,7,2496,1498,7,2495,1503,16,210,1504,7,2250,1507,16,391,1508,7,2675,1512,7,2676,1517,16,387,1518,7,2666,1522,7,2667,1527,16,367,1528,7,2629,1532,7,2630,1537,16,378,1538,7,2647,1541,16,362,1542,7,2619,1547,7,2621,1550,7,2620,1555,16,393,1556,7,2678,1560,7,2679,1565,16,309,1566,7,2503,1570,7,2504,1575,16,281,1576,7,2441,1580,7,2442,1585,16,202,1586,7,2234,1590,7,2235,1595,16,182,1596,7,2153,1600,7,2154,1605,16,173,1606,7,2136,1610,7,2137,1615,16,242,1616,7,2341,1620,7,2342,1625,16,251,1626,7,2360,1629,16,271,1630,7,2404,1634,7,2405,1639,16,176,1640,7,2142,1644,7,2143,1649,16,196,1650,7,2214,1654,7,2215,1659,16,175,1660,7,2140,1664,7,2141,1669,16,191,1670,7,2186,1674,7,2187,1679,16,253,1680,7,2367,1683,16,152,1684,7,1966,1688,7,1967,1693,16,187,1694,7,2178,1698,7,2179,1703,16,184,1704,7,2157,1708,7,2158,1713,16,183,1714,7,2155,1718,7,2156,1723,16,259,1724,7,2379,1728,7,2380,1733,16,169,1734,7,2127,1738,7,2128,1743,16,200,1744,7,2230,1747,16,222,1748,7,2289,1751,16,277,1752,7,2430,1757,7,2432,1760,7,2431,1765,16,347,1766,7,2587,1770,7,2588,1775,16,373,1776,7,2639,1780,7,2640,1785,16,374,1786,7,2641,1790,7,2642,1795,16,372,1796,7,2637,1800,7,2638,1805,16,339,1806,7,2574,1809,16,256,1810,7,2372,1814,7,2373,1819,16,178,1820,7,2146,1824,7,2147,1829,16,153,1830,7,1968,1834,7,1969,1839,16,315,1840,7,2519,1844,7,2520,1849,16,174,1850,7,2138,1854,7,2139,1859,16,190,1860,7,2184,1864,7,2185,1869,16,324,1870,7,2537,1874,7,2538,1879,16,157,1880,7,2062,1885,7,2064,1888,7,2063,1893,16,170,1894,7,2129,1899,7,2131,1902,7,2130,1907,16,272,1908,7,2406,1912,7,2407,1917,16,192,1918,7,2205,1923,7,2207,1926,7,2206,1931,16,268,1932,7,2398,1936,7,2399,1941,16,317,1942,7,2524,1946,7,2525,1951,16,364,1952,7,2624,1955,16,316,1956,7,2521,1961,7,2523,1964,7,2522,1969,16,332,1970,7,2559,1974,7,2560,1979,16,341,1980,7,2576,1983,16,282,1984,7,2443,1989,7,2445,1992,7,2444,1997,16,376,1998,7,2645,2001,16,353,2002,7,2597,2007,7,2599,2010,7,2598,2015,16,363,2016,7,2622,2020,7,2623,2025,16,361,2026,7,2617,2030,7,2618,2035,16,344,2036,7,2581,2041,7,2582,2045,7,2583,2048,7,2584,2053,16,342,2054,7,2577,2058,7,2578,2063,16,338,2064,7,2572,2068,7,2573,2073,16,165,2074,7,2119,2078,7,2120,2083,16,241,2084,7,2339,2088,7,2340,2093,16,208,2094,7,2247,2098,7,2248,2103,16,212,2104,7,2253,2108,7,2254,2113,16,162,2114,7,2072,2118,7,2073,2123,16,390,2124,7,2673,2128,7,2674,2133,16,360,2134,7,2614,2139,7,2616,2142,7,2615,2147,16,377,2148,7,2646,2151,16,254,2152,7,2368,2156,7,2369,2161,16,290,2162,7,2460,2167,7,2462,2170,7,2461,2175,16,346,2176,7,2586,2179,16,181,2180,7,2151,2184,7,2152,2189,16,206,2190,7,2243,2194,7,2244,2199,16,239,2200,7,2335,2204,7,2336,2209,16,328,2210,7,2552,2213,16,261,2214,7,2383,2219,7,2385,2222,7,2384,2227,16,352,2228,7,2595,2232,7,2596,2237,16,252,2238,7,2361,2242,7,2362,2247,16,258,2248,7,2377,2252,7,2378,2257,16,228,2258,7,2303,2262,7,2304,2267,16,266,2268,7,2394,2272,7,2395,2277,16,301,2278,7,2488,2282,7,2489,2287,16,139,2288,7,1426,2292,7,1427,2297,16,217,2298,7,2265,2302,7,2266,2307,16,273,2308,7,2408,2312,7,2409,2317,16,334,2318,7,2563,2323,7,2565,2326,7,2564,2331,16,297,2332,7,2479,2336,7,2480,2341,16,371,2342,7,2636,2345,16,335,2346,7,2566,2350,7,2567,2355,16,337,2356,7,2571,2359,16,336,2360,7,2568,2365,7,2570,2368,7,2569,2373,16,381,2374,7,2656,2378,7,2657,2383,16,388,2384,7,2668,2388,7,2669,2393,16,219,2394,7,2269,2398,7,2270]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/ResultBuilders.swift","symbols":[17,14,407,21,19,2844,25,19,2846,29,19,2845,33,21,1188,39,21,1193,44,21,1192,50,21,1190,56,21,1191,62,21,1189,69,21,1195,75,21,1194,81,14,418,85,19,2877,89,19,2879,93,19,2878,97,21,1277,103,21,1281,108,21,1280,114,21,1278,120,21,1279,126,21,1276,133,21,1283,139,21,1282,145,14,405,149,19,2838,153,19,2840,157,19,2839,161,21,1173,167,21,1177,172,21,1176,178,21,1174,184,21,1175,190,21,1172,197,21,1179,203,21,1178,209,14,420,213,19,2883,217,19,2885,221,19,2884,225,21,1293,231,21,1297,236,21,1296,242,21,1294,248,21,1295,254,21,1292,261,21,1299,267,21,1298,273,14,422,277,19,2889,281,19,2891,285,19,2890,289,21,1309,295,21,1313,300,21,1312,306,21,1310,312,21,1311,318,21,1308,325,21,1315,331,21,1314,337,14,416,341,19,2871,345,19,2873,349,19,2872,353,21,1261,359,21,1265,364,21,1264,370,21,1262,376,21,1263,382,21,1260,389,21,1267,395,21,1266,401,14,433,405,19,2922,409,19,2924,413,19,2923,417,21,1397,423,21,1401,428,21,1400,434,21,1398,440,21,1399,446,21,1396,453,21,1403,459,21,1402,465,14,423,469,19,2892,473,19,2894,477,19,2893,481,21,1317,487,21,1321,492,21,1320,498,21,1318,504,21,1319,510,21,1316,517,21,1323,523,21,1322,529,14,406,533,19,2841,537,19,2843,541,19,2842,545,21,1181,551,21,1185,556,21,1184,562,21,1182,568,21,1183,574,21,1180,581,21,1187,587,21,1186,593,14,432,597,19,2919,601,19,2921,605,19,2920,609,21,1389,615,21,1393,620,21,1392,626,21,1390,632,21,1391,638,21,1388,645,21,1395,651,21,1394,657,14,434,661,19,2925,665,19,2927,669,19,2926,673,21,1405,679,21,1409,684,21,1408,690,21,1406,696,21,1407,702,21,1404,709,21,1411,715,21,1410,721,14,421,725,19,2886,729,19,2888,733,19,2887,737,21,1301,743,21,1305,748,21,1304,754,21,1302,760,21,1303,766,21,1300,773,21,1307,779,21,1306,785,14,410,789,19,2853,793,19,2855,797,19,2854,801,21,1213,807,21,1217,812,21,1216,818,21,1214,824,21,1215,830,21,1212,837,21,1219,843,21,1218,849,14,408,853,19,2847,857,19,2849,861,19,2848,865,21,1197,871,21,1201,876,21,1200,882,21,1198,888,21,1199,894,21,1196,901,21,1203,907,21,1202,913,14,402,917,19,2829,921,19,2831,925,19,2830,929,21,1149,935,21,1153,940,21,1152,946,21,1150,952,21,1151,958,21,1148,965,21,1155,971,21,1154,977,14,397,981,19,2814,985,19,2816,989,19,2815,993,21,1109,999,21,1113,1004,21,1112,1010,21,1110,1016,21,1111,1022,21,1108,1029,21,1115,1035,21,1114,1041,14,394,1045,19,2805,1049,19,2807,1053,19,2806,1057,21,1085,1063,21,1089,1068,21,1088,1074,21,1086,1080,21,1087,1086,21,1084,1093,21,1091,1099,21,1090,1105,14,395,1109,19,2808,1113,19,2810,1117,19,2809,1121,21,1093,1127,21,1097,1132,21,1096,1138,21,1094,1144,21,1095,1150,21,1092,1157,21,1099,1163,21,1098,1169,14,411,1173,19,2856,1177,19,2858,1181,19,2857,1185,21,1221,1191,21,1225,1196,21,1224,1202,21,1222,1208,21,1223,1214,21,1220,1221,21,1227,1227,21,1226,1233,14,412,1237,19,2859,1241,19,2861,1245,19,2860,1249,21,1229,1255,21,1233,1260,21,1232,1266,21,1230,1272,21,1231,1278,21,1228,1285,21,1235,1291,21,1234,1297,14,401,1301,19,2826,1305,19,2828,1309,19,2827,1313,21,1141,1319,21,1145,1324,21,1144,1330,21,1142,1336,21,1143,1342,21,1140,1349,21,1147,1355,21,1146,1361,14,431,1365,19,2916,1369,19,2918,1373,19,2917,1377,21,1381,1383,21,1385,1388,21,1384,1394,21,1382,1400,21,1383,1406,21,1380,1413,21,1387,1419,21,1386,1425,14,425,1429,19,2898,1433,19,2900,1437,19,2899,1441,21,1333,1447,21,1337,1452,21,1336,1458,21,1334,1464,21,1335,1470,21,1332,1477,21,1339,1483,21,1338,1489,14,435,1493,19,2928,1497,19,2930,1501,19,2929,1505,21,1413,1511,21,1417,1516,21,1416,1522,21,1414,1528,21,1415,1534,21,1412,1541,21,1419,1547,21,1418,1553,14,409,1557,19,2850,1561,19,2852,1565,19,2851,1569,21,1205,1575,21,1209,1580,21,1208,1586,21,1206,1592,21,1207,1598,21,1204,1605,21,1211,1611,21,1210,1617,14,399,1621,19,2820,1625,19,2822,1629,19,2821,1633,21,1125,1639,21,1129,1644,21,1128,1650,21,1126,1656,21,1127,1662,21,1124,1669,21,1131,1675,21,1130,1681,14,430,1685,19,2913,1689,19,2915,1693,19,2914,1697,21,1373,1703,21,1377,1708,21,1376,1714,21,1374,1720,21,1375,1726,21,1372,1733,21,1379,1739,21,1378,1745,14,398,1749,19,2817,1753,19,2819,1757,19,2818,1761,21,1117,1767,21,1121,1772,21,1120,1778,21,1118,1784,21,1119,1790,21,1116,1797,21,1123,1803,21,1122,1809,14,429,1813,19,2910,1817,19,2912,1821,19,2911,1825,21,1365,1831,21,1369,1836,21,1368,1842,21,1366,1848,21,1367,1854,21,1364,1861,21,1371,1867,21,1370,1873,14,403,1877,19,2832,1881,19,2834,1885,19,2833,1889,21,1157,1895,21,1161,1900,21,1160,1906,21,1158,1912,21,1159,1918,21,1156,1925,21,1163,1931,21,1162,1937,14,404,1941,19,2835,1945,19,2837,1949,19,2836,1953,21,1165,1959,21,1169,1964,21,1168,1970,21,1166,1976,21,1167,1982,21,1164,1989,21,1171,1995,21,1170,2001,14,396,2005,19,2811,2009,19,2813,2013,19,2812,2017,21,1101,2023,21,1105,2028,21,1104,2034,21,1102,2040,21,1103,2046,21,1100,2053,21,1107,2059,21,1106,2065,14,400,2069,19,2823,2073,19,2825,2077,19,2824,2081,21,1133,2087,21,1137,2092,21,1136,2098,21,1134,2104,21,1135,2110,21,1132,2117,21,1139,2123,21,1138,2129,14,415,2133,19,2868,2137,19,2870,2141,19,2869,2145,21,1253,2151,21,1257,2156,21,1256,2162,21,1254,2168,21,1255,2174,21,1252,2181,21,1259,2187,21,1258,2193,14,424,2197,19,2895,2201,19,2897,2205,19,2896,2209,21,1325,2215,21,1329,2220,21,1328,2226,21,1326,2232,21,1327,2238,21,1324,2245,21,1331,2251,21,1330,2257,14,417,2261,19,2874,2265,19,2876,2269,19,2875,2273,21,1269,2279,21,1273,2284,21,1272,2290,21,1270,2296,21,1271,2302,21,1268,2309,21,1275,2315,21,1274,2321,14,427,2325,19,2904,2329,19,2906,2333,19,2905,2337,21,1349,2343,21,1353,2348,21,1352,2354,21,1350,2360,21,1351,2366,21,1348,2373,21,1355,2379,21,1354,2385,14,428,2389,19,2907,2393,19,2909,2397,19,2908,2401,21,1357,2407,21,1361,2412,21,1360,2418,21,1358,2424,21,1359,2430,21,1356,2437,21,1363,2443,21,1362,2449,14,419,2453,19,2880,2457,19,2882,2461,19,2881,2465,21,1285,2471,21,1289,2476,21,1288,2482,21,1286,2488,21,1287,2494,21,1284,2501,21,1291,2507,21,1290,2513,14,413,2517,19,2862,2521,19,2864,2525,19,2863,2529,21,1237,2535,21,1241,2540,21,1240,2546,21,1238,2552,21,1239,2558,21,1236,2565,21,1243,2571,21,1242,2577,14,426,2581,19,2901,2585,19,2903,2589,19,2902,2593,21,1341,2599,21,1345,2604,21,1344,2610,21,1342,2616,21,1343,2622,21,1340,2629,21,1347,2635,21,1346,2641,14,414,2645,19,2865,2649,19,2867,2653,19,2866,2657,21,1246,2663,21,1250,2668,21,1249,2674,21,1247,2680,21,1248,2686,21,1245,2693,21,1244,2699,21,1251]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/TokenSyntax.swift","symbols":[19,14,133,23,14,131,27,14,137,31,14,134,35,14,136,42,14,132,46,14,135]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-syntax@swift-DEVELOPMENT-SNAPSHOT-2022-03-13-a/.build/checkouts/swift-syntax/Sources/SwiftSyntaxBuilder/gyb_generated/Tokens.swift","symbols":[19,13,31,25,13,70,31,13,85,37,13,62,43,13,107,49,13,63,55,13,86,61,13,64,67,13,77,73,13,56,79,13,102,85,13,35,91,13,103,97,13,92,103,13,115,109,13,116,115,13,59,121,13,18,127,13,101,133,13,97,139,13,88,145,13,91,151,13,73,157,13,50,163,13,76,169,13,49,175,13,89,181,13,61,187,13,55,193,13,51,199,13,82,205,13,90,211,13,68,217,13,99,223,13,17,229,13,93,235,13,60,241,13,95,247,13,81,253,13,69,259,13,80,265,13,48,271,13,53,277,13,75,283,13,52,289,13,57,295,13,104,301,13,79,307,13,65,313,13,16,319,13,66,325,13,58,331,13,94,367,13,105,373,13,110,378,13,15,383,13,109,388,13,14,393,13,40,398,13,43,403,13,108,410,13,13,417,13,87,422,13,27,427,13,72,433,13,100,438,13,71,444,13,114,449,13,74,456,13,84,461,13,78,466,13,36,473,13,67,479,13,98,484,13,106,489,13,34,494,13,44,499,13,39,504,13,24,509,13,23,514,13,46,519,13,25,525,13,113,531,13,30,537,13,112,543,13,22,549,13,28,555,13,20,561,13,29,567,13,33,573,13,19,579,13,45,585,13,26,591,13,12,597,13,96,603,13,111,609,13,21,615,13,11,621,13,32,627,13,38,633,13,37,639,13,42,645,13,41,650,14,121,654,14,123,658,14,119,662,14,118,666,14,130,670,14,117,674,14,129,678,14,128,684,14,124,688,14,122,692,14,125,696,14,126,700,14,127,704,14,120,709,13,47,714,13,83,719,13,54]}]}