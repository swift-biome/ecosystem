{"culture":"DequeModule","dependencies":[],"extensions":[],"partitions":[{"namespace":"DequeModule","communities":[{"community":"struct","startIndex":0,"endIndex":2},{"community":"init","startIndex":2,"endIndex":10},{"community":"subscript","startIndex":10,"endIndex":12},{"community":"property","startIndex":12,"endIndex":19},{"community":"method","startIndex":19,"endIndex":49},{"community":"type.op","startIndex":49,"endIndex":50},{"community":"typealias","startIndex":50,"endIndex":53}]}],"identifiers":["s11DequeModule0A0V","s11DequeModule0A0V8IteratorV","s11DequeModule0A0V12arrayLiteralACyxGxd_tcfc","s11DequeModule0A0V15minimumCapacityACyxGSi_tcfc","s11DequeModule0A0V27unsafeUninitializedCapacity16initializingWithACyxGSi_ySryxGz_SiztKXEtKcfc","s11DequeModule0A0V9repeating5countACyxGx_Sitcfc","s11DequeModule0A0VAASeRzlE4fromACyxGs7Decoder_p_tKcfc","s11DequeModule0A0VACyxGycfc","s11DequeModule0A0VyACyxGqd__c7ElementQyd__RszSTRd__lufc","s11DequeModule0A0VyACyxGqd__c7ElementQyd__RszSlRd__lufc","s11DequeModule0A0Vys5SliceVyACyxGGSnySiGcip","s11DequeModule0A0VyxSicip","s11DequeModule0A0V10startIndexSivp","s11DequeModule0A0V11descriptionSSvp","s11DequeModule0A0V12customMirrors0D0Vvp","s11DequeModule0A0V16debugDescriptionSSvp","s11DequeModule0A0V5countSivp","s11DequeModule0A0V7indicesSnySiGvp","s11DequeModule0A0V8endIndexSivp","s11DequeModule0A0V11removeFirstxyF","s11DequeModule0A0V11removeFirstyySiF","s11DequeModule0A0V12makeIteratorAC0D0Vyx_GyF","s11DequeModule0A0V14removeSubrangeyySnySiGF","s11DequeModule0A0V15replaceSubrange_4withySnySiG_qd__nt7ElementQyd__RszSlRd__lF","s11DequeModule0A0V15reserveCapacityyySiF","s11DequeModule0A0V32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlF","s11DequeModule0A0V39withContiguousMutableStorageIfAvailableyqd__Sgqd__SryxGzKXEKlF","s11DequeModule0A0V5index5afterS2i_tF","s11DequeModule0A0V5index6beforeS2i_tF","s11DequeModule0A0V5index_8offsetBy07limitedE0SiSgSi_S2itF","s11DequeModule0A0V5index_8offsetByS2i_SitF","s11DequeModule0A0V6append10contentsOfyqd___t7ElementQyd__RszSTRd__lF","s11DequeModule0A0V6append10contentsOfyqd___t7ElementQyd__RszSlRd__lF","s11DequeModule0A0V6appendyyxF","s11DequeModule0A0V6insert10contentsOf2atyqd__n_Sit7ElementQyd__RszSlRd__lF","s11DequeModule0A0V6insert_2atyx_SitF","s11DequeModule0A0V6remove2atxSi_tF","s11DequeModule0A0V6swapAtyySi_SitF","s11DequeModule0A0V7prepend10contentsOfyqd___t7ElementQyd__RszSTRd__lF","s11DequeModule0A0V7prepend10contentsOfyqd___t7ElementQyd__RszSlRd__lF","s11DequeModule0A0V7prependyyxF","s11DequeModule0A0V8IteratorV4nextxSgyF","s11DequeModule0A0V8distance4from2toS2i_SitF","s11DequeModule0A0V8popFirstxSgyF","s11DequeModule0A0V9formIndex5afterySiz_tF","s11DequeModule0A0V9formIndex6beforeySiz_tF","s11DequeModule0A0V9removeAll15keepingCapacityySb_tF","s11DequeModule0A0VAASERzlE6encode2toys7Encoder_p_tKF","s11DequeModule0A0VAASHRzlE4hash4intoys6HasherVz_tF","s11DequeModule0A0VAASQRzlE2eeoiySbACyxG_AEtFZ","s11DequeModule0A0V11SubSequencea","s11DequeModule0A0V5Indexa","s11DequeModule0A0V7Indicesa","sSE","sSE6encode2toys7Encoder_p_tKF","sSH","sSH4hash4intoys6HasherVz_tF","sSK","sSK12_RegexParserE10mapOffsetsySny5IndexQzGSi5lower_Si5uppert_tF","sSK12_RegexParserE14flatmapOffsetsySny5IndexQzGSi5lower_Si5uppertSgF","sSK17_StringProcessingSL7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF","sSKsE10difference4from2bys20CollectionDifferenceVy7ElementQzGqd___SbAG_AGtXEtSKRd__AFQyd__AGRSlF","sSKsE4last5where7ElementQzSgSbADKXE_tKF","sSKsE4last7ElementQzSgvp","sSKsE6suffixy11SubSequenceQzSiF","sSKsE8dropLasty11SubSequenceQzSiF","sSKsE8reverseds18ReversedCollectionVyxGyF","sSKsE9lastIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSKsSQ7ElementRpzrlE10difference4froms20CollectionDifferenceVyABGqd___tSKRd__AAQyd__ABRSlF","sSKsSQ7ElementRpzrlE9lastIndex2of0C0QzSgAB_tF","sSKsSS7ElementRtzrlE6joined9separatorS2S_tF","sSM","sSM39withContiguousMutableStorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlF","sSM6swapAtyy5IndexQz_ACtF","sSMsE39withContiguousMutableStorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlF","sSMsE6swapAtyy5IndexQz_ACtF","sSMsE9partition2by5IndexQzSb7ElementQzKXE_tKF","sSMsEy11SubSequenceQzSny5IndexQzGcip","sSMsEy11SubSequenceQzqd__cSXRd__5BoundQyd__5IndexRtzluip","sSMsEy11SubSequenceQzys15UnboundedRange_OXEcip","sSMsEys5SliceVyxGSny5IndexQzGcip","sSMsSKRzrlE7reverseyyF","sSMsSKRzrlE9partition2by5IndexSlQzSb7ElementSTQzKXE_tKF","sSMsSkRzSL7ElementSTRpzrlE4sortyyF","sSMsSkRzrlE4sort2byySb7ElementSTQz_ADtKXE_tKF","sSMsSkRzrlE7shuffle5usingyqd__z_tSGRd__lF","sSMsSkRzrlE7shuffleyyF","sSMss5SliceVyxG11SubSequenceRtzrlEyACSny5IndexQzGcip","sSQ","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSR","sSS","sST","sST12_RegexParserE3allyS2b7ElementQzXEF","sST12_RegexParserE3anyyS2b7ElementQzXEF","sST12_RegexParserE4noneyS2b7ElementQzXEF","sST12makeIterator0B0QzyF","sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sST8IteratorQa","sSTsE10allSatisfyyS2b7ElementQzKXEKF","sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE10enumerateds18EnumeratedSequenceVyxGyF","sSTsE13elementsEqual_2bySbqd___Sb7ElementQz_ACQyd__tKXEtKSTRd__lF","sSTsE19underestimatedCountSivp","sSTsE25lexicographicallyPrecedes_2bySbqd___Sb7ElementQz_ADtKXEtKSTRd__ACQyd__ADRSlF","sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sSTsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSTsE3max2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE3min2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE4lazys12LazySequenceVyxGvp","sSTsE5first5where7ElementQzSgSbADKXE_tKF","sSTsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF","sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF","sSTsE6sorted2bySay7ElementQzGSbAD_ADtKXE_tKF","sSTsE6starts4with2bySbqd___Sb7ElementQz_ADQyd__tKXEtKSTRd__lF","sSTsE7flatMapySay7ElementQyd__Gqd__ABQzKXEKSTRd__lF","sSTsE7flatMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE7forEachyyy7ElementQzKXEKF","sSTsE8contains5whereS2b7ElementQzKXE_tKF","sSTsE8shuffled5usingSay7ElementQzGqd__z_tSGRd__lF","sSTsE8shuffledSay7ElementQzGyF","sSTsSL7ElementRpzrlE25lexicographicallyPrecedesySbqd__STRd__AAQyd__ABRSlF","sSTsSL7ElementRpzrlE3maxABSgyF","sSTsSL7ElementRpzrlE3minABSgyF","sSTsSL7ElementRpzrlE6sortedSayABGyF","sSTsSQ7ElementRpzrlE13elementsEqualySbqd__STRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSays10ArraySliceVyABGGAB_SiSbtF","sSTsSQ7ElementRpzrlE6starts4withSbqd___tSTRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE8containsySbABF","sSTsST7ElementRpzrlE6joined9separators14JoinedSequenceVyxGqd___tSTRd__AA_AAQZAARtd__lF","sSTsST7ElementRpzrlE6joineds15FlattenSequenceVyxGyF","sSTsSy7ElementRpzrlE6joined9separatorS2S_tF","sSb","sSe","sSe4fromxs7Decoder_p_tKcfc","sSi","sSk","sSk10startIndex0B0Qzvp","sSk5index5after5IndexQzAD_tF","sSk5index6before5IndexQzAD_tF","sSk5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSk5index_8offsetBy5IndexQzAD_SitF","sSk7indices7IndicesQzvp","sSk8distance4from2toSi5IndexQz_AEtF","sSk8endIndex0B0Qzvp","sSk9formIndex5aftery0B0Qzz_tF","sSk9formIndex6beforey0B0Qzz_tF","sSky11SubSequenceQzSny5IndexQzGcip","sSky7ElementQz5IndexQzcip","sSl","sSl11SubSequenceQa","sSl12_RegexParserE15convertByOffset_2in5IndexQyd__ADQz_qd__tSlRd__lF","sSl12_RegexParserE15convertByOffset_2inSny5IndexQyd__GSnyADQzG_qd__tSlRd__lF","sSl12_RegexParserE5index8atOffset5IndexQzSi_tF","sSl12_RegexParserE5split6around11SubSequenceQz6prefix_A2E6suffixtSny5IndexQzG_tF","sSl12_RegexParserE6offset2ofSi5IndexQz_tF","sSl12_RegexParserE6offset7ofIndexSi0E0Qz_tF","sSl12_RegexParserE7offsets2ofSnySiGSny5IndexQzG_tF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropPrefixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropSuffixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl17_StringProcessingE14trimmingPrefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSl17_StringProcessingSQ7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE14trimmingPrefixy11SubSequenceQzqd__STRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGqd___SiSbtSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE6ranges2ofSaySny5IndexQzGGqd___tSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE8containsySbqd__SlRd__ABQyd__ACRSlF","sSl5IndexQa","sSl5countSivp","sSl7IndicesQa","sSlsE10firstIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSlsE13randomElement0B0QzSgyF","sSlsE13randomElement5using0B0QzSgqd__z_tSGRd__lF","sSlsE19underestimatedCountSivp","sSlsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSlsE4drop5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE5countSivp","sSlsE5first7ElementQzSgvp","sSlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF","sSlsE6prefix4upTo11SubSequenceQz5IndexQz_tF","sSlsE6prefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE6prefix7through11SubSequenceQz5IndexQz_tF","sSlsE6prefixy11SubSequenceQzSiF","sSlsE6suffix4from11SubSequenceQz5IndexQz_tF","sSlsE7isEmptySbvp","sSlsE9dropFirsty11SubSequenceQzSiF","sSlsE9formIndex_8offsetBy07limitedD0Sb0B0Qzz_SiAEtF","sSlsE9formIndex_8offsetByy0B0Qzz_SitF","sSlsEy11SubSequenceQzqd__cSXRd__5BoundQyd__5IndexRtzluip","sSlsEy11SubSequenceQzys15UnboundedRange_OXEcip","sSlsSQ7ElementRpzrlE10firstIndex2of0C0QzSgAB_tF","sSlsSQ7ElementRpzrlE5index2of5IndexQzSgAB_tF","sSlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF","sSlss5SliceVyxG11SubSequenceRtzrlEyACSny5IndexQzGcip","sSm","sSm11removeFirst7ElementQzyF","sSm11removeFirstyySiF","sSm14removeSubrangeyySny5IndexQzGF","sSm15replaceSubrange_4withySny5IndexQzG_qd__ntSlRd__7ElementQyd__AFRtzlF","sSm15reserveCapacityyySiF","sSm17_StringProcessingE10trimPrefix5whileySb7ElementQzKXE_tKF","sSm17_StringProcessingSQ7ElementRpzrlE10trimPrefixyyqd__STRd__ABQyd__ACRSlF","sSm17_StringProcessingSQ7ElementRpzrlE7replace_4with15maxReplacementsyqd___qd_0_SitSlRd__SlRd_0_ABQyd__ACRSABQyd_0_AGRSr0_lF","sSm17_StringProcessingSQ7ElementRpzrlE9replacing_4with15maxReplacementsxqd___qd_0_SitSlRd__SlRd_0_ABQyd__ACRSABQyd_0_AGRSr0_lF","sSm17_StringProcessingSQ7ElementRpzrlE9replacing_4with8subrange15maxReplacementsxqd___qd_0_Sny5IndexQzGSitSlRd__SlRd_0_ABQyd__ACRSABQyd_0_AKRSr0_lF","sSm6append10contentsOfyqd__n_tSTRd__7ElementQyd__ACRtzlF","sSm6appendyy7ElementQznF","sSm6insert10contentsOf2atyqd__n_5IndexQztSlRd__7ElementQyd__AFRtzlF","sSm6insert_2aty7ElementQzn_5IndexQztF","sSm6remove2at7ElementQz5IndexQz_tF","sSm9removeAll15keepingCapacityySb_tF","sSm9repeating5countx7ElementQz_Sitcfc","sSmsE11removeFirst7ElementQzyF","sSmsE11removeFirstyySiF","sSmsE14removeSubrangeyySny5IndexQzGF","sSmsE14removeSubrangeyyqd__SXRd__5BoundQyd__5IndexRtzlF","sSmsE15replaceSubrange_4withySny5IndexQzG_qd__tSlRd__7ElementQyd__AFRtzlF","sSmsE15replaceSubrange_4withyqd_0__qd__ntSlRd__SXRd_0_7ElementQyd__ACRtz5BoundQyd_0_5IndexRtzr0_lF","sSmsE15reserveCapacityyySiF","sSmsE1poiyxqd___xtSTRd__7ElementQyd__ABRtzlFZ","sSmsE1poiyxx_qd__tSTRd__7ElementQyd__ABRtzlFZ","sSmsE1poiyxx_qd__tSmRd__7ElementQyd__ABRtzlFZ","sSmsE2peoiyyxz_qd__tSTRd__7ElementQyd__ABRtzlFZ","sSmsE6append10contentsOfyqd__n_tSTRd__7ElementQyd__ACRtzlF","sSmsE6appendyy7ElementQznF","sSmsE6filteryxSb7ElementQzKXEKF","sSmsE6insert10contentsOf2atyqd__n_5IndexQztSlRd__7ElementQyd__AFRtzlF","sSmsE6insert_2aty7ElementQzn_5IndexQztF","sSmsE6remove2at7ElementQz5IndexQz_tF","sSmsE8applyingyxSgs20CollectionDifferenceVy7ElementQzGF","sSmsE9removeAll15keepingCapacityySb_tF","sSmsE9removeAll5whereySb7ElementQzKXE_tKF","sSmsE9repeating5countx7ElementQz_Sitcfc","sSmsEyxqd__cSTRd__7ElementQyd__AARtzlufc","sSmsSKRzrlE10removeLast7ElementSTQzyF","sSmsSKRzrlE10removeLastyySiF","sSmsSKRzrlE7popLast7ElementSTQzSgyF","sSmsSMRzrlE9removeAll5whereySb7ElementSTQzKXE_tKF","sSmxycfc","sSmyxqd__cSTRd__7ElementQyd__AARtzlufc","sSn","sSr","sSt","sSt4next7ElementQzSgyF","ss17CustomReflectableP","ss17CustomReflectableP12customMirrors0D0Vvp","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss25ExpressibleByArrayLiteralP","ss25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc","ss28CustomDebugStringConvertibleP","ss28CustomDebugStringConvertibleP16debugDescriptionSSvp","ss4Voida","ss5SliceV","ss6HasherV","ss6MirrorV","ss7DecoderP","ss7EncoderP","ss8SendableP"],"vertices":[{"p":["Deque"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["Deque",7],["<",17],["Element",0],[">",17]],"s":[["struct",12],[" ",17],["Deque",7]],"g":[["Element",0,0]],"d":"A collection implementing a double-ended queue. `Deque` (pronounced \"deck\")\nimplements an ordered random-access collection that supports efficient\ninsertions and removals from both ends.\n\n    var colors: Deque = [\"red\", \"yellow\", \"blue\"]\n\nDeques implement the same indexing semantics as arrays: they use integer\nindices, and the first element of a nonempty deque is always at index zero.\nLike arrays, deques conform to `RangeReplaceableCollection`,\n`MutableCollection` and `RandomAccessCollection`, providing a familiar\ninterface for manipulating their contents:\n\n    print(colors[1]) // \"yellow\"\n    print(colors[3]) // Runtime error: Index out of range\n\n    colors.insert(\"green\", at: 1)\n    // [\"red\", \"green\", \"yellow\", \"blue\"]\n\n    colors.remove(at: 2) // \"yellow\"\n    // [\"red\", \"green\", \"blue\"]\n\nLike all variable-size collections on the standard library, `Deque`\nimplements value semantics: each deque has an independent value that\nincludes the values of its elements. Modifying one deque does not affect any\nothers:\n\n    var copy = deque\n    copy[1] = \"violet\"\n    print(copy)  // [\"red\", \"violet\", \"blue\"]\n    print(deque) // [\"red\", \"green\", \"blue\"]\n\nThis is implemented with the copy-on-write optimization. Multiple copies of\na deque share the same underlying storage until you modify one of the\ncopies. When that happens, the deque being modified replaces its storage\nwith a uniquely owned copy of itself, which is then modified in place.\n\n`Deque` stores its elements in a circular buffer, which allows efficient\ninsertions and removals at both ends of the collection; however, this comes\nat the cost of potentially discontiguous storage. In contrast, `Array` is\n(usually) backed by a contiguous buffer, where new data can be efficiently\nappended to the end, but inserting at the front is relatively slow, as\nexisting elements need to be shifted to make room.\n\nThis difference in implementation means that while the interface of a deque\nis very similar to an array, the operations have different performance\ncharacteristics. Mutations near the front are expected to be significantly\nfaster in deques, but arrays may measure slightly faster for general\nrandom-access lookups.\n\nDeques provide a handful of additional operations that make it easier to\ninsert and remove elements at the front. This includes queue operations such\nas `popFirst` and `prepend`, including the ability to directly prepend a\nsequence of elements:\n\n    colors.append(\"green\")\n    colors.prepend(\"orange\")\n    // colors: [\"orange\", \"red\", \"blue\", \"yellow\", \"green\"]\n\n    colors.popLast() // \"green\"\n    colors.popFirst() // \"orange\"\n    // colors: [\"red\", \"blue\", \"yellow\"]\n\n    colors.prepend(contentsOf: [\"purple\", \"teal\"])\n    // colors: [\"purple\", \"teal\", \"red\", \"blue\", \"yellow\"]\n\nUnlike arrays, deques do not currently provide direct unsafe access to their\nunderlying storage. They also lack a `capacity` property -- the size of the\nstorage buffer at any given point is an unstable implementation detail that\nshould not affect application logic. (However, deques do provide a\n`reserveCapacity` method.)"},{"p":["Deque","Iterator"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"g":[["Element",0,0]],"d":"An iterator over the members of a deque.","o":99},{"p":["Deque","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["Element",18],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["Element",18],["...)",17]],"g":[["Element",0,0]],"d":"Creates a new deque from the contents of an array literal.\n\nDo not call this initializer directly. It is used by the compiler when\nyou use an array literal. Instead, create a new deque using an array\nliteral as its value by enclosing a comma-separated list of values in\nsquare brackets. You can use an array literal anywhere a deque is expected\nby the type context.\n\n- Parameter elements: A variadic list of elements of the new deque.","o":250},{"p":["Deque","init(minimumCapacity:)"],"f":[["init",10],["(",17],["minimumCapacity",1],[": ",17],["Int",18,136],[")",17]],"s":[["init",10],["(",17],["minimumCapacity",1],[": ",17],["Int",18],[")",17]],"g":[["Element",0,0]],"d":"Creates and empty deque with preallocated space for at least the specified\nnumber of elements.\n\n- Parameter minimumCapacity: The minimum number of elements that the\n  newly created deque should be able to store without reallocating its\n  storage buffer."},{"p":["Deque","init(unsafeUninitializedCapacity:initializingWith:)"],"f":[["init",10],["(",17],["unsafeUninitializedCapacity",1],[" ",17],["capacity",2],[": ",17],["Int",18,136],[", ",17],["initializingWith",1],[" ",17],["initializer",2],[": (",17],["inout",12],[" ",17],["UnsafeMutableBufferPointer",18,241],["<",17],["Element",18],[">, ",17],["inout",12],[" ",17],["Int",18,136],[") ",17],["throws",12],[" -> ",17],["Void",18,253],[") ",17],["rethrows",12]],"s":[["init",10],["(",17],["unsafeUninitializedCapacity",1],[": ",17],["Int",18],[", ",17],["initializingWith",1],[": (",17],["inout",12],[" ",17],["UnsafeMutableBufferPointer",18],["<",17],["Element",18],[">, ",17],["inout",12],[" ",17],["Int",18],[") ",17],["throws",12],[" -> ",17],["Void",18],[") ",17],["rethrows",12]],"g":[["Element",0,0]],"d":"Creates a deque with the specified capacity, then calls the given\nclosure with a buffer covering the array's uninitialized memory.\n\nInside the closure, set the `initializedCount` parameter to the number of\nelements that are initialized by the closure. The memory in the range\n`buffer[0..<initializedCount]` must be initialized at the end of the\nclosure's execution, and the memory in the range\n`buffer[initializedCount...]` must be uninitialized. This postcondition\nmust hold even if the `initializer` closure throws an error.\n\n- Note: While the resulting deque may have a capacity larger than the\n  requested amount, the buffer passed to the closure will cover exactly\n  the requested number of elements.\n\n- Parameters:\n  - unsafeUninitializedCapacity: The number of elements to allocate\n    space for in the new deque.\n  - initializer: A closure that initializes elements and sets the count\n    of the new deque.\n    - Parameters:\n      - buffer: A buffer covering uninitialized memory with room for the\n        specified number of elements.\n      - initializedCount: The count of initialized elements in the deque,\n        which begins as zero. Set `initializedCount` to the number of\n        elements you initialize."},{"p":["Deque","init(repeating:count:)"],"f":[["init",10],["(",17],["repeating",1],[" ",17],["repeatedValue",2],[": ",17],["Element",18],[", ",17],["count",1],[": ",17],["Int",18,136],[")",17]],"s":[["init",10],["(",17],["repeating",1],[": ",17],["Element",18],[", ",17],["count",1],[": ",17],["Int",18],[")",17]],"g":[["Element",0,0]],"d":"Creates a new deque containing the specified number of a single, repeated\nvalue.\n\n- Parameters:\n  - repeatedValue: The element to repeat.\n  - count: The number of times to repeat the element. `count` must be zero\n     or greater.\n\n- Complexity: O(`count`)","o":211},{"p":["Deque","init(from:)"],"f":[["init",10],["(",17],["from",1],[" ",17],["decoder",2],[": ",17],["Decoder",18,257],[") ",17],["throws",12]],"s":[["init",10],["(",17],["from",1],[": ",17],["Decoder",18],[") ",17],["throws",12]],"e":[["Element",1,"Decodable",134]],"c":[["Element",1,"Decodable",134]],"g":[["Element",0,0]],"d":"Creates a new deque by decoding from the given decoder.\n\nThis initializer throws an error if reading from the decoder fails, or\nif the data read is corrupted or otherwise invalid.\n\n- Parameter decoder: The decoder to read data from.","o":135},{"p":["Deque","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"g":[["Element",0,0]],"d":"Creates a new, empty deque.\n\nThis is equivalent to initializing with an empty array literal.\nFor example:\n\n    let deque1 = Deque<Int>()\n    print(deque1.isEmpty) // true\n\n    let deque2: Deque<Int> = []\n    print(deque2.isEmpty) // true\n\n- Complexity: O(1)","o":238},{"p":["Deque","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["elements",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["Element",18],[" == ",17],["S",18],[".",17],["Element",18],[", ",17],["S",18],[" : ",17],["Sequence",18,93]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["Element",2,"S.Element"],["S",1,"Sequence",93]],"g":[["Element",0,0],["S",0,1]],"d":"Creates a deque containing the elements of a sequence.\n\n- Parameters:\n  - elements: The sequence of elements to turn into a deque.\n\n- Complexity: O(*n*), where *n* is the number of elements in the sequence.","o":239},{"p":["Deque","init(_:)"],"f":[["init",10],["<",17],["C",0],[">(",17],["_",1],[" ",17],["elements",2],[": ",17],["C",18],[") ",17],["where",12],[" ",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18],[", ",17],["C",18],[" : ",17],["Collection",18,150]],"s":[["init",10],["<",17],["C",0],[">(",17],["C",18],[")",17]],"c":[["Element",2,"C.Element"],["C",1,"Collection",150]],"g":[["Element",0,0],["C",0,1]],"d":"Creates a deque containing the elements of a collection.\n\n- Parameters:\n  - elements: The collection of elements to turn into a deque.\n\n- Complexity: O(`elements.count`)"},{"p":["Deque","subscript(_:)"],"f":[["subscript",10],["(",17],["bounds",2],[": ",17],["Range",18,240],["<",17],["Int",18,136],[">) -> ",17],["Slice",18,254],["<",17],["Deque",18,0],["<",17],["Element",18],[">> { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["Range",18],["<",17],["Int",18],[">) -> ",17],["Slice",18],["<",17],["Deque",18],["<",17],["Element",18],[">>",17]],"g":[["Element",0,0]],"d":"Accesses a contiguous subrange of the deque's elements.\n\n- Parameters:\n  - bounds: A range of the deque's indices. The bounds of the range must\n     be valid indices of the deque (including the `endIndex`).\n\nThe accessed slice uses the same indices for the same elements as the\noriginal collection.","o":148},{"p":["Deque","subscript(_:)"],"f":[["subscript",10],["(",17],["index",2],[": ",17],["Int",18,136],[") -> ",17],["Element",18],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["(",17],["Int",18],[") -> ",17],["Element",18]],"g":[["Element",0,0]],"d":"Accesses the element at the specified position.\n\n- Parameters:\n  - index: The position of the element to access. `index` must be greater\n     than or equal to `startIndex` and less than `endIndex`.\n\n- Complexity: Reading an element from a deque is O(1). Writing is O(1)\n   unless the deque’s storage is shared with another deque, in which case\n   writing is O(`count`).","o":149},{"p":["Deque","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["Int",18,136],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["Int",18]],"d":"The position of the first element in a nonempty deque.\n\nFor an instance of `Deque`, `startIndex` is always zero. If the deque is\nempty, `startIndex` is equal to `endIndex`.\n\n- Complexity: O(1)","o":138},{"p":["Deque","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,92],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"d":"A textual representation of this instance.","o":247},{"p":["Deque","customMirror"],"f":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18,256],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["customMirror",7],[": ",17],["Mirror",18]],"d":"The custom mirror for this instance.","o":245},{"p":["Deque","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,92],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"d":"A textual representation of this instance, suitable for debugging.","o":252},{"p":["Deque","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,136],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The number of elements in the deque.\n\n- Complexity: O(1)","o":168},{"p":["Deque","indices"],"f":[["var",12],[" ",17],["indices",7],[": ",17],["Range",18,240],["<",17],["Int",18,136],["> { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["indices",7],[": ",17],["Range",18],["<",17],["Int",18],[">",17]],"d":"The indices that are valid for subscripting this deque, in ascending order.\n\n- Complexity: O(1)","o":143},{"p":["Deque","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18,136],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18]],"d":"The deque’s “past the end” position—that is, the position one greater than\nthe last valid subscript argument.\n\nFor an instance of `Deque`, `endIndex` is always equal to its `count`. If\nthe deque is empty, `endIndex` is equal to `startIndex`.\n\n- Complexity: O(1)","o":145},{"p":["Deque","removeFirst()"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["removeFirst",7],["() -> ",17],["Element",18]],"s":[["func",12],[" ",17],["removeFirst",7],["() -> ",17],["Element",18]],"g":[["Element",0,0]],"d":"Removes and returns the first element of the deque.\n\nThe collection must not be empty.\n\n- Returns: The removed element.\n\n- Complexity: O(1) if the underlying storage isn't shared; otherwise\n   O(`count`).","o":195},{"p":["Deque","removeFirst(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["removeFirst",7],["(",17],["_",1],[" ",17],["n",2],[": ",17],["Int",18,136],[")",17]],"s":[["func",12],[" ",17],["removeFirst",7],["(",17],["Int",18],[")",17]],"g":[["Element",0,0]],"d":"Removes the specified number of elements from the beginning of the deque.\n\n- Parameter n: The number of elements to remove from the deque. `n` must\n   be greater than or equal to zero and must not exceed the number of\n   elements in the deque.\n\n- Complexity: O(`n`) if the underlying storage isn't shared; otherwise\n   O(`count`).","o":196},{"p":["Deque","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["Deque",18,0],["<",17],["Element",18],[">.",17],["Iterator",18,1]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["Deque",18],["<",17],["Element",18],[">.",17],["Iterator",18]],"g":[["Element",0,0]],"d":"Returns an iterator over the elements of the deque.\n\n- Complexity: O(1)","o":97},{"p":["Deque","removeSubrange(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["removeSubrange",7],["(",17],["_",1],[" ",17],["bounds",2],[": ",17],["Range",18,240],["<",17],["Int",18,136],[">)",17]],"s":[["func",12],[" ",17],["removeSubrange",7],["(",17],["Range",18],["<",17],["Int",18],[">)",17]],"g":[["Element",0,0]],"d":"All elements following the specified range are (logically) moved up to\nclose the resulting gap. (Internally, the deque may actually decide to\nshift previous elements forward instead to minimize the number of elements\nthat need to be moved.)\n\n- Parameters:\n  - bounds: The range of the collection to be removed. The bounds of the\n     range must be valid indices of the collection.\n\n- Complexity: O(`count`). Removing elements from the start or end of the\n   deque costs O(`bounds.count`) if the deque's storage isn't shared.","o":197},{"p":["Deque","replaceSubrange(_:with:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["replaceSubrange",7],["<",17],["C",0],[">(",17],["_",1],[" ",17],["subrange",2],[": ",17],["Range",18,240],["<",17],["Int",18,136],[">, ",17],["with",1],[" ",17],["newElements",2],[": ",17],["C",18],[") ",17],["where",12],[" ",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18],[", ",17],["C",18],[" : ",17],["Collection",18,150]],"s":[["func",12],[" ",17],["replaceSubrange",7],["<",17],["C",0],[">(",17],["Range",18],["<",17],["Int",18],[">, ",17],["with",1],[": ",17],["C",18],[")",17]],"c":[["Element",2,"C.Element"],["C",1,"Collection",150]],"g":[["Element",0,0],["C",0,1]],"d":"Replaces a range of elements with the elements in the specified\ncollection.\n\nThis method has the effect of removing the specified range of elements\nfrom the deque and inserting the new elements at the same location. The\nnumber of new elements need not match the number of elements being\nremoved.\n\n- Parameters:\n  - subrange: The subrange of the deque to replace. The bounds of the\n     subrange must be valid indices of the deque (including the\n     `endIndex`).\n  - newElements: The new elements to add to the deque.\n\n- Complexity: O(`self.count + newElements.count`). If the operation needs\n   to change the size of the deque, it minimizes the number of existing\n   items that need to be moved by shifting elements either before or after\n   `subrange`.","o":198},{"p":["Deque","reserveCapacity(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["reserveCapacity",7],["(",17],["_",1],[" ",17],["minimumCapacity",2],[": ",17],["Int",18,136],[")",17]],"s":[["func",12],[" ",17],["reserveCapacity",7],["(",17],["Int",18],[")",17]],"g":[["Element",0,0]],"d":"Reserves enough space to store the specified number of elements.\n\nIf you are adding a known number of elements to a deque, use this method\nto avoid multiple reallocations. It ensures that the deque has unique\nstorage, with space allocated for at least the requested number of\nelements.\n\n- Parameters:\n  - minimumCapacity: The requested number of elements to store.\n\n- Complexity: O(`count`)","o":199},{"p":["Deque","withContiguousStorageIfAvailable(_:)"],"f":[["func",12],[" ",17],["withContiguousStorageIfAvailable",7],["<",17],["R",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["UnsafeBufferPointer",18,91],["<",17],["Element",18],[">) ",17],["throws",12],[" -> ",17],["R",18],[") ",17],["rethrows",12],[" -> ",17],["R",18],["?",17]],"s":[["func",12],[" ",17],["withContiguousStorageIfAvailable",7],["<",17],["R",0],[">((",17],["UnsafeBufferPointer",18],["<",17],["Element",18],[">) ",17],["throws",12],[" -> ",17],["R",18],[") ",17],["rethrows",12],[" -> ",17],["R",18],["?",17]],"g":[["Element",0,0],["R",0,1]],"d":"Call `body(b)`, where `b` is an unsafe buffer pointer to the deque's\ncontiguous storage, if available. If the deque's contents aren't stored\ncontiguously, `body` is not called and `nil` is returned. The supplied\nbuffer pointer is only valid for the duration of the call.\n\nOften, the optimizer can eliminate bounds- and uniqueness-checks within an\nalgorithm, but when that fails, invoking the same algorithm on the unsafe\nbuffer supplied to `body` lets you trade safety for speed.\n\n- Parameters:\n  - body: The function to invoke.\n\n- Returns: The value returned by `body`, or `nil` if `body` wasn't called.\n\n- Complexity: O(1) when this instance has a unique reference to its\n   underlying storage; O(`count`) otherwise.","o":98},{"p":["Deque","withContiguousMutableStorageIfAvailable(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["withContiguousMutableStorageIfAvailable",7],["<",17],["R",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["inout",12],[" ",17],["UnsafeMutableBufferPointer",18,241],["<",17],["Element",18],[">) ",17],["throws",12],[" -> ",17],["R",18],[") ",17],["rethrows",12],[" -> ",17],["R",18],["?",17]],"s":[["func",12],[" ",17],["withContiguousMutableStorageIfAvailable",7],["<",17],["R",0],[">((",17],["inout",12],[" ",17],["UnsafeMutableBufferPointer",18],["<",17],["Element",18],[">) ",17],["throws",12],[" -> ",17],["R",18],[") ",17],["rethrows",12],[" -> ",17],["R",18],["?",17]],"g":[["Element",0,0],["R",0,1]],"d":"Call `body(b)`, where `b` is an unsafe buffer pointer to the deque's\nmutable contiguous storage. If the deque's contents aren't stored\ncontiguously, `body` is not called and `nil` is returned. The supplied\nbuffer pointer is only valid for the duration of the call.\n\nOften, the optimizer can eliminate bounds- and uniqueness-checks within an\nalgorithm, but when that fails, invoking the same algorithm on the unsafe\nbuffer supplied to `body` lets you trade safety for speed.\n\n- Parameters:\n  - body: The function to invoke.\n\n- Returns: The value returned by `body`, or `nil` if `body` wasn't called.\n\n- Complexity: O(1) when this instance has a unique reference to its\n   underlying storage; O(`count`) otherwise. (Not counting the call to\n   `body`.)","o":72},{"p":["Deque","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["Int",18,136],[") -> ",17],["Int",18,136]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"g":[["Element",0,0]],"d":"Returns the position immediately after the given index.\n\n- Parameter `i`: A valid index of the deque. `i` must be less than\n   `endIndex`.\n\n- Returns: The next valid index immediately after `i`.\n\n- Complexity: O(1)","o":139},{"p":["Deque","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["Int",18,136],[") -> ",17],["Int",18,136]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"g":[["Element",0,0]],"d":"Returns the position immediately before the given index.\n\n- Parameter `i`: A valid index of the deque. `i` must be greater than\n   `startIndex`.\n\n- Returns: The preceding valid index immediately before `i`.\n\n- Complexity: O(1)","o":140},{"p":["Deque","index(_:offsetBy:limitedBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["Int",18,136],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,136],[", ",17],["limitedBy",1],[" ",17],["limit",2],[": ",17],["Int",18,136],[") -> ",17],["Int",18,136],["?",17]],"s":[["func",12],[" ",17],["index",7],["(",17],["Int",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[", ",17],["limitedBy",1],[": ",17],["Int",18],[") -> ",17],["Int",18],["?",17]],"g":[["Element",0,0]],"d":"Returns an index that is the specified distance from the given index,\nunless that distance is beyond a given limiting index.\n\n- Parameters:\n  - i: A valid index of the array.\n  - distance: The distance to offset `i`.\n  - limit: A valid index of the deque to use as a limit.\n     If `distance > 0`, then `limit` has no effect it is less than `i`.\n     Likewise, if `distance < 0`, then `limit` has no effect if it is\n     greater than `i`.\n\n- Returns: An index offset by `distance` from the index `i`, unless that\n   index would be beyond `limit` in the direction of movement. In that\n   case, the method returns `nil`.\n\n- Complexity: O(1)","o":141},{"p":["Deque","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["Int",18,136],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,136],[") -> ",17],["Int",18,136]],"s":[["func",12],[" ",17],["index",7],["(",17],["Int",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"g":[["Element",0,0]],"d":"Returns an index that is the specified distance from the given index.\n\nThe value passed as `distance` must not offset `i` beyond the bounds of\nthe collection.\n\n- Parameters:\n  - i: A valid index of the deque.\n  - `distance`: The distance by which to offset `i`.\n\n- Returns: An index offset by `distance` from the index `i`. If `distance`\n   is positive, this is the same value as the result of `distance` calls\n   to `index(after:)`. If `distance` is negative, this is the same value\n   as the result of `abs(distance)` calls to `index(before:)`.\n\n- Complexity: O(1)","o":142},{"p":["Deque","append(contentsOf:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["append",7],["<",17],["S",0],[">(",17],["contentsOf",1],[" ",17],["newElements",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["Element",18],[" == ",17],["S",18],[".",17],["Element",18],[", ",17],["S",18],[" : ",17],["Sequence",18,93]],"s":[["func",12],[" ",17],["append",7],["<",17],["S",0],[">(",17],["contentsOf",1],[": ",17],["S",18],[")",17]],"c":[["Element",2,"S.Element"],["S",1,"Sequence",93]],"g":[["Element",0,0],["S",0,1]],"d":"Adds the elements of a sequence to the end of the deque.\n\nUse this method to append the elements of a sequence to the front of this\ndeque. This example appends the elements of a `Range<Int>` instance to a\ndeque of integers.\n\n    var numbers: Deque = [1, 2, 3, 4, 5]\n    numbers.append(contentsOf: 10...15)\n    print(numbers)\n    // Prints \"[1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15]\"\n\n- Parameter newElements: The elements to append to the deque.\n\n- Complexity: Amortized O(`newElements.count`).","o":205},{"p":["Deque","append(contentsOf:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["append",7],["<",17],["C",0],[">(",17],["contentsOf",1],[" ",17],["newElements",2],[": ",17],["C",18],[") ",17],["where",12],[" ",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18],[", ",17],["C",18],[" : ",17],["Collection",18,150]],"s":[["func",12],[" ",17],["append",7],["<",17],["C",0],[">(",17],["contentsOf",1],[": ",17],["C",18],[")",17]],"c":[["Element",2,"C.Element"],["C",1,"Collection",150]],"g":[["Element",0,0],["C",0,1]],"d":"Adds the elements of a collection to the end of the deque.\n\nUse this method to append the elements of a collection to the front of\nthis deque. This example appends the elements of a `Range<Int>` instance\nto a deque of integers.\n\n    var numbers: Deque = [1, 2, 3, 4, 5]\n    numbers.append(contentsOf: 10...15)\n    print(numbers)\n    // Prints \"[1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15]\"\n\n- Parameter newElements: The elements to append to the deque.\n\n- Complexity: Amortized O(`newElements.count`)."},{"p":["Deque","append(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["append",7],["(",17],["_",1],[" ",17],["newElement",2],[": ",17],["Element",18],[")",17]],"s":[["func",12],[" ",17],["append",7],["(",17],["Element",18],[")",17]],"g":[["Element",0,0]],"d":"Adds a new element at the end of the deque.\n\nUse this method to append a single element to the end of a deque.\n\n    var numbers: Deque = [1, 2, 3, 4, 5]\n    numbers.append(100)\n    print(numbers)\n    // Prints \"[1, 2, 3, 4, 5, 100]\"\n\nBecause deques increase their allocated capacity using an exponential\nstrategy, appending a single element to a deque is an O(1) operation when\naveraged over many calls to the `append(_:)` method. When a deque has\nadditional capacity and is not sharing its storage with another instance,\nappending an element is O(1). When a deque needs to reallocate storage\nbefore prepending or its storage is shared with another copy, appending is\nO(`count`).\n\n- Parameters:\n  - newElement: The element to append to the deque.\n\n- Complexity: Amortized O(1)\n\n- SeeAlso: `prepend(_:)`","o":206},{"p":["Deque","insert(contentsOf:at:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["insert",7],["<",17],["C",0],[">(",17],["contentsOf",1],[" ",17],["newElements",2],[": ",17],["C",18],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,136],[") ",17],["where",12],[" ",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18],[", ",17],["C",18],[" : ",17],["Collection",18,150]],"s":[["func",12],[" ",17],["insert",7],["<",17],["C",0],[">(",17],["contentsOf",1],[": ",17],["C",18],[", ",17],["at",1],[": ",17],["Int",18],[")",17]],"c":[["Element",2,"C.Element"],["C",1,"Collection",150]],"g":[["Element",0,0],["C",0,1]],"d":"Inserts the elements of a collection into the deque at the specified\nposition.\n\nThe new elements are inserted before the element currently at the\nspecified index. If you pass the deque's `endIndex` property as the\n`index` parameter, the new elements are appended to the deque.\n\n- Parameters:\n  - newElements: The new elements to insert into the deque.\n  - index: The position at which to insert the new elements. `index` must\n     be a valid index of the deque (including `endIndex`).\n\n- Complexity: O(`count + newElements.count`). The operation shifts\n   existing elements either towards the beginning or the end of the deque\n   to minimize the number of elements that need to be moved. When\n   inserting at the start or the end, this reduces the complexity to\n   amortized O(1).","o":207},{"p":["Deque","insert(_:at:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["insert",7],["(",17],["_",1],[" ",17],["newElement",2],[": ",17],["Element",18],[", ",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,136],[")",17]],"s":[["func",12],[" ",17],["insert",7],["(",17],["Element",18],[", ",17],["at",1],[": ",17],["Int",18],[")",17]],"g":[["Element",0,0]],"d":"Inserts a new element at the specified position.\n\nThe new element is inserted before the element currently at the specified\nindex. If you pass the deque’s `endIndex` as the `index` parameter, the\nnew element is appended to the deque.\n\n- Parameters:\n  - newElement: The new element to insert into the deque.\n  - index: The position at which to insert the new element. `index` must\n     be a valid index of the deque (including `endIndex`).\n\n- Complexity: O(`count`). The operation shifts existing elements either\n   towards the beginning or the end of the deque to minimize the number of\n   elements that need to be moved. When inserting at the start or the end,\n   this reduces the complexity to amortized O(1).","o":208},{"p":["Deque","remove(at:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["at",1],[" ",17],["index",2],[": ",17],["Int",18,136],[") -> ",17],["Element",18]],"s":[["func",12],[" ",17],["remove",7],["(",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Element",18]],"g":[["Element",0,0]],"d":"Removes and returns the element at the specified position.\n\nTo close the resulting gap, all elements following the specified position\nare (logically) moved up by one index position. (Internally, the deque may\nactually decide to shift previous elements forward instead to minimize the\nnumber of elements that need to be moved.)\n\n- Parameters:\n  - index: The position of the element to remove. `index` must be a valid\n     index of the array.\n\n- Returns: The element originally at the specified index.\n\n- Complexity: O(`count`). Removing elements from the start or end of the\n   deque costs O(1) if the deque's storage isn't shared.","o":209},{"p":["Deque","swapAt(_:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["swapAt",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["Int",18,136],[", ",17],["_",1],[" ",17],["j",2],[": ",17],["Int",18,136],[")",17]],"s":[["func",12],[" ",17],["swapAt",7],["(",17],["Int",18],[", ",17],["Int",18],[")",17]],"g":[["Element",0,0]],"d":"Exchanges the values at the specified indices of the collection.\n\nBoth parameters must be valid indices of the collection and not equal to\n`endIndex`. Passing the same index as both `i` and `j` has no effect.\n\n- Parameters:\n  - i: The index of the first value to swap.\n  - j: The index of the second value to swap.\n\n- Complexity: O(1) when this instance has a unique reference to its\n   underlying storage; O(`count`) otherwise.","o":73},{"p":["Deque","prepend(contentsOf:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["prepend",7],["<",17],["S",0],[">(",17],["contentsOf",1],[" ",17],["newElements",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["Element",18],[" == ",17],["S",18],[".",17],["Element",18],[", ",17],["S",18],[" : ",17],["Sequence",18,93]],"s":[["func",12],[" ",17],["prepend",7],["<",17],["S",0],[">(",17],["contentsOf",1],[": ",17],["S",18],[")",17]],"c":[["Element",2,"S.Element"],["S",1,"Sequence",93]],"g":[["Element",0,0],["S",0,1]],"d":"Adds the elements of a sequence to the front of the deque.\n\nUse this method to prepend the elements of a sequence to the front of this\ndeque. This example prepends the elements of a `Range<Int>` instance to a\ndeque of integers.\n\n    var numbers: Deque = [1, 2, 3, 4, 5]\n    numbers.prepend(contentsOf: 10...15)\n    print(numbers)\n    // Prints \"[10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5]\"\n\n- Parameter newElements: The elements to prepend to the deque.\n\n- Complexity: Amortized O(`newElements.count`).\n\n- SeeAlso: `append(contentsOf:)`"},{"p":["Deque","prepend(contentsOf:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["prepend",7],["<",17],["C",0],[">(",17],["contentsOf",1],[" ",17],["newElements",2],[": ",17],["C",18],[") ",17],["where",12],[" ",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18],[", ",17],["C",18],[" : ",17],["Collection",18,150]],"s":[["func",12],[" ",17],["prepend",7],["<",17],["C",0],[">(",17],["contentsOf",1],[": ",17],["C",18],[")",17]],"c":[["Element",2,"C.Element"],["C",1,"Collection",150]],"g":[["Element",0,0],["C",0,1]],"d":"Adds the elements of a collection to the front of the deque.\n\nUse this method to prepend the elements of a collection to the front of\nthis deque. This example prepends the elements of a `Range<Int>` instance\nto a deque of integers.\n\n    var numbers: Deque = [1, 2, 3, 4, 5]\n    numbers.prepend(contentsOf: 10...15)\n    print(numbers)\n    // Prints \"[10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5]\"\n\n- Parameter newElements: The elements to prepend to the deque.\n\n- Complexity: Amortized O(`newElements.count`).\n\n- SeeAlso: `append(contentsOf:)`"},{"p":["Deque","prepend(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["prepend",7],["(",17],["_",1],[" ",17],["newElement",2],[": ",17],["Element",18],[")",17]],"s":[["func",12],[" ",17],["prepend",7],["(",17],["Element",18],[")",17]],"g":[["Element",0,0]],"d":"Adds a new element at the front of the deque.\n\nUse this method to append a single element to the front of a deque.\n\n    var numbers: Deque = [1, 2, 3, 4, 5]\n    numbers.prepend(100)\n    print(numbers)\n    // Prints \"[100, 1, 2, 3, 4, 5]\"\n\nBecause deques increase their allocated capacity using an exponential\nstrategy, prepending a single element to a deque is an O(1) operation when\naveraged over many calls to the `prepend(_:)` method. When a deque has\nadditional capacity and is not sharing its storage with another instance,\nprepending an element is O(1). When a deque needs to reallocate storage\nbefore prepending or its storage is shared with another copy, prepending\nis O(`count`).\n\n- Parameter newElement: The element to prepend to the deque.\n\n- Complexity: Amortized O(1).\n\n- SeeAlso: `append(_:)`"},{"p":["Deque","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Element",18],["?",17]],"g":[["Element",0,0]],"d":"Advances to the next element and returns it, or `nil` if no next element\nexists.\n\nOnce `nil` has been returned, all subsequent calls return `nil`.","o":243},{"p":["Deque","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["Int",18,136],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["Int",18,136],[") -> ",17],["Int",18,136]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["Int",18],[", ",17],["to",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"g":[["Element",0,0]],"d":"Returns the distance between two indices.\n\n- Parameters:\n  - start: A valid index of the collection.\n  - end: Another valid index of the collection.\n\n- Returns: The distance between `start` and `end`. If `end` is equal to\n   `start`, the result is zero. Otherwise the result is positive if `end`\n   is greater than `start`.\n\n- Complexity: O(1)","o":144},{"p":["Deque","popFirst()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["popFirst",7],["() -> ",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["popFirst",7],["() -> ",17],["Element",18],["?",17]],"g":[["Element",0,0]],"d":"Removes and returns the first element of this deque, if it exists.\n\n- Returns: The first element of the original collection if the collection\n   isn't empty; otherwise, `nil`.\n\n- Complexity: O(1) when this instance has a unique reference to its\n   underlying storage; O(`count`) otherwise."},{"p":["Deque","formIndex(after:)"],"f":[["func",12],[" ",17],["formIndex",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["inout",12],[" ",17],["Int",18,136],[")",17]],"s":[["func",12],[" ",17],["formIndex",7],["(",17],["after",1],[": ",17],["inout",12],[" ",17],["Int",18],[")",17]],"g":[["Element",0,0]],"d":"Replaces the given index with its successor.\n\n- Parameter `i`: A valid index of the deque. `i` must be less than\n   `endIndex`.\n\n- Complexity: O(1)","o":146},{"p":["Deque","formIndex(before:)"],"f":[["func",12],[" ",17],["formIndex",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["inout",12],[" ",17],["Int",18,136],[")",17]],"s":[["func",12],[" ",17],["formIndex",7],["(",17],["before",1],[": ",17],["inout",12],[" ",17],["Int",18],[")",17]],"g":[["Element",0,0]],"d":"Replaces the given index with its predecessor.\n\n- Parameter `i`: A valid index of the deque. `i` must be greater than `startIndex`.\n\n- Complexity: O(1)","o":147},{"p":["Deque","removeAll(keepingCapacity:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["removeAll",7],["(",17],["keepingCapacity",1],[" ",17],["keepCapacity",2],[": ",17],["Bool",18,133],[" = false)",17]],"s":[["func",12],[" ",17],["removeAll",7],["(",17],["keepingCapacity",1],[": ",17],["Bool",18],[")",17]],"g":[["Element",0,0]],"d":"Removes all elements from the deque.\n\n- Parameter keepCapacity: Pass true to keep the existing storage capacity\n   of the deque after removing its elements. The default value is false.\n\n- Complexity: O(`count`)","o":210},{"p":["Deque","encode(to:)"],"f":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[" ",17],["encoder",2],[": ",17],["Encoder",18,258],[") ",17],["throws",12]],"s":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[": ",17],["Encoder",18],[") ",17],["throws",12]],"e":[["Element",1,"Encodable",53]],"c":[["Element",1,"Encodable",53]],"g":[["Element",0,0]],"d":"Encodes the elements of this deque into the given encoder in an unkeyed\ncontainer.\n\nThis function throws an error if any values are invalid for the given\nencoder's format.\n\n- Parameter encoder: The encoder to write data to.","o":54},{"p":["Deque","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,255],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"e":[["Element",1,"Hashable",55]],"c":[["Element",1,"Hashable",55]],"g":[["Element",0,0]],"d":"Hashes the essential components of this value by feeding them into the\ngiven hasher.\n\nComplexity: O(`count`)","o":56},{"p":["Deque","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["left",2],[": ",17],["Deque",18,0],["<",17],["Element",18],[">, ",17],["right",2],[": ",17],["Deque",18,0],["<",17],["Element",18],[">) -> ",17],["Bool",18,133]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["Deque",18],["<",17],["Element",18],[">, ",17],["Deque",18],["<",17],["Element",18],[">) -> ",17],["Bool",18]],"e":[["Element",1,"Equatable",88]],"c":[["Element",1,"Equatable",88]],"g":[["Element",0,0]],"d":"Returns a Boolean value indicating whether two values are equal. Two\ndeques are considered equal if they contain the same elements in the same\norder.\n\n- Complexity: O(`min(left.count, right.count)`)","o":89},{"p":["Deque","SubSequence"],"f":[["typealias",12],[" ",17],["SubSequence",7],[" = ",17],["Slice",18,254],["<",17],["Deque",18,0],["<",17],["Element",18],[">>",17]],"s":[["typealias",12],[" ",17],["SubSequence",7]],"g":[["Element",0,0]],"o":151},{"p":["Deque","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["Int",18,136]],"s":[["typealias",12],[" ",17],["Index",7]],"g":[["Element",0,0]],"o":167},{"p":["Deque","Indices"],"f":[["typealias",12],[" ",17],["Indices",7],[" = ",17],["Range",18,240],["<",17],["Int",18,136],[">",17]],"s":[["typealias",12],[" ",17],["Indices",7]],"g":[["Element",0,0]],"o":169}],"edges":{"conformer":[0,53,[["Element",1,"Encodable",53]],0,55,[["Element",1,"Hashable",55]],0,57,[],0,71,[],0,88,[["Element",1,"Equatable",88]],0,93,[],0,134,[["Element",1,"Decodable",134]],0,137,[],0,150,[],0,194,[],0,244,[],0,246,[],0,249,[],0,251,[],0,259,[],1,242,[],1,259,[]],"feature":[58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,90,0,94,0,95,0,96,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,152,0,153,0,154,0,155,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,165,0,166,0,170,0,171,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,192,0,193,0,200,0,201,0,202,0,203,0,204,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,219,0,220,0,221,0,222,0,223,0,224,0,225,0,226,0,227,0,228,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,248,0],"member":[1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,1,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0]},"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-collections@1.0.2/.build/checkouts/swift-collections/Sources/DequeModule/Deque+Codable.swift","symbols":[20,14,47,36,9,6]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-collections@1.0.2/.build/checkouts/swift-collections/Sources/DequeModule/Deque+Collection.swift","symbols":[19,16,1,79,25,41,96,14,21,151,14,25,163,19,51,164,19,50,165,19,52,172,13,16,182,13,12,193,13,18,200,13,17,212,14,27,226,14,44,243,14,28,256,14,45,279,14,30,302,14,29,331,14,42,348,9,11,389,9,10,416,23,37,448,23,26,490,9,7,506,23,24,529,23,23,570,9,5,589,9,8,601,9,9,642,23,33,664,23,31,706,23,32,739,23,35,776,23,34,805,23,36,831,23,22,864,23,19,879,23,20,893,23,46]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-collections@1.0.2/.build/checkouts/swift-collections/Sources/DequeModule/Deque+CustomDebugStringConvertible.swift","symbols":[13,13,15]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-collections@1.0.2/.build/checkouts/swift-collections/Sources/DequeModule/Deque+CustomReflectable.swift","symbols":[13,13,14]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-collections@1.0.2/.build/checkouts/swift-collections/Sources/DequeModule/Deque+CustomStringConvertible.swift","symbols":[13,13,13]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-collections@1.0.2/.build/checkouts/swift-collections/Sources/DequeModule/Deque+Equatable.swift","symbols":[18,21,49]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-collections@1.0.2/.build/checkouts/swift-collections/Sources/DequeModule/Deque+ExpressibleByArrayLiteral.swift","symbols":[23,9,2]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-collections@1.0.2/.build/checkouts/swift-collections/Sources/DequeModule/Deque+Extras.swift","symbols":[38,9,4,70,23,43,108,23,40,132,23,39,167,23,38]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-collections@1.0.2/.build/checkouts/swift-collections/Sources/DequeModule/Deque+Hashable.swift","symbols":[17,14,48]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-collections@1.0.2/.build/checkouts/swift-collections/Sources/DequeModule/Deque.swift","symbols":[82,14,0,101,9,3]}]}