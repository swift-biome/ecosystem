{"culture":"JSON","dependencies":[{"package":"swift-grammar","modules":["Grammar"]}],"extensions":[{"name":"json","source":"@import (Grammar)\n\n# ``JSON``\n\nEfficiently parse and decode JSON in pure Swift.\n\nTo minimize namespace pollution, most of this module’s API lives under the ``JSON/JSON`` enumeration.\n\nThis module re-exports the ``Grammar`` module from ``/swift-grammar``.\n"}],"partitions":[{"namespace":"JSON","communities":[{"community":"enum","startIndex":0,"endIndex":22},{"community":"struct","startIndex":22,"endIndex":28},{"community":"enum.case","startIndex":28,"endIndex":38},{"community":"init","startIndex":38,"endIndex":44},{"community":"type.subscript","startIndex":44,"endIndex":45},{"community":"type.property","startIndex":45,"endIndex":52},{"community":"property","startIndex":52,"endIndex":72},{"community":"type.method","startIndex":72,"endIndex":85},{"community":"method","startIndex":85,"endIndex":182},{"community":"typealias","startIndex":182,"endIndex":210}]}],"identifiers":["s4JSONAAO","s4JSONAAO14PrimitiveErrorO","s4JSONAAO14RecursiveErrorO","s4JSONAAO4RuleO","s4JSONAAO4RuleO10WhitespaceO","s4JSONAAO4RuleO13NumberLiteralO","s4JSONAAO4RuleO13NumberLiteralO11PlusOrMinusO","s4JSONAAO4RuleO13StringLiteralO","s4JSONAAO4RuleO13StringLiteralO14EscapeSequenceO","s4JSONAAO4RuleO13StringLiteralO15EscapedCodeUnitO","s4JSONAAO4RuleO13StringLiteralO8CodeUnitO","s4JSONAAO4RuleO4NullO","s4JSONAAO4RuleO4RootO","s4JSONAAO4RuleO4TrueO","s4JSONAAO4RuleO5ArrayO","s4JSONAAO4RuleO5FalseO","s4JSONAAO4RuleO5ValueO","s4JSONAAO4RuleO6ObjectO","s4JSONAAO4RuleO6ObjectO4ItemO","s4JSONAAO4RuleO7KeywordO","s4JSONAAO6Base10O","s4JSONAAO6Base10O7InverseO","s4JSONAAO12LintingErrorV","s4JSONAAO17LintingDictionaryV","s4JSONAAO20IntegerOverflowErrorV","s4JSONAAO25InvalidUnicodeScalarErrorV","s4JSONAAO6NumberV","s4JSONAAO7DecoderV","s4JSONAAO14PrimitiveErrorO8matchingyAdB_ypXptcADmF","s4JSONAAO14PrimitiveErrorO9undefinedyADSS_SDySSABGtcADmF","s4JSONAAO14RecursiveErrorO10dictionaryyADs0C0_p_SStcADmF","s4JSONAAO14RecursiveErrorO5arrayyADs0C0_p_tcADmF","s4JSONAAO4boolyABSbcABmF","s4JSONAAO4nullyA2BmF","s4JSONAAO5arrayyABSayABGcABmF","s4JSONAAO6numberyA2B6NumberVcABmF","s4JSONAAO6objectyABSaySS3key_AB5valuetGcABmF","s4JSONAAO6stringyABSScABmF","s4JSONAAO12LintingErrorV6unusedADSDySSABG_tcfc","s4JSONAAO17LintingDictionaryVyADSDySSABGcfc","s4JSONAAO20IntegerOverflowErrorV6number9overflowsAdB6NumberV_s010FixedWidthB0_pXptcfc","s4JSONAAO25InvalidUnicodeScalarErrorV5valueADs6UInt16V_tcfc","s4JSONAAO6NumberV4sign5units6placesADs17FloatingPointSignO_s6UInt64Vs6UInt32Vtcfc","s4JSONAAO7DecoderV_4path8userInfoAdB_Says9CodingKey_pGSDys0f4UsereG0VypGtcfc","s4JSONAAO6Base10O7InverseO_2asxSi_xmtcSBRzluipZ","s4JSONAAO12LintingErrorV9namespaceSSvpZ","s4JSONAAO14PrimitiveErrorO9namespaceSSvpZ","s4JSONAAO14RecursiveErrorO9namespaceSSvpZ","s4JSONAAO4RuleO4NullO7literalSays5UInt8VGvpZ","s4JSONAAO4RuleO4TrueO7literalSays5UInt8VGvpZ","s4JSONAAO4RuleO5FalseO7literalSays5UInt8VGvpZ","s4JSONAAO6Base10O3ExpSays6UInt64VGvpZ","s4JSONAAO10codingPathSays9CodingKey_pGvp","s4JSONAAO11descriptionSSvp","s4JSONAAO12LintingErrorV6unusedSDySSABGvp","s4JSONAAO12LintingErrorV7messageSSvp","s4JSONAAO14PrimitiveErrorO7messageSSvp","s4JSONAAO14RecursiveErrorO4nexts0C0_pSgvp","s4JSONAAO14RecursiveErrorO7contextSaySSGvp","s4JSONAAO17LintingDictionaryV5itemsSDySSABGvp","s4JSONAAO20IntegerOverflowErrorV11descriptionSSvp","s4JSONAAO20IntegerOverflowErrorV4typeypXpvp","s4JSONAAO20IntegerOverflowErrorV6numberAB6NumberVvp","s4JSONAAO20IntegerOverflowErrorV9overflowss010FixedWidthB0_pXpvp","s4JSONAAO25InvalidUnicodeScalarErrorV5values6UInt16Vvp","s4JSONAAO6NumberV11descriptionSSvp","s4JSONAAO6NumberV4signs17FloatingPointSignOvp","s4JSONAAO6NumberV5unitss6UInt64Vvp","s4JSONAAO6NumberV6placess6UInt64Vvp","s4JSONAAO7DecoderV10codingPathSays9CodingKey_pGvp","s4JSONAAO7DecoderV8userInfoSDys010CodingUserD3KeyVypGvp","s4JSONAAO8userInfoSDys010CodingUserC3KeyVypGvp","s4JSONAAO4RuleO10WhitespaceO5parse8terminalytSgs5UInt8V_tFZ","s4JSONAAO4RuleO13NumberLiteralO11PlusOrMinusO5parse8terminals17FloatingPointSignOSgs5UInt8V_tFZ","s4JSONAAO4RuleO13NumberLiteralO5parseyAB0C0V7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAJ0G11DiagnosticsRd__s5UInt8VAN_7ElementRTd__lFZ","s4JSONAAO4RuleO13StringLiteralO14EscapeSequenceO5parseySS7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAJ0I11DiagnosticsRd__s5UInt8VAN_7ElementRTd__lFZ","s4JSONAAO4RuleO13StringLiteralO15EscapedCodeUnitO5parse8terminals7UnicodeO6ScalarVSgs5UInt8V_tFZ","s4JSONAAO4RuleO13StringLiteralO5parseySS7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAH0G11DiagnosticsRd__s5UInt8VAL_7ElementRTd__lFZ","s4JSONAAO4RuleO13StringLiteralO8CodeUnitO5parse8terminalytSgs5UInt8V_tFZ","s4JSONAAO4RuleO4RootO5parseyAB7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAH0F11DiagnosticsRd__s5UInt8VAL_7ElementRTd__lFZ","s4JSONAAO4RuleO5ArrayO5parseySayABG7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAI0F11DiagnosticsRd__s5UInt8VAM_7ElementRTd__lFZ","s4JSONAAO4RuleO5ValueO5parseyAB7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAH0F11DiagnosticsRd__s5UInt8VAL_7ElementRTd__lFZ","s4JSONAAO4RuleO6ObjectO4ItemO5parseySS3key_AB5valuet7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAL0I11DiagnosticsRd__s5UInt8VAP_7ElementRTd__lFZ","s4JSONAAO4RuleO6ObjectO5parseySaySS3key_AB5valuetG7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAK0H11DiagnosticsRd__s5UInt8VAO_7ElementRTd__lFZ","s4JSONAAO6escapeySSxSyRzlFZ","s4JSONAAO16unkeyedContainers015UnkeyedDecodingC0_pyKF","s4JSONAAO17LintingDictionaryV3pop_2asSSSgSS_AGmtKF","s4JSONAAO17LintingDictionaryV3pop_2asSSSgSS_SSmtKF","s4JSONAAO17LintingDictionaryV3pop_2asSayABGSgSS_AGmtKF","s4JSONAAO17LintingDictionaryV3pop_2asSayABGSgSS_AHmtKF","s4JSONAAO17LintingDictionaryV3pop_2asSbSgSS_AGmtKF","s4JSONAAO17LintingDictionaryV3pop_2asSbSgSS_SbmtKF","s4JSONAAO17LintingDictionaryV3pop_2as_xSgSS_SayABGSgmxAHKXEtKlF","s4JSONAAO17LintingDictionaryV3pop_2as_xSgSS_SayABGmxAHKXEtKlF","s4JSONAAO17LintingDictionaryV3pop_2asxSgSS_AGmtKSBRzlF","s4JSONAAO17LintingDictionaryV3pop_2asxSgSS_AGmtKs17FixedWidthIntegerRzSURzlF","s4JSONAAO17LintingDictionaryV3pop_2asxSgSS_AGmtKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO17LintingDictionaryV3pop_2asxSgSS_xmtKSBRzlF","s4JSONAAO17LintingDictionaryV3pop_2asxSgSS_xmtKs17FixedWidthIntegerRzSURzlF","s4JSONAAO17LintingDictionaryV3pop_2asxSgSS_xmtKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO17LintingDictionaryV3pop_2asytSgSS_ytmtKF","s4JSONAAO17LintingDictionaryV3popyABSgSSF","s4JSONAAO17LintingDictionaryV3popyxSgSS_xABKXEtKlF","s4JSONAAO17LintingDictionaryV6remove_2asS2S_SSmtKF","s4JSONAAO17LintingDictionaryV6remove_2asSSSgSS_AGmtKF","s4JSONAAO17LintingDictionaryV6remove_2asSayABGSS_AGmtKF","s4JSONAAO17LintingDictionaryV6remove_2asSayABGSgSS_AHmtKF","s4JSONAAO17LintingDictionaryV6remove_2asSbSS_SbmtKF","s4JSONAAO17LintingDictionaryV6remove_2asSbSgSS_AGmtKF","s4JSONAAO17LintingDictionaryV6remove_2as_xSS_SayABGmxAGKXEtKlF","s4JSONAAO17LintingDictionaryV6remove_2as_xSgSS_SayABGSgmxAHKXEtKlF","s4JSONAAO17LintingDictionaryV6remove_2asxSS_xmtKSBRzlF","s4JSONAAO17LintingDictionaryV6remove_2asxSS_xmtKs17FixedWidthIntegerRzSURzlF","s4JSONAAO17LintingDictionaryV6remove_2asxSS_xmtKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO17LintingDictionaryV6remove_2asxSgSS_AGmtKSBRzlF","s4JSONAAO17LintingDictionaryV6remove_2asxSgSS_AGmtKs17FixedWidthIntegerRzSURzlF","s4JSONAAO17LintingDictionaryV6remove_2asxSgSS_AGmtKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO17LintingDictionaryV6remove_2asySS_ytmtKF","s4JSONAAO17LintingDictionaryV6removeyABSSKF","s4JSONAAO17LintingDictionaryV6removeyxSS_xABKXEtKlF","s4JSONAAO20singleValueContainers06Singlec8DecodingD0_pyF","s4JSONAAO2as_16uniquingKeysWithSDySSABGAEm_A2B_ABtKXEtKF","s4JSONAAO2as_16uniquingKeysWithSDySSABGSgAEm_A2B_ABtKXEtKF","s4JSONAAO2as_16uniquingKeysWithSDySSABGSgAFm_A2B_ABtKXEtKF","s4JSONAAO2asyS2SmKF","s4JSONAAO2asyS2bmKF","s4JSONAAO2asySSSgADmKF","s4JSONAAO2asySSSgSSmF","s4JSONAAO2asySayABGADmKF","s4JSONAAO2asySayABGSgADmF","s4JSONAAO2asySayABGSgAEmKF","s4JSONAAO2asySaySS3key_AB5valuetGAFmKF","s4JSONAAO2asySaySS3key_AB5valuetGSgAFmF","s4JSONAAO2asySaySS3key_AB5valuetGSgAGmKF","s4JSONAAO2asySbSgADmKF","s4JSONAAO2asySbSgSbmF","s4JSONAAO2asyxSgADmKSBRzlF","s4JSONAAO2asyxSgADmKs17FixedWidthIntegerRzSURzlF","s4JSONAAO2asyxSgADmKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO2asyxSgxmKs17FixedWidthIntegerRzSURzlF","s4JSONAAO2asyxSgxmKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO2asyxSgxmSBRzlF","s4JSONAAO2asyxxmKSBRzlF","s4JSONAAO2asyxxmKs17FixedWidthIntegerRzSURzlF","s4JSONAAO2asyxxmKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO2asyytSgytmF","s4JSONAAO2asyyytmKF","s4JSONAAO2isySbytmF","s4JSONAAO4case2ofxxm_tKSYRzSS8RawValueRtzlF","s4JSONAAO4lint10discarding_q_x_q_AB17LintingDictionaryVzKXEtKSTRzSS7ElementRtzr0_lF","s4JSONAAO4lint12whitelisting_q_x_q_AB17LintingDictionaryVzKXEtKSTRzSS7ElementRtzr0_lF","s4JSONAAO4lintyxxAB17LintingDictionaryVzKXEKlF","s4JSONAAO5apply7patternxSgAExmKcABXE_tKlF","s4JSONAAO5apply7patternxxSgxmKcABXE_tKlF","s4JSONAAO6NumberV14callAsFunction2asx5units_x6placestSgAIm_ts17FixedWidthIntegerRzSZRzlF","s4JSONAAO6NumberV14callAsFunction2asxSgAGm_ts17FixedWidthIntegerRzSURzlF","s4JSONAAO6NumberV14callAsFunction2asxSgAGm_ts17FixedWidthIntegerRzSZRzlF","s4JSONAAO6NumberV14callAsFunction2asxxm_tSBRzlF","s4JSONAAO6NumberV2asyx5units_x6placestSgxAF_xAGtms17FixedWidthIntegerRzSZRzlF","s4JSONAAO6NumberV2asyxSgxms17FixedWidthIntegerRzSURzlF","s4JSONAAO6NumberV2asyxSgxms17FixedWidthIntegerRzSZRzlF","s4JSONAAO6NumberV2asyxxmSBRzlF","s4JSONAAO7DecoderV16unkeyedContainers015UnkeyedDecodingD0_pyKF","s4JSONAAO7DecoderV20singleValueContainers06Singled8DecodingE0_pyF","s4JSONAAO7DecoderV6decodeyS2SmKF","s4JSONAAO7DecoderV6decodeyS2bmKF","s4JSONAAO7DecoderV6decodeyS2dmKF","s4JSONAAO7DecoderV6decodeyS2fmKF","s4JSONAAO7DecoderV6decodeyS2imKF","s4JSONAAO7DecoderV6decodeyS2umKF","s4JSONAAO7DecoderV6decodeys4Int8VAGmKF","s4JSONAAO7DecoderV6decodeys5Int16VAGmKF","s4JSONAAO7DecoderV6decodeys5Int32VAGmKF","s4JSONAAO7DecoderV6decodeys5Int64VAGmKF","s4JSONAAO7DecoderV6decodeys5UInt8VAGmKF","s4JSONAAO7DecoderV6decodeys6UInt16VAGmKF","s4JSONAAO7DecoderV6decodeys6UInt32VAGmKF","s4JSONAAO7DecoderV6decodeys6UInt64VAGmKF","s4JSONAAO7DecoderV6decodeyxxmKSeRzlF","s4JSONAAO7DecoderV9container7keyedBys22KeyedDecodingContainerVyxGxm_tKs9CodingKeyRzlF","s4JSONAAO7DecoderV9decodeNilSbyF","s4JSONAAO9container7keyedBys22KeyedDecodingContainerVyxGxm_tKs9CodingKeyRzlF","s4JSONAAO4RuleO10WhitespaceO12Constructiona","s4JSONAAO4RuleO10WhitespaceO8Terminala","s4JSONAAO4RuleO12DecimalDigita","s4JSONAAO4RuleO13NumberLiteralO11PlusOrMinusO12Constructiona","s4JSONAAO4RuleO13NumberLiteralO11PlusOrMinusO8Terminala","s4JSONAAO4RuleO13NumberLiteralO8Terminala","s4JSONAAO4RuleO13StringLiteralO14EscapeSequenceO8Terminala","s4JSONAAO4RuleO13StringLiteralO15EscapedCodeUnitO12Constructiona","s4JSONAAO4RuleO13StringLiteralO15EscapedCodeUnitO8Terminala","s4JSONAAO4RuleO13StringLiteralO8CodeUnitO12Constructiona","s4JSONAAO4RuleO13StringLiteralO8CodeUnitO7Escapeda","s4JSONAAO4RuleO13StringLiteralO8CodeUnitO8Terminala","s4JSONAAO4RuleO13StringLiteralO8CodeUnitO9Unescapeda","s4JSONAAO4RuleO13StringLiteralO8Terminala","s4JSONAAO4RuleO4NullO8Terminala","s4JSONAAO4RuleO4RootO8Terminala","s4JSONAAO4RuleO4TrueO8Terminala","s4JSONAAO4RuleO5ASCIIa","s4JSONAAO4RuleO5ArrayO8Terminala","s4JSONAAO4RuleO5FalseO8Terminala","s4JSONAAO4RuleO5ValueO8Terminala","s4JSONAAO4RuleO6ObjectO4ItemO8Terminala","s4JSONAAO4RuleO6ObjectO8Terminala","s4JSONAAO4RuleO6Paddeda","s4JSONAAO4RuleO7KeywordO4Nulla","s4JSONAAO4RuleO7KeywordO4Truea","s4JSONAAO4RuleO7KeywordO5Falsea","s4JSONAAO4RuleO8HexDigita","s7Grammar11LiteralRuleP","s7Grammar11LiteralRuleP7literal0B0QzvpZ","s7Grammar11LiteralRulePAAE5parseyyAA12ParsingInputVyqd__GzKAA0E11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAI_7ElementQYd__8TerminalRtzlFZ","s7Grammar11ParsingRuleP","s7Grammar11ParsingRuleP12ConstructionQa","s7Grammar11ParsingRuleP5parsey12ConstructionQzAA0B5InputVyqd__GzKAA0B11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__8TerminalRtzlFZ","s7Grammar11ParsingRuleP8TerminalQa","s7Grammar12ParsingInputV","s7Grammar12TerminalRuleP","s7Grammar12TerminalRuleP5parse8terminal12ConstructionQzSg0B0Qz_tFZ","s7Grammar12TerminalRulePAAE5parsey12ConstructionQzAA12ParsingInputVyqd__GzKAA0F11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__0B0RtzlFZ","s7Grammar14TraceableErrorP","s7Grammar14TraceableErrorP4nexts0C0_pSgvp","s7Grammar14TraceableErrorP7contextSaySSGvp","s7Grammar14TraceableErrorP9namespaceSSvpZ","s7Grammar14TraceableErrorPAAE11descriptionSSvp","s7Grammar18ParsingDiagnosticsP","s7Grammar18TraceableErrorRootP","s7Grammar18TraceableErrorRootP7messageSSvp","s7Grammar18TraceableErrorRootPAAE4nexts0C0_pSgvp","s7Grammar18TraceableErrorRootPAAE7contextSaySSGvp","s7GrammarAAO","s7GrammarAAO12DecimalDigitO","s7GrammarAAO3PadO","s7GrammarAAO8EncodingO","s7GrammarAAO8HexDigitO","sSB","sSS","sST","sSU","sSY","sSZ","sSb","sSd","sSe","sSf","sSi","sSu","sSy","sSz","ss17CodingUserInfoKeyV","ss17FixedWidthIntegerP","ss17FloatingPointSignO","ss22KeyedDecodingContainerV","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss24UnkeyedDecodingContainerP","ss28SingleValueDecodingContainerP","ss28SingleValueDecodingContainerP10codingPathSays9CodingKey_pGvp","ss28SingleValueDecodingContainerP6decodeyS2SmKF","ss28SingleValueDecodingContainerP6decodeyS2bmKF","ss28SingleValueDecodingContainerP6decodeyS2dmKF","ss28SingleValueDecodingContainerP6decodeyS2fmKF","ss28SingleValueDecodingContainerP6decodeyS2imKF","ss28SingleValueDecodingContainerP6decodeyS2umKF","ss28SingleValueDecodingContainerP6decodeyqd__qd__mKSeRd__lF","ss28SingleValueDecodingContainerP6decodeys4Int8VAEmKF","ss28SingleValueDecodingContainerP6decodeys5Int16VAEmKF","ss28SingleValueDecodingContainerP6decodeys5Int32VAEmKF","ss28SingleValueDecodingContainerP6decodeys5Int64VAEmKF","ss28SingleValueDecodingContainerP6decodeys5UInt8VAEmKF","ss28SingleValueDecodingContainerP6decodeys6UInt16VAEmKF","ss28SingleValueDecodingContainerP6decodeys6UInt32VAEmKF","ss28SingleValueDecodingContainerP6decodeys6UInt64VAEmKF","ss28SingleValueDecodingContainerP9decodeNilSbyF","ss4Int8V","ss4Voida","ss5ErrorP","ss5Int16V","ss5Int32V","ss5Int64V","ss5UInt8V","ss6UInt16V","ss6UInt32V","ss6UInt64V","ss7DecoderP","ss7DecoderP10codingPathSays9CodingKey_pGvp","ss7DecoderP16unkeyedContainers015UnkeyedDecodingC0_pyKF","ss7DecoderP20singleValueContainers06Singlec8DecodingD0_pyKF","ss7DecoderP8userInfoSDys010CodingUserC3KeyVypGvp","ss7DecoderP9container7keyedBys22KeyedDecodingContainerVyqd__Gqd__m_tKs9CodingKeyRd__lF","ss7UnicodeO","ss7UnicodeO6ScalarV","ss8SendableP","ss9CodingKeyP"],"vertices":[{"p":["JSON"],"f":[["enum",12],[" ",17],["JSON",7]],"s":[["enum",12],[" ",17],["JSON",7]],"d":"A JSON variant value. This value may contain a fragment, an array, or an object.\n\nAll instances of this type, including ``number(_:)`` instances, can be round-tripped \nlosslessly, as long as the initial encoding is performed by ``/swift-json``. \n\nRe-encoding arbitrary JSON is not guaranteed to produce the exact same result, \nalthough the implementation makes a reasonable effort to preserve features of \nthe original input."},{"p":["JSON","PrimitiveError"],"f":[["enum",12],[" ",17],["PrimitiveError",7]],"s":[["enum",12],[" ",17],["PrimitiveError",7]]},{"p":["JSON","RecursiveError"],"f":[["enum",12],[" ",17],["RecursiveError",7]],"s":[["enum",12],[" ",17],["RecursiveError",7]]},{"p":["JSON","Rule"],"f":[["enum",12],[" ",17],["Rule",7],["<",17],["Location",0],[">",17]],"s":[["enum",12],[" ",17],["Rule",7]],"g":[["Location",0,0]],"d":"@import(Grammar)\nA generic context for structured parsing rules.\n\nAll of the parsing rules in this library are defined at the UTF-8 level. \n\nYou can parse JSON expressions from any ``Collection`` with an \n``Collection//Element`` type of ``UInt8``. For example, you can parse \na ``String`` through its ``String//UTF8View``.\n   ```swift \n   let string:String = \n   \"\"\"\n   {\"success\":true,\"value\":0.1}\n   \"\"\"\n   try Grammar.parse(string.utf8, as: JSON.Rule<String.Index>.Root.self)\n   ```\n   \nHowever, you could also parse a UTF-8 buffer directly, without \nhaving to convert it to a ``String``.\n   ```swift \n   let utf8:[UInt8] = \n   [\n       123,  34, 115, 117,  99,  99, 101, 115, \n       115,  34,  58, 116, 114, 117, 101,  44, \n        34, 118,  97, 108, 117, 101,  34,  58, \n        48,  46,  49, 125\n   ]\n   try Grammar.parse(utf8, as: JSON.Rule<Array<UInt8>.Index>.Root.self)\n   ```\n   \nThe generic [`Location`]() \nparameter provides this flexibility as a zero-cost abstraction.\n\n>   Tip: \n    The ``/swift-grammar`` and ``/swift-json`` libraries are transparent!\n    This means that its parsing rules are always zero-cost abstractions, \n    even when applied to third-party collection types, like \n    ``/swift-nio/NIOCore/ByteBufferView``."},{"p":["JSON","Rule","Whitespace"],"f":[["enum",12],[" ",17],["Whitespace",7]],"s":[["enum",12],[" ",17],["Whitespace",7]],"g":[["Location",0,0]],"d":"@import(Grammar)\nMatches the whitespace characters [`\" \"`](), [`\"\\t\"`](), \n[`\"\\n\"`](), and [`\"\\r\"`]().\n\nThis rule matches a *single* whitespace character.\nTo match a sequence of whitespace characters (including the empty sequence), \nuse one of ``/swift-grammar``’s vector parsing APIs, like ``ParsingInput.parse(as:in:)``.\n\nFor example, the following is equivalent to the regex [`/[\\ \\t\\n\\r]+/`]():\n   ```swift \n   try input.parse(as: JSON.Rule<Location>.Whitespace.self)\n       input.parse(as: JSON.Rule<Location>.Whitespace.self, in: Void.self)\n   ```\n   \n>   Note: Unicode space characters, like [`\"\\u{2009}\"`](), are not \n    considered whitespace characters in the context of JSON parsing."},{"p":["JSON","Rule","NumberLiteral"],"f":[["enum",12],[" ",17],["NumberLiteral",7]],"s":[["enum",12],[" ",17],["NumberLiteral",7]],"g":[["Location",0,0]],"d":"Matches a numeric literal. \n\nNumeric literals are always written in decimal.\n\nThe following examples are all valid literals:\n\n   ```swift \n   \"5\"\n   \"5.5\"\n   \"-5.5\"\n   \"-55e-2\"\n   \"-55e2\"\n   \"-55e+2\"\n   ```\n   \nNumeric literals may not begin with a prefix `+` sign, although the \nexponent field can use a prefix `+`."},{"p":["JSON","Rule","NumberLiteral","PlusOrMinus"],"f":[["enum",12],[" ",17],["PlusOrMinus",7]],"s":[["enum",12],[" ",17],["PlusOrMinus",7]],"g":[["Location",0,0]],"d":"Matches an ASCII `+` or `-` sign."},{"p":["JSON","Rule","StringLiteral"],"f":[["enum",12],[" ",17],["StringLiteral",7]],"s":[["enum",12],[" ",17],["StringLiteral",7]],"g":[["Location",0,0]],"d":"Matches a string literal. \n\nString literals always begin and end with an ASCII double quote character (`\"`)."},{"p":["JSON","Rule","StringLiteral","EscapeSequence"],"f":[["enum",12],[" ",17],["EscapeSequence",7]],"s":[["enum",12],[" ",17],["EscapeSequence",7]],"g":[["Location",0,0]],"d":"Matches a sequence of escaped UTF-16 code units.\n\nA UTF-16 escape sequence consists of [`\"\\u\"`](), followed by four \nhexadecimal digits."},{"p":["JSON","Rule","StringLiteral","EscapedCodeUnit"],"f":[["enum",12],[" ",17],["EscapedCodeUnit",7]],"s":[["enum",12],[" ",17],["EscapedCodeUnit",7]],"g":[["Location",0,0]],"d":"Matches an ASCII character (besides [`\"u\"`]()) that is allowed to \nappear immediately after a backslash (`\\`) in a string literal.\n\nThe following are valid escape characters: `\\`, `\"`, `/`, `b`, `f`, `n`, `r`, `t`."},{"p":["JSON","Rule","StringLiteral","CodeUnit"],"f":[["enum",12],[" ",17],["CodeUnit",7]],"s":[["enum",12],[" ",17],["CodeUnit",7]],"g":[["Location",0,0]],"d":"Matches a UTF-8 code unit that is allowed to appear inline in a string literal. "},{"p":["JSON","Rule","Null"],"f":[["enum",12],[" ",17],["Null",7]],"s":[["enum",12],[" ",17],["Null",7]],"g":[["Location",0,0]],"d":"A literal `null` expression."},{"p":["JSON","Rule","Root"],"f":[["enum",12],[" ",17],["Root",7]],"s":[["enum",12],[" ",17],["Root",7]],"g":[["Location",0,0]],"d":"Matches a complete message; either an ``JSON/Rule//Array`` or an ``JSON/Rule//Object``.\n\nTo parse *any* JSON value, including fragment values, use the ``JSON/Rule//Value`` \nrule instead."},{"p":["JSON","Rule","True"],"f":[["enum",12],[" ",17],["True",7]],"s":[["enum",12],[" ",17],["True",7]],"g":[["Location",0,0]],"d":"A literal `true` expression."},{"p":["JSON","Rule","Array"],"f":[["enum",12],[" ",17],["Array",7]],"s":[["enum",12],[" ",17],["Array",7]],"g":[["Location",0,0]],"d":"@import(Grammar)\nMatches an array literal.\n\nArray literals begin and end with square brackets (`[` and `]`), and \nrecursively contain instances of ``JSON/Rule//Value`` separated by ``JSON/Rule//Padded`` \n``Grammar/Encoding//Comma``s. Trailing commas are not allowed."},{"p":["JSON","Rule","False"],"f":[["enum",12],[" ",17],["False",7]],"s":[["enum",12],[" ",17],["False",7]],"g":[["Location",0,0]],"d":"A literal `false` expression."},{"p":["JSON","Rule","Value"],"f":[["enum",12],[" ",17],["Value",7]],"s":[["enum",12],[" ",17],["Value",7]],"g":[["Location",0,0]],"d":"Matches any value, including fragment values.\n\nOnly use this if you are doing manual JSON parsing. Most web services \nshould send complete ``JSON/Rule//Root`` messages through their public APIs."},{"p":["JSON","Rule","Object"],"f":[["enum",12],[" ",17],["Object",7]],"s":[["enum",12],[" ",17],["Object",7]],"g":[["Location",0,0]],"d":"@import(Grammar)\nMatches an object literal.\n\nObject literals begin and end with curly braces (`{` and `}`), and \ncontain instances of ``Item`` separated by ``JSON/Rule//Padded`` \n``Grammar/Encoding//Comma``s. Trailing commas are not allowed."},{"p":["JSON","Rule","Object","Item"],"f":[["enum",12],[" ",17],["Item",7]],"s":[["enum",12],[" ",17],["Item",7]],"g":[["Location",0,0]],"d":"@import(Grammar)\nMatches an key-value expression.\n\nA key-value expression consists of a ``JSON/Rule//StringLiteral``, \na ``JSON/Rule//Padded`` ``Grammar/Encoding//Colon``, and \na recursive instance of ``JSON/Rule//Value``."},{"p":["JSON","Rule","Keyword"],"f":[["enum",12],[" ",17],["Keyword",7]],"s":[["enum",12],[" ",17],["Keyword",7]],"a":{"a":{"d":true,"m":"nested types have been moved into the outer `JSON` namespace."}},"g":[["Location",0,0]]},{"p":["JSON","Base10"],"f":[["enum",12],[" ",17],["Base10",7]],"s":[["enum",12],[" ",17],["Base10",7]],"d":"A namespace for decimal-related functionality.\n\nThis API is used by library functions that are emitted into the client. \nMost users of ``/swift-json`` should not have to call it directly."},{"p":["JSON","Base10","Inverse"],"f":[["enum",12],[" ",17],["Inverse",7]],"s":[["enum",12],[" ",17],["Inverse",7]],"d":"Negative powers of 10, down to [`1e-19`]()."},{"p":["JSON","LintingError"],"f":[["struct",12],[" ",17],["LintingError",7]],"s":[["struct",12],[" ",17],["LintingError",7]]},{"p":["JSON","LintingDictionary"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["LintingDictionary",7]],"s":[["struct",12],[" ",17],["LintingDictionary",7]]},{"p":["JSON","IntegerOverflowError"],"f":[["struct",12],[" ",17],["IntegerOverflowError",7]],"s":[["struct",12],[" ",17],["IntegerOverflowError",7]]},{"p":["JSON","InvalidUnicodeScalarError"],"f":[["struct",12],[" ",17],["InvalidUnicodeScalarError",7]],"s":[["struct",12],[" ",17],["InvalidUnicodeScalarError",7]]},{"p":["JSON","Number"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["Number",7]],"s":[["struct",12],[" ",17],["Number",7]],"d":"A lossless representation of a numeric literal.\n\nThis type is memory-efficient, and can store fixed-point numbers with \nup to 64 bits of precision. It uses all 64 bits to encode its magnitude, \nwhich enables it to round-trip integers of width up to ``UInt64``."},{"p":["JSON","Decoder"],"f":[["struct",12],[" ",17],["Decoder",7]],"s":[["struct",12],[" ",17],["Decoder",7]]},{"p":["JSON","PrimitiveError","matching(variant:as:)"],"f":[["case",12],[" ",17],["matching",7],["(",17],["variant",1],[": ",17],["JSON",18,0],[", ",17],["as",1],[": ",17],["Any",12],[".Type)",17]],"s":[["case",12],[" ",17],["matching",7],["(",17],["variant",1],[": ",17],["JSON",18],[", ",17],["as",1],[": ",17],["Any",12],[".Type)",17]]},{"p":["JSON","PrimitiveError","undefined(key:in:)"],"f":[["case",12],[" ",17],["undefined",7],["(",17],["key",1],[": ",17],["String",18,237],[", ",17],["in",1],[": [",17],["String",18,237],[" : ",17],["JSON",18,0],["])",17]],"s":[["case",12],[" ",17],["undefined",7],["(",17],["key",1],[": ",17],["String",18],[", ",17],["in",1],[": [",17],["String",18],[" : ",17],["JSON",18],["])",17]]},{"p":["JSON","RecursiveError","dictionary(underlying:in:)"],"f":[["case",12],[" ",17],["dictionary",7],["(",17],["underlying",1],[": ",17],["Error",18,278],[", ",17],["in",1],[": ",17],["String",18,237],[")",17]],"s":[["case",12],[" ",17],["dictionary",7],["(",17],["underlying",1],[": ",17],["Error",18],[", ",17],["in",1],[": ",17],["String",18],[")",17]]},{"p":["JSON","RecursiveError","array(underlying:)"],"f":[["case",12],[" ",17],["array",7],["(",17],["underlying",1],[": ",17],["Error",18,278],[")",17]],"s":[["case",12],[" ",17],["array",7],["(",17],["underlying",1],[": ",17],["Error",18],[")",17]]},{"p":["JSON","bool(_:)"],"f":[["case",12],[" ",17],["bool",7],["(",17],["Bool",18,242],[")",17]],"s":[["case",12],[" ",17],["bool",7],["(",17],["Bool",18],[")",17]],"d":"A boolean value. "},{"p":["JSON","null"],"f":[["case",12],[" ",17],["null",7]],"s":[["case",12],[" ",17],["null",7]],"d":"A null value. \n\nThis is conceptually equivalent to ``Void``, and should \nnot be confused with [`nil`]() in Swift. It represents an empty value, \n*not* the absence of a value."},{"p":["JSON","array(_:)"],"f":[["case",12],[" ",17],["array",7],["([",17],["JSON",18,0],["])",17]],"s":[["case",12],[" ",17],["array",7],["([",17],["JSON",18],["])",17]],"d":"An array, which can recursively contain instances of [`Self`]()."},{"p":["JSON","number(_:)"],"f":[["case",12],[" ",17],["number",7],["(",17],["JSON",18,0],[".",17],["Number",18,26],[")",17]],"s":[["case",12],[" ",17],["number",7],["(",17],["JSON",18],[".",17],["Number",18],[")",17]],"d":"A numerical value."},{"p":["JSON","object(_:)"],"f":[["case",12],[" ",17],["object",7],["([(key",17],[": ",17],["String",18,237],[", value",17],[": ",17],["JSON",18,0],[")])",17]],"s":[["case",12],[" ",17],["object",7],["([(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")])",17]],"d":"A ``String``-keyed object, which can recursively contain instances of [`Self`]().\n\nThis is more closely-related to ``KeyValuePairs`` than to ``Dictionary``, \nsince object keys can occur more than once in the same object. However, \nmost JSON APIs allow clients to safely treat objects as ``Dictionary``-like \ncontainers.\n\nThe order of the items in the payload reflects the order in which they \nappear in the source object.\n\n>   Warning: \n    Many JSON APIs do not encode object items in a stable order. Only \n    assume a particular ordering based on careful observation or official \n    documentation.\n\nThe keys in the payload are *not* escaped.\n\n>   Warning: \n    Object keys can contain arbitrary unicode text. Don’t assume the \n    keys are ASCII."},{"p":["JSON","string(_:)"],"f":[["case",12],[" ",17],["string",7],["(",17],["String",18,237],[")",17]],"s":[["case",12],[" ",17],["string",7],["(",17],["String",18],[")",17]],"d":"A string value.\n\nThe contents of this string are *not* escaped. If you are creating an \ninstance of [`Self`]() for serialization with this case-constructor, \ndo not escape the input."},{"p":["JSON","LintingError","init(unused:)"],"f":[["init",10],["(",17],["unused",1],[": [",17],["String",18,237],[" : ",17],["JSON",18,0],["])",17]],"s":[["init",10],["(",17],["unused",1],[": [",17],["String",18],[" : ",17],["JSON",18],["])",17]]},{"p":["JSON","LintingDictionary","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["items",2],[": [",17],["String",18,237],[" : ",17],["JSON",18,0],["])",17]],"s":[["init",10],["([",17],["String",18],[" : ",17],["JSON",18],["])",17]]},{"p":["JSON","IntegerOverflowError","init(number:overflows:)"],"f":[["init",10],["(",17],["number",1],[": ",17],["JSON",18,0],[".",17],["Number",18,26],[", ",17],["overflows",1],[": ",17],["FixedWidthInteger",18,251],[".Type)",17]],"s":[["init",10],["(",17],["number",1],[": ",17],["JSON",18],[".",17],["Number",18],[", ",17],["overflows",1],[": ",17],["FixedWidthInteger",18],[".Type)",17]]},{"p":["JSON","InvalidUnicodeScalarError","init(value:)"],"f":[["init",10],["(",17],["value",1],[": ",17],["UInt16",18,283],[")",17]],"s":[["init",10],["(",17],["value",1],[": ",17],["UInt16",18],[")",17]]},{"p":["JSON","Number","init(sign:units:places:)"],"f":[["init",10],["(",17],["sign",1],[": ",17],["FloatingPointSign",18,252],[", ",17],["units",1],[": ",17],["UInt64",18,285],[", ",17],["places",1],[": ",17],["UInt32",18,284],[")",17]],"s":[["init",10],["(",17],["sign",1],[": ",17],["FloatingPointSign",18],[", ",17],["units",1],[": ",17],["UInt64",18],[", ",17],["places",1],[": ",17],["UInt32",18],[")",17]],"d":"Creates a numeric literal.\n-   Parameters:\n    - sign: The sign, positive or negative.\n    - units: The magnitude, in units of `places`.\n    - places: The number of decimal places."},{"p":["JSON","Decoder","init(_:path:userInfo:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["JSON",18,0],[", ",17],["path",1],[": [",17],["CodingKey",18,295],["], ",17],["userInfo",1],[": [",17],["CodingUserInfoKey",18,250],[" : ",17],["Any",12],["] = [:])",17]],"s":[["init",10],["(",17],["JSON",18],[", ",17],["path",1],[": [",17],["CodingKey",18],["], ",17],["userInfo",1],[": [",17],["CodingUserInfoKey",18],[" : ",17],["Any",12],["])",17]]},{"p":["JSON","Base10","Inverse","subscript(_:as:)"],"f":[["static",12],[" ",17],["subscript",10],["<",17],["T",0],[">(",17],["x",2],[": ",17],["Int",18,246],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["T",18],[".Type) -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryFloatingPoint",18,236],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["subscript",10],["<",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[" _: ",17],["T",18],[".Type) -> ",17],["T",18]],"c":[["T",1,"BinaryFloatingPoint",236]],"g":[["T",0,0]],"d":"Returns the inverse of the given power of 10.\n-   Parameters:\n    - x: A positive exponent. If `x` is [`2`](), this subscript \n        will return [`1e-2`]().\n    - _: A ``BinaryFloatingPoint`` type."},{"p":["JSON","LintingError","namespace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18,237],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18]]},{"p":["JSON","PrimitiveError","namespace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18,237],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18]]},{"p":["JSON","RecursiveError","namespace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18,237],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18]]},{"p":["JSON","Rule","Null","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": [",17],["UInt8",18,282],["] { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": [",17],["UInt8",18],["]",17]],"d":"The ASCII string [`\"null\"`]()."},{"p":["JSON","Rule","True","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": [",17],["UInt8",18,282],["] { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": [",17],["UInt8",18],["]",17]],"d":"The ASCII string [`\"true\"`]()."},{"p":["JSON","Rule","False","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": [",17],["UInt8",18,282],["] { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": [",17],["UInt8",18],["]",17]],"d":"The ASCII string [`\"false\"`]()."},{"p":["JSON","Base10","Exp"],"f":[["static",12],[" ",17],["let",12],[" ",17],["Exp",7],[": [",17],["UInt64",18,285],["]",17]],"s":[["static",12],[" ",17],["let",12],[" ",17],["Exp",7],[": [",17],["UInt64",18],["]",17]],"d":"Positive powers of 10, up to [`10_000_000_000_000_000_000`]()."},{"p":["JSON","codingPath"],"f":[["var",12],[" ",17],["codingPath",7],[": [",17],["CodingKey",18,295],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["codingPath",7],[": [",17],["CodingKey",18],["]",17]]},{"p":["JSON","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,237],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"d":"Returns this value serialized as a minified string.\n\nReparsing and reserializing this string is guaranteed to return the \nsame string."},{"p":["JSON","LintingError","unused"],"f":[["let",12],[" ",17],["unused",7],[": [",17],["String",18,237],[" : ",17],["JSON",18,0],["]",17]],"s":[["let",12],[" ",17],["unused",7],[": [",17],["String",18],[" : ",17],["JSON",18],["]",17]]},{"p":["JSON","LintingError","message"],"f":[["var",12],[" ",17],["message",7],[": ",17],["String",18,237],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["message",7],[": ",17],["String",18]]},{"p":["JSON","PrimitiveError","message"],"f":[["var",12],[" ",17],["message",7],[": ",17],["String",18,237],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["message",7],[": ",17],["String",18]]},{"p":["JSON","RecursiveError","next"],"f":[["var",12],[" ",17],["next",7],[": ",17],["Error",18,278],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["next",7],[": ",17],["Error",18],["?",17]]},{"p":["JSON","RecursiveError","context"],"f":[["var",12],[" ",17],["context",7],[": [",17],["String",18,237],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["context",7],[": [",17],["String",18],["]",17]]},{"p":["JSON","LintingDictionary","items"],"f":[["var",12],[" ",17],["items",7],[": [",17],["String",18,237],[" : ",17],["JSON",18,0],["]",17]],"s":[["var",12],[" ",17],["items",7],[": [",17],["String",18],[" : ",17],["JSON",18],["]",17]]},{"p":["JSON","IntegerOverflowError","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,237],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["JSON","IntegerOverflowError","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["Any",12],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["Any",12],[".Type",17]],"a":{"s":{"d":"5.7","m":"use the more strongly-typed `overflows` property"}}},{"p":["JSON","IntegerOverflowError","number"],"f":[["let",12],[" ",17],["number",7],[": ",17],["JSON",18,0],[".",17],["Number",18,26]],"s":[["let",12],[" ",17],["number",7],[": ",17],["JSON",18],[".",17],["Number",18]]},{"p":["JSON","IntegerOverflowError","overflows"],"f":[["let",12],[" ",17],["overflows",7],[": ",17],["FixedWidthInteger",18,251],[".Type",17]],"s":[["let",12],[" ",17],["overflows",7],[": ",17],["FixedWidthInteger",18],[".Type",17]],"a":{"s":{"i":"5.7"}}},{"p":["JSON","InvalidUnicodeScalarError","value"],"f":[["let",12],[" ",17],["value",7],[": ",17],["UInt16",18,283]],"s":[["let",12],[" ",17],["value",7],[": ",17],["UInt16",18]]},{"p":["JSON","Number","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,237],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"d":"Returns a zero-padded string representation of this numeric literal. \n\nThis property always formats the number with full precision. \nIf ``units`` is [`100`]() and ``places`` is [`2`](), this will return \n[`\"1.00\"`]().\n\nThis string is guaranteed to be round-trippable; reparsing it \nwill always return the same value.\n\n>   Warning:\n>   This string is not necessarily identical to how this literal was \n    written in its original source file. In particular, if it was \n    written with an exponent, the exponent would have been normalized \n    into ``units`` and ``places``."},{"p":["JSON","Number","sign"],"f":[["var",12],[" ",17],["sign",7],[": ",17],["FloatingPointSign",18,252]],"s":[["var",12],[" ",17],["sign",7],[": ",17],["FloatingPointSign",18]],"d":"The sign of this numeric literal."},{"p":["JSON","Number","units"],"f":[["var",12],[" ",17],["units",7],[": ",17],["UInt64",18,285]],"s":[["var",12],[" ",17],["units",7],[": ",17],["UInt64",18]],"d":"The magnitude of this numeric literal, expressed in units of ``places``.\n\nIf ``units`` is [`123`](), and ``places`` is [`2`](), that would represent\na magnitude of [`1.23`]()."},{"p":["JSON","Number","places"],"f":[["var",12],[" ",17],["places",7],[": ",17],["UInt64",18,285],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["places",7],[": ",17],["UInt64",18]],"d":"The number of decimal places this numeric literal has.\n\n>   Note:\n>   This property has type ``UInt64`` to facilitate computations with \n    ``units``. It is backed by a ``UInt32`` and can therefore only store \n    32 bits of precision."},{"p":["JSON","Decoder","codingPath"],"f":[["let",12],[" ",17],["codingPath",7],[": [",17],["CodingKey",18,295],["]",17]],"s":[["let",12],[" ",17],["codingPath",7],[": [",17],["CodingKey",18],["]",17]]},{"p":["JSON","Decoder","userInfo"],"f":[["let",12],[" ",17],["userInfo",7],[": [",17],["CodingUserInfoKey",18,250],[" : ",17],["Any",12],["]",17]],"s":[["let",12],[" ",17],["userInfo",7],[": [",17],["CodingUserInfoKey",18],[" : ",17],["Any",12],["]",17]]},{"p":["JSON","userInfo"],"f":[["var",12],[" ",17],["userInfo",7],[": [",17],["CodingUserInfoKey",18,250],[" : ",17],["Any",12],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["userInfo",7],[": [",17],["CodingUserInfoKey",18],[" : ",17],["Any",12],["]",17]]},{"p":["JSON","Rule","Whitespace","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18,282],[") -> ",17],["Void",18,277],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18],[") -> ",17],["Void",18],["?",17]],"g":[["Location",0,0]]},{"p":["JSON","Rule","NumberLiteral","PlusOrMinus","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18,282],[") -> ",17],["FloatingPointSign",18,252],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18],[") -> ",17],["FloatingPointSign",18],["?",17]],"g":[["Location",0,0]]},{"p":["JSON","Rule","NumberLiteral","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,217],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["JSON",18,0],[".",17],["Number",18,26],[" ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,226],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,282]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["JSON",18],[".",17],["Number",18]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",226],["Diagnostics.Source.Element",2,"UInt8",282]],"g":[["Location",0,0],["Diagnostics",0,1]]},{"p":["JSON","Rule","StringLiteral","EscapeSequence","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,217],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["String",18,237],[" ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,226],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,282]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["String",18]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",226],["Diagnostics.Source.Element",2,"UInt8",282]],"g":[["Location",0,0],["Diagnostics",0,1]]},{"p":["JSON","Rule","StringLiteral","EscapedCodeUnit","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18,282],[") -> ",17],["Unicode",18,292],[".",17],["Scalar",18,293],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18],[") -> ",17],["Unicode",18],[".",17],["Scalar",18],["?",17]],"g":[["Location",0,0]]},{"p":["JSON","Rule","StringLiteral","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,217],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["String",18,237],[" ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,226],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,282]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["String",18]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",226],["Diagnostics.Source.Element",2,"UInt8",282]],"g":[["Location",0,0],["Diagnostics",0,1]]},{"p":["JSON","Rule","StringLiteral","CodeUnit","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18,282],[") -> ",17],["Void",18,277],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18],[") -> ",17],["Void",18],["?",17]],"g":[["Location",0,0]]},{"p":["JSON","Rule","Root","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,217],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["JSON",18,0],[" ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,226],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,282]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["JSON",18]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",226],["Diagnostics.Source.Element",2,"UInt8",282]],"g":[["Location",0,0],["Diagnostics",0,1]]},{"p":["JSON","Rule","Array","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,217],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> [",17],["JSON",18,0],["] ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,226],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,282]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> [",17],["JSON",18],["]",17]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",226],["Diagnostics.Source.Element",2,"UInt8",282]],"g":[["Location",0,0],["Diagnostics",0,1]]},{"p":["JSON","Rule","Value","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,217],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["JSON",18,0],[" ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,226],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,282]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["JSON",18]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",226],["Diagnostics.Source.Element",2,"UInt8",282]],"g":[["Location",0,0],["Diagnostics",0,1]]},{"p":["JSON","Rule","Object","Item","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,217],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> (key",17],[": ",17],["String",18,237],[", value",17],[": ",17],["JSON",18,0],[") ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,226],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,282]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> (key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")",17]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",226],["Diagnostics.Source.Element",2,"UInt8",282]],"g":[["Location",0,0],["Diagnostics",0,1]]},{"p":["JSON","Rule","Object","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,217],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> [(key",17],[": ",17],["String",18,237],[", value",17],[": ",17],["JSON",18,0],[")] ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,226],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,282]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> [(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")]",17]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",226],["Diagnostics.Source.Element",2,"UInt8",282]],"g":[["Location",0,0],["Diagnostics",0,1]]},{"p":["JSON","escape(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["escape",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["string",2],[": ",17],["S",18],[") -> ",17],["String",18,237],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["StringProtocol",18,248]],"s":[["static",12],[" ",17],["func",12],[" ",17],["escape",7],["<",17],["S",0],[">(",17],["S",18],[") -> ",17],["String",18]],"c":[["S",1,"StringProtocol",248]],"g":[["S",0,0]],"d":"Escapes and formats a string as a JSON string literal, including the \nbeginning and ending quote characters.\n-   Parameters:\n    - string: A string to escape.\n-   Returns: A string literal, which includes the [`\"\"`]() delimiters.\n\nThis function escapes the following characters: `\"`, `\\`, `\\b`, `\\t`, `\\n`, \n`\\f`, and `\\r`. It does not escape forward slashes (`/`).\n\nJSON string literals may contain unicode characters, even after escaping. \nDo not assume the output of this function is ASCII."},{"p":["JSON","unkeyedContainer()"],"f":[["func",12],[" ",17],["unkeyedContainer",7],["() ",17],["throws",12],[" -> ",17],["UnkeyedDecodingContainer",18,257]],"s":[["func",12],[" ",17],["unkeyedContainer",7],["() ",17],["throws",12],[" -> ",17],["UnkeyedDecodingContainer",18]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["String",18,237],["?.Type) ",17],["throws",12],[" -> ",17],["String",18,237],["?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["String",18],["?.Type) ",17],["throws",12],[" -> ",17],["String",18],["?",17]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["String",18,237],[".Type) ",17],["throws",12],[" -> ",17],["String",18,237],["?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["String",18],[".Type) ",17],["throws",12],[" -> ",17],["String",18],["?",17]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["].Type = [JSON].self) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["].Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]?",17]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["]?.Type = [JSON]?.self) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["]?.Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]?",17]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Bool",18,242],["?.Type) ",17],["throws",12],[" -> ",17],["Bool",18,242],["?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["Bool",18],["?.Type) ",17],["throws",12],[" -> ",17],["Bool",18],["?",17]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Bool",18,242],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18,242],["?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["Bool",18],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18],["?",17]]},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["]?.Type, ",17],["_",1],[" ",17],["body",2],[": ([",17],["JSON",18,0],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["]?.Type, ([",17],["JSON",18],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["].Type, ",17],["_",1],[" ",17],["body",2],[": ([",17],["JSON",18,0],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["].Type, ([",17],["JSON",18],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryFloatingPoint",18,236]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"BinaryFloatingPoint",236]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["UnsignedInteger",18,239]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"UnsignedInteger",239]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["SignedInteger",18,241]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"SignedInteger",241]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryFloatingPoint",18,236]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"BinaryFloatingPoint",236]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["UnsignedInteger",18,239]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"UnsignedInteger",239]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["SignedInteger",18,241]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"SignedInteger",241]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Void",18,277],[".Type) ",17],["throws",12],[" -> ",17],["Void",18,277],["?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["Void",18],[".Type) ",17],["throws",12],[" -> ",17],["Void",18],["?",17]]},{"p":["JSON","LintingDictionary","pop(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[") -> ",17],["JSON",18,0],["?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[") -> ",17],["JSON",18],["?",17]],"d":"Returns the variant value for the given key if it exists, or [`nil`]() \notherwise.\n\nUse the ``pop(_:_:)`` method to generate a more-detailed error trace\nif decoding fails later."},{"p":["JSON","LintingDictionary","pop(_:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["_",1],[" ",17],["body",2],[": (",17],["JSON",18,0],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", (",17],["JSON",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]],"d":"Finds the variant value for the given key if it exists, and passes \nit to the given closure for further decoding. Returns the result of \nthe closure, or [`nil`]() if the key does not exist.\n\n>   Throws:\n    A ``JSON//RecursiveError.dictionary(underlying:in:)`` if an error \n    was thrown from within the given closure."},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["String",18,237],[".Type = String.self) ",17],["throws",12],[" -> ",17],["String",18,237]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["String",18],[".Type) ",17],["throws",12],[" -> ",17],["String",18]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["String",18,237],["?.Type = String?.self) ",17],["throws",12],[" -> ",17],["String",18,237],["?",17]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["String",18],["?.Type) ",17],["throws",12],[" -> ",17],["String",18],["?",17]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["].Type = [JSON].self) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]",17]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["].Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]",17]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["]?.Type = [JSON]?.self) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["]?.Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]?",17]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Bool",18,242],[".Type = Bool.self) ",17],["throws",12],[" -> ",17],["Bool",18,242]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["Bool",18],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Bool",18,242],["?.Type = Bool?.self) ",17],["throws",12],[" -> ",17],["Bool",18,242],["?",17]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["Bool",18],["?.Type) ",17],["throws",12],[" -> ",17],["Bool",18],["?",17]]},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["].Type = [JSON].self, ",17],["_",1],[" ",17],["body",2],[": ([",17],["JSON",18,0],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["].Type, ([",17],["JSON",18],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["]?.Type = [JSON]?.self, ",17],["_",1],[" ",17],["body",2],[": ([",17],["JSON",18,0],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["]?.Type, ([",17],["JSON",18],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["T",18],[".Type = T.self) ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryFloatingPoint",18,236]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18]],"c":[["T",1,"BinaryFloatingPoint",236]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["T",18],[".Type = T.self) ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["UnsignedInteger",18,239]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"UnsignedInteger",239]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["T",18],[".Type = T.self) ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["SignedInteger",18,241]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"SignedInteger",241]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["T",18],["?.Type = T?.self) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryFloatingPoint",18,236]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"BinaryFloatingPoint",236]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["T",18],["?.Type = T?.self) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["UnsignedInteger",18,239]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"UnsignedInteger",239]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["T",18],["?.Type = T?.self) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["SignedInteger",18,241]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"SignedInteger",241]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Void",18,277],[".Type) ",17],["throws",12]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["Void",18],[".Type) ",17],["throws",12]]},{"p":["JSON","LintingDictionary","remove(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[") ",17],["throws",12],[" -> ",17],["JSON",18,0]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[") ",17],["throws",12],[" -> ",17],["JSON",18]],"d":"Returns the variant value for the given key.\n\nUse the ``remove(_:_:)`` method to generate a more-detailed error trace\nif decoding fails later.\n\n>   Throws:\n    A ``JSON//PrimitiveError.undefined(key:in:)`` if the key does \n    not exist."},{"p":["JSON","LintingDictionary","remove(_:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,237],[", ",17],["_",1],[" ",17],["body",2],[": (",17],["JSON",18,0],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", (",17],["JSON",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"Finds the variant value for the given key and passes \nit to the given closure for further decoding, returning its result.\n\n>   Throws:\n    A ``JSON//PrimitiveError.undefined(key:in:)`` if the key does \n    not exist, or a ``JSON//RecursiveError.dictionary(underlying:in:)`` \n    if an error was thrown from within the given closure."},{"p":["JSON","singleValueContainer()"],"f":[["func",12],[" ",17],["singleValueContainer",7],["() -> ",17],["SingleValueDecodingContainer",18,258]],"s":[["func",12],[" ",17],["singleValueContainer",7],["() -> ",17],["SingleValueDecodingContainer",18]]},{"p":["JSON","as(_:uniquingKeysWith:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["String",18,237],[" : ",17],["JSON",18,0],["].Type, ",17],["uniquingKeysWith",1],[" ",17],["combine",2],[": (",17],["JSON",18,0],[", ",17],["JSON",18,0],[") ",17],["throws",12],[" -> ",17],["JSON",18,0],[") ",17],["throws",12],[" -> [",17],["String",18,237],[" : ",17],["JSON",18,0],["]",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["String",18],[" : ",17],["JSON",18],["].Type, ",17],["uniquingKeysWith",1],[": (",17],["JSON",18],[", ",17],["JSON",18],[") ",17],["throws",12],[" -> ",17],["JSON",18],[") ",17],["throws",12],[" -> [",17],["String",18],[" : ",17],["JSON",18],["]",17]]},{"p":["JSON","as(_:uniquingKeysWith:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["String",18,237],[" : ",17],["JSON",18,0],["].Type, ",17],["uniquingKeysWith",1],[" ",17],["combine",2],[": (",17],["JSON",18,0],[", ",17],["JSON",18,0],[") ",17],["throws",12],[" -> ",17],["JSON",18,0],[") ",17],["rethrows",12],[" -> [",17],["String",18,237],[" : ",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["String",18],[" : ",17],["JSON",18],["].Type, ",17],["uniquingKeysWith",1],[": (",17],["JSON",18],[", ",17],["JSON",18],[") ",17],["throws",12],[" -> ",17],["JSON",18],[") ",17],["rethrows",12],[" -> [",17],["String",18],[" : ",17],["JSON",18],["]?",17]],"d":"Attempts to cast this variant to a ``Dictionary`` of [`Self`]().\n\n- Returns: A dictionary derived from the payload of this variant if it \n    matches ``object(_:)``, the fields of the payload of this variant if \n    it matches ``number(_:)``, or [`nil`]() otherwise.\n\nAlthough it is uncommon in real-world JSON APIs, object keys can occur \nmore than once in the same object. To handle this, an API consumer might \nelect to keep only the last occurrence of a particular key.\n   ```swift \n   let dictionary:[String: JSON]? = json.as([String: JSON].self) { $1 }\n   ```\n   \nKey duplication can interact with unicode normalization in unexpected \nways. Because JSON is defined in UTF-8, other JSON encoders may not align \nwith the behavior of ``String.==(_:_:)``, since that operator \ncompares grapheme clusters and not UTF-8 code units. \n\nFor example, if an object vends separate keys for [`\"\\u{E9}\"`]() ([`\"é\"`]()) and \n[`\"\\u{65}\\u{301}\"`]() (also [`\"é\"`](), perhaps, because the object is \nbeing used to bootstrap a unicode table), uniquing them by ``String`` \ncomparison will drop one of the values.\n\nCalling this method is equivalent to calling ``as(_:)``, and chaining its \noptional result through ``Dictionary.init(_:uniquingKeysWith:)``. See the \ndocumentation for ``as(_:)`` for more details about the behavior of this method.\n\n>   Complexity: \n    O(*n*), where *n* is the number of items in the object. \n    This method does *not* perform any recursive work.\n\n>   Warning: \n    When you convert an object to a dictionary representation, you lose the ordering \n    information for the object items. Reencoding it may produce a JSON \n    message that contains the same data, but does not compare equal under \n    a string- or byte-comparison."},{"p":["JSON","as(_:uniquingKeysWith:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["String",18,237],[" : ",17],["JSON",18,0],["]?.Type, ",17],["uniquingKeysWith",1],[" ",17],["combine",2],[": (",17],["JSON",18,0],[", ",17],["JSON",18,0],[") ",17],["throws",12],[" -> ",17],["JSON",18,0],[") ",17],["throws",12],[" -> [",17],["String",18,237],[" : ",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["String",18],[" : ",17],["JSON",18],["]?.Type, ",17],["uniquingKeysWith",1],[": (",17],["JSON",18],[", ",17],["JSON",18],[") ",17],["throws",12],[" -> ",17],["JSON",18],[") ",17],["throws",12],[" -> [",17],["String",18],[" : ",17],["JSON",18],["]?",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["String",18,237],[".Type) ",17],["throws",12],[" -> ",17],["String",18,237]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["String",18],[".Type) ",17],["throws",12],[" -> ",17],["String",18]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["Bool",18,242],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18,242]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["Bool",18],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["String",18,237],["?.Type) ",17],["throws",12],[" -> ",17],["String",18,237],["?",17]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["String",18],["?.Type) ",17],["throws",12],[" -> ",17],["String",18],["?",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["String",18,237],[".Type) -> ",17],["String",18,237],["?",17]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["String",18],[".Type) -> ",17],["String",18],["?",17]],"d":"Attempts to cast this variant to an instance of ``String``.\n\n- Returns: The payload of this variant if it matches ``string(_:)``, \n    [`nil`]() otherwise.\n>   Complexity: \n    O(1). This method does *not* perform any character-wise work."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["JSON",18,0],["].Type) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["JSON",18],["].Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["JSON",18,0],["].Type) -> [",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["JSON",18],["].Type) -> [",17],["JSON",18],["]?",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["JSON",18,0],["]?.Type) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["JSON",18],["]?.Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]?",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [(key",17],[": ",17],["String",18,237],[", value",17],[": ",17],["JSON",18,0],[")].Type) ",17],["throws",12],[" -> [(key",17],[": ",17],["String",18,237],[", value",17],[": ",17],["JSON",18,0],[")]",17]],"s":[["func",12],[" ",17],["`as`",7],["([(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")].Type) ",17],["throws",12],[" -> [(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")]",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [(key",17],[": ",17],["String",18,237],[", value",17],[": ",17],["JSON",18,0],[")].Type) -> [(key",17],[": ",17],["String",18,237],[", value",17],[": ",17],["JSON",18,0],[")]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")].Type) -> [(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")]?",17]],"d":"Attempts to cast this variant to an ``Array`` of key-value pairs.\n\n- Returns: The payload of this variant if it matches ``object(_:)``, \n    the fields of the payload of this variant if it matches ``number(_:)``, or\n    [`nil`]() otherwise.\n\nThe order of the items reflects the order in which they appear in the \nsource object. For more details about the payload, see the documentation \nfor ``object(_:)``.\n\nTo facilitate interoperability with decimal types, this method will also \nreturn a pseudo-object containing the values of ``Number.units`` and ``Number.places``, \nif this variant is a ``number(_:)``. Specifically, it contains integral \n``Number`` values keyed by [`\"units\"`]() and [`\"places\"`]() and wrapped \nin containers of type [`Self`]().\n\nThis pseudo-object is intended for consumption by compiler-generated \n``Codable`` implementations. Decoding it incurs a small but non-zero \noverhead when compared with calling ``Number.as(_:)`` directly.\n\n>   Complexity: \n    O(1). This method does *not* perform any elementwise work."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [(key",17],[": ",17],["String",18,237],[", value",17],[": ",17],["JSON",18,0],[")]?.Type) ",17],["throws",12],[" -> [(key",17],[": ",17],["String",18,237],[", value",17],[": ",17],["JSON",18,0],[")]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")]?.Type) ",17],["throws",12],[" -> [(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")]?",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["Bool",18,242],["?.Type) ",17],["throws",12],[" -> ",17],["Bool",18,242],["?",17]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["Bool",18],["?.Type) ",17],["throws",12],[" -> ",17],["Bool",18],["?",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["Bool",18,242],[".Type) -> ",17],["Bool",18,242],["?",17]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["Bool",18],[".Type) -> ",17],["Bool",18],["?",17]],"d":"Attempts to cast this variant to an instance of ``Bool``.\n\n- Returns: The payload of this variant if it matches ``bool(_:)``, \n    [`nil`]() otherwise."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryFloatingPoint",18,236]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"BinaryFloatingPoint",236]],"g":[["T",0,0]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["UnsignedInteger",18,239]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"UnsignedInteger",239]],"g":[["T",0,0]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["SignedInteger",18,241]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],["?.Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"SignedInteger",241]],"g":[["T",0,0]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["UnsignedInteger",18,239]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"UnsignedInteger",239]],"g":[["T",0,0]],"d":"Attempts to cast this variant to an instance of an ``UnsignedInteger`` type.\n\n- Returns: An unsigned integer derived from the payload of this variant\n    if it matches ``number(_:)``, and it can be represented exactly by [`T`]();\n    [`nil`]() otherwise.\n\nThis method reports failure in two ways — it returns [`nil`]() on a type \nmismatch, and it [`throws`]() an ``IntegerOverflowError`` if this variant \nmatches ``number(_:)``, but it could not be represented exactly by [`T`]().\n>   Note:\n    This type conversion will fail if ``Number.places`` is non-zero, even if \n    the fractional part is zero. For example, you can convert \n    [`5`]() to an integer, but not [`5.0`](). This matches the behavior \n    of ``ExpressibleByIntegerLiteral``."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["SignedInteger",18,241]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"SignedInteger",241]],"g":[["T",0,0]],"d":"Attempts to cast this variant to an instance of a ``SignedInteger`` type.\n\n- Returns: A signed integer derived from the payload of this variant\n    if it matches ``number(_:)``, and it can be represented exactly by [`T`]();\n    [`nil`]() otherwise.\n\nThis method reports failure in two ways — it returns [`nil`]() on a type \nmismatch, and it [`throws`]() an ``IntegerOverflowError`` if this variant \nmatches ``number(_:)``, but it could not be represented exactly by [`T`]().\n>   Note:\n    This type conversion will fail if ``Number.places`` is non-zero, even if \n    the fractional part is zero. For example, you can convert \n    [`5`]() to an integer, but not [`5.0`](). This matches the behavior \n    of ``ExpressibleByIntegerLiteral``."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryFloatingPoint",18,236]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],[".Type) -> ",17],["T",18],["?",17]],"c":[["T",1,"BinaryFloatingPoint",236]],"g":[["T",0,0]],"d":"Attempts to cast this variant to an instance of a ``BinaryFloatingPoint`` type.\n\n- Returns: The closest value of [`T`]() to the payload of this \n    variant if it matches ``number(_:)``, [`nil`]() otherwise.\n\nCalling this method is equivalent to matching the ``number(_:)`` enumeration \ncase, and calling ``Number.as(_:)`` on its payload."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryFloatingPoint",18,236]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18]],"c":[["T",1,"BinaryFloatingPoint",236]],"g":[["T",0,0]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["UnsignedInteger",18,239]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"UnsignedInteger",239]],"g":[["T",0,0]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["SignedInteger",18,241]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"SignedInteger",241]],"g":[["T",0,0]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["Void",18,277],[".Type) -> ",17],["Void",18,277],["?",17]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["Void",18],[".Type) -> ",17],["Void",18],["?",17]],"d":"Attempts to cast this variant to an instance of ``Void``.\n\n- returns: [`()`]() if this variant is ``null``, [`nil`]() otherwise."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["Void",18,277],[".Type) ",17],["throws",12]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["Void",18],[".Type) ",17],["throws",12]]},{"p":["JSON","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["(",17],["_",1],[": ",17],["Void",18,277],[".Type) -> ",17],["Bool",18,242]],"s":[["func",12],[" ",17],["`is`",7],["(",17],["Void",18],[".Type) -> ",17],["Bool",18]],"d":"Indicates if this variant is ``null``."},{"p":["JSON","case(of:)"],"f":[["func",12],[" ",17],["`case`",7],["<",17],["T",0],[">(",17],["of",1],[" ",17],["_",2],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["RawRepresentable",18,240],[", ",17],["T",18],[".",17],["RawValue",18],[" == ",17],["String",18,237]],"s":[["func",12],[" ",17],["`case`",7],["<",17],["T",0],[">(",17],["of",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18]],"c":[["T",1,"RawRepresentable",240],["T.RawValue",2,"String",237]],"g":[["T",0,0]]},{"p":["JSON","lint(discarding:_:)"],"f":[["func",12],[" ",17],["lint",7],["<",17],["Discards",0],[", ",17],["T",0],[">(",17],["discarding",1],[" ",17],["discards",2],[": ",17],["Discards",18],[", ",17],["_",1],[" ",17],["body",2],[": (",17],["inout",12],[" ",17],["JSON",18,0],[".",17],["LintingDictionary",18,23],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["Discards",18],[" : ",17],["Sequence",18,238],[", ",17],["Discards",18],[".",17],["Element",18],[" == ",17],["String",18,237]],"s":[["func",12],[" ",17],["lint",7],["<",17],["Discards",0],[", ",17],["T",0],[">(",17],["discarding",1],[": ",17],["Discards",18],[", (",17],["inout",12],[" ",17],["JSON",18],[".",17],["LintingDictionary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"c":[["Discards",1,"Sequence",238],["Discards.Element",2,"String",237]],"g":[["Discards",0,0],["T",1,0]]},{"p":["JSON","lint(whitelisting:_:)"],"f":[["func",12],[" ",17],["lint",7],["<",17],["Whitelist",0],[", ",17],["T",0],[">(",17],["whitelisting",1],[" ",17],["whitelist",2],[": ",17],["Whitelist",18],[", ",17],["_",1],[" ",17],["body",2],[": (",17],["inout",12],[" ",17],["JSON",18,0],[".",17],["LintingDictionary",18,23],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["Whitelist",18],[" : ",17],["Sequence",18,238],[", ",17],["Whitelist",18],[".",17],["Element",18],[" == ",17],["String",18,237]],"s":[["func",12],[" ",17],["lint",7],["<",17],["Whitelist",0],[", ",17],["T",0],[">(",17],["whitelisting",1],[": ",17],["Whitelist",18],[", (",17],["inout",12],[" ",17],["JSON",18],[".",17],["LintingDictionary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"c":[["Whitelist",1,"Sequence",238],["Whitelist.Element",2,"String",237]],"g":[["Whitelist",0,0],["T",1,0]]},{"p":["JSON","lint(_:)"],"f":[["func",12],[" ",17],["lint",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["inout",12],[" ",17],["JSON",18,0],[".",17],["LintingDictionary",18,23],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["lint",7],["<",17],["T",0],[">((",17],["inout",12],[" ",17],["JSON",18],[".",17],["LintingDictionary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"g":[["T",0,0]]},{"p":["JSON","apply(pattern:)"],"f":[["func",12],[" ",17],["apply",7],["<",17],["T",0],[">(",17],["pattern",1],[": (",17],["JSON",18,0],[") -> (",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["?) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["apply",7],["<",17],["T",0],[">(",17],["pattern",1],[": (",17],["JSON",18],[") -> (",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["?) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]]},{"p":["JSON","apply(pattern:)"],"f":[["func",12],[" ",17],["apply",7],["<",17],["T",0],[">(",17],["pattern",1],[": (",17],["JSON",18,0],[") -> (",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["?) ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["apply",7],["<",17],["T",0],[">(",17],["pattern",1],[": (",17],["JSON",18],[") -> (",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["?) ",17],["throws",12],[" -> ",17],["T",18]],"g":[["T",0,0]]},{"p":["JSON","Number","callAsFunction(as:)"],"f":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[" ",17],["_",2],[": (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[")?.Type) -> (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[")? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["SignedInteger",18,241]],"s":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[": (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[")?.Type) -> (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[")?",17]],"a":{"a":{"d":true,"r":"JSON.Number.as(_:)"}},"c":[["T",1,"FixedWidthInteger",251],["T",1,"SignedInteger",241]],"g":[["T",0,0]]},{"p":["JSON","Number","callAsFunction(as:)"],"f":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[" ",17],["_",2],[": ",17],["T",18],["?.Type) -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["UnsignedInteger",18,239]],"s":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[": ",17],["T",18],["?.Type) -> ",17],["T",18],["?",17]],"a":{"a":{"d":true,"r":"JSON.Number.as(_:)"}},"c":[["T",1,"FixedWidthInteger",251],["T",1,"UnsignedInteger",239]],"g":[["T",0,0]]},{"p":["JSON","Number","callAsFunction(as:)"],"f":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[" ",17],["_",2],[": ",17],["T",18],["?.Type) -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["SignedInteger",18,241]],"s":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[": ",17],["T",18],["?.Type) -> ",17],["T",18],["?",17]],"a":{"a":{"d":true,"r":"JSON.Number.as(_:)"}},"c":[["T",1,"FixedWidthInteger",251],["T",1,"SignedInteger",241]],"g":[["T",0,0]]},{"p":["JSON","Number","callAsFunction(as:)"],"f":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[" ",17],["_",2],[": ",17],["T",18],[".Type) -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryFloatingPoint",18,236]],"s":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[": ",17],["T",18],[".Type) -> ",17],["T",18]],"a":{"a":{"d":true,"r":"JSON.Number.as(_:)"}},"c":[["T",1,"BinaryFloatingPoint",236]],"g":[["T",0,0]]},{"p":["JSON","Number","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[").Type) -> (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[")? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["SignedInteger",18,241]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">((units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[").Type) -> (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[")?",17]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"SignedInteger",241]],"g":[["T",0,0]],"d":"Converts this numeric literal to a fixed-point decimal, if it can be \nrepresented exactly.\n-   Parameters:\n    - _: A tuple type with fields conforming to ``SignedInteger`` \n        (and ``FixedWidthInteger``).\n-   Returns: \n    The value of this numeric literal as an instance of \n    [`(units:T, places:T)`](), or [`nil`]() if the value of either \n    field would overflow [`T`]().\n>   Note: \n    It’s possible for the `places` field to overflow before `units` does.\n    For example, this will happen for the literal [`\"0.0e-9999999999999999999\"`]."},{"p":["JSON","Number","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["UnsignedInteger",18,239]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],[".Type) -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"UnsignedInteger",239]],"g":[["T",0,0]],"d":"Converts this numeric literal to an unsigned integer, if it can be \nrepresented exactly.\n-   Parameters:\n    - _: A type conforming to ``UnsignedInteger`` (and ``FixedWidthInteger``).\n-   Returns: \n    The value of this numeric literal as an instance of [`T`](), or \n    [`nil`]() if it is negative, fractional, or would overflow [`T`]().\n>   Note:\n    This type conversion will fail if ``places`` is non-zero, even if \n    the fractional part is zero. For example, you can convert \n    [`5`]() to an integer, but not [`5.0`](). This matches the behavior \n    of ``ExpressibleByIntegerLiteral``."},{"p":["JSON","Number","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,251],[", ",17],["T",18],[" : ",17],["SignedInteger",18,241]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],[".Type) -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",251],["T",1,"SignedInteger",241]],"g":[["T",0,0]],"d":"Converts this numeric literal to a signed integer, if it can be \nrepresented exactly.\n-   Parameters:\n    - _: A type conforming to ``SignedInteger`` (and ``FixedWidthInteger``).\n-   Returns: \n    The value of this numeric literal as an instance of [`T`](), or \n    [`nil`]() if it is fractional or would overflow [`T`]().\n>   Note:\n    This type conversion will fail if ``places`` is non-zero, even if \n    the fractional part is zero. For example, you can convert \n    [`5`]() to an integer, but not [`5.0`](). This matches the behavior \n    of ``ExpressibleByIntegerLiteral``."},{"p":["JSON","Number","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryFloatingPoint",18,236]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],[".Type) -> ",17],["T",18]],"c":[["T",1,"BinaryFloatingPoint",236]],"g":[["T",0,0]],"d":"Converts this numeric literal to a floating-point value, or its closest \nfloating-point representation.\n-   Parameters:\n    - _: A type conforming to ``BinaryFloatingPoint``.\n-   Returns: \n    The value of this numeric literal as an instance of \n    [`T`](), or the value of [`T`]() closest to it."},{"p":["JSON","Decoder","unkeyedContainer()"],"f":[["func",12],[" ",17],["unkeyedContainer",7],["() ",17],["throws",12],[" -> ",17],["UnkeyedDecodingContainer",18,257]],"s":[["func",12],[" ",17],["unkeyedContainer",7],["() ",17],["throws",12],[" -> ",17],["UnkeyedDecodingContainer",18]]},{"p":["JSON","Decoder","singleValueContainer()"],"f":[["func",12],[" ",17],["singleValueContainer",7],["() -> ",17],["SingleValueDecodingContainer",18,258]],"s":[["func",12],[" ",17],["singleValueContainer",7],["() -> ",17],["SingleValueDecodingContainer",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["String",18,237],[".Type) ",17],["throws",12],[" -> ",17],["String",18,237]],"s":[["func",12],[" ",17],["decode",7],["(",17],["String",18],[".Type) ",17],["throws",12],[" -> ",17],["String",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Bool",18,242],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18,242]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Bool",18],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Double",18,243],[".Type) ",17],["throws",12],[" -> ",17],["Double",18,243]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Double",18],[".Type) ",17],["throws",12],[" -> ",17],["Double",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Float",18,245],[".Type) ",17],["throws",12],[" -> ",17],["Float",18,245]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Float",18],[".Type) ",17],["throws",12],[" -> ",17],["Float",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Int",18,246],[".Type) ",17],["throws",12],[" -> ",17],["Int",18,246]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Int",18],[".Type) ",17],["throws",12],[" -> ",17],["Int",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["UInt",18,247],[".Type) ",17],["throws",12],[" -> ",17],["UInt",18,247]],"s":[["func",12],[" ",17],["decode",7],["(",17],["UInt",18],[".Type) ",17],["throws",12],[" -> ",17],["UInt",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Int8",18,276],[".Type) ",17],["throws",12],[" -> ",17],["Int8",18,276]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Int8",18],[".Type) ",17],["throws",12],[" -> ",17],["Int8",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Int16",18,279],[".Type) ",17],["throws",12],[" -> ",17],["Int16",18,279]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Int16",18],[".Type) ",17],["throws",12],[" -> ",17],["Int16",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Int32",18,280],[".Type) ",17],["throws",12],[" -> ",17],["Int32",18,280]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Int32",18],[".Type) ",17],["throws",12],[" -> ",17],["Int32",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Int64",18,281],[".Type) ",17],["throws",12],[" -> ",17],["Int64",18,281]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Int64",18],[".Type) ",17],["throws",12],[" -> ",17],["Int64",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["UInt8",18,282],[".Type) ",17],["throws",12],[" -> ",17],["UInt8",18,282]],"s":[["func",12],[" ",17],["decode",7],["(",17],["UInt8",18],[".Type) ",17],["throws",12],[" -> ",17],["UInt8",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["UInt16",18,283],[".Type) ",17],["throws",12],[" -> ",17],["UInt16",18,283]],"s":[["func",12],[" ",17],["decode",7],["(",17],["UInt16",18],[".Type) ",17],["throws",12],[" -> ",17],["UInt16",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["UInt32",18,284],[".Type) ",17],["throws",12],[" -> ",17],["UInt32",18,284]],"s":[["func",12],[" ",17],["decode",7],["(",17],["UInt32",18],[".Type) ",17],["throws",12],[" -> ",17],["UInt32",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["UInt64",18,285],[".Type) ",17],["throws",12],[" -> ",17],["UInt64",18,285]],"s":[["func",12],[" ",17],["decode",7],["(",17],["UInt64",18],[".Type) ",17],["throws",12],[" -> ",17],["UInt64",18]]},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["Decodable",18,244]],"s":[["func",12],[" ",17],["decode",7],["<",17],["T",0],[">(",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18]],"c":[["T",1,"Decodable",244]],"g":[["T",0,0]]},{"p":["JSON","Decoder","container(keyedBy:)"],"f":[["func",12],[" ",17],["container",7],["<",17],["Key",0],[">(",17],["keyedBy",1],[" ",17],["_",2],[": ",17],["Key",18],[".Type) ",17],["throws",12],[" -> ",17],["KeyedDecodingContainer",18,253],["<",17],["Key",18],["> ",17],["where",12],[" ",17],["Key",18],[" : ",17],["CodingKey",18,295]],"s":[["func",12],[" ",17],["container",7],["<",17],["Key",0],[">(",17],["keyedBy",1],[": ",17],["Key",18],[".Type) ",17],["throws",12],[" -> ",17],["KeyedDecodingContainer",18],["<",17],["Key",18],[">",17]],"c":[["Key",1,"CodingKey",295]],"g":[["Key",0,0]]},{"p":["JSON","Decoder","decodeNil()"],"f":[["func",12],[" ",17],["decodeNil",7],["() -> ",17],["Bool",18,242]],"s":[["func",12],[" ",17],["decodeNil",7],["() -> ",17],["Bool",18]]},{"p":["JSON","container(keyedBy:)"],"f":[["func",12],[" ",17],["container",7],["<",17],["Key",0],[">(",17],["keyedBy",1],[" ",17],["_",2],[": ",17],["Key",18],[".Type) ",17],["throws",12],[" -> ",17],["KeyedDecodingContainer",18,253],["<",17],["Key",18],["> ",17],["where",12],[" ",17],["Key",18],[" : ",17],["CodingKey",18,295]],"s":[["func",12],[" ",17],["container",7],["<",17],["Key",0],[">(",17],["keyedBy",1],[": ",17],["Key",18],[".Type) ",17],["throws",12],[" -> ",17],["KeyedDecodingContainer",18],["<",17],["Key",18],[">",17]],"c":[["Key",1,"CodingKey",295]],"g":[["Key",0,0]]},{"p":["JSON","Rule","Whitespace","Construction"],"f":[["typealias",12],[" ",17],["Construction",7],[" = ",17],["Void",18,277]],"s":[["typealias",12],[" ",17],["Construction",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","Whitespace","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","DecimalDigit"],"f":[["typealias",12],[" ",17],["DecimalDigit",7],["<",17],["T",0],["> = ",17],["Grammar",18,231],[".",17],["DecimalDigit",18,232],["<",17],["Location",18],[", ",17],["UInt8",18,282],[", ",17],["T",18],["> ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryInteger",18,249]],"s":[["typealias",12],[" ",17],["DecimalDigit",7]],"c":[["T",1,"BinaryInteger",249]],"g":[["Location",0,0],["T",0,1]],"d":"ASCII decimal digit terminals."},{"p":["JSON","Rule","NumberLiteral","PlusOrMinus","Construction"],"f":[["typealias",12],[" ",17],["Construction",7],[" = ",17],["FloatingPointSign",18,252]],"s":[["typealias",12],[" ",17],["Construction",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","NumberLiteral","PlusOrMinus","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","NumberLiteral","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","StringLiteral","EscapeSequence","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","StringLiteral","EscapedCodeUnit","Construction"],"f":[["typealias",12],[" ",17],["Construction",7],[" = ",17],["Unicode",18,292],[".",17],["Scalar",18,293]],"s":[["typealias",12],[" ",17],["Construction",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","StringLiteral","EscapedCodeUnit","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","StringLiteral","CodeUnit","Construction"],"f":[["typealias",12],[" ",17],["Construction",7],[" = ",17],["Void",18,277]],"s":[["typealias",12],[" ",17],["Construction",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","StringLiteral","CodeUnit","Escaped"],"f":[["typealias",12],[" ",17],["Escaped",7],[" = ",17],["JSON",18,0],[".",17],["Rule",18,3],["<",17],["Location",18],[">.",17],["StringLiteral",18,7],[".",17],["EscapedCodeUnit",18,9]],"s":[["typealias",12],[" ",17],["Escaped",7]],"a":{"a":{"d":true,"r":"JSON.Rule.EscapedCodeUnit"}},"g":[["Location",0,0]]},{"p":["JSON","Rule","StringLiteral","CodeUnit","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","StringLiteral","CodeUnit","Unescaped"],"f":[["typealias",12],[" ",17],["Unescaped",7],[" = ",17],["JSON",18,0],[".",17],["Rule",18,3],["<",17],["Location",18],[">.",17],["StringLiteral",18,7],[".",17],["CodeUnit",18,10]],"s":[["typealias",12],[" ",17],["Unescaped",7]],"a":{"a":{"d":true,"r":"JSON.Rule.CodeUnit"}},"g":[["Location",0,0]]},{"p":["JSON","Rule","StringLiteral","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","Null","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","Root","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","True","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","ASCII"],"f":[["typealias",12],[" ",17],["ASCII",7],[" = ",17],["Grammar",18,231],[".",17],["Encoding",18,234],["<",17],["Location",18],[", ",17],["UInt8",18,282],[">",17]],"s":[["typealias",12],[" ",17],["ASCII",7]],"g":[["Location",0,0]],"d":"ASCII terminals."},{"p":["JSON","Rule","Array","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","False","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","Value","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","Object","Item","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","Object","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]]},{"p":["JSON","Rule","Padded"],"f":[["typealias",12],[" ",17],["Padded",7],["<",17],["Rule",0],["> = ",17],["Grammar",18,231],[".",17],["Pad",18,233],["<",17],["Rule",18],[", ",17],["JSON",18,0],[".",17],["Rule",18,3],["<",17],["Location",18],[">.",17],["Whitespace",18,4],["> ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Rule",18],[".",17],["Location",18],[", ",17],["Rule",18],[" : ",17],["ParsingRule",18,213],[", ",17],["Rule",18],[".",17],["Terminal",18],[" == ",17],["UInt8",18,282]],"s":[["typealias",12],[" ",17],["Padded",7]],"c":[["Location",2,"Rule.Location"],["Rule",1,"ParsingRule",213],["Rule.Terminal",2,"UInt8",282]],"g":[["Location",0,0],["Rule",0,1]],"d":"A helper rule, which accepts an input sequence that matches [`Rule`](), \nwith optional leading and trailing ``Whitespace`` characters."},{"p":["JSON","Rule","Keyword","Null"],"f":[["typealias",12],[" ",17],["Null",7],[" = ",17],["JSON",18,0],[".",17],["Rule",18,3],["<",17],["Location",18],[">.",17],["Null",18,11]],"s":[["typealias",12],[" ",17],["Null",7]],"a":{"a":{"d":true,"r":"JSON.Null"}},"g":[["Location",0,0]]},{"p":["JSON","Rule","Keyword","True"],"f":[["typealias",12],[" ",17],["True",7],[" = ",17],["JSON",18,0],[".",17],["Rule",18,3],["<",17],["Location",18],[">.",17],["True",18,13]],"s":[["typealias",12],[" ",17],["True",7]],"a":{"a":{"d":true,"r":"JSON.True"}},"g":[["Location",0,0]]},{"p":["JSON","Rule","Keyword","False"],"f":[["typealias",12],[" ",17],["False",7],[" = ",17],["JSON",18,0],[".",17],["Rule",18,3],["<",17],["Location",18],[">.",17],["False",18,15]],"s":[["typealias",12],[" ",17],["False",7]],"a":{"a":{"d":true,"r":"JSON.False"}},"g":[["Location",0,0]]},{"p":["JSON","Rule","HexDigit"],"f":[["typealias",12],[" ",17],["HexDigit",7],["<",17],["T",0],["> = ",17],["Grammar",18,231],[".",17],["HexDigit",18,235],["<",17],["Location",18],[", ",17],["UInt8",18,282],[", ",17],["T",18],["> ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryInteger",18,249]],"s":[["typealias",12],[" ",17],["HexDigit",7]],"c":[["T",1,"BinaryInteger",249]],"g":[["Location",0,0],["T",0,1]],"d":"ASCII hexadecimal digit terminals."}],"edges":{"conformer":[0,254,[],0,286,[],0,294,[],1,221,[],1,227,[],1,254,[],1,278,[],1,294,[],2,221,[],2,254,[],2,278,[],2,294,[],4,213,[],4,218,[],5,213,[],6,213,[],6,218,[],7,213,[],8,213,[],9,213,[],9,218,[],10,213,[],10,218,[],11,210,[],11,213,[],12,213,[],13,210,[],13,213,[],14,213,[],15,210,[],15,213,[],16,213,[],17,213,[],18,213,[],22,221,[],22,227,[],22,254,[],22,278,[],22,294,[],23,294,[],24,254,[],24,278,[],24,294,[],25,278,[],25,294,[],26,254,[],26,294,[],27,258,[],27,286,[]],"feature":[212,11,212,13,212,15,220,4,220,6,220,9,220,10,225,1,225,2,225,22,229,1,229,22,230,1,230,22,256,0,256,1,256,2,256,22,256,24,256,26],"member":[1,0,2,0,3,0,4,3,5,3,6,5,7,3,8,7,9,7,10,7,11,3,12,3,13,3,14,3,15,3,16,3,17,3,18,17,19,3,20,0,21,20,22,0,23,0,24,0,25,0,26,0,27,0,28,1,29,1,30,2,31,2,32,0,33,0,34,0,35,0,36,0,37,0,38,22,39,23,40,24,41,25,42,26,43,27,44,21,45,22,46,1,47,2,48,11,49,13,50,15,51,20,52,0,53,0,54,22,55,22,56,1,57,2,58,2,59,23,60,24,61,24,62,24,63,24,64,25,65,26,66,26,67,26,68,26,69,27,70,27,71,0,72,4,73,6,74,5,75,8,76,9,77,7,78,10,79,12,80,14,81,16,82,18,83,17,84,0,85,0,86,23,87,23,88,23,89,23,90,23,91,23,92,23,93,23,94,23,95,23,96,23,97,23,98,23,99,23,100,23,101,23,102,23,103,23,104,23,105,23,106,23,107,23,108,23,109,23,110,23,111,23,112,23,113,23,114,23,115,23,116,23,117,23,118,23,119,23,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,145,0,146,0,147,0,148,0,149,0,150,0,151,0,152,0,153,0,154,26,155,26,156,26,157,26,158,26,159,26,160,26,161,26,162,27,163,27,164,27,165,27,166,27,167,27,168,27,169,27,170,27,171,27,172,27,173,27,174,27,175,27,176,27,177,27,178,27,179,27,180,27,181,0,182,4,183,4,184,3,185,6,186,6,187,5,188,8,189,9,190,9,191,10,192,10,193,10,194,10,195,7,196,11,197,12,198,13,199,3,200,14,201,15,202,16,203,18,204,17,205,3,206,19,207,19,208,19,209,3]},"hints":[45,224,46,224,47,224,48,211,49,211,50,211,52,287,53,255,55,228,56,228,57,222,58,223,60,255,65,255,69,259,70,290,71,290,72,219,73,219,74,215,75,215,76,219,77,215,78,219,79,215,80,215,81,215,82,215,83,215,85,288,120,289,162,288,163,289,164,260,165,261,166,262,167,263,168,264,169,265,170,267,171,268,172,269,173,270,174,271,175,272,176,273,177,274,178,266,179,291,180,275,181,291,182,214,183,216,185,214,186,216,187,216,188,216,189,214,190,216,191,214,193,216,195,216,196,216,197,216,198,216,200,216,201,216,202,216,203,216,204,216,212,215,220,215,225,255,229,229,230,230,256,256],"sourcemap":[{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/Error.swift","symbols":[11,11,25,14,12,64,16,8,41,26,11,24,29,12,62,44,12,61,48,12,63,51,8,40,59,12,60,70,11,22,73,12,45,79,12,55,85,12,54,87,8,38,94,9,1,97,12,46,102,13,28,103,13,29,106,12,56,118,9,2,121,12,47,126,13,31,127,13,30,130,12,58,141,12,57]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/JSON.Base10.swift","symbols":[7,9,20,11,12,51,44,13,21,52,12,44]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/JSON.Decoder.swift","symbols":[37,8,52,42,8,71,48,9,120,53,9,85,58,9,181,70,11,27,74,12,69,76,12,70,79,8,43,128,9,180,133,9,165,138,9,168,143,9,173,148,9,172,153,9,171,158,9,170,163,9,169,168,9,177,173,9,176,178,9,175,183,9,174,188,9,167,193,9,166,198,9,164,203,9,178,211,9,163,216,9,162,223,9,179]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/JSON.LintingDictionary.swift","symbols":[11,9,151,16,9,149,30,9,150,50,11,23,53,12,59,56,8,39,67,13,101,80,13,118,99,13,102,127,13,119,149,13,88,154,13,89,159,13,105,164,13,106,170,13,93,190,13,92,214,13,109,234,13,110,260,13,117,265,13,100,271,13,107,276,13,108,281,13,91,286,13,90,292,13,113,298,13,116,304,13,99,310,13,96,317,13,112,323,13,115,329,13,98,335,13,95,342,13,111,348,13,114,354,13,97,360,13,94,367,13,103,372,13,104,377,13,87,382,13,86]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/JSON.Number.swift","symbols":[12,11,26,20,12,66,31,12,68,40,12,67,47,8,42,68,12,65,102,13,159,130,13,160,159,13,158,195,13,161,223,13,155,229,13,156,235,13,154,242,13,157]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/JSON.Rule.swift","symbols":[58,9,3,62,18,199,65,18,209,68,18,184,75,9,11,78,18,196,81,12,48,88,9,13,91,18,198,94,12,49,101,9,15,104,18,201,107,12,50,115,9,19,119,18,206,122,18,207,125,18,208,133,9,12,136,18,197,138,13,79,158,9,16,161,18,202,163,13,81,217,9,5,221,13,6,224,22,186,226,22,185,228,17,73,239,18,187,241,13,74,322,9,7,326,13,10,330,22,194,333,22,192,336,22,193,338,22,191,340,17,78,356,13,9,359,22,190,361,22,189,363,17,76,384,13,8,387,22,188,389,17,75,430,18,195,432,13,77,475,9,4,478,18,183,480,18,182,482,13,72,499,14,205,509,9,14,512,18,200,514,13,80,544,9,17,553,13,18,556,22,203,558,17,82,570,18,204,572,13,83]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/JSON.swift","symbols":[12,5,0,26,9,84,54,9,33,56,9,32,58,9,35,64,9,37,66,9,34,87,9,36,97,8,53]},{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/Primitives.swift","symbols":[4,9,148,19,9,147,31,9,145,44,9,135,67,9,140,99,9,139,122,9,141,138,9,127,153,9,129,185,9,132,237,9,122,251,9,153,263,9,146,268,9,125,273,9,144,279,9,143,285,9,142,291,9,124,296,9,128,302,9,131,307,9,121,319,9,152,335,9,134,340,9,138,346,9,137,352,9,136,358,9,126,363,9,130,369,9,133,374,9,123]}]}