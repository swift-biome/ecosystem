{"culture":"JSON","dependencies":[{"package":"swift-grammar","modules":["Grammar"]}],"extensions":[{"name":"json","source":"@import (Foundation)\n@import (Grammar)\n\n# ``JSON``\n\nEfficiently parse and decode JSON in pure Swift.\n\nThe `JSON` module provides various rules for *parsing* JSON messages, and an expressive, \nlightweight set of tools for *decoding* parsed messages into Swift structures. Unlike the \nmonolithic ``Foundation/JSONDecoder``, `JSON` vends atomized, \ncomposable interfaces that can be adapted and optimized for a variety of use-cases.\n\nTo minimize namespace pollution, most of this module’s API lives under the ``JSON//JSON`` enumeration.\n\nThis module re-exports the ``Grammar`` module from ``/swift-grammar``.\n"}],"partitions":[{"namespace":"JSON","communities":[{"community":"enum","startIndex":0,"endIndex":22},{"community":"struct","startIndex":22,"endIndex":28},{"community":"enum.case","startIndex":28,"endIndex":39},{"community":"init","startIndex":39,"endIndex":52},{"community":"type.subscript","startIndex":52,"endIndex":53},{"community":"type.property","startIndex":53,"endIndex":60},{"community":"property","startIndex":60,"endIndex":80},{"community":"type.method","startIndex":80,"endIndex":96},{"community":"method","startIndex":96,"endIndex":222},{"community":"typealias","startIndex":222,"endIndex":250}]},{"namespace":"Swift","communities":[{"community":"method","startIndex":250,"endIndex":276}]}],"identifiers":["s4JSONAAO","s4JSONAAO14PrimitiveErrorO","s4JSONAAO14RecursiveErrorO","s4JSONAAO4RuleO","s4JSONAAO4RuleO10WhitespaceO","s4JSONAAO4RuleO13NumberLiteralO","s4JSONAAO4RuleO13NumberLiteralO11PlusOrMinusO","s4JSONAAO4RuleO13StringLiteralO","s4JSONAAO4RuleO13StringLiteralO14EscapeSequenceO","s4JSONAAO4RuleO13StringLiteralO15EscapedCodeUnitO","s4JSONAAO4RuleO13StringLiteralO8CodeUnitO","s4JSONAAO4RuleO4NullO","s4JSONAAO4RuleO4RootO","s4JSONAAO4RuleO4TrueO","s4JSONAAO4RuleO5ArrayO","s4JSONAAO4RuleO5FalseO","s4JSONAAO4RuleO5ValueO","s4JSONAAO4RuleO6ObjectO","s4JSONAAO4RuleO6ObjectO4ItemO","s4JSONAAO4RuleO7KeywordO","s4JSONAAO6Base10O","s4JSONAAO6Base10O7InverseO","s4JSONAAO12LintingErrorV","s4JSONAAO17LintingDictionaryV","s4JSONAAO20IntegerOverflowErrorV","s4JSONAAO25InvalidUnicodeScalarErrorV","s4JSONAAO6NumberV","s4JSONAAO7DecoderV","s4JSONAAO14PrimitiveErrorO7shapingyADSayABG_SiSgtcADmF","s4JSONAAO14PrimitiveErrorO8matchingyAdB_ypXptcADmF","s4JSONAAO14PrimitiveErrorO9undefinedyADSS_SDySSABGtcADmF","s4JSONAAO14RecursiveErrorO10dictionaryyADs0C0_p_SStcADmF","s4JSONAAO14RecursiveErrorO5arrayyADs0C0_p_SitcADmF","s4JSONAAO4boolyABSbcABmF","s4JSONAAO4nullyA2BmF","s4JSONAAO5arrayyABSayABGcABmF","s4JSONAAO6numberyA2B6NumberVcABmF","s4JSONAAO6objectyABSaySS3key_AB5valuetGcABmF","s4JSONAAO6stringyABSScABmF","s4JSONAAO12LintingErrorV6unusedADSDySSABG_tcfc","s4JSONAAO12arrayLiteralA2Bd_tcfc","s4JSONAAO13stringLiteralABSS_tcfc","s4JSONAAO14booleanLiteralABSb_tcfc","s4JSONAAO17LintingDictionaryVyADSDySSABGcfc","s4JSONAAO17dictionaryLiteralABSS_ABtd_tcfc","s4JSONAAO20IntegerOverflowErrorV6number9overflowsAdB6NumberV_s010FixedWidthB0_pXptcfc","s4JSONAAO25InvalidUnicodeScalarErrorV5valueADs6UInt16V_tcfc","s4JSONAAO6NumberV4sign5units6placesADs17FloatingPointSignO_s6UInt64Vs6UInt32Vtcfc","s4JSONAAO6NumberVyADxcSURzlufc","s4JSONAAO6NumberVyADxcSZRzlufc","s4JSONAAO7DecoderV_4path8userInfoAdB_Says9CodingKey_pGSDys0f4UsereG0VypGtcfc","s4JSONAAO7parsingABx_tKcSlRzs5UInt8V7ElementRtzlufc","s4JSONAAO6Base10O7InverseO_2asxSi_xmtcSBRzluipZ","s4JSONAAO12LintingErrorV9namespaceSSvpZ","s4JSONAAO14PrimitiveErrorO9namespaceSSvpZ","s4JSONAAO14RecursiveErrorO9namespaceSSvpZ","s4JSONAAO4RuleO4NullO7literalSays5UInt8VGvpZ","s4JSONAAO4RuleO4TrueO7literalSays5UInt8VGvpZ","s4JSONAAO4RuleO5FalseO7literalSays5UInt8VGvpZ","s4JSONAAO6Base10O3ExpSays6UInt64VGvpZ","s4JSONAAO10codingPathSays9CodingKey_pGvp","s4JSONAAO11descriptionSSvp","s4JSONAAO12LintingErrorV6unusedSDySSABGvp","s4JSONAAO12LintingErrorV7messageSSvp","s4JSONAAO14PrimitiveErrorO7messageSSvp","s4JSONAAO14RecursiveErrorO4nexts0C0_pSgvp","s4JSONAAO14RecursiveErrorO7contextSaySSGvp","s4JSONAAO17LintingDictionaryV5itemsSDySSABGvp","s4JSONAAO20IntegerOverflowErrorV11descriptionSSvp","s4JSONAAO20IntegerOverflowErrorV4typeypXpvp","s4JSONAAO20IntegerOverflowErrorV6numberAB6NumberVvp","s4JSONAAO20IntegerOverflowErrorV9overflowss010FixedWidthB0_pXpvp","s4JSONAAO25InvalidUnicodeScalarErrorV5values6UInt16Vvp","s4JSONAAO6NumberV11descriptionSSvp","s4JSONAAO6NumberV4signs17FloatingPointSignOvp","s4JSONAAO6NumberV5unitss6UInt64Vvp","s4JSONAAO6NumberV6placess6UInt64Vvp","s4JSONAAO7DecoderV10codingPathSays9CodingKey_pGvp","s4JSONAAO7DecoderV8userInfoSDys010CodingUserD3KeyVypGvp","s4JSONAAO8userInfoSDys010CodingUserC3KeyVypGvp","s4JSONAAO14RecursiveErrorO5array10underlyingADs0C0_p_tFZ","s4JSONAAO4RuleO10WhitespaceO5parse8terminalytSgs5UInt8V_tFZ","s4JSONAAO4RuleO13NumberLiteralO11PlusOrMinusO5parse8terminals17FloatingPointSignOSgs5UInt8V_tFZ","s4JSONAAO4RuleO13NumberLiteralO5parseyAB0C0V7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAJ0G11DiagnosticsRd__s5UInt8VAN_7ElementRTd__lFZ","s4JSONAAO4RuleO13StringLiteralO14EscapeSequenceO5parseySS7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAJ0I11DiagnosticsRd__s5UInt8VAN_7ElementRTd__lFZ","s4JSONAAO4RuleO13StringLiteralO15EscapedCodeUnitO5parse8terminals7UnicodeO6ScalarVSgs5UInt8V_tFZ","s4JSONAAO4RuleO13StringLiteralO5parseySS7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAH0G11DiagnosticsRd__s5UInt8VAL_7ElementRTd__lFZ","s4JSONAAO4RuleO13StringLiteralO8CodeUnitO5parse8terminalytSgs5UInt8V_tFZ","s4JSONAAO4RuleO4RootO5parseyAB7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAH0F11DiagnosticsRd__s5UInt8VAL_7ElementRTd__lFZ","s4JSONAAO4RuleO5ArrayO5parseySayABG7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAI0F11DiagnosticsRd__s5UInt8VAM_7ElementRTd__lFZ","s4JSONAAO4RuleO5ValueO5parseyAB7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAH0F11DiagnosticsRd__s5UInt8VAL_7ElementRTd__lFZ","s4JSONAAO4RuleO6ObjectO4ItemO5parseySS3key_AB5valuet7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAL0I11DiagnosticsRd__s5UInt8VAP_7ElementRTd__lFZ","s4JSONAAO4RuleO6ObjectO5parseySaySS3key_AB5valuetG7Grammar12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAK0H11DiagnosticsRd__s5UInt8VAO_7ElementRTd__lFZ","s4JSONAAO6escapeySSxSyRzlFZ","s4JSONAAO6numberyABxSURzlFZ","s4JSONAAO6numberyABxSZRzlFZ","s4JSONAAO16unkeyedContainers015UnkeyedDecodingC0_pyKF","s4JSONAAO17LintingDictionaryV3pop_2asSSSgSS_AGmtKF","s4JSONAAO17LintingDictionaryV3pop_2asSSSgSS_SSmtKF","s4JSONAAO17LintingDictionaryV3pop_2asSayABGSgSS_AGmtKF","s4JSONAAO17LintingDictionaryV3pop_2asSayABGSgSS_AHmtKF","s4JSONAAO17LintingDictionaryV3pop_2asSbSgSS_AGmtKF","s4JSONAAO17LintingDictionaryV3pop_2asSbSgSS_SbmtKF","s4JSONAAO17LintingDictionaryV3pop_2as_q_SgSS_xSgmq_xKXEtKSBRzr0_lF","s4JSONAAO17LintingDictionaryV3pop_2as_q_SgSS_xSgmq_xKXEtKs17FixedWidthIntegerRzSURzr0_lF","s4JSONAAO17LintingDictionaryV3pop_2as_q_SgSS_xSgmq_xKXEtKs17FixedWidthIntegerRzSZRzr0_lF","s4JSONAAO17LintingDictionaryV3pop_2as_q_SgSS_xmq_xKXEtKSBRzr0_lF","s4JSONAAO17LintingDictionaryV3pop_2as_q_SgSS_xmq_xKXEtKs17FixedWidthIntegerRzSURzr0_lF","s4JSONAAO17LintingDictionaryV3pop_2as_q_SgSS_xmq_xKXEtKs17FixedWidthIntegerRzSZRzr0_lF","s4JSONAAO17LintingDictionaryV3pop_2as_xSgSS_SSSgmxSSKXEtKlF","s4JSONAAO17LintingDictionaryV3pop_2as_xSgSS_SSmxSSKXEtKlF","s4JSONAAO17LintingDictionaryV3pop_2as_xSgSS_SayABGSgmxAHKXEtKlF","s4JSONAAO17LintingDictionaryV3pop_2as_xSgSS_SayABGmxAHKXEtKlF","s4JSONAAO17LintingDictionaryV3pop_2as_xSgSS_SbSgmxSbKXEtKlF","s4JSONAAO17LintingDictionaryV3pop_2as_xSgSS_SbmxSbKXEtKlF","s4JSONAAO17LintingDictionaryV3pop_2asxSgSS_AGmtKSBRzlF","s4JSONAAO17LintingDictionaryV3pop_2asxSgSS_AGmtKs17FixedWidthIntegerRzSURzlF","s4JSONAAO17LintingDictionaryV3pop_2asxSgSS_AGmtKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO17LintingDictionaryV3pop_2asxSgSS_xmtKSBRzlF","s4JSONAAO17LintingDictionaryV3pop_2asxSgSS_xmtKs17FixedWidthIntegerRzSURzlF","s4JSONAAO17LintingDictionaryV3pop_2asxSgSS_xmtKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO17LintingDictionaryV3pop_2asytSgSS_ytmtKF","s4JSONAAO17LintingDictionaryV3popyABSgSSF","s4JSONAAO17LintingDictionaryV3popyxSgSS_xABKXEtKlF","s4JSONAAO17LintingDictionaryV6remove_2asS2S_SSmtKF","s4JSONAAO17LintingDictionaryV6remove_2asSSSgSS_AGmtKF","s4JSONAAO17LintingDictionaryV6remove_2asSayABGSS_AGmtKF","s4JSONAAO17LintingDictionaryV6remove_2asSayABGSgSS_AHmtKF","s4JSONAAO17LintingDictionaryV6remove_2asSbSS_SbmtKF","s4JSONAAO17LintingDictionaryV6remove_2asSbSgSS_AGmtKF","s4JSONAAO17LintingDictionaryV6remove_2as_q_SS_xmq_xKXEtKSBRzr0_lF","s4JSONAAO17LintingDictionaryV6remove_2as_q_SS_xmq_xKXEtKs17FixedWidthIntegerRzSURzr0_lF","s4JSONAAO17LintingDictionaryV6remove_2as_q_SS_xmq_xKXEtKs17FixedWidthIntegerRzSZRzr0_lF","s4JSONAAO17LintingDictionaryV6remove_2as_q_SgSS_xSgmq_xKXEtKSBRzr0_lF","s4JSONAAO17LintingDictionaryV6remove_2as_q_SgSS_xSgmq_xKXEtKs17FixedWidthIntegerRzSURzr0_lF","s4JSONAAO17LintingDictionaryV6remove_2as_q_SgSS_xSgmq_xKXEtKs17FixedWidthIntegerRzSZRzr0_lF","s4JSONAAO17LintingDictionaryV6remove_2as_xSS_SSmxSSKXEtKlF","s4JSONAAO17LintingDictionaryV6remove_2as_xSS_SayABGmxAGKXEtKlF","s4JSONAAO17LintingDictionaryV6remove_2as_xSS_SbmxSbKXEtKlF","s4JSONAAO17LintingDictionaryV6remove_2as_xSgSS_SSSgmxSSKXEtKlF","s4JSONAAO17LintingDictionaryV6remove_2as_xSgSS_SayABGSgmxAHKXEtKlF","s4JSONAAO17LintingDictionaryV6remove_2as_xSgSS_SbSgmxSbKXEtKlF","s4JSONAAO17LintingDictionaryV6remove_2asxSS_xmtKSBRzlF","s4JSONAAO17LintingDictionaryV6remove_2asxSS_xmtKs17FixedWidthIntegerRzSURzlF","s4JSONAAO17LintingDictionaryV6remove_2asxSS_xmtKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO17LintingDictionaryV6remove_2asxSgSS_AGmtKSBRzlF","s4JSONAAO17LintingDictionaryV6remove_2asxSgSS_AGmtKs17FixedWidthIntegerRzSURzlF","s4JSONAAO17LintingDictionaryV6remove_2asxSgSS_AGmtKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO17LintingDictionaryV6remove_2asySS_ytmtKF","s4JSONAAO17LintingDictionaryV6removeyABSSKF","s4JSONAAO17LintingDictionaryV6removeyxSS_xABKXEtKlF","s4JSONAAO20singleValueContainers06Singlec8DecodingD0_pyF","s4JSONAAO2as5casesxxm_tKSYRzSJ8RawValueRtzlF","s4JSONAAO2as5casesxxm_tKSYRzSS8RawValueRtzlF","s4JSONAAO2as5casesxxm_tKSYRzs17FixedWidthInteger8RawValueRpzSUAGRQlF","s4JSONAAO2as5casesxxm_tKSYRzs17FixedWidthInteger8RawValueRpzSZAGRQlF","s4JSONAAO2as5casesxxm_tKSYRzs7UnicodeO6ScalarV8RawValueRtzlF","s4JSONAAO2as_16uniquingKeysWithSDySSABGAEm_A2B_ABtKXEtKF","s4JSONAAO2as_16uniquingKeysWithSDySSABGSgAEm_A2B_ABtKXEtKF","s4JSONAAO2as_16uniquingKeysWithSDySSABGSgAFm_A2B_ABtKXEtKF","s4JSONAAO2as_5countSayABGAEm_SitKF","s4JSONAAO2as_5countSayABGSgAFm_SitKF","s4JSONAAO2as_5whereSayABGAEm_SbSiKXEtKF","s4JSONAAO2as_5whereSayABGSgAFm_SbSiKXEtKF","s4JSONAAO2asyS2SmKF","s4JSONAAO2asyS2bmKF","s4JSONAAO2asySSSgADmKF","s4JSONAAO2asySSSgSSmF","s4JSONAAO2asySayABGADmKF","s4JSONAAO2asySayABGSgADmF","s4JSONAAO2asySayABGSgAEmKF","s4JSONAAO2asySaySS3key_AB5valuetGAFmKF","s4JSONAAO2asySaySS3key_AB5valuetGSgAFmF","s4JSONAAO2asySaySS3key_AB5valuetGSgAGmKF","s4JSONAAO2asySbSgADmKF","s4JSONAAO2asySbSgSbmF","s4JSONAAO2asyxSgADmKSBRzlF","s4JSONAAO2asyxSgADmKs17FixedWidthIntegerRzSURzlF","s4JSONAAO2asyxSgADmKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO2asyxSgxmKs17FixedWidthIntegerRzSURzlF","s4JSONAAO2asyxSgxmKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO2asyxSgxmSBRzlF","s4JSONAAO2asyxxmKSBRzlF","s4JSONAAO2asyxxmKs17FixedWidthIntegerRzSURzlF","s4JSONAAO2asyxxmKs17FixedWidthIntegerRzSZRzlF","s4JSONAAO2asyytSgytmF","s4JSONAAO2asyyytmKF","s4JSONAAO2isySbytmF","s4JSONAAO4case2ofxxm_tKSYRzSS8RawValueRtzlF","s4JSONAAO4lint10discarding_q_x_q_AB17LintingDictionaryVzKXEtKSTRzSS7ElementRtzr0_lF","s4JSONAAO4lint12whitelisting_q_x_q_AB17LintingDictionaryVzKXEtKSTRzSS7ElementRtzr0_lF","s4JSONAAO4lintyxxAB17LintingDictionaryVzKXEKlF","s4JSONAAO5apply7patternxSgAExmKcABXE_tKlF","s4JSONAAO6NumberV14callAsFunction2asx5units_x6placestSgAIm_ts17FixedWidthIntegerRzSZRzlF","s4JSONAAO6NumberV14callAsFunction2asxSgAGm_ts17FixedWidthIntegerRzSURzlF","s4JSONAAO6NumberV14callAsFunction2asxSgAGm_ts17FixedWidthIntegerRzSZRzlF","s4JSONAAO6NumberV14callAsFunction2asxxm_tSBRzlF","s4JSONAAO6NumberV2asyx5units_x6placestSgxAF_xAGtms17FixedWidthIntegerRzSZRzlF","s4JSONAAO6NumberV2asyxSgxms17FixedWidthIntegerRzSURzlF","s4JSONAAO6NumberV2asyxSgxms17FixedWidthIntegerRzSZRzlF","s4JSONAAO6NumberV2asyxxmSBRzlF","s4JSONAAO6unwrap7patternxxSgxmKcABXE_tKlF","s4JSONAAO7DecoderV16unkeyedContainers015UnkeyedDecodingD0_pyKF","s4JSONAAO7DecoderV20singleValueContainers06Singled8DecodingE0_pyF","s4JSONAAO7DecoderV6decodeyS2SmKF","s4JSONAAO7DecoderV6decodeyS2bmKF","s4JSONAAO7DecoderV6decodeyS2dmKF","s4JSONAAO7DecoderV6decodeyS2fmKF","s4JSONAAO7DecoderV6decodeyS2imKF","s4JSONAAO7DecoderV6decodeyS2umKF","s4JSONAAO7DecoderV6decodeys4Int8VAGmKF","s4JSONAAO7DecoderV6decodeys5Int16VAGmKF","s4JSONAAO7DecoderV6decodeys5Int32VAGmKF","s4JSONAAO7DecoderV6decodeys5Int64VAGmKF","s4JSONAAO7DecoderV6decodeys5UInt8VAGmKF","s4JSONAAO7DecoderV6decodeys6UInt16VAGmKF","s4JSONAAO7DecoderV6decodeys6UInt32VAGmKF","s4JSONAAO7DecoderV6decodeys6UInt64VAGmKF","s4JSONAAO7DecoderV6decodeyxxmKSeRzlF","s4JSONAAO7DecoderV9container7keyedBys22KeyedDecodingContainerVyxGxm_tKs9CodingKeyRzlF","s4JSONAAO7DecoderV9decodeNilSbyF","s4JSONAAO9container7keyedBys22KeyedDecodingContainerVyxGxm_tKs9CodingKeyRzlF","s4JSONAAO4RuleO10WhitespaceO12Constructiona","s4JSONAAO4RuleO10WhitespaceO8Terminala","s4JSONAAO4RuleO12DecimalDigita","s4JSONAAO4RuleO13NumberLiteralO11PlusOrMinusO12Constructiona","s4JSONAAO4RuleO13NumberLiteralO11PlusOrMinusO8Terminala","s4JSONAAO4RuleO13NumberLiteralO8Terminala","s4JSONAAO4RuleO13StringLiteralO14EscapeSequenceO8Terminala","s4JSONAAO4RuleO13StringLiteralO15EscapedCodeUnitO12Constructiona","s4JSONAAO4RuleO13StringLiteralO15EscapedCodeUnitO8Terminala","s4JSONAAO4RuleO13StringLiteralO8CodeUnitO12Constructiona","s4JSONAAO4RuleO13StringLiteralO8CodeUnitO7Escapeda","s4JSONAAO4RuleO13StringLiteralO8CodeUnitO8Terminala","s4JSONAAO4RuleO13StringLiteralO8CodeUnitO9Unescapeda","s4JSONAAO4RuleO13StringLiteralO8Terminala","s4JSONAAO4RuleO4NullO8Terminala","s4JSONAAO4RuleO4RootO8Terminala","s4JSONAAO4RuleO4TrueO8Terminala","s4JSONAAO4RuleO5ASCIIa","s4JSONAAO4RuleO5ArrayO8Terminala","s4JSONAAO4RuleO5FalseO8Terminala","s4JSONAAO4RuleO5ValueO8Terminala","s4JSONAAO4RuleO6ObjectO4ItemO8Terminala","s4JSONAAO4RuleO6ObjectO8Terminala","s4JSONAAO4RuleO6Paddeda","s4JSONAAO4RuleO7KeywordO4Nulla","s4JSONAAO4RuleO7KeywordO4Truea","s4JSONAAO4RuleO7KeywordO5Falsea","s4JSONAAO4RuleO8HexDigita","sSa4JSONA2AORszlE4load_2asSSSgSi_AEmtKF","sSa4JSONA2AORszlE4load_2asSSSi_SSmtKF","sSa4JSONA2AORszlE4load_2asSayABGSgSi_AFmtKF","sSa4JSONA2AORszlE4load_2asSayABGSi_AEmtKF","sSa4JSONA2AORszlE4load_2asSbSgSi_AEmtKF","sSa4JSONA2AORszlE4load_2asSbSi_SbmtKF","sSa4JSONA2AORszlE4load_2as_qd_0_SgSi_qd__Sgmqd_0_qd__KXEtKSBRd__r0_lF","sSa4JSONA2AORszlE4load_2as_qd_0_SgSi_qd__Sgmqd_0_qd__KXEtKs17FixedWidthIntegerRd__SURd__r0_lF","sSa4JSONA2AORszlE4load_2as_qd_0_SgSi_qd__Sgmqd_0_qd__KXEtKs17FixedWidthIntegerRd__SZRd__r0_lF","sSa4JSONA2AORszlE4load_2as_qd_0_Si_qd__mqd_0_qd__KXEtKSBRd__r0_lF","sSa4JSONA2AORszlE4load_2as_qd_0_Si_qd__mqd_0_qd__KXEtKs17FixedWidthIntegerRd__SURd__r0_lF","sSa4JSONA2AORszlE4load_2as_qd_0_Si_qd__mqd_0_qd__KXEtKs17FixedWidthIntegerRd__SZRd__r0_lF","sSa4JSONA2AORszlE4load_2as_qd__SgSi_SSSgmqd__SSKXEtKlF","sSa4JSONA2AORszlE4load_2as_qd__SgSi_SayABGSgmqd__AFKXEtKlF","sSa4JSONA2AORszlE4load_2as_qd__SgSi_SbSgmqd__SbKXEtKlF","sSa4JSONA2AORszlE4load_2as_qd__Si_SSmqd__SSKXEtKlF","sSa4JSONA2AORszlE4load_2as_qd__Si_SayABGmqd__AEKXEtKlF","sSa4JSONA2AORszlE4load_2as_qd__Si_Sbmqd__SbKXEtKlF","sSa4JSONA2AORszlE4load_2asqd__SgSi_AEmtKSBRd__lF","sSa4JSONA2AORszlE4load_2asqd__SgSi_AEmtKs17FixedWidthIntegerRd__SURd__lF","sSa4JSONA2AORszlE4load_2asqd__SgSi_AEmtKs17FixedWidthIntegerRd__SZRd__lF","sSa4JSONA2AORszlE4load_2asqd__Si_qd__mtKSBRd__lF","sSa4JSONA2AORszlE4load_2asqd__Si_qd__mtKs17FixedWidthIntegerRd__SURd__lF","sSa4JSONA2AORszlE4load_2asqd__Si_qd__mtKs17FixedWidthIntegerRd__SZRd__lF","sSa4JSONA2AORszlE4load_2asySi_ytmtKF","sSa4JSONA2AORszlE4loadyqd__Si_qd__ABKXEtKlF","s7Grammar11LiteralRuleP","s7Grammar11LiteralRuleP7literal0B0QzvpZ","s7Grammar11LiteralRulePAAE5parseyyAA12ParsingInputVyqd__GzKAA0E11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAI_7ElementQYd__8TerminalRtzlFZ","s7Grammar11ParsingRuleP","s7Grammar11ParsingRuleP12ConstructionQa","s7Grammar11ParsingRuleP5parsey12ConstructionQzAA0B5InputVyqd__GzKAA0B11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__8TerminalRtzlFZ","s7Grammar11ParsingRuleP8TerminalQa","s7Grammar11ParsingRulePAAE5parse10diagnosing12ConstructionQzqd___tKSlRd__5IndexQyd__8LocationRtz7ElementQyd__8TerminalRtzlFZ","s7Grammar11ParsingRulePAAE5parse_4intoqd_0_qd___qd_0_mtKSlRd__SmRd_0_7ElementQyd_0_12ConstructionRtz5IndexQyd__8LocationRtzAFQyd__8TerminalRtzr0_lFZ","s7Grammar11ParsingRulePAAE5parsey12ConstructionQzqd__KSlRd__5IndexQyd__8LocationRtz7ElementQyd__8TerminalRtzlFZ","s7Grammar12ParsingInputV","s7Grammar12TerminalRuleP","s7Grammar12TerminalRuleP5parse8terminal12ConstructionQzSg0B0Qz_tFZ","s7Grammar12TerminalRulePAAE5parsey12ConstructionQzAA12ParsingInputVyqd__GzKAA0F11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__0B0RtzlFZ","s7Grammar12UnicodeDigitO","s7Grammar12UnicodeDigitOAASzR_rlE3HexO","s7Grammar12UnicodeDigitOAASzR_rlE7DecimalO","s7Grammar14TraceableErrorP","s7Grammar14TraceableErrorP4nexts0C0_pSgvp","s7Grammar14TraceableErrorP7contextSaySSGvp","s7Grammar14TraceableErrorP9namespaceSSvpZ","s7Grammar14TraceableErrorPAAE11descriptionSSvp","s7Grammar15UnicodeEncodingO","s7Grammar18ParsingDiagnosticsP","s7Grammar18TraceableErrorRootP","s7Grammar18TraceableErrorRootP7messageSSvp","s7Grammar18TraceableErrorRootPAAE4nexts0C0_pSgvp","s7Grammar18TraceableErrorRootPAAE7contextSaySSGvp","s7Grammar7PatternO","s7Grammar7PatternO3PadO","sSB","sSJ","sSS","sST","sSU","sSY","sSZ","sSa","sSb","sSd","sSe","sSf","sSi","sSl","sSu","sSy","sSz","ss17CodingUserInfoKeyV","ss17FixedWidthIntegerP","ss17FloatingPointSignO","ss22KeyedDecodingContainerV","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss24UnkeyedDecodingContainerP","ss25ExpressibleByArrayLiteralP","ss25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc","ss26ExpressibleByStringLiteralP","ss26ExpressibleByStringLiteralP06stringD0x0cD4TypeQz_tcfc","ss26ExpressibleByStringLiteralPs0cD4TypeQz023ExtendedGraphemeClusterdE0RtzrlE08extendedghD0xAF_tcfc","ss27ExpressibleByBooleanLiteralP","ss27ExpressibleByBooleanLiteralP07booleanD0x0cD4TypeQz_tcfc","ss28SingleValueDecodingContainerP","ss28SingleValueDecodingContainerP10codingPathSays9CodingKey_pGvp","ss28SingleValueDecodingContainerP6decodeyS2SmKF","ss28SingleValueDecodingContainerP6decodeyS2bmKF","ss28SingleValueDecodingContainerP6decodeyS2dmKF","ss28SingleValueDecodingContainerP6decodeyS2fmKF","ss28SingleValueDecodingContainerP6decodeyS2imKF","ss28SingleValueDecodingContainerP6decodeyS2umKF","ss28SingleValueDecodingContainerP6decodeyqd__qd__mKSeRd__lF","ss28SingleValueDecodingContainerP6decodeys4Int8VAEmKF","ss28SingleValueDecodingContainerP6decodeys5Int16VAEmKF","ss28SingleValueDecodingContainerP6decodeys5Int32VAEmKF","ss28SingleValueDecodingContainerP6decodeys5Int64VAEmKF","ss28SingleValueDecodingContainerP6decodeys5UInt8VAEmKF","ss28SingleValueDecodingContainerP6decodeys6UInt16VAEmKF","ss28SingleValueDecodingContainerP6decodeys6UInt32VAEmKF","ss28SingleValueDecodingContainerP6decodeys6UInt64VAEmKF","ss28SingleValueDecodingContainerP9decodeNilSbyF","ss30ExpressibleByDictionaryLiteralP","ss30ExpressibleByDictionaryLiteralP010dictionaryD0x3KeyQz_5ValueQztd_tcfc","ss33ExpressibleByUnicodeScalarLiteralP","ss33ExpressibleByUnicodeScalarLiteralP07unicodedE0x0cdE4TypeQz_tcfc","ss43ExpressibleByExtendedGraphemeClusterLiteralP","ss43ExpressibleByExtendedGraphemeClusterLiteralP08extendeddeF0x0cdeF4TypeQz_tcfc","ss43ExpressibleByExtendedGraphemeClusterLiteralPs013UnicodeScalarF4TypeQz0cdefI0RtzrlE07unicodehF0xAF_tcfc","ss4Int8V","ss4Voida","ss5ErrorP","ss5Int16V","ss5Int32V","ss5Int64V","ss5UInt8V","ss6UInt16V","ss6UInt32V","ss6UInt64V","ss7DecoderP","ss7DecoderP10codingPathSays9CodingKey_pGvp","ss7DecoderP16unkeyedContainers015UnkeyedDecodingC0_pyKF","ss7DecoderP20singleValueContainers06Singlec8DecodingD0_pyKF","ss7DecoderP8userInfoSDys010CodingUserC3KeyVypGvp","ss7DecoderP9container7keyedBys22KeyedDecodingContainerVyqd__Gqd__m_tKs9CodingKeyRd__lF","ss7UnicodeO","ss7UnicodeO6ScalarV","ss8SendableP","ss9CodingKeyP"],"vertices":[{"p":["JSON"],"f":[["enum",12],[" ",17],["JSON",7]],"s":[["enum",12],[" ",17],["JSON",7]],"d":"A JSON variant value. This value may contain a fragment, an array, or an object.\n\nAll instances of this type, including ``JSON/.number(_:)?overload=s4JSONAAO6numberyA2B6NumberVcABmF`` \ninstances, can be round-tripped losslessly, as long as the initial encoding is performed by \n``/swift-json``. \n\nAs of version 0.3.0, re-encoding a ``/swift-json``-encoded message is guaranteed to produce\nbytewise-identical output.\n\nWhen re-encoding arbitrary JSON, the implementation makes a reasonable effort to preserve \nfeatures of the original input. It will not re-order object fields, strip explicit ``JSON/.null`` \nvalues, or convert decimals to floating point. The parser does *not* preserve structural \nwhitespace.\n\nThe implementation guarantees *canonical equivalence* when re-encoding values, but it may not \npreserve the exact expressions used to represent them. For example, it will normalize the escape \nsequences in [`\"6\\\\/14\\\\/1946\"`]() to [`\"6/14/1946\"`](), because the escaped forward-slashes \n(`/`) are non-canonical."},{"p":["JSON","PrimitiveError"],"f":[["enum",12],[" ",17],["PrimitiveError",7]],"s":[["enum",12],[" ",17],["PrimitiveError",7]]},{"p":["JSON","RecursiveError"],"f":[["enum",12],[" ",17],["RecursiveError",7]],"s":[["enum",12],[" ",17],["RecursiveError",7]]},{"p":["JSON","Rule"],"f":[["enum",12],[" ",17],["Rule",7],["<",17],["Location",0],[">",17]],"s":[["enum",12],[" ",17],["Rule",7]],"g":[["Location",0,0]],"d":"All of the parsing rules in this library are defined at the UTF-8 level. \n\nTo parse *any* JSON value, including fragment values, use the ``JSON/Rule//Value`` \nrule instead.\n\nYou can parse JSON expressions from any ``Collection`` with an \n``Collection//Element`` type of ``UInt8``. For example, you can parse \na ``String`` through its ``String//UTF8View``.\n   ```swift \n   let string:String = \n   \"\"\"\n   {\"success\":true,\"value\":0.1}\n   \"\"\"\n   try JSON.Rule<String.Index>.Root.parse(string.utf8)\n   ```\n   \nHowever, you could also parse a UTF-8 buffer directly, without \nhaving to convert it to a ``String``.\n   ```swift \n   let utf8:[UInt8] = \n   [\n       123,  34, 115, 117,  99,  99, 101, 115, \n       115,  34,  58, 116, 114, 117, 101,  44, \n        34, 118,  97, 108, 117, 101,  34,  58, \n        48,  46,  49, 125\n   ]\n   try JSON.Rule<Array<UInt8>.Index>.Root.parse(utf8)\n   ```\n   \nThe generic [`Location`]() \nparameter provides this flexibility as a zero-cost abstraction.\n\n>   Tip: \n    The ``/swift-grammar`` and ``/swift-json`` libraries are transparent!\n    This means that its parsing rules are always zero-cost abstractions, \n    even when applied to third-party collection types, like \n    ``/swift-nio/NIOCore/ByteBufferView``."},{"p":["JSON","Rule","Whitespace"],"f":[["enum",12],[" ",17],["Whitespace",7]],"s":[["enum",12],[" ",17],["Whitespace",7]],"g":[["Location",0,0]],"d":"@import(Grammar)\nMatches the whitespace characters [`\" \"`](), [`\"\\t\"`](), \n[`\"\\n\"`](), and [`\"\\r\"`]().\n\nThis rule matches a *single* whitespace character.\nTo match a sequence of whitespace characters (including the empty sequence), \nuse one of ``/swift-grammar``’s vector parsing APIs, like ``ParsingInput.parse(as:in:)``.\n\nFor example, the following is equivalent to the regex [`/[\\ \\t\\n\\r]+/`]():\n   ```swift \n   try input.parse(as: JSON.Rule<Location>.Whitespace.self)\n       input.parse(as: JSON.Rule<Location>.Whitespace.self, in: Void.self)\n   ```\n   \n>   Note: Unicode space characters, like [`\"\\u{2009}\"`](), are not \n    considered whitespace characters in the context of JSON parsing."},{"p":["JSON","Rule","NumberLiteral"],"f":[["enum",12],[" ",17],["NumberLiteral",7]],"s":[["enum",12],[" ",17],["NumberLiteral",7]],"g":[["Location",0,0]],"d":"Matches a numeric literal. \n\nNumeric literals are always written in decimal.\n\nThe following examples are all valid literals:\n\n   ```swift \n   \"5\"\n   \"5.5\"\n   \"-5.5\"\n   \"-55e-2\"\n   \"-55e2\"\n   \"-55e+2\"\n   ```\n   \nNumeric literals may not begin with a prefix `+` sign, although the \nexponent field can use a prefix `+`."},{"p":["JSON","Rule","NumberLiteral","PlusOrMinus"],"f":[["enum",12],[" ",17],["PlusOrMinus",7]],"s":[["enum",12],[" ",17],["PlusOrMinus",7]],"g":[["Location",0,0]],"d":"Matches an ASCII `+` or `-` sign."},{"p":["JSON","Rule","StringLiteral"],"f":[["enum",12],[" ",17],["StringLiteral",7]],"s":[["enum",12],[" ",17],["StringLiteral",7]],"g":[["Location",0,0]],"d":"Matches a string literal. \n\nString literals always begin and end with an ASCII double quote character (`\"`)."},{"p":["JSON","Rule","StringLiteral","EscapeSequence"],"f":[["enum",12],[" ",17],["EscapeSequence",7]],"s":[["enum",12],[" ",17],["EscapeSequence",7]],"g":[["Location",0,0]],"d":"Matches a sequence of escaped UTF-16 code units.\n\nA UTF-16 escape sequence consists of [`\"\\u\"`](), followed by four \nhexadecimal digits."},{"p":["JSON","Rule","StringLiteral","EscapedCodeUnit"],"f":[["enum",12],[" ",17],["EscapedCodeUnit",7]],"s":[["enum",12],[" ",17],["EscapedCodeUnit",7]],"g":[["Location",0,0]],"d":"Matches an ASCII character (besides [`\"u\"`]()) that is allowed to \nappear immediately after a backslash (`\\`) in a string literal.\n\nThe following are valid escape characters: `\\`, `\"`, `/`, `b`, `f`, `n`, `r`, `t`."},{"p":["JSON","Rule","StringLiteral","CodeUnit"],"f":[["enum",12],[" ",17],["CodeUnit",7]],"s":[["enum",12],[" ",17],["CodeUnit",7]],"g":[["Location",0,0]],"d":"Matches a UTF-8 code unit that is allowed to appear inline in a string literal. "},{"p":["JSON","Rule","Null"],"f":[["enum",12],[" ",17],["Null",7]],"s":[["enum",12],[" ",17],["Null",7]],"g":[["Location",0,0]],"d":"A literal `null` expression."},{"p":["JSON","Rule","Root"],"f":[["enum",12],[" ",17],["Root",7]],"s":[["enum",12],[" ",17],["Root",7]],"g":[["Location",0,0]],"d":"Matches a complete message; either an ``JSON/Rule//Array`` or an ``JSON/Rule//Object``."},{"p":["JSON","Rule","True"],"f":[["enum",12],[" ",17],["True",7]],"s":[["enum",12],[" ",17],["True",7]],"g":[["Location",0,0]],"d":"A literal `true` expression."},{"p":["JSON","Rule","Array"],"f":[["enum",12],[" ",17],["Array",7]],"s":[["enum",12],[" ",17],["Array",7]],"g":[["Location",0,0]],"d":"@import(Grammar)\nMatches an array literal.\n\nArray literals begin and end with square brackets (`[` and `]`), and \nrecursively contain instances of ``JSON/Rule//Value`` separated by ``JSON/Rule//Padded`` \n``UnicodeEncoding//Comma``s. Trailing commas are not allowed."},{"p":["JSON","Rule","False"],"f":[["enum",12],[" ",17],["False",7]],"s":[["enum",12],[" ",17],["False",7]],"g":[["Location",0,0]],"d":"A literal `false` expression."},{"p":["JSON","Rule","Value"],"f":[["enum",12],[" ",17],["Value",7]],"s":[["enum",12],[" ",17],["Value",7]],"g":[["Location",0,0]],"d":"Matches any value, including fragment values.\n\nOnly use this if you are doing manual JSON parsing. Most web services \nshould send complete ``JSON/Rule//Root`` messages through their public APIs."},{"p":["JSON","Rule","Object"],"f":[["enum",12],[" ",17],["Object",7]],"s":[["enum",12],[" ",17],["Object",7]],"g":[["Location",0,0]],"d":"@import(Grammar)\nMatches an object literal.\n\nObject literals begin and end with curly braces (`{` and `}`), and \ncontain instances of ``Item`` separated by ``JSON/Rule//Padded`` \n``UnicodeEncoding//Comma``s. Trailing commas are not allowed."},{"p":["JSON","Rule","Object","Item"],"f":[["enum",12],[" ",17],["Item",7]],"s":[["enum",12],[" ",17],["Item",7]],"g":[["Location",0,0]],"d":"@import(Grammar)\nMatches an key-value expression.\n\nA key-value expression consists of a ``JSON/Rule//StringLiteral``, \na ``JSON/Rule//Padded`` ``UnicodeEncoding//Colon``, and \na recursive instance of ``JSON/Rule//Value``."},{"p":["JSON","Rule","Keyword"],"f":[["enum",12],[" ",17],["Keyword",7]],"s":[["enum",12],[" ",17],["Keyword",7]],"a":{"a":{"d":true,"m":"nested types have been moved into the outer `JSON` namespace."}},"g":[["Location",0,0]]},{"p":["JSON","Base10"],"f":[["enum",12],[" ",17],["Base10",7]],"s":[["enum",12],[" ",17],["Base10",7]],"d":"A namespace for decimal-related functionality.\n\nThis API is used by library functions that are emitted into the client. \nMost users of ``/swift-json`` should not have to call it directly."},{"p":["JSON","Base10","Inverse"],"f":[["enum",12],[" ",17],["Inverse",7]],"s":[["enum",12],[" ",17],["Inverse",7]],"d":"Negative powers of 10, down to [`1e-19`]()."},{"p":["JSON","LintingError"],"f":[["struct",12],[" ",17],["LintingError",7]],"s":[["struct",12],[" ",17],["LintingError",7]]},{"p":["JSON","LintingDictionary"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["LintingDictionary",7]],"s":[["struct",12],[" ",17],["LintingDictionary",7]]},{"p":["JSON","IntegerOverflowError"],"f":[["struct",12],[" ",17],["IntegerOverflowError",7]],"s":[["struct",12],[" ",17],["IntegerOverflowError",7]]},{"p":["JSON","InvalidUnicodeScalarError"],"f":[["struct",12],[" ",17],["InvalidUnicodeScalarError",7]],"s":[["struct",12],[" ",17],["InvalidUnicodeScalarError",7]]},{"p":["JSON","Number"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["Number",7]],"s":[["struct",12],[" ",17],["Number",7]],"d":"A lossless representation of a numeric literal.\n\nThis type is memory-efficient, and can store fixed-point numbers with \nup to 64 bits of precision. It uses all 64 bits to encode its magnitude, \nwhich enables it to round-trip integers of width up to ``UInt64``."},{"p":["JSON","Decoder"],"f":[["struct",12],[" ",17],["Decoder",7]],"s":[["struct",12],[" ",17],["Decoder",7]]},{"p":["JSON","PrimitiveError","shaping(aggregate:count:)"],"f":[["case",12],[" ",17],["shaping",7],["(",17],["aggregate",1],[": [",17],["JSON",18,0],["], ",17],["count",1],[": ",17],["Int",18,318],["? = nil)",17]],"s":[["case",12],[" ",17],["shaping",7],["(",17],["aggregate",1],[": [",17],["JSON",18],["], ",17],["count",1],[": ",17],["Int",18],["?)",17]]},{"p":["JSON","PrimitiveError","matching(variant:as:)"],"f":[["case",12],[" ",17],["matching",7],["(",17],["variant",1],[": ",17],["JSON",18,0],[", ",17],["as",1],[": ",17],["Any",12],[".Type)",17]],"s":[["case",12],[" ",17],["matching",7],["(",17],["variant",1],[": ",17],["JSON",18],[", ",17],["as",1],[": ",17],["Any",12],[".Type)",17]]},{"p":["JSON","PrimitiveError","undefined(key:in:)"],"f":[["case",12],[" ",17],["undefined",7],["(",17],["key",1],[": ",17],["String",18,308],[", ",17],["in",1],[": [",17],["String",18,308],[" : ",17],["JSON",18,0],["])",17]],"s":[["case",12],[" ",17],["undefined",7],["(",17],["key",1],[": ",17],["String",18],[", ",17],["in",1],[": [",17],["String",18],[" : ",17],["JSON",18],["])",17]]},{"p":["JSON","RecursiveError","dictionary(underlying:in:)"],"f":[["case",12],[" ",17],["dictionary",7],["(",17],["underlying",1],[": ",17],["Error",18,365],[", ",17],["in",1],[": ",17],["String",18,308],[")",17]],"s":[["case",12],[" ",17],["dictionary",7],["(",17],["underlying",1],[": ",17],["Error",18],[", ",17],["in",1],[": ",17],["String",18],[")",17]]},{"p":["JSON","RecursiveError","array(underlying:at:)"],"f":[["case",12],[" ",17],["array",7],["(",17],["underlying",1],[": ",17],["Error",18,365],[", ",17],["at",1],[": ",17],["Int",18,318],[")",17]],"s":[["case",12],[" ",17],["array",7],["(",17],["underlying",1],[": ",17],["Error",18],[", ",17],["at",1],[": ",17],["Int",18],[")",17]]},{"p":["JSON","bool(_:)"],"f":[["case",12],[" ",17],["bool",7],["(",17],["Bool",18,314],[")",17]],"s":[["case",12],[" ",17],["bool",7],["(",17],["Bool",18],[")",17]],"d":"A boolean value. "},{"p":["JSON","null"],"f":[["case",12],[" ",17],["null",7]],"s":[["case",12],[" ",17],["null",7]],"d":"A null value. \n\nThis is conceptually equivalent to ``Void``, and should \nnot be confused with [`nil`]() in Swift. It represents an empty value, \n*not* the absence of a value."},{"p":["JSON","array(_:)"],"f":[["case",12],[" ",17],["array",7],["([",17],["JSON",18,0],["])",17]],"s":[["case",12],[" ",17],["array",7],["([",17],["JSON",18],["])",17]],"d":"An array, which can recursively contain instances of [`Self`]()."},{"p":["JSON","number(_:)"],"f":[["case",12],[" ",17],["number",7],["(",17],["JSON",18,0],[".",17],["Number",18,26],[")",17]],"s":[["case",12],[" ",17],["number",7],["(",17],["JSON",18],[".",17],["Number",18],[")",17]],"d":"A numerical value."},{"p":["JSON","object(_:)"],"f":[["case",12],[" ",17],["object",7],["([(key",17],[": ",17],["String",18,308],[", value",17],[": ",17],["JSON",18,0],[")])",17]],"s":[["case",12],[" ",17],["object",7],["([(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")])",17]],"d":"A ``String``-keyed object, which can recursively contain instances of [`Self`]().\n\nThis is more closely-related to ``KeyValuePairs`` than to ``Dictionary``, \nsince object keys can occur more than once in the same object. However, \nmost JSON APIs allow clients to safely treat objects as ``Dictionary``-like \ncontainers.\n\nThe order of the items in the payload reflects the order in which they \nappear in the source object.\n\n>   Warning: \n    Many JSON APIs do not encode object items in a stable order. Only \n    assume a particular ordering based on careful observation or official \n    documentation.\n\nThe keys in the payload are *not* escaped.\n\n>   Warning: \n    Object keys can contain arbitrary unicode text. Don’t assume the \n    keys are ASCII."},{"p":["JSON","string(_:)"],"f":[["case",12],[" ",17],["string",7],["(",17],["String",18,308],[")",17]],"s":[["case",12],[" ",17],["string",7],["(",17],["String",18],[")",17]],"d":"A string value.\n\nThe contents of this string are *not* escaped. If you are creating an \ninstance of [`Self`]() for serialization with this case-constructor, \ndo not escape the input."},{"p":["JSON","LintingError","init(unused:)"],"f":[["init",10],["(",17],["unused",1],[": [",17],["String",18,308],[" : ",17],["JSON",18,0],["])",17]],"s":[["init",10],["(",17],["unused",1],[": [",17],["String",18],[" : ",17],["JSON",18],["])",17]]},{"p":["JSON","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["JSON",18,0],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["JSON",18],["...)",17]],"o":332},{"p":["JSON","init(stringLiteral:)"],"f":[["init",10],["(",17],["stringLiteral",1],[": ",17],["String",18,308],[")",17]],"s":[["init",10],["(",17],["stringLiteral",1],[": ",17],["String",18],[")",17]],"o":334},{"p":["JSON","init(booleanLiteral:)"],"f":[["init",10],["(",17],["booleanLiteral",1],[": ",17],["Bool",18,314],[")",17]],"s":[["init",10],["(",17],["booleanLiteral",1],[": ",17],["Bool",18],[")",17]],"o":337},{"p":["JSON","LintingDictionary","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["items",2],[": [",17],["String",18,308],[" : ",17],["JSON",18,0],["])",17]],"s":[["init",10],["([",17],["String",18],[" : ",17],["JSON",18],["])",17]]},{"p":["JSON","init(dictionaryLiteral:)"],"f":[["init",10],["(",17],["dictionaryLiteral",1],[": (",17],["String",18,308],[", ",17],["JSON",18,0],[")...)",17]],"s":[["init",10],["(",17],["dictionaryLiteral",1],[": (",17],["String",18],[", ",17],["JSON",18],[")...)",17]],"o":357},{"p":["JSON","IntegerOverflowError","init(number:overflows:)"],"f":[["init",10],["(",17],["number",1],[": ",17],["JSON",18,0],[".",17],["Number",18,26],[", ",17],["overflows",1],[": ",17],["FixedWidthInteger",18,324],[".Type)",17]],"s":[["init",10],["(",17],["number",1],[": ",17],["JSON",18],[".",17],["Number",18],[", ",17],["overflows",1],[": ",17],["FixedWidthInteger",18],[".Type)",17]]},{"p":["JSON","InvalidUnicodeScalarError","init(value:)"],"f":[["init",10],["(",17],["value",1],[": ",17],["UInt16",18,370],[")",17]],"s":[["init",10],["(",17],["value",1],[": ",17],["UInt16",18],[")",17]]},{"p":["JSON","Number","init(sign:units:places:)"],"f":[["init",10],["(",17],["sign",1],[": ",17],["FloatingPointSign",18,325],[", ",17],["units",1],[": ",17],["UInt64",18,372],[", ",17],["places",1],[": ",17],["UInt32",18,371],[" = 0)",17]],"s":[["init",10],["(",17],["sign",1],[": ",17],["FloatingPointSign",18],[", ",17],["units",1],[": ",17],["UInt64",18],[", ",17],["places",1],[": ",17],["UInt32",18],[")",17]],"d":"Creates a numeric literal.\n-   Parameters:\n    - sign: The sign, positive or negative.\n    - units: The magnitude, in units of `places`.\n    - places: The number of decimal places."},{"p":["JSON","Number","init(_:)"],"f":[["init",10],["<",17],["T",0],[">(",17],["_",1],[" ",17],["unsigned",2],[": ",17],["T",18],[") ",17],["where",12],[" ",17],["T",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["init",10],["<",17],["T",0],[">(",17],["T",18],[")",17]],"c":[["T",1,"UnsignedInteger",310]],"g":[["T",0,0]]},{"p":["JSON","Number","init(_:)"],"f":[["init",10],["<",17],["T",0],[">(",17],["_",1],[" ",17],["signed",2],[": ",17],["T",18],[") ",17],["where",12],[" ",17],["T",18],[" : ",17],["SignedInteger",18,312]],"s":[["init",10],["<",17],["T",0],[">(",17],["T",18],[")",17]],"c":[["T",1,"SignedInteger",312]],"g":[["T",0,0]]},{"p":["JSON","Decoder","init(_:path:userInfo:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["value",2],[": ",17],["JSON",18,0],[", ",17],["path",1],[": [",17],["CodingKey",18,382],["], ",17],["userInfo",1],[": [",17],["CodingUserInfoKey",18,323],[" : ",17],["Any",12],["] = [:])",17]],"s":[["init",10],["(",17],["JSON",18],[", ",17],["path",1],[": [",17],["CodingKey",18],["], ",17],["userInfo",1],[": [",17],["CodingUserInfoKey",18],[" : ",17],["Any",12],["])",17]]},{"p":["JSON","init(parsing:)"],"f":[["init",10],["<",17],["UTF8",0],[">(",17],["parsing",1],[" ",17],["utf8",2],[": ",17],["UTF8",18],[") ",17],["throws",12],[" ",17],["where",12],[" ",17],["UTF8",18],[" : ",17],["Collection",18,319],[", ",17],["UTF8",18],[".",17],["Element",18],[" == ",17],["UInt8",18,369]],"s":[["init",10],["<",17],["UTF8",0],[">(",17],["parsing",1],[": ",17],["UTF8",18],[") ",17],["throws",12]],"c":[["UTF8",1,"Collection",319],["UTF8.Element",2,"UInt8",369]],"g":[["UTF8",0,0]],"d":"Attempts to parse a complete JSON message (either an ``Rule//Array`` or an \n``Rule//Object``) from UTF-8-encoded text."},{"p":["JSON","Base10","Inverse","subscript(_:as:)"],"f":[["static",12],[" ",17],["subscript",10],["<",17],["T",0],[">(",17],["x",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["T",18],[".Type) -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryFloatingPoint",18,306],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["subscript",10],["<",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[" _: ",17],["T",18],[".Type) -> ",17],["T",18]],"c":[["T",1,"BinaryFloatingPoint",306]],"g":[["T",0,0]],"d":"Returns the inverse of the given power of 10.\n-   Parameters:\n    - x: A positive exponent. If `x` is [`2`](), this subscript \n        will return [`1e-2`]().\n    - _: A ``BinaryFloatingPoint`` type."},{"p":["JSON","LintingError","namespace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18,308],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18]],"o":296},{"p":["JSON","PrimitiveError","namespace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18,308],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18]],"o":296},{"p":["JSON","RecursiveError","namespace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18,308],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18]],"o":296},{"p":["JSON","Rule","Null","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": [",17],["UInt8",18,369],["] { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": [",17],["UInt8",18],["]",17]],"d":"The ASCII string [`\"null\"`]().","o":277},{"p":["JSON","Rule","True","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": [",17],["UInt8",18,369],["] { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": [",17],["UInt8",18],["]",17]],"d":"The ASCII string [`\"true\"`]().","o":277},{"p":["JSON","Rule","False","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": [",17],["UInt8",18,369],["] { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": [",17],["UInt8",18],["]",17]],"d":"The ASCII string [`\"false\"`]().","o":277},{"p":["JSON","Base10","Exp"],"f":[["static",12],[" ",17],["let",12],[" ",17],["Exp",7],[": [",17],["UInt64",18,372],["]",17]],"s":[["static",12],[" ",17],["let",12],[" ",17],["Exp",7],[": [",17],["UInt64",18],["]",17]],"d":"Positive powers of 10, up to [`10_000_000_000_000_000_000`]()."},{"p":["JSON","codingPath"],"f":[["var",12],[" ",17],["codingPath",7],[": [",17],["CodingKey",18,382],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["codingPath",7],[": [",17],["CodingKey",18],["]",17]],"o":374},{"p":["JSON","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,308],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"d":"Returns this value serialized as a minified string.\n\nReparsing and reserializing this string is guaranteed to return the \nsame string.","o":328},{"p":["JSON","LintingError","unused"],"f":[["let",12],[" ",17],["unused",7],[": [",17],["String",18,308],[" : ",17],["JSON",18,0],["]",17]],"s":[["let",12],[" ",17],["unused",7],[": [",17],["String",18],[" : ",17],["JSON",18],["]",17]]},{"p":["JSON","LintingError","message"],"f":[["var",12],[" ",17],["message",7],[": ",17],["String",18,308],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["message",7],[": ",17],["String",18]],"o":301},{"p":["JSON","PrimitiveError","message"],"f":[["var",12],[" ",17],["message",7],[": ",17],["String",18,308],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["message",7],[": ",17],["String",18]],"o":301},{"p":["JSON","RecursiveError","next"],"f":[["var",12],[" ",17],["next",7],[": ",17],["Error",18,365],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["next",7],[": ",17],["Error",18],["?",17]],"o":294},{"p":["JSON","RecursiveError","context"],"f":[["var",12],[" ",17],["context",7],[": [",17],["String",18,308],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["context",7],[": [",17],["String",18],["]",17]],"o":295},{"p":["JSON","LintingDictionary","items"],"f":[["var",12],[" ",17],["items",7],[": [",17],["String",18,308],[" : ",17],["JSON",18,0],["]",17]],"s":[["var",12],[" ",17],["items",7],[": [",17],["String",18],[" : ",17],["JSON",18],["]",17]]},{"p":["JSON","IntegerOverflowError","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,308],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":328},{"p":["JSON","IntegerOverflowError","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["Any",12],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["Any",12],[".Type",17]],"a":{"s":{"d":"5.7","m":"use the more strongly-typed `overflows` property"}}},{"p":["JSON","IntegerOverflowError","number"],"f":[["let",12],[" ",17],["number",7],[": ",17],["JSON",18,0],[".",17],["Number",18,26]],"s":[["let",12],[" ",17],["number",7],[": ",17],["JSON",18],[".",17],["Number",18]]},{"p":["JSON","IntegerOverflowError","overflows"],"f":[["let",12],[" ",17],["overflows",7],[": ",17],["FixedWidthInteger",18,324],[".Type",17]],"s":[["let",12],[" ",17],["overflows",7],[": ",17],["FixedWidthInteger",18],[".Type",17]],"a":{"s":{"i":"5.7"}}},{"p":["JSON","InvalidUnicodeScalarError","value"],"f":[["let",12],[" ",17],["value",7],[": ",17],["UInt16",18,370]],"s":[["let",12],[" ",17],["value",7],[": ",17],["UInt16",18]]},{"p":["JSON","Number","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,308],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"d":"Returns a zero-padded string representation of this numeric literal. \n\nThis property always formats the number with full precision. \nIf ``units`` is [`100`]() and ``places`` is [`2`](), this will return \n[`\"1.00\"`]().\n\nThis string is guaranteed to be round-trippable; reparsing it \nwill always return the same value.\n\n>   Warning:\n>   This string is not necessarily identical to how this literal was \n    written in its original source file. In particular, if it was \n    written with an exponent, the exponent would have been normalized \n    into ``units`` and ``places``.","o":328},{"p":["JSON","Number","sign"],"f":[["var",12],[" ",17],["sign",7],[": ",17],["FloatingPointSign",18,325]],"s":[["var",12],[" ",17],["sign",7],[": ",17],["FloatingPointSign",18]],"d":"The sign of this numeric literal."},{"p":["JSON","Number","units"],"f":[["var",12],[" ",17],["units",7],[": ",17],["UInt64",18,372]],"s":[["var",12],[" ",17],["units",7],[": ",17],["UInt64",18]],"d":"The magnitude of this numeric literal, expressed in units of ``places``.\n\nIf ``units`` is [`123`](), and ``places`` is [`2`](), that would represent\na magnitude of [`1.23`]()."},{"p":["JSON","Number","places"],"f":[["var",12],[" ",17],["places",7],[": ",17],["UInt64",18,372],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["places",7],[": ",17],["UInt64",18]],"d":"The number of decimal places this numeric literal has.\n\n>   Note:\n>   This property has type ``UInt64`` to facilitate computations with \n    ``units``. It is backed by a ``UInt32`` and can therefore only store \n    32 bits of precision."},{"p":["JSON","Decoder","codingPath"],"f":[["let",12],[" ",17],["codingPath",7],[": [",17],["CodingKey",18,382],["]",17]],"s":[["let",12],[" ",17],["codingPath",7],[": [",17],["CodingKey",18],["]",17]],"o":339},{"p":["JSON","Decoder","userInfo"],"f":[["let",12],[" ",17],["userInfo",7],[": [",17],["CodingUserInfoKey",18,323],[" : ",17],["Any",12],["]",17]],"s":[["let",12],[" ",17],["userInfo",7],[": [",17],["CodingUserInfoKey",18],[" : ",17],["Any",12],["]",17]],"o":377},{"p":["JSON","userInfo"],"f":[["var",12],[" ",17],["userInfo",7],[": [",17],["CodingUserInfoKey",18,323],[" : ",17],["Any",12],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["userInfo",7],[": [",17],["CodingUserInfoKey",18],[" : ",17],["Any",12],["]",17]],"o":377},{"p":["JSON","RecursiveError","array(underlying:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["array",7],["(",17],["underlying",1],[": ",17],["Error",18,365],[") -> ",17],["JSON",18,0],[".",17],["RecursiveError",18,2]],"s":[["static",12],[" ",17],["func",12],[" ",17],["array",7],["(",17],["underlying",1],[": ",17],["Error",18],[") -> ",17],["JSON",18],[".",17],["RecursiveError",18]],"a":{"a":{"d":true,"m":"Specify an explicit index with ``array(underlying:at:)``."}}},{"p":["JSON","Rule","Whitespace","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18,369],[") -> ",17],["Void",18,364],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18],[") -> ",17],["Void",18],["?",17]],"g":[["Location",0,0]],"o":288},{"p":["JSON","Rule","NumberLiteral","PlusOrMinus","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18,369],[") -> ",17],["FloatingPointSign",18,325],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18],[") -> ",17],["FloatingPointSign",18],["?",17]],"g":[["Location",0,0]],"o":288},{"p":["JSON","Rule","NumberLiteral","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,286],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["JSON",18,0],[".",17],["Number",18,26],[" ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,299],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,369]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["JSON",18],[".",17],["Number",18]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",299],["Diagnostics.Source.Element",2,"UInt8",369]],"g":[["Location",0,0],["Diagnostics",0,1]],"o":281},{"p":["JSON","Rule","StringLiteral","EscapeSequence","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,286],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["String",18,308],[" ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,299],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,369]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["String",18]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",299],["Diagnostics.Source.Element",2,"UInt8",369]],"g":[["Location",0,0],["Diagnostics",0,1]],"o":281},{"p":["JSON","Rule","StringLiteral","EscapedCodeUnit","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18,369],[") -> ",17],["Unicode",18,379],[".",17],["Scalar",18,380],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18],[") -> ",17],["Unicode",18],[".",17],["Scalar",18],["?",17]],"g":[["Location",0,0]],"o":288},{"p":["JSON","Rule","StringLiteral","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,286],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["String",18,308],[" ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,299],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,369]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["String",18]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",299],["Diagnostics.Source.Element",2,"UInt8",369]],"g":[["Location",0,0],["Diagnostics",0,1]],"o":281},{"p":["JSON","Rule","StringLiteral","CodeUnit","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18,369],[") -> ",17],["Void",18,364],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["UInt8",18],[") -> ",17],["Void",18],["?",17]],"g":[["Location",0,0]],"o":288},{"p":["JSON","Rule","Root","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,286],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["JSON",18,0],[" ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,299],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,369]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["JSON",18]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",299],["Diagnostics.Source.Element",2,"UInt8",369]],"g":[["Location",0,0],["Diagnostics",0,1]],"o":281},{"p":["JSON","Rule","Array","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,286],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> [",17],["JSON",18,0],["] ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,299],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,369]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> [",17],["JSON",18],["]",17]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",299],["Diagnostics.Source.Element",2,"UInt8",369]],"g":[["Location",0,0],["Diagnostics",0,1]],"o":281},{"p":["JSON","Rule","Value","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,286],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["JSON",18,0],[" ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,299],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,369]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["JSON",18]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",299],["Diagnostics.Source.Element",2,"UInt8",369]],"g":[["Location",0,0],["Diagnostics",0,1]],"o":281},{"p":["JSON","Rule","Object","Item","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,286],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> (key",17],[": ",17],["String",18,308],[", value",17],[": ",17],["JSON",18,0],[") ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,299],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,369]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> (key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")",17]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",299],["Diagnostics.Source.Element",2,"UInt8",369]],"g":[["Location",0,0],["Diagnostics",0,1]],"o":281},{"p":["JSON","Rule","Object","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,286],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> [(key",17],[": ",17],["String",18,308],[", value",17],[": ",17],["JSON",18,0],[")] ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,299],[", ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" == ",17],["UInt8",18,369]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> [(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")]",17]],"c":[["Location",2,"Diagnostics.Source.Index"],["Diagnostics",1,"ParsingDiagnostics",299],["Diagnostics.Source.Element",2,"UInt8",369]],"g":[["Location",0,0],["Diagnostics",0,1]],"o":281},{"p":["JSON","escape(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["escape",7],["<",17],["S",0],[">(",17],["_",1],[" ",17],["string",2],[": ",17],["S",18],[") -> ",17],["String",18,308],[" ",17],["where",12],[" ",17],["S",18],[" : ",17],["StringProtocol",18,321]],"s":[["static",12],[" ",17],["func",12],[" ",17],["escape",7],["<",17],["S",0],[">(",17],["S",18],[") -> ",17],["String",18]],"c":[["S",1,"StringProtocol",321]],"g":[["S",0,0]],"d":"Escapes and formats a string as a JSON string literal, including the \nbeginning and ending quote characters.\n-   Parameters:\n    - string: A string to escape.\n-   Returns: A string literal, which includes the [`\"\"`]() delimiters.\n\nThis function escapes the following characters: `\"`, `\\`, `\\b`, `\\t`, `\\n`, \n`\\f`, and `\\r`. It does not escape forward slashes (`/`).\n\nJSON string literals may contain unicode characters, even after escaping. \nDo not assume the output of this function is ASCII.\n\n>   Important: This function should *not* be called on an input to the ``string(_:)`` case \n    constructor. The library performs string escaping lazily; calling this function \n    explicitly will double-escape the input. "},{"p":["JSON","number(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["number",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["unsigned",2],[": ",17],["T",18],[") -> ",17],["JSON",18,0],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["static",12],[" ",17],["func",12],[" ",17],["number",7],["<",17],["T",0],[">(",17],["T",18],[") -> ",17],["JSON",18]],"c":[["T",1,"UnsignedInteger",310]],"g":[["T",0,0]],"d":"Wraps an usigned integer as a numeric value.\n\nCalling this function is equivalent to the following:\n\n```swift \nlet json:JSON = .number(JSON.Number.init(signed))\n```"},{"p":["JSON","number(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["number",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["signed",2],[": ",17],["T",18],[") -> ",17],["JSON",18,0],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["SignedInteger",18,312]],"s":[["static",12],[" ",17],["func",12],[" ",17],["number",7],["<",17],["T",0],[">(",17],["T",18],[") -> ",17],["JSON",18]],"c":[["T",1,"SignedInteger",312]],"g":[["T",0,0]],"d":"Wraps a signed integer as a numeric value.\n\nCalling this function is equivalent to the following:\n\n```swift \nlet json:JSON = .number(JSON.Number.init(signed))\n```"},{"p":["JSON","unkeyedContainer()"],"f":[["func",12],[" ",17],["unkeyedContainer",7],["() ",17],["throws",12],[" -> ",17],["UnkeyedDecodingContainer",18,330]],"s":[["func",12],[" ",17],["unkeyedContainer",7],["() ",17],["throws",12],[" -> ",17],["UnkeyedDecodingContainer",18]],"o":375},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["String",18,308],["?.Type = String?.self) ",17],["throws",12],[" -> ",17],["String",18,308],["?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["String",18],["?.Type) ",17],["throws",12],[" -> ",17],["String",18],["?",17]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["String",18,308],[".Type = String.self) ",17],["throws",12],[" -> ",17],["String",18,308],["?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["String",18],[".Type) ",17],["throws",12],[" -> ",17],["String",18],["?",17]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["].Type = [JSON].self) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["].Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]?",17]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["]?.Type = [JSON]?.self) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["]?.Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]?",17]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Bool",18,314],["?.Type = Bool?.self) ",17],["throws",12],[" -> ",17],["Bool",18,314],["?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["Bool",18],["?.Type) ",17],["throws",12],[" -> ",17],["Bool",18],["?",17]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Bool",18,314],[".Type = Bool.self) ",17],["throws",12],[" -> ",17],["Bool",18,314],["?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["Bool",18],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18],["?",17]]},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["Binary",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Binary",18],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Binary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["pop",7],["<",17],["Binary",0],[", ",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Binary",18],["?.Type, (",17],["Binary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["Binary",1,"BinaryFloatingPoint",306]],"g":[["Binary",0,0],["T",1,0]]},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Integer",18],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],["?.Type, (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Integer",0,0],["T",1,0]]},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Integer",18],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],["?.Type, (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Integer",0,0],["T",1,0]]},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["Binary",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Binary",18],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Binary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["pop",7],["<",17],["Binary",0],[", ",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Binary",18],[".Type, (",17],["Binary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["Binary",1,"BinaryFloatingPoint",306]],"g":[["Binary",0,0],["T",1,0]]},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Integer",18],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type, (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Integer",0,0],["T",1,0]]},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Integer",18],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type, (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Integer",0,0],["T",1,0]]},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["String",18,308],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["String",18,308],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["String",18],["?.Type, (",17],["String",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["String",18,308],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["String",18,308],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["String",18],[".Type, (",17],["String",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["]?.Type, ",17],["_",1],[" ",17],["body",2],[": ([",17],["JSON",18,0],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["]?.Type, ([",17],["JSON",18],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]],"d":"Finds the variant value for the given key, attempts to unwrap it as either a variant \narray or an explicit ``JSON/.null`` value, and passes the array to the given closure for \nfurther decoding if it is not ``JSON/.null``. Records the key being decoded if the \nclosure throws an error, and propogates it up the call chain.\n\n-   Returns: The result of the closure, if the key exists and the closure succeeds, \n    or [`nil`]() if the key exists but its value is an explicit ``JSON/.null``.\n\nCalling this method is equivalent to the following:\n\n```swift \ntry self.pop(key)\n{\n    try $0.as([JSON]?.self).map(body)\n} ?? nil\n```\n\n>   Throws:\n    A ``JSON//RecursiveError.dictionary(underlying:in:)`` if an error \n    was thrown from within the given closure."},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["].Type, ",17],["_",1],[" ",17],["body",2],[": ([",17],["JSON",18,0],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["].Type, ([",17],["JSON",18],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]],"d":"Finds the variant value for the given key if it exists, attempts to unwrap it \nas a variant array, and passes the array to the given closure for further decoding. \nRecords the key being decoded if the closure throws an error, and propogates it up the \ncall chain.\n\n-   Returns: The result of the closure, if the key exists and the closure succeeds.\n\nCalling this method is equivalent to the following:\n\n```swift \ntry self.pop(key)\n{\n    try body(try $0.as([JSON].self))\n}\n```\n\n>   Throws:\n    A ``JSON//RecursiveError.dictionary(underlying:in:)`` if an error \n    was thrown from within the given closure.\n\n>   Note: \n    A key exists even if its associated value is an explicit ``JSON/.null``."},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Bool",18,314],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Bool",18,314],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Bool",18],["?.Type, (",17],["Bool",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Bool",18,314],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Bool",18,314],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Bool",18],[".Type, (",17],["Bool",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["Binary",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Binary",18],["?.Type = Binary?.self) ",17],["throws",12],[" -> ",17],["Binary",18],["? ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["pop",7],["<",17],["Binary",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Binary",18],["?.Type) ",17],["throws",12],[" -> ",17],["Binary",18],["?",17]],"c":[["Binary",1,"BinaryFloatingPoint",306]],"g":[["Binary",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Integer",18],["?.Type = Integer?.self) ",17],["throws",12],[" -> ",17],["Integer",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],["?.Type) ",17],["throws",12],[" -> ",17],["Integer",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Integer",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Integer",18],["?.Type = Integer?.self) ",17],["throws",12],[" -> ",17],["Integer",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],["?.Type) ",17],["throws",12],[" -> ",17],["Integer",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Integer",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["Binary",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Binary",18],[".Type = Binary.self) ",17],["throws",12],[" -> ",17],["Binary",18],["? ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["pop",7],["<",17],["Binary",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Binary",18],[".Type) ",17],["throws",12],[" -> ",17],["Binary",18],["?",17]],"c":[["Binary",1,"BinaryFloatingPoint",306]],"g":[["Binary",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Integer",18],[".Type = Integer.self) ",17],["throws",12],[" -> ",17],["Integer",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Integer",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["type",2],[": ",17],["Integer",18],[".Type = Integer.self) ",17],["throws",12],[" -> ",17],["Integer",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["pop",7],["<",17],["Integer",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Integer",0,0]]},{"p":["JSON","LintingDictionary","pop(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Void",18,364],[".Type) ",17],["throws",12],[" -> ",17],["Void",18,364],["?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["Void",18],[".Type) ",17],["throws",12],[" -> ",17],["Void",18],["?",17]]},{"p":["JSON","LintingDictionary","pop(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[") -> ",17],["JSON",18,0],["?",17]],"s":[["func",12],[" ",17],["pop",7],["(",17],["String",18],[") -> ",17],["JSON",18],["?",17]],"d":"Returns the variant value for the given key if it exists, or [`nil`]() \notherwise.\n\nUse the ``pop(_:_:)`` method to generate a more-detailed error trace\nif decoding fails later."},{"p":["JSON","LintingDictionary","pop(_:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["_",1],[" ",17],["body",2],[": (",17],["JSON",18,0],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["pop",7],["<",17],["T",0],[">(",17],["String",18],[", (",17],["JSON",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]],"d":"Finds the variant value for the given key if it exists, and passes \nit to the given closure for further decoding. Records the key being decoded if the \nclosure throws an error, and propogates it up the call chain.\n\n-   Returns: The result of the closure, if the key exists and the closure succeeds,\n    [`nil`]() if the key does not exist.\n\n>   Throws:\n    A ``JSON//RecursiveError.dictionary(underlying:in:)`` if an error \n    was thrown from within the closure.\n\n>   Note: \n    A key exists even if its associated value is an explicit ``JSON/.null``."},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["String",18,308],[".Type = String.self) ",17],["throws",12],[" -> ",17],["String",18,308]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["String",18],[".Type) ",17],["throws",12],[" -> ",17],["String",18]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["String",18,308],["?.Type = String?.self) ",17],["throws",12],[" -> ",17],["String",18,308],["?",17]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["String",18],["?.Type) ",17],["throws",12],[" -> ",17],["String",18],["?",17]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["].Type = [JSON].self) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]",17]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["].Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]",17]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["]?.Type = [JSON]?.self) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["]?.Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]?",17]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Bool",18,314],[".Type = Bool.self) ",17],["throws",12],[" -> ",17],["Bool",18,314]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["Bool",18],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Bool",18,314],["?.Type = Bool?.self) ",17],["throws",12],[" -> ",17],["Bool",18,314],["?",17]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["Bool",18],["?.Type) ",17],["throws",12],[" -> ",17],["Bool",18],["?",17]]},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["Binary",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Binary",18],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Binary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["remove",7],["<",17],["Binary",0],[", ",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Binary",18],[".Type, (",17],["Binary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"c":[["Binary",1,"BinaryFloatingPoint",306]],"g":[["Binary",0,0],["T",1,0]]},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type, (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Integer",0,0],["T",1,0]]},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type, (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Integer",0,0],["T",1,0]]},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["Binary",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Binary",18],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Binary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["remove",7],["<",17],["Binary",0],[", ",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Binary",18],["?.Type, (",17],["Binary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["Binary",1,"BinaryFloatingPoint",306]],"g":[["Binary",0,0],["T",1,0]]},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],["?.Type, (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Integer",0,0],["T",1,0]]},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],["?.Type, (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Integer",0,0],["T",1,0]]},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["String",18,308],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["String",18,308],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["String",18],[".Type, (",17],["String",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["].Type, ",17],["_",1],[" ",17],["body",2],[": ([",17],["JSON",18,0],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["].Type, ([",17],["JSON",18],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"Finds the variant value for the given key, attempts to unwrap it as a variant array, \nand passes the array to the given closure for further decoding. \nRecords the key being decoded if the closure throws an error, and propogates it up the \ncall chain.\n\n-   Returns: The result of the closure, if the key exists and the closure succeeds.\n\nCalling this method is equivalent to the following:\n\n```swift \ntry self.remove(key)\n{\n    try body(try $0.as([JSON].self))\n}\n```\n\n>   Throws:\n    A ``JSON//RecursiveError.dictionary(underlying:in:)`` if an error \n    was thrown from within the given closure.\n\n>   Note: \n    A key exists even if its associated value is an explicit ``JSON/.null``."},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Bool",18,314],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Bool",18,314],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Bool",18],[".Type, (",17],["Bool",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["String",18,308],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["String",18,308],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["String",18],["?.Type, (",17],["String",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["]?.Type, ",17],["_",1],[" ",17],["body",2],[": ([",17],["JSON",18,0],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": [",17],["JSON",18],["]?.Type, ([",17],["JSON",18],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]],"d":"Finds the variant value for the given key, attempts to unwrap it as either a variant \narray or an explicit ``JSON/.null`` value, and passes the array to the given closure for \nfurther decoding if it is not ``JSON/.null``.\nRecords the key being decoded if the closure throws an error, and propogates it up the \ncall chain.\n\n-   Returns: The result of the closure, if the key exists and the closure succeeds, \n    or [`nil`]() if the key exists but its value is an explicit ``JSON/.null``.\n\nCalling this method is equivalent to the following:\n\n```swift \ntry self.remove(key)\n{\n    try $0.as([JSON]?.self).map(body)\n}\n```\n\n>   Throws:\n    A ``JSON//RecursiveError.dictionary(underlying:in:)`` if an error \n    was thrown from within the given closure."},{"p":["JSON","LintingDictionary","remove(_:as:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Bool",18,314],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Bool",18,314],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Bool",18],["?.Type, (",17],["Bool",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["Binary",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Binary",18],[".Type = Binary.self) ",17],["throws",12],[" -> ",17],["Binary",18],[" ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["remove",7],["<",17],["Binary",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Binary",18],[".Type) ",17],["throws",12],[" -> ",17],["Binary",18]],"c":[["Binary",1,"BinaryFloatingPoint",306]],"g":[["Binary",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],[".Type = Integer.self) ",17],["throws",12],[" -> ",17],["Integer",18],[" ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Integer",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],[".Type = Integer.self) ",17],["throws",12],[" -> ",17],["Integer",18],[" ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Integer",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["Binary",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Binary",18],["?.Type = Binary?.self) ",17],["throws",12],[" -> ",17],["Binary",18],["? ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["remove",7],["<",17],["Binary",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Binary",18],["?.Type) ",17],["throws",12],[" -> ",17],["Binary",18],["?",17]],"c":[["Binary",1,"BinaryFloatingPoint",306]],"g":[["Binary",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],["?.Type = Integer?.self) ",17],["throws",12],[" -> ",17],["Integer",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],["?.Type) ",17],["throws",12],[" -> ",17],["Integer",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Integer",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],["?.Type = Integer?.self) ",17],["throws",12],[" -> ",17],["Integer",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["remove",7],["<",17],["Integer",0],[">(",17],["String",18],[", ",17],["as",1],[": ",17],["Integer",18],["?.Type) ",17],["throws",12],[" -> ",17],["Integer",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Integer",0,0]]},{"p":["JSON","LintingDictionary","remove(_:as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Void",18,364],[".Type) ",17],["throws",12]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[", ",17],["as",1],[": ",17],["Void",18],[".Type) ",17],["throws",12]]},{"p":["JSON","LintingDictionary","remove(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[") ",17],["throws",12],[" -> ",17],["JSON",18,0]],"s":[["func",12],[" ",17],["remove",7],["(",17],["String",18],[") ",17],["throws",12],[" -> ",17],["JSON",18]],"d":"Returns the variant value for the given key.\n\nUse the ``remove(_:_:)`` method to generate a more-detailed error trace\nif decoding fails later.\n\n>   Throws:\n    A ``JSON//PrimitiveError.undefined(key:in:)`` if the key does \n    not exist."},{"p":["JSON","LintingDictionary","remove(_:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["key",2],[": ",17],["String",18,308],[", ",17],["_",1],[" ",17],["body",2],[": (",17],["JSON",18,0],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["remove",7],["<",17],["T",0],[">(",17],["String",18],[", (",17],["JSON",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"Finds the variant value for the given key and passes \nit to the given closure for further decoding. Records the key being decoded if the \nclosure throws an error, and propogates it up the call chain.\n\n-   Returns: The result of the closure, if the key exists and the closure succeeds.\n\n>   Throws:\n    A ``JSON//PrimitiveError.undefined(key:in:)`` if the key does \n    not exist, or a ``JSON//RecursiveError.dictionary(underlying:in:)`` \n    if an error was thrown from within the given closure.\n\n>   Note: \n    A key exists even if its associated value is an explicit ``JSON/.null``."},{"p":["JSON","singleValueContainer()"],"f":[["func",12],[" ",17],["singleValueContainer",7],["() -> ",17],["SingleValueDecodingContainer",18,338]],"s":[["func",12],[" ",17],["singleValueContainer",7],["() -> ",17],["SingleValueDecodingContainer",18]],"o":376},{"p":["JSON","as(cases:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["CharacterCoded",0],[">(",17],["cases",1],[" ",17],["_",2],[": ",17],["CharacterCoded",18],[".Type) ",17],["throws",12],[" -> ",17],["CharacterCoded",18],[" ",17],["where",12],[" ",17],["CharacterCoded",18],[" : ",17],["RawRepresentable",18,311],[", ",17],["CharacterCoded",18],[".",17],["RawValue",18],[" == ",17],["Character",18,307]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["CharacterCoded",0],[">(",17],["cases",1],[": ",17],["CharacterCoded",18],[".Type) ",17],["throws",12],[" -> ",17],["CharacterCoded",18]],"c":[["CharacterCoded",1,"RawRepresentable",311],["CharacterCoded.RawValue",2,"Character",307]],"g":[["CharacterCoded",0,0]]},{"p":["JSON","as(cases:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["StringCoded",0],[">(",17],["cases",1],[" ",17],["_",2],[": ",17],["StringCoded",18],[".Type) ",17],["throws",12],[" -> ",17],["StringCoded",18],[" ",17],["where",12],[" ",17],["StringCoded",18],[" : ",17],["RawRepresentable",18,311],[", ",17],["StringCoded",18],[".",17],["RawValue",18],[" == ",17],["String",18,308]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["StringCoded",0],[">(",17],["cases",1],[": ",17],["StringCoded",18],[".Type) ",17],["throws",12],[" -> ",17],["StringCoded",18]],"c":[["StringCoded",1,"RawRepresentable",311],["StringCoded.RawValue",2,"String",308]],"g":[["StringCoded",0,0]]},{"p":["JSON","as(cases:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["UnsignedIntegerCoded",0],[">(",17],["cases",1],[" ",17],["_",2],[": ",17],["UnsignedIntegerCoded",18],[".Type) ",17],["throws",12],[" -> ",17],["UnsignedIntegerCoded",18],[" ",17],["where",12],[" ",17],["UnsignedIntegerCoded",18],[" : ",17],["RawRepresentable",18,311],[", ",17],["UnsignedIntegerCoded",18],[".",17],["RawValue",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["UnsignedIntegerCoded",18],[".",17],["RawValue",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["UnsignedIntegerCoded",0],[">(",17],["cases",1],[": ",17],["UnsignedIntegerCoded",18],[".Type) ",17],["throws",12],[" -> ",17],["UnsignedIntegerCoded",18]],"c":[["UnsignedIntegerCoded",1,"RawRepresentable",311],["UnsignedIntegerCoded.RawValue",1,"FixedWidthInteger",324],["UnsignedIntegerCoded.RawValue",1,"UnsignedInteger",310]],"g":[["UnsignedIntegerCoded",0,0]]},{"p":["JSON","as(cases:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["IntegerCoded",0],[">(",17],["cases",1],[" ",17],["_",2],[": ",17],["IntegerCoded",18],[".Type) ",17],["throws",12],[" -> ",17],["IntegerCoded",18],[" ",17],["where",12],[" ",17],["IntegerCoded",18],[" : ",17],["RawRepresentable",18,311],[", ",17],["IntegerCoded",18],[".",17],["RawValue",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["IntegerCoded",18],[".",17],["RawValue",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["IntegerCoded",0],[">(",17],["cases",1],[": ",17],["IntegerCoded",18],[".Type) ",17],["throws",12],[" -> ",17],["IntegerCoded",18]],"c":[["IntegerCoded",1,"RawRepresentable",311],["IntegerCoded.RawValue",1,"FixedWidthInteger",324],["IntegerCoded.RawValue",1,"SignedInteger",312]],"g":[["IntegerCoded",0,0]]},{"p":["JSON","as(cases:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["ScalarCoded",0],[">(",17],["cases",1],[" ",17],["_",2],[": ",17],["ScalarCoded",18],[".Type) ",17],["throws",12],[" -> ",17],["ScalarCoded",18],[" ",17],["where",12],[" ",17],["ScalarCoded",18],[" : ",17],["RawRepresentable",18,311],[", ",17],["ScalarCoded",18],[".",17],["RawValue",18],[" == ",17],["Unicode",18,379],[".",17],["Scalar",18,380]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["ScalarCoded",0],[">(",17],["cases",1],[": ",17],["ScalarCoded",18],[".Type) ",17],["throws",12],[" -> ",17],["ScalarCoded",18]],"c":[["ScalarCoded",1,"RawRepresentable",311],["ScalarCoded.RawValue",2,"Unicode.Scalar",380]],"g":[["ScalarCoded",0,0]]},{"p":["JSON","as(_:uniquingKeysWith:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["String",18,308],[" : ",17],["JSON",18,0],["].Type, ",17],["uniquingKeysWith",1],[" ",17],["combine",2],[": (",17],["JSON",18,0],[", ",17],["JSON",18,0],[") ",17],["throws",12],[" -> ",17],["JSON",18,0],[") ",17],["throws",12],[" -> [",17],["String",18,308],[" : ",17],["JSON",18,0],["]",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["String",18],[" : ",17],["JSON",18],["].Type, ",17],["uniquingKeysWith",1],[": (",17],["JSON",18],[", ",17],["JSON",18],[") ",17],["throws",12],[" -> ",17],["JSON",18],[") ",17],["throws",12],[" -> [",17],["String",18],[" : ",17],["JSON",18],["]",17]]},{"p":["JSON","as(_:uniquingKeysWith:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["String",18,308],[" : ",17],["JSON",18,0],["].Type, ",17],["uniquingKeysWith",1],[" ",17],["combine",2],[": (",17],["JSON",18,0],[", ",17],["JSON",18,0],[") ",17],["throws",12],[" -> ",17],["JSON",18,0],[") ",17],["rethrows",12],[" -> [",17],["String",18,308],[" : ",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["String",18],[" : ",17],["JSON",18],["].Type, ",17],["uniquingKeysWith",1],[": (",17],["JSON",18],[", ",17],["JSON",18],[") ",17],["throws",12],[" -> ",17],["JSON",18],[") ",17],["rethrows",12],[" -> [",17],["String",18],[" : ",17],["JSON",18],["]?",17]],"d":"Attempts to cast this variant to a ``Dictionary`` of [`Self`]().\n\n- Returns: A dictionary derived from the payload of this variant if it \n    matches ``object(_:)``, the fields of the payload of this variant if \n    it matches ``number(_:)?overload=s4JSONAAO6numberyA2B6NumberVcABmF``, \n    or [`nil`]() otherwise.\n\nAlthough it is uncommon in real-world JSON APIs, object keys can occur \nmore than once in the same object. To handle this, an API consumer might \nelect to keep only the last occurrence of a particular key.\n\n```swift \nlet dictionary:[String: JSON]? = json.as([String: JSON].self) { $1 }\n```\n\nKey duplication can interact with unicode normalization in unexpected \nways. Because JSON is defined in UTF-8, other JSON encoders may not align \nwith the behavior of ``String.==(_:_:)``, since that operator \ncompares grapheme clusters and not UTF-8 code units. \n\nFor example, if an object vends separate keys for [`\"\\u{E9}\"`]() ([`\"é\"`]()) and \n[`\"\\u{65}\\u{301}\"`]() (also [`\"é\"`](), perhaps, because the object is \nbeing used to bootstrap a unicode table), uniquing them by ``String`` \ncomparison will drop one of the values.\n\nCalling this method is equivalent to calling ``as(_:)``, and chaining its \noptional result through ``Dictionary.init(_:uniquingKeysWith:)``. See the \ndocumentation for ``as(_:)`` for more details about the behavior of this method.\n\n>   Complexity: \n    O(*n*), where *n* is the number of items in the object. \n    This method does *not* perform any recursive work.\n\n>   Warning: \n    When you convert an object to a dictionary representation, you lose the ordering \n    information for the object items. Reencoding it may produce a JSON \n    message that contains the same data, but does not compare equal under \n    a string- or byte-comparison."},{"p":["JSON","as(_:uniquingKeysWith:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["String",18,308],[" : ",17],["JSON",18,0],["]?.Type, ",17],["uniquingKeysWith",1],[" ",17],["combine",2],[": (",17],["JSON",18,0],[", ",17],["JSON",18,0],[") ",17],["throws",12],[" -> ",17],["JSON",18,0],[") ",17],["throws",12],[" -> [",17],["String",18,308],[" : ",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["String",18],[" : ",17],["JSON",18],["]?.Type, ",17],["uniquingKeysWith",1],[": (",17],["JSON",18],[", ",17],["JSON",18],[") ",17],["throws",12],[" -> ",17],["JSON",18],[") ",17],["throws",12],[" -> [",17],["String",18],[" : ",17],["JSON",18],["]?",17]]},{"p":["JSON","as(_:count:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["JSON",18,0],["].Type, ",17],["count",1],[": ",17],["Int",18,318],[") ",17],["throws",12],[" -> [",17],["JSON",18,0],["]",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["JSON",18],["].Type, ",17],["count",1],[": ",17],["Int",18],[") ",17],["throws",12],[" -> [",17],["JSON",18],["]",17]],"d":"Attempts to cast this variant to a fixed-length ``Array`` of [`Self`]().\n\n- Returns: The payload of this variant if it matches ``array(_:)``, and \n    contains the expected number of elements.\n\n>   Complexity: O(1). This method does *not* perform any elementwise work.\n\n>   Throws: A ``PrimitiveError.shaping(aggregate:count:)`` if an array was \n    successfully unwrapped, but it did not contain the expected number of \n    elements."},{"p":["JSON","as(_:count:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["JSON",18,0],["]?.Type, ",17],["count",1],[": ",17],["Int",18,318],[") ",17],["throws",12],[" -> [",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["JSON",18],["]?.Type, ",17],["count",1],[": ",17],["Int",18],[") ",17],["throws",12],[" -> [",17],["JSON",18],["]?",17]]},{"p":["JSON","as(_:where:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["JSON",18,0],["].Type, ",17],["where",1],[" ",17],["predicate",2],[": (",17],["Int",18,318],[") ",17],["throws",12],[" -> ",17],["Bool",18,314],[") ",17],["throws",12],[" -> [",17],["JSON",18,0],["]",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["JSON",18],["].Type, ",17],["where",1],[": (",17],["Int",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["throws",12],[" -> [",17],["JSON",18],["]",17]],"d":"Attempts to cast this variant to an ``Array`` of [`Self`](), whose length \nsatifies the given criteria.\n\n- Returns: The payload of this variant if it matches ``array(_:)``, and \n    contains the expected number of elements.\n\n>   Complexity: O(1). This method does *not* perform any elementwise work.\n\n>   Throws: A ``PrimitiveError.shaping(aggregate:count:)`` if an array was \n    successfully unwrapped, but it did not contain the expected number of \n    elements."},{"p":["JSON","as(_:where:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["JSON",18,0],["]?.Type, ",17],["where",1],[" ",17],["predicate",2],[": (",17],["Int",18,318],[") ",17],["throws",12],[" -> ",17],["Bool",18,314],[") ",17],["throws",12],[" -> [",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["JSON",18],["]?.Type, ",17],["where",1],[": (",17],["Int",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["throws",12],[" -> [",17],["JSON",18],["]?",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["String",18,308],[".Type) ",17],["throws",12],[" -> ",17],["String",18,308]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["String",18],[".Type) ",17],["throws",12],[" -> ",17],["String",18]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["Bool",18,314],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18,314]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["Bool",18],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["String",18,308],["?.Type) ",17],["throws",12],[" -> ",17],["String",18,308],["?",17]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["String",18],["?.Type) ",17],["throws",12],[" -> ",17],["String",18],["?",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["String",18,308],[".Type) -> ",17],["String",18,308],["?",17]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["String",18],[".Type) -> ",17],["String",18],["?",17]],"d":"Attempts to cast this variant to an instance of ``String``.\n\n- Returns: The payload of this variant if it matches ``string(_:)``, \n    [`nil`]() otherwise.\n>   Complexity: \n    O(1). This method does *not* perform any character-wise work."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["JSON",18,0],["].Type) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["JSON",18],["].Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["JSON",18,0],["].Type) -> [",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["JSON",18],["].Type) -> [",17],["JSON",18],["]?",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [",17],["JSON",18,0],["]?.Type) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([",17],["JSON",18],["]?.Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]?",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [(key",17],[": ",17],["String",18,308],[", value",17],[": ",17],["JSON",18,0],[")].Type) ",17],["throws",12],[" -> [(key",17],[": ",17],["String",18,308],[", value",17],[": ",17],["JSON",18,0],[")]",17]],"s":[["func",12],[" ",17],["`as`",7],["([(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")].Type) ",17],["throws",12],[" -> [(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")]",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [(key",17],[": ",17],["String",18,308],[", value",17],[": ",17],["JSON",18,0],[")].Type) -> [(key",17],[": ",17],["String",18,308],[", value",17],[": ",17],["JSON",18,0],[")]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")].Type) -> [(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")]?",17]],"d":"Attempts to cast this variant to an ``Array`` of key-value pairs.\n\n- Returns: The payload of this variant if it matches ``object(_:)``, \n    the fields of the payload of this variant if it matches \n    ``number(_:)?overload=s4JSONAAO6numberyA2B6NumberVcABmF``, or\n    [`nil`]() otherwise.\n\nThe order of the items reflects the order in which they appear in the \nsource object. For more details about the payload, see the documentation \nfor ``object(_:)``.\n\nTo facilitate interoperability with decimal types, this method will also \nreturn a pseudo-object containing the values of ``Number.units`` and ``Number.places``, \nif this variant is a ``number(_:)?overload=s4JSONAAO6numberyA2B6NumberVcABmF``. \nSpecifically, it contains integral ``Number`` values keyed by [`\"units\"`]() and \n[`\"places\"`]() and wrapped in containers of type [`Self`]().\n\nThis pseudo-object is intended for consumption by compiler-generated \n``Codable`` implementations. Decoding it incurs a small but non-zero \noverhead when compared with calling \n``Number.as(_:)?overload=s4JSONAAO6NumberV2asyx5units_x6placestSgxAF_xAGtms17FixedWidthIntegerRzSZRzlF`` \ndirectly.\n\n>   Complexity: \n    O(1). This method does *not* perform any elementwise work."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": [(key",17],[": ",17],["String",18,308],[", value",17],[": ",17],["JSON",18,0],[")]?.Type) ",17],["throws",12],[" -> [(key",17],[": ",17],["String",18,308],[", value",17],[": ",17],["JSON",18,0],[")]?",17]],"s":[["func",12],[" ",17],["`as`",7],["([(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")]?.Type) ",17],["throws",12],[" -> [(key",17],[": ",17],["String",18],[", value",17],[": ",17],["JSON",18],[")]?",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["Bool",18,314],["?.Type) ",17],["throws",12],[" -> ",17],["Bool",18,314],["?",17]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["Bool",18],["?.Type) ",17],["throws",12],[" -> ",17],["Bool",18],["?",17]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["Bool",18,314],[".Type) -> ",17],["Bool",18,314],["?",17]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["Bool",18],[".Type) -> ",17],["Bool",18],["?",17]],"d":"Attempts to cast this variant to an instance of ``Bool``.\n\n- Returns: The payload of this variant if it matches ``bool(_:)``, \n    [`nil`]() otherwise."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["Binary",0],[">(",17],["_",1],[": ",17],["Binary",18],["?.Type) ",17],["throws",12],[" -> ",17],["Binary",18],["? ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["Binary",0],[">(",17],["Binary",18],["?.Type) ",17],["throws",12],[" -> ",17],["Binary",18],["?",17]],"c":[["Binary",1,"BinaryFloatingPoint",306]],"g":[["Binary",0,0]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["Integer",0],[">(",17],["_",1],[": ",17],["Integer",18],["?.Type) ",17],["throws",12],[" -> ",17],["Integer",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["Integer",0],[">(",17],["Integer",18],["?.Type) ",17],["throws",12],[" -> ",17],["Integer",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Integer",0,0]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["Integer",0],[">(",17],["_",1],[": ",17],["Integer",18],["?.Type) ",17],["throws",12],[" -> ",17],["Integer",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["Integer",0],[">(",17],["Integer",18],["?.Type) ",17],["throws",12],[" -> ",17],["Integer",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Integer",0,0]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["Integer",0],[">(",17],["_",1],[": ",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["Integer",0],[">(",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Integer",0,0]],"d":"Attempts to cast this variant to an instance of an ``UnsignedInteger`` type.\n\n- Returns: An unsigned integer derived from the payload of this variant\n    if it matches ``number(_:)?overload=s4JSONAAO6numberyA2B6NumberVcABmF``, \n    and it can be represented exactly by [`T`](); [`nil`]() otherwise.\n\nThis method reports failure in two ways — it returns [`nil`]() on a type \nmismatch, and it [`throws`]() an ``IntegerOverflowError`` if this variant \nmatches ``number(_:)?overload=s4JSONAAO6numberyA2B6NumberVcABmF``, but it could \nnot be represented exactly by [`T`]().\n\n>   Note:\n    This type conversion will fail if ``Number.places`` is non-zero, even if \n    the fractional part is zero. For example, you can convert \n    [`5`]() to an integer, but not [`5.0`](). This matches the behavior \n    of ``ExpressibleByIntegerLiteral``."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["Integer",0],[">(",17],["_",1],[": ",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["Integer",0],[">(",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18],["?",17]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Integer",0,0]],"d":"Attempts to cast this variant to an instance of a ``SignedInteger`` type.\n\n- Returns: A signed integer derived from the payload of this variant\n    if it matches ``number(_:)?overload=s4JSONAAO6numberyA2B6NumberVcABmF``, \n    and it can be represented exactly by [`T`](); [`nil`]() otherwise.\n\nThis method reports failure in two ways — it returns [`nil`]() on a type \nmismatch, and it [`throws`]() an ``IntegerOverflowError`` if this variant \nmatches ``number(_:)?overload=s4JSONAAO6numberyA2B6NumberVcABmF``, but it \ncould not be represented exactly by [`T`]().\n\n>   Note:\n    This type conversion will fail if ``Number.places`` is non-zero, even if \n    the fractional part is zero. For example, you can convert \n    [`5`]() to an integer, but not [`5.0`](). This matches the behavior \n    of ``ExpressibleByIntegerLiteral``."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["Binary",0],[">(",17],["_",1],[": ",17],["Binary",18],[".Type) -> ",17],["Binary",18],["? ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["Binary",0],[">(",17],["Binary",18],[".Type) -> ",17],["Binary",18],["?",17]],"c":[["Binary",1,"BinaryFloatingPoint",306]],"g":[["Binary",0,0]],"d":"Attempts to cast this variant to an instance of a ``BinaryFloatingPoint`` type.\n\n- Returns: The closest value of [`T`]() to the payload of this \n    variant if it matches ``number(_:)?overload=s4JSONAAO6numberyA2B6NumberVcABmF``, \n    [`nil`]() otherwise.\n\nCalling this method is equivalent to matching the \n``number(_:)?overload=s4JSONAAO6numberyA2B6NumberVcABmF`` enumeration \ncase, and calling ``Number.as(_:)`` on its payload."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["Binary",0],[">(",17],["_",1],[": ",17],["Binary",18],[".Type) ",17],["throws",12],[" -> ",17],["Binary",18],[" ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["Binary",0],[">(",17],["Binary",18],[".Type) ",17],["throws",12],[" -> ",17],["Binary",18]],"c":[["Binary",1,"BinaryFloatingPoint",306]],"g":[["Binary",0,0]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["Integer",0],[">(",17],["_",1],[": ",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18],[" ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["Integer",0],[">(",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Integer",0,0]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["Integer",0],[">(",17],["_",1],[": ",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18],[" ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["Integer",0],[">(",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18]],"c":[["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Integer",0,0]]},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["Void",18,364],[".Type) -> ",17],["Void",18,364],["?",17]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["Void",18],[".Type) -> ",17],["Void",18],["?",17]],"d":"Attempts to cast this variant to an instance of ``Void``.\n\n- returns: [`()`]() if this variant is ``null``, [`nil`]() otherwise."},{"p":["JSON","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["(",17],["_",1],[": ",17],["Void",18,364],[".Type) ",17],["throws",12]],"s":[["func",12],[" ",17],["`as`",7],["(",17],["Void",18],[".Type) ",17],["throws",12]]},{"p":["JSON","is(_:)"],"f":[["func",12],[" ",17],["`is`",7],["(",17],["_",1],[": ",17],["Void",18,364],[".Type) -> ",17],["Bool",18,314]],"s":[["func",12],[" ",17],["`is`",7],["(",17],["Void",18],[".Type) -> ",17],["Bool",18]],"d":"Indicates if this variant is ``null``."},{"p":["JSON","case(of:)"],"f":[["func",12],[" ",17],["`case`",7],["<",17],["T",0],[">(",17],["of",1],[" ",17],["_",2],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["RawRepresentable",18,311],[", ",17],["T",18],[".",17],["RawValue",18],[" == ",17],["String",18,308]],"s":[["func",12],[" ",17],["`case`",7],["<",17],["T",0],[">(",17],["of",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18]],"a":{"a":{"d":true,"r":"as(cases:)"}},"c":[["T",1,"RawRepresentable",311],["T.RawValue",2,"String",308]],"g":[["T",0,0]]},{"p":["JSON","lint(discarding:_:)"],"f":[["func",12],[" ",17],["lint",7],["<",17],["Discards",0],[", ",17],["T",0],[">(",17],["discarding",1],[" ",17],["discards",2],[": ",17],["Discards",18],[", ",17],["_",1],[" ",17],["body",2],[": (",17],["inout",12],[" ",17],["JSON",18,0],[".",17],["LintingDictionary",18,23],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["Discards",18],[" : ",17],["Sequence",18,309],[", ",17],["Discards",18],[".",17],["Element",18],[" == ",17],["String",18,308]],"s":[["func",12],[" ",17],["lint",7],["<",17],["Discards",0],[", ",17],["T",0],[">(",17],["discarding",1],[": ",17],["Discards",18],[", (",17],["inout",12],[" ",17],["JSON",18],[".",17],["LintingDictionary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"c":[["Discards",1,"Sequence",309],["Discards.Element",2,"String",308]],"g":[["Discards",0,0],["T",1,0]]},{"p":["JSON","lint(whitelisting:_:)"],"f":[["func",12],[" ",17],["lint",7],["<",17],["Whitelist",0],[", ",17],["T",0],[">(",17],["whitelisting",1],[" ",17],["whitelist",2],[": ",17],["Whitelist",18],[", ",17],["_",1],[" ",17],["body",2],[": (",17],["inout",12],[" ",17],["JSON",18,0],[".",17],["LintingDictionary",18,23],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["Whitelist",18],[" : ",17],["Sequence",18,309],[", ",17],["Whitelist",18],[".",17],["Element",18],[" == ",17],["String",18,308]],"s":[["func",12],[" ",17],["lint",7],["<",17],["Whitelist",0],[", ",17],["T",0],[">(",17],["whitelisting",1],[": ",17],["Whitelist",18],[", (",17],["inout",12],[" ",17],["JSON",18],[".",17],["LintingDictionary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"c":[["Whitelist",1,"Sequence",309],["Whitelist.Element",2,"String",308]],"g":[["Whitelist",0,0],["T",1,0]]},{"p":["JSON","lint(_:)"],"f":[["func",12],[" ",17],["lint",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["inout",12],[" ",17],["JSON",18,0],[".",17],["LintingDictionary",18,23],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["lint",7],["<",17],["T",0],[">((",17],["inout",12],[" ",17],["JSON",18],[".",17],["LintingDictionary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"g":[["T",0,0]]},{"p":["JSON","apply(pattern:)"],"f":[["func",12],[" ",17],["apply",7],["<",17],["T",0],[">(",17],["pattern",1],[": (",17],["JSON",18,0],[") -> (",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["?) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["apply",7],["<",17],["T",0],[">(",17],["pattern",1],[": (",17],["JSON",18],[") -> (",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["?) ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"g":[["T",0,0]]},{"p":["JSON","Number","callAsFunction(as:)"],"f":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[" ",17],["_",2],[": (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[")?.Type) -> (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[")? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["T",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[": (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[")?.Type) -> (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[")?",17]],"a":{"a":{"d":true,"r":"JSON.Number.as(_:)"}},"c":[["T",1,"FixedWidthInteger",324],["T",1,"SignedInteger",312]],"g":[["T",0,0]]},{"p":["JSON","Number","callAsFunction(as:)"],"f":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[" ",17],["_",2],[": ",17],["T",18],["?.Type) -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["T",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[": ",17],["T",18],["?.Type) -> ",17],["T",18],["?",17]],"a":{"a":{"d":true,"r":"JSON.Number.as(_:)"}},"c":[["T",1,"FixedWidthInteger",324],["T",1,"UnsignedInteger",310]],"g":[["T",0,0]]},{"p":["JSON","Number","callAsFunction(as:)"],"f":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[" ",17],["_",2],[": ",17],["T",18],["?.Type) -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["T",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[": ",17],["T",18],["?.Type) -> ",17],["T",18],["?",17]],"a":{"a":{"d":true,"r":"JSON.Number.as(_:)"}},"c":[["T",1,"FixedWidthInteger",324],["T",1,"SignedInteger",312]],"g":[["T",0,0]]},{"p":["JSON","Number","callAsFunction(as:)"],"f":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[" ",17],["_",2],[": ",17],["T",18],[".Type) -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["callAsFunction",7],["<",17],["T",0],[">(",17],["as",1],[": ",17],["T",18],[".Type) -> ",17],["T",18]],"a":{"a":{"d":true,"r":"JSON.Number.as(_:)"}},"c":[["T",1,"BinaryFloatingPoint",306]],"g":[["T",0,0]]},{"p":["JSON","Number","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[").Type) -> (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[")? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["T",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">((units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[").Type) -> (units",17],[": ",17],["T",18],[", places",17],[": ",17],["T",18],[")?",17]],"c":[["T",1,"FixedWidthInteger",324],["T",1,"SignedInteger",312]],"g":[["T",0,0]],"d":"Converts this numeric literal to a fixed-point decimal, if it can be \nrepresented exactly.\n-   Parameters:\n    - _: A tuple type with fields conforming to ``SignedInteger`` \n        (and ``FixedWidthInteger``).\n-   Returns: \n    The value of this numeric literal as an instance of \n    [`(units:T, places:T)`](), or [`nil`]() if the value of either \n    field would overflow [`T`]().\n>   Note: \n    It’s possible for the `places` field to overflow before `units` does.\n    For example, this will happen for the literal [`\"0.0e-9999999999999999999\"`]()."},{"p":["JSON","Number","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["T",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],[".Type) -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",324],["T",1,"UnsignedInteger",310]],"g":[["T",0,0]],"d":"Converts this numeric literal to an unsigned integer, if it can be \nrepresented exactly.\n-   Parameters:\n    - _: A type conforming to ``UnsignedInteger`` (and ``FixedWidthInteger``).\n-   Returns: \n    The value of this numeric literal as an instance of [`T`](), or \n    [`nil`]() if it is negative, fractional, or would overflow [`T`]().\n>   Note:\n    This type conversion will fail if ``places`` is non-zero, even if \n    the fractional part is zero. For example, you can convert \n    [`5`]() to an integer, but not [`5.0`](). This matches the behavior \n    of ``ExpressibleByIntegerLiteral``."},{"p":["JSON","Number","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["T",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],[".Type) -> ",17],["T",18],["?",17]],"c":[["T",1,"FixedWidthInteger",324],["T",1,"SignedInteger",312]],"g":[["T",0,0]],"d":"Converts this numeric literal to a signed integer, if it can be \nrepresented exactly.\n-   Parameters:\n    - _: A type conforming to ``SignedInteger`` (and ``FixedWidthInteger``).\n-   Returns: \n    The value of this numeric literal as an instance of [`T`](), or \n    [`nil`]() if it is fractional or would overflow [`T`]().\n>   Note:\n    This type conversion will fail if ``places`` is non-zero, even if \n    the fractional part is zero. For example, you can convert \n    [`5`]() to an integer, but not [`5.0`](). This matches the behavior \n    of ``ExpressibleByIntegerLiteral``."},{"p":["JSON","Number","as(_:)"],"f":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["`as`",7],["<",17],["T",0],[">(",17],["T",18],[".Type) -> ",17],["T",18]],"c":[["T",1,"BinaryFloatingPoint",306]],"g":[["T",0,0]],"d":"Converts this numeric literal to a floating-point value, or its closest \nfloating-point representation.\n-   Parameters:\n    - _: A type conforming to ``BinaryFloatingPoint``.\n-   Returns: \n    The value of this numeric literal as an instance of \n    [`T`](), or the value of [`T`]() closest to it."},{"p":["JSON","unwrap(pattern:)"],"f":[["func",12],[" ",17],["unwrap",7],["<",17],["T",0],[">(",17],["pattern",1],[": (",17],["JSON",18,0],[") -> (",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["?) ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["unwrap",7],["<",17],["T",0],[">(",17],["pattern",1],[": (",17],["JSON",18],[") -> (",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],["?) ",17],["throws",12],[" -> ",17],["T",18]],"g":[["T",0,0]]},{"p":["JSON","Decoder","unkeyedContainer()"],"f":[["func",12],[" ",17],["unkeyedContainer",7],["() ",17],["throws",12],[" -> ",17],["UnkeyedDecodingContainer",18,330]],"s":[["func",12],[" ",17],["unkeyedContainer",7],["() ",17],["throws",12],[" -> ",17],["UnkeyedDecodingContainer",18]],"o":375},{"p":["JSON","Decoder","singleValueContainer()"],"f":[["func",12],[" ",17],["singleValueContainer",7],["() -> ",17],["SingleValueDecodingContainer",18,338]],"s":[["func",12],[" ",17],["singleValueContainer",7],["() -> ",17],["SingleValueDecodingContainer",18]],"o":376},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["String",18,308],[".Type) ",17],["throws",12],[" -> ",17],["String",18,308]],"s":[["func",12],[" ",17],["decode",7],["(",17],["String",18],[".Type) ",17],["throws",12],[" -> ",17],["String",18]],"o":340},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Bool",18,314],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18,314]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Bool",18],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18]],"o":341},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Double",18,315],[".Type) ",17],["throws",12],[" -> ",17],["Double",18,315]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Double",18],[".Type) ",17],["throws",12],[" -> ",17],["Double",18]],"o":342},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Float",18,317],[".Type) ",17],["throws",12],[" -> ",17],["Float",18,317]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Float",18],[".Type) ",17],["throws",12],[" -> ",17],["Float",18]],"o":343},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Int",18,318],[".Type) ",17],["throws",12],[" -> ",17],["Int",18,318]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Int",18],[".Type) ",17],["throws",12],[" -> ",17],["Int",18]],"o":344},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["UInt",18,320],[".Type) ",17],["throws",12],[" -> ",17],["UInt",18,320]],"s":[["func",12],[" ",17],["decode",7],["(",17],["UInt",18],[".Type) ",17],["throws",12],[" -> ",17],["UInt",18]],"o":345},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Int8",18,363],[".Type) ",17],["throws",12],[" -> ",17],["Int8",18,363]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Int8",18],[".Type) ",17],["throws",12],[" -> ",17],["Int8",18]],"o":347},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Int16",18,366],[".Type) ",17],["throws",12],[" -> ",17],["Int16",18,366]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Int16",18],[".Type) ",17],["throws",12],[" -> ",17],["Int16",18]],"o":348},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Int32",18,367],[".Type) ",17],["throws",12],[" -> ",17],["Int32",18,367]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Int32",18],[".Type) ",17],["throws",12],[" -> ",17],["Int32",18]],"o":349},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["Int64",18,368],[".Type) ",17],["throws",12],[" -> ",17],["Int64",18,368]],"s":[["func",12],[" ",17],["decode",7],["(",17],["Int64",18],[".Type) ",17],["throws",12],[" -> ",17],["Int64",18]],"o":350},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["UInt8",18,369],[".Type) ",17],["throws",12],[" -> ",17],["UInt8",18,369]],"s":[["func",12],[" ",17],["decode",7],["(",17],["UInt8",18],[".Type) ",17],["throws",12],[" -> ",17],["UInt8",18]],"o":351},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["UInt16",18,370],[".Type) ",17],["throws",12],[" -> ",17],["UInt16",18,370]],"s":[["func",12],[" ",17],["decode",7],["(",17],["UInt16",18],[".Type) ",17],["throws",12],[" -> ",17],["UInt16",18]],"o":352},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["UInt32",18,371],[".Type) ",17],["throws",12],[" -> ",17],["UInt32",18,371]],"s":[["func",12],[" ",17],["decode",7],["(",17],["UInt32",18],[".Type) ",17],["throws",12],[" -> ",17],["UInt32",18]],"o":353},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["(",17],["_",1],[": ",17],["UInt64",18,372],[".Type) ",17],["throws",12],[" -> ",17],["UInt64",18,372]],"s":[["func",12],[" ",17],["decode",7],["(",17],["UInt64",18],[".Type) ",17],["throws",12],[" -> ",17],["UInt64",18]],"o":354},{"p":["JSON","Decoder","decode(_:)"],"f":[["func",12],[" ",17],["decode",7],["<",17],["T",0],[">(",17],["_",1],[": ",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["Decodable",18,316]],"s":[["func",12],[" ",17],["decode",7],["<",17],["T",0],[">(",17],["T",18],[".Type) ",17],["throws",12],[" -> ",17],["T",18]],"c":[["T",1,"Decodable",316]],"g":[["T",0,0]],"o":346},{"p":["JSON","Decoder","container(keyedBy:)"],"f":[["func",12],[" ",17],["container",7],["<",17],["Key",0],[">(",17],["keyedBy",1],[" ",17],["_",2],[": ",17],["Key",18],[".Type) ",17],["throws",12],[" -> ",17],["KeyedDecodingContainer",18,326],["<",17],["Key",18],["> ",17],["where",12],[" ",17],["Key",18],[" : ",17],["CodingKey",18,382]],"s":[["func",12],[" ",17],["container",7],["<",17],["Key",0],[">(",17],["keyedBy",1],[": ",17],["Key",18],[".Type) ",17],["throws",12],[" -> ",17],["KeyedDecodingContainer",18],["<",17],["Key",18],[">",17]],"c":[["Key",1,"CodingKey",382]],"g":[["Key",0,0]],"o":378},{"p":["JSON","Decoder","decodeNil()"],"f":[["func",12],[" ",17],["decodeNil",7],["() -> ",17],["Bool",18,314]],"s":[["func",12],[" ",17],["decodeNil",7],["() -> ",17],["Bool",18]],"o":355},{"p":["JSON","container(keyedBy:)"],"f":[["func",12],[" ",17],["container",7],["<",17],["Key",0],[">(",17],["keyedBy",1],[" ",17],["_",2],[": ",17],["Key",18],[".Type) ",17],["throws",12],[" -> ",17],["KeyedDecodingContainer",18,326],["<",17],["Key",18],["> ",17],["where",12],[" ",17],["Key",18],[" : ",17],["CodingKey",18,382]],"s":[["func",12],[" ",17],["container",7],["<",17],["Key",0],[">(",17],["keyedBy",1],[": ",17],["Key",18],[".Type) ",17],["throws",12],[" -> ",17],["KeyedDecodingContainer",18],["<",17],["Key",18],[">",17]],"c":[["Key",1,"CodingKey",382]],"g":[["Key",0,0]],"o":378},{"p":["JSON","Rule","Whitespace","Construction"],"f":[["typealias",12],[" ",17],["Construction",7],[" = ",17],["Void",18,364]],"s":[["typealias",12],[" ",17],["Construction",7]],"g":[["Location",0,0]],"o":280},{"p":["JSON","Rule","Whitespace","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","DecimalDigit"],"f":[["typealias",12],[" ",17],["DecimalDigit",7],["<",17],["T",0],["> = ",17],["UnicodeDigit",18,290],["<",17],["Location",18],[", ",17],["UInt8",18,369],[", ",17],["T",18],[">.",17],["Decimal",18,292],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryInteger",18,322]],"s":[["typealias",12],[" ",17],["DecimalDigit",7]],"c":[["T",1,"BinaryInteger",322]],"g":[["Location",0,0],["T",0,1]],"d":"ASCII decimal digit terminals."},{"p":["JSON","Rule","NumberLiteral","PlusOrMinus","Construction"],"f":[["typealias",12],[" ",17],["Construction",7],[" = ",17],["FloatingPointSign",18,325]],"s":[["typealias",12],[" ",17],["Construction",7]],"g":[["Location",0,0]],"o":280},{"p":["JSON","Rule","NumberLiteral","PlusOrMinus","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","NumberLiteral","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","StringLiteral","EscapeSequence","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","StringLiteral","EscapedCodeUnit","Construction"],"f":[["typealias",12],[" ",17],["Construction",7],[" = ",17],["Unicode",18,379],[".",17],["Scalar",18,380]],"s":[["typealias",12],[" ",17],["Construction",7]],"g":[["Location",0,0]],"o":280},{"p":["JSON","Rule","StringLiteral","EscapedCodeUnit","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","StringLiteral","CodeUnit","Construction"],"f":[["typealias",12],[" ",17],["Construction",7],[" = ",17],["Void",18,364]],"s":[["typealias",12],[" ",17],["Construction",7]],"g":[["Location",0,0]],"o":280},{"p":["JSON","Rule","StringLiteral","CodeUnit","Escaped"],"f":[["typealias",12],[" ",17],["Escaped",7],[" = ",17],["JSON",18,0],[".",17],["Rule",18,3],["<",17],["Location",18],[">.",17],["StringLiteral",18,7],[".",17],["EscapedCodeUnit",18,9]],"s":[["typealias",12],[" ",17],["Escaped",7]],"a":{"a":{"d":true,"r":"JSON.Rule.EscapedCodeUnit"}},"g":[["Location",0,0]]},{"p":["JSON","Rule","StringLiteral","CodeUnit","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","StringLiteral","CodeUnit","Unescaped"],"f":[["typealias",12],[" ",17],["Unescaped",7],[" = ",17],["JSON",18,0],[".",17],["Rule",18,3],["<",17],["Location",18],[">.",17],["StringLiteral",18,7],[".",17],["CodeUnit",18,10]],"s":[["typealias",12],[" ",17],["Unescaped",7]],"a":{"a":{"d":true,"r":"JSON.Rule.CodeUnit"}},"g":[["Location",0,0]]},{"p":["JSON","Rule","StringLiteral","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","Null","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","Root","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","True","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","ASCII"],"f":[["typealias",12],[" ",17],["ASCII",7],[" = ",17],["UnicodeEncoding",18,298],["<",17],["Location",18],[", ",17],["UInt8",18,369],[">",17]],"s":[["typealias",12],[" ",17],["ASCII",7]],"g":[["Location",0,0]],"d":"ASCII terminals."},{"p":["JSON","Rule","Array","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","False","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","Value","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","Object","Item","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","Object","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Terminal",7]],"g":[["Location",0,0]],"o":282},{"p":["JSON","Rule","Padded"],"f":[["typealias",12],[" ",17],["Padded",7],["<",17],["Rule",0],["> = ",17],["Pattern",18,304],[".",17],["Pad",18,305],["<",17],["Rule",18],[", ",17],["JSON",18,0],[".",17],["Rule",18,3],["<",17],["Location",18],[">.",17],["Whitespace",18,4],["> ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Rule",18],[".",17],["Location",18],[", ",17],["Rule",18],[" : ",17],["ParsingRule",18,279],[", ",17],["Rule",18],[".",17],["Terminal",18],[" == ",17],["UInt8",18,369]],"s":[["typealias",12],[" ",17],["Padded",7]],"c":[["Location",2,"Rule.Location"],["Rule",1,"ParsingRule",279],["Rule.Terminal",2,"UInt8",369]],"g":[["Location",0,0],["Rule",0,1]],"d":"A helper rule, which accepts an input sequence that matches [`Rule`](), \nwith optional leading and trailing ``Whitespace`` characters."},{"p":["JSON","Rule","Keyword","Null"],"f":[["typealias",12],[" ",17],["Null",7],[" = ",17],["JSON",18,0],[".",17],["Rule",18,3],["<",17],["Location",18],[">.",17],["Null",18,11]],"s":[["typealias",12],[" ",17],["Null",7]],"a":{"a":{"d":true,"r":"JSON.Null"}},"g":[["Location",0,0]]},{"p":["JSON","Rule","Keyword","True"],"f":[["typealias",12],[" ",17],["True",7],[" = ",17],["JSON",18,0],[".",17],["Rule",18,3],["<",17],["Location",18],[">.",17],["True",18,13]],"s":[["typealias",12],[" ",17],["True",7]],"a":{"a":{"d":true,"r":"JSON.True"}},"g":[["Location",0,0]]},{"p":["JSON","Rule","Keyword","False"],"f":[["typealias",12],[" ",17],["False",7],[" = ",17],["JSON",18,0],[".",17],["Rule",18,3],["<",17],["Location",18],[">.",17],["False",18,15]],"s":[["typealias",12],[" ",17],["False",7]],"a":{"a":{"d":true,"r":"JSON.False"}},"g":[["Location",0,0]]},{"p":["JSON","Rule","HexDigit"],"f":[["typealias",12],[" ",17],["HexDigit",7],["<",17],["T",0],["> = ",17],["UnicodeDigit",18,290],["<",17],["Location",18],[", ",17],["UInt8",18,369],[", ",17],["T",18],[">.",17],["Hex",18,291],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["BinaryInteger",18,322]],"s":[["typealias",12],[" ",17],["HexDigit",7]],"c":[["T",1,"BinaryInteger",322]],"g":[["Location",0,0],["T",0,1]],"d":"ASCII hexadecimal digit terminals."},{"p":["Array","load(_:as:)"],"f":[["func",12],[" ",17],["load",7],["(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["String",18,308],["?.Type = String?.self) ",17],["throws",12],[" -> ",17],["String",18,308],["?",17]],"s":[["func",12],[" ",17],["load",7],["(",17],["Int",18],[", ",17],["as",1],[": ",17],["String",18],["?.Type) ",17],["throws",12],[" -> ",17],["String",18],["?",17]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0]]},{"p":["Array","load(_:as:)"],"f":[["func",12],[" ",17],["load",7],["(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["String",18,308],[".Type = String.self) ",17],["throws",12],[" -> ",17],["String",18,308]],"s":[["func",12],[" ",17],["load",7],["(",17],["Int",18],[", ",17],["as",1],[": ",17],["String",18],[".Type) ",17],["throws",12],[" -> ",17],["String",18]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0]]},{"p":["Array","load(_:as:)"],"f":[["func",12],[" ",17],["load",7],["(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["]?.Type = [JSON]?.self) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]?",17]],"s":[["func",12],[" ",17],["load",7],["(",17],["Int",18],[", ",17],["as",1],[": [",17],["JSON",18],["]?.Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]?",17]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0]]},{"p":["Array","load(_:as:)"],"f":[["func",12],[" ",17],["load",7],["(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["].Type = [JSON].self) ",17],["throws",12],[" -> [",17],["JSON",18,0],["]",17]],"s":[["func",12],[" ",17],["load",7],["(",17],["Int",18],[", ",17],["as",1],[": [",17],["JSON",18],["].Type) ",17],["throws",12],[" -> [",17],["JSON",18],["]",17]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0]]},{"p":["Array","load(_:as:)"],"f":[["func",12],[" ",17],["load",7],["(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Bool",18,314],["?.Type = Bool?.self) ",17],["throws",12],[" -> ",17],["Bool",18,314],["?",17]],"s":[["func",12],[" ",17],["load",7],["(",17],["Int",18],[", ",17],["as",1],[": ",17],["Bool",18],["?.Type) ",17],["throws",12],[" -> ",17],["Bool",18],["?",17]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0]]},{"p":["Array","load(_:as:)"],"f":[["func",12],[" ",17],["load",7],["(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Bool",18,314],[".Type = Bool.self) ",17],["throws",12],[" -> ",17],["Bool",18,314]],"s":[["func",12],[" ",17],["load",7],["(",17],["Int",18],[", ",17],["as",1],[": ",17],["Bool",18],[".Type) ",17],["throws",12],[" -> ",17],["Bool",18]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0]]},{"p":["Array","load(_:as:_:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["Binary",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Binary",18],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Binary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["load",7],["<",17],["Binary",0],[", ",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Binary",18],["?.Type, (",17],["Binary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0],["Binary",1,"BinaryFloatingPoint",306]],"g":[["Element",0,0],["Binary",0,1],["T",1,1]]},{"p":["Array","load(_:as:_:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Integer",18],["?.Type, (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0],["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Element",0,0],["Integer",0,1],["T",1,1]]},{"p":["Array","load(_:as:_:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Integer",18],["?.Type, (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0],["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Element",0,0],["Integer",0,1],["T",1,1]]},{"p":["Array","load(_:as:_:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["Binary",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Binary",18],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Binary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["load",7],["<",17],["Binary",0],[", ",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Binary",18],[".Type, (",17],["Binary",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0],["Binary",1,"BinaryFloatingPoint",306]],"g":[["Element",0,0],["Binary",0,1],["T",1,1]]},{"p":["Array","load(_:as:_:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type, (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0],["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Element",0,0],["Integer",0,1],["T",1,1]]},{"p":["Array","load(_:as:_:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[", ",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type, (",17],["Integer",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0],["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Element",0,0],["Integer",0,1],["T",1,1]]},{"p":["Array","load(_:as:_:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["String",18,308],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["String",18,308],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["String",18],["?.Type, (",17],["String",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0],["T",0,1]]},{"p":["Array","load(_:as:_:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["]?.Type = [JSON]?.self, ",17],["_",1],[" ",17],["body",2],[": ([",17],["JSON",18,0],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[": [",17],["JSON",18],["]?.Type, ([",17],["JSON",18],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0],["T",0,1]],"d":"\n>   Throws:\n    A ``JSON//RecursiveError.array(underlying:at:)`` if an error \n    was thrown from within the given closure."},{"p":["Array","load(_:as:_:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Bool",18,314],["?.Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Bool",18,314],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"s":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Bool",18],["?.Type, (",17],["Bool",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18],["?",17]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0],["T",0,1]]},{"p":["Array","load(_:as:_:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["String",18,308],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["String",18,308],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["String",18],[".Type, (",17],["String",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0],["T",0,1]]},{"p":["Array","load(_:as:_:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": [",17],["JSON",18,0],["].Type = [JSON].self, ",17],["_",1],[" ",17],["body",2],[": ([",17],["JSON",18,0],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[": [",17],["JSON",18],["].Type, ([",17],["JSON",18],["]) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0],["T",0,1]],"d":"\n>   Throws:\n    A ``JSON//RecursiveError.array(underlying:at:)`` if an error \n    was thrown from within the given closure."},{"p":["Array","load(_:as:_:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Bool",18,314],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["Bool",18,314],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Bool",18],[".Type, (",17],["Bool",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0],["T",0,1]]},{"p":["Array","load(_:as:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["Binary",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Binary",18],["?.Type = Binary?.self) ",17],["throws",12],[" -> ",17],["Binary",18],["? ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["load",7],["<",17],["Binary",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Binary",18],["?.Type) ",17],["throws",12],[" -> ",17],["Binary",18],["?",17]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0],["Binary",1,"BinaryFloatingPoint",306]],"g":[["Element",0,0],["Binary",0,1]]},{"p":["Array","load(_:as:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],["?.Type = Integer?.self) ",17],["throws",12],[" -> ",17],["Integer",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Integer",18],["?.Type) ",17],["throws",12],[" -> ",17],["Integer",18],["?",17]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0],["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Element",0,0],["Integer",0,1]]},{"p":["Array","load(_:as:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],["?.Type = Integer?.self) ",17],["throws",12],[" -> ",17],["Integer",18],["? ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Integer",18],["?.Type) ",17],["throws",12],[" -> ",17],["Integer",18],["?",17]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0],["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Element",0,0],["Integer",0,1]]},{"p":["Array","load(_:as:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["Binary",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Binary",18],[".Type = Binary.self) ",17],["throws",12],[" -> ",17],["Binary",18],[" ",17],["where",12],[" ",17],["Binary",18],[" : ",17],["BinaryFloatingPoint",18,306]],"s":[["func",12],[" ",17],["load",7],["<",17],["Binary",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Binary",18],[".Type) ",17],["throws",12],[" -> ",17],["Binary",18]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0],["Binary",1,"BinaryFloatingPoint",306]],"g":[["Element",0,0],["Binary",0,1]]},{"p":["Array","load(_:as:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],[".Type = Integer.self) ",17],["throws",12],[" -> ",17],["Integer",18],[" ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["UnsignedInteger",18,310]],"s":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0],["Integer",1,"FixedWidthInteger",324],["Integer",1,"UnsignedInteger",310]],"g":[["Element",0,0],["Integer",0,1]]},{"p":["Array","load(_:as:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Integer",18],[".Type = Integer.self) ",17],["throws",12],[" -> ",17],["Integer",18],[" ",17],["where",12],[" ",17],["Integer",18],[" : ",17],["FixedWidthInteger",18,324],[", ",17],["Integer",18],[" : ",17],["SignedInteger",18,312]],"s":[["func",12],[" ",17],["load",7],["<",17],["Integer",0],[">(",17],["Int",18],[", ",17],["as",1],[": ",17],["Integer",18],[".Type) ",17],["throws",12],[" -> ",17],["Integer",18]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0],["Integer",1,"FixedWidthInteger",324],["Integer",1,"SignedInteger",312]],"g":[["Element",0,0],["Integer",0,1]]},{"p":["Array","load(_:as:)"],"f":[["func",12],[" ",17],["load",7],["(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Void",18,364],[".Type) ",17],["throws",12]],"s":[["func",12],[" ",17],["load",7],["(",17],["Int",18],[", ",17],["as",1],[": ",17],["Void",18],[".Type) ",17],["throws",12]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0]]},{"p":["Array","load(_:_:)"],"f":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["index",2],[": ",17],["Int",18,318],[", ",17],["_",1],[" ",17],["body",2],[": (",17],["JSON",18,0],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["load",7],["<",17],["T",0],[">(",17],["Int",18],[", (",17],["JSON",18],[") ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["throws",12],[" -> ",17],["T",18]],"e":[["Element",2,"JSON",0]],"c":[["Element",2,"JSON",0]],"g":[["Element",0,0],["T",0,1]],"d":"Executes the given closure on the array element at the given index for further decoding.\nRecords the index of the element being decoded if the closure throws an error, and \npropogates it up the call chain.\n\n-   Parameters:\n    -   index: An index into this array. This index must be within the array’s bounds.\n\n-   Returns: The result of the closure, if it succeeds.\n\n>   Throws:\n    A ``JSON//RecursiveError.array(underlying:at:)`` \n    if an error was thrown from within the given closure."}],"edges":{"conformer":[0,327,[],0,331,[],0,333,[],0,336,[],0,356,[],0,358,[],0,360,[],0,373,[],0,381,[],1,293,[],1,300,[],1,327,[],1,365,[],1,381,[],2,293,[],2,327,[],2,365,[],2,381,[],4,279,[],4,287,[],5,279,[],6,279,[],6,287,[],7,279,[],8,279,[],9,279,[],9,287,[],10,279,[],10,287,[],11,276,[],11,279,[],12,279,[],13,276,[],13,279,[],14,279,[],15,276,[],15,279,[],16,279,[],17,279,[],18,279,[],22,293,[],22,300,[],22,327,[],22,365,[],22,381,[],23,381,[],24,327,[],24,365,[],24,381,[],25,365,[],25,381,[],26,327,[],26,381,[],27,338,[],27,373,[]],"feature":[278,11,278,13,278,15,283,4,283,5,283,6,283,7,283,8,283,9,283,10,283,11,283,12,283,13,283,14,283,15,283,16,283,17,283,18,284,4,284,5,284,6,284,7,284,8,284,9,284,10,284,11,284,12,284,13,284,14,284,15,284,16,284,17,284,18,285,4,285,5,285,6,285,7,285,8,285,9,285,10,285,11,285,12,285,13,285,14,285,15,285,16,285,17,285,18,289,4,289,6,289,9,289,10,297,1,297,2,297,22,302,1,302,22,303,1,303,22,329,0,329,1,329,2,329,22,329,24,329,26,335,0,362,0],"member":[1,0,2,0,3,0,4,3,5,3,6,5,7,3,8,7,9,7,10,7,11,3,12,3,13,3,14,3,15,3,16,3,17,3,18,17,19,3,20,0,21,20,22,0,23,0,24,0,25,0,26,0,27,0,28,1,29,1,30,1,31,2,32,2,33,0,34,0,35,0,36,0,37,0,38,0,39,22,40,0,41,0,42,0,43,23,44,0,45,24,46,25,47,26,48,26,49,26,50,27,51,0,52,21,53,22,54,1,55,2,56,11,57,13,58,15,59,20,60,0,61,0,62,22,63,22,64,1,65,2,66,2,67,23,68,24,69,24,70,24,71,24,72,25,73,26,74,26,75,26,76,26,77,27,78,27,79,0,80,2,81,4,82,6,83,5,84,8,85,9,86,7,87,10,88,12,89,14,90,16,91,18,92,17,93,0,94,0,95,0,96,0,97,23,98,23,99,23,100,23,101,23,102,23,103,23,104,23,105,23,106,23,107,23,108,23,109,23,110,23,111,23,112,23,113,23,114,23,115,23,116,23,117,23,118,23,119,23,120,23,121,23,122,23,123,23,124,23,125,23,126,23,127,23,128,23,129,23,130,23,131,23,132,23,133,23,134,23,135,23,136,23,137,23,138,23,139,23,140,23,141,23,142,23,143,23,144,23,145,23,146,23,147,23,148,23,149,23,150,23,151,0,152,0,153,0,154,0,155,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,192,0,193,26,194,26,195,26,196,26,197,26,198,26,199,26,200,26,201,0,202,27,203,27,204,27,205,27,206,27,207,27,208,27,209,27,210,27,211,27,212,27,213,27,214,27,215,27,216,27,217,27,218,27,219,27,220,27,221,0,222,4,223,4,224,3,225,6,226,6,227,5,228,8,229,9,230,9,231,10,232,10,233,10,234,10,235,7,236,11,237,12,238,13,239,3,240,14,241,15,242,16,243,18,244,17,245,3,246,19,247,19,248,19,249,3,250,313,251,313,252,313,253,313,254,313,255,313,256,313,257,313,258,313,259,313,260,313,261,313,262,313,263,313,264,313,265,313,266,313,267,313,268,313,269,313,270,313,271,313,272,313,273,313,274,313,275,313]},"sourcemap":[{"uri":"file:///workspace/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/ArrayExtensions.spf.swift","symbols":[15,9,275,50,9,266,79,9,263,86,9,274,95,9,267,101,9,264,111,9,265,117,9,262,127,9,255,133,9,254,143,9,251,149,9,250,159,9,253,165,9,252,175,9,261,182,9,258,190,9,273,197,9,270,208,9,260,215,9,257,223,9,272,230,9,269,241,9,259,248,9,256,256,9,271,263,9,268]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/Error.swift","symbols":[13,11,25,16,12,72,18,8,46,28,11,24,31,12,70,46,12,69,50,12,71,53,8,45,61,12,68,72,11,22,75,12,53,81,12,63,87,12,62,89,8,39,96,9,1,99,12,54,104,13,28,105,13,29,106,13,30,109,12,64,125,9,2,128,12,55,133,13,32,134,13,31,138,13,80,144,12,66,155,12,65]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/JSON.Base10.swift","symbols":[7,9,20,11,12,59,44,13,21,52,12,52]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/JSON.Decoder.spf.swift","symbols":[37,8,60,42,8,79,48,9,151,53,9,96,58,9,221,71,11,27,75,12,77,77,12,78,80,8,50,129,9,220,135,9,218,141,9,205,147,9,208,153,9,213,159,9,212,165,9,211,171,9,210,177,9,209,183,9,217,189,9,216,195,9,215,201,9,214,207,9,207,213,9,206,219,9,204,227,9,203,232,9,202,239,9,219]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/JSON.LintingDictionary.spf.swift","symbols":[11,9,191,16,9,189,30,9,190,50,11,23,53,12,67,56,8,43,67,13,122,80,13,149,105,13,123,136,13,150,175,13,112,200,13,111,227,13,137,253,13,140,260,13,148,265,13,121,275,9,114,281,9,113,288,9,138,294,9,141,304,9,110,310,9,109,317,9,136,323,9,139,332,9,102,338,9,101,345,9,128,351,9,129,360,9,98,366,9,97,373,9,124,379,9,125,388,9,99,394,9,100,401,9,126,407,9,127,417,9,108,424,9,105,432,9,132,439,9,135,448,9,120,455,9,117,463,9,144,470,9,147,481,9,107,488,9,104,496,9,131,503,9,134,512,9,119,519,9,116,527,9,143,534,9,146,545,9,106,552,9,103,560,9,130,567,9,133,576,9,118,583,9,115,591,9,142,598,9,145]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/JSON.Number.swift","symbols":[12,11,26,20,12,74,31,12,76,40,12,75,47,8,47,55,8,49,60,8,48,79,12,73,113,13,198,141,13,199,170,13,197,206,13,200,234,13,194,240,13,195,246,13,193,253,13,196]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/JSON.Rule.swift","symbols":[7,4,51,52,9,3,56,18,239,59,18,249,63,18,224,72,13,12,75,22,237,78,17,88,99,9,11,102,18,236,105,12,56,112,9,13,115,18,238,118,12,57,125,9,15,128,18,241,131,12,58,139,9,19,143,18,246,146,18,247,149,18,248,157,9,16,160,18,242,162,13,90,216,9,5,220,13,6,223,22,226,225,22,225,227,17,82,238,18,227,240,13,83,321,9,7,325,13,10,329,22,234,332,22,232,335,22,233,337,22,231,339,17,87,355,13,9,358,22,230,360,22,229,362,17,85,383,13,8,386,22,228,388,17,84,429,18,235,431,13,86,474,9,4,477,18,223,479,18,222,481,13,81,498,14,245,508,9,14,511,18,240,513,13,89,543,9,17,552,13,18,555,22,243,557,17,91,569,18,244,571,13,92]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/JSON.swift","symbols":[22,5,0,42,9,93,70,9,34,72,9,33,74,9,36,80,9,38,82,9,35,103,9,37,113,9,95,125,9,94,138,8,61,162,4,44,170,4,40,178,4,41,186,4,42]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-json@0.3.0/.build/checkouts/swift-json/Sources/JSON/Primitives.spf.swift","symbols":[5,9,188,12,9,153,25,9,152,41,9,156,57,9,155,72,9,154,89,9,187,101,9,185,114,9,175,139,9,180,173,9,179,198,9,181,214,9,167,229,9,169,264,9,172,317,9,158,331,9,201,343,9,186,359,9,160,383,9,162,397,9,157,410,9,192,427,9,161,444,9,163,462,9,159,475,9,165,480,9,174,489,9,164,494,9,166,503,9,168,508,9,170,517,9,171,522,9,173,531,9,184,537,9,178,547,9,183,553,9,177,563,9,182,569,9,176]}]}