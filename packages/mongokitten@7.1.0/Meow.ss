{"culture":"Meow","dependencies":[{"package":"bson","modules":["BSON"]},{"package":"mongokitten","modules":["MongoClient","MongoCore","MongoKitten","MongoKittenCore","_MongoKittenCrypto"]},{"package":"niodns","modules":["DNSClient"]},{"package":"swift-log","modules":["Logging"]},{"package":"swift-metrics","modules":["CoreMetrics","Metrics"]},{"package":"swift-nio","modules":["NIO","NIOConcurrencyHelpers","NIOCore","NIOEmbedded","NIOFoundationCompat","NIOPosix","NIOTLS","_NIODataStructures"]},{"package":"swift-nio-ssl","modules":["NIOSSL"]}],"extensions":[],"partitions":[{"namespace":"Meow","communities":[{"community":"protocol","startIndex":0,"endIndex":9},{"community":"associatedtype","startIndex":9,"endIndex":16},{"community":"enum","startIndex":16,"endIndex":18},{"community":"struct","startIndex":18,"endIndex":45},{"community":"class","startIndex":45,"endIndex":48},{"community":"enum.case","startIndex":48,"endIndex":57},{"community":"init","startIndex":57,"endIndex":90},{"community":"subscript","startIndex":90,"endIndex":95},{"community":"type.property","startIndex":95,"endIndex":101},{"community":"property","startIndex":101,"endIndex":137},{"community":"type.method","startIndex":137,"endIndex":147},{"community":"method","startIndex":147,"endIndex":215},{"community":"type.op","startIndex":215,"endIndex":216},{"community":"func.op","startIndex":216,"endIndex":240},{"community":"typealias","startIndex":240,"endIndex":248}]},{"namespace":"MongoKitten","communities":[{"community":"method","startIndex":248,"endIndex":249}]},{"namespace":"Swift","communities":[{"community":"method","startIndex":249,"endIndex":253},{"community":"typealias","startIndex":253,"endIndex":255}]}],"identifiers":["s4Meow0A14AggregateStageP","s4Meow10ResolvableP","s4Meow12MutableModelP","s4Meow13ReadableModelP","s4Meow15ModelProjectionP","s4Meow16KeyPathQueryableP","s4Meow21KeyPathQueryableModelP","s4Meow22QuerySubjectComparatorP","s4Meow9BaseModelP","s4Meow0A14AggregateStageP4BaseQa","s4Meow0A14AggregateStageP6ResultQa","s4Meow10ResolvableP15IfPresentResultQa","s4Meow10ResolvableP6ResultQa","s4Meow15ModelProjectionP4BaseQa","s4Meow22QuerySubjectComparatorP5ValueQa","s4Meow9BaseModelP10IdentifierQa","s4Meow0A10ModelErrorO","s4Meow0A4HookO","s4Meow0A10CollectionV","s4Meow0A15OperationResultV","s4Meow0A15OperationResultV13NotSuccessfulV","s4Meow0A23CheckedAggregateBuilderV","s4Meow0A25UncheckedAggregateBuilderV","s4Meow0A9AggregateV","s4Meow12ModelGrouperV","s4Meow12ModelUpdaterV","s4Meow12PartialModelV","s4Meow12QueryMatcherV","s4Meow12QuerySubjectV","s4Meow13PartialUpdateV","s4Meow14ModelProjectorV","s4Meow14QueryableFieldV","s4Meow14ReferenceFieldV","s4Meow16ModelUpdateQueryV","s4Meow22QuerySubjectComparisonV","s4Meow26QuerySubjectSizeComparatorV","s4Meow4SortV","s4Meow5FieldV","s4Meow5GroupV","s4Meow5LimitV","s4Meow5MatchV","s4Meow6LookupV","s4Meow6UnwindV","s4Meow7ProjectV","s4Meow9ReferenceV","s4Meow0A19TransactionDatabaseC","s4Meow0A8DatabaseC","s4Meow8MigratorC","s4Meow0A10ModelErrorO09referenceC0yACyxGyp_xmtcAEmAA04BaseB0RzlF","s4Meow0A10ModelErrorO12cannotUpdateyACyxG10IdentifierQzcAEmAA04BaseB0RzlF","s4Meow0A10ModelErrorO12fileTooLargeyACyxGSi_SitcAEmAA04BaseB0RzlF","s4Meow0A10ModelErrorO12invalidValueyACyxGSS_SStcAEmAA04BaseB0RzlF","s4Meow0A10ModelErrorO14cannotValidateyACyxGSS_tcAEmAA04BaseB0RzlF","s4Meow0A10ModelErrorO16deletingMultipleyACyxGSay4BSON8ObjectIdV_s0C0_ptG_tcAEmAA04BaseB0RzlF","s4Meow0A10ModelErrorO17undeletableObjectyACyxGSS_tcAEmAA04BaseB0RzlF","s4Meow0A10ModelErrorO19brokenFileReferenceyACyxG4BSON8ObjectIdVcAEmAA04BaseB0RzlF","s4Meow0A10ModelErrorO21missingOrInvalidValueyACyxGSS_ypXpypSgtcAEmAA04BaseB0RzlF","s4Meow0A10CollectionV8database5namedACyxGAA0A8DatabaseC_SStcfc","s4Meow0A8DatabaseCyAC11MongoKitten0cB0Ccfc","s4Meow12PartialModelV8documentACyxG4BSON8DocumentV_tcfc","s4Meow14ReferenceFieldV12wrappedValueACyxG10IdentifierQz_tcfc","s4Meow14ReferenceFieldV4fromACyxGs7Decoder_p_tKcfc","s4Meow4SortV_2by9directionACyxGxm_s7KeyPathCyxAA14QueryableFieldVyqd__GG15MongoKittenCore7SortingV5OrderOtcAA0efG0RzSLRd__lufc","s4Meow4SortVyACy4BSON8DocumentVG15MongoKittenCore7SortingVcAFRszrlufc","s4Meow5FieldV12wrappedValueACyxGx_tcfc","s4Meow5FieldV4fromACyxGs7Decoder_p_tKcfc","s4Meow5GroupV_2as2by05buildB0ACyxq_Gxm_q_m4BSON9Primitive_pyAA12ModelGrouperVyxq_GzKXEtKcAA16KeyPathQueryableRzAaMR_rlufc","s4Meow5LimitVyACyxGSicfc","s4Meow5MatchV_8matchingACyxGxm_4BSON8DocumentVAA12QueryMatcherVyxGKXEtKcAA16KeyPathQueryableRzrlufc","s4Meow5MatchV_8matchingACyxGxm_qd__AA12QueryMatcherVyxGKXEtKcAA16KeyPathQueryableRz15MongoKittenCore0ijD0Rd__lufc","s4Meow5MatchVyACy4BSON8DocumentVGAFcAFRszrlufc","s4Meow5MatchVyACy4BSON8DocumentVGqd__cAFRsz15MongoKittenCore0eF5QueryRd__lufc","s4Meow6LookupV4from10localField07foreignE02asACyxq_q0_Gq_m_s7KeyPathCyxAA09QueryableE0Vyqd__GGAJyq_AMGAJyq0_ALyqd_0_GGtcAA0hiJ5ModelRz7ElementQyd_0_Rs_STRd_0_r0_lufc","s4Meow6LookupV4from10localField07foreignE02asACyxq_q0_Gq_m_s7KeyPathCyxAA09QueryableE0Vyqd__GGAJyq_AMGAJyq0_ALyqd_0_SgGGtcAA0hiJ5ModelRz7ElementQyd_0_Rs_STRd_0_r0_lufc","s4Meow6LookupV4from10localField07foreignE08pipeline2asACyxq_q0_Gq_m_s7KeyPathCyxAA09QueryableE0Vy10IdentifierQyd__GGAKyq_AMyAA9ReferenceVyqd__GGGAA0A9AggregateVyq_qd_0_GyKXEAKyq0_AMyqd_1_GGtKcAA0ijK5ModelRzAA08ReadableO0Rd__SeRd_0_SERd_0_7ElementQyd_1_Rsd_0_STRd_1_r1_lufc","s4Meow6LookupV4from10localField07foreignE08pipeline2asACyxq_q0_Gq_m_s7KeyPathCyxAA09QueryableE0Vyqd__GGAKyq_ANGAA0A9AggregateVyq_qd_0_GyKXEAKyq0_AMyqd_0_GGtKcAA0ijK5ModelRzSeRd_0_SERd_0_r0_lufc","s4Meow6LookupV4from15localIdentifier2asACyxq_q0_Gq_m_s7KeyPathCyxAA14QueryableFieldVyAA9ReferenceVyq_GGGAIyq0_AKyqd__GGtcAA0ghI5ModelRz7ElementQyd__Rs_STRd__lufc","s4Meow6LookupV4from15localIdentifier2asACyxq_q0_Gq_m_s7KeyPathCyxAA14QueryableFieldVyAA9ReferenceVyq_GGGAIyq0_AKyqd__SgGGtcAA0ghI5ModelRz7ElementQyd__Rs_STRd__lufc","s4Meow6LookupV4from15localIdentifier2asACyxq_q0_Gq_m_s7KeyPathCyxAA14QueryableFieldVyAA9ReferenceVyq_GSgGGAIyq0_AKyqd__GGtcAA0ghI5ModelRz7ElementQyd__Rs_STRd__lufc","s4Meow6LookupV4from15localIdentifier2asACyxq_q0_Gq_m_s7KeyPathCyxAA14QueryableFieldVyAA9ReferenceVyq_GSgGGAIyq0_AKyqd__SgGGtcAA0ghI5ModelRz7ElementQyd__Rs_STRd__lufc","s4Meow6LookupV4from15localIdentifier2asACyxq_q0_Gq_m_s7KeyPathCyxAA14QueryableFieldVySayAA9ReferenceVyq_GGGGAIyq0_AKyqd__GGtcAA0ghI5ModelRz7ElementQyd__Rs_STRd__lufc","s4Meow6LookupV4from15localIdentifier2asACyxq_q0_Gq_m_s7KeyPathCyxAA14QueryableFieldVySayAA9ReferenceVyq_GGGGAIyq0_AKyqd__SgGGtcAA0ghI5ModelRz7ElementQyd__Rs_STRd__lufc","s4Meow6UnwindV4from4intoACyxq_Gs7KeyPathCyxAA14QueryableFieldVyqd_0_GG_AHyq_AJyqd__GGtc7ElementQyd_0_Rsd__STRd_0_r0_lufc","s4Meow7ProjectV_2as12buildMappingACyxq_Gxm_q_myAA14ModelProjectorVyxq_GzKXEtKcAA16KeyPathQueryableRzAaJR_rlufc","s4Meow7ProjectVyACy4BSON8DocumentVAFG15MongoKittenCore10ProjectionVcAFRszAFRs_rlufc","s4Meow8MigratorC8databaseACyxGAA0A8DatabaseC_tcfc","s4Meow9ReferenceV2toACyxGx_tcfc","s4Meow9ReferenceV4fromACyxGs7Decoder_p_tKcfc","s4Meow9ReferenceV8unsafeToACyxG10IdentifierQz_tcfc","s4Meow9ReferenceVAAs25LosslessStringConvertible10IdentifierRpzrlEyACyxGSgSScfc","s4Meow0A8DatabaseCyAA0A10CollectionVyxGxmcAA9BaseModelRzluip","s4Meow12ModelUpdaterV13dynamicMemberqd__s15WritableKeyPathCyxAA14QueryableFieldVyqd__GG_tc4BSON9PrimitiveRd__luip","s4Meow12QueryMatcherV13dynamicMemberAA0B7SubjectVyxqd__Gs7KeyPathCyxAA14QueryableFieldVyqd__GG_tcluip","s4Meow12QuerySubjectV13dynamicMemberACyxqd__Gs7KeyPathCyq_AA14QueryableFieldVyqd__GG_tcAA0fgH0R_luip","s4Meow14QueryableFieldV13dynamicMemberACyqd__Gs7KeyPathCyxAEG_tcluip","s4Meow12MutableModelP7encoder4BSON11BSONEncoderCvpZ","s4Meow12MutableModelPAAE7encoder4BSON11BSONEncoderCvpZ","s4Meow13ReadableModelP7decoder4BSON11BSONDecoderVvpZ","s4Meow13ReadableModelPAAE7decoder4BSON11BSONDecoderVvpZ","s4Meow9BaseModelP14collectionNameSSvpZ","s4Meow9BaseModelPAAE14collectionNameSSvpZ","s4Meow0A10CollectionV3raw11MongoKitten0dB0Cvp","s4Meow0A10CollectionV4nameSSvp","s4Meow0A10CollectionV8databaseAA0A8DatabaseCvp","s4Meow0A15OperationResultV11writeErrorsSay9MongoCore0F10WriteErrorVGSgvp","s4Meow0A15OperationResultV1nSivp","s4Meow0A15OperationResultV7successSbvp","s4Meow0A8DatabaseC3raw11MongoKitten0dB0Cvp","s4Meow12PartialModelV8document4BSON8DocumentVvp","s4Meow12QuerySubjectVAASTR_rlE5countAA0bC14SizeComparatorVvp","s4Meow14ReferenceFieldV12wrappedValue10IdentifierQzvp","s4Meow14ReferenceFieldV14projectedValueAA09QueryableC0Vy10IdentifierQzGvp","s4Meow14ReferenceFieldV3keySSSgvp","s4Meow22QuerySubjectComparatorP10comparatorAA0bC10ComparisonVvp","s4Meow22QuerySubjectComparatorP4path15MongoKittenCore9FieldPathVvp","s4Meow26QuerySubjectSizeComparatorV10comparatorAA0bC10ComparisonVvp","s4Meow26QuerySubjectSizeComparatorV4path15MongoKittenCore9FieldPathVvp","s4Meow4SortV22minimalVersionRequired9MongoCore04WireD0VSgvp","s4Meow4SortV5stage4BSON8DocumentVvp","s4Meow5FieldV12wrappedValuexvp","s4Meow5FieldV14projectedValueAA09QueryableB0VyxGvp","s4Meow5FieldV3keySSSgvp","s4Meow5GroupV22minimalVersionRequired9MongoCore04WireD0VSgvp","s4Meow5GroupV5stage4BSON8DocumentVvp","s4Meow5LimitV22minimalVersionRequired9MongoCore04WireD0VSgvp","s4Meow5LimitV5stage4BSON8DocumentVvp","s4Meow5MatchV22minimalVersionRequired9MongoCore04WireD0VSgvp","s4Meow5MatchV5stage4BSON8DocumentVvp","s4Meow6LookupV22minimalVersionRequired9MongoCore04WireD0VSgvp","s4Meow6LookupV5stage4BSON8DocumentVvp","s4Meow6UnwindV22minimalVersionRequired9MongoCore04WireD0VSgvp","s4Meow6UnwindV5stage4BSON8DocumentVvp","s4Meow7ProjectV22minimalVersionRequired9MongoCore04WireD0VSgvp","s4Meow7ProjectV5stage4BSON8DocumentVvp","s4Meow8MigratorC8databaseAA0A8DatabaseCvp","s4Meow9ReferenceV9reference10IdentifierQzvp","s4Meow9ReferenceVAAs23CustomStringConvertible10IdentifierRpzrlE11descriptionSSvp","s4Meow0A23CheckedAggregateBuilderV17buildPartialBlock11accumulated4nextAA0aC0Vyx6ResultQyd_0_GAHyxqd__G_qd_0_t4BaseQyd_0_Rsd__AA0aC5StageRd_0_r0_lFZ","s4Meow0A23CheckedAggregateBuilderV17buildPartialBlock5firstAA0aC0Vyx6ResultQyd__Gqd___t4BaseQyd__RszAA0aC5StageRd__lFZ","s4Meow0A25UncheckedAggregateBuilderV10buildBlockyAA0aC0Vyx4BSON8DocumentVG11MongoKitten0cD5Stage_pd_tFZ","s4Meow13ReadableModelP6decode4fromx4BSON8DocumentV_tKFZ","s4Meow13ReadableModelPAAE5count5where2inSi4BSON8DocumentV_AA0A8DatabaseCtYaKFZ","s4Meow13ReadableModelPAAE5count5where2inSiqd___AA0A8DatabaseCtYaK15MongoKittenCore0hI5QueryRd__lFZ","s4Meow13ReadableModelPAAE5watch7options2in11MongoKitten12ChangeStreamVyxGAG0iJ7OptionsV_AA0A8DatabaseCtYaKFZ","s4Meow13ReadableModelPAAE6decode4fromx4BSON8DocumentV_tKFZ","s4Meow16KeyPathQueryablePAAE012resolveFieldC0ySaySSGs0bC0CyxAA0F0Vyqd__GGSeRd__SERd__lFZ","s4Meow16KeyPathQueryablePAAE012resolveFieldC0ySaySSGs0bC0CyxAA0dF0Vyqd__GGlFZ","s4Meow0A10CollectionVA2A12MutableModelRzrlE10insertMany_12writeConcern15MongoKittenCore11InsertReplyVSayxG_0iK005WriteH0VSgtYaKF","s4Meow0A10CollectionVA2A12MutableModelRzrlE6insert_12writeConcern15MongoKittenCore11InsertReplyVx_0hJ005WriteG0VSgtYaKF","s4Meow0A10CollectionVA2A12MutableModelRzrlE6upserty15MongoKittenCore11UpdateReplyVxYaKF","s4Meow0A10CollectionVA2A12MutableModelRzrlE9deleteAll5where12writeConcern15MongoKittenCore11DeleteReplyV4BSON8DocumentV_0jL005WriteI0VSgtYaKF","s4Meow0A10CollectionVA2A12MutableModelRzrlE9deleteAll5where12writeConcern15MongoKittenCore11DeleteReplyVqd___0jL005WriteI0VSgtYaKAH0jK5QueryRd__lF","s4Meow0A10CollectionVA2A12MutableModelRzrlE9deleteOne5where12writeConcern15MongoKittenCore11DeleteReplyV4BSON8DocumentV_0jL005WriteI0VSgtYaKF","s4Meow0A10CollectionVA2A12MutableModelRzrlE9deleteOne5where12writeConcern15MongoKittenCore11DeleteReplyVqd___0jL005WriteI0VSgtYaKAH0jK5QueryRd__lF","s4Meow0A10CollectionVA2A13ReadableModelRzrlE14buildAggregate0E011MongoKitten12MappedCursorVyAG0F15BuilderPipelineVqd__GAA0aF0Vyxqd__GyKXE_tKSeRd__SERd__lF","s4Meow0A10CollectionVA2A13ReadableModelRzrlE4find5where11MongoKitten12MappedCursorVyAG16FindQueryBuilderCxG4BSON8DocumentV_tF","s4Meow0A10CollectionVA2A13ReadableModelRzrlE4find5where11MongoKitten12MappedCursorVyAG16FindQueryBuilderCxGqd___t0gH4Core0ghL0Rd__lF","s4Meow0A10CollectionVA2A13ReadableModelRzrlE5count5whereSi4BSON8DocumentV_tYaKF","s4Meow0A10CollectionVA2A13ReadableModelRzrlE5count5whereSiqd___tYaK15MongoKittenCore0gH5QueryRd__lF","s4Meow0A10CollectionVA2A13ReadableModelRzrlE5watch7options11MongoKitten12ChangeStreamVyxGAG0iJ7OptionsV_tYaKF","s4Meow0A10CollectionVA2A13ReadableModelRzrlE7findOne5wherexSg4BSON8DocumentV_tYaKF","s4Meow0A10CollectionVA2A13ReadableModelRzrlE7findOne5wherexSgqd___tYaK15MongoKittenCore0hI5QueryRd__lF","s4Meow0A10CollectionVA2A21KeyPathQueryableModelRzAA07MutableF0RzrlE9deleteAll8matching12writeConcern15MongoKittenCore11DeleteReplyV4BSON8DocumentVAA12QueryMatcherVyxGKXE_0mO005WriteL0VSgtYaKF","s4Meow0A10CollectionVA2A21KeyPathQueryableModelRzAA07MutableF0RzrlE9deleteOne8matching12writeConcern15MongoKittenCore11DeleteReplyV4BSON8DocumentVAA12QueryMatcherVyxGKXE_0mO005WriteL0VSgtYaKF","s4Meow0A10CollectionVA2A21KeyPathQueryableModelRzAA07MutableF0RzrlE9updateOne8matching5build15MongoKittenCore11UpdateReplyV4BSON8DocumentVAA12QueryMatcherVyxGKXE_yAA0foS0VyxGzKXEtYaKF","s4Meow0A10CollectionVA2A21KeyPathQueryableModelRzAA07MutableF0RzrlE9updateOne8matching5build15MongoKittenCore11UpdateReplyVqd__AA12QueryMatcherVyxGKXE_yAA0foQ0VyxGzKXEtYaKAI0lmQ0Rd__lF","s4Meow0A10CollectionVA2A21KeyPathQueryableModelRzrlE21buildCheckedAggregate0G011MongoKitten12MappedCursorVyAG0I15BuilderPipelineVqd__GAA0aI0Vyxqd__GyKXE_tKSeRd__SERd__lF","s4Meow0A10CollectionVA2A21KeyPathQueryableModelRzrlE4find8matching11MongoKitten12MappedCursorVyAG16FindQueryBuilderCxG4BSON8DocumentVAA0N7MatcherVyxGKXE_tKF","s4Meow0A10CollectionVA2A21KeyPathQueryableModelRzrlE4find8matching11MongoKitten12MappedCursorVyAG16FindQueryBuilderCxGqd__AA0N7MatcherVyxGKXE_tK0iJ4Core0ijN0Rd__lF","s4Meow0A10CollectionVA2A21KeyPathQueryableModelRzrlE5count8matchingSi4BSON8DocumentVAA12QueryMatcherVyxGKXE_tYaKF","s4Meow0A10CollectionVA2A21KeyPathQueryableModelRzrlE5count8matchingSiqd__AA12QueryMatcherVyxGKXE_tYaK15MongoKittenCore0klI0Rd__lF","s4Meow0A10CollectionVA2A21KeyPathQueryableModelRzrlE7findOne8matchingxSg4BSON8DocumentVAA12QueryMatcherVyxGKXE_tYaKF","s4Meow0A10CollectionVA2A21KeyPathQueryableModelRzrlE7findOne8matchingxSgqd__AA12QueryMatcherVyxGKXE_tYaK15MongoKittenCore0lmJ0Rd__lF","s4Meow0A15OperationResultV15assertCompletedyyKF","s4Meow0A19TransactionDatabaseC6commityyYaKF","s4Meow0A8DatabaseC10collection3forAA0A10CollectionVyxGxm_tAA9BaseModelRzlF","s4Meow0A8DatabaseC13migrateCustom_9migrationySS_yyYaYbKctYaKF","s4Meow0A8DatabaseC15withTransaction0C018transactionOptions7performx9MongoCore0h7SessionF0V_AH0hdF0VSgxAA0adB0CYaKXEtYaKlF","s4Meow0A8DatabaseC7migrate_2on9migrationySS_xmyAA8MigratorCyxGYaYbKctYaKAA9BaseModelRzlF","s4Meow10ResolvableP16resolveIfPresent2in5where0dE6ResultQzAA0A8DatabaseC_4BSON8DocumentVtYaKF","s4Meow10ResolvableP7resolve2in5where6ResultQzAA0A8DatabaseC_4BSON8DocumentVtYaKF","s4Meow12ModelGrouperV10setAverage2of2toys7KeyPathCyxAA14QueryableFieldVyqd__GG_AHyq_AKGtlF","s4Meow12MutableModelP6encode2to4BSON8DocumentVAHm_tKF","s4Meow12MutableModelPAAE07replaceC02inxSgAA0A8DatabaseC_tYaKF","s4Meow12MutableModelPAAE4save2inAA0A15OperationResultVAA0A8DatabaseC_tYaKF","s4Meow12MutableModelPAAE6create2inAA0A15OperationResultVAA0A8DatabaseC_tYaKF","s4Meow12MutableModelPAAE6encode2to4BSON8DocumentVAHm_tKF","s4Meow13PartialUpdateV5apply2onxAA0A10CollectionVyxG_tYaKF","s4Meow14ModelProjectorV12excludeField2atys7KeyPathCyq_AA09QueryableE0Vyqd__SgGG_tlF","s4Meow14ModelProjectorV12includeField2atys7KeyPathCyq_AA09QueryableE0Vyqd__SgGG_tlF","s4Meow14ModelProjectorV8moveRoot2toys7KeyPathCyq_AA14QueryableFieldVyxGG_tF","s4Meow14ModelProjectorV8moveRoot2toys7KeyPathCyq_AA14QueryableFieldVyxSgGG_tF","s4Meow14ModelProjectorV8setField2at2toys7KeyPathCyq_AA09QueryableE0Vyqd__GG_qd__t4BSON9PrimitiveRd__lF","s4Meow14ModelProjectorV8setField2at2toys7KeyPathCyq_AA09QueryableE0Vyqd__GG_qd__tK4BSON18PrimitiveEncodableRd__lF","s4Meow14ModelProjectorV9moveField4from2toys7KeyPathCyxAA09QueryableE0Vy10IdentifierQyd__GG_AHyq_AJyAA9ReferenceVyqd__GGGtAA08ReadableB0Rd__lF","s4Meow14ModelProjectorV9moveField4from2toys7KeyPathCyxAA09QueryableE0VyAA9ReferenceVyqd__GGG_AHyq_AJy10IdentifierQyd__GGtAA08ReadableB0Rd__lF","s4Meow14ModelProjectorV9moveField4from2toys7KeyPathCyxAA09QueryableE0Vyqd__GG_AHyq_AKGtlF","s4Meow14ReferenceFieldV6encode2toys7Encoder_p_tKF","s4Meow16ModelUpdateQueryV10unsetField2atys15WritableKeyPathCyxAA09QueryableF0Vyqd__SgGG_tlF","s4Meow16ModelUpdateQueryV8setField2at2toys15WritableKeyPathCyxAA09QueryableF0Vyqd__GG_qd__t4BSON9PrimitiveRd__lF","s4Meow16ModelUpdateQueryV9increment2at2toys15WritableKeyPathCyxAA14QueryableFieldVyqd__GG_qd__t4BSON9PrimitiveRd__s17FixedWidthIntegerRd__lF","s4Meow21KeyPathQueryableModelPA2A07MutableE0RzrlE17makePartialUpdateyAA0hI0VyxGyAA0E7UpdaterVyxGzYaKXEYaKF","s4Meow5FieldV6encode2toys7Encoder_p_tKF","s4Meow8MigratorC3addyyyAA0A10CollectionVyxGYaYbKcF","s4Meow9ReferenceV15encodePrimitive4BSON0D0_pyKF","s4Meow9ReferenceV16resolveIfPresent2in5wherexSgAA0A8DatabaseC_4BSON8DocumentVtYaKF","s4Meow9ReferenceV6encode2toys7Encoder_p_tKF","s4Meow9ReferenceV6exists2in5whereSbAA0A8DatabaseC_4BSON8DocumentVtYaKF","s4Meow9ReferenceV6exists2in5whereSbAA0A8DatabaseC_qd__tYaK15MongoKittenCore0gH5QueryRd__lF","s4Meow9ReferenceV6exists2inSbAA0A8DatabaseC_tYaKF","s4Meow9ReferenceV7resolve2in5wherexAA0A8DatabaseC_4BSON8DocumentVtYaKF","s4Meow9ReferenceVA2A12MutableModelRzrlE12deleteTarget2inAA0A15OperationResultVAA0A8DatabaseC_tYaKF","s4Meow9ReferenceVA2A21KeyPathQueryableModelRzrlE16resolveIfPresent2in5wherexSgAA0A8DatabaseC_4BSON8DocumentVAA12QueryMatcherVyxGKXEtYaKF","s4Meow9ReferenceVA2A21KeyPathQueryableModelRzrlE6exists2in5whereSbAA0A8DatabaseC_4BSON8DocumentVAA12QueryMatcherVyxGKXEtYaKF","s4Meow9ReferenceVA2A21KeyPathQueryableModelRzrlE7resolve2in5wherexAA0A8DatabaseC_4BSON8DocumentVAA12QueryMatcherVyxGXEtYaKF","s4Meow9ReferenceV2eeoiySbACyxG_AEtFZ","s4Meow1goiy4BSON8DocumentVAA12QuerySubjectVyxq_G_q_tAA21KeyPathQueryableModelRzAC9PrimitiveR_SLR_r0_lF","s4Meow1goiy4BSON8DocumentVAA12QuerySubjectVyxq_G_q_tAA21KeyPathQueryableModelRzSYR_AC9Primitive8RawValueRp_SLALRQr0_lF","s4Meow1goiy4BSON8DocumentVx_5ValueQztAA22QuerySubjectComparatorRzlF","s4Meow1loiy4BSON8DocumentVAA12QuerySubjectVyxq_G_q_tAA21KeyPathQueryableModelRzAC9PrimitiveR_SLR_r0_lF","s4Meow1loiy4BSON8DocumentVAA12QuerySubjectVyxq_G_q_tAA21KeyPathQueryableModelRzSYR_AC9Primitive8RawValueRp_SLALRQr0_lF","s4Meow1loiy4BSON8DocumentVx_5ValueQztAA22QuerySubjectComparatorRzlF","s4Meow1moPyAA9ReferenceVyxGxAA13ReadableModelRzlF","s4Meow2eeoiy4BSON8DocumentVAA12QuerySubjectVyx10IdentifierQzG_AA9ReferenceVyxGtAA21KeyPathQueryableModelRzAC9PrimitiveAIRQlF","s4Meow2eeoiy4BSON8DocumentVAA12QuerySubjectVyx10IdentifierQzG_AA9ReferenceVyxGtKAA21KeyPathQueryableModelRzlF","s4Meow2eeoiy4BSON8DocumentVAA12QuerySubjectVyxAA9ReferenceVyq_GG_10IdentifierQy_tAA21KeyPathQueryableModelRzAA08ReadableL0R_AC9PrimitiveAMRQr0_lF","s4Meow2eeoiy4BSON8DocumentVAA12QuerySubjectVyxAA9ReferenceVyq_GG_10IdentifierQy_tKAA21KeyPathQueryableModelRzAA08ReadableL0R_r0_lF","s4Meow2eeoiy4BSON8DocumentVAA12QuerySubjectVyxAA9ReferenceVyq_GG_AJtAA21KeyPathQueryableModelRzAA08ReadableK0R_AC9Primitive10IdentifierRp_r0_lF","s4Meow2eeoiy4BSON8DocumentVAA12QuerySubjectVyxq_G_q_tAA21KeyPathQueryableModelRzAC9PrimitiveR_r0_lF","s4Meow2eeoiy4BSON8DocumentVAA12QuerySubjectVyxq_G_q_tAA21KeyPathQueryableModelRzSYR_AC9Primitive8RawValueRp_r0_lF","s4Meow2eeoiy4BSON8DocumentVx_5ValueQztAA22QuerySubjectComparatorRzlF","s4Meow2geoiy4BSON8DocumentVAA12QuerySubjectVyxq_G_q_tAA21KeyPathQueryableModelRzAC9PrimitiveR_SLR_r0_lF","s4Meow2geoiy4BSON8DocumentVAA12QuerySubjectVyxq_G_q_tAA21KeyPathQueryableModelRzSYR_AC9Primitive8RawValueRp_SLALRQr0_lF","s4Meow2geoiy4BSON8DocumentVx_5ValueQztAA22QuerySubjectComparatorRzlF","s4Meow2leoiy4BSON8DocumentVAA12QuerySubjectVyxq_G_q_tAA21KeyPathQueryableModelRzAC9PrimitiveR_SLR_r0_lF","s4Meow2leoiy4BSON8DocumentVAA12QuerySubjectVyxq_G_q_tAA21KeyPathQueryableModelRzSYR_AC9Primitive8RawValueRp_SLALRQr0_lF","s4Meow2leoiy4BSON8DocumentVx_5ValueQztAA22QuerySubjectComparatorRzlF","s4Meow2neoiy4BSON8DocumentVAA12QuerySubjectVyxAA9ReferenceVyq_GG_AJtAA21KeyPathQueryableModelRzAA08ReadableK0R_AC9Primitive10IdentifierRp_r0_lF","s4Meow2neoiy4BSON8DocumentVAA12QuerySubjectVyxq_G_q_tAA21KeyPathQueryableModelRzAC9PrimitiveR_r0_lF","s4Meow2neoiy4BSON8DocumentVAA12QuerySubjectVyxq_G_q_tAA21KeyPathQueryableModelRzSYR_AC9Primitive8RawValueRp_r0_lF","s4Meow0A10Identifiera","s4Meow26QuerySubjectSizeComparatorV5Valuea","s4Meow4SortV6Resulta","s4Meow5LimitV6Resulta","s4Meow5MatchV6Resulta","s4Meow5Modela","s4Meow8MigratorC6Actiona","s4Meow9ReferenceV6Resulta","s11MongoKitten12MappedCursorV4MeowAA16FindQueryBuilderCRszAD21KeyPathQueryableModelR_rlE4sort2on9directionACyAFq_Gs0iJ0Cyq_AD0K5FieldVyqd__GG_0aB4Core7SortingV5OrderOtSLRd__lF","sST4MeowAA10Resolvable7ElementRpzrlE16resolveIfPresent2in5whereSayAC_0eF6ResultQZGAA0A8DatabaseC_4BSON8DocumentVtYaKF","sST4MeowAA10Resolvable7ElementRpzrlE7resolve2in5whereSayAC_6ResultQZGAA0A8DatabaseC_4BSON8DocumentVtYaKF","sSq4MeowAA10ResolvableRzlE16resolveIfPresent2in5where0dE6ResultQzSgAA0A8DatabaseC_4BSON8DocumentVtYaKF","sSq4MeowAA10ResolvableRzlE7resolve2in5where6ResultQzSgAA0A8DatabaseC_4BSON8DocumentVtYaKF","sSq4MeowAA10ResolvableRzlE15IfPresentResulta","sSq4MeowAA10ResolvableRzlE6Resulta","s11MongoKitten0A10CollectionC","s11MongoKitten0A8DatabaseC","s11MongoKitten12ChangeStreamV","s11MongoKitten12MappedCursorV","s11MongoKitten16FindQueryBuilderC","s11MongoKitten19ChangeStreamOptionsV","s11MongoKitten21AggregateBuilderStageP","s11MongoKitten21AggregateBuilderStageP22minimalVersionRequired0A4Core04WireG0VSgvp","s11MongoKitten21AggregateBuilderStageP5stage4BSON8DocumentVvp","s11MongoKitten24AggregateBuilderPipelineV","s15MongoKittenCore0aB5QueryP","s15MongoKittenCore10ProjectionV","s15MongoKittenCore11DeleteReplyV","s15MongoKittenCore11InsertReplyV","s15MongoKittenCore11UpdateReplyV","s15MongoKittenCore7SortingV","s15MongoKittenCore7SortingV5OrderO","s15MongoKittenCore9FieldPathV","s4BSON11BSONDecoderV","s4BSON11BSONEncoderC","s4BSON18PrimitiveEncodableP","s4BSON18PrimitiveEncodableP06encodeB0AA0B0_pyKF","s4BSON8DocumentV","s4BSON8ObjectIdV","s4BSON9PrimitiveP","s9MongoCore0A10WriteErrorV","s9MongoCore0A14SessionOptionsV","s9MongoCore0A18TransactionOptionsV","s9MongoCore11WireVersionV","s9MongoCore12WriteConcernV","sSE","sSE6encode2toys7Encoder_p_tKF","sSH","sSL","sSQ","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSS","sST","sSY","sSa","sSb","sSe","sSe4fromxs7Decoder_p_tKcfc","sSh","sSi","sSq","ss15WritableKeyPathC","ss17FixedWidthIntegerP","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss25LosslessStringConvertibleP","ss25LosslessStringConvertiblePyxSgSScfc","ss4Voida","ss5ErrorP","ss5ErrorP10FoundationE20localizedDescriptionSSvp","ss7Codablea","ss7DecoderP","ss7EncoderP","ss7KeyPathC","ss8SendableP"],"vertices":[{"p":["MeowAggregateStage"],"f":[["protocol",12],[" ",17],["MeowAggregateStage",7],[" : ",17],["AggregateBuilderStage",18,261]],"s":[["protocol",12],[" ",17],["MeowAggregateStage",7]]},{"p":["Resolvable"],"f":[["protocol",12],[" ",17],["Resolvable",7]],"s":[["protocol",12],[" ",17],["Resolvable",7]],"d":"A protocol that provides a uniform syntax for 'resolving' something"},{"p":["MutableModel"],"f":[["protocol",12],[" ",17],["MutableModel",7],[" : ",17],["ReadableModel",18,3],[", ",17],["Encodable",18,285]],"s":[["protocol",12],[" ",17],["MutableModel",7]],"d":"The base specification of any _readable_ Meow model, containing a collectionName and a _id.\nMutableModel must be implemented using `Codable`, and always implements ReadableModel.\nMutableModels can be saved, whereas Readableodels cannot\n\nTwo models may share the same collection, allowing for constructions where both `AdminUser`\n\nExample:\n\n    struct AnyUser: MutableModel {\n        @Field var _id: ObjectId\n        @Field var username: String\n        @Field var role: Role\n\n        // Populted only for admin users\n        @Field var adminPowers: [AdminPrivilege]?\n    }\n    struct AdminUser: ReadableModel {\n        let _id: ObjectId\n        let username: String\n        // Role is always admin for this model, so it's not decoded\n        // Always populated\n        let adminPowers: [AdminPrivilege]\n    }\n    struct User: ReadableModel {\n        let _id: ObjectId\n        let username: String\n        @Field var role: Role\n        // `adminPowers` are not relevant\n    }\n\nAll Meow models must have an identifier that is `Codable` and `Hashable`, as well as representable by a Primitive.\n\nWhen implementing `PrimitiveEncodable` using `BSONEncoder`, this allows you to use any `struct` as an `_id` so long as it's not an \"unkeyedContainer\". Array-like (sequence) types are rejected on insertion by MongoDB."},{"p":["ReadableModel"],"f":[["protocol",12],[" ",17],["ReadableModel",7],[" : ",17],["BaseModel",18,8],[", ",17],["Decodable",18,297]],"s":[["protocol",12],[" ",17],["ReadableModel",7]],"d":"The base specification of any _readable_ Meow model, containing a collectionName and a _id.\nReadableModel must be implemented using `Decodable`. ReadableModel is currently used for any entity that is queryable.\nMutableModels can be saved, whereas Readableodels cannot\n\nTwo models may share the same collection, allowing for constructions where both `AdminUser`\n\nExample:\n\n    struct AnyUser: MutableModel {\n        @Field var _id: ObjectId\n        @Field var username: String\n        @Field var role: Role\n\n        // Populted only for admin users\n        @Field var adminPowers: [AdminPrivilege]?\n    }\n    struct AdminUser: ReadableModel {\n        let _id: ObjectId\n        let username: String\n        // Role is always admin for this model, so it's not decoded\n        // Always populated\n        let adminPowers: [AdminPrivilege]\n    }\n    struct User: ReadableModel {\n        let _id: ObjectId\n        let username: String\n        @Field var role: Role\n        // `adminPowers` are not relevant\n    }\n\nAll Meow models must have an identifier that is `Codable` and `Hashable`, as well as representable by a Primitive.\n\nWhen implementing `PrimitiveEncodable` using `BSONEncoder`, this allows you to use any `struct` as an `_id` so long as it's not an \"unkeyedContainer\". Array-like (sequence) types are rejected on insertion by MongoDB."},{"p":["ModelProjection"],"f":[["protocol",12],[" ",17],["ModelProjection",7],[" : ",17],["KeyPathQueryableModel",18,6]],"s":[["protocol",12],[" ",17],["ModelProjection",7]]},{"p":["KeyPathQueryable"],"f":[["protocol",12],[" ",17],["KeyPathQueryable",7],[" : ",17],["Decodable",18,297],[", ",17],["Encodable",18,285]],"s":[["protocol",12],[" ",17],["KeyPathQueryable",7]]},{"p":["KeyPathQueryableModel"],"f":[["protocol",12],[" ",17],["KeyPathQueryableModel",7],[" : ",17],["KeyPathQueryable",18,5],[", ",17],["ReadableModel",18,3]],"s":[["protocol",12],[" ",17],["KeyPathQueryableModel",7]]},{"p":["QuerySubjectComparator"],"f":[["protocol",12],[" ",17],["QuerySubjectComparator",7]],"s":[["protocol",12],[" ",17],["QuerySubjectComparator",7]],"d":"A comparator, exclusively to be internally implemented by Meow, to provide syntactically pleasing APIs on QuerySubjects"},{"p":["BaseModel"],"f":[["protocol",12],[" ",17],["BaseModel",7]],"s":[["protocol",12],[" ",17],["BaseModel",7]],"d":"The base specification of any Meow model, containing a collectionName and a _id\n\nAll Meow models must have an identifier that is `Codable` and `Hashable`, as well as representable by a Primitive.\n\nWhen implementing `PrimitiveEncodable` using `BSONEncoder`, this allows you to use any `struct` as an `_id` so long as it's not an \"unkeyedContainer\". Array-like (sequence) types are rejected on insertion by MongoDB."},{"p":["MeowAggregateStage","Base"],"f":[["associatedtype",12],[" ",17],["Base",7],[" : ",17],["Decodable",18,297],[", ",17],["Encodable",18,285]],"s":[["associatedtype",12],[" ",17],["Base",7],[" : ",17],["Decodable",18],[", ",17],["Encodable",18]]},{"p":["MeowAggregateStage","Result"],"f":[["associatedtype",12],[" ",17],["Result",7],[" : ",17],["Decodable",18,297],[", ",17],["Encodable",18,285]],"s":[["associatedtype",12],[" ",17],["Result",7],[" : ",17],["Decodable",18],[", ",17],["Encodable",18]]},{"p":["Resolvable","IfPresentResult"],"f":[["associatedtype",12],[" ",17],["IfPresentResult",7]],"s":[["associatedtype",12],[" ",17],["IfPresentResult",7]]},{"p":["Resolvable","Result"],"f":[["associatedtype",12],[" ",17],["Result",7]],"s":[["associatedtype",12],[" ",17],["Result",7]]},{"p":["ModelProjection","Base"],"f":[["associatedtype",12],[" ",17],["Base",7],[" : ",17],["KeyPathQueryableModel",18,6]],"s":[["associatedtype",12],[" ",17],["Base",7],[" : ",17],["KeyPathQueryableModel",18]]},{"p":["QuerySubjectComparator","Value"],"f":[["associatedtype",12],[" ",17],["Value",7],[" : ",17],["Primitive",18,279]],"s":[["associatedtype",12],[" ",17],["Value",7],[" : ",17],["Primitive",18]]},{"p":["BaseModel","Identifier"],"f":[["associatedtype",12],[" ",17],["Identifier",7],[" : ",17],["PrimitiveEncodable",18,275],[", ",17],["Decodable",18,297],[", ",17],["Encodable",18,285],[", ",17],["Hashable",18,287]],"s":[["associatedtype",12],[" ",17],["Identifier",7],[" : ",17],["PrimitiveEncodable",18],[", ",17],["Decodable",18],[", ",17],["Encodable",18],[", ",17],["Hashable",18]]},{"p":["MeowModelError"],"f":[["enum",12],[" ",17],["MeowModelError",7],["<",17],["M",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["BaseModel",18,8]],"s":[["enum",12],[" ",17],["MeowModelError",7]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]],"d":"Generic errors thrown by the generator"},{"p":["MeowHook"],"f":[["enum",12],[" ",17],["MeowHook",7],["<",17],["M",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["BaseModel",18,8]],"s":[["enum",12],[" ",17],["MeowHook",7]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]]},{"p":["MeowCollection"],"f":[["struct",12],[" ",17],["MeowCollection",7],["<",17],["M",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["BaseModel",18,8]],"s":[["struct",12],[" ",17],["MeowCollection",7]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]],"d":"A Meow wrapper around `MongoCollection`, that allows you to query the collection while assuming a `Model` format\n\nGetting a MeowCollection:\n\n    let mongodb: MongoDatabase = mongoCluster[\"superapp\"]\n    let meow = MeowDatabase(mongodb)\n    let users: MeowCollection<User> = meow[User.self]"},{"p":["MeowOperationResult"],"f":[["struct",12],[" ",17],["MeowOperationResult",7]],"s":[["struct",12],[" ",17],["MeowOperationResult",7]]},{"p":["MeowOperationResult","NotSuccessful"],"f":[["struct",12],[" ",17],["NotSuccessful",7]],"s":[["struct",12],[" ",17],["NotSuccessful",7]]},{"p":["MeowCheckedAggregateBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["MeowCheckedAggregateBuilder",7],["<",17],["M",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6]],"s":[["struct",12],[" ",17],["MeowCheckedAggregateBuilder",7]],"c":[["M",1,"KeyPathQueryableModel",6]],"g":[["M",0,0]]},{"p":["MeowUncheckedAggregateBuilder"],"f":[["@resultBuilder",3],[" ",17],["struct",12],[" ",17],["MeowUncheckedAggregateBuilder",7],["<",17],["M",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["ReadableModel",18,3]],"s":[["struct",12],[" ",17],["MeowUncheckedAggregateBuilder",7]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]]},{"p":["MeowAggregate"],"f":[["struct",12],[" ",17],["MeowAggregate",7],["<",17],["Model",0],[", ",17],["Result",0],["> ",17],["where",12],[" ",17],["Model",18],[" : ",17],["ReadableModel",18,3],[", ",17],["Result",18],[" : ",17],["Decodable",18,297],[", ",17],["Result",18],[" : ",17],["Encodable",18,285]],"s":[["struct",12],[" ",17],["MeowAggregate",7]],"c":[["Model",1,"ReadableModel",3],["Result",1,"Decodable",297],["Result",1,"Encodable",285]],"g":[["Model",0,0],["Result",1,0]]},{"p":["ModelGrouper"],"f":[["struct",12],[" ",17],["ModelGrouper",7],["<",17],["Base",0],[", ",17],["Result",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryable",18,5],[", ",17],["Result",18],[" : ",17],["KeyPathQueryable",18,5]],"s":[["struct",12],[" ",17],["ModelGrouper",7]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5]],"g":[["Base",0,0],["Result",1,0]],"d":"A helper type used to construct type-checked `$group` queries\n\nHas two associatedtypes;\n- `Base` is a `KeyPathQueryableModel`, of which the collection is being grouped\n- `Result` is the resulting type in which the results are being accumulated"},{"p":["ModelUpdater"],"f":[["@dynamicMemberLookup",3],[" ",17],["struct",12],[" ",17],["ModelUpdater",7],["<",17],["M",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["M",18],[" : ",17],["MutableModel",18,2]],"s":[["struct",12],[" ",17],["ModelUpdater",7]],"c":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2]],"g":[["M",0,0]],"d":"A helper/proxy type that changes values on the subjected model, and keeps track of all changed fields"},{"p":["PartialModel"],"f":[["struct",12],[" ",17],["PartialModel",7],["<",17],["M",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["BaseModel",18,8]],"s":[["struct",12],[" ",17],["PartialModel",7]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]]},{"p":["QueryMatcher"],"f":[["@dynamicMemberLookup",3],[" ",17],["struct",12],[" ",17],["QueryMatcher",7],["<",17],["M",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryable",18,5]],"s":[["struct",12],[" ",17],["QueryMatcher",7]],"c":[["M",1,"KeyPathQueryable",5]],"g":[["M",0,0]],"d":"A helper type used in keypath queries that is used as a \"virtual model\" for constructing type-checked mongodb queries.\n\nFor example, the following query drains all users with the username \"Joannis\" into an array\n\n    let users = try await meow[User.self].find { user in\n       user.$username == \"Joannis\"\n    }.drain()"},{"p":["QuerySubject"],"f":[["@dynamicMemberLookup",3],[" ",17],["struct",12],[" ",17],["QuerySubject",7],["<",17],["M",0],[", ",17],["T",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryable",18,5]],"s":[["struct",12],[" ",17],["QuerySubject",7]],"c":[["M",1,"KeyPathQueryable",5]],"g":[["M",0,0],["T",1,0]],"d":"A type, similar to a Swift `KeyPath`, that refers to a value within the entity `M`, inside the database.\n\nUsed to construct type-checked queries"},{"p":["PartialUpdate"],"f":[["struct",12],[" ",17],["PartialUpdate",7],["<",17],["M",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["M",18],[" : ",17],["MutableModel",18,2]],"s":[["struct",12],[" ",17],["PartialUpdate",7]],"c":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2]],"g":[["M",0,0]],"d":"A partial update, as result of `Model.makePartialUpdate` that can be executed on a collection to atomically `$set` these changes\n\n    let updatedUser = try await user.makePartialUpdate { user in\n        user.$password = newPasswordHash\n    }.apply(on: meow[User.self])"},{"p":["ModelProjector"],"f":[["struct",12],[" ",17],["ModelProjector",7],["<",17],["Base",0],[", ",17],["Result",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryable",18,5],[", ",17],["Result",18],[" : ",17],["KeyPathQueryable",18,5]],"s":[["struct",12],[" ",17],["ModelProjector",7]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5]],"g":[["Base",0,0],["Result",1,0]],"d":"Used for projecting the values in `Base` into `Result`"},{"p":["QueryableField"],"f":[["@dynamicMemberLookup",3],[" ",17],["struct",12],[" ",17],["QueryableField",7],["<",17],["Value",0],[">",17]],"s":[["struct",12],[" ",17],["QueryableField",7]],"g":[["Value",0,0]],"d":"A queryable field, that is aware of its parent KeyPath within the Model"},{"p":["ReferenceField"],"f":[["@propertyWrapper",3],[" ",17],["struct",12],[" ",17],["ReferenceField",7],["<",17],["M",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["BaseModel",18,8]],"s":[["struct",12],[" ",17],["ReferenceField",7]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]],"d":"A property wrapper helper type that holds a reference to another entity"},{"p":["ModelUpdateQuery"],"f":[["struct",12],[" ",17],["ModelUpdateQuery",7],["<",17],["M",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["M",18],[" : ",17],["MutableModel",18,2]],"s":[["struct",12],[" ",17],["ModelUpdateQuery",7]],"c":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2]],"g":[["M",0,0]],"d":"A helper type used to construct type-checked atomic updates"},{"p":["QuerySubjectComparison"],"f":[["struct",12],[" ",17],["QuerySubjectComparison",7]],"s":[["struct",12],[" ",17],["QuerySubjectComparison",7]],"d":"A public type, used internally by Meow to provide syntactically pleasing APIs on QuerySubjects"},{"p":["QuerySubjectSizeComparator"],"f":[["struct",12],[" ",17],["QuerySubjectSizeComparator",7]],"s":[["struct",12],[" ",17],["QuerySubjectSizeComparator",7]],"d":"A size comparator that counts the amount of entites in an array, and can compare the result of that against another value"},{"p":["Sort"],"f":[["struct",12],[" ",17],["Sort",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Decodable",18,297],[", ",17],["Base",18],[" : ",17],["Encodable",18,285]],"s":[["struct",12],[" ",17],["Sort",7]],"c":[["Base",1,"Decodable",297],["Base",1,"Encodable",285]],"g":[["Base",0,0]]},{"p":["Field"],"f":[["@propertyWrapper",3],[" ",17],["struct",12],[" ",17],["Field",7],["<",17],["C",0],["> ",17],["where",12],[" ",17],["C",18],[" : ",17],["Decodable",18,297],[", ",17],["C",18],[" : ",17],["Encodable",18,285]],"s":[["struct",12],[" ",17],["Field",7]],"c":[["C",1,"Decodable",297],["C",1,"Encodable",285]],"g":[["C",0,0]],"d":"The `@Field` property wrapper is used on all properties of a Meow `Model`s to allow key path based queries"},{"p":["Group"],"f":[["struct",12],[" ",17],["Group",7],["<",17],["Base",0],[", ",17],["Result",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Decodable",18,297],[", ",17],["Base",18],[" : ",17],["Encodable",18,285],[", ",17],["Result",18],[" : ",17],["Decodable",18,297],[", ",17],["Result",18],[" : ",17],["Encodable",18,285]],"s":[["struct",12],[" ",17],["Group",7]],"c":[["Base",1,"Decodable",297],["Base",1,"Encodable",285],["Result",1,"Decodable",297],["Result",1,"Encodable",285]],"g":[["Base",0,0],["Result",1,0]]},{"p":["Limit"],"f":[["struct",12],[" ",17],["Limit",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Decodable",18,297],[", ",17],["Base",18],[" : ",17],["Encodable",18,285]],"s":[["struct",12],[" ",17],["Limit",7]],"c":[["Base",1,"Decodable",297],["Base",1,"Encodable",285]],"g":[["Base",0,0]]},{"p":["Match"],"f":[["struct",12],[" ",17],["Match",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Decodable",18,297],[", ",17],["Base",18],[" : ",17],["Encodable",18,285]],"s":[["struct",12],[" ",17],["Match",7]],"c":[["Base",1,"Decodable",297],["Base",1,"Encodable",285]],"g":[["Base",0,0]]},{"p":["Lookup"],"f":[["struct",12],[" ",17],["Lookup",7],["<",17],["Base",0],[", ",17],["Foreign",0],[", ",17],["Result",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Decodable",18,297],[", ",17],["Base",18],[" : ",17],["Encodable",18,285],[", ",17],["Foreign",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["Result",18],[" : ",17],["KeyPathQueryable",18,5]],"s":[["struct",12],[" ",17],["Lookup",7]],"c":[["Base",1,"Decodable",297],["Base",1,"Encodable",285],["Foreign",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryable",5]],"g":[["Base",0,0],["Foreign",1,0],["Result",2,0]]},{"p":["Unwind"],"f":[["struct",12],[" ",17],["Unwind",7],["<",17],["Base",0],[", ",17],["Result",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["Result",18],[" : ",17],["KeyPathQueryableModel",18,6]],"s":[["struct",12],[" ",17],["Unwind",7]],"c":[["Base",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryableModel",6]],"g":[["Base",0,0],["Result",1,0]]},{"p":["Project"],"f":[["struct",12],[" ",17],["Project",7],["<",17],["Base",0],[", ",17],["Result",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Decodable",18,297],[", ",17],["Base",18],[" : ",17],["Encodable",18,285],[", ",17],["Result",18],[" : ",17],["Decodable",18,297],[", ",17],["Result",18],[" : ",17],["Encodable",18,285]],"s":[["struct",12],[" ",17],["Project",7]],"c":[["Base",1,"Decodable",297],["Base",1,"Encodable",285],["Result",1,"Decodable",297],["Result",1,"Encodable",285]],"g":[["Base",0,0],["Result",1,0]]},{"p":["Reference"],"f":[["struct",12],[" ",17],["Reference",7],["<",17],["M",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["ReadableModel",18,3]],"s":[["struct",12],[" ",17],["Reference",7]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]],"d":"Reference to a Model by wrapping it's `_id`. Supports wrapping models with any `MeowIdentifier`, including custom `Codable `types.\n\nCan be used within Vapor's `req.parameters` APIs if `M.Identifier` is `CustomStringConvertible`, like for example `ObjectId`, `UUID` or `String`.\n\nExample:\n\n    app.get(\"posts\", \":postId\") { req -> Post in\n        let postRef: Reference<Post> = try req.parameters.require(\"postId\")\n        let post: Post = try await postRef.resolve(in: req.meow)\n        return post\n    }"},{"p":["MeowTransactionDatabase"],"f":[["final",12],[" ",17],["class",12],[" ",17],["MeowTransactionDatabase",7]],"s":[["class",12],[" ",17],["MeowTransactionDatabase",7]],"d":"A Meow wrapper around `MongoDatabase`, that allows subscripting with a `Model` type to get a `MeowCollection`.\nA MeowTransactionDatabase is used to do all operations within a transaction context\n\nExample usage:\n\n    let mongodb: MongoDatabase = mongoCluster[\"superapp\"]\n    let meow = MeowDatabase(mongodb)\n    let users: MeowCollection<User> = meow[User.self]"},{"p":["MeowDatabase"],"f":[["class",12],[" ",17],["MeowDatabase",7]],"s":[["class",12],[" ",17],["MeowDatabase",7]],"d":"A Meow wrapper around `MongoDatabase`, that allows subscripting with a `Model` type to get a `MeowCollection`\nA MeowDatabase can exist in a ransaction state, at which point it's actually a subclass names `MeowTransactionDatabase`.\n\nExample usage:\n\n    let mongodb: MongoDatabase = mongoCluster[\"superapp\"]\n    let meow = MeowDatabase(mongodb)\n    let users: MeowCollection<User> = meow[User.self]"},{"p":["Migrator"],"f":[["class",12],[" ",17],["Migrator",7],["<",17],["M",0],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["BaseModel",18,8]],"s":[["class",12],[" ",17],["Migrator",7]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]]},{"p":["MeowModelError","referenceError(id:type:)"],"f":[["case",12],[" ",17],["referenceError",7],["(",17],["id",1],[": ",17],["Any",12],[", ",17],["type",1],[": ",17],["M",18],[".Type)",17]],"s":[["case",12],[" ",17],["referenceError",7],["(",17],["id",1],[": ",17],["Any",12],[", ",17],["type",1],[": ",17],["M",18],[".Type)",17]],"d":"A reference to `type` with id `id` cannot be resolved"},{"p":["MeowModelError","cannotUpdate(_:)"],"f":[["case",12],[" ",17],["cannotUpdate",7],["(",17],["M",18],[".",17],["Identifier",18],[")",17]],"s":[["case",12],[" ",17],["cannotUpdate",7],["(",17],["M",18],[".",17],["Identifier",18],[")",17]]},{"p":["MeowModelError","fileTooLarge(size:maximum:)"],"f":[["case",12],[" ",17],["fileTooLarge",7],["(",17],["size",1],[": ",17],["Int",18,300],[", ",17],["maximum",1],[": ",17],["Int",18,300],[")",17]],"s":[["case",12],[" ",17],["fileTooLarge",7],["(",17],["size",1],[": ",17],["Int",18],[", ",17],["maximum",1],[": ",17],["Int",18],[")",17]],"d":"A file cannot be stored because it exceeds the maximum size"},{"p":["MeowModelError","invalidValue(key:reason:)"],"f":[["case",12],[" ",17],["invalidValue",7],["(",17],["key",1],[": ",17],["String",18,292],[", ",17],["reason",1],[": ",17],["String",18,292],[")",17]],"s":[["case",12],[" ",17],["invalidValue",7],["(",17],["key",1],[": ",17],["String",18],[", ",17],["reason",1],[": ",17],["String",18],[")",17]],"d":"The value is invalid"},{"p":["MeowModelError","cannotValidate(reason:)"],"f":[["case",12],[" ",17],["cannotValidate",7],["(",17],["reason",1],[": ",17],["String",18,292],[")",17]],"s":[["case",12],[" ",17],["cannotValidate",7],["(",17],["reason",1],[": ",17],["String",18],[")",17]],"d":"Meow was not able to validate the database, because `reason`"},{"p":["MeowModelError","deletingMultiple(errors:)"],"f":[["case",12],[" ",17],["deletingMultiple",7],["(",17],["errors",1],[": [(",17],["ObjectId",18,278],[", ",17],["Error",18,310],[")])",17]],"s":[["case",12],[" ",17],["deletingMultiple",7],["(",17],["errors",1],[": [(",17],["ObjectId",18],[", ",17],["Error",18],[")])",17]],"d":"One or more errors occurred while mass-deleting objects. The `errors` array contains the specific object identifier and error pairs."},{"p":["MeowModelError","undeletableObject(reason:)"],"f":[["case",12],[" ",17],["undeletableObject",7],["(",17],["reason",1],[": ",17],["String",18,292],[")",17]],"s":[["case",12],[" ",17],["undeletableObject",7],["(",17],["reason",1],[": ",17],["String",18],[")",17]],"d":"An object cannot be deleted, because of `reason`"},{"p":["MeowModelError","brokenFileReference(_:)"],"f":[["case",12],[" ",17],["brokenFileReference",7],["(",17],["ObjectId",18,278],[")",17]],"s":[["case",12],[" ",17],["brokenFileReference",7],["(",17],["ObjectId",18],[")",17]],"d":"The file cannot be found in GridFS"},{"p":["MeowModelError","missingOrInvalidValue(key:expected:got:)"],"f":[["case",12],[" ",17],["missingOrInvalidValue",7],["(",17],["key",1],[": ",17],["String",18,292],[", ",17],["expected",1],[": ",17],["Any",12],[".Type, ",17],["got",1],[": ",17],["Any",12],["?)",17]],"s":[["case",12],[" ",17],["missingOrInvalidValue",7],["(",17],["key",1],[": ",17],["String",18],[", ",17],["expected",1],[": ",17],["Any",12],[".Type, ",17],["got",1],[": ",17],["Any",12],["?)",17]],"d":"The value for the given key is missing, or invalid"},{"p":["MeowCollection","init(database:named:)"],"f":[["init",10],["(",17],["database",1],[": ",17],["MeowDatabase",18,46],[", ",17],["named",1],[" ",17],["name",2],[": ",17],["String",18,292],[")",17]],"s":[["init",10],["(",17],["database",1],[": ",17],["MeowDatabase",18],[", ",17],["named",1],[": ",17],["String",18],[")",17]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]]},{"p":["MeowDatabase","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["database",2],[": ",17],["MongoDatabase",18,256],[")",17]],"s":[["init",10],["(",17],["MongoDatabase",18],[")",17]]},{"p":["PartialModel","init(document:)"],"f":[["init",10],["(",17],["document",1],[": ",17],["Document",18,277],[" = Document())",17]],"s":[["init",10],["(",17],["document",1],[": ",17],["Document",18],[")",17]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]]},{"p":["ReferenceField","init(wrappedValue:)"],"f":[["init",10],["(",17],["wrappedValue",1],[": ",17],["M",18],[".",17],["Identifier",18],[")",17]],"s":[["init",10],["(",17],["wrappedValue",1],[": ",17],["M",18],[".",17],["Identifier",18],[")",17]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]]},{"p":["ReferenceField","init(from:)"],"f":[["init",10],["(",17],["from",1],[" ",17],["decoder",2],[": ",17],["Decoder",18,313],[") ",17],["throws",12]],"s":[["init",10],["(",17],["from",1],[": ",17],["Decoder",18],[") ",17],["throws",12]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]]},{"p":["Sort","init(_:by:direction:)"],"f":[["init",10],["<",17],["T",0],[">(",17],["_",1],[" ",17],["type",2],[": ",17],["Base",18],[".Type = Base.self, ",17],["by",1],[" ",17],["field",2],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["T",18],[">>, ",17],["direction",1],[": ",17],["Sorting",18,270],[".",17],["Order",18,271],[") ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryable",18,5],[", ",17],["T",18],[" : ",17],["Comparable",18,288]],"s":[["init",10],["<",17],["T",0],[">(",17],["Base",18],[".Type, ",17],["by",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["T",18],[">>, ",17],["direction",1],[": ",17],["Sorting",18],[".",17],["Order",18],[")",17]],"c":[["Base",1,"KeyPathQueryable",5],["T",1,"Comparable",288]],"g":[["Base",0,0],["T",0,1]]},{"p":["Sort","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["sorting",2],[": ",17],["Sorting",18,270],[") ",17],["where",12],[" ",17],["Base",18],[" == ",17],["Document",18,277]],"s":[["init",10],["(",17],["Sorting",18],[")",17]],"c":[["Base",2,"Document",277]],"g":[["Base",0,0]]},{"p":["Field","init(wrappedValue:)"],"f":[["init",10],["(",17],["wrappedValue",1],[": ",17],["C",18],[")",17]],"s":[["init",10],["(",17],["wrappedValue",1],[": ",17],["C",18],[")",17]],"c":[["C",1,"Decodable",297],["C",1,"Encodable",285]],"g":[["C",0,0]]},{"p":["Field","init(from:)"],"f":[["init",10],["(",17],["from",1],[" ",17],["decoder",2],[": ",17],["Decoder",18,313],[") ",17],["throws",12]],"s":[["init",10],["(",17],["from",1],[": ",17],["Decoder",18],[") ",17],["throws",12]],"c":[["C",1,"Decodable",297],["C",1,"Encodable",285]],"g":[["C",0,0]]},{"p":["Group","init(_:as:by:buildGroup:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["type",2],[": ",17],["Base",18],[".Type = Base.self, ",17],["as",1],[" ",17],["newType",2],[": ",17],["Result",18],[".Type = Result.self, ",17],["by",1],[" ",17],["value",2],[": ",17],["Primitive",18,279],[", ",17],["buildGroup",1],[": (",17],["inout",12],[" ",17],["ModelGrouper",18,24],["<",17],["Base",18],[", ",17],["Result",18],[">) ",17],["throws",12],[" -> ()) ",17],["rethrows",12],[" ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryable",18,5],[", ",17],["Result",18],[" : ",17],["KeyPathQueryable",18,5]],"s":[["init",10],["(",17],["Base",18],[".Type, ",17],["as",1],[": ",17],["Result",18],[".Type, ",17],["by",1],[": ",17],["Primitive",18],[", ",17],["buildGroup",1],[": (",17],["inout",12],[" ",17],["ModelGrouper",18],["<",17],["Base",18],[", ",17],["Result",18],[">) ",17],["throws",12],[" -> ()) ",17],["rethrows",12]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5]],"g":[["Base",0,0],["Result",1,0]]},{"p":["Limit","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["n",2],[": ",17],["Int",18,300],[")",17]],"s":[["init",10],["(",17],["Int",18],[")",17]],"c":[["Base",1,"Decodable",297],["Base",1,"Encodable",285]],"g":[["Base",0,0]]},{"p":["Match","init(_:matching:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["type",2],[": ",17],["Base",18],[".Type = Base.self, ",17],["matching",1],[": (",17],["QueryMatcher",18,27],["<",17],["Base",18],[">) ",17],["throws",12],[" -> ",17],["Document",18,277],[") ",17],["rethrows",12],[" ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryable",18,5]],"s":[["init",10],["(",17],["Base",18],[".Type, ",17],["matching",1],[": (",17],["QueryMatcher",18],["<",17],["Base",18],[">) ",17],["throws",12],[" -> ",17],["Document",18],[") ",17],["rethrows",12]],"c":[["Base",1,"KeyPathQueryable",5]],"g":[["Base",0,0]]},{"p":["Match","init(_:matching:)"],"f":[["init",10],["<",17],["MKQ",0],[">(",17],["_",1],[" ",17],["type",2],[": ",17],["Base",18],[".Type = Base.self, ",17],["matching",1],[": (",17],["QueryMatcher",18,27],["<",17],["Base",18],[">) ",17],["throws",12],[" -> ",17],["MKQ",18],[") ",17],["rethrows",12],[" ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryable",18,5],[", ",17],["MKQ",18],[" : ",17],["MongoKittenQuery",18,265]],"s":[["init",10],["<",17],["MKQ",0],[">(",17],["Base",18],[".Type, ",17],["matching",1],[": (",17],["QueryMatcher",18],["<",17],["Base",18],[">) ",17],["throws",12],[" -> ",17],["MKQ",18],[") ",17],["rethrows",12]],"c":[["Base",1,"KeyPathQueryable",5],["MKQ",1,"MongoKittenQuery",265]],"g":[["Base",0,0],["MKQ",0,1]]},{"p":["Match","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["query",2],[": ",17],["Document",18,277],[") ",17],["where",12],[" ",17],["Base",18],[" == ",17],["Document",18,277]],"s":[["init",10],["(",17],["Document",18],[")",17]],"c":[["Base",2,"Document",277]],"g":[["Base",0,0]]},{"p":["Match","init(_:)"],"f":[["init",10],["<",17],["MKQ",0],[">(",17],["_",1],[" ",17],["query",2],[": ",17],["MKQ",18],[") ",17],["where",12],[" ",17],["Base",18],[" == ",17],["Document",18,277],[", ",17],["MKQ",18],[" : ",17],["MongoKittenQuery",18,265]],"s":[["init",10],["<",17],["MKQ",0],[">(",17],["MKQ",18],[")",17]],"c":[["Base",2,"Document",277],["MKQ",1,"MongoKittenQuery",265]],"g":[["Base",0,0],["MKQ",0,1]]},{"p":["Lookup","init(from:localField:foreignField:as:)"],"f":[["init",10],["<",17],["FieldValue",0],[", ",17],["FieldValues",0],[">(",17],["from",1],[" ",17],["type",2],[": ",17],["Foreign",18],[".Type, ",17],["localField",1],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["FieldValue",18],[">>, ",17],["foreignField",1],[": ",17],["KeyPath",18,315],["<",17],["Foreign",18],[", ",17],["QueryableField",18,31],["<",17],["FieldValue",18],[">>, ",17],["as",1],[" ",17],["asField",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["FieldValues",18],[">>) ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["Foreign",18],[" == ",17],["FieldValues",18],[".",17],["Element",18],[", ",17],["FieldValues",18],[" : ",17],["Sequence",18,293]],"s":[["init",10],["<",17],["FieldValue",0],[", ",17],["FieldValues",0],[">(",17],["from",1],[": ",17],["Foreign",18],[".Type, ",17],["localField",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["FieldValue",18],[">>, ",17],["foreignField",1],[": ",17],["KeyPath",18],["<",17],["Foreign",18],[", ",17],["QueryableField",18],["<",17],["FieldValue",18],[">>, ",17],["as",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["FieldValues",18],[">>)",17]],"e":[["Base",1,"Decodable",297],["Base",1,"Encodable",285],["Foreign",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryable",5]],"c":[["Base",1,"KeyPathQueryableModel",6],["Foreign",1,"KeyPathQueryableModel",6],["Foreign",2,"FieldValues.Element"],["Result",1,"KeyPathQueryable",5],["FieldValues",1,"Sequence",293]],"g":[["Base",0,0],["Foreign",1,0],["Result",2,0],["FieldValue",0,1],["FieldValues",1,1]]},{"p":["Lookup","init(from:localField:foreignField:as:)"],"f":[["init",10],["<",17],["FieldValue",0],[", ",17],["FieldValues",0],[">(",17],["from",1],[" ",17],["type",2],[": ",17],["Foreign",18],[".Type, ",17],["localField",1],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["FieldValue",18],[">>, ",17],["foreignField",1],[": ",17],["KeyPath",18,315],["<",17],["Foreign",18],[", ",17],["QueryableField",18,31],["<",17],["FieldValue",18],[">>, ",17],["as",1],[" ",17],["asField",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["FieldValues",18],["?>>) ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["Foreign",18],[" == ",17],["FieldValues",18],[".",17],["Element",18],[", ",17],["FieldValues",18],[" : ",17],["Sequence",18,293]],"s":[["init",10],["<",17],["FieldValue",0],[", ",17],["FieldValues",0],[">(",17],["from",1],[": ",17],["Foreign",18],[".Type, ",17],["localField",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["FieldValue",18],[">>, ",17],["foreignField",1],[": ",17],["KeyPath",18],["<",17],["Foreign",18],[", ",17],["QueryableField",18],["<",17],["FieldValue",18],[">>, ",17],["as",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["FieldValues",18],["?>>)",17]],"e":[["Base",1,"Decodable",297],["Base",1,"Encodable",285],["Foreign",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryable",5]],"c":[["Base",1,"KeyPathQueryableModel",6],["Foreign",1,"KeyPathQueryableModel",6],["Foreign",2,"FieldValues.Element"],["Result",1,"KeyPathQueryable",5],["FieldValues",1,"Sequence",293]],"g":[["Base",0,0],["Foreign",1,0],["Result",2,0],["FieldValue",0,1],["FieldValues",1,1]]},{"p":["Lookup","init(from:localField:foreignField:pipeline:as:)"],"f":[["init",10],["<",17],["M",0],[", ",17],["Field",0],[", ",17],["Fields",0],[">(",17],["from",1],[" ",17],["type",2],[": ",17],["Foreign",18],[".Type, ",17],["localField",1],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["M",18],[".",17],["Identifier",18],[">>, ",17],["foreignField",1],[": ",17],["KeyPath",18,315],["<",17],["Foreign",18],[", ",17],["QueryableField",18,31],["<",17],["Reference",18,44],["<",17],["M",18],[">>>, ",17],["pipeline",1],[": () ",17],["throws",12],[" -> ",17],["MeowAggregate",18,23],["<",17],["Foreign",18],[", ",17],["Field",18],[">, ",17],["as",1],[" ",17],["asField",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["Fields",18],[">>) ",17],["rethrows",12],[" ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["M",18],[" : ",17],["ReadableModel",18,3],[", ",17],["Field",18],[" : ",17],["Decodable",18,297],[", ",17],["Field",18],[" : ",17],["Encodable",18,285],[", ",17],["Field",18],[" == ",17],["Fields",18],[".",17],["Element",18],[", ",17],["Fields",18],[" : ",17],["Sequence",18,293]],"s":[["init",10],["<",17],["M",0],[", ",17],["Field",0],[", ",17],["Fields",0],[">(",17],["from",1],[": ",17],["Foreign",18],[".Type, ",17],["localField",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["M",18],[".",17],["Identifier",18],[">>, ",17],["foreignField",1],[": ",17],["KeyPath",18],["<",17],["Foreign",18],[", ",17],["QueryableField",18],["<",17],["Reference",18],["<",17],["M",18],[">>>, ",17],["pipeline",1],[": () ",17],["throws",12],[" -> ",17],["MeowAggregate",18],["<",17],["Foreign",18],[", ",17],["Field",18],[">, ",17],["as",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["Fields",18],[">>) ",17],["rethrows",12]],"e":[["Base",1,"Decodable",297],["Base",1,"Encodable",285],["Foreign",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryable",5]],"c":[["Base",1,"KeyPathQueryableModel",6],["Foreign",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryable",5],["M",1,"ReadableModel",3],["Field",1,"Decodable",297],["Field",1,"Encodable",285],["Field",2,"Fields.Element"],["Fields",1,"Sequence",293]],"g":[["Base",0,0],["Foreign",1,0],["Result",2,0],["M",0,1],["Field",1,1],["Fields",2,1]]},{"p":["Lookup","init(from:localField:foreignField:pipeline:as:)"],"f":[["init",10],["<",17],["Match",0],[", ",17],["Field",0],[">(",17],["from",1],[" ",17],["type",2],[": ",17],["Foreign",18],[".Type, ",17],["localField",1],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["Match",18],[">>, ",17],["foreignField",1],[": ",17],["KeyPath",18,315],["<",17],["Foreign",18],[", ",17],["QueryableField",18,31],["<",17],["Match",18],[">>, ",17],["pipeline",1],[": () ",17],["throws",12],[" -> ",17],["MeowAggregate",18,23],["<",17],["Foreign",18],[", ",17],["Field",18],[">, ",17],["as",1],[" ",17],["asField",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["Field",18],[">>) ",17],["rethrows",12],[" ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["Field",18],[" : ",17],["Decodable",18,297],[", ",17],["Field",18],[" : ",17],["Encodable",18,285]],"s":[["init",10],["<",17],["Match",0],[", ",17],["Field",0],[">(",17],["from",1],[": ",17],["Foreign",18],[".Type, ",17],["localField",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["Match",18],[">>, ",17],["foreignField",1],[": ",17],["KeyPath",18],["<",17],["Foreign",18],[", ",17],["QueryableField",18],["<",17],["Match",18],[">>, ",17],["pipeline",1],[": () ",17],["throws",12],[" -> ",17],["MeowAggregate",18],["<",17],["Foreign",18],[", ",17],["Field",18],[">, ",17],["as",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["Field",18],[">>) ",17],["rethrows",12]],"e":[["Base",1,"Decodable",297],["Base",1,"Encodable",285],["Foreign",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryable",5]],"c":[["Base",1,"KeyPathQueryableModel",6],["Foreign",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryable",5],["Field",1,"Decodable",297],["Field",1,"Encodable",285]],"g":[["Base",0,0],["Foreign",1,0],["Result",2,0],["Match",0,1],["Field",1,1]]},{"p":["Lookup","init(from:localIdentifier:as:)"],"f":[["init",10],["<",17],["FieldValues",0],[">(",17],["from",1],[" ",17],["type",2],[": ",17],["Foreign",18],[".Type, ",17],["localIdentifier",1],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["Reference",18,44],["<",17],["Foreign",18],[">>>, ",17],["as",1],[" ",17],["asField",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["FieldValues",18],[">>) ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["Foreign",18],[" == ",17],["FieldValues",18],[".",17],["Element",18],[", ",17],["FieldValues",18],[" : ",17],["Sequence",18,293]],"s":[["init",10],["<",17],["FieldValues",0],[">(",17],["from",1],[": ",17],["Foreign",18],[".Type, ",17],["localIdentifier",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["Reference",18],["<",17],["Foreign",18],[">>>, ",17],["as",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["FieldValues",18],[">>)",17]],"e":[["Base",1,"Decodable",297],["Base",1,"Encodable",285],["Foreign",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryable",5]],"c":[["Base",1,"KeyPathQueryableModel",6],["Foreign",1,"KeyPathQueryableModel",6],["Foreign",2,"FieldValues.Element"],["Result",1,"KeyPathQueryable",5],["FieldValues",1,"Sequence",293]],"g":[["Base",0,0],["Foreign",1,0],["Result",2,0],["FieldValues",0,1]]},{"p":["Lookup","init(from:localIdentifier:as:)"],"f":[["init",10],["<",17],["FieldValues",0],[">(",17],["from",1],[" ",17],["type",2],[": ",17],["Foreign",18],[".Type, ",17],["localIdentifier",1],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["Reference",18,44],["<",17],["Foreign",18],[">>>, ",17],["as",1],[" ",17],["asField",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["FieldValues",18],["?>>) ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["Foreign",18],[" == ",17],["FieldValues",18],[".",17],["Element",18],[", ",17],["FieldValues",18],[" : ",17],["Sequence",18,293]],"s":[["init",10],["<",17],["FieldValues",0],[">(",17],["from",1],[": ",17],["Foreign",18],[".Type, ",17],["localIdentifier",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["Reference",18],["<",17],["Foreign",18],[">>>, ",17],["as",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["FieldValues",18],["?>>)",17]],"e":[["Base",1,"Decodable",297],["Base",1,"Encodable",285],["Foreign",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryable",5]],"c":[["Base",1,"KeyPathQueryableModel",6],["Foreign",1,"KeyPathQueryableModel",6],["Foreign",2,"FieldValues.Element"],["Result",1,"KeyPathQueryable",5],["FieldValues",1,"Sequence",293]],"g":[["Base",0,0],["Foreign",1,0],["Result",2,0],["FieldValues",0,1]]},{"p":["Lookup","init(from:localIdentifier:as:)"],"f":[["init",10],["<",17],["FieldValues",0],[">(",17],["from",1],[" ",17],["type",2],[": ",17],["Foreign",18],[".Type, ",17],["localIdentifier",1],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["Reference",18,44],["<",17],["Foreign",18],[">?>>, ",17],["as",1],[" ",17],["asField",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["FieldValues",18],[">>) ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["Foreign",18],[" == ",17],["FieldValues",18],[".",17],["Element",18],[", ",17],["FieldValues",18],[" : ",17],["Sequence",18,293]],"s":[["init",10],["<",17],["FieldValues",0],[">(",17],["from",1],[": ",17],["Foreign",18],[".Type, ",17],["localIdentifier",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["Reference",18],["<",17],["Foreign",18],[">?>>, ",17],["as",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["FieldValues",18],[">>)",17]],"e":[["Base",1,"Decodable",297],["Base",1,"Encodable",285],["Foreign",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryable",5]],"c":[["Base",1,"KeyPathQueryableModel",6],["Foreign",1,"KeyPathQueryableModel",6],["Foreign",2,"FieldValues.Element"],["Result",1,"KeyPathQueryable",5],["FieldValues",1,"Sequence",293]],"g":[["Base",0,0],["Foreign",1,0],["Result",2,0],["FieldValues",0,1]]},{"p":["Lookup","init(from:localIdentifier:as:)"],"f":[["init",10],["<",17],["FieldValues",0],[">(",17],["from",1],[" ",17],["type",2],[": ",17],["Foreign",18],[".Type, ",17],["localIdentifier",1],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["Reference",18,44],["<",17],["Foreign",18],[">?>>, ",17],["as",1],[" ",17],["asField",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["FieldValues",18],["?>>) ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["Foreign",18],[" == ",17],["FieldValues",18],[".",17],["Element",18],[", ",17],["FieldValues",18],[" : ",17],["Sequence",18,293]],"s":[["init",10],["<",17],["FieldValues",0],[">(",17],["from",1],[": ",17],["Foreign",18],[".Type, ",17],["localIdentifier",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["Reference",18],["<",17],["Foreign",18],[">?>>, ",17],["as",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["FieldValues",18],["?>>)",17]],"e":[["Base",1,"Decodable",297],["Base",1,"Encodable",285],["Foreign",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryable",5]],"c":[["Base",1,"KeyPathQueryableModel",6],["Foreign",1,"KeyPathQueryableModel",6],["Foreign",2,"FieldValues.Element"],["Result",1,"KeyPathQueryable",5],["FieldValues",1,"Sequence",293]],"g":[["Base",0,0],["Foreign",1,0],["Result",2,0],["FieldValues",0,1]]},{"p":["Lookup","init(from:localIdentifier:as:)"],"f":[["init",10],["<",17],["FieldValues",0],[">(",17],["from",1],[" ",17],["type",2],[": ",17],["Foreign",18],[".Type, ",17],["localIdentifier",1],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<[",17],["Reference",18,44],["<",17],["Foreign",18],[">]>>, ",17],["as",1],[" ",17],["asField",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["FieldValues",18],[">>) ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["Foreign",18],[" == ",17],["FieldValues",18],[".",17],["Element",18],[", ",17],["FieldValues",18],[" : ",17],["Sequence",18,293]],"s":[["init",10],["<",17],["FieldValues",0],[">(",17],["from",1],[": ",17],["Foreign",18],[".Type, ",17],["localIdentifier",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<[",17],["Reference",18],["<",17],["Foreign",18],[">]>>, ",17],["as",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["FieldValues",18],[">>)",17]],"e":[["Base",1,"Decodable",297],["Base",1,"Encodable",285],["Foreign",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryable",5]],"c":[["Base",1,"KeyPathQueryableModel",6],["Foreign",1,"KeyPathQueryableModel",6],["Foreign",2,"FieldValues.Element"],["Result",1,"KeyPathQueryable",5],["FieldValues",1,"Sequence",293]],"g":[["Base",0,0],["Foreign",1,0],["Result",2,0],["FieldValues",0,1]]},{"p":["Lookup","init(from:localIdentifier:as:)"],"f":[["init",10],["<",17],["FieldValues",0],[">(",17],["from",1],[" ",17],["type",2],[": ",17],["Foreign",18],[".Type, ",17],["localIdentifier",1],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<[",17],["Reference",18,44],["<",17],["Foreign",18],[">]>>, ",17],["as",1],[" ",17],["asField",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["FieldValues",18],["?>>) ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["Foreign",18],[" == ",17],["FieldValues",18],[".",17],["Element",18],[", ",17],["FieldValues",18],[" : ",17],["Sequence",18,293]],"s":[["init",10],["<",17],["FieldValues",0],[">(",17],["from",1],[": ",17],["Foreign",18],[".Type, ",17],["localIdentifier",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<[",17],["Reference",18],["<",17],["Foreign",18],[">]>>, ",17],["as",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["FieldValues",18],["?>>)",17]],"e":[["Base",1,"Decodable",297],["Base",1,"Encodable",285],["Foreign",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryable",5]],"c":[["Base",1,"KeyPathQueryableModel",6],["Foreign",1,"KeyPathQueryableModel",6],["Foreign",2,"FieldValues.Element"],["Result",1,"KeyPathQueryable",5],["FieldValues",1,"Sequence",293]],"g":[["Base",0,0],["Foreign",1,0],["Result",2,0],["FieldValues",0,1]]},{"p":["Unwind","init(from:into:)"],"f":[["init",10],["<",17],["Value",0],[", ",17],["Values",0],[">(",17],["from",1],[" ",17],["base",2],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["Values",18],[">>, ",17],["into",1],[" ",17],["result",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["Value",18],[">>) ",17],["where",12],[" ",17],["Value",18],[" == ",17],["Values",18],[".",17],["Element",18],[", ",17],["Values",18],[" : ",17],["Sequence",18,293]],"s":[["init",10],["<",17],["Value",0],[", ",17],["Values",0],[">(",17],["from",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["Values",18],[">>, ",17],["into",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["Value",18],[">>)",17]],"c":[["Base",1,"KeyPathQueryableModel",6],["Result",1,"KeyPathQueryableModel",6],["Value",2,"Values.Element"],["Values",1,"Sequence",293]],"g":[["Base",0,0],["Result",1,0],["Value",0,1],["Values",1,1]]},{"p":["Project","init(_:as:buildMapping:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["type",2],[": ",17],["Base",18],[".Type = Base.self, ",17],["as",1],[" ",17],["newType",2],[": ",17],["Result",18],[".Type = Result.self, ",17],["buildMapping",1],[": (",17],["inout",12],[" ",17],["ModelProjector",18,30],["<",17],["Base",18],[", ",17],["Result",18],[">) ",17],["throws",12],[" -> ()) ",17],["rethrows",12],[" ",17],["where",12],[" ",17],["Base",18],[" : ",17],["KeyPathQueryable",18,5],[", ",17],["Result",18],[" : ",17],["KeyPathQueryable",18,5]],"s":[["init",10],["(",17],["Base",18],[".Type, ",17],["as",1],[": ",17],["Result",18],[".Type, ",17],["buildMapping",1],[": (",17],["inout",12],[" ",17],["ModelProjector",18],["<",17],["Base",18],[", ",17],["Result",18],[">) ",17],["throws",12],[" -> ()) ",17],["rethrows",12]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5]],"g":[["Base",0,0],["Result",1,0]]},{"p":["Project","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["projection",2],[": ",17],["Projection",18,266],[") ",17],["where",12],[" ",17],["Base",18],[" == ",17],["Document",18,277],[", ",17],["Result",18],[" == ",17],["Document",18,277]],"s":[["init",10],["(",17],["Projection",18],[")",17]],"c":[["Base",2,"Document",277],["Result",2,"Document",277]],"g":[["Base",0,0],["Result",1,0]]},{"p":["Migrator","init(database:)"],"f":[["init",10],["(",17],["database",1],[": ",17],["MeowDatabase",18,46],[")",17]],"s":[["init",10],["(",17],["database",1],[": ",17],["MeowDatabase",18],[")",17]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]]},{"p":["Reference","init(to:)"],"f":[["init",10],["(",17],["to",1],[" ",17],["entity",2],[": ",17],["M",18],[")",17]],"s":[["init",10],["(",17],["to",1],[": ",17],["M",18],[")",17]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]],"d":"Creates a reference to an entity"},{"p":["Reference","init(from:)"],"f":[["init",10],["(",17],["from",1],[" ",17],["decoder",2],[": ",17],["Decoder",18,313],[") ",17],["throws",12]],"s":[["init",10],["(",17],["from",1],[": ",17],["Decoder",18],[") ",17],["throws",12]],"e":[["M",1,"ReadableModel",3]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]]},{"p":["Reference","init(unsafeTo:)"],"f":[["init",10],["(",17],["unsafeTo",1],[" ",17],["target",2],[": ",17],["M",18],[".",17],["Identifier",18],[")",17]],"s":[["init",10],["(",17],["unsafeTo",1],[": ",17],["M",18],[".",17],["Identifier",18],[")",17]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]],"d":"Creates an unchecked reference to an entity"},{"p":["Reference","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["description",2],[": ",17],["String",18,292],[")",17]],"s":[["init",10],["?(",17],["String",18],[")",17]],"e":[["M",1,"ReadableModel",3],["M.Identifier",1,"LosslessStringConvertible",307]],"c":[["M",1,"ReadableModel",3],["M.Identifier",1,"LosslessStringConvertible",307]],"g":[["M",0,0]]},{"p":["MeowDatabase","subscript(_:)"],"f":[["subscript",10],["<",17],["M",0],[">(",17],["type",2],[": ",17],["M",18],[".Type) -> ",17],["MeowCollection",18,18],["<",17],["M",18],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["BaseModel",18,8],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["<",17],["M",0],[">(",17],["M",18],[".Type) -> ",17],["MeowCollection",18],["<",17],["M",18],[">",17]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]]},{"p":["ModelUpdater","subscript(dynamicMember:)"],"f":[["subscript",10],["<",17],["P",0],[">(",17],["dynamicMember",1],[" ",17],["keyPath",2],[": ",17],["WritableKeyPath",18,302],["<",17],["M",18],[", ",17],["QueryableField",18,31],["<",17],["P",18],[">>) -> ",17],["P",18],[" ",17],["where",12],[" ",17],["P",18],[" : ",17],["Primitive",18,279],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["subscript",10],["<",17],["P",0],[">(",17],["dynamicMember",1],[" _: ",17],["WritableKeyPath",18],["<",17],["M",18],[", ",17],["QueryableField",18],["<",17],["P",18],[">>) -> ",17],["P",18]],"c":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2],["P",1,"Primitive",279]],"g":[["M",0,0],["P",0,1]]},{"p":["QueryMatcher","subscript(dynamicMember:)"],"f":[["subscript",10],["<",17],["T",0],[">(",17],["dynamicMember",1],[" ",17],["keyPath",2],[": ",17],["KeyPath",18,315],["<",17],["M",18],[", ",17],["QueryableField",18,31],["<",17],["T",18],[">>) -> ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["T",18],["> { ",17],["get",12],[" }",17]],"s":[["subscript",10],["<",17],["T",0],[">(",17],["dynamicMember",1],[" _: ",17],["KeyPath",18],["<",17],["M",18],[", ",17],["QueryableField",18],["<",17],["T",18],[">>) -> ",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["T",18],[">",17]],"c":[["M",1,"KeyPathQueryable",5]],"g":[["M",0,0],["T",0,1]]},{"p":["QuerySubject","subscript(dynamicMember:)"],"f":[["subscript",10],["<",17],["New",0],[">(",17],["dynamicMember",1],[" ",17],["keyPath",2],[": ",17],["KeyPath",18,315],["<",17],["T",18],[", ",17],["QueryableField",18,31],["<",17],["New",18],[">>) -> ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["New",18],["> ",17],["where",12],[" ",17],["T",18],[" : ",17],["KeyPathQueryable",18,5],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["<",17],["New",0],[">(",17],["dynamicMember",1],[" _: ",17],["KeyPath",18],["<",17],["T",18],[", ",17],["QueryableField",18],["<",17],["New",18],[">>) -> ",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["New",18],[">",17]],"c":[["M",1,"KeyPathQueryable",5],["T",1,"KeyPathQueryable",5]],"g":[["M",0,0],["T",1,0],["New",0,1]]},{"p":["QueryableField","subscript(dynamicMember:)"],"f":[["subscript",10],["<",17],["T",0],[">(",17],["dynamicMember",1],[" ",17],["keyPath",2],[": ",17],["KeyPath",18,315],["<",17],["Value",18],[", ",17],["QueryableField",18,31],["<",17],["T",18],[">>) -> ",17],["QueryableField",18,31],["<",17],["T",18],["> { ",17],["get",12],[" }",17]],"s":[["subscript",10],["<",17],["T",0],[">(",17],["dynamicMember",1],[" _: ",17],["KeyPath",18],["<",17],["Value",18],[", ",17],["QueryableField",18],["<",17],["T",18],[">>) -> ",17],["QueryableField",18],["<",17],["T",18],[">",17]],"g":[["Value",0,0],["T",0,1]]},{"p":["MutableModel","encoder"],"f":[["static",12],[" ",17],["var",12],[" ",17],["encoder",7],[": ",17],["BSONEncoder",18,274],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["encoder",7],[": ",17],["BSONEncoder",18]]},{"p":["MutableModel","encoder"],"f":[["static",12],[" ",17],["var",12],[" ",17],["encoder",7],[": ",17],["BSONEncoder",18,274],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["encoder",7],[": ",17],["BSONEncoder",18]]},{"p":["ReadableModel","decoder"],"f":[["static",12],[" ",17],["var",12],[" ",17],["decoder",7],[": ",17],["BSONDecoder",18,273],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["decoder",7],[": ",17],["BSONDecoder",18]]},{"p":["ReadableModel","decoder"],"f":[["static",12],[" ",17],["var",12],[" ",17],["decoder",7],[": ",17],["BSONDecoder",18,273],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["decoder",7],[": ",17],["BSONDecoder",18]]},{"p":["BaseModel","collectionName"],"f":[["static",12],[" ",17],["var",12],[" ",17],["collectionName",7],[": ",17],["String",18,292],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["collectionName",7],[": ",17],["String",18]],"d":"The collection name instances of the model live in. A default implementation is provided.\n\nThe default collection name is the model's type name"},{"p":["BaseModel","collectionName"],"f":[["static",12],[" ",17],["var",12],[" ",17],["collectionName",7],[": ",17],["String",18,292],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["collectionName",7],[": ",17],["String",18]],"d":"The default collection name is the model's type name"},{"p":["MeowCollection","raw"],"f":[["let",12],[" ",17],["raw",7],[": ",17],["MongoCollection",18,255]],"s":[["let",12],[" ",17],["raw",7],[": ",17],["MongoCollection",18]]},{"p":["MeowCollection","name"],"f":[["let",12],[" ",17],["name",7],[": ",17],["String",18,292]],"s":[["let",12],[" ",17],["name",7],[": ",17],["String",18]]},{"p":["MeowCollection","database"],"f":[["let",12],[" ",17],["database",7],[": ",17],["MeowDatabase",18,46]],"s":[["let",12],[" ",17],["database",7],[": ",17],["MeowDatabase",18]]},{"p":["MeowOperationResult","writeErrors"],"f":[["let",12],[" ",17],["writeErrors",7],[": [",17],["MongoWriteError",18,280],["]?",17]],"s":[["let",12],[" ",17],["writeErrors",7],[": [",17],["MongoWriteError",18],["]?",17]]},{"p":["MeowOperationResult","n"],"f":[["let",12],[" ",17],["n",7],[": ",17],["Int",18,300]],"s":[["let",12],[" ",17],["n",7],[": ",17],["Int",18]]},{"p":["MeowOperationResult","success"],"f":[["let",12],[" ",17],["success",7],[": ",17],["Bool",18,296]],"s":[["let",12],[" ",17],["success",7],[": ",17],["Bool",18]]},{"p":["MeowDatabase","raw"],"f":[["let",12],[" ",17],["raw",7],[": ",17],["MongoDatabase",18,256]],"s":[["let",12],[" ",17],["raw",7],[": ",17],["MongoDatabase",18]]},{"p":["PartialModel","document"],"f":[["var",12],[" ",17],["document",7],[": ",17],["Document",18,277],[" { get }",17]],"s":[["var",12],[" ",17],["document",7],[": ",17],["Document",18]]},{"p":["QuerySubject","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["QuerySubjectSizeComparator",18,35],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["QuerySubjectSizeComparator",18]],"e":[["M",1,"KeyPathQueryable",5],["T",1,"Sequence",293]],"d":"Produces a query expression that counts the amount of entities in this array"},{"p":["ReferenceField","wrappedValue"],"f":[["var",12],[" ",17],["wrappedValue",7],[": ",17],["M",18],[".",17],["Identifier",18],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["wrappedValue",7],[": ",17],["M",18],[".",17],["Identifier",18]]},{"p":["ReferenceField","projectedValue"],"f":[["var",12],[" ",17],["projectedValue",7],[": ",17],["QueryableField",18,31],["<",17],["M",18],[".",17],["Identifier",18],["> { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["projectedValue",7],[": ",17],["QueryableField",18],["<",17],["M",18],[".",17],["Identifier",18],[">",17]]},{"p":["ReferenceField","key"],"f":[["let",12],[" ",17],["key",7],[": ",17],["String",18,292],["?",17]],"s":[["let",12],[" ",17],["key",7],[": ",17],["String",18],["?",17]]},{"p":["QuerySubjectComparator","comparator"],"f":[["var",12],[" ",17],["comparator",7],[": ",17],["QuerySubjectComparison",18,34],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["comparator",7],[": ",17],["QuerySubjectComparison",18]]},{"p":["QuerySubjectComparator","path"],"f":[["var",12],[" ",17],["path",7],[": ",17],["FieldPath",18,272],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["path",7],[": ",17],["FieldPath",18]]},{"p":["QuerySubjectSizeComparator","comparator"],"f":[["var",12],[" ",17],["comparator",7],[": ",17],["QuerySubjectComparison",18,34],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["comparator",7],[": ",17],["QuerySubjectComparison",18]]},{"p":["QuerySubjectSizeComparator","path"],"f":[["let",12],[" ",17],["path",7],[": ",17],["FieldPath",18,272]],"s":[["let",12],[" ",17],["path",7],[": ",17],["FieldPath",18]]},{"p":["Sort","minimalVersionRequired"],"f":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18,283],["? { get }",17]],"s":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18],["?",17]]},{"p":["Sort","stage"],"f":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18,277],[" { get }",17]],"s":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18]]},{"p":["Field","wrappedValue"],"f":[["var",12],[" ",17],["wrappedValue",7],[": ",17],["C",18],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["wrappedValue",7],[": ",17],["C",18]]},{"p":["Field","projectedValue"],"f":[["var",12],[" ",17],["projectedValue",7],[": ",17],["QueryableField",18,31],["<",17],["C",18],["> { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["projectedValue",7],[": ",17],["QueryableField",18],["<",17],["C",18],[">",17]]},{"p":["Field","key"],"f":[["let",12],[" ",17],["key",7],[": ",17],["String",18,292],["?",17]],"s":[["let",12],[" ",17],["key",7],[": ",17],["String",18],["?",17]]},{"p":["Group","minimalVersionRequired"],"f":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18,283],["? { get }",17]],"s":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18],["?",17]]},{"p":["Group","stage"],"f":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18,277],[" { get }",17]],"s":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18]]},{"p":["Limit","minimalVersionRequired"],"f":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18,283],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18],["?",17]]},{"p":["Limit","stage"],"f":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18,277],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18]]},{"p":["Match","minimalVersionRequired"],"f":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18,283],["? { get }",17]],"s":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18],["?",17]]},{"p":["Match","stage"],"f":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18,277],[" { get }",17]],"s":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18]]},{"p":["Lookup","minimalVersionRequired"],"f":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18,283],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18],["?",17]]},{"p":["Lookup","stage"],"f":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18,277],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18]]},{"p":["Unwind","minimalVersionRequired"],"f":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18,283],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18],["?",17]]},{"p":["Unwind","stage"],"f":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18,277],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18]]},{"p":["Project","minimalVersionRequired"],"f":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18,283],["? { get }",17]],"s":[["var",12],[" ",17],["minimalVersionRequired",7],[": ",17],["WireVersion",18],["?",17]]},{"p":["Project","stage"],"f":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18,277],[" { get }",17]],"s":[["var",12],[" ",17],["stage",7],[": ",17],["Document",18]]},{"p":["Migrator","database"],"f":[["let",12],[" ",17],["database",7],[": ",17],["MeowDatabase",18,46]],"s":[["let",12],[" ",17],["database",7],[": ",17],["MeowDatabase",18]]},{"p":["Reference","reference"],"f":[["let",12],[" ",17],["reference",7],[": ",17],["M",18],[".",17],["Identifier",18]],"s":[["let",12],[" ",17],["reference",7],[": ",17],["M",18],[".",17],["Identifier",18]],"d":"The referenced id"},{"p":["Reference","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,292],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"e":[["M",1,"ReadableModel",3],["M.Identifier",1,"CustomStringConvertible",304]]},{"p":["MeowCheckedAggregateBuilder","buildPartialBlock(accumulated:next:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildPartialBlock",7],["<",17],["PreviousResult",0],[", ",17],["Stage",0],[">(",17],["accumulated",1],[" ",17],["base",2],[": ",17],["MeowAggregate",18,23],["<",17],["M",18],[", ",17],["PreviousResult",18],[">, ",17],["next",1],[": ",17],["Stage",18],[") -> ",17],["MeowAggregate",18,23],["<",17],["M",18],[", ",17],["Stage",18],[".",17],["Result",18],["> ",17],["where",12],[" ",17],["PreviousResult",18],[" == ",17],["Stage",18],[".",17],["Base",18],[", ",17],["Stage",18],[" : ",17],["MeowAggregateStage",18,0]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildPartialBlock",7],["<",17],["PreviousResult",0],[", ",17],["Stage",0],[">(",17],["accumulated",1],[": ",17],["MeowAggregate",18],["<",17],["M",18],[", ",17],["PreviousResult",18],[">, ",17],["next",1],[": ",17],["Stage",18],[") -> ",17],["MeowAggregate",18],["<",17],["M",18],[", ",17],["Stage",18],[".",17],["Result",18],[">",17]],"c":[["M",1,"KeyPathQueryableModel",6],["PreviousResult",2,"Stage.Base"],["Stage",1,"MeowAggregateStage",0]],"g":[["M",0,0],["PreviousResult",0,1],["Stage",1,1]]},{"p":["MeowCheckedAggregateBuilder","buildPartialBlock(first:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildPartialBlock",7],["<",17],["Stage",0],[">(",17],["first",1],[" ",17],["stage",2],[": ",17],["Stage",18],[") -> ",17],["MeowAggregate",18,23],["<",17],["M",18],[", ",17],["Stage",18],[".",17],["Result",18],["> ",17],["where",12],[" ",17],["M",18],[" == ",17],["Stage",18],[".",17],["Base",18],[", ",17],["Stage",18],[" : ",17],["MeowAggregateStage",18,0]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildPartialBlock",7],["<",17],["Stage",0],[">(",17],["first",1],[": ",17],["Stage",18],[") -> ",17],["MeowAggregate",18],["<",17],["M",18],[", ",17],["Stage",18],[".",17],["Result",18],[">",17]],"c":[["M",1,"KeyPathQueryableModel",6],["M",2,"Stage.Base"],["Stage",1,"MeowAggregateStage",0]],"g":[["M",0,0],["Stage",0,1]]},{"p":["MeowUncheckedAggregateBuilder","buildBlock(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["_",1],[" ",17],["components",2],[": ",17],["AggregateBuilderStage",18,261],["...) -> ",17],["MeowAggregate",18,23],["<",17],["M",18],[", ",17],["Document",18,277],[">",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["buildBlock",7],["(",17],["AggregateBuilderStage",18],["...) -> ",17],["MeowAggregate",18],["<",17],["M",18],[", ",17],["Document",18],[">",17]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]]},{"p":["ReadableModel","decode(from:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["decode",7],["(",17],["from",1],[" ",17],["document",2],[": ",17],["Document",18,277],[") ",17],["throws",12],[" -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["decode",7],["(",17],["from",1],[": ",17],["Document",18],[") ",17],["throws",12],[" -> ",17],["Self",18]]},{"p":["ReadableModel","count(where:in:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["count",7],["(",17],["where",1],[" ",17],["filter",2],[": ",17],["Document",18,277],[" = Document(), ",17],["in",1],[" ",17],["database",2],[": ",17],["MeowDatabase",18,46],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Int",18,300]],"s":[["static",12],[" ",17],["func",12],[" ",17],["count",7],["(",17],["where",1],[": ",17],["Document",18],[", ",17],["in",1],[": ",17],["MeowDatabase",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Int",18]],"d":"Counts all instances of `Self` matching `filter` within the provided `database`"},{"p":["ReadableModel","count(where:in:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["count",7],["<",17],["Q",0],[">(",17],["where",1],[" ",17],["filter",2],[": ",17],["Q",18],[", ",17],["in",1],[" ",17],["database",2],[": ",17],["MeowDatabase",18,46],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Int",18,300],[" ",17],["where",12],[" ",17],["Q",18],[" : ",17],["MongoKittenQuery",18,265]],"s":[["static",12],[" ",17],["func",12],[" ",17],["count",7],["<",17],["Q",0],[">(",17],["where",1],[": ",17],["Q",18],[", ",17],["in",1],[": ",17],["MeowDatabase",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Int",18]],"c":[["Q",1,"MongoKittenQuery",265]],"g":[["Q",0,1]],"d":"Counts all instances of `Self` matching `filter` within the provided `database`"},{"p":["ReadableModel","watch(options:in:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["watch",7],["(",17],["options",1],[": ",17],["ChangeStreamOptions",18,260],[" = .init(), ",17],["in",1],[" ",17],["database",2],[": ",17],["MeowDatabase",18,46],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChangeStream",18,257],["<",17],["Self",18],[">",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["watch",7],["(",17],["options",1],[": ",17],["ChangeStreamOptions",18],[", ",17],["in",1],[": ",17],["MeowDatabase",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChangeStream",18],["<",17],["Self",18],[">",17]],"d":"Creates a `ChangeStream`,watching for any and all changes to this Model's collection within `database`\n\n- Note: Only works in replica set environments"},{"p":["ReadableModel","decode(from:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["decode",7],["(",17],["from",1],[" ",17],["document",2],[": ",17],["Document",18,277],[") ",17],["throws",12],[" -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["decode",7],["(",17],["from",1],[": ",17],["Document",18],[") ",17],["throws",12],[" -> ",17],["Self",18]]},{"p":["KeyPathQueryable","resolveFieldPath(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["resolveFieldPath",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["field",2],[": ",17],["KeyPath",18,315],["<",17],["Self",18],[", ",17],["Field",18,37],["<",17],["T",18],[">>) -> [",17],["String",18,292],["] ",17],["where",12],[" ",17],["T",18],[" : ",17],["Decodable",18,297],[", ",17],["T",18],[" : ",17],["Encodable",18,285]],"s":[["static",12],[" ",17],["func",12],[" ",17],["resolveFieldPath",7],["<",17],["T",0],[">(",17],["KeyPath",18],["<",17],["Self",18],[", ",17],["Field",18],["<",17],["T",18],[">>) -> [",17],["String",18],["]",17]],"c":[["T",1,"Decodable",297],["T",1,"Encodable",285]],"g":[["T",0,1]],"d":"Resolves a Field into `[String]` path.\n\n- Note: Crashes if the model does not implement Meow's `@Field` property wrapper on all properties"},{"p":["KeyPathQueryable","resolveFieldPath(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["resolveFieldPath",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["field",2],[": ",17],["KeyPath",18,315],["<",17],["Self",18],[", ",17],["QueryableField",18,31],["<",17],["T",18],[">>) -> [",17],["String",18,292],["]",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["resolveFieldPath",7],["<",17],["T",0],[">(",17],["KeyPath",18],["<",17],["Self",18],[", ",17],["QueryableField",18],["<",17],["T",18],[">>) -> [",17],["String",18],["]",17]],"g":[["T",0,1]],"d":"Resolves a QueryableField into `[String]` path.\n\n- Note: Crashes if the model does not implement Meow's `@Field` property wrapper on all properties"},{"p":["MeowCollection","insertMany(_:writeConcern:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["insertMany",7],["(",17],["_",1],[" ",17],["instances",2],[": [",17],["M",18],["], ",17],["writeConcern",1],[": ",17],["WriteConcern",18,284],["? = nil) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["InsertReply",18,268]],"s":[["func",12],[" ",17],["insertMany",7],["([",17],["M",18],["], ",17],["writeConcern",1],[": ",17],["WriteConcern",18],["?) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["InsertReply",18]],"e":[["M",1,"MutableModel",2]],"c":[["M",1,"MutableModel",2]],"g":[["M",0,0]]},{"p":["MeowCollection","insert(_:writeConcern:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["insert",7],["(",17],["_",1],[" ",17],["instance",2],[": ",17],["M",18],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18,284],["? = nil) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["InsertReply",18,268]],"s":[["func",12],[" ",17],["insert",7],["(",17],["M",18],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18],["?) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["InsertReply",18]],"e":[["M",1,"MutableModel",2]],"c":[["M",1,"MutableModel",2]],"g":[["M",0,0]]},{"p":["MeowCollection","upsert(_:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["upsert",7],["(",17],["_",1],[" ",17],["instance",2],[": ",17],["M",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["UpdateReply",18,269]],"s":[["func",12],[" ",17],["upsert",7],["(",17],["M",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["UpdateReply",18]],"e":[["M",1,"MutableModel",2]],"c":[["M",1,"MutableModel",2]],"g":[["M",0,0]]},{"p":["MeowCollection","deleteAll(where:writeConcern:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["deleteAll",7],["(",17],["where",1],[" ",17],["filter",2],[": ",17],["Document",18,277],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18,284],["? = nil) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["DeleteReply",18,267]],"s":[["func",12],[" ",17],["deleteAll",7],["(",17],["where",1],[": ",17],["Document",18],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18],["?) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["DeleteReply",18]],"e":[["M",1,"MutableModel",2]],"c":[["M",1,"MutableModel",2]],"g":[["M",0,0]]},{"p":["MeowCollection","deleteAll(where:writeConcern:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["deleteAll",7],["<",17],["Q",0],[">(",17],["where",1],[" ",17],["filter",2],[": ",17],["Q",18],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18,284],["? = nil) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["DeleteReply",18,267],[" ",17],["where",12],[" ",17],["Q",18],[" : ",17],["MongoKittenQuery",18,265]],"s":[["func",12],[" ",17],["deleteAll",7],["<",17],["Q",0],[">(",17],["where",1],[": ",17],["Q",18],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18],["?) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["DeleteReply",18]],"e":[["M",1,"MutableModel",2]],"c":[["M",1,"MutableModel",2],["Q",1,"MongoKittenQuery",265]],"g":[["M",0,0],["Q",0,1]]},{"p":["MeowCollection","deleteOne(where:writeConcern:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["deleteOne",7],["(",17],["where",1],[" ",17],["filter",2],[": ",17],["Document",18,277],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18,284],["? = nil) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["DeleteReply",18,267]],"s":[["func",12],[" ",17],["deleteOne",7],["(",17],["where",1],[": ",17],["Document",18],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18],["?) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["DeleteReply",18]],"e":[["M",1,"MutableModel",2]],"c":[["M",1,"MutableModel",2]],"g":[["M",0,0]],"d":"Deletes (up to) one entity in this collection matching the `filter`\n\n- Returns: A `DeleteReply` containing information about the (partial) success of this query"},{"p":["MeowCollection","deleteOne(where:writeConcern:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["deleteOne",7],["<",17],["Q",0],[">(",17],["where",1],[" ",17],["filter",2],[": ",17],["Q",18],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18,284],["? = nil) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["DeleteReply",18,267],[" ",17],["where",12],[" ",17],["Q",18],[" : ",17],["MongoKittenQuery",18,265]],"s":[["func",12],[" ",17],["deleteOne",7],["<",17],["Q",0],[">(",17],["where",1],[": ",17],["Q",18],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18],["?) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["DeleteReply",18]],"e":[["M",1,"MutableModel",2]],"c":[["M",1,"MutableModel",2],["Q",1,"MongoKittenQuery",265]],"g":[["M",0,0],["Q",0,1]],"d":"Deletes (up to) one entity in this collection matching the `filter`\n\n- Returns: A `DeleteReply` containing information about the (partial) success of this query"},{"p":["MeowCollection","buildAggregate(build:)"],"f":[["func",12],[" ",17],["buildAggregate",7],["<",17],["Result",0],[">(",17],["build",1],[": () ",17],["throws",12],[" -> ",17],["MeowAggregate",18,23],["<",17],["M",18],[", ",17],["Result",18],[">) ",17],["rethrows",12],[" -> ",17],["MappedCursor",18,258],["<",17],["AggregateBuilderPipeline",18,264],[", ",17],["Result",18],["> ",17],["where",12],[" ",17],["Result",18],[" : ",17],["Decodable",18,297],[", ",17],["Result",18],[" : ",17],["Encodable",18,285]],"s":[["func",12],[" ",17],["buildAggregate",7],["<",17],["Result",0],[">(",17],["build",1],[": () ",17],["throws",12],[" -> ",17],["MeowAggregate",18],["<",17],["M",18],[", ",17],["Result",18],[">) ",17],["rethrows",12],[" -> ",17],["MappedCursor",18],["<",17],["AggregateBuilderPipeline",18],[", ",17],["Result",18],[">",17]],"e":[["M",1,"ReadableModel",3]],"c":[["M",1,"ReadableModel",3],["Result",1,"Decodable",297],["Result",1,"Encodable",285]],"g":[["M",0,0],["Result",0,1]]},{"p":["MeowCollection","find(where:)"],"f":[["func",12],[" ",17],["find",7],["(",17],["where",1],[" ",17],["filter",2],[": ",17],["Document",18,277],[" = [:]) -> ",17],["MappedCursor",18,258],["<",17],["FindQueryBuilder",18,259],[", ",17],["M",18],[">",17]],"s":[["func",12],[" ",17],["find",7],["(",17],["where",1],[": ",17],["Document",18],[") -> ",17],["MappedCursor",18],["<",17],["FindQueryBuilder",18],[", ",17],["M",18],[">",17]],"e":[["M",1,"ReadableModel",3]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]],"d":"Creates a cursor mapped to Meow model `M`, with the results matching the `filter` using MongoKitten-style API\n\nIf no filter is provided, all entities match.\n\nUsage:\n\n    let users: [User] = try await users.find().drain()\n\nAlternative Usage:\n\n    let admins: [User] = try await users.find(\"role\" == \"admin\").drain()\n    let adultAdmins: [User] = try await users.find(\"role\" == \"admin\" && \"age\" > 18).drain()"},{"p":["MeowCollection","find(where:)"],"f":[["func",12],[" ",17],["find",7],["<",17],["Q",0],[">(",17],["where",1],[" ",17],["filter",2],[": ",17],["Q",18],[") -> ",17],["MappedCursor",18,258],["<",17],["FindQueryBuilder",18,259],[", ",17],["M",18],["> ",17],["where",12],[" ",17],["Q",18],[" : ",17],["MongoKittenQuery",18,265]],"s":[["func",12],[" ",17],["find",7],["<",17],["Q",0],[">(",17],["where",1],[": ",17],["Q",18],[") -> ",17],["MappedCursor",18],["<",17],["FindQueryBuilder",18],[", ",17],["M",18],[">",17]],"e":[["M",1,"ReadableModel",3]],"c":[["M",1,"ReadableModel",3],["Q",1,"MongoKittenQuery",265]],"g":[["M",0,0],["Q",0,1]],"d":"Creates a cursor mapped to Meow model `M`, with the results matching the `filter` using MongoKitten-style API\n\nIf no filter is provided, all entities match.\n\nUsage:\n\n    let users: [User] = try await users.find().drain()\n\nAlternative Usage:\n\n    let admins: [User] = try await users.find(\"role\" == \"admin\").drain()\n    let adultAdmins: [User] = try await users.find(\"role\" == \"admin\" && \"age\" > 18).drain()"},{"p":["MeowCollection","count(where:)"],"f":[["func",12],[" ",17],["count",7],["(",17],["where",1],[" ",17],["filter",2],[": ",17],["Document",18,277],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Int",18,300]],"s":[["func",12],[" ",17],["count",7],["(",17],["where",1],[": ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Int",18]],"e":[["M",1,"ReadableModel",3]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]],"d":"Counts the amount of models matcihng `filter` using MongoKitten style API\n\nExample:\n\n    let adminCount: Int = try await users.count(\"role\" == \"admin\")"},{"p":["MeowCollection","count(where:)"],"f":[["func",12],[" ",17],["count",7],["<",17],["Q",0],[">(",17],["where",1],[" ",17],["filter",2],[": ",17],["Q",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Int",18,300],[" ",17],["where",12],[" ",17],["Q",18],[" : ",17],["MongoKittenQuery",18,265]],"s":[["func",12],[" ",17],["count",7],["<",17],["Q",0],[">(",17],["where",1],[": ",17],["Q",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Int",18]],"e":[["M",1,"ReadableModel",3]],"c":[["M",1,"ReadableModel",3],["Q",1,"MongoKittenQuery",265]],"g":[["M",0,0],["Q",0,1]],"d":"Counts the amount of models matcihng `filter` using MongoKitten style API\n\nExample:\n\n    let adminCount: Int = try await users.count(\"role\" == \"admin\")"},{"p":["MeowCollection","watch(options:)"],"f":[["func",12],[" ",17],["watch",7],["(",17],["options",1],[": ",17],["ChangeStreamOptions",18,260],[" = .init()) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChangeStream",18,257],["<",17],["M",18],[">",17]],"s":[["func",12],[" ",17],["watch",7],["(",17],["options",1],[": ",17],["ChangeStreamOptions",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChangeStream",18],["<",17],["M",18],[">",17]],"e":[["M",1,"ReadableModel",3]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]],"d":"Creates a `ChangeStream`,watching for any and all changes within this collection\n\n- Note: Only works in replica set environments"},{"p":["MeowCollection","findOne(where:)"],"f":[["func",12],[" ",17],["findOne",7],["(",17],["where",1],[" ",17],["filter",2],[": ",17],["Document",18,277],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18],["?",17]],"s":[["func",12],[" ",17],["findOne",7],["(",17],["where",1],[": ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18],["?",17]],"e":[["M",1,"ReadableModel",3]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]],"d":"Finds the first model `M` matching `filter` using MongoKitten style API\n\nExample:\n\n    let joannis: User? = try await users.findOne(\"username\" == \"joannis\")"},{"p":["MeowCollection","findOne(where:)"],"f":[["func",12],[" ",17],["findOne",7],["<",17],["Q",0],[">(",17],["where",1],[" ",17],["filter",2],[": ",17],["Q",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18],["? ",17],["where",12],[" ",17],["Q",18],[" : ",17],["MongoKittenQuery",18,265]],"s":[["func",12],[" ",17],["findOne",7],["<",17],["Q",0],[">(",17],["where",1],[": ",17],["Q",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18],["?",17]],"e":[["M",1,"ReadableModel",3]],"c":[["M",1,"ReadableModel",3],["Q",1,"MongoKittenQuery",265]],"g":[["M",0,0],["Q",0,1]],"d":"Finds the first model `M` matching `filter` using MongoKitten style API\n\nExample:\n\n    let joannis: User? = try await users.findOne(\"username\" == \"joannis\")"},{"p":["MeowCollection","deleteAll(matching:writeConcern:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["deleteAll",7],["(",17],["matching",1],[": (",17],["QueryMatcher",18,27],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18,277],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18,284],["? = nil) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["DeleteReply",18,267]],"s":[["func",12],[" ",17],["deleteAll",7],["(",17],["matching",1],[": (",17],["QueryMatcher",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18],["?) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["DeleteReply",18]],"e":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2]],"c":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2]],"g":[["M",0,0]],"d":"Deletes all entities in this collection matching the created filter in the `matching` closure\n\n- Returns: A `DeleteReply` containing information about the (partial) success of this query"},{"p":["MeowCollection","deleteOne(matching:writeConcern:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["deleteOne",7],["(",17],["matching",1],[": (",17],["QueryMatcher",18,27],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18,277],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18,284],["? = nil) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["DeleteReply",18,267]],"s":[["func",12],[" ",17],["deleteOne",7],["(",17],["matching",1],[": (",17],["QueryMatcher",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18],[", ",17],["writeConcern",1],[": ",17],["WriteConcern",18],["?) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["DeleteReply",18]],"e":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2]],"c":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2]],"g":[["M",0,0]],"d":"Deletes (up to) one entity in this collection matching the created filter in the `matching` closure\n\n- Returns: A `DeleteReply` containing information about the (partial) success of this query"},{"p":["MeowCollection","updateOne(matching:build:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["updateOne",7],["(",17],["matching",1],[": (",17],["QueryMatcher",18,27],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18,277],[", ",17],["build",1],[": (",17],["inout",12],[" ",17],["ModelUpdateQuery",18,33],["<",17],["M",18],[">) ",17],["throws",12],[" -> ()) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["UpdateReply",18,269]],"s":[["func",12],[" ",17],["updateOne",7],["(",17],["matching",1],[": (",17],["QueryMatcher",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18],[", ",17],["build",1],[": (",17],["inout",12],[" ",17],["ModelUpdateQuery",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ()) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["UpdateReply",18]],"e":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2]],"c":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2]],"g":[["M",0,0]],"d":"Updates one entity matching the filter constructed int the `matching` closure"},{"p":["MeowCollection","updateOne(matching:build:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["updateOne",7],["<",17],["MKQ",0],[">(",17],["matching",1],[": (",17],["QueryMatcher",18,27],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["MKQ",18],[", ",17],["build",1],[": (",17],["inout",12],[" ",17],["ModelUpdateQuery",18,33],["<",17],["M",18],[">) ",17],["throws",12],[" -> ()) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["UpdateReply",18,269],[" ",17],["where",12],[" ",17],["MKQ",18],[" : ",17],["MongoKittenQuery",18,265]],"s":[["func",12],[" ",17],["updateOne",7],["<",17],["MKQ",0],[">(",17],["matching",1],[": (",17],["QueryMatcher",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["MKQ",18],[", ",17],["build",1],[": (",17],["inout",12],[" ",17],["ModelUpdateQuery",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ()) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["UpdateReply",18]],"e":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2]],"c":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2],["MKQ",1,"MongoKittenQuery",265]],"g":[["M",0,0],["MKQ",0,1]],"d":"Updates one entity matching the filter constructed int the `matching` closure\nThe update itself is constructed in the `build` closure using the `ModelUpdateQuery` tpye\n\n- See: `ModelUpdateQuery` for more information"},{"p":["MeowCollection","buildCheckedAggregate(build:)"],"f":[["func",12],[" ",17],["buildCheckedAggregate",7],["<",17],["Result",0],[">(",17],["build",1],[": () ",17],["throws",12],[" -> ",17],["MeowAggregate",18,23],["<",17],["M",18],[", ",17],["Result",18],[">) ",17],["rethrows",12],[" -> ",17],["MappedCursor",18,258],["<",17],["AggregateBuilderPipeline",18,264],[", ",17],["Result",18],["> ",17],["where",12],[" ",17],["Result",18],[" : ",17],["Decodable",18,297],[", ",17],["Result",18],[" : ",17],["Encodable",18,285]],"s":[["func",12],[" ",17],["buildCheckedAggregate",7],["<",17],["Result",0],[">(",17],["build",1],[": () ",17],["throws",12],[" -> ",17],["MeowAggregate",18],["<",17],["M",18],[", ",17],["Result",18],[">) ",17],["rethrows",12],[" -> ",17],["MappedCursor",18],["<",17],["AggregateBuilderPipeline",18],[", ",17],["Result",18],[">",17]],"e":[["M",1,"KeyPathQueryableModel",6]],"c":[["M",1,"KeyPathQueryableModel",6],["Result",1,"Decodable",297],["Result",1,"Encodable",285]],"g":[["M",0,0],["Result",0,1]]},{"p":["MeowCollection","find(matching:)"],"f":[["func",12],[" ",17],["find",7],["(",17],["matching",1],[": (",17],["QueryMatcher",18,27],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18,277],[") ",17],["rethrows",12],[" -> ",17],["MappedCursor",18,258],["<",17],["FindQueryBuilder",18,259],[", ",17],["M",18],[">",17]],"s":[["func",12],[" ",17],["find",7],["(",17],["matching",1],[": (",17],["QueryMatcher",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18],[") ",17],["rethrows",12],[" -> ",17],["MappedCursor",18],["<",17],["FindQueryBuilder",18],[", ",17],["M",18],[">",17]],"e":[["M",1,"KeyPathQueryableModel",6]],"c":[["M",1,"KeyPathQueryableModel",6]],"g":[["M",0,0]],"d":"A helper for `KeyPathQueryableModel` collections that allows type-checked *find* queries to be constructed\n\nFor example, the following query drains all users with the username \"Joannis\" into an array\n\n    let users = try await meow[User.self].find { user in\n       user.$username == \"Joannis\"\n    }.drain()\n\nThis function is one of two overrides that, together, provide all type of operators to be used in combination with one another"},{"p":["MeowCollection","find(matching:)"],"f":[["func",12],[" ",17],["find",7],["<",17],["MKQ",0],[">(",17],["matching",1],[": (",17],["QueryMatcher",18,27],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["MKQ",18],[") ",17],["rethrows",12],[" -> ",17],["MappedCursor",18,258],["<",17],["FindQueryBuilder",18,259],[", ",17],["M",18],["> ",17],["where",12],[" ",17],["MKQ",18],[" : ",17],["MongoKittenQuery",18,265]],"s":[["func",12],[" ",17],["find",7],["<",17],["MKQ",0],[">(",17],["matching",1],[": (",17],["QueryMatcher",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["MKQ",18],[") ",17],["rethrows",12],[" -> ",17],["MappedCursor",18],["<",17],["FindQueryBuilder",18],[", ",17],["M",18],[">",17]],"e":[["M",1,"KeyPathQueryableModel",6]],"c":[["M",1,"KeyPathQueryableModel",6],["MKQ",1,"MongoKittenQuery",265]],"g":[["M",0,0],["MKQ",0,1]],"d":"A helper for `KeyPathQueryableModel` collections that allows type-checked *find* queries to be constructed\n\nFor example, the following query drains all users with the username \"Joannis\" into an array\n\n    let users = try await meow[User.self].find { user in\n       user.$username == \"Joannis\"\n    }.drain()\n\nThis function is one of two overrides that, together, provide all type of operators to be used in combination with one another"},{"p":["MeowCollection","count(matching:)"],"f":[["func",12],[" ",17],["count",7],["(",17],["matching",1],[": (",17],["QueryMatcher",18,27],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18,277],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Int",18,300]],"s":[["func",12],[" ",17],["count",7],["(",17],["matching",1],[": (",17],["QueryMatcher",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Int",18]],"e":[["M",1,"KeyPathQueryableModel",6]],"c":[["M",1,"KeyPathQueryableModel",6]],"g":[["M",0,0]],"d":"A helper for `KeyPathQueryableModel` collections that allows type-checked *count* queries to be constructed\n\nFor example, the following query counts the amount of admins\n\n    let admins: Int = try await meow[User.self].findOne { user in\n       user.$role == .admin\n    }\n\nThis function is one of two overrides that, together, provide all type of operators to be used in combination with one another"},{"p":["MeowCollection","count(matching:)"],"f":[["func",12],[" ",17],["count",7],["<",17],["MKQ",0],[">(",17],["matching",1],[": (",17],["QueryMatcher",18,27],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["MKQ",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Int",18,300],[" ",17],["where",12],[" ",17],["MKQ",18],[" : ",17],["MongoKittenQuery",18,265]],"s":[["func",12],[" ",17],["count",7],["<",17],["MKQ",0],[">(",17],["matching",1],[": (",17],["QueryMatcher",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["MKQ",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Int",18]],"e":[["M",1,"KeyPathQueryableModel",6]],"c":[["M",1,"KeyPathQueryableModel",6],["MKQ",1,"MongoKittenQuery",265]],"g":[["M",0,0],["MKQ",0,1]],"d":"A helper for `KeyPathQueryableModel` collections that allows type-checked *count* queries to be constructed\n\nFor example, the following query counts the amount of admins\n\n    let admins: Int = try await meow[User.self].findOne { user in\n       user.$role == .admin\n    }\n\nThis function is one of two overrides that, together, provide all type of operators to be used in combination with one another"},{"p":["MeowCollection","findOne(matching:)"],"f":[["func",12],[" ",17],["findOne",7],["(",17],["matching",1],[": (",17],["QueryMatcher",18,27],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18,277],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18],["?",17]],"s":[["func",12],[" ",17],["findOne",7],["(",17],["matching",1],[": (",17],["QueryMatcher",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18],["?",17]],"e":[["M",1,"KeyPathQueryableModel",6]],"c":[["M",1,"KeyPathQueryableModel",6]],"g":[["M",0,0]],"d":"A helper for `KeyPathQueryableModel` collections that allows type-checked *findOne* queries to be constructed\n\nFor example, the following query fetches the first user with the username \"Joannis\"\n\n    let joannis: User? = try await meow[User.self].findOne { user in\n       user.$username == \"Joannis\"\n    }\n\nThis function is one of two overrides that, together, provide all type of operators to be used in combination with one another"},{"p":["MeowCollection","findOne(matching:)"],"f":[["func",12],[" ",17],["findOne",7],["<",17],["MKQ",0],[">(",17],["matching",1],[": (",17],["QueryMatcher",18,27],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["MKQ",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18],["? ",17],["where",12],[" ",17],["MKQ",18],[" : ",17],["MongoKittenQuery",18,265]],"s":[["func",12],[" ",17],["findOne",7],["<",17],["MKQ",0],[">(",17],["matching",1],[": (",17],["QueryMatcher",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["MKQ",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18],["?",17]],"e":[["M",1,"KeyPathQueryableModel",6]],"c":[["M",1,"KeyPathQueryableModel",6],["MKQ",1,"MongoKittenQuery",265]],"g":[["M",0,0],["MKQ",0,1]],"d":"A helper for `KeyPathQueryableModel` collections that allows type-checked *findOne* queries to be constructed\n\nFor example, the following query fetches the first user with the username \"Joannis\"\n\n    let joannis: User? = try await meow[User.self].findOne { user in\n       user.$username == \"Joannis\"\n    }\n\nThis function is one of two overrides that, together, provide all type of operators to be used in combination with one another"},{"p":["MeowOperationResult","assertCompleted()"],"f":[["func",12],[" ",17],["assertCompleted",7],["() ",17],["throws",12]],"s":[["func",12],[" ",17],["assertCompleted",7],["() ",17],["throws",12]]},{"p":["MeowTransactionDatabase","commit()"],"f":[["func",12],[" ",17],["commit",7],["() ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["commit",7],["() ",17],["async",12],[" ",17],["throws",12]],"d":"Commits changes"},{"p":["MeowDatabase","collection(for:)"],"f":[["func",12],[" ",17],["collection",7],["<",17],["M",0],[">(",17],["for",1],[" ",17],["model",2],[": ",17],["M",18],[".Type) -> ",17],["MeowCollection",18,18],["<",17],["M",18],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["BaseModel",18,8]],"s":[["func",12],[" ",17],["collection",7],["<",17],["M",0],[">(",17],["for",1],[": ",17],["M",18],[".Type) -> ",17],["MeowCollection",18],["<",17],["M",18],[">",17]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]]},{"p":["MeowDatabase","migrateCustom(_:migration:)"],"f":[["func",12],[" ",17],["migrateCustom",7],["(",17],["_",1],[" ",17],["description",2],[": ",17],["String",18,292],[", ",17],["migration",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ()) ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["migrateCustom",7],["(",17],["String",18],[", ",17],["migration",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ()) ",17],["async",12],[" ",17],["throws",12]],"d":"Runs a migration closure that is not tied to a certain model\nThe closure will be executed only once, because the migration is registered in the MeowMigrations collection\n\nMigrations are uniquely identified by their description.\n\n- Warning: DO NOT ALTER THE DESCRITIONS"},{"p":["MeowDatabase","withTransaction(with:transactionOptions:perform:)"],"f":[["func",12],[" ",17],["withTransaction",7],["<",17],["T",0],[">(",17],["with",1],[" ",17],["options",2],[": ",17],["MongoSessionOptions",18,281],[" = .init(), ",17],["transactionOptions",1],[": ",17],["MongoTransactionOptions",18,282],["? = nil, ",17],["perform",1],[": (",17],["MeowTransactionDatabase",18,45],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withTransaction",7],["<",17],["T",0],[">(",17],["with",1],[": ",17],["MongoSessionOptions",18],[", ",17],["transactionOptions",1],[": ",17],["MongoTransactionOptions",18],["?, ",17],["perform",1],[": (",17],["MeowTransactionDatabase",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18]],"g":[["T",0,0]],"d":"Creates a transaction database, with which the same queries can be done with the same APis as this object.\nIf an error in thrown within `perform`, the transaction is aborted\nIt's automaticalyl committed if successful"},{"p":["MeowDatabase","migrate(_:on:migration:)"],"f":[["func",12],[" ",17],["migrate",7],["<",17],["M",0],[">(",17],["_",1],[" ",17],["description",2],[": ",17],["String",18,292],[", ",17],["on",1],[" ",17],["model",2],[": ",17],["M",18],[".Type, ",17],["migration",1],[": ",17],["@escaping",12],[" (",17],["Migrator",18,47],["<",17],["M",18],[">) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Void",18,309],[") ",17],["async",12],[" ",17],["throws",12],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["BaseModel",18,8]],"s":[["func",12],[" ",17],["migrate",7],["<",17],["M",0],[">(",17],["String",18],[", ",17],["on",1],[": ",17],["M",18],[".Type, ",17],["migration",1],[": (",17],["Migrator",18],["<",17],["M",18],[">) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Void",18],[") ",17],["async",12],[" ",17],["throws",12]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]],"d":"Runs a migration closure that _is_ tied to a certain model\nThe closure will be executed only once, because the migration is registered in the MeowMigrations collection\n\nMigrations are uniquely identified by their description.\n\n- Warning: DO NOT ALTER THE DESCRITIONS"},{"p":["Resolvable","resolveIfPresent(in:where:)"],"f":[["func",12],[" ",17],["resolveIfPresent",7],["(",17],["in",1],[" ",17],["context",2],[": ",17],["MeowDatabase",18,46],[", ",17],["where",1],[" ",17],["query",2],[": ",17],["Document",18,277],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["IfPresentResult",18]],"s":[["func",12],[" ",17],["resolveIfPresent",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[", ",17],["where",1],[": ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["IfPresentResult",18]]},{"p":["Resolvable","resolve(in:where:)"],"f":[["func",12],[" ",17],["resolve",7],["(",17],["in",1],[" ",17],["context",2],[": ",17],["MeowDatabase",18,46],[", ",17],["where",1],[" ",17],["query",2],[": ",17],["Document",18,277],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["resolve",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[", ",17],["where",1],[": ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Result",18]]},{"p":["ModelGrouper","setAverage(of:to:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["setAverage",7],["<",17],["T",0],[">(",17],["of",1],[" ",17],["field",2],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["T",18],[">>, ",17],["to",1],[" ",17],["result",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["T",18],[">>)",17]],"s":[["func",12],[" ",17],["setAverage",7],["<",17],["T",0],[">(",17],["of",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["T",18],[">>, ",17],["to",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["T",18],[">>)",17]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5]],"g":[["Base",0,0],["Result",1,0],["T",0,1]],"d":"Takes the `$avg` of the values in `field`, and accumulates into `result`"},{"p":["MutableModel","encode(to:)"],"f":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[" ",17],["document",2],[": ",17],["Document",18,277],[".Type) ",17],["throws",12],[" -> ",17],["Document",18,277]],"s":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[": ",17],["Document",18],[".Type) ",17],["throws",12],[" -> ",17],["Document",18]]},{"p":["MutableModel","replaceModel(in:)"],"f":[["func",12],[" ",17],["replaceModel",7],["(",17],["in",1],[" ",17],["database",2],[": ",17],["MeowDatabase",18,46],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Self",18],["?",17]],"s":[["func",12],[" ",17],["replaceModel",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Self",18],["?",17]],"d":"Replaces the old model matching this `_id` with the current model. Returns the old model if the entity existed"},{"p":["MutableModel","save(in:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["save",7],["(",17],["in",1],[" ",17],["database",2],[": ",17],["MeowDatabase",18,46],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["MeowOperationResult",18,19]],"s":[["func",12],[" ",17],["save",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["MeowOperationResult",18]],"d":"Saves this model using an `upsert` operation, updating if it exists, creating if it's new"},{"p":["MutableModel","create(in:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["create",7],["(",17],["in",1],[" ",17],["database",2],[": ",17],["MeowDatabase",18,46],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["MeowOperationResult",18,19]],"s":[["func",12],[" ",17],["create",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["MeowOperationResult",18]],"d":"Creates this model using an `insert` operation. Fails if the entity already exists"},{"p":["MutableModel","encode(to:)"],"f":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[" ",17],["document",2],[": ",17],["Document",18,277],[".Type) ",17],["throws",12],[" -> ",17],["Document",18,277]],"s":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[": ",17],["Document",18],[".Type) ",17],["throws",12],[" -> ",17],["Document",18]]},{"p":["PartialUpdate","apply(on:)"],"f":[["func",12],[" ",17],["apply",7],["(",17],["on",1],[" ",17],["collection",2],[": ",17],["MeowCollection",18,18],["<",17],["M",18],[">) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18]],"s":[["func",12],[" ",17],["apply",7],["(",17],["on",1],[": ",17],["MeowCollection",18],["<",17],["M",18],[">) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18]],"c":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2]],"g":[["M",0,0]],"d":"Applies the changes and returns an updated model"},{"p":["ModelProjector","excludeField(at:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["excludeField",7],["<",17],["Value",0],[">(",17],["at",1],[" ",17],["keyPath",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["Value",18],["?>>)",17]],"s":[["func",12],[" ",17],["excludeField",7],["<",17],["Value",0],[">(",17],["at",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["Value",18],["?>>)",17]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5]],"g":[["Base",0,0],["Result",1,0],["Value",0,1]],"d":"Explicitly excludes the field at `keyPath` from being projected, used most commonly for `_id`"},{"p":["ModelProjector","includeField(at:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["includeField",7],["<",17],["Value",0],[">(",17],["at",1],[" ",17],["keyPath",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["Value",18],["?>>)",17]],"s":[["func",12],[" ",17],["includeField",7],["<",17],["Value",0],[">(",17],["at",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["Value",18],["?>>)",17]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5]],"g":[["Base",0,0],["Result",1,0],["Value",0,1]],"d":"Includes the field at `keyPath` in the projection, using the same key as before the projection"},{"p":["ModelProjector","moveRoot(to:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["moveRoot",7],["(",17],["to",1],[" ",17],["path",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["Base",18],[">>)",17]],"s":[["func",12],[" ",17],["moveRoot",7],["(",17],["to",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["Base",18],[">>)",17]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5]],"g":[["Base",0,0],["Result",1,0]],"d":"Moves the entire `Base` entity into a value inside `Result`"},{"p":["ModelProjector","moveRoot(to:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["moveRoot",7],["(",17],["to",1],[" ",17],["path",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["Base",18],["?>>)",17]],"s":[["func",12],[" ",17],["moveRoot",7],["(",17],["to",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["Base",18],["?>>)",17]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5]],"g":[["Base",0,0],["Result",1,0]],"d":"Moves the entire `Base` entity into a value inside `Result`"},{"p":["ModelProjector","setField(at:to:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["setField",7],["<",17],["P",0],[">(",17],["at",1],[" ",17],["keyPath",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["P",18],[">>, ",17],["to",1],[" ",17],["newValue",2],[": ",17],["P",18],[") ",17],["where",12],[" ",17],["P",18],[" : ",17],["Primitive",18,279]],"s":[["func",12],[" ",17],["setField",7],["<",17],["P",0],[">(",17],["at",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["P",18],[">>, ",17],["to",1],[": ",17],["P",18],[")",17]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5],["P",1,"Primitive",279]],"g":[["Base",0,0],["Result",1,0],["P",0,1]],"d":"Sets the `Result`'s `keyPath` to a constant `newValue`"},{"p":["ModelProjector","setField(at:to:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["setField",7],["<",17],["PE",0],[">(",17],["at",1],[" ",17],["keyPath",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["PE",18],[">>, ",17],["to",1],[" ",17],["newValue",2],[": ",17],["PE",18],[") ",17],["throws",12],[" ",17],["where",12],[" ",17],["PE",18],[" : ",17],["PrimitiveEncodable",18,275]],"s":[["func",12],[" ",17],["setField",7],["<",17],["PE",0],[">(",17],["at",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["PE",18],[">>, ",17],["to",1],[": ",17],["PE",18],[") ",17],["throws",12]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5],["PE",1,"PrimitiveEncodable",275]],"g":[["Base",0,0],["Result",1,0],["PE",0,1]],"d":"Sets the `Result`'s `keyPath` to a constant `newValue`"},{"p":["ModelProjector","moveField(from:to:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["moveField",7],["<",17],["M",0],[">(",17],["from",1],[" ",17],["base",2],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["M",18],[".",17],["Identifier",18],[">>, ",17],["to",1],[" ",17],["new",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["Reference",18,44],["<",17],["M",18],[">>>) ",17],["where",12],[" ",17],["M",18],[" : ",17],["ReadableModel",18,3]],"s":[["func",12],[" ",17],["moveField",7],["<",17],["M",0],[">(",17],["from",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["M",18],[".",17],["Identifier",18],[">>, ",17],["to",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["Reference",18],["<",17],["M",18],[">>>)",17]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5],["M",1,"ReadableModel",3]],"g":[["Base",0,0],["Result",1,0],["M",0,1]],"d":"Moves a field from the `base` KeyPath into the `new` KeyPath found in the `Result` entity"},{"p":["ModelProjector","moveField(from:to:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["moveField",7],["<",17],["M",0],[">(",17],["from",1],[" ",17],["base",2],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["Reference",18,44],["<",17],["M",18],[">>>, ",17],["to",1],[" ",17],["new",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["M",18],[".",17],["Identifier",18],[">>) ",17],["where",12],[" ",17],["M",18],[" : ",17],["ReadableModel",18,3]],"s":[["func",12],[" ",17],["moveField",7],["<",17],["M",0],[">(",17],["from",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["Reference",18],["<",17],["M",18],[">>>, ",17],["to",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["M",18],[".",17],["Identifier",18],[">>)",17]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5],["M",1,"ReadableModel",3]],"g":[["Base",0,0],["Result",1,0],["M",0,1]],"d":"Moves a field from the `base` KeyPath into the `new` KeyPath found in the `Result` entity"},{"p":["ModelProjector","moveField(from:to:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["moveField",7],["<",17],["Value",0],[">(",17],["from",1],[" ",17],["base",2],[": ",17],["KeyPath",18,315],["<",17],["Base",18],[", ",17],["QueryableField",18,31],["<",17],["Value",18],[">>, ",17],["to",1],[" ",17],["new",2],[": ",17],["KeyPath",18,315],["<",17],["Result",18],[", ",17],["QueryableField",18,31],["<",17],["Value",18],[">>)",17]],"s":[["func",12],[" ",17],["moveField",7],["<",17],["Value",0],[">(",17],["from",1],[": ",17],["KeyPath",18],["<",17],["Base",18],[", ",17],["QueryableField",18],["<",17],["Value",18],[">>, ",17],["to",1],[": ",17],["KeyPath",18],["<",17],["Result",18],[", ",17],["QueryableField",18],["<",17],["Value",18],[">>)",17]],"c":[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5]],"g":[["Base",0,0],["Result",1,0],["Value",0,1]],"d":"Moves a field from the `base` KeyPath into the `new` KeyPath found in the `Result` entity"},{"p":["ReferenceField","encode(to:)"],"f":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[" ",17],["encoder",2],[": ",17],["Encoder",18,314],[") ",17],["throws",12]],"s":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[": ",17],["Encoder",18],[") ",17],["throws",12]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]]},{"p":["ModelUpdateQuery","unsetField(at:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["unsetField",7],["<",17],["Value",0],[">(",17],["at",1],[" ",17],["keyPath",2],[": ",17],["WritableKeyPath",18,302],["<",17],["M",18],[", ",17],["QueryableField",18,31],["<",17],["Value",18],["?>>)",17]],"s":[["func",12],[" ",17],["unsetField",7],["<",17],["Value",0],[">(",17],["at",1],[": ",17],["WritableKeyPath",18],["<",17],["M",18],[", ",17],["QueryableField",18],["<",17],["Value",18],["?>>)",17]],"c":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2]],"g":[["M",0,0],["Value",0,1]],"d":"Adds an atomic `$unset` to the update query that updates the field corresponding to `keyPath` to be removed"},{"p":["ModelUpdateQuery","setField(at:to:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["setField",7],["<",17],["P",0],[">(",17],["at",1],[" ",17],["keyPath",2],[": ",17],["WritableKeyPath",18,302],["<",17],["M",18],[", ",17],["QueryableField",18,31],["<",17],["P",18],[">>, ",17],["to",1],[" ",17],["newValue",2],[": ",17],["P",18],[") ",17],["where",12],[" ",17],["P",18],[" : ",17],["Primitive",18,279]],"s":[["func",12],[" ",17],["setField",7],["<",17],["P",0],[">(",17],["at",1],[": ",17],["WritableKeyPath",18],["<",17],["M",18],[", ",17],["QueryableField",18],["<",17],["P",18],[">>, ",17],["to",1],[": ",17],["P",18],[")",17]],"c":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2],["P",1,"Primitive",279]],"g":[["M",0,0],["P",0,1]],"d":"Adds an atomic `$set` to the update query that updates the field corresponding to `keyPath` to the `newValue`"},{"p":["ModelUpdateQuery","increment(at:to:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["increment",7],["<",17],["I",0],[">(",17],["at",1],[" ",17],["keyPath",2],[": ",17],["WritableKeyPath",18,302],["<",17],["M",18],[", ",17],["QueryableField",18,31],["<",17],["I",18],[">>, ",17],["to",1],[" ",17],["newValue",2],[": ",17],["I",18],[" = 1) ",17],["where",12],[" ",17],["I",18],[" : ",17],["Primitive",18,279],[", ",17],["I",18],[" : ",17],["FixedWidthInteger",18,303]],"s":[["func",12],[" ",17],["increment",7],["<",17],["I",0],[">(",17],["at",1],[": ",17],["WritableKeyPath",18],["<",17],["M",18],[", ",17],["QueryableField",18],["<",17],["I",18],[">>, ",17],["to",1],[": ",17],["I",18],[")",17]],"c":[["M",1,"KeyPathQueryableModel",6],["M",1,"MutableModel",2],["I",1,"Primitive",279],["I",1,"FixedWidthInteger",303]],"g":[["M",0,0],["I",0,1]],"d":"Adds an atomic `$unset` to the update query that increments the numeric field corresponding to `keyPath` with `newValue` (or 1 by default)"},{"p":["KeyPathQueryableModel","makePartialUpdate(_:)"],"f":[["func",12],[" ",17],["makePartialUpdate",7],["(",17],["_",1],[" ",17],["mutate",2],[": (",17],["inout",12],[" ",17],["ModelUpdater",18,25],["<",17],["Self",18],[">) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Void",18,309],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["PartialUpdate",18,29],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["makePartialUpdate",7],["((",17],["inout",12],[" ",17],["ModelUpdater",18],["<",17],["Self",18],[">) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Void",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["PartialUpdate",18],["<",17],["Self",18],[">",17]],"e":[["Self",1,"MutableModel",2]],"c":[["Self",1,"MutableModel",2]],"d":"Constructs a partial (atomic) update to this model by allowing you to update individual values in this model\nEach value that's been updated will be `$set` in the database\n\nProduces a `PartialUpdate` that can be executed as a query\n\n- Note:If the model is a class, the model will be updated before `PartialUpdate.apply` is called"},{"p":["Field","encode(to:)"],"f":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[" ",17],["encoder",2],[": ",17],["Encoder",18,314],[") ",17],["throws",12]],"s":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[": ",17],["Encoder",18],[") ",17],["throws",12]],"c":[["C",1,"Decodable",297],["C",1,"Encodable",285]],"g":[["C",0,0]]},{"p":["Migrator","add(_:)"],"f":[["func",12],[" ",17],["add",7],["(",17],["_",1],[" ",17],["action",2],[": ",17],["@escaping",12],[" ",17],["Migrator",18,47],["<",17],["M",18],[">.",17],["Action",18,246],[")",17]],"s":[["func",12],[" ",17],["add",7],["(",17],["Migrator",18],["<",17],["M",18],[">.",17],["Action",18],[")",17]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]]},{"p":["Reference","encodePrimitive()"],"f":[["func",12],[" ",17],["encodePrimitive",7],["() ",17],["throws",12],[" -> ",17],["Primitive",18,279]],"s":[["func",12],[" ",17],["encodePrimitive",7],["() ",17],["throws",12],[" -> ",17],["Primitive",18]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]]},{"p":["Reference","resolveIfPresent(in:where:)"],"f":[["func",12],[" ",17],["resolveIfPresent",7],["(",17],["in",1],[" ",17],["context",2],[": ",17],["MeowDatabase",18,46],[", ",17],["where",1],[" ",17],["query",2],[": ",17],["Document",18,277],[" = Document()) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18],["?",17]],"s":[["func",12],[" ",17],["resolveIfPresent",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[", ",17],["where",1],[": ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18],["?",17]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]],"d":"Resolves a reference, returning `nil` if the referenced object cannot be found"},{"p":["Reference","encode(to:)"],"f":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[" ",17],["encoder",2],[": ",17],["Encoder",18,314],[") ",17],["throws",12]],"s":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[": ",17],["Encoder",18],[") ",17],["throws",12]],"e":[["M",1,"ReadableModel",3]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]]},{"p":["Reference","exists(in:where:)"],"f":[["func",12],[" ",17],["exists",7],["(",17],["in",1],[" ",17],["db",2],[": ",17],["MeowDatabase",18,46],[", ",17],["where",1],[" ",17],["filter",2],[": ",17],["Document",18,277],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18,296]],"s":[["func",12],[" ",17],["exists",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[", ",17],["where",1],[": ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]],"d":"Checks if the entity exists within `db`, while matching the provided `filter`"},{"p":["Reference","exists(in:where:)"],"f":[["func",12],[" ",17],["exists",7],["<",17],["Query",0],[">(",17],["in",1],[" ",17],["db",2],[": ",17],["MeowDatabase",18,46],[", ",17],["where",1],[" ",17],["filter",2],[": ",17],["Query",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18,296],[" ",17],["where",12],[" ",17],["Query",18],[" : ",17],["MongoKittenQuery",18,265]],"s":[["func",12],[" ",17],["exists",7],["<",17],["Query",0],[">(",17],["in",1],[": ",17],["MeowDatabase",18],[", ",17],["where",1],[": ",17],["Query",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18]],"c":[["M",1,"ReadableModel",3],["Query",1,"MongoKittenQuery",265]],"g":[["M",0,0],["Query",0,1]],"d":"Checks if the entity exists within `db`, while matching the provided `filter`"},{"p":["Reference","exists(in:)"],"f":[["func",12],[" ",17],["exists",7],["(",17],["in",1],[" ",17],["db",2],[": ",17],["MeowDatabase",18,46],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18,296]],"s":[["func",12],[" ",17],["exists",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]],"d":"Checks if the entity exists within `db`"},{"p":["Reference","resolve(in:where:)"],"f":[["func",12],[" ",17],["resolve",7],["(",17],["in",1],[" ",17],["context",2],[": ",17],["MeowDatabase",18,46],[", ",17],["where",1],[" ",17],["query",2],[": ",17],["Document",18,277],[" = Document()) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18]],"s":[["func",12],[" ",17],["resolve",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[", ",17],["where",1],[": ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]],"d":"Resolves a reference"},{"p":["Reference","deleteTarget(in:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["deleteTarget",7],["(",17],["in",1],[" ",17],["context",2],[": ",17],["MeowDatabase",18,46],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["MeowOperationResult",18,19]],"s":[["func",12],[" ",17],["deleteTarget",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["MeowOperationResult",18]],"e":[["M",1,"MutableModel",2]],"c":[["M",1,"MutableModel",2]],"g":[["M",0,0]],"d":"Deletes the target of the reference (making it invalid)"},{"p":["Reference","resolveIfPresent(in:where:)"],"f":[["func",12],[" ",17],["resolveIfPresent",7],["(",17],["in",1],[" ",17],["context",2],[": ",17],["MeowDatabase",18,46],[", ",17],["where",1],[" ",17],["matching",2],[": (",17],["QueryMatcher",18,27],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18,277],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18],["?",17]],"s":[["func",12],[" ",17],["resolveIfPresent",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[", ",17],["where",1],[": (",17],["QueryMatcher",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18],["?",17]],"e":[["M",1,"KeyPathQueryableModel",6]],"c":[["M",1,"KeyPathQueryableModel",6]],"g":[["M",0,0]],"d":"Resolves a reference, returning `nil` if the referenced object cannot be found"},{"p":["Reference","exists(in:where:)"],"f":[["func",12],[" ",17],["exists",7],["(",17],["in",1],[" ",17],["db",2],[": ",17],["MeowDatabase",18,46],[", ",17],["where",1],[" ",17],["matching",2],[": (",17],["QueryMatcher",18,27],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18,277],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18,296]],"s":[["func",12],[" ",17],["exists",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[", ",17],["where",1],[": (",17],["QueryMatcher",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18]],"e":[["M",1,"KeyPathQueryableModel",6]],"c":[["M",1,"KeyPathQueryableModel",6]],"g":[["M",0,0]],"d":"Checks for an entity following this reference exists, while `matching` additional condition(s)\n\n- Returns: `true` if the entity with this `_id` exists _and_ matches the conditions provided in the `where:` clause"},{"p":["Reference","resolve(in:where:)"],"f":[["func",12],[" ",17],["resolve",7],["(",17],["in",1],[" ",17],["context",2],[": ",17],["MeowDatabase",18,46],[", ",17],["where",1],[" ",17],["matching",2],[": (",17],["QueryMatcher",18,27],["<",17],["M",18],[">) -> ",17],["Document",18,277],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18]],"s":[["func",12],[" ",17],["resolve",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[", ",17],["where",1],[": (",17],["QueryMatcher",18],["<",17],["M",18],[">) -> ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["M",18]],"e":[["M",1,"KeyPathQueryableModel",6]],"c":[["M",1,"KeyPathQueryableModel",6]],"g":[["M",0,0]],"d":"Resolves a reference, only if the entity matches the provided condition(s)\n\n- Throws: `MeowModelError.referenceError` if the model could not be found\n- Returns: The model `M` if the entity with this `_id` exists _and_ matches the conditions provided in the `where:` clause"},{"p":["Reference","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["Reference",18,44],["<",17],["M",18],[">, ",17],["rhs",2],[": ",17],["Reference",18,44],["<",17],["M",18],[">) -> ",17],["Bool",18,296]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["Reference",18],["<",17],["M",18],[">, ",17],["Reference",18],["<",17],["M",18],[">) -> ",17],["Bool",18]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]],"d":"Compares two references to be referring to the same entity"},{"p":[">(_:_:)"],"f":[["func",12],[" ",17],[">",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["rhs",2],[": ",17],["T",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["T",18],[" : ",17],["Primitive",18,279],[", ",17],["T",18],[" : ",17],["Comparable",18,288]],"s":[["func",12],[" ",17],[">",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["T",18],[") -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["T",1,"Primitive",279],["T",1,"Comparable",288]],"g":[["M",0,0],["T",1,0]]},{"p":[">(_:_:)"],"f":[["func",12],[" ",17],[">",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["rhs",2],[": ",17],["T",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["T",18],[" : ",17],["RawRepresentable",18,294],[", ",17],["T",18],[".",17],["RawValue",18],[" : ",17],["Primitive",18,279],[", ",17],["T",18],[".",17],["RawValue",18],[" : ",17],["Comparable",18,288]],"s":[["func",12],[" ",17],[">",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["T",18],[") -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["T",1,"RawRepresentable",294],["T.RawValue",1,"Primitive",279],["T.RawValue",1,"Comparable",288]],"g":[["M",0,0],["T",1,0]]},{"p":[">(_:_:)"],"f":[["func",12],[" ",17],[">",7],[" ",17],["<",17],["C",0],[">(",17],["lhs",2],[": ",17],["C",18],[", ",17],["rhs",2],[": ",17],["C",18],[".",17],["Value",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["C",18],[" : ",17],["QuerySubjectComparator",18,7]],"s":[["func",12],[" ",17],[">",7],[" ",17],["<",17],["C",0],[">(",17],["C",18],[", ",17],["C",18],[".",17],["Value",18],[") -> ",17],["Document",18]],"c":[["C",1,"QuerySubjectComparator",7]],"g":[["C",0,0]]},{"p":["<(_:_:)"],"f":[["func",12],[" ",17],["<",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["rhs",2],[": ",17],["T",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["T",18],[" : ",17],["Primitive",18,279],[", ",17],["T",18],[" : ",17],["Comparable",18,288]],"s":[["func",12],[" ",17],["<",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["T",18],[") -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["T",1,"Primitive",279],["T",1,"Comparable",288]],"g":[["M",0,0],["T",1,0]]},{"p":["<(_:_:)"],"f":[["func",12],[" ",17],["<",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["rhs",2],[": ",17],["T",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["T",18],[" : ",17],["RawRepresentable",18,294],[", ",17],["T",18],[".",17],["RawValue",18],[" : ",17],["Primitive",18,279],[", ",17],["T",18],[".",17],["RawValue",18],[" : ",17],["Comparable",18,288]],"s":[["func",12],[" ",17],["<",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["T",18],[") -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["T",1,"RawRepresentable",294],["T.RawValue",1,"Primitive",279],["T.RawValue",1,"Comparable",288]],"g":[["M",0,0],["T",1,0]]},{"p":["<(_:_:)"],"f":[["func",12],[" ",17],["<",7],[" ",17],["<",17],["C",0],[">(",17],["lhs",2],[": ",17],["C",18],[", ",17],["rhs",2],[": ",17],["C",18],[".",17],["Value",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["C",18],[" : ",17],["QuerySubjectComparator",18,7]],"s":[["func",12],[" ",17],["<",7],[" ",17],["<",17],["C",0],[">(",17],["C",18],[", ",17],["C",18],[".",17],["Value",18],[") -> ",17],["Document",18]],"c":[["C",1,"QuerySubjectComparator",7]],"g":[["C",0,0]]},{"p":["*(_:)"],"f":[["func",12],[" ",17],["*",7],[" ",17],["<",17],["M",0],[">(",17],["instance",2],[": ",17],["M",18],[") -> ",17],["Reference",18,44],["<",17],["M",18],["> ",17],["where",12],[" ",17],["M",18],[" : ",17],["ReadableModel",18,3]],"s":[["func",12],[" ",17],["*",7],[" ",17],["<",17],["M",0],[">(",17],["M",18],[") -> ",17],["Reference",18],["<",17],["M",18],[">",17]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]],"d":"A helper postfix operator that creates a `Reference` to `instance`.\nSimilar, but not identifcal, to C-style the Pointer syntax"},{"p":["==(_:_:)"],"f":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["M",18],[".",17],["Identifier",18],[">, ",17],["rhs",2],[": ",17],["Reference",18,44],["<",17],["M",18],[">) -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["M",18],[".",17],["Identifier",18],[" : ",17],["Primitive",18,279]],"s":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["M",18],[".",17],["Identifier",18],[">, ",17],["Reference",18],["<",17],["M",18],[">) -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["M.Identifier",1,"Primitive",279]],"g":[["M",0,0]]},{"p":["==(_:_:)"],"f":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["M",18],[".",17],["Identifier",18],[">, ",17],["rhs",2],[": ",17],["Reference",18,44],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6]],"s":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["M",18],[".",17],["Identifier",18],[">, ",17],["Reference",18],["<",17],["M",18],[">) ",17],["throws",12],[" -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6]],"g":[["M",0,0]]},{"p":["==(_:_:)"],"f":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[", ",17],["BM",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["Reference",18,44],["<",17],["BM",18],[">>, ",17],["rhs",2],[": ",17],["BM",18],[".",17],["Identifier",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["BM",18],[" : ",17],["ReadableModel",18,3],[", ",17],["BM",18],[".",17],["Identifier",18],[" : ",17],["Primitive",18,279]],"s":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[", ",17],["BM",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["Reference",18],["<",17],["BM",18],[">>, ",17],["BM",18],[".",17],["Identifier",18],[") -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["BM",1,"ReadableModel",3],["BM.Identifier",1,"Primitive",279]],"g":[["M",0,0],["BM",1,0]]},{"p":["==(_:_:)"],"f":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[", ",17],["BM",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["Reference",18,44],["<",17],["BM",18],[">>, ",17],["rhs",2],[": ",17],["BM",18],[".",17],["Identifier",18],[") ",17],["throws",12],[" -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["BM",18],[" : ",17],["ReadableModel",18,3]],"s":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[", ",17],["BM",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["Reference",18],["<",17],["BM",18],[">>, ",17],["BM",18],[".",17],["Identifier",18],[") ",17],["throws",12],[" -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["BM",1,"ReadableModel",3]],"g":[["M",0,0],["BM",1,0]]},{"p":["==(_:_:)"],"f":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[", ",17],["BM",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["Reference",18,44],["<",17],["BM",18],[">>, ",17],["rhs",2],[": ",17],["Reference",18,44],["<",17],["BM",18],[">) -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["BM",18],[" : ",17],["ReadableModel",18,3],[", ",17],["BM",18],[".",17],["Identifier",18],[" : ",17],["Primitive",18,279]],"s":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[", ",17],["BM",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["Reference",18],["<",17],["BM",18],[">>, ",17],["Reference",18],["<",17],["BM",18],[">) -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["BM",1,"ReadableModel",3],["BM.Identifier",1,"Primitive",279]],"g":[["M",0,0],["BM",1,0]]},{"p":["==(_:_:)"],"f":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["rhs",2],[": ",17],["T",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["T",18],[" : ",17],["Primitive",18,279]],"s":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["T",18],[") -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["T",1,"Primitive",279]],"g":[["M",0,0],["T",1,0]]},{"p":["==(_:_:)"],"f":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["rhs",2],[": ",17],["T",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["T",18],[" : ",17],["RawRepresentable",18,294],[", ",17],["T",18],[".",17],["RawValue",18],[" : ",17],["Primitive",18,279]],"s":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["T",18],[") -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["T",1,"RawRepresentable",294],["T.RawValue",1,"Primitive",279]],"g":[["M",0,0],["T",1,0]]},{"p":["==(_:_:)"],"f":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["C",0],[">(",17],["lhs",2],[": ",17],["C",18],[", ",17],["rhs",2],[": ",17],["C",18],[".",17],["Value",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["C",18],[" : ",17],["QuerySubjectComparator",18,7]],"s":[["func",12],[" ",17],["==",7],[" ",17],["<",17],["C",0],[">(",17],["C",18],[", ",17],["C",18],[".",17],["Value",18],[") -> ",17],["Document",18]],"c":[["C",1,"QuerySubjectComparator",7]],"g":[["C",0,0]]},{"p":[">=(_:_:)"],"f":[["func",12],[" ",17],[">=",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["rhs",2],[": ",17],["T",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["T",18],[" : ",17],["Primitive",18,279],[", ",17],["T",18],[" : ",17],["Comparable",18,288]],"s":[["func",12],[" ",17],[">=",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["T",18],[") -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["T",1,"Primitive",279],["T",1,"Comparable",288]],"g":[["M",0,0],["T",1,0]]},{"p":[">=(_:_:)"],"f":[["func",12],[" ",17],[">=",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["rhs",2],[": ",17],["T",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["T",18],[" : ",17],["RawRepresentable",18,294],[", ",17],["T",18],[".",17],["RawValue",18],[" : ",17],["Primitive",18,279],[", ",17],["T",18],[".",17],["RawValue",18],[" : ",17],["Comparable",18,288]],"s":[["func",12],[" ",17],[">=",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["T",18],[") -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["T",1,"RawRepresentable",294],["T.RawValue",1,"Primitive",279],["T.RawValue",1,"Comparable",288]],"g":[["M",0,0],["T",1,0]]},{"p":[">=(_:_:)"],"f":[["func",12],[" ",17],[">=",7],[" ",17],["<",17],["C",0],[">(",17],["lhs",2],[": ",17],["C",18],[", ",17],["rhs",2],[": ",17],["C",18],[".",17],["Value",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["C",18],[" : ",17],["QuerySubjectComparator",18,7]],"s":[["func",12],[" ",17],[">=",7],[" ",17],["<",17],["C",0],[">(",17],["C",18],[", ",17],["C",18],[".",17],["Value",18],[") -> ",17],["Document",18]],"c":[["C",1,"QuerySubjectComparator",7]],"g":[["C",0,0]]},{"p":["<=(_:_:)"],"f":[["func",12],[" ",17],["<=",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["rhs",2],[": ",17],["T",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["T",18],[" : ",17],["Primitive",18,279],[", ",17],["T",18],[" : ",17],["Comparable",18,288]],"s":[["func",12],[" ",17],["<=",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["T",18],[") -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["T",1,"Primitive",279],["T",1,"Comparable",288]],"g":[["M",0,0],["T",1,0]]},{"p":["<=(_:_:)"],"f":[["func",12],[" ",17],["<=",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["rhs",2],[": ",17],["T",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["T",18],[" : ",17],["RawRepresentable",18,294],[", ",17],["T",18],[".",17],["RawValue",18],[" : ",17],["Primitive",18,279],[", ",17],["T",18],[".",17],["RawValue",18],[" : ",17],["Comparable",18,288]],"s":[["func",12],[" ",17],["<=",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["T",18],[") -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["T",1,"RawRepresentable",294],["T.RawValue",1,"Primitive",279],["T.RawValue",1,"Comparable",288]],"g":[["M",0,0],["T",1,0]]},{"p":["<=(_:_:)"],"f":[["func",12],[" ",17],["<=",7],[" ",17],["<",17],["C",0],[">(",17],["lhs",2],[": ",17],["C",18],[", ",17],["rhs",2],[": ",17],["C",18],[".",17],["Value",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["C",18],[" : ",17],["QuerySubjectComparator",18,7]],"s":[["func",12],[" ",17],["<=",7],[" ",17],["<",17],["C",0],[">(",17],["C",18],[", ",17],["C",18],[".",17],["Value",18],[") -> ",17],["Document",18]],"c":[["C",1,"QuerySubjectComparator",7]],"g":[["C",0,0]]},{"p":["!=(_:_:)"],"f":[["func",12],[" ",17],["!=",7],[" ",17],["<",17],["M",0],[", ",17],["BM",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["Reference",18,44],["<",17],["BM",18],[">>, ",17],["rhs",2],[": ",17],["Reference",18,44],["<",17],["BM",18],[">) -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["BM",18],[" : ",17],["ReadableModel",18,3],[", ",17],["BM",18],[".",17],["Identifier",18],[" : ",17],["Primitive",18,279]],"s":[["func",12],[" ",17],["!=",7],[" ",17],["<",17],["M",0],[", ",17],["BM",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["Reference",18],["<",17],["BM",18],[">>, ",17],["Reference",18],["<",17],["BM",18],[">) -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["BM",1,"ReadableModel",3],["BM.Identifier",1,"Primitive",279]],"g":[["M",0,0],["BM",1,0]]},{"p":["!=(_:_:)"],"f":[["func",12],[" ",17],["!=",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["rhs",2],[": ",17],["T",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["T",18],[" : ",17],["Primitive",18,279]],"s":[["func",12],[" ",17],["!=",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["T",18],[") -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["T",1,"Primitive",279]],"g":[["M",0,0],["T",1,0]]},{"p":["!=(_:_:)"],"f":[["func",12],[" ",17],["!=",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["lhs",2],[": ",17],["QuerySubject",18,28],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["rhs",2],[": ",17],["T",18],[") -> ",17],["Document",18,277],[" ",17],["where",12],[" ",17],["M",18],[" : ",17],["KeyPathQueryableModel",18,6],[", ",17],["T",18],[" : ",17],["RawRepresentable",18,294],[", ",17],["T",18],[".",17],["RawValue",18],[" : ",17],["Primitive",18,279]],"s":[["func",12],[" ",17],["!=",7],[" ",17],["<",17],["M",0],[", ",17],["T",0],[">(",17],["QuerySubject",18],["<",17],["M",18],[", ",17],["T",18],[">, ",17],["T",18],[") -> ",17],["Document",18]],"c":[["M",1,"KeyPathQueryableModel",6],["T",1,"RawRepresentable",294],["T.RawValue",1,"Primitive",279]],"g":[["M",0,0],["T",1,0]]},{"p":["MeowIdentifier"],"f":[["typealias",12],[" ",17],["MeowIdentifier",7],[" = ",17],["Codable",18,312],[" & ",17],["Hashable",18,287],[" & ",17],["PrimitiveEncodable",18,275]],"s":[["typealias",12],[" ",17],["MeowIdentifier",7]],"d":"All Meow models must have an identifier that is `Codable` and `Hashable`, as well as representable by a Primitive.\n\nWhen implementing `PrimitiveEncodable` using `BSONEncoder`, this allows you to use any `struct` as an `_id` so long as it's not an \"unkeyedContainer\". Array-like (sequence) types are rejected on insertion by MongoDB."},{"p":["QuerySubjectSizeComparator","Value"],"f":[["typealias",12],[" ",17],["Value",7],[" = ",17],["Int",18,300]],"s":[["typealias",12],[" ",17],["Value",7]]},{"p":["Sort","Result"],"f":[["typealias",12],[" ",17],["Result",7],[" = ",17],["Base",18]],"s":[["typealias",12],[" ",17],["Result",7]],"c":[["Base",1,"Decodable",297],["Base",1,"Encodable",285]],"g":[["Base",0,0]]},{"p":["Limit","Result"],"f":[["typealias",12],[" ",17],["Result",7],[" = ",17],["Base",18]],"s":[["typealias",12],[" ",17],["Result",7]],"c":[["Base",1,"Decodable",297],["Base",1,"Encodable",285]],"g":[["Base",0,0]]},{"p":["Match","Result"],"f":[["typealias",12],[" ",17],["Result",7],[" = ",17],["Base",18]],"s":[["typealias",12],[" ",17],["Result",7]],"c":[["Base",1,"Decodable",297],["Base",1,"Encodable",285]],"g":[["Base",0,0]]},{"p":["Model"],"f":[["typealias",12],[" ",17],["Model",7],[" = ",17],["KeyPathQueryableModel",18,6],[" & ",17],["MutableModel",18,2]],"s":[["typealias",12],[" ",17],["Model",7]],"d":"The default supported Model is a `KeyPathQueryableModel` that is also a `MutableModel`. Meaning it's a read-write capable entity that supports type checked APIs'"},{"p":["Migrator","Action"],"f":[["typealias",12],[" ",17],["Action",7],[" = (",17],["MeowCollection",18,18],["<",17],["M",18],[">) ",17],["async",12],[" ",17],["throws",12],[" -> ()",17]],"s":[["typealias",12],[" ",17],["Action",7]],"c":[["M",1,"BaseModel",8]],"g":[["M",0,0]]},{"p":["Reference","Result"],"f":[["typealias",12],[" ",17],["Result",7],[" = ",17],["M",18]],"s":[["typealias",12],[" ",17],["Result",7]],"c":[["M",1,"ReadableModel",3]],"g":[["M",0,0]]},{"p":["MappedCursor","sort(on:direction:)"],"f":[["func",12],[" ",17],["sort",7],["<",17],["T",0],[">(",17],["on",1],[" ",17],["keyPath",2],[": ",17],["KeyPath",18,315],["<",17],["Element",18],[", ",17],["QueryableField",18,31],["<",17],["T",18],[">>, ",17],["direction",1],[": ",17],["Sorting",18,270],[".",17],["Order",18,271],[") -> ",17],["MappedCursor",18,258],["<",17],["Base",18],[", ",17],["Element",18],["> ",17],["where",12],[" ",17],["T",18],[" : ",17],["Comparable",18,288]],"s":[["func",12],[" ",17],["sort",7],["<",17],["T",0],[">(",17],["on",1],[": ",17],["KeyPath",18],["<",17],["Element",18],[", ",17],["QueryableField",18],["<",17],["T",18],[">>, ",17],["direction",1],[": ",17],["Sorting",18],[".",17],["Order",18],[") -> ",17],["MappedCursor",18],["<",17],["Base",18],[", ",17],["Element",18],[">",17]],"e":[["Base",2,"FindQueryBuilder",259],["Element",1,"KeyPathQueryableModel",6]],"c":[["Base",2,"FindQueryBuilder",259],["Element",1,"KeyPathQueryableModel",6],["T",1,"Comparable",288]],"g":[["Base",0,0],["Element",1,0],["T",0,1]],"d":"Allows sorting a result stream based on a comparable value within this model `Element`"},{"p":["Sequence","resolveIfPresent(in:where:)"],"f":[["func",12],[" ",17],["resolveIfPresent",7],["(",17],["in",1],[" ",17],["database",2],[": ",17],["MeowDatabase",18,46],[", ",17],["where",1],[" ",17],["query",2],[": ",17],["Document",18,277],[" = Document()) ",17],["async",12],[" ",17],["throws",12],[" -> [",17],["Self",18],[".",17],["Element",18],[".",17],["IfPresentResult",18],["]",17]],"s":[["func",12],[" ",17],["resolveIfPresent",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[", ",17],["where",1],[": ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> [",17],["Self",18],[".",17],["Element",18],[".",17],["IfPresentResult",18],["]",17]],"e":[["Self.Element",1,"Resolvable",1]],"c":[["Self.Element",1,"Resolvable",1]],"d":"- returns: All entities - resolved or `nil`"},{"p":["Sequence","resolve(in:where:)"],"f":[["func",12],[" ",17],["resolve",7],["(",17],["in",1],[" ",17],["database",2],[": ",17],["MeowDatabase",18,46],[", ",17],["where",1],[" ",17],["query",2],[": ",17],["Document",18,277],[" = Document()) ",17],["async",12],[" ",17],["throws",12],[" -> [",17],["Self",18],[".",17],["Element",18],[".",17],["Result",18],["]",17]],"s":[["func",12],[" ",17],["resolve",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[", ",17],["where",1],[": ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> [",17],["Self",18],[".",17],["Element",18],[".",17],["Result",18],["]",17]],"e":[["Self.Element",1,"Resolvable",1]],"c":[["Self.Element",1,"Resolvable",1]],"d":"Resolves the contained references\n\n- Parameter context: The context to use for resolving the references\n- Throws: When one or more entities fails to resolve\n- Returns: All entities - resolved"},{"p":["Optional","resolveIfPresent(in:where:)"],"f":[["func",12],[" ",17],["resolveIfPresent",7],["(",17],["in",1],[" ",17],["database",2],[": ",17],["MeowDatabase",18,46],[", ",17],["where",1],[" ",17],["query",2],[": ",17],["Document",18,277],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Wrapped",18],[".",17],["IfPresentResult",18],["?",17]],"s":[["func",12],[" ",17],["resolveIfPresent",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[", ",17],["where",1],[": ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Wrapped",18],[".",17],["IfPresentResult",18],["?",17]],"e":[["Wrapped",1,"Resolvable",1]],"c":[["Wrapped",1,"Resolvable",1]],"g":[["Wrapped",0,0]]},{"p":["Optional","resolve(in:where:)"],"f":[["func",12],[" ",17],["resolve",7],["(",17],["in",1],[" ",17],["database",2],[": ",17],["MeowDatabase",18,46],[", ",17],["where",1],[" ",17],["query",2],[": ",17],["Document",18,277],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Wrapped",18],[".",17],["Result",18],["?",17]],"s":[["func",12],[" ",17],["resolve",7],["(",17],["in",1],[": ",17],["MeowDatabase",18],[", ",17],["where",1],[": ",17],["Document",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Wrapped",18],[".",17],["Result",18],["?",17]],"e":[["Wrapped",1,"Resolvable",1]],"c":[["Wrapped",1,"Resolvable",1]],"g":[["Wrapped",0,0]]},{"p":["Optional","IfPresentResult"],"f":[["typealias",12],[" ",17],["IfPresentResult",7],[" = ",17],["Wrapped",18],[".",17],["IfPresentResult",18],["?",17]],"s":[["typealias",12],[" ",17],["IfPresentResult",7]],"e":[["Wrapped",1,"Resolvable",1]],"c":[["Wrapped",1,"Resolvable",1]],"g":[["Wrapped",0,0]]},{"p":["Optional","Result"],"f":[["typealias",12],[" ",17],["Result",7],[" = ",17],["Wrapped",18],[".",17],["Result",18],["?",17]],"s":[["typealias",12],[" ",17],["Result",7]],"e":[["Wrapped",1,"Resolvable",1]],"c":[["Wrapped",1,"Resolvable",1]],"g":[["Wrapped",0,0]]}],"edges":{"conformer":[0,261,[],2,3,[],2,8,[],2,285,[],2,297,[],3,8,[],3,297,[],4,3,[],4,5,[],4,6,[],4,8,[],4,285,[],4,297,[],5,285,[],5,297,[],6,3,[],6,5,[],6,8,[],6,285,[],6,297,[],16,310,[],16,316,[],20,310,[],20,316,[],32,285,[],32,297,[],35,7,[],36,0,[["Base",1,"KeyPathQueryable",5]],36,261,[],37,285,[],37,287,[["C",1,"Decodable",297],["C",1,"Encodable",285],["C",1,"Hashable",287]],37,289,[["C",1,"Decodable",297],["C",1,"Encodable",285],["C",1,"Equatable",289]],37,297,[],38,0,[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5]],38,261,[],39,0,[["Base",1,"KeyPathQueryable",5]],39,261,[],40,0,[["Base",1,"KeyPathQueryable",5]],40,261,[],41,0,[],41,261,[],42,0,[],42,261,[],43,0,[["Base",1,"KeyPathQueryable",5],["Result",1,"KeyPathQueryable",5]],43,261,[],44,1,[],44,275,[],44,285,[["M",1,"ReadableModel",3]],44,287,[],44,289,[],44,297,[["M",1,"ReadableModel",3]],44,304,[["M",1,"ReadableModel",3],["M.Identifier",1,"CustomStringConvertible",304]],44,307,[["M",1,"ReadableModel",3],["M.Identifier",1,"LosslessStringConvertible",307]],295,1,[["Element",1,"Resolvable",1]],299,1,[["Element",1,"Resolvable",1],["Element",1,"Hashable",287]],301,1,[["Wrapped",1,"Resolvable",1]]],"feature":[291,37,291,44,306,44,311,16,311,20],"member":[20,19,48,16,49,16,50,16,51,16,52,16,53,16,54,16,55,16,56,16,57,18,58,46,59,26,60,32,61,32,62,36,63,36,64,37,65,37,66,38,67,39,68,40,69,40,70,40,71,40,72,41,73,41,74,41,75,41,76,41,77,41,78,41,79,41,80,41,81,41,82,42,83,43,84,43,85,47,86,44,87,44,88,44,89,44,90,46,91,25,92,27,93,28,94,31,101,18,102,18,103,18,104,19,105,19,106,19,107,46,108,26,109,28,110,32,111,32,112,32,115,35,116,35,117,36,118,36,119,37,120,37,121,37,122,38,123,38,124,39,125,39,126,40,127,40,128,41,129,41,130,42,131,42,132,43,133,43,134,47,135,44,136,44,137,21,138,21,139,22,141,3,142,3,143,3,145,5,146,5,147,18,148,18,149,18,150,18,151,18,152,18,153,18,154,18,155,18,156,18,157,18,158,18,159,18,160,18,161,18,162,18,163,18,164,18,165,18,166,18,167,18,168,18,169,18,170,18,171,18,172,18,173,19,174,45,175,46,176,46,177,46,178,46,181,24,183,2,184,2,185,2,186,2,187,29,188,30,189,30,190,30,191,30,192,30,193,30,194,30,195,30,196,30,197,32,198,33,199,33,200,33,201,6,202,37,203,47,204,44,205,44,206,44,207,44,208,44,209,44,210,44,211,44,212,44,213,44,214,44,215,44,241,35,242,36,243,39,244,40,246,47,247,44,248,258,249,293,250,293,251,301,252,301,253,301,254,301],"subclass":[45,46],"requirement":[9,0,10,0,11,1,12,1,13,4,14,7,15,8,95,2,97,3,99,8,113,7,114,7,140,3,179,1,180,1,182,2],"defaultImplementation":[96,95,98,97,100,99,144,140,186,182,186,286]},"hints":[61,298,65,298,87,298,89,308,115,113,116,114,117,262,118,263,122,262,123,263,124,262,125,263,126,262,127,263,128,262,129,263,130,262,131,263,132,262,133,263,136,305,186,286,197,286,202,286,204,276,205,179,206,286,210,180,215,290,241,14,242,10,243,10,244,10,247,12,251,179,252,180,253,11,254,12,291,291,306,306,311,311],"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/Meow/Aggregates.swift","symbols":[3,16,0,4,19,9,5,19,10,9,29,21,10,23,138,16,23,137,28,29,22,29,23,139,36,16,166,48,16,154,58,14,23,62,16,4,63,19,13,66,14,36,67,21,242,69,29,118,70,29,117,72,11,62,86,11,63,95,14,43,96,29,133,97,29,132,99,11,83,112,11,84,121,14,38,122,29,123,123,29,122,125,11,66,142,14,40,143,21,244,145,29,127,146,29,126,148,11,68,159,11,69,170,11,71,178,11,70,189,14,39,190,21,243,192,15,125,193,15,124,197,11,67,204,14,42,206,15,131,207,15,130,209,11,82,222,14,41,224,15,129,225,15,128,229,11,72,247,11,77,263,11,76,279,11,80,295,11,81,311,11,79,327,11,78,343,11,73,364,11,75,387,11,74]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/Meow/Database.swift","symbols":[14,13,46,15,15,107,17,11,58,21,16,175,25,11,90,32,16,177,59,19,45,69,16,174]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/Meow/Error.swift","symbols":[3,12,16,5,9,56,8,9,51,11,9,48,14,9,54,16,9,49,19,9,50,22,9,53,25,9,52,28,9,55]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/Meow/KeyPathModel/FindHelpers.swift","symbols":[4,16,248]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/Meow/KeyPathModel/KeyPathModels.swift","symbols":[10,14,27,13,11,92,23,14,28,26,11,93,33,16,7,34,19,14,36,8,114,37,8,113,41,14,35,42,21,241,44,15,116,45,15,115,51,14,34,61,15,109,66,16,5,67,16,6,78,17,245,88,23,146,102,23,145,114,16,201,123,14,25,132,11,91,150,14,29,155,16,187,204,14,31,211,11,94,232,14,37,233,15,121,236,15,119,241,15,120,246,11,65,260,11,64,265,16,202,275,14,32,276,15,112,279,15,110,284,15,111,288,11,61,302,11,60,307,16,197]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/Meow/KeyPathModel/MeowCollection+KeyPath.swift","symbols":[13,16,167,30,16,171,47,16,169,64,16,168,81,16,172,98,16,170,111,16,213,122,16,214,131,16,212,150,16,163,160,16,162,168,16,164,183,16,165,195,14,33,203,25,199,209,25,198,215,25,200,244,14,24,252,25,181,260,14,30,266,25,192,272,25,193,279,25,188,285,25,189,291,25,196,298,25,194,305,25,195,312,25,190,318,25,191]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/Meow/MeowCollection.swift","symbols":[11,14,18,12,15,103,13,15,102,14,15,101,16,11,57,36,16,155,52,16,156,61,16,160,70,16,161,79,16,157,88,16,158,95,16,159,102,16,148,107,16,147,112,16,149,123,16,152,131,16,153,136,16,150,141,16,151]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/Meow/Migrations.swift","symbols":[13,13,47,14,21,246,16,15,134,18,11,85,32,16,203,54,16,176,86,16,178]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/Meow/Model.swift","symbols":[13,17,240,20,16,8,21,19,15,26,15,99,65,16,3,66,16,140,67,15,97,103,16,2,104,9,182,105,15,95,110,22,100,116,33,98,119,23,144,127,23,143,132,23,141,140,23,142,152,16,184,163,16,185,173,16,183,185,33,96,188,16,186,193,12,17,195,14,19,196,18,20,198,15,106,199,15,105,200,15,104,202,16,173]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/Meow/Operators.swift","symbols":[5,12,228,9,12,230,13,12,227,17,12,225,21,12,226,26,12,223,30,12,224,35,12,229,41,12,238,45,12,237,49,12,239,55,12,234,59,12,235,63,12,236,67,12,231,71,12,232,75,12,233,79,12,219,83,12,220,87,12,221,91,12,216,95,12,217,99,12,218]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/Meow/PartialModel.swift","symbols":[0,14,26,1,28,108,3,11,59]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/Meow/Reference.swift","symbols":[15,14,44,17,15,135,19,21,247,22,23,215,27,11,86,32,11,88,37,16,210,46,16,205,58,16,209,64,16,207,70,16,208,74,16,204,82,16,211,97,20,222,104,16,206,108,11,87,114,16,1,115,19,12,116,19,11,118,9,180,119,9,179,133,16,250,142,16,249,152,21,254,153,21,253,155,16,252,162,16,251,171,15,136,177,11,89]}]}