{"culture":"_MongoKittenCrypto","dependencies":[],"extensions":[],"partitions":[{"namespace":"_MongoKittenCrypto","communities":[{"community":"protocol","startIndex":0,"endIndex":1},{"community":"enum","startIndex":1,"endIndex":2},{"community":"struct","startIndex":2,"endIndex":6},{"community":"class","startIndex":6,"endIndex":7},{"community":"enum.case","startIndex":7,"endIndex":9},{"community":"init","startIndex":9,"endIndex":15},{"community":"type.property","startIndex":15,"endIndex":30},{"community":"property","startIndex":30,"endIndex":38},{"community":"method","startIndex":38,"endIndex":51},{"community":"func","startIndex":51,"endIndex":52}]},{"namespace":"Swift","communities":[{"community":"property","startIndex":52,"endIndex":53}]}],"identifiers":["s18_MongoKittenCrypto4HashP","s18_MongoKittenCrypto13PBKDF2KeySizeO","s18_MongoKittenCrypto3MD5V","s18_MongoKittenCrypto4HMACV","s18_MongoKittenCrypto4SHA1V","s18_MongoKittenCrypto6SHA256V","s18_MongoKittenCrypto6PBKDF2C","s18_MongoKittenCrypto13PBKDF2KeySizeO06digestF0yA2CmF","s18_MongoKittenCrypto13PBKDF2KeySizeO5fixedyACSicACmF","s18_MongoKittenCrypto13PBKDF2KeySizeO14integerLiteralACSi_tcfc","s18_MongoKittenCrypto3MD5VACycfc","s18_MongoKittenCrypto4HMACV6hasherACyxGx_tcfc","s18_MongoKittenCrypto4SHA1VACycfc","s18_MongoKittenCrypto6PBKDF2C6digestAcA4Hash_p_tcfc","s18_MongoKittenCrypto6SHA256VACycfc","s18_MongoKittenCrypto3MD5V10digestSizeSivpZ","s18_MongoKittenCrypto3MD5V12littleEndianSbvpZ","s18_MongoKittenCrypto3MD5V9chunkSizeSivpZ","s18_MongoKittenCrypto4HashP10digestSizeSivpZ","s18_MongoKittenCrypto4HashP12littleEndianSbvpZ","s18_MongoKittenCrypto4HashP9chunkSizeSivpZ","s18_MongoKittenCrypto4SHA1V10digestSizeSivpZ","s18_MongoKittenCrypto4SHA1V12littleEndianSbvpZ","s18_MongoKittenCrypto4SHA1V9chunkSizeSivpZ","s18_MongoKittenCrypto6PBKDF2C3md5ACvpZ","s18_MongoKittenCrypto6PBKDF2C4sha1ACvpZ","s18_MongoKittenCrypto6PBKDF2C6sha256ACvpZ","s18_MongoKittenCrypto6SHA256V10digestSizeSivpZ","s18_MongoKittenCrypto6SHA256V12littleEndianSbvpZ","s18_MongoKittenCrypto6SHA256V9chunkSizeSivpZ","s18_MongoKittenCrypto3MD5V14processedBytess6UInt64Vvp","s18_MongoKittenCrypto3MD5V9hashValueSays5UInt8VGvp","s18_MongoKittenCrypto4HashP14processedBytess6UInt64Vvp","s18_MongoKittenCrypto4HashP9hashValueSays5UInt8VGvp","s18_MongoKittenCrypto4SHA1V14processedBytess6UInt64Vvp","s18_MongoKittenCrypto4SHA1V9hashValueSays5UInt8VGvp","s18_MongoKittenCrypto6SHA256V14processedBytess6UInt64Vvp","s18_MongoKittenCrypto6SHA256V9hashValueSays5UInt8VGvp","s18_MongoKittenCrypto3MD5V5resetyyF","s18_MongoKittenCrypto3MD5V6update4fromySPys5UInt8VG_tF","s18_MongoKittenCrypto4HMACV12authenticate_7withKeySays5UInt8VGAH_AHtF","s18_MongoKittenCrypto4HashP5resetyyF","s18_MongoKittenCrypto4HashP6update4fromySPys5UInt8VG_tF","s18_MongoKittenCrypto4HashPAAE4hash5bytesSays5UInt8VGAH_tF","s18_MongoKittenCrypto4HashPAAE4hash_5countSays5UInt8VGSPyAGG_SitF","s18_MongoKittenCrypto4HashPAAE6finish4fromSays5UInt8VGSRyAGG_tF","s18_MongoKittenCrypto4SHA1V5resetyyF","s18_MongoKittenCrypto4SHA1V6update4fromySPys5UInt8VG_tF","s18_MongoKittenCrypto6PBKDF2C4hash_4salt10iterations7keySizeSays5UInt8VGAJ_AJs5Int32VAA0d3KeyI0OtF","s18_MongoKittenCrypto6SHA256V5resetyyF","s18_MongoKittenCrypto6SHA256V6update4fromySPys5UInt8VG_tF","s18_MongoKittenCrypto3xor__5countySpys5UInt8VG_SPyAEGSitF","sSa18_MongoKittenCryptos5UInt8VRszlE9hexStringSSvp","sSP","sSR","sSS","sSa","sSb","sSi","sSp","ss27ExpressibleByIntegerLiteralP","ss27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc","ss5Int32V","ss5UInt8V","ss6UInt64V"],"vertices":[{"p":["Hash"],"f":[["protocol",12],[" ",17],["Hash",7]],"s":[["protocol",12],[" ",17],["Hash",7]]},{"p":["PBKDF2KeySize"],"f":[["enum",12],[" ",17],["PBKDF2KeySize",7]],"s":[["enum",12],[" ",17],["PBKDF2KeySize",7]],"d":"The requested amount of output bytes from the key derivation\n\nIn circumstances with low iterations the amount of output bytes may not be met.\n\n`digest.digestSize * iterations` is the amount of bytes stored in PBKDF2's buffer.\nAny data added beyond this limit\n\nWARNING: Do not switch these key sizes, new sizes may be added"},{"p":["MD5"],"f":[["struct",12],[" ",17],["MD5",7]],"s":[["struct",12],[" ",17],["MD5",7]]},{"p":["HMAC"],"f":[["struct",12],[" ",17],["HMAC",7],["<",17],["H",0],["> ",17],["where",12],[" ",17],["H",18],[" : ",17],["Hash",18,0]],"s":[["struct",12],[" ",17],["HMAC",7]],"c":[["H",1,"Hash",0]],"g":[["H",0,0]]},{"p":["SHA1"],"f":[["struct",12],[" ",17],["SHA1",7]],"s":[["struct",12],[" ",17],["SHA1",7]]},{"p":["SHA256"],"f":[["struct",12],[" ",17],["SHA256",7]],"s":[["struct",12],[" ",17],["SHA256",7]]},{"p":["PBKDF2"],"f":[["final",12],[" ",17],["class",12],[" ",17],["PBKDF2",7]],"s":[["class",12],[" ",17],["PBKDF2",7]],"d":"PBKDF2 derives a fixed or custom length key from a password and salt.\n\nIt accepts a customizable amount of iterations to increase the algorithm weight and security.\n\nUnlike BCrypt, the salt does not get stored in the final result,\nmeaning it needs to be generated and stored manually.\n\n    let passwordHasher = PBKDF2(digest: SHA1)\n    let salt = try CryptoRandom().generateData(count: 64) // Data\n    let hash = try passwordHasher.deriveKey(fromPassword: \"secret\", salt: salt, iterations: 15_000) // Data\n    print(hash.hexEncodedString()) // 8e55fa3015da583bb51b706371aa418afc8a0a44\n\nPBKDF2 leans on HMAC for each iteration and can use all hash functions supported in Crypto\n\nhttps://en.wikipedia.org/wiki/PBKDF2"},{"p":["PBKDF2KeySize","digestSize"],"f":[["case",12],[" ",17],["digestSize",7]],"s":[["case",12],[" ",17],["digestSize",7]]},{"p":["PBKDF2KeySize","fixed(_:)"],"f":[["case",12],[" ",17],["fixed",7],["(",17],["Int",18,58],[")",17]],"s":[["case",12],[" ",17],["fixed",7],["(",17],["Int",18],[")",17]]},{"p":["PBKDF2KeySize","init(integerLiteral:)"],"f":[["init",10],["(",17],["integerLiteral",1],[" ",17],["value",2],[": ",17],["Int",18,58],[")",17]],"s":[["init",10],["(",17],["integerLiteral",1],[": ",17],["Int",18],[")",17]],"o":61},{"p":["MD5","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["HMAC","init(hasher:)"],"f":[["init",10],["(",17],["hasher",1],[": ",17],["H",18],[")",17]],"s":[["init",10],["(",17],["hasher",1],[": ",17],["H",18],[")",17]],"c":[["H",1,"Hash",0]],"g":[["H",0,0]]},{"p":["SHA1","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["PBKDF2","init(digest:)"],"f":[["init",10],["(",17],["digest",1],[": ",17],["Hash",18,0],[")",17]],"s":[["init",10],["(",17],["digest",1],[": ",17],["Hash",18],[")",17]],"d":"Creates a new PBKDF2 derivator based on a hashing algorithm"},{"p":["SHA256","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["MD5","digestSize"],"f":[["static",12],[" ",17],["let",12],[" ",17],["digestSize",7],[": ",17],["Int",18,58]],"s":[["static",12],[" ",17],["let",12],[" ",17],["digestSize",7],[": ",17],["Int",18]],"o":18},{"p":["MD5","littleEndian"],"f":[["static",12],[" ",17],["let",12],[" ",17],["littleEndian",7],[": ",17],["Bool",18,57]],"s":[["static",12],[" ",17],["let",12],[" ",17],["littleEndian",7],[": ",17],["Bool",18]],"o":19},{"p":["MD5","chunkSize"],"f":[["static",12],[" ",17],["let",12],[" ",17],["chunkSize",7],[": ",17],["Int",18,58]],"s":[["static",12],[" ",17],["let",12],[" ",17],["chunkSize",7],[": ",17],["Int",18]],"o":20},{"p":["Hash","digestSize"],"f":[["static",12],[" ",17],["var",12],[" ",17],["digestSize",7],[": ",17],["Int",18,58],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["digestSize",7],[": ",17],["Int",18]]},{"p":["Hash","littleEndian"],"f":[["static",12],[" ",17],["var",12],[" ",17],["littleEndian",7],[": ",17],["Bool",18,57],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["littleEndian",7],[": ",17],["Bool",18]]},{"p":["Hash","chunkSize"],"f":[["static",12],[" ",17],["var",12],[" ",17],["chunkSize",7],[": ",17],["Int",18,58],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["chunkSize",7],[": ",17],["Int",18]]},{"p":["SHA1","digestSize"],"f":[["static",12],[" ",17],["let",12],[" ",17],["digestSize",7],[": ",17],["Int",18,58]],"s":[["static",12],[" ",17],["let",12],[" ",17],["digestSize",7],[": ",17],["Int",18]],"o":18},{"p":["SHA1","littleEndian"],"f":[["static",12],[" ",17],["let",12],[" ",17],["littleEndian",7],[": ",17],["Bool",18,57]],"s":[["static",12],[" ",17],["let",12],[" ",17],["littleEndian",7],[": ",17],["Bool",18]],"o":19},{"p":["SHA1","chunkSize"],"f":[["static",12],[" ",17],["let",12],[" ",17],["chunkSize",7],[": ",17],["Int",18,58]],"s":[["static",12],[" ",17],["let",12],[" ",17],["chunkSize",7],[": ",17],["Int",18]],"o":20},{"p":["PBKDF2","md5"],"f":[["static",12],[" ",17],["var",12],[" ",17],["md5",7],[": ",17],["PBKDF2",18,6],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["md5",7],[": ",17],["PBKDF2",18]],"d":"MD5 digest powered key derivation.\n\nhttps://en.wikipedia.org/wiki/MD5"},{"p":["PBKDF2","sha1"],"f":[["static",12],[" ",17],["var",12],[" ",17],["sha1",7],[": ",17],["PBKDF2",18,6],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["sha1",7],[": ",17],["PBKDF2",18]],"d":"SHA-1 digest powered key derivation.\n\nhttps://en.wikipedia.org/wiki/SHA-1"},{"p":["PBKDF2","sha256"],"f":[["static",12],[" ",17],["var",12],[" ",17],["sha256",7],[": ",17],["PBKDF2",18,6],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["sha256",7],[": ",17],["PBKDF2",18]],"d":"SHA-1 digest powered key derivation.\n\nhttps://en.wikipedia.org/wiki/SHA-256"},{"p":["SHA256","digestSize"],"f":[["static",12],[" ",17],["let",12],[" ",17],["digestSize",7],[": ",17],["Int",18,58]],"s":[["static",12],[" ",17],["let",12],[" ",17],["digestSize",7],[": ",17],["Int",18]],"o":18},{"p":["SHA256","littleEndian"],"f":[["static",12],[" ",17],["let",12],[" ",17],["littleEndian",7],[": ",17],["Bool",18,57]],"s":[["static",12],[" ",17],["let",12],[" ",17],["littleEndian",7],[": ",17],["Bool",18]],"o":19},{"p":["SHA256","chunkSize"],"f":[["static",12],[" ",17],["let",12],[" ",17],["chunkSize",7],[": ",17],["Int",18,58]],"s":[["static",12],[" ",17],["let",12],[" ",17],["chunkSize",7],[": ",17],["Int",18]],"o":20},{"p":["MD5","processedBytes"],"f":[["var",12],[" ",17],["processedBytes",7],[": ",17],["UInt64",18,64],[" { get }",17]],"s":[["var",12],[" ",17],["processedBytes",7],[": ",17],["UInt64",18]],"o":32},{"p":["MD5","hashValue"],"f":[["var",12],[" ",17],["hashValue",7],[": [",17],["UInt8",18,63],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["hashValue",7],[": [",17],["UInt8",18],["]",17]],"o":33},{"p":["Hash","processedBytes"],"f":[["var",12],[" ",17],["processedBytes",7],[": ",17],["UInt64",18,64],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["processedBytes",7],[": ",17],["UInt64",18]]},{"p":["Hash","hashValue"],"f":[["var",12],[" ",17],["hashValue",7],[": [",17],["UInt8",18,63],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["hashValue",7],[": [",17],["UInt8",18],["]",17]]},{"p":["SHA1","processedBytes"],"f":[["var",12],[" ",17],["processedBytes",7],[": ",17],["UInt64",18,64]],"s":[["var",12],[" ",17],["processedBytes",7],[": ",17],["UInt64",18]],"o":32},{"p":["SHA1","hashValue"],"f":[["var",12],[" ",17],["hashValue",7],[": [",17],["UInt8",18,63],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["hashValue",7],[": [",17],["UInt8",18],["]",17]],"o":33},{"p":["SHA256","processedBytes"],"f":[["var",12],[" ",17],["processedBytes",7],[": ",17],["UInt64",18,64]],"s":[["var",12],[" ",17],["processedBytes",7],[": ",17],["UInt64",18]],"o":32},{"p":["SHA256","hashValue"],"f":[["var",12],[" ",17],["hashValue",7],[": [",17],["UInt8",18,63],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["hashValue",7],[": [",17],["UInt8",18],["]",17]],"o":33},{"p":["MD5","reset()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["reset",7],["()",17]],"s":[["func",12],[" ",17],["reset",7],["()",17]],"o":41},{"p":["MD5","update(from:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["update",7],["(",17],["from",1],[" ",17],["pointer",2],[": ",17],["UnsafePointer",18,53],["<",17],["UInt8",18,63],[">)",17]],"s":[["func",12],[" ",17],["update",7],["(",17],["from",1],[": ",17],["UnsafePointer",18],["<",17],["UInt8",18],[">)",17]],"o":42},{"p":["HMAC","authenticate(_:withKey:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["authenticate",7],["(",17],["_",1],[" ",17],["message",2],[": [",17],["UInt8",18,63],["], ",17],["withKey",1],[" ",17],["key",2],[": [",17],["UInt8",18,63],["]) -> [",17],["UInt8",18,63],["]",17]],"s":[["func",12],[" ",17],["authenticate",7],["([",17],["UInt8",18],["], ",17],["withKey",1],[": [",17],["UInt8",18],["]) -> [",17],["UInt8",18],["]",17]],"c":[["H",1,"Hash",0]],"g":[["H",0,0]]},{"p":["Hash","reset()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["reset",7],["()",17]],"s":[["func",12],[" ",17],["reset",7],["()",17]]},{"p":["Hash","update(from:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["update",7],["(",17],["from",1],[" ",17],["pointer",2],[": ",17],["UnsafePointer",18,53],["<",17],["UInt8",18,63],[">)",17]],"s":[["func",12],[" ",17],["update",7],["(",17],["from",1],[": ",17],["UnsafePointer",18],["<",17],["UInt8",18],[">)",17]]},{"p":["Hash","hash(bytes:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["hash",7],["(",17],["bytes",1],[" ",17],["data",2],[": [",17],["UInt8",18,63],["]) -> [",17],["UInt8",18,63],["]",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["bytes",1],[": [",17],["UInt8",18],["]) -> [",17],["UInt8",18],["]",17]]},{"p":["Hash","hash(_:count:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["hash",7],["(",17],["_",1],[" ",17],["data",2],[": ",17],["UnsafePointer",18,53],["<",17],["UInt8",18,63],[">, ",17],["count",1],[": ",17],["Int",18,58],[") -> [",17],["UInt8",18,63],["]",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["UnsafePointer",18],["<",17],["UInt8",18],[">, ",17],["count",1],[": ",17],["Int",18],[") -> [",17],["UInt8",18],["]",17]]},{"p":["Hash","finish(from:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["finish",7],["(",17],["from",1],[" ",17],["pointer",2],[": ",17],["UnsafeBufferPointer",18,54],["<",17],["UInt8",18,63],[">) -> [",17],["UInt8",18,63],["]",17]],"s":[["func",12],[" ",17],["finish",7],["(",17],["from",1],[": ",17],["UnsafeBufferPointer",18],["<",17],["UInt8",18],[">) -> [",17],["UInt8",18],["]",17]]},{"p":["SHA1","reset()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["reset",7],["()",17]],"s":[["func",12],[" ",17],["reset",7],["()",17]],"o":41},{"p":["SHA1","update(from:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["update",7],["(",17],["from",1],[" ",17],["pointer",2],[": ",17],["UnsafePointer",18,53],["<",17],["UInt8",18,63],[">)",17]],"s":[["func",12],[" ",17],["update",7],["(",17],["from",1],[": ",17],["UnsafePointer",18],["<",17],["UInt8",18],[">)",17]],"o":42},{"p":["PBKDF2","hash(_:salt:iterations:keySize:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["_",1],[" ",17],["password",2],[": [",17],["UInt8",18,63],["], ",17],["salt",1],[": [",17],["UInt8",18,63],["], ",17],["iterations",1],[": ",17],["Int32",18,62],[", ",17],["keySize",1],[": ",17],["PBKDF2KeySize",18,1],[" = .digestSize) -> [",17],["UInt8",18,63],["]",17]],"s":[["func",12],[" ",17],["hash",7],["([",17],["UInt8",18],["], ",17],["salt",1],[": [",17],["UInt8",18],["], ",17],["iterations",1],[": ",17],["Int32",18],[", ",17],["keySize",1],[": ",17],["PBKDF2KeySize",18],[") -> [",17],["UInt8",18],["]",17]],"d":"Derives a key with up to `keySize` of bytes"},{"p":["SHA256","reset()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["reset",7],["()",17]],"s":[["func",12],[" ",17],["reset",7],["()",17]],"o":41},{"p":["SHA256","update(from:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["update",7],["(",17],["from",1],[" ",17],["pointer",2],[": ",17],["UnsafePointer",18,53],["<",17],["UInt8",18,63],[">)",17]],"s":[["func",12],[" ",17],["update",7],["(",17],["from",1],[": ",17],["UnsafePointer",18],["<",17],["UInt8",18],[">)",17]],"o":42},{"p":["xor(_:_:count:)"],"f":[["func",12],[" ",17],["xor",7],["(",17],["_",1],[" ",17],["lhs",2],[": ",17],["UnsafeMutablePointer",18,59],["<",17],["UInt8",18,63],[">, ",17],["_",1],[" ",17],["rhs",2],[": ",17],["UnsafePointer",18,53],["<",17],["UInt8",18,63],[">, ",17],["count",1],[": ",17],["Int",18,58],[")",17]],"s":[["func",12],[" ",17],["xor",7],["(",17],["UnsafeMutablePointer",18],["<",17],["UInt8",18],[">, ",17],["UnsafePointer",18],["<",17],["UInt8",18],[">, ",17],["count",1],[": ",17],["Int",18],[")",17]],"d":"XORs the lhs bytes with the rhs bytes on the same index\n\nRequires lhs and rhs to have an equal count"},{"p":["Array","hexString"],"f":[["var",12],[" ",17],["hexString",7],[": ",17],["String",18,55],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["hexString",7],[": ",17],["String",18]],"e":[["Element",2,"UInt8",63]],"d":"The 12 bytes represented as 24-character hex-string"}],"edges":{"conformer":[1,60,[],2,0,[],4,0,[],5,0,[]],"feature":[43,2,43,4,43,5,44,2,44,4,44,5,45,2,45,4,45,5],"member":[7,1,8,1,9,1,10,2,11,3,12,4,13,6,14,5,15,2,16,2,17,2,21,4,22,4,23,4,24,6,25,6,26,6,27,5,28,5,29,5,30,2,31,2,34,4,35,4,36,5,37,5,38,2,39,2,40,3,43,0,44,0,45,0,46,4,47,4,48,6,49,5,50,5,52,56],"requirement":[18,0,19,0,20,0,32,0,33,0,41,0,42,0]},"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/_MongoKittenCrypto/HMAC.swift","symbols":[0,14,3,4,11,11,9,25,40]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/_MongoKittenCrypto/Hash.swift","symbols":[0,16,0,1,15,19,2,15,20,3,15,18,5,8,32,6,8,33,8,18,41,9,18,42,13,25,45,50,25,43,60,25,44]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/_MongoKittenCrypto/Hex.swift","symbols":[4,15,52]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/_MongoKittenCrypto/MD5.swift","symbols":[24,14,2,25,22,16,26,22,17,27,22,15,45,28,30,47,25,38,55,11,10,59,15,31,80,25,39]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/_MongoKittenCrypto/PBKDF2.swift","symbols":[10,12,1,11,9,7,12,9,8,14,11,9,43,19,6,51,22,24,56,22,25,61,22,26,64,11,13,71,16,48,148,12,51]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/_MongoKittenCrypto/SHA1.swift","symbols":[0,14,4,1,22,22,2,22,23,3,22,21,21,15,34,23,25,46,32,15,35,54,11,12,58,25,47]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/mongokitten@7.1.0/.build/checkouts/mongokitten/Sources/_MongoKittenCrypto/SHA256.swift","symbols":[11,14,5,12,22,28,13,22,29,14,22,27,43,15,36,45,25,49,57,15,37,82,11,14,86,25,50]}]}