{"culture":"Algorithms","dependencies":[{"package":"swift-numerics","modules":["RealModule"]}],"extensions":[],"partitions":[{"namespace":"Algorithms","communities":[{"community":"struct","startIndex":0,"endIndex":59},{"community":"subscript","startIndex":59,"endIndex":76},{"community":"property","startIndex":76,"endIndex":119},{"community":"method","startIndex":119,"endIndex":223},{"community":"type.op","startIndex":223,"endIndex":248},{"community":"func","startIndex":248,"endIndex":250},{"community":"typealias","startIndex":250,"endIndex":257}]},{"namespace":"Swift","communities":[{"community":"method","startIndex":257,"endIndex":345}]}],"identifiers":["s10Algorithms13SplitSequenceV","s10Algorithms13SplitSequenceV8IteratorV","s10Algorithms14Chain2SequenceV","s10Algorithms14Chain2SequenceV8IteratorV","s10Algorithms14Chain2SequenceVAASlRzSlR_rlE5IndexV","s10Algorithms14CycledSequenceV","s10Algorithms14CycledSequenceV8IteratorV","s10Algorithms15SplitCollectionV","s10Algorithms15SplitCollectionV5IndexV","s10Algorithms15UniquedSequenceV","s10Algorithms15UniquedSequenceV8IteratorV","s10Algorithms16JoinedBySequenceV","s10Algorithms16JoinedBySequenceV8IteratorV","s10Algorithms16Product2SequenceV","s10Algorithms16Product2SequenceV8IteratorV","s10Algorithms16Product2SequenceVAASlRzrlE5IndexV","s10Algorithms16StridingSequenceV","s10Algorithms16StridingSequenceV8IteratorV","s10Algorithms17CompactedSequenceV","s10Algorithms17CompactedSequenceV8IteratorV","s10Algorithms17IndexedCollectionV","s10Algorithms18JoinedByCollectionV","s10Algorithms18JoinedByCollectionV5IndexV","s10Algorithms18StridingCollectionV","s10Algorithms18StridingCollectionV5IndexV","s10Algorithms19ChunkedByCollectionV","s10Algorithms19ChunkedByCollectionV5IndexV","s10Algorithms19ChunkedOnCollectionV","s10Algorithms19CompactedCollectionV","s10Algorithms19CompactedCollectionV5IndexV","s10Algorithms20CombinationsSequenceV","s10Algorithms20CombinationsSequenceV8IteratorV","s10Algorithms20InterspersedSequenceV","s10Algorithms20InterspersedSequenceV8IteratorV","s10Algorithms20InterspersedSequenceVAASlRzrlE5IndexV","s10Algorithms20PermutationsSequenceV","s10Algorithms20PermutationsSequenceV8IteratorV","s10Algorithms21AdjacentPairsSequenceV","s10Algorithms21AdjacentPairsSequenceV8IteratorV","s10Algorithms21CycledTimesCollectionV","s10Algorithms21CycledTimesCollectionV5IndexV","s10Algorithms23AdjacentPairsCollectionV","s10Algorithms23AdjacentPairsCollectionV5IndexV","s10Algorithms23ChunksOfCountCollectionV","s10Algorithms23ChunksOfCountCollectionV5IndexV","s10Algorithms23JoinedByClosureSequenceV","s10Algorithms23JoinedByClosureSequenceV8IteratorV","s10Algorithms24WindowsOfCountCollectionV","s10Algorithms24WindowsOfCountCollectionV5IndexV","s10Algorithms25JoinedByClosureCollectionV","s10Algorithms25JoinedByClosureCollectionV5IndexV","s10Algorithms26UniquePermutationsSequenceV","s10Algorithms26UniquePermutationsSequenceV8IteratorV","s10Algorithms27ExclusiveReductionsSequenceV","s10Algorithms27ExclusiveReductionsSequenceV8IteratorV","s10Algorithms27ExclusiveReductionsSequenceVAASlRzrlE5IndexV","s10Algorithms27InclusiveReductionsSequenceV","s10Algorithms27InclusiveReductionsSequenceV8IteratorV","s10Algorithms27InclusiveReductionsSequenceVAASlRzrlE5IndexV","s10Algorithms14Chain2SequenceVAASlRzSlR_rlEy7ElementQzAcASlRzSlR_rlE5IndexVyxq__Gcip","s10Algorithms15SplitCollectionVy11SubSequenceQzAC5IndexVyx_Gcip","s10Algorithms16Product2SequenceVAASlRzrlEy7ElementQz_ADQy_tAcASlRzrlE5IndexVyxq__Gcip","s10Algorithms17IndexedCollectionVy5IndexQz5index_7ElementQz7elementtAEcip","s10Algorithms18JoinedByCollectionVy7ElementQy_AC5IndexVyxq__Gcip","s10Algorithms18StridingCollectionVy7ElementQzAC5IndexVyx_Gcip","s10Algorithms19ChunkedByCollectionVy11SubSequenceQzAC5IndexVyxq__Gcip","s10Algorithms19ChunkedOnCollectionVyq__11SubSequenceQztAA0b2ByD0V5IndexVyxq__Gcip","s10Algorithms19CompactedCollectionVyq_AC5IndexVyxq__Gcip","s10Algorithms20InterspersedSequenceVAASlRzrlEy7ElementQzAcASlRzrlE5IndexVyx_Gcip","s10Algorithms21CycledTimesCollectionVy7ElementQzAC5IndexVyx_Gcip","s10Algorithms23AdjacentPairsCollectionVy7ElementQz_AEtAC5IndexVyx_Gcip","s10Algorithms23ChunksOfCountCollectionVy11SubSequenceQzAC5IndexVyx_Gcip","s10Algorithms24WindowsOfCountCollectionVy11SubSequenceQzAC5IndexVyx_Gcip","s10Algorithms25JoinedByClosureCollectionVy7ElementQy_AC5IndexVyxq__Gcip","s10Algorithms27ExclusiveReductionsSequenceVAASlRzrlEyq_AcASlRzrlE5IndexVyxq__Gcip","s10Algorithms27InclusiveReductionsSequenceVAASlRzrlEy7ElementQzAcASlRzrlE5IndexVyx_Gcip","s10Algorithms14Chain2SequenceVAASlRzSlR_rlE10startIndexAcASlRzSlR_rlE0E0Vyxq__Gvp","s10Algorithms14Chain2SequenceVAASlRzSlR_rlE8endIndexAcASlRzSlR_rlE0E0Vyxq__Gvp","s10Algorithms15SplitCollectionV10startIndexAC0E0Vyx_Gvp","s10Algorithms15SplitCollectionV8endIndexAC0E0Vyx_Gvp","s10Algorithms16Product2SequenceVAASlRzrlE10startIndexAcASlRzrlE0E0Vyxq__Gvp","s10Algorithms16Product2SequenceVAASlRzrlE5countSivp","s10Algorithms16Product2SequenceVAASlRzrlE8endIndexAcASlRzrlE0E0Vyxq__Gvp","s10Algorithms17IndexedCollectionV10startIndex0E0Qzvp","s10Algorithms17IndexedCollectionV7indices7IndicesQzvp","s10Algorithms17IndexedCollectionV8endIndex0E0Qzvp","s10Algorithms18JoinedByCollectionV10startIndexAC0F0Vyxq__Gvp","s10Algorithms18JoinedByCollectionV8endIndexAC0F0Vyxq__Gvp","s10Algorithms18StridingCollectionV10startIndexAC0E0Vyx_Gvp","s10Algorithms18StridingCollectionV5countSivp","s10Algorithms18StridingCollectionV8endIndexAC0E0Vyx_Gvp","s10Algorithms19ChunkedByCollectionV10startIndexAC0F0Vyxq__Gvp","s10Algorithms19ChunkedByCollectionV8endIndexAC0F0Vyxq__Gvp","s10Algorithms19ChunkedOnCollectionV10startIndexAA0b2ByD0V0F0Vyxq__Gvp","s10Algorithms19ChunkedOnCollectionV8endIndexAA0b2ByD0V0F0Vyxq__Gvp","s10Algorithms19CompactedCollectionV10startIndexAC0E0Vyxq__Gvp","s10Algorithms19CompactedCollectionV8endIndexAC0E0Vyxq__Gvp","s10Algorithms20CombinationsSequenceV5countSivp","s10Algorithms20InterspersedSequenceVAASlRzrlE10startIndexAcASlRzrlE0E0Vyx_Gvp","s10Algorithms20InterspersedSequenceVAASlRzrlE8endIndexAcASlRzrlE0E0Vyx_Gvp","s10Algorithms20PermutationsSequenceV5countSivp","s10Algorithms21AdjacentPairsSequenceV19underestimatedCountSivp","s10Algorithms21CycledTimesCollectionV10startIndexAC0F0Vyx_Gvp","s10Algorithms21CycledTimesCollectionV5countSivp","s10Algorithms21CycledTimesCollectionV8endIndexAC0F0Vyx_Gvp","s10Algorithms23AdjacentPairsCollectionV10startIndexAC0F0Vyx_Gvp","s10Algorithms23AdjacentPairsCollectionV5countSivp","s10Algorithms23AdjacentPairsCollectionV8endIndexAC0F0Vyx_Gvp","s10Algorithms23ChunksOfCountCollectionV10startIndexAC0G0Vyx_Gvp","s10Algorithms23ChunksOfCountCollectionV5countSivp","s10Algorithms23ChunksOfCountCollectionV8endIndexAC0G0Vyx_Gvp","s10Algorithms24WindowsOfCountCollectionV10startIndexAC0G0Vyx_Gvp","s10Algorithms24WindowsOfCountCollectionV8endIndexAC0G0Vyx_Gvp","s10Algorithms25JoinedByClosureCollectionV10startIndexAC0G0Vyxq__Gvp","s10Algorithms25JoinedByClosureCollectionV8endIndexAC0G0Vyxq__Gvp","s10Algorithms27ExclusiveReductionsSequenceVAASlRzrlE10startIndexAcASlRzrlE0F0Vyxq__Gvp","s10Algorithms27ExclusiveReductionsSequenceVAASlRzrlE8endIndexAcASlRzrlE0F0Vyxq__Gvp","s10Algorithms27InclusiveReductionsSequenceVAASlRzrlE10startIndexAcASlRzrlE0F0Vyx_Gvp","s10Algorithms27InclusiveReductionsSequenceVAASlRzrlE8endIndexAcASlRzrlE0F0Vyx_Gvp","s10Algorithms13SplitSequenceV12makeIteratorAC0E0Vyx_GyF","s10Algorithms13SplitSequenceV8IteratorV4nextSay7ElementQzGSgyF","s10Algorithms14Chain2SequenceV12makeIteratorAC0E0Vyxq__GyF","s10Algorithms14Chain2SequenceV8IteratorV4next7ElementQzSgyF","s10Algorithms14Chain2SequenceVAASKRzSKR_rlE5index6beforeAcASlRzSlR_rlE5IndexVyxq__GAH_tF","s10Algorithms14Chain2SequenceVAASlRzSlR_rlE5index5afterAcASlRzSlR_rlE5IndexVyxq__GAH_tF","s10Algorithms14Chain2SequenceVAASlRzSlR_rlE5index_8offsetBy07limitedF0AcASlRzSlR_rlE5IndexVyxq__GSgAI_SiAItF","s10Algorithms14Chain2SequenceVAASlRzSlR_rlE5index_8offsetByAcASlRzSlR_rlE5IndexVyxq__GAH_SitF","s10Algorithms14Chain2SequenceVAASlRzSlR_rlE8distance4from2toSiAcASlRzSlR_rlE5IndexVyxq__G_AItF","s10Algorithms14CycledSequenceV12makeIteratorAC0E0Vyx_GyF","s10Algorithms14CycledSequenceV8IteratorV4next7ElementQzSgyF","s10Algorithms15SplitCollectionV5IndexV4hash4intoys6HasherVz_tF","s10Algorithms15SplitCollectionV5index5afterAC5IndexVyx_GAH_tF","s10Algorithms15UniquedSequenceV12makeIteratorAC0E0Vyxq__GyF","s10Algorithms15UniquedSequenceV8IteratorV4next7ElementQzSgyF","s10Algorithms16JoinedBySequenceV12makeIteratorAC0F0Vyxq__GyF","s10Algorithms16JoinedBySequenceV8IteratorV4next7ElementQy_SgyF","s10Algorithms16Product2SequenceV12makeIteratorAC0E0Vyxq__GyF","s10Algorithms16Product2SequenceV8IteratorV4next7ElementQz_AGQy_tSgyF","s10Algorithms16Product2SequenceVAASKRzSKR_rlE5index6beforeAcASlRzrlE5IndexVyxq__GAH_tF","s10Algorithms16Product2SequenceVAASlRzrlE5index5afterAcASlRzrlE5IndexVyxq__GAH_tF","s10Algorithms16Product2SequenceVAASlRzrlE5index_8offsetBy07limitedF0AcASlRzrlE5IndexVyxq__GSgAI_SiAItF","s10Algorithms16Product2SequenceVAASlRzrlE5index_8offsetByAcASlRzrlE5IndexVyxq__GAH_SitF","s10Algorithms16Product2SequenceVAASlRzrlE8distance4from2toSiAcASlRzrlE5IndexVyxq__G_AItF","s10Algorithms16StridingSequenceV12makeIteratorAC0E0Vyx_GyF","s10Algorithms16StridingSequenceV8IteratorV4next7ElementQzSgyF","s10Algorithms16StridingSequenceV8striding2byACyxGSi_tF","s10Algorithms17CompactedSequenceV12makeIteratorAC0E0Vyxq__GyF","s10Algorithms17CompactedSequenceV8IteratorV4nextq_SgyF","s10Algorithms17IndexedCollectionV5index5after5IndexQzAG_tF","s10Algorithms17IndexedCollectionV5index_8offsetBy07limitedF05IndexQzSgAH_SiAHtF","s10Algorithms17IndexedCollectionV5index_8offsetBy5IndexQzAG_SitF","s10Algorithms17IndexedCollectionV8distance4from2toSi5IndexQz_AHtF","s10Algorithms17IndexedCollectionVAASKRzrlE5index6before5IndexQzAG_tF","s10Algorithms18JoinedByCollectionV5index5afterAC5IndexVyxq__GAH_tF","s10Algorithms18JoinedByCollectionV5index_06offsetC007limitedC0AC5IndexVyxq__GSgAI_SiAItF","s10Algorithms18JoinedByCollectionV5index_06offsetC0AC5IndexVyxq__GAH_SitF","s10Algorithms18JoinedByCollectionV8distance4from2toSiAC5IndexVyxq__G_AItF","s10Algorithms18JoinedByCollectionVAASKRzSKR_SK7ElementRpzrlE5index6beforeAC5IndexVyxq__GAJ_tF","s10Algorithms18StridingCollectionV5index5afterAC5IndexVyx_GAH_tF","s10Algorithms18StridingCollectionV5index_8offsetBy07limitedF0AC5IndexVyx_GSgAI_SiAItF","s10Algorithms18StridingCollectionV5index_8offsetByAC5IndexVyx_GAH_SitF","s10Algorithms18StridingCollectionV8distance4from2toSiAC5IndexVyx_G_AItF","s10Algorithms18StridingCollectionV8striding2byACyxGSi_tF","s10Algorithms18StridingCollectionVAASkRzrlE5index6beforeAC5IndexVyx_GAH_tF","s10Algorithms19ChunkedByCollectionV5index5afterAC5IndexVyxq__GAH_tF","s10Algorithms19ChunkedByCollectionVAASKRzrlE5index6beforeAC5IndexVyxq__GAH_tF","s10Algorithms19ChunkedOnCollectionV5index5afterAA0b2ByD0V5IndexVyxq__GAJ_tF","s10Algorithms19ChunkedOnCollectionVAASKRzrlE5index6beforeAA0b2ByD0V5IndexVyxq__GAJ_tF","s10Algorithms19CompactedCollectionV5index5afterAC5IndexVyxq__GAH_tF","s10Algorithms19CompactedCollectionVAASKRzrlE5index6beforeAC5IndexVyxq__GAH_tF","s10Algorithms20CombinationsSequenceV12makeIteratorAC0E0Vyx_GyF","s10Algorithms20CombinationsSequenceV8IteratorV4nextSay7ElementQzGSgyF","s10Algorithms20InterspersedSequenceV12makeIteratorAC0E0Vyx_GyF","s10Algorithms20InterspersedSequenceV8IteratorV4next7ElementQzSgyF","s10Algorithms20InterspersedSequenceVAASKRzrlE5index6beforeAcASlRzrlE5IndexVyx_GAH_tF","s10Algorithms20InterspersedSequenceVAASlRzrlE5index5afterAcASlRzrlE5IndexVyx_GAH_tF","s10Algorithms20InterspersedSequenceVAASlRzrlE5index_8offsetBy07limitedF0AcASlRzrlE5IndexVyx_GSgAI_SiAItF","s10Algorithms20InterspersedSequenceVAASlRzrlE5index_8offsetByAcASlRzrlE5IndexVyx_GAH_SitF","s10Algorithms20InterspersedSequenceVAASlRzrlE8distance4from2toSiAcASlRzrlE5IndexVyx_G_AItF","s10Algorithms20PermutationsSequenceV12makeIteratorAC0E0Vyx_GyF","s10Algorithms20PermutationsSequenceV8IteratorV4nextSay7ElementQzGSgyF","s10Algorithms21AdjacentPairsSequenceV12makeIteratorAC0F0Vyx_GyF","s10Algorithms21AdjacentPairsSequenceV8IteratorV4next7ElementQz_AHtSgyF","s10Algorithms21CycledTimesCollectionV5index5afterAC5IndexVyx_GAH_tF","s10Algorithms21CycledTimesCollectionV5index_8offsetBy07limitedG0AC5IndexVyx_GSgAI_SiAItF","s10Algorithms21CycledTimesCollectionV5index_8offsetByAC5IndexVyx_GAH_SitF","s10Algorithms21CycledTimesCollectionV8distance4from2toSiAC5IndexVyx_G_AItF","s10Algorithms21CycledTimesCollectionVAASKRzrlE5index6beforeAC5IndexVyx_GAH_tF","s10Algorithms23AdjacentPairsCollectionV5IndexVAASHADRpzrlE4hash4intoys6HasherVz_tF","s10Algorithms23AdjacentPairsCollectionV5index5afterAC5IndexVyx_GAH_tF","s10Algorithms23AdjacentPairsCollectionV5index_8offsetBy07limitedG0AC5IndexVyx_GSgAI_SiAItF","s10Algorithms23AdjacentPairsCollectionV5index_8offsetByAC5IndexVyx_GAH_SitF","s10Algorithms23AdjacentPairsCollectionV8distance4from2toSiAC5IndexVyx_G_AItF","s10Algorithms23AdjacentPairsCollectionVAASKRzrlE5index6beforeAC5IndexVyx_GAH_tF","s10Algorithms23ChunksOfCountCollectionV5index5afterAC5IndexVyx_GAH_tF","s10Algorithms23ChunksOfCountCollectionV5index_8offsetBy07limitedH0AC5IndexVyx_GSgAI_SiAItF","s10Algorithms23ChunksOfCountCollectionV5index_8offsetByAC5IndexVyx_GAH_SitF","s10Algorithms23ChunksOfCountCollectionV8distance4from2toSiAC5IndexVyx_G_AItF","s10Algorithms23ChunksOfCountCollectionVAASkRzrlE5index6beforeAC5IndexVyx_GAH_tF","s10Algorithms23JoinedByClosureSequenceV12makeIteratorAC0G0Vyxq__GyF","s10Algorithms23JoinedByClosureSequenceV8IteratorV4next7ElementQy_SgyF","s10Algorithms24WindowsOfCountCollectionV5index5afterAC5IndexVyx_GAH_tF","s10Algorithms24WindowsOfCountCollectionV5index_8offsetBy07limitedH0AC5IndexVyx_GSgAI_SiAItF","s10Algorithms24WindowsOfCountCollectionV5index_8offsetByAC5IndexVyx_GAH_SitF","s10Algorithms24WindowsOfCountCollectionV8distance4from2toSiAC5IndexVyx_G_AItF","s10Algorithms24WindowsOfCountCollectionVAASKRzrlE5index6beforeAC5IndexVyx_GAH_tF","s10Algorithms25JoinedByClosureCollectionV5index5afterAC5IndexVyxq__GAH_tF","s10Algorithms25JoinedByClosureCollectionV5index_06offsetC007limitedC0AC5IndexVyxq__GSgAI_SiAItF","s10Algorithms25JoinedByClosureCollectionV5index_06offsetC0AC5IndexVyxq__GAH_SitF","s10Algorithms25JoinedByClosureCollectionV8distance4from2toSiAC5IndexVyxq__G_AItF","s10Algorithms25JoinedByClosureCollectionVAASKRzSKR_SK7ElementRpzrlE5index6beforeAC5IndexVyxq__GAJ_tF","s10Algorithms26UniquePermutationsSequenceV12makeIteratorAC0F0Vyx_GyF","s10Algorithms26UniquePermutationsSequenceV8IteratorV4nextSay7ElementQzGSgyF","s10Algorithms27ExclusiveReductionsSequenceV12makeIteratorAC0F0Vyxq__GyF","s10Algorithms27ExclusiveReductionsSequenceV8IteratorV4nextq_SgyF","s10Algorithms27ExclusiveReductionsSequenceVAASlRzrlE5IndexVAASHADRpzrlE4hash4intoys6HasherVz_tF","s10Algorithms27ExclusiveReductionsSequenceVAASlRzrlE5index5afterAcASlRzrlE5IndexVyxq__GAH_tF","s10Algorithms27ExclusiveReductionsSequenceVAASlRzrlE8distance4from2toSiAcASlRzrlE5IndexVyxq__G_AItF","s10Algorithms27InclusiveReductionsSequenceV12makeIteratorAC0F0Vyx_GyF","s10Algorithms27InclusiveReductionsSequenceV8IteratorV4next7ElementQzSgyF","s10Algorithms27InclusiveReductionsSequenceVAASlRzrlE5IndexVAASHADRpzrlE4hash4intoys6HasherVz_tF","s10Algorithms27InclusiveReductionsSequenceVAASlRzrlE5index5afterAcASlRzrlE5IndexVyx_GAH_tF","s10Algorithms27InclusiveReductionsSequenceVAASlRzrlE8distance4from2toSiAcASlRzrlE5IndexVyx_G_AItF","s10Algorithms14Chain2SequenceVAASlRzSlR_rlE5IndexV1loiySbAEyxq__G_AGtFZ","s10Algorithms15SplitCollectionV5IndexV1loiySbAEyx_G_AGtFZ","s10Algorithms15SplitCollectionV5IndexV2eeoiySbAEyx_G_AGtFZ","s10Algorithms16Product2SequenceVAASlRzrlE5IndexV1loiySbAEyxq__G_AGtFZ","s10Algorithms18JoinedByCollectionV5IndexV1loiySbAEyxq__G_AGtFZ","s10Algorithms18JoinedByCollectionV5IndexV2eeoiySbAEyxq__G_AGtFZ","s10Algorithms18StridingCollectionV5IndexV1loiySbAEyx_G_AGtFZ","s10Algorithms19ChunkedByCollectionV5IndexV1loiySbAEyxq__G_AGtFZ","s10Algorithms19ChunkedByCollectionV5IndexV2eeoiySbAEyxq__G_AGtFZ","s10Algorithms19CompactedCollectionV5IndexV1loiySbAEyxq__G_AGtFZ","s10Algorithms20InterspersedSequenceVAASlRzrlE5IndexV1loiySbAEyx_G_AGtFZ","s10Algorithms21CycledTimesCollectionV5IndexV1loiySbAEyx_G_AGtFZ","s10Algorithms21CycledTimesCollectionV5IndexV2eeoiySbAEyx_G_AGtFZ","s10Algorithms23AdjacentPairsCollectionV5IndexV1loiySbAEyx_G_AGtFZ","s10Algorithms23AdjacentPairsCollectionV5IndexV2eeoiySbAEyx_G_AGtFZ","s10Algorithms23ChunksOfCountCollectionV5IndexV1loiySbAEyx_G_AGtFZ","s10Algorithms23ChunksOfCountCollectionV5IndexV2eeoiySbAEyx_G_AGtFZ","s10Algorithms24WindowsOfCountCollectionV5IndexV1loiySbAEyx_G_AGtFZ","s10Algorithms24WindowsOfCountCollectionV5IndexV2eeoiySbAEyx_G_AGtFZ","s10Algorithms25JoinedByClosureCollectionV5IndexV1loiySbAEyxq__G_AGtFZ","s10Algorithms25JoinedByClosureCollectionV5IndexV2eeoiySbAEyxq__G_AGtFZ","s10Algorithms27ExclusiveReductionsSequenceVAASlRzrlE5IndexV1loiySbAEyxq__G_AGtFZ","s10Algorithms27ExclusiveReductionsSequenceVAASlRzrlE5IndexV2eeoiySbAEyxq__G_AGtFZ","s10Algorithms27InclusiveReductionsSequenceVAASlRzrlE5IndexV1loiySbAEyx_G_AGtFZ","s10Algorithms27InclusiveReductionsSequenceVAASlRzrlE5IndexV2eeoiySbAEyx_G_AGtFZ","s10Algorithms5chainyAA14Chain2SequenceVyxq_Gx_q_tSTRzSTR_7ElementQy_AFRtzr0_lF","s10Algorithms7productyAA16Product2SequenceVyxq_Gx_q_tSTRzSlR_r0_lF","s10Algorithms13SplitSequenceV8IteratorV7Elementa","s10Algorithms16Product2SequenceV7Elementa","s10Algorithms17IndexedCollectionV7Elementa","s10Algorithms19ChunkedOnCollectionV5Indexa","s10Algorithms21AdjacentPairsSequenceV8IteratorV7Elementa","s10Algorithms21CycledTimesCollectionV7Elementa","s10Algorithms23ChunksOfCountCollectionV7Elementa","sSK10Algorithms11SubSequenceQzRszrlE10trimSuffix5whileySb7ElementQzKXE_tKF","sSK10Algorithms11SubSequenceQzRszrlE4trim5whileySb7ElementQzKXE_tKF","sSK10AlgorithmsE14trimmingSuffix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSK10AlgorithmsE6suffix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSK10AlgorithmsE8trimming5while11SubSequenceQzSb7ElementQzKXE_tKF","sSK10AlgorithmsSmRzrlE10trimSuffix5whileySb7ElementSTQzKXE_tKF","sSK10AlgorithmsSmRzrlE4trim5whileySb7ElementSTQzKXE_tKF","sSM10AlgorithmsE15stablePartition2by5IndexQzSb7ElementQzKXE_tKF","sSM10AlgorithmsE15stablePartition8subrange2by5IndexQzSnyAFG_Sb7ElementQzKXEtKF","sSM10AlgorithmsE6rotate8subrange9toStartAt5IndexQzSnyAFG_AFtF","sSM10AlgorithmsE6rotate9toStartAt5IndexQzAE_tF","sSM10AlgorithmsE9partition8subrange2by5IndexQzSnyAFG_Sb7ElementQzKXEtKF","sSM10AlgorithmsSKRzrlE6rotate8subrange9toStartAt5IndexSlQzSnyAFG_AFtF","sSM10AlgorithmsSKRzrlE6rotate9toStartAt5IndexSlQzAE_tF","sSM10AlgorithmsSKRzrlE7reverse8subrangeySny5IndexSlQzG_tF","sSM10AlgorithmsSKRzrlE9partition8subrange2by5IndexSlQzSnyAFG_Sb7ElementSTQzKXEtKF","sST10AlgorithmsE10reductions4into_Sayqd__Gqd___yqd__z_7ElementQztKXEtKlF","sST10AlgorithmsE10reductionsySay7ElementQzGA2D_ADtKXEKF","sST10AlgorithmsE10reductionsySayqd__Gqd___qd__qd___7ElementQztKXEtKlF","sST10AlgorithmsE11firstNonNilyqd__SgAC7ElementQzKXEKlF","sST10AlgorithmsE12interspersed4withAA20InterspersedSequenceVyxG7ElementQz_tF","sST10AlgorithmsE12randomSample5count5usingSay7ElementQzGSi_qd__ztSGRd__lF","sST10AlgorithmsE12randomSample5countSay7ElementQzGSi_tF","sST10AlgorithmsE13adjacentPairsAA08AdjacentC8SequenceVyxGyF","sST10AlgorithmsE3max5count8sortedBySay7ElementQzGSi_SbAF_AFtKXEtKF","sST10AlgorithmsE3min5count8sortedBySay7ElementQzGSi_SbAF_AFtKXEtKF","sST10AlgorithmsE4scan4into_Sayqd__Gqd___yqd__z_7ElementQztKXEtKlF","sST10AlgorithmsE4scanySay7ElementQzGA2D_ADtKXEKF","sST10AlgorithmsE4scanySayqd__Gqd___qd__qd___7ElementQztKXEtKlF","sST10AlgorithmsE7uniqued2onSay7ElementQzGqd__AEKXE_tKSHRd__lF","sST10AlgorithmsE8striding2byAA16StridingSequenceVyxGSi_tF","sST10AlgorithmsE9compactedAA17CompactedSequenceVyxqd__Gyqd__Sg7ElementRtzlF","sST10AlgorithmsE9minAndMax2by7ElementQz0B0_AE3maxtSgSbAE_AEtKXE_tKF","sST10AlgorithmsSH7ElementRpzrlE7uniquedAA15UniquedSequenceVyxACGyF","sST10AlgorithmsSL7ElementRpzrlE3max5countSayACGSi_tF","sST10AlgorithmsSL7ElementRpzrlE3min5countSayACGSi_tF","sST10AlgorithmsSL7ElementRpzrlE9minAndMaxAC0C0_AC3maxtSgyF","sST10AlgorithmsST7ElementRpzrlE6joined2byAA16JoinedBySequenceVyxqd__Gqd___tSlRd__AB_ABQZABRtd__lF","sST10AlgorithmsST7ElementRpzrlE6joined2byAA16JoinedBySequenceVyxs15CollectionOfOneVyAB_ABQZGGAJ_tF","sST10AlgorithmsST7ElementRpzrlE6joined2bySayABQyd__Gqd__AC_ACtKXE_tKSTRd__AB_ABQZAFRSlF","sST10AlgorithmsST7ElementRpzrlE6joined2bySayAB_ABQZGAfC_ACtKXE_tKF","sSl10Algorithms11SubSequenceQzRszrlE10trimPrefix5whileySb7ElementQzKXE_tKF","sSl10AlgorithmsE12combinations7ofCountAA20CombinationsSequenceVyxGSi_tF","sSl10AlgorithmsE12combinations7ofCountAA20CombinationsSequenceVyxGqd___tSXRd__Si5BoundRtd__lF","sSl10AlgorithmsE12permutations7ofCountAA20PermutationsSequenceVyxGSiSg_tF","sSl10AlgorithmsE12permutations7ofCountAA20PermutationsSequenceVyxGqd___tSXRd__Si5BoundRtd__lF","sSl10AlgorithmsE12randomSample5count5usingSay7ElementQzGSi_qd__ztSGRd__lF","sSl10AlgorithmsE12randomSample5countSay7ElementQzGSi_tF","sSl10AlgorithmsE13adjacentPairsAA08AdjacentC10CollectionVyxGyF","sSl10AlgorithmsE14trimmingPrefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSl10AlgorithmsE17partitioningIndex5where0C0QzSb7ElementQzKXE_tKF","sSl10AlgorithmsE18randomStableSample5count5usingSay7ElementQzGSi_qd__ztSGRd__lF","sSl10AlgorithmsE18randomStableSample5countSay7ElementQzGSi_tF","sSl10AlgorithmsE3max5count8sortedBySay7ElementQzGSi_SbAF_AFtKXEtKF","sSl10AlgorithmsE3min5count8sortedBySay7ElementQzGSi_SbAF_AFtKXEtKF","sSl10AlgorithmsE6chunks7ofCountAA08ChunksOfD10CollectionVyxGSi_tF","sSl10AlgorithmsE6cycled5timesAA21CycledTimesCollectionVyxGSi_tF","sSl10AlgorithmsE6cycledAA14CycledSequenceVyxGyF","sSl10AlgorithmsE7chunked2bySay11SubSequenceQzGSb7ElementQz_AHtKXE_tKF","sSl10AlgorithmsE7chunked2onSayqd___11SubSequenceQztGqd__7ElementQzKXE_tKSQRd__lF","sSl10AlgorithmsE7indexedAA17IndexedCollectionVyxGyF","sSl10AlgorithmsE7windows7ofCountAA09WindowsOfD10CollectionVyxGSi_tF","sSl10AlgorithmsE8striding2byAA18StridingCollectionVyxGSi_tF","sSl10AlgorithmsE9compactedAA19CompactedCollectionVyxqd__Gyqd__Sg7ElementRtzlF","sSl10AlgorithmsSH7ElementRpzrlE18uniquePermutations7ofCountAA06UniqueD8SequenceVyxGSiSg_tF","sSl10AlgorithmsSH7ElementRpzrlE18uniquePermutations7ofCountAA06UniqueD8SequenceVyxGqd___tSXRd__Si5BoundRtd__lF","sSl10AlgorithmsSL7ElementRpzrlE3max5countSayACGSi_tF","sSl10AlgorithmsSL7ElementRpzrlE3min5countSayACGSi_tF","sSl10AlgorithmsSl7ElementRpzrlE6joined2byAA18JoinedByCollectionVyxqd__Gqd___tSlRd__AB_ABQZABRtd__lF","sSl10AlgorithmsSl7ElementRpzrlE6joined2byAA18JoinedByCollectionVyxs0G5OfOneVyAB_ABQZGGAJ_tF","sSl10AlgorithmsSmRzrlE10trimPrefix5whileySb7ElementQzKXE_tKF","ss20LazySequenceProtocolP10AlgorithmsE10reductions4into_AC019ExclusiveReductionsB0Vy8ElementsQzqd__Gqd___yqd__z_7ElementQztctlF","ss20LazySequenceProtocolP10AlgorithmsE10reductionsyAC019ExclusiveReductionsB0Vy8ElementsQzqd__Gqd___qd__qd___7ElementQztctlF","ss20LazySequenceProtocolP10AlgorithmsE10reductionsyAC019InclusiveReductionsB0Vy8ElementsQzG7ElementQzAK_AKtcF","ss20LazySequenceProtocolP10AlgorithmsE4scan4into_AC019ExclusiveReductionsB0Vy8ElementsQzqd__Gqd___yqd__z_7ElementQztctlF","ss20LazySequenceProtocolP10AlgorithmsE4scanyAC019ExclusiveReductionsB0Vy8ElementsQzqd__Gqd___qd__qd___7ElementQztctlF","ss20LazySequenceProtocolP10AlgorithmsE4scanyAC019InclusiveReductionsB0Vy8ElementsQzG7ElementQzAK_AKtcF","ss20LazySequenceProtocolP10AlgorithmsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorAC05SplitB0Vy8ElementsQzGSi_S2b7ElementQzctF","ss20LazySequenceProtocolP10AlgorithmsE7uniqued2onAC07UniquedB0Vyxqd__Gqd__7ElementQzc_tSHRd__lF","ss20LazySequenceProtocolP10AlgorithmsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC05SplitB0Vy8ElementsQzGAE_SiSbtF","ss20LazySequenceProtocolP10AlgorithmsST7ElementRpzrlE6joined2byAC015JoinedByClosureB0Vy8ElementsQzqd__Gqd__AE_AEtc_tSTRd__AD_ADQZADRtd__lF","ss20LazySequenceProtocolP10AlgorithmsST7ElementRpzrlE6joined2byAC015JoinedByClosureB0Vy8ElementsQzs15CollectionOfOneVyAD_ADQZGGAnE_AEtc_tF","ss20LazySequenceProtocolP10AlgorithmsSl7ElementRpzSl8ElementsRpzrlE6joined2byAC25JoinedByClosureCollectionVyAGqd__Gqd__AE_AEtc_tSlRd__AD_ADQZADRtd__lF","ss20LazySequenceProtocolP10AlgorithmsSl7ElementRpzSl8ElementsRpzrlE6joined2byAC25JoinedByClosureCollectionVyAGs0L5OfOneVyAD_ADQZGGAnE_AEtc_tF","ss20LazySequenceProtocolP10AlgorithmsSlRzSQ7ElementSTRpzSl8ElementsABRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC15SplitCollectionVyAGGAE_SiSbtF","ss20LazySequenceProtocolP10AlgorithmsSlRzSl8ElementsABRpzrlE5split9maxSplits25omittingEmptySubsequences14whereSeparatorAC15SplitCollectionVyAEGSi_S2b7ElementSTQzctF","ss20LazySequenceProtocolP10AlgorithmsSlRzSl8ElementsABRpzrlE7chunked2byAC19ChunkedByCollectionVyAE7ElementSTQzGSbAK_AKtc_tF","ss20LazySequenceProtocolP10AlgorithmsSlRzSl8ElementsABRpzrlE7chunked2onAC19ChunkedOnCollectionVyAEqd__Gqd__7ElementSTQzc_tSQRd__lF","sSG","sSH","sSH4hash4intoys6HasherVz_tF","sSK","sSK12_RegexParserE10mapOffsetsySny5IndexQzGSi5lower_Si5uppert_tF","sSK12_RegexParserE14flatmapOffsetsySny5IndexQzGSi5lower_Si5uppertSgF","sSK17_StringProcessingSL7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF","sSK5index6before5IndexQzAD_tF","sSK9formIndex6beforey0B0Qzz_tF","sSKsE10difference4from2bys20CollectionDifferenceVy7ElementQzGqd___SbAG_AGtXEtSKRd__AFQyd__AGRSlF","sSKsE4last5where7ElementQzSgSbADKXE_tKF","sSKsE4last7ElementQzSgvp","sSKsE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSKsE5index_8offsetBy5IndexQzAD_SitF","sSKsE8distance4from2toSi5IndexQz_AEtF","sSKsE9formIndex6beforey0B0Qzz_tF","sSKsE9lastIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSKsSQ7ElementRpzrlE10difference4froms20CollectionDifferenceVyABGqd___tSKRd__AAQyd__ABRSlF","sSKsSQ7ElementRpzrlE9lastIndex2of0C0QzSgAB_tF","sSKsSS7ElementRtzrlE6joined9separatorS2S_tF","sSL","sSL1loiySbx_xtFZ","sSLsE1goiySbx_xtFZ","sSLsE2geoiySbx_xtFZ","sSLsE2leoiySbx_xtFZ","sSLsE3zzloiySnyxGx_xtFZ","sSLsE3zzlopys16PartialRangeUpToVyxGxFZ","sSLsE3zzzoPys16PartialRangeFromVyxGxFZ","sSLsE3zzzoiySNyxGx_xtFZ","sSLsE3zzzopys19PartialRangeThroughVyxGxFZ","sSM","sSQ","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sST","sST12_RegexParserE3allyS2b7ElementQzXEF","sST12_RegexParserE3anyyS2b7ElementQzXEF","sST12_RegexParserE4noneyS2b7ElementQzXEF","sST12makeIterator0B0QzyF","sST19underestimatedCountSivp","sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sST7ElementQa","sST8IteratorQa","sSTsE10allSatisfyyS2b7ElementQzKXEKF","sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE10enumerateds18EnumeratedSequenceVyxGyF","sSTsE13elementsEqual_2bySbqd___Sb7ElementQz_ACQyd__tKXEtKSTRd__lF","sSTsE19underestimatedCountSivp","sSTsE25lexicographicallyPrecedes_2bySbqd___Sb7ElementQz_ADtKXEtKSTRd__ACQyd__ADRSlF","sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sSTsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSTsE3max2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE3min2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE4drop5whiles17DropWhileSequenceVyxGSb7ElementQzKXE_tKF","sSTsE4lazys12LazySequenceVyxGvp","sSTsE5first5where7ElementQzSgSbADKXE_tKF","sSTsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSays10ArraySliceVy7ElementQzGGSi_S2bAHKXEtKF","sSTsE6filterySay7ElementQzGSbACKXEKF","sSTsE6prefix5whileSay7ElementQzGSbADKXE_tKF","sSTsE6prefixys14PrefixSequenceVyxGSiF","sSTsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF","sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF","sSTsE6sorted2bySay7ElementQzGSbAD_ADtKXE_tKF","sSTsE6starts4with2bySbqd___Sb7ElementQz_ADQyd__tKXEtKSTRd__lF","sSTsE6suffixySay7ElementQzGSiF","sSTsE7flatMapySay7ElementQyd__Gqd__ABQzKXEKSTRd__lF","sSTsE7flatMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE7forEachyyy7ElementQzKXEKF","sSTsE8contains5whereS2b7ElementQzKXE_tKF","sSTsE8dropLastySay7ElementQzGSiF","sSTsE8reversedSay7ElementQzGyF","sSTsE8shuffled5usingSay7ElementQzGqd__z_tSGRd__lF","sSTsE8shuffledSay7ElementQzGyF","sSTsE9dropFirstys04DropB8SequenceVyxGSiF","sSTsSL7ElementRpzrlE25lexicographicallyPrecedesySbqd__STRd__AAQyd__ABRSlF","sSTsSL7ElementRpzrlE3maxABSgyF","sSTsSL7ElementRpzrlE3minABSgyF","sSTsSL7ElementRpzrlE6sortedSayABGyF","sSTsSQ7ElementRpzrlE13elementsEqualySbqd__STRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSays10ArraySliceVyABGGAB_SiSbtF","sSTsSQ7ElementRpzrlE6starts4withSbqd___tSTRd__AAQyd__ABRSlF","sSTsSQ7ElementRpzrlE8containsySbABF","sSTsST7ElementRpzrlE6joined9separators14JoinedSequenceVyxGqd___tSTRd__AA_AAQZAARtd__lF","sSTsST7ElementRpzrlE6joineds15FlattenSequenceVyxGyF","sSTsSy7ElementRpzrlE6joined9separatorS2S_tF","sSX","sSb","sSi","sSk","sSksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSl","sSl10startIndex0B0Qzvp","sSl12_RegexParserE15convertByOffset_2in5IndexQyd__ADQz_qd__tSlRd__lF","sSl12_RegexParserE15convertByOffset_2inSny5IndexQyd__GSnyADQzG_qd__tSlRd__lF","sSl12_RegexParserE5index8atOffset5IndexQzSi_tF","sSl12_RegexParserE5split6around11SubSequenceQz6prefix_A2E6suffixtSny5IndexQzG_tF","sSl12_RegexParserE6offset2ofSi5IndexQz_tF","sSl12_RegexParserE6offset7ofIndexSi0E0Qz_tF","sSl12_RegexParserE7offsets2ofSnySiGSny5IndexQzG_tF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropPrefixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl12_RegexParserSQ7ElementRpzrlE13tryDropSuffixy11SubSequenceQzSgqd__SlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE14trimmingPrefixy11SubSequenceQzqd__STRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGqd___SiSbtSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE6ranges2ofSaySny5IndexQzGGqd___tSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE8containsySbqd__SlRd__ABQyd__ACRSlF","sSl5IndexQa","sSl5countSivp","sSl5index5after5IndexQzAD_tF","sSl5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSl5index_8offsetBy5IndexQzAD_SitF","sSl7ElementQa","sSl7indices7IndicesQzvp","sSl8distance4from2toSi5IndexQz_AEtF","sSl8endIndex0B0Qzvp","sSlsE10firstIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSlsE13randomElement0B0QzSgyF","sSlsE13randomElement5using0B0QzSgqd__z_tSGRd__lF","sSlsE19underestimatedCountSivp","sSlsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSlsE4drop5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE5countSivp","sSlsE5first7ElementQzSgvp","sSlsE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSlsE5index_8offsetBy5IndexQzAD_SitF","sSlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF","sSlsE6prefix4upTo11SubSequenceQz5IndexQz_tF","sSlsE6prefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE6prefix7through11SubSequenceQz5IndexQz_tF","sSlsE6prefixy11SubSequenceQzSiF","sSlsE6suffix4from11SubSequenceQz5IndexQz_tF","sSlsE6suffixy11SubSequenceQzSiF","sSlsE7isEmptySbvp","sSlsE8distance4from2toSi5IndexQz_AEtF","sSlsE8dropLasty11SubSequenceQzSiF","sSlsE9dropFirsty11SubSequenceQzSiF","sSlsE9formIndex5aftery0B0Qzz_tF","sSlsE9formIndex_8offsetBy07limitedD0Sb0B0Qzz_SiAEtF","sSlsE9formIndex_8offsetByy0B0Qzz_SitF","sSlsEy11SubSequenceQzqd__cSXRd__5BoundQyd__5IndexRtzluip","sSlsEy11SubSequenceQzys15UnboundedRange_OXEcip","sSlsSIyxG7IndicesRtzrlE7indicesAAvp","sSlsSQ7ElementRpzrlE10firstIndex2of0C0QzSgAB_tF","sSlsSQ7ElementRpzrlE5index2of5IndexQzSgAB_tF","sSlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF","sSlss16IndexingIteratorVyxG0B0RtzrlE04makeB0ACyF","sSlss5SliceVyxG11SubSequenceRtzrlEyACSny5IndexQzGcip","sSly7ElementQz5IndexQzcip","sSm","sSn","sSq","sSt","sSt4next7ElementQzSgyF","sSt7ElementQa","ss15CollectionOfOneV","ss20LazySequenceProtocolP","ss20LazySequenceProtocolPs8ElementsQzRszrlE8elementsxvp","ss20LazySequenceProtocolPsE10compactMapys0aeB0Vys0a6FilterB0VyAEy8ElementsQzqd__SgGGqd__GAJ7ElementQzclF","ss20LazySequenceProtocolPsE3mapys0a3MapB0Vy8ElementsQzqd__Gqd__7ElementQzclF","ss20LazySequenceProtocolPsE4drop5whiles0a9DropWhileB0Vy8ElementsQzGSb7ElementQzc_tF","ss20LazySequenceProtocolPsE4lazys0aB0Vy8ElementsQzGvp","ss20LazySequenceProtocolPsE6filterys0a6FilterB0Vy8ElementsQzGSb7ElementQzcF","ss20LazySequenceProtocolPsE6prefix5whiles0a11PrefixWhileB0Vy8ElementsQzGSb7ElementQzc_tF","ss20LazySequenceProtocolPsE7flatMapys0aB0Vys07FlattenB0Vys0aeB0Vy8ElementsQzqd__GGGqd__7ElementQzcSTRd__lF","ss20LazySequenceProtocolPsE7flatMapys0aeB0Vys0a6FilterB0VyAEy8ElementsQzqd__SgGGqd__GAJ7ElementQzclF","ss20LazySequenceProtocolPsST7ElementRpzrlE6joineds0aB0Vys07FlattenB0Vy8ElementsQzGGyF","ss20LazySequenceProtocolPssAA8ElementsRpzrlE4lazyADvp","ss22LazyCollectionProtocolP","ss22LazyCollectionProtocolPsE4lazys0A8SequenceVy8ElementsQzGvp","ss22LazyCollectionProtocolPssAA8ElementsRpzrlE4lazyADvp","ss4Voida","ss6HasherV"],"vertices":[{"p":["SplitSequence"],"f":[["struct",12],[" ",17],["SplitSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Sequence",18,379]],"s":[["struct",12],[" ",17],["SplitSequence",7]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"d":"A sequence that lazily splits a base sequence into subsequences separated by\nelements that satisfy the given `whereSeparator` predicate.\n\n- Note: This type is the result of\n\n    x.split(maxSplits:omittingEmptySubsequences:whereSeparator)\n    x.split(separator:maxSplits:omittingEmptySubsequences)\n\n  where `x` conforms to `LazySequenceProtocol`."},{"p":["SplitSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":387},{"p":["Chain2Sequence"],"f":[["struct",12],[" ",17],["Chain2Sequence",7],["<",17],["Base1",0],[", ",17],["Base2",0],["> ",17],["where",12],[" ",17],["Base1",18],[" : ",17],["Sequence",18,379],[", ",17],["Base2",18],[" : ",17],["Sequence",18,379],[", ",17],["Base1",18],[".",17],["Element",18],[" == ",17],["Base2",18],[".",17],["Element",18]],"s":[["struct",12],[" ",17],["Chain2Sequence",7]],"c":[["Base1",1,"Sequence",379],["Base2",1,"Sequence",379],["Base1.Element",2,"Base2.Element"]],"g":[["Base1",0,0],["Base2",1,0]],"d":"A concatenation of two sequences with the same element type."},{"p":["Chain2Sequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base1",1,"Sequence",379],["Base2",1,"Sequence",379],["Base1.Element",2,"Base2.Element"]],"c":[["Base1",1,"Sequence",379],["Base2",1,"Sequence",379],["Base1.Element",2,"Base2.Element"]],"g":[["Base1",0,0],["Base2",1,0]],"d":"The iterator for a `Chain2Sequence` instance.","o":387},{"p":["Chain2Sequence","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"g":[["Base1",0,0],["Base2",1,0]],"d":"A position in a `Chain2Sequence` instance.","o":451},{"p":["CycledSequence"],"f":[["struct",12],[" ",17],["CycledSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435]],"s":[["struct",12],[" ",17],["CycledSequence",7]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A collection wrapper that repeats the elements of a base collection."},{"p":["CycledSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"The iterator for a `CycledSequence` instance.","o":387},{"p":["SplitCollection"],"f":[["struct",12],[" ",17],["SplitCollection",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435]],"s":[["struct",12],[" ",17],["SplitCollection",7]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A collection that lazily splits a base collection into subsequences\nseparated by elements that satisfy the given `whereSeparator` predicate.\n\n- Note: This type is the result of\n\n    x.split(maxSplits:omittingEmptySubsequences:whereSeparator)\n    x.split(separator:maxSplits:omittingEmptySubsequences)\n\n  where `x` conforms to `LazySequenceProtocol` and `Collection`."},{"p":["SplitCollection","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"Position of a subsequence in a split collection.","o":451},{"p":["UniquedSequence"],"f":[["struct",12],[" ",17],["UniquedSequence",7],["<",17],["Base",0],[", ",17],["Subject",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Sequence",18,379],[", ",17],["Subject",18],[" : ",17],["Hashable",18,346]],"s":[["struct",12],[" ",17],["UniquedSequence",7]],"c":[["Base",1,"Sequence",379],["Subject",1,"Hashable",346]],"g":[["Base",0,0],["Subject",1,0]],"d":"A sequence wrapper that leaves out duplicate elements of a base sequence."},{"p":["UniquedSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base",1,"Sequence",379],["Subject",1,"Hashable",346]],"c":[["Base",1,"Sequence",379],["Subject",1,"Hashable",346]],"g":[["Base",0,0],["Subject",1,0]],"d":"The iterator for a `UniquedSequence` instance.","o":387},{"p":["JoinedBySequence"],"f":[["struct",12],[" ",17],["JoinedBySequence",7],["<",17],["Base",0],[", ",17],["Separator",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Sequence",18,379],[", ",17],["Separator",18],[" : ",17],["Sequence",18,379],[", ",17],["Base",18],[".",17],["Element",18],[" : ",17],["Sequence",18,379],[", ",17],["Separator",18],[".",17],["Element",18],[" == ",17],["Base",18],[".",17],["Element",18],[".",17],["Element",18]],"s":[["struct",12],[" ",17],["JoinedBySequence",7]],"c":[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"d":"A sequence that presents the elements of a base sequence of sequences\nconcatenated using a given separator."},{"p":["JoinedBySequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":387},{"p":["Product2Sequence"],"f":[["struct",12],[" ",17],["Product2Sequence",7],["<",17],["Base1",0],[", ",17],["Base2",0],["> ",17],["where",12],[" ",17],["Base1",18],[" : ",17],["Sequence",18,379],[", ",17],["Base2",18],[" : ",17],["Collection",18,435]],"s":[["struct",12],[" ",17],["Product2Sequence",7]],"c":[["Base1",1,"Sequence",379],["Base2",1,"Collection",435]],"g":[["Base1",0,0],["Base2",1,0]],"d":"A sequence that represents the product of two sequences' elements."},{"p":["Product2Sequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base1",1,"Sequence",379],["Base2",1,"Collection",435]],"c":[["Base1",1,"Sequence",379],["Base2",1,"Collection",435]],"g":[["Base1",0,0],["Base2",1,0]],"d":"The iterator for a `Product2Sequence` sequence.","o":387},{"p":["Product2Sequence","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"g":[["Base1",0,0],["Base2",1,0]],"d":"The index type for a `Product2Sequence` collection.","o":451},{"p":["StridingSequence"],"f":[["struct",12],[" ",17],["StridingSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Sequence",18,379]],"s":[["struct",12],[" ",17],["StridingSequence",7]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"d":"A wrapper that strides over a base sequence."},{"p":["StridingSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"d":"An iterator over a `StridingSequence` instance.","o":387},{"p":["CompactedSequence"],"f":[["struct",12],[" ",17],["CompactedSequence",7],["<",17],["Base",0],[", ",17],["Element",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Sequence",18,379],[", ",17],["Base",18],[".",17],["Element",18],[" == ",17],["Element",18],["?",17]],"s":[["struct",12],[" ",17],["CompactedSequence",7]],"c":[["Base",1,"Sequence",379],["Base.Element",2,"Element?",495]],"g":[["Base",0,0],["Element",1,0]],"d":"A `Sequence` that iterates over every non-nil element from the original\n`Sequence`."},{"p":["CompactedSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"c":[["Base",1,"Sequence",379],["Base.Element",2,"Element?",495]],"g":[["Base",0,0],["Element",1,0]],"o":387},{"p":["IndexedCollection"],"f":[["struct",12],[" ",17],["IndexedCollection",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435]],"s":[["struct",12],[" ",17],["IndexedCollection",7]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A collection wrapper that iterates over the indices and elements of a\ncollection together."},{"p":["JoinedByCollection"],"f":[["struct",12],[" ",17],["JoinedByCollection",7],["<",17],["Base",0],[", ",17],["Separator",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435],[", ",17],["Separator",18],[" : ",17],["Collection",18,435],[", ",17],["Base",18],[".",17],["Element",18],[" : ",17],["Collection",18,435],[", ",17],["Separator",18],[".",17],["Element",18],[" == ",17],["Base",18],[".",17],["Element",18],[".",17],["Element",18]],"s":[["struct",12],[" ",17],["JoinedByCollection",7]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"d":"A collection that presents the elements of a base collection of collections\nconcatenated using a given separator."},{"p":["JoinedByCollection","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":451},{"p":["StridingCollection"],"f":[["struct",12],[" ",17],["StridingCollection",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435]],"s":[["struct",12],[" ",17],["StridingCollection",7]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A wrapper that strides over a base collection."},{"p":["StridingCollection","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A position in a `StridingCollection` instance.","o":451},{"p":["ChunkedByCollection"],"f":[["struct",12],[" ",17],["ChunkedByCollection",7],["<",17],["Base",0],[", ",17],["Subject",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435]],"s":[["struct",12],[" ",17],["ChunkedByCollection",7]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0],["Subject",1,0]],"d":"A collection wrapper that breaks a collection into chunks based on a\npredicate.\n\nCall `lazy.chunked(by:)` on a collection to create an instance of this type."},{"p":["ChunkedByCollection","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0],["Subject",1,0]],"d":"A position in a chunked collection.","o":451},{"p":["ChunkedOnCollection"],"f":[["struct",12],[" ",17],["ChunkedOnCollection",7],["<",17],["Base",0],[", ",17],["Subject",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435],[", ",17],["Subject",18],[" : ",17],["Equatable",18,376]],"s":[["struct",12],[" ",17],["ChunkedOnCollection",7]],"c":[["Base",1,"Collection",435],["Subject",1,"Equatable",376]],"g":[["Base",0,0],["Subject",1,0]],"d":"A collection wrapper that breaks a collection into chunks based on a\npredicate.\n\nCall `lazy.chunked(on:)` on a collection to create an instance of this type."},{"p":["CompactedCollection"],"f":[["struct",12],[" ",17],["CompactedCollection",7],["<",17],["Base",0],[", ",17],["Element",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435],[", ",17],["Base",18],[".",17],["Element",18],[" == ",17],["Element",18],["?",17]],"s":[["struct",12],[" ",17],["CompactedCollection",7]],"c":[["Base",1,"Collection",435],["Base.Element",2,"Element?",495]],"g":[["Base",0,0],["Element",1,0]],"d":"A `Collection` that iterates over every non-nil element from the original\n`Collection`."},{"p":["CompactedCollection","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"c":[["Base",1,"Collection",435],["Base.Element",2,"Element?",495]],"g":[["Base",0,0],["Element",1,0]],"o":451},{"p":["CombinationsSequence"],"f":[["struct",12],[" ",17],["CombinationsSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435]],"s":[["struct",12],[" ",17],["CombinationsSequence",7]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A collection wrapper that generates combinations of a base collection."},{"p":["CombinationsSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"The iterator for a `CombinationsSequence` instance.","o":387},{"p":["InterspersedSequence"],"f":[["struct",12],[" ",17],["InterspersedSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Sequence",18,379]],"s":[["struct",12],[" ",17],["InterspersedSequence",7]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"d":"A sequence that presents the elements of a base sequence of elements with a\nseparator between each of those elements."},{"p":["InterspersedSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"d":"The iterator for an `InterspersedSequence` sequence.","o":387},{"p":["InterspersedSequence","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A position in an `InterspersedSequence` instance.","o":451},{"p":["PermutationsSequence"],"f":[["struct",12],[" ",17],["PermutationsSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435]],"s":[["struct",12],[" ",17],["PermutationsSequence",7]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A sequence of all the permutations of a collection's elements."},{"p":["PermutationsSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"The iterator for a `PermutationsSequence` instance.","o":387},{"p":["AdjacentPairsSequence"],"f":[["struct",12],[" ",17],["AdjacentPairsSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Sequence",18,379]],"s":[["struct",12],[" ",17],["AdjacentPairsSequence",7]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"d":"A sequence of adjacent pairs of elements built from an underlying sequence.\n\nUse the `adjacentPairs()` method on a sequence to create an\n`AdjacentPairsSequence` instance."},{"p":["AdjacentPairsSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"d":"The iterator for an `AdjacentPairsSequence` or `AdjacentPairsCollection`\ninstance.","o":387},{"p":["CycledTimesCollection"],"f":[["struct",12],[" ",17],["CycledTimesCollection",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435]],"s":[["struct",12],[" ",17],["CycledTimesCollection",7]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A collection wrapper that repeats the elements of a base collection for a\nfinite number of times."},{"p":["CycledTimesCollection","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":451},{"p":["AdjacentPairsCollection"],"f":[["struct",12],[" ",17],["AdjacentPairsCollection",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435]],"s":[["struct",12],[" ",17],["AdjacentPairsCollection",7]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A collection of adjacent pairs of elements built from an underlying\ncollection.\n\nUse the `adjacentPairs()` method on a collection to create an\n`AdjacentPairsCollection` instance."},{"p":["AdjacentPairsCollection","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A position in an `AdjacentPairsCollection` instance.","o":451},{"p":["ChunksOfCountCollection"],"f":[["struct",12],[" ",17],["ChunksOfCountCollection",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435]],"s":[["struct",12],[" ",17],["ChunksOfCountCollection",7]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A collection that presents the elements of its base collection in\n`SubSequence` chunks of any given count.\n\nA `ChunksOfCountCollection` is a lazy view on the base Collection, but it\ndoes not implicitly confer laziness on algorithms applied to its result. In\nother words, for ordinary collections `c`:\n\n* `c.chunks(ofCount: 3)` does not create new storage\n* `c.chunks(ofCount: 3).map(f)` maps eagerly and returns a new array\n* `c.lazy.chunks(ofCount: 3).map(f)` maps lazily and returns a\n  `LazyMapCollection`"},{"p":["ChunksOfCountCollection","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":451},{"p":["JoinedByClosureSequence"],"f":[["struct",12],[" ",17],["JoinedByClosureSequence",7],["<",17],["Base",0],[", ",17],["Separator",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Sequence",18,379],[", ",17],["Separator",18],[" : ",17],["Sequence",18,379],[", ",17],["Base",18],[".",17],["Element",18],[" : ",17],["Sequence",18,379],[", ",17],["Separator",18],[".",17],["Element",18],[" == ",17],["Base",18],[".",17],["Element",18],[".",17],["Element",18]],"s":[["struct",12],[" ",17],["JoinedByClosureSequence",7]],"c":[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"d":"A sequence that presents the elements of a base sequence of sequences\nconcatenated using a given separator that depends on the sequences right\nbefore and after it."},{"p":["JoinedByClosureSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":387},{"p":["WindowsOfCountCollection"],"f":[["struct",12],[" ",17],["WindowsOfCountCollection",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435]],"s":[["struct",12],[" ",17],["WindowsOfCountCollection",7]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A collection wrapper that presents a sliding window over the elements of\na collection."},{"p":["WindowsOfCountCollection","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A position in a `WindowsOfCountCollection` instance.","o":451},{"p":["JoinedByClosureCollection"],"f":[["struct",12],[" ",17],["JoinedByClosureCollection",7],["<",17],["Base",0],[", ",17],["Separator",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435],[", ",17],["Separator",18],[" : ",17],["Collection",18,435],[", ",17],["Base",18],[".",17],["Element",18],[" : ",17],["Collection",18,435],[", ",17],["Separator",18],[".",17],["Element",18],[" == ",17],["Base",18],[".",17],["Element",18],[".",17],["Element",18]],"s":[["struct",12],[" ",17],["JoinedByClosureCollection",7]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"d":"A collection that presents the elements of a base collection of collections\nconcatenated using a given separator that depends on the collections right\nbefore and after it."},{"p":["JoinedByClosureCollection","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":451},{"p":["UniquePermutationsSequence"],"f":[["struct",12],[" ",17],["UniquePermutationsSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Collection",18,435]],"s":[["struct",12],[" ",17],["UniquePermutationsSequence",7]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"A sequence of the unique permutations of the elements of a sequence or\ncollection.\n\nTo create a `UniquePermutationsSequence` instance, call one of the\n`uniquePermutations` methods on your collection."},{"p":["UniquePermutationsSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"The iterator for a `UniquePermutationsSequence` instance.","o":387},{"p":["ExclusiveReductionsSequence"],"f":[["struct",12],[" ",17],["ExclusiveReductionsSequence",7],["<",17],["Base",0],[", ",17],["Result",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Sequence",18,379]],"s":[["struct",12],[" ",17],["ExclusiveReductionsSequence",7]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0],["Result",1,0]],"d":"A sequence of applying a transform to the element of a sequence and the\npreviously transformed result."},{"p":["ExclusiveReductionsSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0],["Result",1,0]],"o":387},{"p":["ExclusiveReductionsSequence","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0],["Result",1,0]],"o":451},{"p":["InclusiveReductionsSequence"],"f":[["struct",12],[" ",17],["InclusiveReductionsSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["Sequence",18,379]],"s":[["struct",12],[" ",17],["InclusiveReductionsSequence",7]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]]},{"p":["InclusiveReductionsSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":387},{"p":["InclusiveReductionsSequence","Index"],"f":[["struct",12],[" ",17],["Index",7]],"s":[["struct",12],[" ",17],["Index",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":451},{"p":["Chain2Sequence","subscript(_:)"],"f":[["subscript",10],["(",17],["i",2],[": ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4],[") -> ",17],["Base1",18],[".",17],["Element",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[") -> ",17],["Base1",18],[".",17],["Element",18]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"g":[["Base1",0,0],["Base2",1,0]],"o":492},{"p":["SplitCollection","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["SplitCollection",18,7],["<",17],["Base",18],[">.",17],["Index",18,8],[") -> ",17],["Base",18],[".",17],["SubSequence",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["SplitCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Base",18],[".",17],["SubSequence",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":492},{"p":["Product2Sequence","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15],[") -> (",17],["Base1",18],[".",17],["Element",18],[", ",17],["Base2",18],[".",17],["Element",18],[") { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[") -> (",17],["Base1",18],[".",17],["Element",18],[", ",17],["Base2",18],[".",17],["Element",18],[")",17]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"g":[["Base1",0,0],["Base2",1,0]],"o":492},{"p":["IndexedCollection","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["Base",18],[".",17],["Index",18],[") -> ",17],["IndexedCollection",18,20],["<",17],["Base",18],[">.",17],["Element",18,252],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["Base",18],[".",17],["Index",18],[") -> ",17],["IndexedCollection",18],["<",17],["Base",18],[">.",17],["Element",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":492},{"p":["JoinedByCollection","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[") -> ",17],["Base",18],[".",17],["Element",18],[".",17],["Element",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["Base",18],[".",17],["Element",18],[".",17],["Element",18]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":492},{"p":["StridingCollection","subscript(_:)"],"f":[["subscript",10],["(",17],["i",2],[": ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24],[") -> ",17],["Base",18],[".",17],["Element",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Base",18],[".",17],["Element",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":492},{"p":["ChunkedByCollection","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["ChunkedByCollection",18,25],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,26],[") -> ",17],["Base",18],[".",17],["SubSequence",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["ChunkedByCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18],[") -> ",17],["Base",18],[".",17],["SubSequence",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0],["Subject",1,0]],"o":492},{"p":["ChunkedOnCollection","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["ChunkedOnCollection",18,27],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,253],[") -> (",17],["Subject",18],[", ",17],["Base",18],[".",17],["SubSequence",18],[") { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["ChunkedOnCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18],[") -> (",17],["Subject",18],[", ",17],["Base",18],[".",17],["SubSequence",18],[")",17]],"e":[["Base",1,"Collection",435],["Subject",1,"Equatable",376]],"c":[["Base",1,"Collection",435],["Subject",1,"Equatable",376]],"g":[["Base",0,0],["Subject",1,0]],"o":492},{"p":["CompactedCollection","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["CompactedCollection",18,28],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18,29],[") -> ",17],["Element",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["CompactedCollection",18],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["Element",18]],"c":[["Base",1,"Collection",435],["Base.Element",2,"Element?",495]],"g":[["Base",0,0],["Element",1,0]],"o":492},{"p":["InterspersedSequence","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34],[") -> ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Element",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Element",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":492},{"p":["CycledTimesCollection","subscript(_:)"],"f":[["subscript",10],["(",17],["index",2],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[") -> ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Element",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Element",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":492},{"p":["AdjacentPairsCollection","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[") -> (",17],["Base",18],[".",17],["Element",18],[", ",17],["Base",18],[".",17],["Element",18],[") { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> (",17],["Base",18],[".",17],["Element",18],[", ",17],["Base",18],[".",17],["Element",18],[")",17]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":492},{"p":["ChunksOfCountCollection","subscript(_:)"],"f":[["subscript",10],["(",17],["i",2],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[") -> ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Element",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Element",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"- Complexity: O(1)","o":492},{"p":["WindowsOfCountCollection","subscript(_:)"],"f":[["subscript",10],["(",17],["index",2],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[") -> ",17],["Base",18],[".",17],["SubSequence",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Base",18],[".",17],["SubSequence",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":492},{"p":["JoinedByClosureCollection","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[") -> ",17],["Base",18],[".",17],["Element",18],[".",17],["Element",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["Base",18],[".",17],["Element",18],[".",17],["Element",18]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":492},{"p":["ExclusiveReductionsSequence","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18,55],[") -> ",17],["Result",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["ExclusiveReductionsSequence",18],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18],[") -> ",17],["Result",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0],["Result",1,0]],"o":492},{"p":["InclusiveReductionsSequence","subscript(_:)"],"f":[["subscript",10],["(",17],["index",2],[": ",17],["InclusiveReductionsSequence",18,56],["<",17],["Base",18],[">.",17],["Index",18,58],[") -> ",17],["Base",18],[".",17],["Element",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["InclusiveReductionsSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Base",18],[".",17],["Element",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":492},{"p":["Chain2Sequence","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"o":436},{"p":["Chain2Sequence","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"o":459},{"p":["SplitCollection","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["SplitCollection",18,7],["<",17],["Base",18],[">.",17],["Index",18,8],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["SplitCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":436},{"p":["SplitCollection","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["SplitCollection",18,7],["<",17],["Base",18],[">.",17],["Index",18,8],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["SplitCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":459},{"p":["Product2Sequence","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"o":436},{"p":["Product2Sequence","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,432],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"o":452},{"p":["Product2Sequence","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"o":459},{"p":["IndexedCollection","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["Base",18],[".",17],["Index",18],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["Base",18],[".",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":436},{"p":["IndexedCollection","indices"],"f":[["var",12],[" ",17],["indices",7],[": ",17],["Base",18],[".",17],["Indices",18],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["indices",7],[": ",17],["Base",18],[".",17],["Indices",18]],"e":[["Base",1,"Collection",435]],"o":457},{"p":["IndexedCollection","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["Base",18],[".",17],["Index",18],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["Base",18],[".",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":459},{"p":["JoinedByCollection","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"o":436},{"p":["JoinedByCollection","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"o":459},{"p":["StridingCollection","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":436},{"p":["StridingCollection","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,432],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"e":[["Base",1,"Collection",435]],"o":452},{"p":["StridingCollection","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":459},{"p":["ChunkedByCollection","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["ChunkedByCollection",18,25],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,26],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["ChunkedByCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":436},{"p":["ChunkedByCollection","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["ChunkedByCollection",18,25],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,26],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["ChunkedByCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":459},{"p":["ChunkedOnCollection","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["ChunkedOnCollection",18,27],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,253],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["ChunkedOnCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435],["Subject",1,"Equatable",376]],"o":436},{"p":["ChunkedOnCollection","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["ChunkedOnCollection",18,27],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,253],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["ChunkedOnCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435],["Subject",1,"Equatable",376]],"o":459},{"p":["CompactedCollection","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["CompactedCollection",18,28],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18,29]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["CompactedCollection",18],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18]],"o":436},{"p":["CompactedCollection","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["CompactedCollection",18,28],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18,29],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["CompactedCollection",18],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18]],"o":459},{"p":["CombinationsSequence","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,432],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The total number of combinations."},{"p":["InterspersedSequence","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":436},{"p":["InterspersedSequence","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":459},{"p":["PermutationsSequence","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,432],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"d":"The total number of permutations."},{"p":["AdjacentPairsSequence","underestimatedCount"],"f":[["var",12],[" ",17],["underestimatedCount",7],[": ",17],["Int",18,432],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["underestimatedCount",7],[": ",17],["Int",18]],"e":[["Base",1,"Sequence",379]],"o":384},{"p":["CycledTimesCollection","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":436},{"p":["CycledTimesCollection","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,432],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"e":[["Base",1,"Collection",435]],"o":452},{"p":["CycledTimesCollection","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":459},{"p":["AdjacentPairsCollection","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":436},{"p":["AdjacentPairsCollection","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,432],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"e":[["Base",1,"Collection",435]],"o":452},{"p":["AdjacentPairsCollection","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":459},{"p":["ChunksOfCountCollection","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"d":"- Complexity: O(1)","o":436},{"p":["ChunksOfCountCollection","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,432],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"e":[["Base",1,"Collection",435]],"o":452},{"p":["ChunksOfCountCollection","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":459},{"p":["WindowsOfCountCollection","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":436},{"p":["WindowsOfCountCollection","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":459},{"p":["JoinedByClosureCollection","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"o":436},{"p":["JoinedByClosureCollection","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"o":459},{"p":["ExclusiveReductionsSequence","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18,55],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["ExclusiveReductionsSequence",18],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":436},{"p":["ExclusiveReductionsSequence","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18,55],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["ExclusiveReductionsSequence",18],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":459},{"p":["InclusiveReductionsSequence","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["InclusiveReductionsSequence",18,56],["<",17],["Base",18],[">.",17],["Index",18,58],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["InclusiveReductionsSequence",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":436},{"p":["InclusiveReductionsSequence","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["InclusiveReductionsSequence",18,56],["<",17],["Base",18],[">.",17],["Index",18,58],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["InclusiveReductionsSequence",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"o":459},{"p":["SplitSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SplitSequence",18,0],["<",17],["Base",18],[">.",17],["Iterator",18,1]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["SplitSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":383},{"p":["SplitSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["SplitSequence",18,0],["<",17],["Base",18],[">.",17],["Iterator",18,1],[".",17],["Element",18,250],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["SplitSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18],[".",17],["Element",18],["?",17]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":497},{"p":["Chain2Sequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Iterator",18,3]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Iterator",18]],"e":[["Base1",1,"Sequence",379],["Base2",1,"Sequence",379],["Base1.Element",2,"Base2.Element"]],"c":[["Base1",1,"Sequence",379],["Base2",1,"Sequence",379],["Base1.Element",2,"Base2.Element"]],"g":[["Base1",0,0],["Base2",1,0]],"o":383},{"p":["Chain2Sequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Base1",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Base1",18],[".",17],["Element",18],["?",17]],"c":[["Base1",1,"Sequence",379],["Base2",1,"Sequence",379],["Base1.Element",2,"Base2.Element"]],"g":[["Base1",0,0],["Base2",1,0]],"o":497},{"p":["Chain2Sequence","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4],[") -> ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[") -> ",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18]],"e":[["Base1",1,"BidirectionalCollection",348],["Base2",1,"BidirectionalCollection",348],["Base1.Element",2,"Base2.Element"]],"c":[["Base1",1,"BidirectionalCollection",348],["Base2",1,"BidirectionalCollection",348],["Base1.Element",2,"Base2.Element"]],"g":[["Base1",0,0],["Base2",1,0]],"o":352},{"p":["Chain2Sequence","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4],[") -> ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[") -> ",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"g":[["Base1",0,0],["Base2",1,0]],"o":453},{"p":["Chain2Sequence","index(_:offsetBy:limitedBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[", ",17],["limitedBy",1],[" ",17],["limit",2],[": ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4],[") -> ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4],["?",17]],"s":[["func",12],[" ",17],["index",7],["(",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[", ",17],["limitedBy",1],[": ",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[") -> ",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],["?",17]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"g":[["Base1",0,0],["Base2",1,0]],"o":454},{"p":["Chain2Sequence","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[") -> ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4]],"s":[["func",12],[" ",17],["index",7],["(",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"g":[["Base1",0,0],["Base2",1,0]],"o":455},{"p":["Chain2Sequence","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4],[") -> ",17],["Int",18,432]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"g":[["Base1",0,0],["Base2",1,0]],"o":458},{"p":["CycledSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CycledSequence",18,5],["<",17],["Base",18],[">.",17],["Iterator",18,6]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CycledSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":383},{"p":["CycledSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":497},{"p":["SplitCollection","Index","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,516],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":347},{"p":["SplitCollection","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["SplitCollection",18,7],["<",17],["Base",18],[">.",17],["Index",18,8],[") -> ",17],["SplitCollection",18,7],["<",17],["Base",18],[">.",17],["Index",18,8]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["SplitCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["SplitCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":453},{"p":["UniquedSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["UniquedSequence",18,9],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Iterator",18,10]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["UniquedSequence",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Iterator",18]],"e":[["Base",1,"Sequence",379],["Subject",1,"Hashable",346]],"c":[["Base",1,"Sequence",379],["Subject",1,"Hashable",346]],"g":[["Base",0,0],["Subject",1,0]],"o":383},{"p":["UniquedSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"c":[["Base",1,"Sequence",379],["Subject",1,"Hashable",346]],"g":[["Base",0,0],["Subject",1,0]],"o":497},{"p":["JoinedBySequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["JoinedBySequence",18,11],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Iterator",18,12]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["JoinedBySequence",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Iterator",18]],"e":[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":383},{"p":["JoinedBySequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],[".",17],["Element",18],["?",17]],"c":[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":497},{"p":["Product2Sequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Iterator",18,14]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Iterator",18]],"e":[["Base1",1,"Sequence",379],["Base2",1,"Collection",435]],"c":[["Base1",1,"Sequence",379],["Base2",1,"Collection",435]],"g":[["Base1",0,0],["Base2",1,0]],"o":383},{"p":["Product2Sequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> (",17],["Base1",18],[".",17],["Element",18],[", ",17],["Base2",18],[".",17],["Element",18],[")?",17]],"s":[["func",12],[" ",17],["next",7],["() -> (",17],["Base1",18],[".",17],["Element",18],[", ",17],["Base2",18],[".",17],["Element",18],[")?",17]],"c":[["Base1",1,"Sequence",379],["Base2",1,"Collection",435]],"g":[["Base1",0,0],["Base2",1,0]],"o":497},{"p":["Product2Sequence","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15],[") -> ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[") -> ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18]],"e":[["Base1",1,"BidirectionalCollection",348],["Base2",1,"BidirectionalCollection",348]],"c":[["Base1",1,"BidirectionalCollection",348],["Base2",1,"BidirectionalCollection",348]],"g":[["Base1",0,0],["Base2",1,0]],"o":352},{"p":["Product2Sequence","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15],[") -> ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[") -> ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"g":[["Base1",0,0],["Base2",1,0]],"o":453},{"p":["Product2Sequence","index(_:offsetBy:limitedBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[", ",17],["limitedBy",1],[" ",17],["limit",2],[": ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15],[") -> ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15],["?",17]],"s":[["func",12],[" ",17],["index",7],["(",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[", ",17],["limitedBy",1],[": ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[") -> ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],["?",17]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"g":[["Base1",0,0],["Base2",1,0]],"o":454},{"p":["Product2Sequence","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[") -> ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15]],"s":[["func",12],[" ",17],["index",7],["(",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"g":[["Base1",0,0],["Base2",1,0]],"o":455},{"p":["Product2Sequence","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15],[") -> ",17],["Int",18,432]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"e":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"g":[["Base1",0,0],["Base2",1,0]],"o":458},{"p":["StridingSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["StridingSequence",18,16],["<",17],["Base",18],[">.",17],["Iterator",18,17]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["StridingSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":383},{"p":["StridingSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":497},{"p":["StridingSequence","striding(by:)"],"f":[["func",12],[" ",17],["striding",7],["(",17],["by",1],[" ",17],["step",2],[": ",17],["Int",18,432],[") -> ",17],["StridingSequence",18,16],["<",17],["Base",18],[">",17]],"s":[["func",12],[" ",17],["striding",7],["(",17],["by",1],[": ",17],["Int",18],[") -> ",17],["StridingSequence",18],["<",17],["Base",18],[">",17]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]]},{"p":["CompactedSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CompactedSequence",18,18],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Iterator",18,19]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CompactedSequence",18],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Iterator",18]],"c":[["Base",1,"Sequence",379],["Base.Element",2,"Element?",495]],"g":[["Base",0,0],["Element",1,0]],"o":383},{"p":["CompactedSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Element",18],["?",17]],"c":[["Base",1,"Sequence",379],["Base.Element",2,"Element?",495]],"g":[["Base",0,0],["Element",1,0]],"o":497},{"p":["IndexedCollection","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["Base",18],[".",17],["Index",18],[") -> ",17],["Base",18],[".",17],["Index",18]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["Base",18],[".",17],["Index",18],[") -> ",17],["Base",18],[".",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":453},{"p":["IndexedCollection","index(_:offsetBy:limitedBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["Base",18],[".",17],["Index",18],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[", ",17],["limitedBy",1],[" ",17],["limit",2],[": ",17],["Base",18],[".",17],["Index",18],[") -> ",17],["Base",18],[".",17],["Index",18],["?",17]],"s":[["func",12],[" ",17],["index",7],["(",17],["Base",18],[".",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[", ",17],["limitedBy",1],[": ",17],["Base",18],[".",17],["Index",18],[") -> ",17],["Base",18],[".",17],["Index",18],["?",17]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":454},{"p":["IndexedCollection","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["Base",18],[".",17],["Index",18],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[") -> ",17],["Base",18],[".",17],["Index",18]],"s":[["func",12],[" ",17],["index",7],["(",17],["Base",18],[".",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["Base",18],[".",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":455},{"p":["IndexedCollection","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["Base",18],[".",17],["Index",18],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["Base",18],[".",17],["Index",18],[") -> ",17],["Int",18,432]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["Base",18],[".",17],["Index",18],[", ",17],["to",1],[": ",17],["Base",18],[".",17],["Index",18],[") -> ",17],["Int",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":458},{"p":["IndexedCollection","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["Base",18],[".",17],["Index",18],[") -> ",17],["Base",18],[".",17],["Index",18]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["Base",18],[".",17],["Index",18],[") -> ",17],["Base",18],[".",17],["Index",18]],"e":[["Base",1,"BidirectionalCollection",348]],"c":[["Base",1,"BidirectionalCollection",348]],"g":[["Base",0,0]],"o":352},{"p":["JoinedByCollection","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[") -> ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":453},{"p":["JoinedByCollection","index(_:offsetBy:limitedBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["index",2],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[", ",17],["limitedBy",1],[" ",17],["limit",2],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[") -> ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],["?",17]],"s":[["func",12],[" ",17],["index",7],["(",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[", ",17],["limitedBy",1],[": ",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],["?",17]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":454},{"p":["JoinedByCollection","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["index",2],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[") -> ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22]],"s":[["func",12],[" ",17],["index",7],["(",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":455},{"p":["JoinedByCollection","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[") -> ",17],["Int",18,432]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":458},{"p":["JoinedByCollection","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[") -> ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18]],"e":[["Base",1,"BidirectionalCollection",348],["Separator",1,"BidirectionalCollection",348],["Base.Element",1,"BidirectionalCollection",348],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"BidirectionalCollection",348],["Separator",1,"BidirectionalCollection",348],["Base.Element",1,"BidirectionalCollection",348],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":352},{"p":["StridingCollection","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24],[") -> ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":453},{"p":["StridingCollection","index(_:offsetBy:limitedBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24],[", ",17],["offsetBy",1],[" ",17],["n",2],[": ",17],["Int",18,432],[", ",17],["limitedBy",1],[" ",17],["limit",2],[": ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24],[") -> ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24],["?",17]],"s":[["func",12],[" ",17],["index",7],["(",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[", ",17],["limitedBy",1],[": ",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18],["?",17]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":454},{"p":["StridingCollection","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[") -> ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24]],"s":[["func",12],[" ",17],["index",7],["(",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":455},{"p":["StridingCollection","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24],[") -> ",17],["Int",18,432]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":458},{"p":["StridingCollection","striding(by:)"],"f":[["func",12],[" ",17],["striding",7],["(",17],["by",1],[" ",17],["step",2],[": ",17],["Int",18,432],[") -> ",17],["StridingCollection",18,23],["<",17],["Base",18],[">",17]],"s":[["func",12],[" ",17],["striding",7],["(",17],["by",1],[": ",17],["Int",18],[") -> ",17],["StridingCollection",18],["<",17],["Base",18],[">",17]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]]},{"p":["StridingCollection","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24],[") -> ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"RandomAccessCollection",433]],"c":[["Base",1,"RandomAccessCollection",433]],"g":[["Base",0,0]],"o":352},{"p":["ChunkedByCollection","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["ChunkedByCollection",18,25],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,26],[") -> ",17],["ChunkedByCollection",18,25],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,26]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["ChunkedByCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18],[") -> ",17],["ChunkedByCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0],["Subject",1,0]],"o":453},{"p":["ChunkedByCollection","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["ChunkedByCollection",18,25],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,26],[") -> ",17],["ChunkedByCollection",18,25],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,26]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["ChunkedByCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18],[") -> ",17],["ChunkedByCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18]],"e":[["Base",1,"BidirectionalCollection",348]],"c":[["Base",1,"BidirectionalCollection",348]],"g":[["Base",0,0],["Subject",1,0]],"o":352},{"p":["ChunkedOnCollection","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["ChunkedOnCollection",18,27],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,253],[") -> ",17],["ChunkedOnCollection",18,27],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,253]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["ChunkedOnCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18],[") -> ",17],["ChunkedOnCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435],["Subject",1,"Equatable",376]],"c":[["Base",1,"Collection",435],["Subject",1,"Equatable",376]],"g":[["Base",0,0],["Subject",1,0]],"o":453},{"p":["ChunkedOnCollection","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["ChunkedOnCollection",18,27],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,253],[") -> ",17],["ChunkedOnCollection",18,27],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,253]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["ChunkedOnCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18],[") -> ",17],["ChunkedOnCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18]],"e":[["Base",1,"BidirectionalCollection",348],["Subject",1,"Equatable",376]],"c":[["Base",1,"BidirectionalCollection",348],["Subject",1,"Equatable",376]],"g":[["Base",0,0],["Subject",1,0]],"o":352},{"p":["CompactedCollection","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["CompactedCollection",18,28],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18,29],[") -> ",17],["CompactedCollection",18,28],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18,29]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["CompactedCollection",18],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["CompactedCollection",18],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18]],"c":[["Base",1,"Collection",435],["Base.Element",2,"Element?",495]],"g":[["Base",0,0],["Element",1,0]],"o":453},{"p":["CompactedCollection","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["CompactedCollection",18,28],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18,29],[") -> ",17],["CompactedCollection",18,28],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18,29]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["CompactedCollection",18],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["CompactedCollection",18],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18]],"e":[["Base",1,"BidirectionalCollection",348],["Base.Element",2,"Element?",495]],"c":[["Base",1,"BidirectionalCollection",348],["Base.Element",2,"Element?",495]],"g":[["Base",0,0],["Element",1,0]],"o":352},{"p":["CombinationsSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CombinationsSequence",18,30],["<",17],["Base",18],[">.",17],["Iterator",18,31]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["CombinationsSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":383},{"p":["CombinationsSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> [",17],["Base",18],[".",17],["Element",18],["]?",17]],"s":[["func",12],[" ",17],["next",7],["() -> [",17],["Base",18],[".",17],["Element",18],["]?",17]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":497},{"p":["InterspersedSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Iterator",18,33]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":383},{"p":["InterspersedSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":497},{"p":["InterspersedSequence","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34],[") -> ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"BidirectionalCollection",348]],"c":[["Base",1,"BidirectionalCollection",348]],"g":[["Base",0,0]],"o":352},{"p":["InterspersedSequence","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34],[") -> ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":453},{"p":["InterspersedSequence","index(_:offsetBy:limitedBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["index",2],[": ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[", ",17],["limitedBy",1],[" ",17],["limit",2],[": ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34],[") -> ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34],["?",17]],"s":[["func",12],[" ",17],["index",7],["(",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[", ",17],["limitedBy",1],[": ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18],["?",17]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":454},{"p":["InterspersedSequence","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["index",2],[": ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[") -> ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34]],"s":[["func",12],[" ",17],["index",7],["(",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":455},{"p":["InterspersedSequence","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34],[") -> ",17],["Int",18,432]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":458},{"p":["PermutationsSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PermutationsSequence",18,35],["<",17],["Base",18],[">.",17],["Iterator",18,36]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["PermutationsSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":383},{"p":["PermutationsSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> [",17],["Base",18],[".",17],["Element",18],["]?",17]],"s":[["func",12],[" ",17],["next",7],["() -> [",17],["Base",18],[".",17],["Element",18],["]?",17]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":497},{"p":["AdjacentPairsSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AdjacentPairsSequence",18,37],["<",17],["Base",18],[">.",17],["Iterator",18,38]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["AdjacentPairsSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":383},{"p":["AdjacentPairsSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["AdjacentPairsSequence",18,37],["<",17],["Base",18],[">.",17],["Iterator",18,38],[".",17],["Element",18,254],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["AdjacentPairsSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18],[".",17],["Element",18],["?",17]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":497},{"p":["CycledTimesCollection","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[") -> ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":453},{"p":["CycledTimesCollection","index(_:offsetBy:limitedBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[", ",17],["limitedBy",1],[" ",17],["limit",2],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[") -> ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],["?",17]],"s":[["func",12],[" ",17],["index",7],["(",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[", ",17],["limitedBy",1],[": ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18],["?",17]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":454},{"p":["CycledTimesCollection","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[") -> ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40]],"s":[["func",12],[" ",17],["index",7],["(",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":455},{"p":["CycledTimesCollection","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[") -> ",17],["Int",18,432]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":458},{"p":["CycledTimesCollection","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[") -> ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"BidirectionalCollection",348]],"c":[["Base",1,"BidirectionalCollection",348]],"g":[["Base",0,0]],"o":352},{"p":["AdjacentPairsCollection","Index","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,516],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"e":[["Base",1,"Collection",435],["Base.Index",1,"Hashable",346]],"c":[["Base",1,"Collection",435],["Base.Index",1,"Hashable",346]],"g":[["Base",0,0]],"o":347},{"p":["AdjacentPairsCollection","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[") -> ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":453},{"p":["AdjacentPairsCollection","index(_:offsetBy:limitedBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[", ",17],["limitedBy",1],[" ",17],["limit",2],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[") -> ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],["?",17]],"s":[["func",12],[" ",17],["index",7],["(",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[", ",17],["limitedBy",1],[": ",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18],["?",17]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":454},{"p":["AdjacentPairsCollection","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[") -> ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42]],"s":[["func",12],[" ",17],["index",7],["(",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":455},{"p":["AdjacentPairsCollection","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[") -> ",17],["Int",18,432]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":458},{"p":["AdjacentPairsCollection","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[") -> ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"BidirectionalCollection",348]],"c":[["Base",1,"BidirectionalCollection",348]],"g":[["Base",0,0]],"o":352},{"p":["ChunksOfCountCollection","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[") -> ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":453},{"p":["ChunksOfCountCollection","index(_:offsetBy:limitedBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[", ",17],["offsetBy",1],[" ",17],["offset",2],[": ",17],["Int",18,432],[", ",17],["limitedBy",1],[" ",17],["limit",2],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[") -> ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],["?",17]],"s":[["func",12],[" ",17],["index",7],["(",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[", ",17],["limitedBy",1],[": ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],["?",17]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":454},{"p":["ChunksOfCountCollection","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[") -> ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44]],"s":[["func",12],[" ",17],["index",7],["(",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":455},{"p":["ChunksOfCountCollection","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[") -> ",17],["Int",18,432]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":458},{"p":["ChunksOfCountCollection","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[") -> ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"RandomAccessCollection",433]],"c":[["Base",1,"RandomAccessCollection",433]],"g":[["Base",0,0]],"o":352},{"p":["JoinedByClosureSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["JoinedByClosureSequence",18,45],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Iterator",18,46]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["JoinedByClosureSequence",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Iterator",18]],"e":[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":383},{"p":["JoinedByClosureSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],[".",17],["Element",18],["?",17]],"c":[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":497},{"p":["WindowsOfCountCollection","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[") -> ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":453},{"p":["WindowsOfCountCollection","index(_:offsetBy:limitedBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[", ",17],["limitedBy",1],[" ",17],["limit",2],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[") -> ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],["?",17]],"s":[["func",12],[" ",17],["index",7],["(",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[", ",17],["limitedBy",1],[": ",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],["?",17]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":454},{"p":["WindowsOfCountCollection","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["i",2],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[") -> ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48]],"s":[["func",12],[" ",17],["index",7],["(",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":455},{"p":["WindowsOfCountCollection","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[") -> ",17],["Int",18,432]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":458},{"p":["WindowsOfCountCollection","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[") -> ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"BidirectionalCollection",348]],"c":[["Base",1,"BidirectionalCollection",348]],"g":[["Base",0,0]],"o":352},{"p":["JoinedByClosureCollection","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[") -> ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":453},{"p":["JoinedByClosureCollection","index(_:offsetBy:limitedBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["index",2],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[", ",17],["limitedBy",1],[" ",17],["limit",2],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[") -> ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],["?",17]],"s":[["func",12],[" ",17],["index",7],["(",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[", ",17],["limitedBy",1],[": ",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],["?",17]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":454},{"p":["JoinedByClosureCollection","index(_:offsetBy:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["_",1],[" ",17],["index",2],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[", ",17],["offsetBy",1],[" ",17],["distance",2],[": ",17],["Int",18,432],[") -> ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50]],"s":[["func",12],[" ",17],["index",7],["(",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[", ",17],["offsetBy",1],[": ",17],["Int",18],[") -> ",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":455},{"p":["JoinedByClosureCollection","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[") -> ",17],["Int",18,432]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"e":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":458},{"p":["JoinedByClosureCollection","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["index",2],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[") -> ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18]],"e":[["Base",1,"BidirectionalCollection",348],["Separator",1,"BidirectionalCollection",348],["Base.Element",1,"BidirectionalCollection",348],["Separator.Element",2,"Base.Element.Element"]],"c":[["Base",1,"BidirectionalCollection",348],["Separator",1,"BidirectionalCollection",348],["Base.Element",1,"BidirectionalCollection",348],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":352},{"p":["UniquePermutationsSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["UniquePermutationsSequence",18,51],["<",17],["Base",18],[">.",17],["Iterator",18,52]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["UniquePermutationsSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":383},{"p":["UniquePermutationsSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> [",17],["Base",18],[".",17],["Element",18],["]?",17]],"s":[["func",12],[" ",17],["next",7],["() -> [",17],["Base",18],[".",17],["Element",18],["]?",17]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":497},{"p":["ExclusiveReductionsSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Iterator",18,54]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ExclusiveReductionsSequence",18],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Iterator",18]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0],["Result",1,0]],"o":383},{"p":["ExclusiveReductionsSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Result",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Result",18],["?",17]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0],["Result",1,0]],"o":497},{"p":["ExclusiveReductionsSequence","Index","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,516],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"e":[["Base",1,"Collection",435],["Base.Index",1,"Hashable",346]],"c":[["Base",1,"Collection",435],["Base.Index",1,"Hashable",346]],"g":[["Base",0,0],["Result",1,0]],"o":347},{"p":["ExclusiveReductionsSequence","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18,55],[") -> ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18,55]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["ExclusiveReductionsSequence",18],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18],[") -> ",17],["ExclusiveReductionsSequence",18],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0],["Result",1,0]],"o":453},{"p":["ExclusiveReductionsSequence","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18,55],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18,55],[") -> ",17],["Int",18,432]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["ExclusiveReductionsSequence",18],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["ExclusiveReductionsSequence",18],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0],["Result",1,0]],"o":458},{"p":["InclusiveReductionsSequence","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["InclusiveReductionsSequence",18,56],["<",17],["Base",18],[">.",17],["Iterator",18,57]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["InclusiveReductionsSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":383},{"p":["InclusiveReductionsSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":497},{"p":["InclusiveReductionsSequence","Index","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,516],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"e":[["Base",1,"Collection",435],["Base.Index",1,"Hashable",346]],"c":[["Base",1,"Collection",435],["Base.Index",1,"Hashable",346]],"g":[["Base",0,0]],"o":347},{"p":["InclusiveReductionsSequence","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["index",2],[": ",17],["InclusiveReductionsSequence",18,56],["<",17],["Base",18],[">.",17],["Index",18,58],[") -> ",17],["InclusiveReductionsSequence",18,56],["<",17],["Base",18],[">.",17],["Index",18,58]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["InclusiveReductionsSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["InclusiveReductionsSequence",18],["<",17],["Base",18],[">.",17],["Index",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":453},{"p":["InclusiveReductionsSequence","distance(from:to:)"],"f":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[" ",17],["start",2],[": ",17],["InclusiveReductionsSequence",18,56],["<",17],["Base",18],[">.",17],["Index",18,58],[", ",17],["to",1],[" ",17],["end",2],[": ",17],["InclusiveReductionsSequence",18,56],["<",17],["Base",18],[">.",17],["Index",18,58],[") -> ",17],["Int",18,432]],"s":[["func",12],[" ",17],["distance",7],["(",17],["from",1],[": ",17],["InclusiveReductionsSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["to",1],[": ",17],["InclusiveReductionsSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Int",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":458},{"p":["Chain2Sequence","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4],[", ",17],["rhs",2],[": ",17],["Chain2Sequence",18,2],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,4],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[", ",17],["Chain2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],"g":[["Base1",0,0],["Base2",1,0]],"o":366},{"p":["SplitCollection","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["SplitCollection",18,7],["<",17],["Base",18],[">.",17],["Index",18,8],[", ",17],["rhs",2],[": ",17],["SplitCollection",18,7],["<",17],["Base",18],[">.",17],["Index",18,8],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["SplitCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["SplitCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":366},{"p":["SplitCollection","Index","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["SplitCollection",18,7],["<",17],["Base",18],[">.",17],["Index",18,8],[", ",17],["rhs",2],[": ",17],["SplitCollection",18,7],["<",17],["Base",18],[">.",17],["Index",18,8],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["SplitCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["SplitCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":377},{"p":["Product2Sequence","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15],[", ",17],["rhs",2],[": ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18,15],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[", ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],"g":[["Base1",0,0],["Base2",1,0]],"o":366},{"p":["JoinedByCollection","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[", ",17],["rhs",2],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[", ",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":366},{"p":["JoinedByCollection","Index","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[", ",17],["rhs",2],[": ",17],["JoinedByCollection",18,21],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,22],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[", ",17],["JoinedByCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":377},{"p":["StridingCollection","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24],[", ",17],["rhs",2],[": ",17],["StridingCollection",18,23],["<",17],["Base",18],[">.",17],["Index",18,24],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["StridingCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":366},{"p":["ChunkedByCollection","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["ChunkedByCollection",18,25],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,26],[", ",17],["rhs",2],[": ",17],["ChunkedByCollection",18,25],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,26],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["ChunkedByCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18],[", ",17],["ChunkedByCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0],["Subject",1,0]],"o":366},{"p":["ChunkedByCollection","Index","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["ChunkedByCollection",18,25],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,26],[", ",17],["rhs",2],[": ",17],["ChunkedByCollection",18,25],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,26],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["ChunkedByCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18],[", ",17],["ChunkedByCollection",18],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0],["Subject",1,0]],"o":377},{"p":["CompactedCollection","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["CompactedCollection",18,28],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18,29],[", ",17],["rhs",2],[": ",17],["CompactedCollection",18,28],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18,29],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["CompactedCollection",18],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18],[", ",17],["CompactedCollection",18],["<",17],["Base",18],[", ",17],["Element",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"e":[["Base",1,"Collection",435],["Base.Element",2,"Element?",495]],"c":[["Base",1,"Collection",435],["Base.Element",2,"Element?",495]],"g":[["Base",0,0],["Element",1,0]],"o":366},{"p":["InterspersedSequence","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34],[", ",17],["rhs",2],[": ",17],["InterspersedSequence",18,32],["<",17],["Base",18],[">.",17],["Index",18,34],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["InterspersedSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":366},{"p":["CycledTimesCollection","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[", ",17],["rhs",2],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":366},{"p":["CycledTimesCollection","Index","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[", ",17],["rhs",2],[": ",17],["CycledTimesCollection",18,39],["<",17],["Base",18],[">.",17],["Index",18,40],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["CycledTimesCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":377},{"p":["AdjacentPairsCollection","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[", ",17],["rhs",2],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":366},{"p":["AdjacentPairsCollection","Index","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[", ",17],["rhs",2],[": ",17],["AdjacentPairsCollection",18,41],["<",17],["Base",18],[">.",17],["Index",18,42],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["AdjacentPairsCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":377},{"p":["ChunksOfCountCollection","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[", ",17],["rhs",2],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":366},{"p":["ChunksOfCountCollection","Index","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[", ",17],["rhs",2],[": ",17],["ChunksOfCountCollection",18,43],["<",17],["Base",18],[">.",17],["Index",18,44],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["ChunksOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":377},{"p":["WindowsOfCountCollection","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[", ",17],["rhs",2],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":366},{"p":["WindowsOfCountCollection","Index","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[", ",17],["rhs",2],[": ",17],["WindowsOfCountCollection",18,47],["<",17],["Base",18],[">.",17],["Index",18,48],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["WindowsOfCountCollection",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":377},{"p":["JoinedByClosureCollection","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[", ",17],["rhs",2],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[", ",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":366},{"p":["JoinedByClosureCollection","Index","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[", ",17],["rhs",2],[": ",17],["JoinedByClosureCollection",18,49],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18,50],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[", ",17],["JoinedByClosureCollection",18],["<",17],["Base",18],[", ",17],["Separator",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],"g":[["Base",0,0],["Separator",1,0]],"o":377},{"p":["ExclusiveReductionsSequence","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18,55],[", ",17],["rhs",2],[": ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18,55],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["ExclusiveReductionsSequence",18],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18],[", ",17],["ExclusiveReductionsSequence",18],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0],["Result",1,0]],"o":366},{"p":["ExclusiveReductionsSequence","Index","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18,55],[", ",17],["rhs",2],[": ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18,55],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["ExclusiveReductionsSequence",18],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18],[", ",17],["ExclusiveReductionsSequence",18],["<",17],["Base",18],[", ",17],["Result",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0],["Result",1,0]],"o":377},{"p":["InclusiveReductionsSequence","Index","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["InclusiveReductionsSequence",18,56],["<",17],["Base",18],[">.",17],["Index",18,58],[", ",17],["rhs",2],[": ",17],["InclusiveReductionsSequence",18,56],["<",17],["Base",18],[">.",17],["Index",18,58],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["InclusiveReductionsSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["InclusiveReductionsSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":366},{"p":["InclusiveReductionsSequence","Index","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["InclusiveReductionsSequence",18,56],["<",17],["Base",18],[">.",17],["Index",18,58],[", ",17],["rhs",2],[": ",17],["InclusiveReductionsSequence",18,56],["<",17],["Base",18],[">.",17],["Index",18,58],[") -> ",17],["Bool",18,431]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["InclusiveReductionsSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[", ",17],["InclusiveReductionsSequence",18],["<",17],["Base",18],[">.",17],["Index",18],[") -> ",17],["Bool",18]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":377},{"p":["chain(_:_:)"],"f":[["func",12],[" ",17],["chain",7],["<",17],["S1",0],[", ",17],["S2",0],[">(",17],["_",1],[" ",17],["s1",2],[": ",17],["S1",18],[", ",17],["_",1],[" ",17],["s2",2],[": ",17],["S2",18],[") -> ",17],["Chain2Sequence",18,2],["<",17],["S1",18],[", ",17],["S2",18],["> ",17],["where",12],[" ",17],["S1",18],[" : ",17],["Sequence",18,379],[", ",17],["S2",18],[" : ",17],["Sequence",18,379],[", ",17],["S1",18],[".",17],["Element",18],[" == ",17],["S2",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["chain",7],["<",17],["S1",0],[", ",17],["S2",0],[">(",17],["S1",18],[", ",17],["S2",18],[") -> ",17],["Chain2Sequence",18],["<",17],["S1",18],[", ",17],["S2",18],[">",17]],"c":[["S1",1,"Sequence",379],["S2",1,"Sequence",379]],"g":[["S1",0,0],["S2",1,0]],"d":"Returns a new sequence that iterates over the two given sequences, one\nfollowed by the other.\n\nYou can pass any two sequences or collections that have the same element\ntype as this sequence. This example chains a closed range of `Int` with an\narray of `Int`:\n\n    let small = 1...3\n    let big = [100, 200, 300]\n    for num in chain(small, big) {\n        print(num)\n    }\n    // 1\n    // 2\n    // 3\n    // 100\n    // 200\n    // 300\n\n- Parameters:\n  - s1: The first sequence.\n  - s2: The second sequence.\n- Returns: A sequence that iterates first over the elements of `s1`, and\n  then over the elements of `s2`.\n\n- Complexity: O(1)"},{"p":["product(_:_:)"],"f":[["func",12],[" ",17],["product",7],["<",17],["Base1",0],[", ",17],["Base2",0],[">(",17],["_",1],[" ",17],["s1",2],[": ",17],["Base1",18],[", ",17],["_",1],[" ",17],["s2",2],[": ",17],["Base2",18],[") -> ",17],["Product2Sequence",18,13],["<",17],["Base1",18],[", ",17],["Base2",18],["> ",17],["where",12],[" ",17],["Base1",18],[" : ",17],["Sequence",18,379],[", ",17],["Base2",18],[" : ",17],["Collection",18,435]],"s":[["func",12],[" ",17],["product",7],["<",17],["Base1",0],[", ",17],["Base2",0],[">(",17],["Base1",18],[", ",17],["Base2",18],[") -> ",17],["Product2Sequence",18],["<",17],["Base1",18],[", ",17],["Base2",18],[">",17]],"c":[["Base1",1,"Sequence",379],["Base2",1,"Collection",435]],"g":[["Base1",0,0],["Base2",1,0]],"d":"Creates a sequence of each pair of elements of two underlying sequences.\n\nUse this function to iterate over every pair of elements in two different\ncollections. The returned sequence yields 2-element tuples, where the first\nelement of the tuple is from the first collection and the second element is\nfrom the second collection.\n\n\n    let numbers = 1...3\n    let colors = [\"cerise\", \"puce\", \"heliotrope\"]\n    for (number, color) in product(numbers, colors) {\n        print(\"\\(number): \\(color)\")\n    }\n    // 1: cerise\n    // 1: puce\n    // 1: heliotrope\n    // 2: cerise\n    // 2: puce\n    // 2: heliotrope\n    // 3: cerise\n    // 3: puce\n    // 3: heliotrope\n\nThe order of tuples in the returned sequence is consistent. The first\nelement of the first collection is paired with each element of the second\ncollection, then the second element of the first collection is paired with\neach element of the second collection, and so on.\n\n- Parameters:\n  - s1: The first sequence to iterate over.\n  - s2: The second sequence to iterate over.\n\n- Complexity: O(1)"},{"p":["SplitSequence","Iterator","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = [",17],["Base",18],[".",17],["Element",18],["]",17]],"s":[["typealias",12],[" ",17],["Element",7]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":498},{"p":["Product2Sequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = (",17],["Base1",18],[".",17],["Element",18],[", ",17],["Base2",18],[".",17],["Element",18],[")",17]],"s":[["typealias",12],[" ",17],["Element",7]],"e":[["Base1",1,"Sequence",379],["Base2",1,"Collection",435]],"c":[["Base1",1,"Sequence",379],["Base2",1,"Collection",435]],"g":[["Base1",0,0],["Base2",1,0]],"o":386},{"p":["IndexedCollection","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = (index",17],[": ",17],["Base",18],[".",17],["Index",18],[", element",17],[": ",17],["Base",18],[".",17],["Element",18],[")",17]],"s":[["typealias",12],[" ",17],["Element",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"d":"The element type for an `IndexedCollection` collection.","o":456},{"p":["ChunkedOnCollection","Index"],"f":[["typealias",12],[" ",17],["Index",7],[" = ",17],["ChunkedByCollection",18,25],["<",17],["Base",18],[", ",17],["Subject",18],[">.",17],["Index",18,26]],"s":[["typealias",12],[" ",17],["Index",7]],"e":[["Base",1,"Collection",435],["Subject",1,"Equatable",376]],"c":[["Base",1,"Collection",435],["Subject",1,"Equatable",376]],"g":[["Base",0,0],["Subject",1,0]],"o":451},{"p":["AdjacentPairsSequence","Iterator","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = (",17],["Base",18],[".",17],["Element",18],[", ",17],["Base",18],[".",17],["Element",18],[")",17]],"s":[["typealias",12],[" ",17],["Element",7]],"e":[["Base",1,"Sequence",379]],"c":[["Base",1,"Sequence",379]],"g":[["Base",0,0]],"o":498},{"p":["CycledTimesCollection","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Base",18],[".",17],["Element",18]],"s":[["typealias",12],[" ",17],["Element",7]],"e":[["Base",1,"Collection",435]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":386},{"p":["ChunksOfCountCollection","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Base",18],[".",17],["SubSequence",18]],"s":[["typealias",12],[" ",17],["Element",7]],"c":[["Base",1,"Collection",435]],"g":[["Base",0,0]],"o":386},{"p":["BidirectionalCollection","trimSuffix(while:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["trimSuffix",7],["(",17],["while",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12]],"s":[["func",12],[" ",17],["trimSuffix",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12]],"e":[["Self",2,"Self.SubSequence"]],"c":[["Self",2,"Self.SubSequence"]],"d":"Mutates a `BidirectionalCollection` by discarding all elements at the end\nof it which satisfy the given predicate.\n\nThis example uses `trimSuffix(while:)` to remove the white space at the\nbeginning of the string:\n\n    let myString = \"  hello, world  \"\n    myString.trimSuffix(while: \\.isWhitespace)\n    print(myString) // \"  hello, world\"\n\n- Parameter predicate: A closure which determines if the element should be\n  removed from the string.\n\n- Complexity: O(*n*), where *n* is the length of this collection.\n"},{"p":["BidirectionalCollection","trim(while:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["trim",7],["(",17],["while",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12]],"s":[["func",12],[" ",17],["trim",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12]],"e":[["Self",2,"Self.SubSequence"]],"c":[["Self",2,"Self.SubSequence"]],"d":"Mutates a `BidirectionalCollection` by discarding all elements at the\nstart and at the end of it which satisfy the given predicate.\n\nThis example uses `trim(while:)` to remove the white space at the\nbeginning of the string:\n\n    let myString = \"  hello, world  \"\n    myString.trim(while: \\.isWhitespace)\n    print(myString) // \"hello, world\"\n\n- Parameter predicate: A closure which determines if the element should be\n  removed from the string.\n\n- Complexity: O(*n*), where *n* is the length of this collection.\n"},{"p":["BidirectionalCollection","trimmingSuffix(while:)"],"f":[["func",12],[" ",17],["trimmingSuffix",7],["(",17],["while",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["SubSequence",18]],"s":[["func",12],[" ",17],["trimmingSuffix",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["SubSequence",18]],"d":"Returns a `SubSequence` formed by discarding all elements at the end of\nthe collection which satisfy the given predicate.\n\nThis example uses `trimmingSuffix(while:)` to get a substring without the\nwhite space at the end of the string:\n\n    let myString = \"  hello, world  \"\n    print(myString.trimmingSuffix(while: \\.isWhitespace)) // \"  hello, world\"\n\n- Parameter predicate: A closure which determines if the element should be\n  omitted from the resulting slice.\n\n- Complexity: O(*n*), where *n* is the length of this collection.\n"},{"p":["BidirectionalCollection","suffix(while:)"],"f":[["func",12],[" ",17],["suffix",7],["(",17],["while",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["SubSequence",18]],"s":[["func",12],[" ",17],["suffix",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["SubSequence",18]],"d":"Returns a subsequence containing the elements from the end until\n`predicate` returns `false` and skipping the remaining elements.\n\n- Parameter predicate: A closure that takes an element of the sequence as\n  its argument and returns `true` if the element should be included or\n  `false` if it should be excluded. Once the predicate returns `false` it\n  will not be called again.\n\n- Complexity: O(*n*), where *n* is the length of the collection."},{"p":["BidirectionalCollection","trimming(while:)"],"f":[["func",12],[" ",17],["trimming",7],["(",17],["while",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["SubSequence",18]],"s":[["func",12],[" ",17],["trimming",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["SubSequence",18]],"d":"Returns a `SubSequence` formed by discarding all elements at the start and\nend of the collection which satisfy the given predicate.\n\nThis example uses `trimming(while:)` to get a substring without the white\nspace at the beginning and end of the string:\n\n    let myString = \"  hello, world  \"\n    print(myString.trimming(while: \\.isWhitespace)) // \"hello, world\"\n\n- Parameter predicate: A closure which determines if the element should be\n  omitted from the resulting slice.\n\n- Complexity: O(*n*), where *n* is the length of this collection.\n"},{"p":["BidirectionalCollection","trimSuffix(while:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["trimSuffix",7],["(",17],["while",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12]],"s":[["func",12],[" ",17],["trimSuffix",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12]],"e":[["Self",1,"RangeReplaceableCollection",493]],"c":[["Self",1,"RangeReplaceableCollection",493]],"d":"Mutates a `BidirectionalCollection` by discarding all elements at the end\nof it which satisfy the given predicate.\n\nThis example uses `trimSuffix(while:)` to remove the white space at the\nbeginning of the string:\n\n    let myString = \"  hello, world  \"\n    myString.trimSuffix(while: \\.isWhitespace)\n    print(myString) // \"  hello, world\"\n\n- Parameter predicate: A closure which determines if the element should be\n  removed from the string.\n\n- Complexity: O(*n*), where *n* is the length of this collection.\n"},{"p":["BidirectionalCollection","trim(while:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["trim",7],["(",17],["while",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12]],"s":[["func",12],[" ",17],["trim",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12]],"e":[["Self",1,"RangeReplaceableCollection",493]],"c":[["Self",1,"RangeReplaceableCollection",493]],"d":"Mutates a `BidirectionalCollection` by discarding all elements at the\nstart and at the end of it which satisfy the given predicate.\n\nThis example uses `trim(while:)` to remove the white space at the\nbeginning of the string:\n\n    let myString = \"  hello, world  \"\n    myString.trim(while: \\.isWhitespace)\n    print(myString) // \"hello, world\"\n\n- Parameter predicate: A closure which determines if the element should be\n  removed from the string.\n\n- Complexity: O(*n*), where *n* is the length of this collection.\n"},{"p":["MutableCollection","stablePartition(by:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["stablePartition",7],["(",17],["by",1],[" ",17],["belongsInSecondPartition",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Index",18]],"s":[["func",12],[" ",17],["stablePartition",7],["(",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Index",18]],"d":"Moves all elements satisfying the given predicate into a suffix of this\ncollection, preserving the relative order of the elements in both\npartitions, and returns the start of the resulting suffix.\n\n- Parameter belongsInSecondPartition: A predicate used to partition the\n  collection. All elements satisfying this predicate are ordered after\n  all elements not satisfying it.\n\n- Complexity: O(*n* log *n*), where *n* is the length of this collection."},{"p":["MutableCollection","stablePartition(subrange:by:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["stablePartition",7],["(",17],["subrange",1],[": ",17],["Range",18,494],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["by",1],[" ",17],["belongsInSecondPartition",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Index",18]],"s":[["func",12],[" ",17],["stablePartition",7],["(",17],["subrange",1],[": ",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Index",18]],"d":"Moves all elements satisfying the given predicate into a suffix of the\ngiven range, preserving the relative order of the elements in both\npartitions, and returns the start of the resulting suffix.\n\n- Parameters:\n  - subrange: The range of elements within this collection to partition.\n  - belongsInSecondPartition: A predicate used to partition the\n    collection. All elements satisfying this predicate are ordered after\n    all elements not satisfying it.\n\n- Complexity: O(*n* log *n*), where *n* is the length of this collection."},{"p":["MutableCollection","rotate(subrange:toStartAt:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["rotate",7],["(",17],["subrange",1],[": ",17],["Range",18,494],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["toStartAt",1],[" ",17],["newStart",2],[": ",17],["Self",18],[".",17],["Index",18],[") -> ",17],["Self",18],[".",17],["Index",18]],"s":[["func",12],[" ",17],["rotate",7],["(",17],["subrange",1],[": ",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["toStartAt",1],[": ",17],["Self",18],[".",17],["Index",18],[") -> ",17],["Self",18],[".",17],["Index",18]],"d":"Rotates the elements within the given subrange so that the element at the\nspecified index becomes the start of the subrange.\n\nRotating a collection is equivalent to breaking the collection into two\nsections at the index `newStart`, and then swapping those two sections.\nIn this example, the `numbers` array is rotated so that the element at\nindex `3` (`40`) is first:\n\n    var numbers = [10, 20, 30, 40, 50, 60, 70, 80]\n    let oldStart = numbers.rotate(subrange: 0..<4, toStartAt: 2)\n    // numbers == [30, 40, 10, 20, 50, 60, 70, 80]\n    // numbers[oldStart] == 10\n\n- Parameters:\n  - subrange: The subrange of this collection to rotate.\n  - newStart: The index of the element that should be at the start of\n    `subrange` after rotating.\n- Returns: The new index of the element that was at the start of\n  `subrange` pre-rotation.\n\n- Complexity: O(*n*), where *n* is the length of `subrange`."},{"p":["MutableCollection","rotate(toStartAt:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["rotate",7],["(",17],["toStartAt",1],[" ",17],["newStart",2],[": ",17],["Self",18],[".",17],["Index",18],[") -> ",17],["Self",18],[".",17],["Index",18]],"s":[["func",12],[" ",17],["rotate",7],["(",17],["toStartAt",1],[": ",17],["Self",18],[".",17],["Index",18],[") -> ",17],["Self",18],[".",17],["Index",18]],"d":"Rotates the elements of this collection so that the element at the\nspecified index becomes the start of the collection.\n\nRotating a collection is equivalent to breaking the collection into two\nsections at the index `newStart`, and then swapping those two sections.\nIn this example, the `numbers` array is rotated so that the element at\nindex `3` (`40`) is first:\n\n    var numbers = [10, 20, 30, 40, 50, 60, 70, 80]\n    let oldStart = numbers.rotate(toStartAt: 3)\n    // numbers == [40, 50, 60, 70, 80, 10, 20, 30]\n    // numbers[oldStart] == 10\n\n- Parameter newStart: The index of the element that should be first after\n  rotating.\n- Returns: The new index of the element that was first pre-rotation.\n\n- Complexity: O(*n*), where *n* is the length of the collection."},{"p":["MutableCollection","partition(subrange:by:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["partition",7],["(",17],["subrange",1],[": ",17],["Range",18,494],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["by",1],[" ",17],["belongsInSecondPartition",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Index",18]],"s":[["func",12],[" ",17],["partition",7],["(",17],["subrange",1],[": ",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Index",18]],"d":"Moves all elements satisfying `isSuffixElement` into a suffix of the\ncollection, returning the start position of the resulting suffix.\n\n- Complexity: O(*n*) where n is the length of the collection."},{"p":["MutableCollection","rotate(subrange:toStartAt:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["rotate",7],["(",17],["subrange",1],[": ",17],["Range",18,494],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["toStartAt",1],[" ",17],["newStart",2],[": ",17],["Self",18],[".",17],["Index",18],[") -> ",17],["Self",18],[".",17],["Index",18]],"s":[["func",12],[" ",17],["rotate",7],["(",17],["subrange",1],[": ",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["toStartAt",1],[": ",17],["Self",18],[".",17],["Index",18],[") -> ",17],["Self",18],[".",17],["Index",18]],"e":[["Self",1,"BidirectionalCollection",348]],"c":[["Self",1,"BidirectionalCollection",348]],"d":"Rotates the elements within the given subrange so that the element at the\nspecified index becomes the start of the subrange.\n\nRotating a collection is equivalent to breaking the collection into two\nsections at the index `newStart`, and then swapping those two sections.\nIn this example, the `numbers` array is rotated so that the element at\nindex `3` (`40`) is first:\n\n    var numbers = [10, 20, 30, 40, 50, 60, 70, 80]\n    let oldStart = numbers.rotate(subrange: 0..<4, toStartAt: 2)\n    // numbers == [30, 40, 10, 20, 50, 60, 70, 80]\n    // numbers[oldStart] == 10\n\n- Parameters:\n  - subrange: The subrange of this collection to rotate.\n  - newStart: The index of the element that should be at the start of\n    `subrange` after rotating.\n- Returns: The new index of the element that was at the start of\n  `subrange` pre-rotation.\n\n- Complexity: O(*n*), where *n* is the length of `subrange`."},{"p":["MutableCollection","rotate(toStartAt:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["rotate",7],["(",17],["toStartAt",1],[" ",17],["newStart",2],[": ",17],["Self",18],[".",17],["Index",18],[") -> ",17],["Self",18],[".",17],["Index",18]],"s":[["func",12],[" ",17],["rotate",7],["(",17],["toStartAt",1],[": ",17],["Self",18],[".",17],["Index",18],[") -> ",17],["Self",18],[".",17],["Index",18]],"e":[["Self",1,"BidirectionalCollection",348]],"c":[["Self",1,"BidirectionalCollection",348]],"d":"Rotates the elements of this collection so that the element at the\nspecified index becomes the start of the collection.\n\nRotating a collection is equivalent to breaking the collection into two\nsections at the index `newStart`, and then swapping those two sections. In\nthis example, the `numbers` array is rotated so that the element at index\n`3` (`40`) is first:\n\n    var numbers = [10, 20, 30, 40, 50, 60, 70, 80]\n    let oldStart = numbers.rotate(toStartAt: 3)\n    // numbers == [40, 50, 60, 70, 80, 10, 20, 30]\n    // numbers[oldStart] == 10\n\n- Parameter newStart: The index of the element that should be first after\n  rotating.\n- Returns: The new index of the element that was first pre-rotation.\n\n- Complexity: O(*n*), where *n* is the length of the collection."},{"p":["MutableCollection","reverse(subrange:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["reverse",7],["(",17],["subrange",1],[": ",17],["Range",18,494],["<",17],["Self",18],[".",17],["Index",18],[">)",17]],"s":[["func",12],[" ",17],["reverse",7],["(",17],["subrange",1],[": ",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">)",17]],"e":[["Self",1,"BidirectionalCollection",348]],"c":[["Self",1,"BidirectionalCollection",348]],"d":"Reverses the elements within the given subrange.\n\nThis example reverses the numbers within the subrange at the start of the\n`numbers` array:\n\n    var numbers = [10, 20, 30, 40, 50, 60, 70, 80]\n    numbers.reverse(subrange: 0..<4)\n    // numbers == [40, 30, 20, 10, 50, 60, 70, 80]\n\n- Parameter subrange: The subrange of this collection to reverse.\n\n- Complexity: O(*n*), where *n* is the length of `subrange`."},{"p":["MutableCollection","partition(subrange:by:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["partition",7],["(",17],["subrange",1],[": ",17],["Range",18,494],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["by",1],[" ",17],["belongsInSecondPartition",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Index",18]],"s":[["func",12],[" ",17],["partition",7],["(",17],["subrange",1],[": ",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Index",18]],"e":[["Self",1,"BidirectionalCollection",348]],"c":[["Self",1,"BidirectionalCollection",348]],"d":"Moves all elements satisfying `isSuffixElement` into a suffix of the\ncollection, returning the start position of the resulting suffix.\n\n- Complexity: O(*n*) where n is the length of the collection."},{"p":["Sequence","reductions(into:_:)"],"f":[["func",12],[" ",17],["reductions",7],["<",17],["Result",0],[">(",17],["into",1],[" ",17],["initial",2],[": ",17],["Result",18],[", ",17],["_",1],[" ",17],["transform",2],[": (",17],["inout",12],[" ",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Void",18,515],[") ",17],["rethrows",12],[" -> [",17],["Result",18],["]",17]],"s":[["func",12],[" ",17],["reductions",7],["<",17],["Result",0],[">(",17],["into",1],[": ",17],["Result",18],[", (",17],["inout",12],[" ",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Void",18],[") ",17],["rethrows",12],[" -> [",17],["Result",18],["]",17]],"g":[["Result",0,1]],"d":"Returns an array containing the accumulated results of combining the\nelements of the sequence using the given closure.\n\nThis can be seen as applying the reduce function to each element and\nproviding the initial value followed by these results as a sequence.\n\n```\nlet runningTotal = [1, 2, 3, 4].reductions(into: 0, +)\nprint(runningTotal)\n\n// prints [0, 1, 3, 6, 10]\n```\n\nWhen `reductions(into:_:_)` is called, the following steps occur:\n\n  1. The `initial` result is added to an array of results.\n  2. The `transform` closure is called with the `initial` result and the\n  first element of the sequence, appending the result to the array.\n  3. The closure is called again repeatedly with the updated accumulating\n  result and each element of the sequence, adding each result to the\n  array.\n  4. When the sequence is exhausted, the results array is returned to the\n  caller.\n\n  If the sequence has no elements, `transform` is never executed and\n  an array containing only the `initial` result is returned.\n\n- Parameters:\n  - initial: The value to use as the initial value.\n  - transform: A closure that combines the previously reduced result and\n    the next element in the receiving sequence.\n- Returns: An array of the initial value followed by the reduced elements.\n\n- Complexity: O(_n_), where _n_ is the length of the sequence."},{"p":["Sequence","reductions(_:)"],"f":[["func",12],[" ",17],["reductions",7],["(",17],["_",1],[" ",17],["transform",2],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Element",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["reductions",7],["((",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Element",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"d":"Returns an array containing the accumulated results of combining the\nelements of the sequence using the given closure.\n\nThis can be seen as applying the reduce function to each element and\nproviding the initial value followed by these results as a sequence.\n\n```\nlet runningTotal = [1, 2, 3, 4].reductions(+)\nprint(runningTotal)\n\n// prints [1, 3, 6, 10]\n```\n\nWhen `reductions(_:)` is called, the following steps occur:\n\n  1. The `transform` closure is called with the first and second elements\n  of the sequence, appending the result to an array of results.\n  2. The closure is called again repeatedly with the updated accumulating\n  result and the next element of the sequence, adding each result to the\n  array.\n  3. When the sequence is exhausted, the results array is returned to the\n  caller.\n\n  If the sequence has no elements, `transform` is never executed and\n  an empty array is returned.\n\n  If the sequence has one element, `transform` is never executed and\n  an array containing only that first element is returned.\n\n- Parameter transform: A closure that combines the previously reduced\n  result and the next element in the receiving sequence.\n- Returns: An array of the reduced elements.\n\n- Complexity: O(_n_), where _n_ is the length of the sequence."},{"p":["Sequence","reductions(_:_:)"],"f":[["func",12],[" ",17],["reductions",7],["<",17],["Result",0],[">(",17],["_",1],[" ",17],["initial",2],[": ",17],["Result",18],[", ",17],["_",1],[" ",17],["transform",2],[": (",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Result",18],[") ",17],["rethrows",12],[" -> [",17],["Result",18],["]",17]],"s":[["func",12],[" ",17],["reductions",7],["<",17],["Result",0],[">(",17],["Result",18],[", (",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Result",18],[") ",17],["rethrows",12],[" -> [",17],["Result",18],["]",17]],"g":[["Result",0,1]],"d":"Returns an array containing the accumulated results of combining the\nelements of the sequence using the given closure.\n\nThis can be seen as applying the reduce function to each element and\nproviding the initial value followed by these results as a sequence.\n\n```\nlet runningTotal = [1, 2, 3, 4].reductions(0, +)\nprint(runningTotal)\n\n// prints [0, 1, 3, 6, 10]\n```\n\nWhen `reductions(_:_:)` is called, the following steps occur:\n\n  1. The `initial` result is added to an array of results.\n  2. The `transform` closure is called with the `initial` result and the\n  first element of the sequence, appending the result to the array.\n  3. The closure is called again repeatedly with the updated accumulating\n  result and each element of the sequence, adding each result to the\n  array.\n  4. When the sequence is exhausted, the results array is returned to the\n  caller.\n\n  If the sequence has no elements, `transform` is never executed and\n  an array containing only the `initial` result is returned.\n\n- Parameters:\n  - initial: The value to use as the initial value.\n  - transform: A closure that combines the previously reduced result and\n    the next element in the receiving sequence.\n- Returns: An array of the initial value followed by the reduced elements.\n\n- Complexity: O(_n_), where _n_ is the length of the sequence."},{"p":["Sequence","firstNonNil(_:)"],"f":[["func",12],[" ",17],["firstNonNil",7],["<",17],["Result",0],[">(",17],["_",1],[" ",17],["transform",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Result",18],["?) ",17],["rethrows",12],[" -> ",17],["Result",18],["?",17]],"s":[["func",12],[" ",17],["firstNonNil",7],["<",17],["Result",0],[">((",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Result",18],["?) ",17],["rethrows",12],[" -> ",17],["Result",18],["?",17]],"g":[["Result",0,1]],"d":"Returns the first non-`nil` result obtained from applying the given\ntransformation to the elements of the sequence.\n\n    let strings = [\"three\", \"3.14\", \"-5\", \"2\"]\n    if let firstInt = strings.firstNonNil({ Int($0) }) {\n        print(firstInt)\n        // -5\n    }\n\n- Parameter transform: A closure that takes an element of the sequence as\n  its argument and returns an optional transformed value.\n- Returns: The first non-`nil` return value of the transformation, or\n  `nil` if no transformation is successful.\n\n- Complexity: O(*n*), where *n* is the number of elements at the start of\n  the sequence that result in `nil` when applying the transformation."},{"p":["Sequence","interspersed(with:)"],"f":[["func",12],[" ",17],["interspersed",7],["(",17],["with",1],[" ",17],["separator",2],[": ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["InterspersedSequence",18,32],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["interspersed",7],["(",17],["with",1],[": ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["InterspersedSequence",18],["<",17],["Self",18],[">",17]],"d":"Returns a sequence containing elements of this sequence with the given\nseparator inserted in between each element.\n\nAny value of the sequence's element type can be used as the separator.\n\n```\nfor value in [1,2,3].interspersed(with: 0) {\n    print(value)\n}\n// 1\n// 0\n// 2\n// 0\n// 3\n```\n\nThe following shows a String being interspersed with a Character:\n```\nlet result = \"ABCDE\".interspersed(with: \"-\")\nprint(String(result))\n// \"A-B-C-D-E\"\n```\n\n- Parameter separator: Value to insert in between each of this sequence’s\n  elements.\n- Returns: The interspersed sequence of elements.\n\n- Complexity: O(1)"},{"p":["Sequence","randomSample(count:using:)"],"f":[["func",12],[" ",17],["randomSample",7],["<",17],["G",0],[">(",17],["count",1],[" ",17],["k",2],[": ",17],["Int",18,432],[", ",17],["using",1],[" ",17],["rng",2],[": ",17],["inout",12],[" ",17],["G",18],[") -> [",17],["Self",18],[".",17],["Element",18],["] ",17],["where",12],[" ",17],["G",18],[" : ",17],["RandomNumberGenerator",18,345]],"s":[["func",12],[" ",17],["randomSample",7],["<",17],["G",0],[">(",17],["count",1],[": ",17],["Int",18],[", ",17],["using",1],[": ",17],["inout",12],[" ",17],["G",18],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"c":[["G",1,"RandomNumberGenerator",345]],"g":[["G",0,1]],"d":"Randomly selects the specified number of elements from this sequence.\n\n- Parameters:\n  - k: The number of elements to randomly select.\n  - rng: The random number generator to use for the sampling.\n- Returns: An array of `k` random elements. The returned elements may be\n  in any order. If `k` is greater than this sequence's count, then this\n  method returns the full sequence.\n\n- Complexity: O(*n*), where *n* is the length of the sequence."},{"p":["Sequence","randomSample(count:)"],"f":[["func",12],[" ",17],["randomSample",7],["(",17],["count",1],[" ",17],["k",2],[": ",17],["Int",18,432],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["randomSample",7],["(",17],["count",1],[": ",17],["Int",18],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"d":"Randomly selects the specified number of elements from this sequence.\n\nThis method is equivalent to calling `randomSample(k:using:)`, passing in\nthe system's default random generator.\n\n- Parameter k: The number of elements to randomly select.\n- Returns: An array of `k` random elements. The returned elements may be\n  in any order. If `k` is greater than this sequence's count, then this\n  method returns the full sequence.\n\n- Complexity: O(*n*), where *n* is the length of the sequence."},{"p":["Sequence","adjacentPairs()"],"f":[["func",12],[" ",17],["adjacentPairs",7],["() -> ",17],["AdjacentPairsSequence",18,37],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["adjacentPairs",7],["() -> ",17],["AdjacentPairsSequence",18],["<",17],["Self",18],[">",17]],"d":"Creates a sequence of adjacent pairs of elements from this sequence.\n\nIn the `AdjacentPairsSequence` returned by this method, the elements of\nthe *i*th pair are the *i*th and *(i+1)*th elements of the underlying\nsequence. The following example uses the `adjacentPairs()` method to\niterate over adjacent pairs of integers:\n\n    for pair in (1...).prefix(5).adjacentPairs() {\n        print(pair)\n    }\n    // Prints \"(1, 2)\"\n    // Prints \"(2, 3)\"\n    // Prints \"(3, 4)\"\n    // Prints \"(4, 5)\""},{"p":["Sequence","max(count:sortedBy:)"],"f":[["func",12],[" ",17],["max",7],["(",17],["count",1],[": ",17],["Int",18,432],[", ",17],["sortedBy",1],[" ",17],["areInIncreasingOrder",2],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["max",7],["(",17],["count",1],[": ",17],["Int",18],[", ",17],["sortedBy",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"d":"Returns the largest elements of this sequence, as sorted by the given\npredicate.\n\nThis example partially sorts an array of integers to retrieve its three\nlargest values:\n\n    let numbers = [7, 1, 6, 2, 8, 3, 9]\n    let smallestThree = numbers.max(count: 3, sortedBy: <)\n    // [7, 8, 9]\n\nIf you need to sort a sequence but only need to access its largest\nelements, using this method can give you a performance boost over sorting\nthe entire sequence. The order of equal elements is guaranteed to be\npreserved.\n\n- Parameters:\n  - count: The number of elements to return. If `count` is greater than\n    the number of elements in this sequence, all of the sequence's\n    elements are returned.\n  - areInIncreasingOrder: A predicate that returns `true` if its\n    first argument should be ordered before its second argument;\n    otherwise, `false`.\n- Returns: An array of the largest `count` elements of this sequence,\n  sorted according to `areInIncreasingOrder`.\n\n- Complexity: O(*k* log *k* + *nk*), where *n* is the length of the\n  sequence and *k* is `count`."},{"p":["Sequence","min(count:sortedBy:)"],"f":[["func",12],[" ",17],["min",7],["(",17],["count",1],[": ",17],["Int",18,432],[", ",17],["sortedBy",1],[" ",17],["areInIncreasingOrder",2],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["min",7],["(",17],["count",1],[": ",17],["Int",18],[", ",17],["sortedBy",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"d":"Returns the smallest elements of this sequence, as sorted by the given\npredicate.\n\nThis example partially sorts an array of integers to retrieve its three\nsmallest values:\n\n    let numbers = [7, 1, 6, 2, 8, 3, 9]\n    let smallestThree = numbers.min(count: 3, sortedBy: <)\n    // [1, 2, 3]\n\nIf you need to sort a sequence but only need to access its smallest\nelements, using this method can give you a performance boost over sorting\nthe entire sequence. The order of equal elements is guaranteed to be\npreserved.\n\n- Parameters:\n  - count: The number of elements to return. If `count` is greater than\n    the number of elements in this sequence, all of the sequence's\n    elements are returned.\n  - areInIncreasingOrder: A predicate that returns `true` if its\n    first argument should be ordered before its second argument;\n    otherwise, `false`.\n- Returns: An array of the smallest `count` elements of this sequence,\n  sorted according to `areInIncreasingOrder`.\n\n- Complexity: O(*k* log *k* + *nk*), where *n* is the length of the\n  sequence and *k* is `count`."},{"p":["Sequence","scan(into:_:)"],"f":[["func",12],[" ",17],["scan",7],["<",17],["Result",0],[">(",17],["into",1],[" ",17],["initial",2],[": ",17],["Result",18],[", ",17],["_",1],[" ",17],["transform",2],[": (",17],["inout",12],[" ",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Void",18,515],[") ",17],["rethrows",12],[" -> [",17],["Result",18],["]",17]],"s":[["func",12],[" ",17],["scan",7],["<",17],["Result",0],[">(",17],["into",1],[": ",17],["Result",18],[", (",17],["inout",12],[" ",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Void",18],[") ",17],["rethrows",12],[" -> [",17],["Result",18],["]",17]],"a":{"a":{"d":true,"m":"Use reductions(into:_:) instead."}},"g":[["Result",0,1]]},{"p":["Sequence","scan(_:)"],"f":[["func",12],[" ",17],["scan",7],["(",17],["_",1],[" ",17],["transform",2],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Element",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["scan",7],["((",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Element",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"a":{"a":{"d":true,"m":"Use reductions(_:) instead."}}},{"p":["Sequence","scan(_:_:)"],"f":[["func",12],[" ",17],["scan",7],["<",17],["Result",0],[">(",17],["_",1],[" ",17],["initial",2],[": ",17],["Result",18],[", ",17],["_",1],[" ",17],["transform",2],[": (",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Result",18],[") ",17],["rethrows",12],[" -> [",17],["Result",18],["]",17]],"s":[["func",12],[" ",17],["scan",7],["<",17],["Result",0],[">(",17],["Result",18],[", (",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Result",18],[") ",17],["rethrows",12],[" -> [",17],["Result",18],["]",17]],"a":{"a":{"d":true,"m":"Use reductions(_:_:) instead."}},"g":[["Result",0,1]]},{"p":["Sequence","uniqued(on:)"],"f":[["func",12],[" ",17],["uniqued",7],["<",17],["Subject",0],[">(",17],["on",1],[" ",17],["projection",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Subject",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["] ",17],["where",12],[" ",17],["Subject",18],[" : ",17],["Hashable",18,346]],"s":[["func",12],[" ",17],["uniqued",7],["<",17],["Subject",0],[">(",17],["on",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Subject",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"c":[["Subject",1,"Hashable",346]],"g":[["Subject",0,1]],"d":"Returns an array with the unique elements of this sequence (as determined\nby the given projection), in the order of the first occurrence of each\nunique element.\n\nThis example finds the elements of the `animals` array with unique\nfirst characters:\n\n    let animals = [\"dog\", \"pig\", \"cat\", \"ox\", \"cow\", \"owl\"]\n    let uniqued = animals.uniqued(on: { $0.first })\n    print(uniqued)\n    // Prints '[\"dog\", \"pig\", \"cat\", \"ox\"]'\n\n- Parameter projection: A closure that transforms an element into the\n  value to use for uniqueness. If `projection` returns the same value for\n  two different elements, the second element will be excluded from the\n  resulting array.\n\n- Returns: An array with only the unique elements of this sequence, as\n  determined by the result of `projection` for each element.\n\n- Complexity: O(*n*), where *n* is the length of the sequence."},{"p":["Sequence","striding(by:)"],"f":[["func",12],[" ",17],["striding",7],["(",17],["by",1],[" ",17],["step",2],[": ",17],["Int",18,432],[") -> ",17],["StridingSequence",18,16],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["striding",7],["(",17],["by",1],[": ",17],["Int",18],[") -> ",17],["StridingSequence",18],["<",17],["Self",18],[">",17]],"d":"Returns a sequence stepping through the elements every `step` starting at\nthe first value. Any remainders of the stride will be trimmed.\n\n    (0...10).striding(by: 2) // == [0, 2, 4, 6, 8, 10]\n    (0...10).striding(by: 3) // == [0, 3, 6, 9]\n\n- Complexity: O(1). Access to successive values is O(k) where _k_ is the\n  striding `step`.\n\n- Parameter step: The amount to step with each iteration.\n- Returns: Returns a sequence for stepping through the elements by the\n  specified amount."},{"p":["Sequence","compacted()"],"f":[["func",12],[" ",17],["compacted",7],["<",17],["Unwrapped",0],[">() -> ",17],["CompactedSequence",18,18],["<",17],["Self",18],[", ",17],["Unwrapped",18],["> ",17],["where",12],[" ",17],["Self",18],[".",17],["Element",18],[" == ",17],["Unwrapped",18],["?",17]],"s":[["func",12],[" ",17],["compacted",7],["<",17],["Unwrapped",0],[">() -> ",17],["CompactedSequence",18],["<",17],["Self",18],[", ",17],["Unwrapped",18],[">",17]],"c":[["Self.Element",2,"Unwrapped?",495]],"g":[["Unwrapped",0,1]],"d":"Returns a new `Sequence` that iterates over every non-nil element from the\noriginal `Sequence`.\n\nProduces the same result as `c.compactMap { $0 }`.\n\n    let c = [1, nil, 2, 3, nil]\n    for num in c.compacted() {\n        print(num)\n    }\n    // 1\n    // 2\n    // 3\n\n- Returns: A `Sequence` where the element is the unwrapped original\n  element and iterates over every non-nil element from the original\n  `Sequence`.\n\nComplexity: O(1)"},{"p":["Sequence","minAndMax(by:)"],"f":[["func",12],[" ",17],["minAndMax",7],["(",17],["by",1],[" ",17],["areInIncreasingOrder",2],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> (min",17],[": ",17],["Self",18],[".",17],["Element",18],[", max",17],[": ",17],["Self",18],[".",17],["Element",18],[")?",17]],"s":[["func",12],[" ",17],["minAndMax",7],["(",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> (min",17],[": ",17],["Self",18],[".",17],["Element",18],[", max",17],[": ",17],["Self",18],[".",17],["Element",18],[")?",17]],"d":"Returns both the minimum and maximum elements in the sequence, using the\ngiven predicate as the comparison between elements.\n\nThe predicate must be a *strict weak ordering* over the elements. That is,\nfor any elements `a`, `b`, and `c`, the following conditions must hold:\n\n- `areInIncreasingOrder(a, a)` is always `false`. (Irreflexivity)\n- If `areInIncreasingOrder(a, b)` and `areInIncreasingOrder(b, c)` are\n  both `true`, then `areInIncreasingOrder(a, c)` is also\n  `true`. (Transitive comparability)\n- Two elements are *incomparable* if neither is ordered before the other\n  according to the predicate. If `a` and `b` are incomparable, and `b`\n  and `c` are incomparable, then `a` and `c` are also incomparable.\n  (Transitive incomparability)\n\nThis example shows how to use the `minAndMax(by:)` method on a dictionary\nto find the key-value pair with the lowest value and the pair with the\nhighest value.\n\n    let hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\n    if let extremeHues = hues.minAndMax(by: {$0.value < $1.value}) {\n        print(extremeHues.min, extremeHues.max)\n    } else {\n        print(\"There are no hues\")\n    }\n    // Prints: \"(key: \"Coral\", value: 16) (key: \"Heliotrope\", value: 296)\"\n\n- Precondition: The sequence is finite.\n\n- Parameter areInIncreasingOrder: A predicate that returns `true` if its\n  first argument should be ordered before its second argument; otherwise,\n  `false`.\n- Returns: A tuple with the sequence's minimum element, followed by its\n  maximum element. If the sequence provides multiple qualifying minimum\n  elements, the first equivalent element is returned; of multiple maximum\n  elements, the last is returned. If the sequence has no elements, the\n  method returns `nil`.\n\n- Complexity: O(*n*), where *n* is the length of the sequence."},{"p":["Sequence","uniqued()"],"f":[["func",12],[" ",17],["uniqued",7],["() -> ",17],["UniquedSequence",18,9],["<",17],["Self",18],[", ",17],["Self",18],[".",17],["Element",18],[">",17]],"s":[["func",12],[" ",17],["uniqued",7],["() -> ",17],["UniquedSequence",18],["<",17],["Self",18],[", ",17],["Self",18],[".",17],["Element",18],[">",17]],"e":[["Self.Element",1,"Hashable",346]],"c":[["Self.Element",1,"Hashable",346]],"d":"Returns a sequence with only the unique elements of this sequence, in the\norder of the first occurrence of each unique element.\n\n    let animals = [\"dog\", \"pig\", \"cat\", \"ox\", \"dog\", \"cat\"]\n    let uniqued = animals.uniqued()\n    print(Array(uniqued))\n    // Prints '[\"dog\", \"pig\", \"cat\", \"ox\"]'\n\n- Returns: A sequence with only the unique elements of this sequence.\n .\n- Complexity: O(1)."},{"p":["Sequence","max(count:)"],"f":[["func",12],[" ",17],["max",7],["(",17],["count",1],[": ",17],["Int",18,432],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["max",7],["(",17],["count",1],[": ",17],["Int",18],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"e":[["Self.Element",1,"Comparable",365]],"c":[["Self.Element",1,"Comparable",365]],"d":"Returns the largest elements of this sequence.\n\nThis example partially sorts an array of integers to retrieve its three\nlargest values:\n\n    let numbers = [7, 1, 6, 2, 8, 3, 9]\n    let smallestThree = numbers.max(count: 3)\n    // [7, 8, 9]\n\nIf you need to sort a sequence but only need to access its largest\nelements, using this method can give you a performance boost over sorting\nthe entire sequence. The order of equal elements is guaranteed to be\npreserved.\n\n- Parameter count: The number of elements to return. If `count` is greater\n  than the number of elements in this sequence, all of the sequence's\n  elements are returned.\n- Returns: An array of the largest `count` elements of this sequence.\n\n- Complexity: O(*k* log *k* + *nk*), where *n* is the length of the\n  sequence and *k* is `count`."},{"p":["Sequence","min(count:)"],"f":[["func",12],[" ",17],["min",7],["(",17],["count",1],[": ",17],["Int",18,432],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["min",7],["(",17],["count",1],[": ",17],["Int",18],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"e":[["Self.Element",1,"Comparable",365]],"c":[["Self.Element",1,"Comparable",365]],"d":"Returns the smallest elements of this sequence.\n\nThis example partially sorts an array of integers to retrieve its three\nsmallest values:\n\n    let numbers = [7, 1, 6, 2, 8, 3, 9]\n    let smallestThree = numbers.min(count: 3)\n    // [1, 2, 3]\n\nIf you need to sort a sequence but only need to access its smallest\nelements, using this method can give you a performance boost over sorting\nthe entire sequence. The order of equal elements is guaranteed to be\npreserved.\n\n- Parameter count: The number of elements to return. If `count` is greater\n  than the number of elements in this sequence, all of the sequence's\n  elements are returned.\n- Returns: An array of the smallest `count` elements of this sequence.\n\n- Complexity: O(*k* log *k* + *nk*), where *n* is the length of the\n  sequence and *k* is `count`."},{"p":["Sequence","minAndMax()"],"f":[["func",12],[" ",17],["minAndMax",7],["() -> (min",17],[": ",17],["Self",18],[".",17],["Element",18],[", max",17],[": ",17],["Self",18],[".",17],["Element",18],[")?",17]],"s":[["func",12],[" ",17],["minAndMax",7],["() -> (min",17],[": ",17],["Self",18],[".",17],["Element",18],[", max",17],[": ",17],["Self",18],[".",17],["Element",18],[")?",17]],"e":[["Self.Element",1,"Comparable",365]],"c":[["Self.Element",1,"Comparable",365]],"d":"Returns both the minimum and maximum elements in the sequence.\n\nThis example finds the smallest and largest values in an array of height\nmeasurements.\n\n    let heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\n    if let (lowestHeight, greatestHeight) = heights.minAndMax() {\n        print(lowestHeight, greatestHeight)\n    } else {\n        print(\"The list of heights is empty\")\n    }\n    // Prints: \"58.5 67.5\"\n\n- Precondition: The sequence is finite.\n\n- Returns: A tuple with the sequence's minimum element, followed by its\n  maximum element. If the sequence provides multiple qualifying minimum\n  elements, the first equivalent element is returned; of multiple maximum\n  elements, the last is returned. If the sequence has no elements, the\n  method returns `nil`.\n\n- Complexity: O(*n*), where *n* is the length of the sequence."},{"p":["Sequence","joined(by:)"],"f":[["func",12],[" ",17],["joined",7],["<",17],["Separator",0],[">(",17],["by",1],[" ",17],["separator",2],[": ",17],["Separator",18],[") -> ",17],["JoinedBySequence",18,11],["<",17],["Self",18],[", ",17],["Separator",18],["> ",17],["where",12],[" ",17],["Separator",18],[" : ",17],["Collection",18,435],[", ",17],["Separator",18],[".",17],["Element",18],[" == ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["joined",7],["<",17],["Separator",0],[">(",17],["by",1],[": ",17],["Separator",18],[") -> ",17],["JoinedBySequence",18],["<",17],["Self",18],[", ",17],["Separator",18],[">",17]],"c":[["Separator",1,"Collection",435],["Separator.Element",2,"Self.Element.Element"]],"g":[["Separator",0,1]],"d":"Returns the concatenation of the elements in this sequence of sequences,\ninserting the given separator between each sequence.\n\n    for x in [[1, 2], [3, 4], [5, 6]].joined(by: [100, 200]) {\n        print(x)\n    }\n    // 1, 2, 100, 200, 3, 4, 100, 200, 5, 6"},{"p":["Sequence","joined(by:)"],"f":[["func",12],[" ",17],["joined",7],["(",17],["by",1],[" ",17],["separator",2],[": ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[") -> ",17],["JoinedBySequence",18,11],["<",17],["Self",18],[", ",17],["CollectionOfOne",18,499],["<",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[">>",17]],"s":[["func",12],[" ",17],["joined",7],["(",17],["by",1],[": ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[") -> ",17],["JoinedBySequence",18],["<",17],["Self",18],[", ",17],["CollectionOfOne",18],["<",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[">>",17]],"d":"Returns the concatenation of the elements in this sequence of sequences,\ninserting the given separator between each sequence.\n\n    for x in [[1, 2], [3, 4], [5, 6]].joined(by: 100) {\n        print(x)\n    }\n    // 1, 2, 100, 3, 4, 100, 5, 6"},{"p":["Sequence","joined(by:)"],"f":[["func",12],[" ",17],["joined",7],["<",17],["Separator",0],[">(",17],["by",1],[" ",17],["separator",2],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Separator",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],["] ",17],["where",12],[" ",17],["Separator",18],[" : ",17],["Sequence",18,379],[", ",17],["Separator",18],[".",17],["Element",18],[" == ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["joined",7],["<",17],["Separator",0],[">(",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Separator",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],["]",17]],"c":[["Separator.Element",2,"Self.Element.Element"]],"g":[["Separator",0,1]],"d":"Returns the concatenation of the elements in this sequence of sequences,\ninserting the separator produced by the closure between each sequence.\n\n    for x in [[1, 2], [3, 4], [5, 6]].joined(by: { [100 * $0.last!, 100 * $1.first!] }) {\n        print(x)\n    }\n    // 1, 2, 200, 300, 3, 4, 400, 500, 5, 6"},{"p":["Sequence","joined(by:)"],"f":[["func",12],[" ",17],["joined",7],["(",17],["by",1],[" ",17],["separator",2],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["joined",7],["(",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],["]",17]],"d":"Returns the concatenation of the elements in this sequence of sequences,\ninserting the separator produced by the closure between each sequence.\n\n    for x in [[1, 2], [3, 4], [5, 6]].joined(by: { $0.last! * $1.first! }) {\n        print(x)\n    }\n    // 1, 2, 6, 3, 4, 20, 5, 6"},{"p":["Collection","trimPrefix(while:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["trimPrefix",7],["(",17],["while",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12]],"s":[["func",12],[" ",17],["trimPrefix",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12]],"e":[["Self",2,"Self.SubSequence"]],"c":[["Self",2,"Self.SubSequence"]],"d":"Mutates a `Collection` by discarding all elements at the start of it which\nsatisfy the given predicate.\n\nThis example uses `trimPrefix(while:)` to remove the white space at the\nbeginning of the string:\n\n    let myString = \"  hello, world  \"\n    myString.trimPrefix(while: \\.isWhitespace)\n    print(myString) // \"hello, world  \"\n\n- Parameters predicate: A closure which determines if the element should\n  be removed from the string.\n\n- Complexity: O(*n*), where *n* is the length of this collection.\n"},{"p":["Collection","combinations(ofCount:)"],"f":[["func",12],[" ",17],["combinations",7],["(",17],["ofCount",1],[" ",17],["k",2],[": ",17],["Int",18,432],[") -> ",17],["CombinationsSequence",18,30],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["combinations",7],["(",17],["ofCount",1],[": ",17],["Int",18],[") -> ",17],["CombinationsSequence",18],["<",17],["Self",18],[">",17]],"d":"Returns a collection of combinations of this collection's elements, with\neach combination having the specified number of elements.\n\nThis example prints the different combinations of three from an array of\nfour colors:\n\n    let colors = [\"fuchsia\", \"cyan\", \"mauve\", \"magenta\"]\n    for combo in colors.combinations(ofCount: 3) {\n        print(combo.joined(separator: \", \"))\n    }\n    // fuchsia, cyan, mauve\n    // fuchsia, cyan, magenta\n    // fuchsia, mauve, magenta\n    // cyan, mauve, magenta\n\nThe returned collection presents combinations in a consistent order, where\nthe indices in each combination are in ascending lexicographical order.\nThat is, in the example above, the combinations in order are the elements\nat `[0, 1, 2]`, `[0, 1, 3]`, `[0, 2, 3]`, and finally `[1, 2, 3]`.\n\nIf `k` is zero, the resulting sequence has exactly one element, an empty\narray. If `k` is greater than the number of elements in this sequence,\nthe resulting sequence has no elements.\n\n- Parameter k: The number of elements to include in each combination.\n\n- Complexity: O(1) for random-access base collections. O(*n*) where *n*\nis the number of elements in the base collection, since\n`CombinationsSequence` accesses the `count` of the base collection."},{"p":["Collection","combinations(ofCount:)"],"f":[["func",12],[" ",17],["combinations",7],["<",17],["R",0],[">(",17],["ofCount",1],[" ",17],["kRange",2],[": ",17],["R",18],[") -> ",17],["CombinationsSequence",18,30],["<",17],["Self",18],["> ",17],["where",12],[" ",17],["R",18],[" : ",17],["RangeExpression",18,430],[", ",17],["R",18],[".",17],["Bound",18],[" == ",17],["Int",18,432]],"s":[["func",12],[" ",17],["combinations",7],["<",17],["R",0],[">(",17],["ofCount",1],[": ",17],["R",18],[") -> ",17],["CombinationsSequence",18],["<",17],["Self",18],[">",17]],"c":[["R",1,"RangeExpression",430],["R.Bound",2,"Int",432]],"g":[["R",0,1]],"d":"Returns a collection of combinations of this collection's elements, with\neach combination having the specified number of elements.\n\nThis example prints the different combinations of 1 and 2 from an array of\nfour colors:\n\n    let colors = [\"fuchsia\", \"cyan\", \"mauve\", \"magenta\"]\n    for combo in colors.combinations(ofCount: 1...2) {\n        print(combo.joined(separator: \", \"))\n    }\n    // fuchsia\n    // cyan\n    // mauve\n    // magenta\n    // fuchsia, cyan\n    // fuchsia, mauve\n    // fuchsia, magenta\n    // cyan, mauve\n    // cyan, magenta\n    // mauve, magenta\n\nThe returned collection presents combinations in a consistent order, where\nthe indices in each combination are in ascending lexicographical order.\nThat is, in the example above, the combinations in order are the elements\nat `[0]`, `[1]`, `[2]`, `[3]`, `[0, 1]`, `[0, 2]`, `[0, 3]`, `[1, 2]`,\n`[1, 3]`, and finally `[2, 3]`.\n\nThis example prints _all_ the combinations (including an empty array and\nthe original collection) from an array of numbers:\n\n    let numbers = [10, 20, 30, 40]\n    for combo in numbers.combinations(ofCount: 0...) {\n        print(combo)\n    }\n    // []\n    // [10]\n    // [20]\n    // [30]\n    // [40]\n    // [10, 20]\n    // [10, 30]\n    // [10, 40]\n    // [20, 30]\n    // [20, 40]\n    // [30, 40]\n    // [10, 20, 30]\n    // [10, 20, 40]\n    // [10, 30, 40]\n    // [20, 30, 40]\n    // [10, 20, 30, 40]\n\nIf `kRange` is `0...0`, the resulting sequence has exactly one element, an\nempty array. The given range is limited to `0...base.count`. If the\nlimited range is empty, the resulting sequence has no elements.\n\n- Parameter kRange: The range of numbers of elements to include in each\n  combination.\n\n- Complexity: O(1) for random-access base collections. O(*n*) where *n*\n  is the number of elements in the base collection, since\n  `CombinationsSequence` accesses the `count` of the base collection."},{"p":["Collection","permutations(ofCount:)"],"f":[["func",12],[" ",17],["permutations",7],["(",17],["ofCount",1],[" ",17],["k",2],[": ",17],["Int",18,432],["? = nil) -> ",17],["PermutationsSequence",18,35],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["permutations",7],["(",17],["ofCount",1],[": ",17],["Int",18],["?) -> ",17],["PermutationsSequence",18],["<",17],["Self",18],[">",17]],"d":"Returns a collection of the permutations of this collection of the\nspecified length.\n\nThis example prints the different permutations of two elements from an\narray of three names:\n\n    let names = [\"Alex\", \"Celeste\", \"Davide\"]\n    for perm in names.permutations(ofCount: 2) {\n        print(perm.joined(separator: \", \"))\n    }\n    // Alex, Celeste\n    // Alex, Davide\n    // Celeste, Alex\n    // Celeste, Davide\n    // Davide, Alex\n    // Davide, Celeste\n\nThe permutations present the elements in increasing lexicographic order\nof the collection's original ordering (rather than the order of the\nelements themselves). The first permutation will always consist of\nelements in their original order, and the last will have the elements in\nthe reverse of their original order.\n\nValues that are repeated in the original collection are always treated as\nseparate values in the resulting permutations:\n\n    let numbers = [20, 10, 10]\n    for perm in numbers.permutations() {\n        print(perm)\n    }\n    // [20, 10, 10]\n    // [20, 10, 10]\n    // [10, 20, 10]\n    // [10, 10, 20]\n    // [10, 20, 10]\n    // [10, 10, 20]\n\nIf `k` is zero, the resulting sequence has exactly one element, an\nempty array. If `k` is greater than the number of elements in this\nsequence, the resulting sequence has no elements.\n\n- Parameter k: The number of elements to include in each permutation.\n  If `k` is `nil`, the resulting sequence represents permutations of this\n  entire collection. If `k` is greater than the number of elements in\n  this collection, the resulting sequence is empty.\n\n- Complexity: O(1) for random-access base collections. O(*n*) where *n*\n  is the number of elements in the base collection, since\n  `PermutationsSequence` accesses the `count` of the base collection."},{"p":["Collection","permutations(ofCount:)"],"f":[["func",12],[" ",17],["permutations",7],["<",17],["R",0],[">(",17],["ofCount",1],[" ",17],["kRange",2],[": ",17],["R",18],[") -> ",17],["PermutationsSequence",18,35],["<",17],["Self",18],["> ",17],["where",12],[" ",17],["R",18],[" : ",17],["RangeExpression",18,430],[", ",17],["R",18],[".",17],["Bound",18],[" == ",17],["Int",18,432]],"s":[["func",12],[" ",17],["permutations",7],["<",17],["R",0],[">(",17],["ofCount",1],[": ",17],["R",18],[") -> ",17],["PermutationsSequence",18],["<",17],["Self",18],[">",17]],"c":[["R",1,"RangeExpression",430],["R.Bound",2,"Int",432]],"g":[["R",0,1]],"d":"Returns a collection of the permutations of this collection with lengths\nin the specified range.\n\nThis example prints the different permutations of one to two elements from\nan array of three names:\n\n    let names = [\"Alex\", \"Celeste\", \"Davide\"]\n    for perm in names.permutations(ofCount: 1...2) {\n        print(perm.joined(separator: \", \"))\n    }\n    // Alex\n    // Celeste\n    // Davide\n    // Alex, Celeste\n    // Alex, Davide\n    // Celeste, Alex\n    // Celeste, Davide\n    // Davide, Alex\n    // Davide, Celeste\n\nThis example prints _all_ the permutations (including an empty array) from\nan array of numbers:\n\n    let numbers = [10, 20, 30]\n    for perm in numbers.permutations(ofCount: 0...) {\n        print(perm)\n    }\n    // []\n    // [10]\n    // [20]\n    // [30]\n    // [10, 20]\n    // [10, 30]\n    // [20, 10]\n    // [20, 30]\n    // [30, 10]\n    // [30, 20]\n    // [10, 20, 30]\n    // [10, 30, 20]\n    // [20, 10, 30]\n    // [20, 30, 10]\n    // [30, 10, 20]\n    // [30, 20, 10]\n\nThe returned permutations are in ascending order by length, and then\nlexicographically within each group of the same length.\n\n- Parameter kRange: A range of the number of elements to include in each\n  permutation. `kRange` can be any integer range expression, and is\n  clamped to the number of elements in this collection. Passing a range\n  covering sizes greater than the number of elements in this collection\n  results in an empty sequence.\n\n- Complexity: O(1) for random-access base collections. O(*n*) where *n*\n  is the number of elements in the base collection, since\n  `PermutationsSequence` accesses the `count` of the base collection."},{"p":["Collection","randomSample(count:using:)"],"f":[["func",12],[" ",17],["randomSample",7],["<",17],["G",0],[">(",17],["count",1],[" ",17],["k",2],[": ",17],["Int",18,432],[", ",17],["using",1],[" ",17],["rng",2],[": ",17],["inout",12],[" ",17],["G",18],[") -> [",17],["Self",18],[".",17],["Element",18],["] ",17],["where",12],[" ",17],["G",18],[" : ",17],["RandomNumberGenerator",18,345]],"s":[["func",12],[" ",17],["randomSample",7],["<",17],["G",0],[">(",17],["count",1],[": ",17],["Int",18],[", ",17],["using",1],[": ",17],["inout",12],[" ",17],["G",18],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"c":[["G",1,"RandomNumberGenerator",345]],"g":[["G",0,1]],"d":"Randomly selects the specified number of elements from this collection.\n\n- Parameters:\n  - k: The number of elements to randomly select.\n  - rng: The random number generator to use for the sampling.\n- Returns: An array of `k` random elements. The returned elements may be\n  in any order. If `k` is greater than this collection's count, then this\n  method returns the full collection.\n\n- Complexity: O(*k*), where *k* is the number of elements to select, if\n  the collection conforms to `RandomAccessCollection`. Otherwise, O(*n*),\n  where *n* is the length of the collection."},{"p":["Collection","randomSample(count:)"],"f":[["func",12],[" ",17],["randomSample",7],["(",17],["count",1],[" ",17],["k",2],[": ",17],["Int",18,432],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["randomSample",7],["(",17],["count",1],[": ",17],["Int",18],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"d":"Randomly selects the specified number of elements from this collection.\n\nThis method is equivalent to calling `randomSample(k:using:)`, passing in\nthe system's default random generator.\n\n- Parameter k: The number of elements to randomly select.\n- Returns: An array of `k` random elements. The returned elements may be\n  in any order. If `k` is greater than this collection's count, then this\n  method returns the full collection.\n\n- Complexity: O(*k*), where *k* is the number of elements to select, if\n  the collection conforms to `RandomAccessCollection`. Otherwise, O(*n*),\n  where *n* is the length of the collection."},{"p":["Collection","adjacentPairs()"],"f":[["func",12],[" ",17],["adjacentPairs",7],["() -> ",17],["AdjacentPairsCollection",18,41],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["adjacentPairs",7],["() -> ",17],["AdjacentPairsCollection",18],["<",17],["Self",18],[">",17]],"d":"A collection of adjacent pairs of elements built from an underlying\ncollection.\n\nIn an `AdjacentPairsCollection`, the elements of the *i*th pair are the\n*i*th and *(i+1)*th elements of the underlying sequence. The following\nexample uses the `adjacentPairs()` method to iterate over adjacent pairs\nof integers:\n\n    for pair in (1...5).adjacentPairs() {\n        print(pair)\n    }\n    // Prints \"(1, 2)\"\n    // Prints \"(2, 3)\"\n    // Prints \"(3, 4)\"\n    // Prints \"(4, 5)\""},{"p":["Collection","trimmingPrefix(while:)"],"f":[["func",12],[" ",17],["trimmingPrefix",7],["(",17],["while",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["SubSequence",18]],"s":[["func",12],[" ",17],["trimmingPrefix",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["SubSequence",18]],"d":"Returns a `SubSequence` formed by discarding all elements at the start of\nthe collection which satisfy the given predicate.\n\nThis example uses `trimmingPrefix(while:)` to get a substring without the\nwhite space at the beginning of the string:\n\n    let myString = \"  hello, world  \"\n    print(myString.trimmingPrefix(while: \\.isWhitespace)) // \"hello, world  \"\n\n- Parameter predicate: A closure which determines if the element should be\n  omitted from the resulting slice.\n\n- Complexity: O(*n*), where *n* is the length of this collection.\n"},{"p":["Collection","partitioningIndex(where:)"],"f":[["func",12],[" ",17],["partitioningIndex",7],["(",17],["where",1],[" ",17],["belongsInSecondPartition",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Index",18]],"s":[["func",12],[" ",17],["partitioningIndex",7],["(",17],["where",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Index",18]],"d":"Returns the index of the first element in the collection that matches\nthe predicate.\n\nThe collection must already be partitioned according to the predicate.\nThat is, there should be an index `i` where for every element in\n`collection[..<i]` the predicate is `false`, and for every element in\n`collection[i...]` the predicate is `true`.\n\n- Parameter belongsInSecondPartition: A predicate that partitions the\n  collection.\n- Returns: The index of the first element in the collection for which\n  `predicate` returns `true`.\n\n- Complexity: O(log *n*), where *n* is the length of this collection if\n  the collection conforms to `RandomAccessCollection`, otherwise O(*n*)."},{"p":["Collection","randomStableSample(count:using:)"],"f":[["func",12],[" ",17],["randomStableSample",7],["<",17],["G",0],[">(",17],["count",1],[" ",17],["k",2],[": ",17],["Int",18,432],[", ",17],["using",1],[" ",17],["rng",2],[": ",17],["inout",12],[" ",17],["G",18],[") -> [",17],["Self",18],[".",17],["Element",18],["] ",17],["where",12],[" ",17],["G",18],[" : ",17],["RandomNumberGenerator",18,345]],"s":[["func",12],[" ",17],["randomStableSample",7],["<",17],["G",0],[">(",17],["count",1],[": ",17],["Int",18],[", ",17],["using",1],[": ",17],["inout",12],[" ",17],["G",18],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"c":[["G",1,"RandomNumberGenerator",345]],"g":[["G",0,1]],"d":"Randomly selects the specified number of elements from this collection,\nmaintaining their relative order.\n\n- Parameters:\n  - k: The number of elements to randomly select.\n  - rng: The random number generator to use for the sampling.\n- Returns: An array of `k` random elements. If `k` is greater than this\n  collection's count, then this method returns the full collection.\n\n- Complexity: O(*n*), where *n* is the length of the collection."},{"p":["Collection","randomStableSample(count:)"],"f":[["func",12],[" ",17],["randomStableSample",7],["(",17],["count",1],[" ",17],["k",2],[": ",17],["Int",18,432],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["randomStableSample",7],["(",17],["count",1],[": ",17],["Int",18],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"d":"Randomly selects the specified number of elements from this collection,\nmaintaining their relative order.\n\nThis method is equivalent to calling `randomStableSample(k:using:)`,\npassing in the system's default random generator.\n\n- Parameter k: The number of elements to randomly select.\n- Returns: An array of `k` random elements. If `k` is greater than this\n  collection's count, then this method returns the full collection.\n\n- Complexity: O(*n*), where *n* is the length of the collection."},{"p":["Collection","max(count:sortedBy:)"],"f":[["func",12],[" ",17],["max",7],["(",17],["count",1],[": ",17],["Int",18,432],[", ",17],["sortedBy",1],[" ",17],["areInIncreasingOrder",2],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["max",7],["(",17],["count",1],[": ",17],["Int",18],[", ",17],["sortedBy",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"d":"Returns the largest elements of this collection, as sorted by the given\npredicate.\n\nThis example partially sorts an array of integers to retrieve its three\nlargest values:\n\n    let numbers = [7, 1, 6, 2, 8, 3, 9]\n    let smallestThree = numbers.max(count: 3, sortedBy: <)\n    // [7, 8, 9]\n\nIf you need to sort a collection but only need to access its largest\nelements, using this method can give you a performance boost over sorting\nthe entire collection. The order of equal elements is guaranteed to be\npreserved.\n\n- Parameters:\n  - count: The number of elements to return. If `count` is greater than\n    the number of elements in this collection, all of the collection's\n    elements are returned.\n  - areInIncreasingOrder: A predicate that returns `true` if its\n    first argument should be ordered before its second argument;\n    otherwise, `false`.\n- Returns: An array of the largest `count` elements of this collection,\n  sorted according to `areInIncreasingOrder`.\n\n- Complexity: O(*k* log *k* + *nk*), where *n* is the length of the\n  collection and *k* is `count`."},{"p":["Collection","min(count:sortedBy:)"],"f":[["func",12],[" ",17],["min",7],["(",17],["count",1],[": ",17],["Int",18,432],[", ",17],["sortedBy",1],[" ",17],["areInIncreasingOrder",2],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["min",7],["(",17],["count",1],[": ",17],["Int",18],[", ",17],["sortedBy",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"d":"Returns the smallest elements of this collection, as sorted by the given\npredicate.\n\nThis example partially sorts an array of integers to retrieve its three\nsmallest values:\n\n    let numbers = [7, 1, 6, 2, 8, 3, 9]\n    let smallestThree = numbers.min(count: 3, sortedBy: <)\n    // [1, 2, 3]\n\nIf you need to sort a collection but only need to access its smallest\nelements, using this method can give you a performance boost over sorting\nthe entire collection. The order of equal elements is guaranteed to be\npreserved.\n\n- Parameters:\n  - count: The number of elements to return. If `count` is greater than\n    the number of elements in this collection, all of the collection's\n    elements are returned.\n  - areInIncreasingOrder: A predicate that returns `true` if its\n    first argument should be ordered before its second argument;\n    otherwise, `false`.\n- Returns: An array of the smallest `count` elements of this collection,\n  sorted according to `areInIncreasingOrder`.\n\n- Complexity: O(*k* log *k* + *nk*), where *n* is the length of the\n  collection and *k* is `count`."},{"p":["Collection","chunks(ofCount:)"],"f":[["func",12],[" ",17],["chunks",7],["(",17],["ofCount",1],[" ",17],["count",2],[": ",17],["Int",18,432],[") -> ",17],["ChunksOfCountCollection",18,43],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["chunks",7],["(",17],["ofCount",1],[": ",17],["Int",18],[") -> ",17],["ChunksOfCountCollection",18],["<",17],["Self",18],[">",17]],"d":"Returns a `ChunksOfCountCollection<Self>` view presenting the elements in\nchunks with count of the given count parameter.\n\n- Parameter count: The size of the chunks. If the count parameter is\n  evenly divided by the count of the base `Collection` all the chunks will\n  have the count equals to size. Otherwise, the last chunk will contain\n  the remaining elements.\n\n    let c = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(c.chunks(ofCount: 5).map(Array.init))\n    // [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]\n\n    print(c.chunks(ofCount: 3).map(Array.init))\n    // [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n\n- Complexity: O(*n*), because the start index is pre-computed."},{"p":["Collection","cycled(times:)"],"f":[["func",12],[" ",17],["cycled",7],["(",17],["times",1],[": ",17],["Int",18,432],[") -> ",17],["CycledTimesCollection",18,39],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["cycled",7],["(",17],["times",1],[": ",17],["Int",18],[") -> ",17],["CycledTimesCollection",18],["<",17],["Self",18],[">",17]],"d":"Returns a sequence that repeats the elements of this collection the\nspecified number of times.\n\nPassing `1` as `times` results in this collection's elements being\nprovided a single time; passing `0` results in an empty sequence. The\n`print(_:)` function in this example is never called:\n\n    for x in [1, 2, 3].cycled(times: 0) {\n        print(x)\n    }\n\n- Parameter times: The number of times to repeat this sequence. `times`\n  must be zero or greater.\n- Returns: A sequence that repeats the elements of this sequence `times`\n  times.\n\n- Complexity: O(1)"},{"p":["Collection","cycled()"],"f":[["func",12],[" ",17],["cycled",7],["() -> ",17],["CycledSequence",18,5],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["cycled",7],["() -> ",17],["CycledSequence",18],["<",17],["Self",18],[">",17]],"d":"Returns a sequence that repeats the elements of this collection forever.\n\nUse the `cycled()` method to repeat the elements of a sequence or\ncollection forever. You can combine `cycled()` with another, finite\nsequence to iterate over the two together.\n\n    for (evenOrOdd, number) in zip([\"even\", \"odd\"].cycled(), 0..<10) {\n        print(\"\\(number) is \\(evenOrOdd)\")\n    }\n    // 0 is even\n    // 1 is odd\n    // 2 is even\n    // 3 is odd\n    // ...\n    // 9 is odd\n\n- Important: When called on a non-empty collection, the resulting sequence\n  is infinite. Do not directly call methods that require a finite\n  sequence, like `map` or `filter`, without first constraining the length\n  of the cycling sequence.\n\n- Returns: A sequence that repeats the elements of this collection\n  forever.\n\n- Complexity: O(1)"},{"p":["Collection","chunked(by:)"],"f":[["func",12],[" ",17],["chunked",7],["(",17],["by",1],[" ",17],["belongInSameGroup",2],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["SubSequence",18],["]",17]],"s":[["func",12],[" ",17],["chunked",7],["(",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> [",17],["Self",18],[".",17],["SubSequence",18],["]",17]],"d":"Returns a collection of subsequences of this collection, chunked by the\ngiven predicate.\n\n- Complexity: O(*n*), where *n* is the length of this collection."},{"p":["Collection","chunked(on:)"],"f":[["func",12],[" ",17],["chunked",7],["<",17],["Subject",0],[">(",17],["on",1],[" ",17],["projection",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Subject",18],[") ",17],["rethrows",12],[" -> [(",17],["Subject",18],[", ",17],["Self",18],[".",17],["SubSequence",18],[")] ",17],["where",12],[" ",17],["Subject",18],[" : ",17],["Equatable",18,376]],"s":[["func",12],[" ",17],["chunked",7],["<",17],["Subject",0],[">(",17],["on",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Subject",18],[") ",17],["rethrows",12],[" -> [(",17],["Subject",18],[", ",17],["Self",18],[".",17],["SubSequence",18],[")]",17]],"c":[["Subject",1,"Equatable",376]],"g":[["Subject",0,1]],"d":"Returns a collection of subsequences of this collection, chunked by\ngrouping elements that project to the same value.\n\n- Complexity: O(*n*), where *n* is the length of this collection."},{"p":["Collection","indexed()"],"f":[["func",12],[" ",17],["indexed",7],["() -> ",17],["IndexedCollection",18,20],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["indexed",7],["() -> ",17],["IndexedCollection",18],["<",17],["Self",18],[">",17]],"d":"Returns a collection of pairs *(i, x)*, where *i* represents an index of\nthe collection, and *x* represents an element.\n\nThis example iterates over the indices and elements of a set, building an\narray consisting of indices of names with five or fewer letters.\n\n    let names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\n    var shorterIndices: [Set<String>.Index] = []\n    for (i, name) in names.indexed() {\n        if name.count <= 5 {\n            shorterIndices.append(i)\n        }\n    }\n\nReturns: A collection of paired indices and elements of this collection."},{"p":["Collection","windows(ofCount:)"],"f":[["func",12],[" ",17],["windows",7],["(",17],["ofCount",1],[" ",17],["count",2],[": ",17],["Int",18,432],[") -> ",17],["WindowsOfCountCollection",18,47],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["windows",7],["(",17],["ofCount",1],[": ",17],["Int",18],[") -> ",17],["WindowsOfCountCollection",18],["<",17],["Self",18],[">",17]],"d":"Returns a collection of all the overlapping slices of a given size.\n\nUse this method to iterate over overlapping subsequences of this\ncollection. This example prints every five character substring of `str`:\n\n    let str = \"Hello, world!\"\n    for substring in str.windows(ofCount: 5) {\n        print(substring)\n    }\n    // \"Hello\"\n    // \"ello,\"\n    // \"llo, \"\n    // \"lo, W\"\n    // ...\n    // \"orld!\"\n\n- Parameter count: The number of elements in each window subsequence.\n- Returns: A collection of subsequences of this collection, each with\n  length `count`. If this collection is shorter than `count`, the\n  resulting collection is empty.\n\n- Complexity: O(1) if the collection conforms to\n  `RandomAccessCollection`, otherwise O(*k*) where `k` is `count`.\n  Access to successive windows is O(1)."},{"p":["Collection","striding(by:)"],"f":[["func",12],[" ",17],["striding",7],["(",17],["by",1],[" ",17],["step",2],[": ",17],["Int",18,432],[") -> ",17],["StridingCollection",18,23],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["striding",7],["(",17],["by",1],[": ",17],["Int",18],[") -> ",17],["StridingCollection",18],["<",17],["Self",18],[">",17]],"d":"Returns a sequence stepping through the elements every `step` starting at\nthe first value. Any remainders of the stride will be trimmed.\n\n    (0...10).striding(by: 2) // == [0, 2, 4, 6, 8, 10]\n    (0...10).striding(by: 3) // == [0, 3, 6, 9]\n\n- Complexity: O(1). Access to successive values is O(1) if the collection\n  conforms to `RandomAccessCollection`; otherwise, O(_k_), where _k_ is\n  the striding `step`.\n\n- Parameter step: The amount to step with each iteration.\n- Returns: Returns a collection for stepping through the elements by the\n  specified amount."},{"p":["Collection","compacted()"],"f":[["func",12],[" ",17],["compacted",7],["<",17],["Unwrapped",0],[">() -> ",17],["CompactedCollection",18,28],["<",17],["Self",18],[", ",17],["Unwrapped",18],["> ",17],["where",12],[" ",17],["Self",18],[".",17],["Element",18],[" == ",17],["Unwrapped",18],["?",17]],"s":[["func",12],[" ",17],["compacted",7],["<",17],["Unwrapped",0],[">() -> ",17],["CompactedCollection",18],["<",17],["Self",18],[", ",17],["Unwrapped",18],[">",17]],"c":[["Self.Element",2,"Unwrapped?",495]],"g":[["Unwrapped",0,1]],"d":"Returns a new `Collection` that iterates over every non-nil element from\nthe original `Collection`.\n\nProduces the same result as `c.compactMap { $0 }`.\n\n    let c = [1, nil, 2, 3, nil]\n    for num in c.compacted() {\n        print(num)\n    }\n    // 1\n    // 2\n    // 3\n\n- Returns: A `Collection` where the element is the unwrapped original\n  element and iterates over every non-nil element from the original\n  `Collection`.\n\nComplexity: O(*n*) where *n* is the number of elements in the\noriginal `Collection`."},{"p":["Collection","uniquePermutations(ofCount:)"],"f":[["func",12],[" ",17],["uniquePermutations",7],["(",17],["ofCount",1],[" ",17],["k",2],[": ",17],["Int",18,432],["? = nil) -> ",17],["UniquePermutationsSequence",18,51],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["uniquePermutations",7],["(",17],["ofCount",1],[": ",17],["Int",18],["?) -> ",17],["UniquePermutationsSequence",18],["<",17],["Self",18],[">",17]],"e":[["Self.Element",1,"Hashable",346]],"c":[["Self.Element",1,"Hashable",346]],"d":"Returns a sequence of the unique permutations of this sequence of the\nspecified length.\n\nUse this method to iterate over the unique permutations of a sequence\nwith repeating elements. This example prints every unique two-element\npermutation of an array of numbers:\n\n    let numbers = [1, 1, 2]\n    for perm in numbers.uniquePermutations(ofCount: 2) {\n        print(perm)\n    }\n    // [1, 1]\n    // [1, 2]\n    // [2, 1]\n\nBy contrast, the `permutations(ofCount:)` method permutes a collection's\nelements by position, and can include permutations with equal elements\nin each permutation:\n\n    for perm in numbers.permutations(ofCount: 2)\n        print(perm)\n    }\n    // [1, 1]\n    // [1, 1]\n    // [1, 2]\n    // [1, 2]\n    // [2, 1]\n    // [2, 1]\n\nThe returned permutations are in lexicographically sorted order.\n\n- Parameter k: The number of elements to include in each permutation.\n  If `k` is `nil`, the resulting sequence represents permutations of this\n  entire collection. If `k` is greater than the number of elements in\n  this collection, the resulting sequence is empty.\n\n- Complexity: O(*n*), where *n* is the number of elements in this\n  collection."},{"p":["Collection","uniquePermutations(ofCount:)"],"f":[["func",12],[" ",17],["uniquePermutations",7],["<",17],["R",0],[">(",17],["ofCount",1],[" ",17],["kRange",2],[": ",17],["R",18],[") -> ",17],["UniquePermutationsSequence",18,51],["<",17],["Self",18],["> ",17],["where",12],[" ",17],["R",18],[" : ",17],["RangeExpression",18,430],[", ",17],["R",18],[".",17],["Bound",18],[" == ",17],["Int",18,432]],"s":[["func",12],[" ",17],["uniquePermutations",7],["<",17],["R",0],[">(",17],["ofCount",1],[": ",17],["R",18],[") -> ",17],["UniquePermutationsSequence",18],["<",17],["Self",18],[">",17]],"e":[["Self.Element",1,"Hashable",346]],"c":[["R",1,"RangeExpression",430],["Self.Element",1,"Hashable",346],["R.Bound",2,"Int",432]],"g":[["R",0,1]],"d":"Returns a collection of the unique permutations of this sequence with\nlengths in the specified range.\n\nUse this method to iterate over the unique permutations of a sequence\nwith repeating elements. This example prints every unique permutation\nof an array of numbers with lengths through 2 elements:\n\n    let numbers = [1, 1, 2]\n    for perm in numbers.uniquePermutations(ofCount: ...2) {\n        print(perm)\n    }\n    // []\n    // [1]\n    // [2]\n    // [1, 1]\n    // [1, 2]\n    // [2, 1]\n\nThe returned permutations are in ascending order by length, and then\nlexicographically within each group of the same length.\n\n- Parameter kRange: A range of the number of elements to include in each\n  permutation. `kRange` can be any integer range expression, and is\n  clamped to the number of elements in this collection. Passing a range\n  covering sizes greater than the number of elements in this collection\n  results in an empty sequence.\n\n- Complexity: O(*n*), where *n* is the number of elements in this\n  collection."},{"p":["Collection","max(count:)"],"f":[["func",12],[" ",17],["max",7],["(",17],["count",1],[": ",17],["Int",18,432],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["max",7],["(",17],["count",1],[": ",17],["Int",18],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"e":[["Self.Element",1,"Comparable",365]],"c":[["Self.Element",1,"Comparable",365]],"d":"Returns the largest elements of this collection.\n\nThis example partially sorts an array of integers to retrieve its three\nlargest values:\n\n    let numbers = [7, 1, 6, 2, 8, 3, 9]\n    let smallestThree = numbers.max(count: 3)\n    // [7, 8, 9]\n\nIf you need to sort a collection but only need to access its largest\nelements, using this method can give you a performance boost over sorting\nthe entire collection. The order of equal elements is guaranteed to be\npreserved.\n\n- Parameter count: The number of elements to return. If `count` is greater\n  than the number of elements in this collection, all of the collection's\n  elements are returned.\n- Returns: An array of the largest `count` elements of this collection.\n\n- Complexity: O(*k* log *k* + *nk*), where *n* is the length of the\n  collection and *k* is `count`."},{"p":["Collection","min(count:)"],"f":[["func",12],[" ",17],["min",7],["(",17],["count",1],[": ",17],["Int",18,432],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"s":[["func",12],[" ",17],["min",7],["(",17],["count",1],[": ",17],["Int",18],[") -> [",17],["Self",18],[".",17],["Element",18],["]",17]],"e":[["Self.Element",1,"Comparable",365]],"c":[["Self.Element",1,"Comparable",365]],"d":"Returns the smallest elements of this collection.\n\nThis example partially sorts an array of integers to retrieve its three\nsmallest values:\n\n    let numbers = [7, 1, 6, 2, 8, 3, 9]\n    let smallestThree = numbers.min(count: 3)\n    // [1, 2, 3]\n\nIf you need to sort a collection but only need to access its smallest\nelements, using this method can give you a performance boost over sorting\nthe entire collection. The order of equal elements is guaranteed to be\npreserved.\n\n- Parameter count: The number of elements to return. If `count` is greater\n  than the number of elements in this collection, all of the collection's\n  elements are returned.\n- Returns: An array of the smallest `count` elements of this collection.\n\n- Complexity: O(*k* log *k* + *nk*), where *n* is the length of the\n  collection and *k* is `count`."},{"p":["Collection","joined(by:)"],"f":[["func",12],[" ",17],["joined",7],["<",17],["Separator",0],[">(",17],["by",1],[" ",17],["separator",2],[": ",17],["Separator",18],[") -> ",17],["JoinedByCollection",18,21],["<",17],["Self",18],[", ",17],["Separator",18],["> ",17],["where",12],[" ",17],["Separator",18],[" : ",17],["Collection",18,435],[", ",17],["Separator",18],[".",17],["Element",18],[" == ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["joined",7],["<",17],["Separator",0],[">(",17],["by",1],[": ",17],["Separator",18],[") -> ",17],["JoinedByCollection",18],["<",17],["Self",18],[", ",17],["Separator",18],[">",17]],"c":[["Separator.Element",2,"Self.Element.Element"]],"g":[["Separator",0,1]],"d":"Returns the concatenation of the elements in this collection of\ncollections, inserting the given separator between each collection.\n\n    for x in [[1, 2], [3, 4], [5, 6]].joined(by: [100, 200]) {\n        print(x)\n    }\n    // 1, 2, 100, 200, 3, 4, 100, 200, 5, 6"},{"p":["Collection","joined(by:)"],"f":[["func",12],[" ",17],["joined",7],["(",17],["by",1],[" ",17],["separator",2],[": ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[") -> ",17],["JoinedByCollection",18,21],["<",17],["Self",18],[", ",17],["CollectionOfOne",18,499],["<",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[">>",17]],"s":[["func",12],[" ",17],["joined",7],["(",17],["by",1],[": ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[") -> ",17],["JoinedByCollection",18],["<",17],["Self",18],[", ",17],["CollectionOfOne",18],["<",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[">>",17]],"d":"Returns the concatenation of the elements in this collection of\ncollections, inserting the given separator between each collection.\n\n    for x in [[1, 2], [3, 4], [5, 6]].joined(by: 100) {\n        print(x)\n    }\n    // 1, 2, 100, 3, 4, 100, 5, 6"},{"p":["Collection","trimPrefix(while:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["trimPrefix",7],["(",17],["while",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,431],[") ",17],["rethrows",12]],"s":[["func",12],[" ",17],["trimPrefix",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12]],"e":[["Self",1,"RangeReplaceableCollection",493]],"c":[["Self",1,"RangeReplaceableCollection",493]],"d":"Mutates a `Collection` by discarding all elements at the start of it which\nsatisfy the given predicate.\n\nThis example uses `trimPrefix(while:)` to remove the white space at the\nbeginning of the string:\n\n    let myString = \"  hello, world  \"\n    myString.trimPrefix(while: \\.isWhitespace)\n    print(myString) // \"hello, world  \"\n\n- Parameter predicate: A closure which determines if the element should be\n  removed from the string.\n\n- Complexity: O(*n*), where *n* is the length of this collection.\n"},{"p":["LazySequenceProtocol","reductions(into:_:)"],"f":[["func",12],[" ",17],["reductions",7],["<",17],["Result",0],[">(",17],["into",1],[" ",17],["initial",2],[": ",17],["Result",18],[", ",17],["_",1],[" ",17],["transform",2],[": ",17],["@escaping",12],[" (",17],["inout",12],[" ",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Void",18,515],[") -> ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Result",18],[">",17]],"s":[["func",12],[" ",17],["reductions",7],["<",17],["Result",0],[">(",17],["into",1],[": ",17],["Result",18],[", (",17],["inout",12],[" ",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Void",18],[") -> ",17],["ExclusiveReductionsSequence",18],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Result",18],[">",17]],"g":[["Result",0,1]],"d":"Returns a sequence containing the accumulated results of combining the\nelements of the sequence using the given closure.\n\nThis can be seen as applying the reduce function to each element and\nproviding the initial value followed by these results as a sequence.\n\n```\nlet runningTotal = [1, 2, 3, 4].lazy.reductions(into: 0, +)\nprint(Array(runningTotal))\n\n// prints [0, 1, 3, 6, 10]\n```\n\n- Parameters:\n  - initial: The value to use as the initial value.\n  - transform: A closure that combines the previously reduced result and\n    the next element in the receiving sequence.\n- Returns: A sequence of the initial value followed by the reduced\nelements.\n\n- Complexity: O(1)"},{"p":["LazySequenceProtocol","reductions(_:_:)"],"f":[["func",12],[" ",17],["reductions",7],["<",17],["Result",0],[">(",17],["_",1],[" ",17],["initial",2],[": ",17],["Result",18],[", ",17],["_",1],[" ",17],["transform",2],[": ",17],["@escaping",12],[" (",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Result",18],[") -> ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Result",18],[">",17]],"s":[["func",12],[" ",17],["reductions",7],["<",17],["Result",0],[">(",17],["Result",18],[", (",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Result",18],[") -> ",17],["ExclusiveReductionsSequence",18],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Result",18],[">",17]],"g":[["Result",0,1]],"d":"Returns a sequence containing the accumulated results of combining the\nelements of the sequence using the given closure.\n\nThis can be seen as applying the reduce function to each element and\nproviding the initial value followed by these results as a sequence.\n\n```\nlet runningTotal = [1, 2, 3, 4].lazy.reductions(0, +)\nprint(Array(runningTotal))\n\n// prints [0, 1, 3, 6, 10]\n```\n\n- Parameters:\n  - initial: The value to use as the initial value.\n  - transform: A closure that combines the previously reduced result and\n    the next element in the receiving sequence.\n- Returns: A sequence of the initial value followed by the reduced\n  elements.\n\n- Complexity: O(1)"},{"p":["LazySequenceProtocol","reductions(_:)"],"f":[["func",12],[" ",17],["reductions",7],["(",17],["_",1],[" ",17],["transform",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["InclusiveReductionsSequence",18,56],["<",17],["Self",18],[".",17],["Elements",18],[">",17]],"s":[["func",12],[" ",17],["reductions",7],["((",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["InclusiveReductionsSequence",18],["<",17],["Self",18],[".",17],["Elements",18],[">",17]],"d":"Returns a sequence containing the accumulated results of combining the\nelements of the sequence using the given closure.\n\nThis can be seen as applying the reduce function to each element and\nproviding the initial value followed by these results as a sequence.\n\n```\nlet runningTotal = [1, 2, 3, 4].lazy.reductions(+)\nprint(Array(runningTotal))\n\n// prints [1, 3, 6, 10]\n```\n\n- Parameter transform: A closure that combines the previously reduced\n  result and the next element in the receiving sequence.\n- Returns: A sequence of the reduced elements.\n\n- Complexity: O(1)"},{"p":["LazySequenceProtocol","scan(into:_:)"],"f":[["func",12],[" ",17],["scan",7],["<",17],["Result",0],[">(",17],["into",1],[" ",17],["initial",2],[": ",17],["Result",18],[", ",17],["_",1],[" ",17],["transform",2],[": ",17],["@escaping",12],[" (",17],["inout",12],[" ",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Void",18,515],[") -> ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Result",18],[">",17]],"s":[["func",12],[" ",17],["scan",7],["<",17],["Result",0],[">(",17],["into",1],[": ",17],["Result",18],[", (",17],["inout",12],[" ",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Void",18],[") -> ",17],["ExclusiveReductionsSequence",18],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Result",18],[">",17]],"a":{"a":{"d":true,"m":"Use reductions(into:_:) instead."}},"g":[["Result",0,1]]},{"p":["LazySequenceProtocol","scan(_:_:)"],"f":[["func",12],[" ",17],["scan",7],["<",17],["Result",0],[">(",17],["_",1],[" ",17],["initial",2],[": ",17],["Result",18],[", ",17],["_",1],[" ",17],["transform",2],[": ",17],["@escaping",12],[" (",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Result",18],[") -> ",17],["ExclusiveReductionsSequence",18,53],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Result",18],[">",17]],"s":[["func",12],[" ",17],["scan",7],["<",17],["Result",0],[">(",17],["Result",18],[", (",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Result",18],[") -> ",17],["ExclusiveReductionsSequence",18],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Result",18],[">",17]],"a":{"a":{"d":true,"m":"Use reductions(_:_:) instead."}},"g":[["Result",0,1]]},{"p":["LazySequenceProtocol","scan(_:)"],"f":[["func",12],[" ",17],["scan",7],["(",17],["_",1],[" ",17],["transform",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["InclusiveReductionsSequence",18,56],["<",17],["Self",18],[".",17],["Elements",18],[">",17]],"s":[["func",12],[" ",17],["scan",7],["((",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["InclusiveReductionsSequence",18],["<",17],["Self",18],[".",17],["Elements",18],[">",17]],"a":{"a":{"d":true,"m":"Use reductions(_:) instead."}}},{"p":["LazySequenceProtocol","split(maxSplits:omittingEmptySubsequences:whereSeparator:)"],"f":[["func",12],[" ",17],["split",7],["(",17],["maxSplits",1],[": ",17],["Int",18,432],[" = Int.max, ",17],["omittingEmptySubsequences",1],[": ",17],["Bool",18,431],[" = true, ",17],["whereSeparator",1],[" ",17],["isSeparator",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Bool",18,431],[") -> ",17],["SplitSequence",18,0],["<",17],["Self",18],[".",17],["Elements",18],[">",17]],"s":[["func",12],[" ",17],["split",7],["(",17],["maxSplits",1],[": ",17],["Int",18],[", ",17],["omittingEmptySubsequences",1],[": ",17],["Bool",18],[", ",17],["whereSeparator",1],[": (",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Bool",18],[") -> ",17],["SplitSequence",18],["<",17],["Self",18],[".",17],["Elements",18],[">",17]],"d":"Lazily returns the longest possible subsequences of the sequence, in\norder, that don't contain elements satisfying the given predicate.\n\nThe resulting lazy sequence consists of at most `maxSplits + 1`\nsubsequences. Elements that are used to split the sequence are not\nreturned as part of any subsequence (except possibly the last one, in the\ncase where `maxSplits` is less than the number of separators in the\nsequence).\n\nThe following examples show the effects of the `maxSplits` and\n`omittingEmptySubsequences` parameters when lazily splitting a sequence of\nintegers using a closure that matches numbers evenly divisible by 3 or 5.\nThe first use of `split` returns each subsequence that was originally\nseparated by one or more such numbers.\n\n    let numbers = stride(from: 1, through: 16, by: 1)\n    for subsequence in numbers.lazy.split(\n      whereSeparator: { $0 % 3 == 0 || $0 % 5 == 0 }\n    ) {\n      print(subsequence)\n    }\n    /* Prints:\n    [1, 2]\n    [4]\n    [7, 8]\n    [11]\n    [13, 14]\n    [16]\n    */\n\nThe second example passes `1` for the `maxSplits` parameter, so the\noriginal sequence is split just once, into two subsequences.\n\n    for subsequence in numbers.lazy.split(\n      maxSplits: 1,\n      whereSeparator: { $0 % 3 == 0 || $0 % 5 == 0 }\n    ) {\n      print(subsequence)\n    }\n    /* Prints:\n    [1, 2]\n    [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    */\n\nThe final example passes `false` for the `omittingEmptySubsequences`\nparameter, so the sequence of returned subsequences contains empty\nsubsequences where numbers evenly divisible by 3 or 5 were repeated.\n\n    for subsequence in numbers.lazy.split(\n        omittingEmptySubsequences: false,\n        whereSeparator: { $0 % 3 == 0 || $0 % 5 == 0 }\n    ) {\n      print(subsequence)\n    }\n    /* Prints:\n    [1, 2]\n    [4]\n    []\n    [7, 8]\n    []\n    [11]\n    [13, 14]\n    [16]\n    */\n\n- Parameters:\n  - maxSplits: The maximum number of times to split the sequence, or\n    one less than the number of subsequences to return. If\n    `maxSplits + 1` subsequences are returned, the last one is a suffix\n    of the original sequence containing the remaining elements.\n    `maxSplits` must be greater than or equal to zero. The default value\n    is `Int.max`.\n  - omittingEmptySubsequences: If `false`, an empty subsequence is\n    returned in the result for each pair of consecutive elements\n    satisfying the `isSeparator` predicate and for each element at the\n    start or end of the sequence satisfying the `isSeparator`\n    predicate. The default value is `true`.\n  - whereSeparator: A closure that takes an element as an argument and\n    returns a Boolean value indicating whether the sequence should be\n    split at that element.\n- Returns: A lazy sequence of subsequences, split from this sequence's\n  elements.\n\n- Complexity: O(*n*), where *n* is the length of the sequence."},{"p":["LazySequenceProtocol","uniqued(on:)"],"f":[["func",12],[" ",17],["uniqued",7],["<",17],["Subject",0],[">(",17],["on",1],[" ",17],["projection",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Subject",18],[") -> ",17],["UniquedSequence",18,9],["<",17],["Self",18],[", ",17],["Subject",18],["> ",17],["where",12],[" ",17],["Subject",18],[" : ",17],["Hashable",18,346]],"s":[["func",12],[" ",17],["uniqued",7],["<",17],["Subject",0],[">(",17],["on",1],[": (",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Subject",18],[") -> ",17],["UniquedSequence",18],["<",17],["Self",18],[", ",17],["Subject",18],[">",17]],"c":[["Subject",1,"Hashable",346]],"g":[["Subject",0,1]],"d":"Returns a lazy sequence with the unique elements of this sequence (as\ndetermined by the given projection), in the order of the first occurrence\nof each unique element.\n\n- Complexity: O(1)."},{"p":["LazySequenceProtocol","split(separator:maxSplits:omittingEmptySubsequences:)"],"f":[["func",12],[" ",17],["split",7],["(",17],["separator",1],[": ",17],["Self",18],[".",17],["Element",18],[", ",17],["maxSplits",1],[": ",17],["Int",18,432],[" = Int.max, ",17],["omittingEmptySubsequences",1],[": ",17],["Bool",18,431],[" = true) -> ",17],["SplitSequence",18,0],["<",17],["Self",18],[".",17],["Elements",18],[">",17]],"s":[["func",12],[" ",17],["split",7],["(",17],["separator",1],[": ",17],["Self",18],[".",17],["Element",18],[", ",17],["maxSplits",1],[": ",17],["Int",18],[", ",17],["omittingEmptySubsequences",1],[": ",17],["Bool",18],[") -> ",17],["SplitSequence",18],["<",17],["Self",18],[".",17],["Elements",18],[">",17]],"e":[["Self.Element",1,"Equatable",376]],"c":[["Self.Element",1,"Equatable",376]],"d":"Lazily returns the longest possible subsequences of the sequence, in\norder, around elements equal to the given element.\n\nThe resulting lazy sequence consists of at most `maxSplits + 1`\nsubsequences. Elements that are used to split the sequence are not\nreturned as part of any subsequence (except possibly the last one, in the\ncase where `maxSplits` is less than the number of separators in the\nsequence).\n\nThe following examples show the effects of the `maxSplits` and\n`omittingEmptySubsequences` parameters when splitting a sequence of\nintegers at each zero (`0`). The first use of `split` returns each\nsubsequence that was originally separated by one or more zeros.\n\n    let numbers = AnySequence([1, 2, 0, 3, 4, 0, 0, 5])\n    for subsequence in numbers.lazy.split(separator: 0) {\n      print(subsequence)\n    }\n    /* Prints:\n    [1, 2]\n    [3, 4]\n    [5]\n    */\n\nThe second example passes `1` for the `maxSplits` parameter, so the\noriginal sequence is split just once, into two subsequences.\n\n    for subsequence in numbers.lazy.split(\n        separator: 0,\n        maxSplits: 1\n    ) {\n      print(subsequence)\n    }\n    /* Prints:\n    [1, 2]\n    [3, 4, 0, 0, 5]\n    */\n\nThe final example passes `false` for the `omittingEmptySubsequences`\nparameter, so the sequence of returned subsequences contains empty\nsubsequences where zeros were repeated.\n\n    for subsequence in numbers.lazy.split(\n        separator: 0,\n        omittingEmptySubsequences: false\n    ) {\n      print(subsequence)\n    }\n    /* Prints:\n    [1, 2]\n    [3, 4]\n    []\n    [5]\n    */\n\n- Parameters:\n  - separator: The element that should be split upon.\n  - maxSplits: The maximum number of times to split the sequence, or\n    one less than the number of subsequences to return. If\n    `maxSplits + 1` subsequences are returned, the last one is a suffix\n    of the original sequence containing the remaining elements.\n    `maxSplits` must be greater than or equal to zero. The default value\n    is `Int.max`.\n  - omittingEmptySubsequences: If `false`, an empty subsequence is\n    returned in the result for each consecutive pair of `separator`\n    elements in the sequence and for each instance of `separator` at\n    the start or end of the sequence. If `true`, only nonempty\n    subsequences are returned. The default value is `true`.\n- Returns: A lazy sequence of subsequences, split from this sequence's\n  elements.\n\n- Complexity: O(*n*), where *n* is the length of the sequence."},{"p":["LazySequenceProtocol","joined(by:)"],"f":[["func",12],[" ",17],["joined",7],["<",17],["Separator",0],[">(",17],["by",1],[" ",17],["separator",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Separator",18],[") -> ",17],["JoinedByClosureSequence",18,45],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Separator",18],["> ",17],["where",12],[" ",17],["Separator",18],[" : ",17],["Sequence",18,379],[", ",17],["Separator",18],[".",17],["Element",18],[" == ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["joined",7],["<",17],["Separator",0],[">(",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Separator",18],[") -> ",17],["JoinedByClosureSequence",18],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Separator",18],[">",17]],"e":[["Self.Element",1,"Sequence",379]],"c":[["Separator",1,"Sequence",379],["Self.Element",1,"Sequence",379],["Separator.Element",2,"Self.Element.Element"]],"g":[["Separator",0,1]],"d":"Returns the concatenation of the elements in this sequence of sequences,\ninserting the separator produced by the closure between each sequence."},{"p":["LazySequenceProtocol","joined(by:)"],"f":[["func",12],[" ",17],["joined",7],["(",17],["by",1],[" ",17],["separator",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[") -> ",17],["JoinedByClosureSequence",18,45],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["CollectionOfOne",18,499],["<",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[">>",17]],"s":[["func",12],[" ",17],["joined",7],["(",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[") -> ",17],["JoinedByClosureSequence",18],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["CollectionOfOne",18],["<",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[">>",17]],"e":[["Self.Element",1,"Sequence",379]],"c":[["Self.Element",1,"Sequence",379]],"d":"Returns the concatenation of the elements in this sequence of sequences,\ninserting the separator produced by the closure between each sequence."},{"p":["LazySequenceProtocol","joined(by:)"],"f":[["func",12],[" ",17],["joined",7],["<",17],["Separator",0],[">(",17],["by",1],[" ",17],["separator",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Separator",18],[") -> ",17],["JoinedByClosureCollection",18,49],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Separator",18],["> ",17],["where",12],[" ",17],["Separator",18],[" : ",17],["Collection",18,435],[", ",17],["Separator",18],[".",17],["Element",18],[" == ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["joined",7],["<",17],["Separator",0],[">(",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Separator",18],[") -> ",17],["JoinedByClosureCollection",18],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Separator",18],[">",17]],"e":[["Self.Element",1,"Collection",435],["Self.Elements",1,"Collection",435]],"c":[["Separator",1,"Collection",435],["Self.Element",1,"Collection",435],["Self.Elements",1,"Collection",435],["Separator.Element",2,"Self.Element.Element"]],"g":[["Separator",0,1]],"d":"Returns the concatenation of the elements in this collection of\ncollections, inserting the separator produced by the closure between each\nsequence."},{"p":["LazySequenceProtocol","joined(by:)"],"f":[["func",12],[" ",17],["joined",7],["(",17],["by",1],[" ",17],["separator",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[") -> ",17],["JoinedByClosureCollection",18,49],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["CollectionOfOne",18,499],["<",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[">>",17]],"s":[["func",12],[" ",17],["joined",7],["(",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[") -> ",17],["JoinedByClosureCollection",18],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["CollectionOfOne",18],["<",17],["Self",18],[".",17],["Element",18],[".",17],["Element",18],[">>",17]],"e":[["Self.Element",1,"Collection",435],["Self.Elements",1,"Collection",435]],"c":[["Self.Element",1,"Collection",435],["Self.Elements",1,"Collection",435]],"d":"Returns the concatenation of the elements in this collection of\ncollections, inserting the separator produced by the closure between each\nsequence."},{"p":["LazySequenceProtocol","split(separator:maxSplits:omittingEmptySubsequences:)"],"f":[["func",12],[" ",17],["split",7],["(",17],["separator",1],[": ",17],["Self",18],[".",17],["Element",18],[", ",17],["maxSplits",1],[": ",17],["Int",18,432],[" = Int.max, ",17],["omittingEmptySubsequences",1],[": ",17],["Bool",18,431],[" = true) -> ",17],["SplitCollection",18,7],["<",17],["Self",18],[".",17],["Elements",18],[">",17]],"s":[["func",12],[" ",17],["split",7],["(",17],["separator",1],[": ",17],["Self",18],[".",17],["Element",18],[", ",17],["maxSplits",1],[": ",17],["Int",18],[", ",17],["omittingEmptySubsequences",1],[": ",17],["Bool",18],[") -> ",17],["SplitCollection",18],["<",17],["Self",18],[".",17],["Elements",18],[">",17]],"e":[["Self",1,"Collection",435],["Self.Element",1,"Equatable",376],["Self.Elements",1,"Collection",435]],"c":[["Self",1,"Collection",435],["Self.Element",1,"Equatable",376],["Self.Elements",1,"Collection",435]],"d":"Lazily returns the longest possible subsequences of the collection, in\norder, around elements equal to the given element.\n\nThe resulting lazy collection consists of at most `maxSplits + 1`\nsubsequences. Elements that are used to split the collection are not\nreturned as part of any subsequence (except possibly the last one, in the\ncase where `maxSplits` is less than the number of separators in the\ncollection).\n\nThe following examples show the effects of the `maxSplits` and\n`omittingEmptySubsequences` parameters when splitting a string at each\nspace character (\" \"). The first use of `split` returns each word that\nwas originally separated by one or more spaces.\n\n    let line = \"BLANCHE:   I don't want realism. I want magic!\"\n    for spaceless in line.lazy.split(separator: \" \") {\n      print(spaceless)\n    }\n    // Prints\n    // BLANCHE:\n    // I\n    // don't\n    // want\n    // realism.\n    // I\n    // want\n    // magic!\n\nThe second example passes `1` for the `maxSplits` parameter, so the\noriginal string is split just once, into two new strings.\n\n    for spaceless in line.lazy.split(separator: \" \", maxSplits: 1) {\n      print(spaceless)\n    }\n    // Prints\n    // BLANCHE:\n    // I don't want realism. I want magic!\n\nThe final example passes `false` for the `omittingEmptySubsequences`\nparameter, so the returned array contains empty strings where spaces\nwere repeated.\n\n    for spaceless in line.lazy.split(\n      separator: \" \",\n      omittingEmptySubsequences: false\n    ) {\n      print(spaceless)\n    }\n    // Prints\n    // BLANCHE:\n    //\n    //\n    // I\n    // don't\n    // want\n    // realism.\n    // I\n    // want\n    // magic!\n\n- Parameters:\n  - separator: The element that should be split upon.\n  - maxSplits: The maximum number of times to split the collection, or\n    one less than the number of subsequences to return. If\n    `maxSplits + 1` subsequences are returned, the last one is a suffix\n    of the original collection containing the remaining elements.\n    `maxSplits` must be greater than or equal to zero. The default value\n    is `Int.max`.\n  - omittingEmptySubsequences: If `false`, an empty subsequence is\n    returned in the result for each consecutive pair of `separator`\n    elements in the collection and for each instance of `separator` at\n    the start or end of the collection. If `true`, only nonempty\n    subsequences are returned. The default value is `true`.\n- Returns: A lazy collection of subsequences split from this collection's\n  elements.\n\n- Complexity: O(*n*), where *n* is the length of the collection."},{"p":["LazySequenceProtocol","split(maxSplits:omittingEmptySubsequences:whereSeparator:)"],"f":[["func",12],[" ",17],["split",7],["(",17],["maxSplits",1],[": ",17],["Int",18,432],[" = Int.max, ",17],["omittingEmptySubsequences",1],[": ",17],["Bool",18,431],[" = true, ",17],["whereSeparator",1],[" ",17],["isSeparator",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Bool",18,431],[") -> ",17],["SplitCollection",18,7],["<",17],["Self",18],[".",17],["Elements",18],[">",17]],"s":[["func",12],[" ",17],["split",7],["(",17],["maxSplits",1],[": ",17],["Int",18],[", ",17],["omittingEmptySubsequences",1],[": ",17],["Bool",18],[", ",17],["whereSeparator",1],[": (",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Bool",18],[") -> ",17],["SplitCollection",18],["<",17],["Self",18],[".",17],["Elements",18],[">",17]],"e":[["Self",1,"Collection",435],["Self.Elements",1,"Collection",435]],"c":[["Self",1,"Collection",435],["Self.Elements",1,"Collection",435]],"d":"Lazily returns the longest possible subsequences of the collection, in\norder, that don't contain elements satisfying the given predicate.\n\nThe resulting lazy collection consists of at most `maxSplits + 1`\nsubsequences. Elements that are used to split the collection are not\nreturned as part of any subsequence (except possibly the last one, in the\ncase where `maxSplits` is less than the number of separators in the\ncollection).\n\nThe following examples show the effects of the `maxSplits` and\n`omittingEmptySubsequences` parameters when lazily splitting a string\nusing a closure that matches spaces. The first use of `split` returns each\nword that was originally separated by one or more spaces.\n\n    let line = \"BLANCHE:   I don't want realism. I want magic!\"\n    for spaceless in line.lazy.split(whereSeparator: { $0 == \" \" }) {\n      print(spaceless)\n    }\n    // Prints\n    // BLANCHE:\n    // I\n    // don't\n    // want\n    // realism.\n    // I\n    // want\n    // magic!\n\nThe second example passes `1` for the `maxSplits` parameter, so the\noriginal string is split just once, into two new strings.\n\n    for spaceless in line.lazy.split(\n      maxSplits: 1,\n      whereSeparator: { $0 == \" \" }\n    ) {\n      print(spaceless)\n    }\n    // Prints\n    // BLANCHE:\n    // I don't want realism. I want magic!\n\nThe final example passes `false` for the `omittingEmptySubsequences`\nparameter, so the returned array contains empty strings where spaces\nwere repeated.\n\n    for spaceless in line.lazy.split(\n      omittingEmptySubsequences: false,\n      whereSeparator: { $0 == \" \" }\n    ) {\n      print(spaceless)\n    }\n    // Prints\n    // BLANCHE:\n    //\n    //\n    // I\n    // don't\n    // want\n    // realism.\n    // I\n    // want\n    // magic!\n\n- Parameters:\n  - maxSplits: The maximum number of times to split the collection, or\n    one less than the number of subsequences to return. If\n    `maxSplits + 1` subsequences are returned, the last one is a suffix\n    of the original collection containing the remaining elements.\n    `maxSplits` must be greater than or equal to zero. The default value\n    is `Int.max`.\n  - omittingEmptySubsequences: If `false`, an empty subsequence is\n    returned in the result for each pair of consecutive elements\n    satisfying the `isSeparator` predicate and for each element at the\n    start or end of the collection satisfying the `isSeparator`\n    predicate. The default value is `true`.\n  - whereSeparator: A closure that takes an element as an argument and\n    returns a Boolean value indicating whether the collection should be\n    split at that element.\n- Returns: A lazy collection of subsequences, split from this collection's\n  elements.\n\n- Complexity: O(*n*), where *n* is the length of the collection."},{"p":["LazySequenceProtocol","chunked(by:)"],"f":[["func",12],[" ",17],["chunked",7],["(",17],["by",1],[" ",17],["belongInSameGroup",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Bool",18,431],[") -> ",17],["ChunkedByCollection",18,25],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Self",18],[".",17],["Element",18],[">",17]],"s":[["func",12],[" ",17],["chunked",7],["(",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Bool",18],[") -> ",17],["ChunkedByCollection",18],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Self",18],[".",17],["Element",18],[">",17]],"e":[["Self",1,"Collection",435],["Self.Elements",1,"Collection",435]],"c":[["Self",1,"Collection",435],["Self.Elements",1,"Collection",435]],"d":"Returns a lazy collection of subsequences of this collection, chunked by\nthe given predicate.\n\n- Complexity: O(*n*), because the start index is pre-computed."},{"p":["LazySequenceProtocol","chunked(on:)"],"f":[["func",12],[" ",17],["chunked",7],["<",17],["Subject",0],[">(",17],["on",1],[" ",17],["projection",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Subject",18],[") -> ",17],["ChunkedOnCollection",18,27],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Subject",18],["> ",17],["where",12],[" ",17],["Subject",18],[" : ",17],["Equatable",18,376]],"s":[["func",12],[" ",17],["chunked",7],["<",17],["Subject",0],[">(",17],["on",1],[": (",17],["Self",18],[".",17],["Element",18],[") -> ",17],["Subject",18],[") -> ",17],["ChunkedOnCollection",18],["<",17],["Self",18],[".",17],["Elements",18],[", ",17],["Subject",18],[">",17]],"e":[["Self",1,"Collection",435],["Self.Elements",1,"Collection",435]],"c":[["Self",1,"Collection",435],["Subject",1,"Equatable",376],["Self.Elements",1,"Collection",435]],"g":[["Subject",0,1]],"d":"Returns a lazy collection of subsequences of this collection, chunked by\ngrouping elements that project to the same value.\n\n- Complexity: O(*n*), because the start index is pre-computed."}],"edges":{"conformer":[0,379,[["Base",1,"Sequence",379]],0,500,[["Base",1,"Sequence",379]],1,496,[["Base",1,"Sequence",379]],2,348,[["Base1",1,"BidirectionalCollection",348],["Base2",1,"BidirectionalCollection",348],["Base1.Element",2,"Base2.Element"]],2,379,[["Base1",1,"Sequence",379],["Base2",1,"Sequence",379],["Base1.Element",2,"Base2.Element"]],2,433,[["Base1",1,"RandomAccessCollection",433],["Base2",1,"RandomAccessCollection",433],["Base1.Element",2,"Base2.Element"]],2,435,[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Element",2,"Base2.Element"]],3,496,[],4,365,[],4,376,[],5,379,[["Base",1,"Collection",435]],5,500,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],6,496,[],7,379,[["Base",1,"Collection",435]],7,435,[["Base",1,"Collection",435]],7,500,[["Base",1,"Collection",435]],7,512,[["Base",1,"Collection",435]],8,346,[["Base",1,"Collection",435]],8,365,[],8,376,[],9,379,[["Base",1,"Sequence",379],["Subject",1,"Hashable",346]],9,500,[["Base",1,"LazySequenceProtocol",500],["Subject",1,"Hashable",346]],10,496,[],11,379,[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],11,500,[["Base",1,"LazySequenceProtocol",500],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],12,496,[],13,348,[["Base1",1,"BidirectionalCollection",348],["Base2",1,"BidirectionalCollection",348]],13,379,[["Base1",1,"Sequence",379],["Base2",1,"Collection",435]],13,433,[["Base1",1,"RandomAccessCollection",433],["Base2",1,"RandomAccessCollection",433]],13,435,[["Base1",1,"Collection",435],["Base2",1,"Collection",435]],14,496,[],15,346,[["Base1",1,"Collection",435],["Base2",1,"Collection",435],["Base1.Index",1,"Hashable",346],["Base2.Index",1,"Hashable",346]],15,365,[],15,376,[],16,379,[["Base",1,"Sequence",379]],16,500,[["Base",1,"LazySequenceProtocol",500]],17,496,[],18,379,[],18,500,[["Base",1,"LazySequenceProtocol",500],["Base.Element",2,"Element?",495]],19,496,[],20,348,[["Base",1,"BidirectionalCollection",348]],20,379,[["Base",1,"Collection",435]],20,433,[["Base",1,"RandomAccessCollection",433]],20,435,[["Base",1,"Collection",435]],20,500,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],20,512,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],21,348,[["Base",1,"BidirectionalCollection",348],["Separator",1,"BidirectionalCollection",348],["Base.Element",1,"BidirectionalCollection",348],["Separator.Element",2,"Base.Element.Element"]],21,379,[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],21,435,[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],21,500,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],21,512,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],22,365,[],22,376,[],23,348,[["Base",1,"RandomAccessCollection",433]],23,379,[["Base",1,"Collection",435]],23,433,[["Base",1,"RandomAccessCollection",433]],23,435,[["Base",1,"Collection",435]],23,500,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],23,512,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],24,346,[["Base",1,"Collection",435],["Base.Index",1,"Hashable",346]],24,365,[],24,376,[],25,348,[["Base",1,"BidirectionalCollection",348]],25,379,[["Base",1,"Collection",435]],25,435,[["Base",1,"Collection",435]],25,500,[["Base",1,"Collection",435]],25,512,[["Base",1,"Collection",435]],26,346,[["Base",1,"Collection",435],["Base.Index",1,"Hashable",346]],26,365,[],26,376,[],27,348,[["Base",1,"BidirectionalCollection",348],["Subject",1,"Equatable",376]],27,379,[["Base",1,"Collection",435],["Subject",1,"Equatable",376]],27,435,[["Base",1,"Collection",435],["Subject",1,"Equatable",376]],27,500,[["Base",1,"Collection",435],["Subject",1,"Equatable",376]],27,512,[["Base",1,"Collection",435],["Subject",1,"Equatable",376]],28,348,[["Base",1,"BidirectionalCollection",348],["Base.Element",2,"Element?",495]],28,379,[],28,435,[],28,500,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500],["Base.Element",2,"Element?",495]],28,512,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500],["Base.Element",2,"Element?",495]],29,346,[["Base",1,"Collection",435],["Base.Element",2,"Element?",495],["Base.Index",1,"Hashable",346]],29,365,[["Base",1,"Collection",435],["Base.Element",2,"Element?",495]],29,376,[["Base",1,"Collection",435],["Base.Element",2,"Element?",495]],30,379,[["Base",1,"Collection",435]],30,500,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],31,496,[],32,348,[["Base",1,"BidirectionalCollection",348]],32,379,[["Base",1,"Sequence",379]],32,433,[["Base",1,"RandomAccessCollection",433]],32,435,[["Base",1,"Collection",435]],32,500,[["Base",1,"LazySequenceProtocol",500]],32,512,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],33,496,[],34,365,[],34,376,[],35,379,[["Base",1,"Collection",435]],35,500,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],36,496,[],37,379,[["Base",1,"Sequence",379]],37,500,[["Base",1,"LazySequenceProtocol",500]],38,496,[["Base",1,"Sequence",379]],39,348,[["Base",1,"BidirectionalCollection",348]],39,379,[["Base",1,"Collection",435]],39,433,[["Base",1,"RandomAccessCollection",433]],39,435,[["Base",1,"Collection",435]],39,500,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],39,512,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],40,365,[],40,376,[],41,348,[["Base",1,"BidirectionalCollection",348]],41,379,[["Base",1,"Collection",435]],41,433,[["Base",1,"RandomAccessCollection",433]],41,435,[["Base",1,"Collection",435]],41,500,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],41,512,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],42,346,[["Base",1,"Collection",435],["Base.Index",1,"Hashable",346]],42,365,[],42,376,[],43,348,[["Base",1,"RandomAccessCollection",433]],43,379,[["Base",1,"Collection",435]],43,433,[["Base",1,"RandomAccessCollection",433]],43,435,[["Base",1,"Collection",435]],43,500,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],43,512,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],44,346,[["Base",1,"Collection",435],["Base.Index",1,"Hashable",346]],44,365,[["Base",1,"Collection",435]],44,376,[["Base",1,"Collection",435]],45,379,[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],45,500,[["Base",1,"Sequence",379],["Separator",1,"Sequence",379],["Base.Element",1,"Sequence",379],["Separator.Element",2,"Base.Element.Element"]],46,496,[],47,348,[["Base",1,"BidirectionalCollection",348]],47,379,[["Base",1,"Collection",435]],47,433,[["Base",1,"RandomAccessCollection",433]],47,435,[["Base",1,"Collection",435]],47,500,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],47,512,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],48,346,[["Base",1,"Collection",435],["Base.Index",1,"Hashable",346]],48,365,[],48,376,[],49,348,[["Base",1,"BidirectionalCollection",348],["Separator",1,"BidirectionalCollection",348],["Base.Element",1,"BidirectionalCollection",348],["Separator.Element",2,"Base.Element.Element"]],49,379,[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],49,435,[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],49,500,[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],49,512,[["Base",1,"Collection",435],["Separator",1,"Collection",435],["Base.Element",1,"Collection",435],["Separator.Element",2,"Base.Element.Element"]],50,365,[],50,376,[],51,379,[["Base",1,"Collection",435]],51,500,[["Base",1,"Collection",435],["Base",1,"LazySequenceProtocol",500]],52,496,[],53,379,[["Base",1,"Sequence",379]],53,435,[["Base",1,"Collection",435]],53,500,[["Base",1,"Sequence",379]],53,512,[["Base",1,"Collection",435]],54,496,[],55,346,[["Base",1,"Collection",435],["Base.Index",1,"Hashable",346]],55,365,[],55,376,[],56,379,[["Base",1,"Sequence",379]],56,435,[["Base",1,"Collection",435]],56,500,[["Base",1,"Sequence",379]],56,512,[["Base",1,"Collection",435]],57,496,[],58,346,[["Base",1,"Collection",435],["Base.Index",1,"Hashable",346]],58,365,[],58,376,[]],"feature":[259,2,259,13,259,20,259,21,259,23,259,25,259,27,259,28,259,32,259,39,259,41,259,43,259,47,259,49,260,2,260,13,260,20,260,21,260,23,260,25,260,27,260,28,260,32,260,39,260,41,260,43,260,47,260,49,261,2,261,13,261,20,261,21,261,23,261,25,261,27,261,28,261,32,261,39,261,41,261,43,261,47,261,49,273,0,273,2,273,5,273,7,273,9,273,11,273,13,273,16,273,18,273,20,273,21,273,23,273,25,273,27,273,28,273,30,273,32,273,35,273,37,273,39,273,41,273,43,273,45,273,47,273,49,273,51,273,53,273,56,274,2,274,5,274,9,274,11,274,13,274,16,274,18,274,20,274,21,274,23,274,28,274,30,274,32,274,35,274,37,274,39,274,41,274,43,274,47,274,51,275,0,275,2,275,5,275,7,275,9,275,11,275,13,275,16,275,18,275,20,275,21,275,23,275,25,275,27,275,28,275,30,275,32,275,35,275,37,275,39,275,41,275,43,275,45,275,47,275,49,275,51,275,53,275,56,276,0,276,2,276,5,276,7,276,9,276,11,276,13,276,16,276,18,276,20,276,21,276,23,276,25,276,27,276,28,276,30,276,32,276,35,276,37,276,39,276,41,276,43,276,45,276,47,276,49,276,51,276,53,276,56,277,0,277,2,277,5,277,7,277,9,277,11,277,13,277,16,277,18,277,20,277,21,277,23,277,25,277,27,277,28,277,30,277,32,277,35,277,37,277,39,277,41,277,43,277,45,277,47,277,49,277,51,277,53,277,56,278,0,278,2,278,5,278,7,278,9,278,11,278,13,278,16,278,18,278,20,278,21,278,23,278,25,278,27,278,28,278,30,278,32,278,35,278,37,278,39,278,41,278,43,278,45,278,47,278,49,278,51,278,53,278,56,279,0,279,2,279,5,279,9,279,11,279,13,279,16,279,18,279,30,279,32,279,35,279,37,279,45,279,51,279,53,279,56,280,0,280,2,280,5,280,9,280,11,280,13,280,16,280,18,280,30,280,32,280,35,280,37,280,45,280,51,280,53,280,56,281,0,281,2,281,5,281,9,281,11,281,13,281,16,281,18,281,30,281,32,281,35,281,37,281,45,281,51,281,53,281,56,282,0,282,2,282,5,282,9,282,11,282,13,282,16,282,18,282,30,282,32,282,35,282,37,282,45,282,51,282,53,282,56,283,0,283,2,283,5,283,7,283,9,283,11,283,13,283,16,283,18,283,20,283,21,283,23,283,25,283,27,283,28,283,30,283,32,283,35,283,37,283,39,283,41,283,43,283,45,283,47,283,49,283,51,283,53,283,56,284,2,284,5,284,9,284,11,284,13,284,16,284,18,284,20,284,21,284,23,284,28,284,30,284,32,284,35,284,37,284,39,284,41,284,43,284,47,284,51,285,0,285,2,285,5,285,7,285,9,285,11,285,13,285,16,285,18,285,20,285,21,285,23,285,25,285,27,285,28,285,30,285,32,285,35,285,37,285,39,285,41,285,43,285,45,285,47,285,49,285,51,285,53,285,56,286,0,286,2,286,5,286,7,286,9,286,11,286,13,286,16,286,18,286,20,286,21,286,23,286,25,286,27,286,28,286,30,286,32,286,35,286,37,286,39,286,41,286,43,286,45,286,47,286,49,286,51,286,53,286,56,287,0,287,2,287,5,287,9,287,11,287,13,287,18,287,30,287,32,287,35,287,37,287,45,287,51,287,53,287,56,288,0,288,2,288,5,288,7,288,9,288,11,288,13,288,16,288,18,288,20,288,21,288,23,288,25,288,27,288,28,288,30,288,32,288,35,288,37,288,39,288,41,288,43,288,45,288,47,288,49,288,51,288,53,288,56,289,0,289,2,289,5,289,7,289,9,289,11,289,13,289,16,289,18,289,20,289,21,289,23,289,25,289,27,289,28,289,30,289,32,289,35,289,37,289,39,289,41,289,43,289,45,289,47,289,49,289,51,289,53,289,56,290,0,290,2,290,5,290,7,290,9,290,11,290,16,290,18,290,21,290,23,290,25,290,28,290,30,290,32,290,35,290,39,290,43,290,45,290,47,290,49,290,51,290,53,290,56,291,2,291,5,291,7,291,9,291,11,291,16,291,18,291,21,291,23,291,25,291,28,291,32,291,39,291,43,291,45,291,47,291,49,291,53,291,56,292,2,292,5,292,7,292,9,292,11,292,16,292,18,292,21,292,23,292,25,292,28,292,32,292,39,292,43,292,45,292,47,292,49,292,53,292,56,293,2,293,5,293,7,293,9,293,11,293,16,293,18,293,21,293,23,293,25,293,28,293,32,293,39,293,43,293,45,293,47,293,49,293,53,293,56,294,2,294,5,294,9,294,11,294,16,294,18,294,21,294,23,294,28,294,30,294,32,294,35,294,39,294,45,294,49,294,51,294,53,294,56,295,2,295,5,295,9,295,11,295,16,295,18,295,21,295,23,295,28,295,30,295,32,295,35,295,39,295,45,295,49,295,51,295,53,295,56,296,2,296,5,296,9,296,11,296,16,296,18,296,21,296,23,296,28,296,30,296,32,296,35,296,39,296,45,296,49,296,51,296,53,296,56,297,2,297,5,297,9,297,11,297,16,297,18,297,21,297,23,297,28,297,30,297,32,297,35,297,39,297,45,297,49,297,51,297,53,297,56,299,2,299,7,299,13,299,20,299,21,299,23,299,25,299,27,299,28,299,32,299,39,299,41,299,43,299,47,299,49,299,53,299,56,300,2,300,13,300,32,300,53,300,56,301,2,301,7,301,13,301,20,301,21,301,23,301,25,301,27,301,28,301,32,301,39,301,41,301,43,301,47,301,49,301,53,301,56,302,2,302,13,302,32,302,53,302,56,303,2,303,7,303,13,303,20,303,21,303,23,303,25,303,27,303,28,303,32,303,39,303,41,303,43,303,47,303,49,303,53,303,56,304,7,304,20,304,21,304,23,304,25,304,27,304,28,304,39,304,41,304,43,304,47,304,49,305,7,305,20,305,21,305,23,305,25,305,27,305,28,305,39,305,41,305,43,305,47,305,49,306,2,306,7,306,13,306,20,306,21,306,23,306,25,306,27,306,28,306,32,306,39,306,41,306,43,306,47,306,49,306,53,306,56,307,2,307,7,307,13,307,20,307,21,307,23,307,25,307,27,307,28,307,32,307,39,307,41,307,43,307,47,307,49,307,53,307,56,308,2,308,7,308,13,308,20,308,21,308,23,308,25,308,27,308,28,308,32,308,39,308,41,308,43,308,47,308,49,308,53,308,56,309,2,309,7,309,13,309,20,309,21,309,23,309,25,309,27,309,28,309,32,309,39,309,41,309,43,309,47,309,49,309,53,309,56,310,7,310,20,310,21,310,23,310,25,310,27,310,28,310,39,310,41,310,43,310,47,310,49,311,7,311,20,311,21,311,23,311,25,311,27,311,28,311,39,311,41,311,43,311,47,311,49,312,2,312,7,312,13,312,20,312,21,312,23,312,25,312,27,312,28,312,32,312,39,312,41,312,43,312,47,312,49,312,53,312,56,313,2,313,7,313,13,313,20,313,21,313,23,313,25,313,27,313,28,313,32,313,39,313,41,313,43,313,47,313,49,313,53,313,56,314,2,314,7,314,13,314,20,314,21,314,23,314,25,314,27,314,28,314,32,314,39,314,41,314,43,314,47,314,49,314,53,314,56,315,2,315,13,315,20,315,21,315,23,315,28,315,32,315,39,315,41,315,43,315,47,315,53,315,56,316,2,316,7,316,13,316,20,316,21,316,23,316,25,316,27,316,28,316,32,316,39,316,41,316,43,316,47,316,49,316,53,316,56,317,2,317,7,317,13,317,20,317,21,317,23,317,25,317,27,317,28,317,32,317,39,317,41,317,43,317,47,317,49,317,53,317,56,318,2,318,7,318,13,318,20,318,21,318,23,318,25,318,27,318,28,318,32,318,39,318,41,318,43,318,47,318,49,318,53,318,56,319,7,319,20,319,21,319,25,319,27,319,28,319,39,319,41,319,43,319,47,319,49,320,2,320,7,320,13,320,20,320,21,320,23,320,25,320,27,320,28,320,32,320,39,320,41,320,43,320,47,320,49,320,53,320,56,321,2,321,7,321,21,321,23,321,25,321,28,321,32,321,39,321,43,321,47,321,49,321,53,321,56,322,2,322,7,322,21,322,23,322,25,322,28,322,32,322,39,322,43,322,47,322,49,322,53,322,56,323,2,323,7,323,21,323,23,323,25,323,28,323,32,323,39,323,43,323,47,323,49,323,53,323,56,324,2,324,7,324,21,324,23,324,25,324,28,324,32,324,39,324,43,324,47,324,49,324,53,324,56,325,2,325,21,325,23,325,28,325,32,325,39,325,49,325,53,325,56,326,2,326,21,326,23,326,28,326,32,326,39,326,43,326,47,326,49,326,53,326,56,328,0,328,5,328,7,328,9,328,11,328,16,328,18,328,20,328,21,328,23,328,25,328,27,328,28,328,30,328,32,328,35,328,37,328,39,328,41,328,43,328,45,328,47,328,49,328,51,328,53,328,56,329,0,329,5,329,7,329,9,329,11,329,16,329,18,329,20,329,21,329,23,329,25,329,27,329,28,329,30,329,32,329,35,329,37,329,39,329,41,329,43,329,45,329,47,329,49,329,51,329,53,329,56,330,0,330,7,330,25,330,27,330,45,330,49,330,53,330,56,331,0,331,5,331,7,331,9,331,11,331,16,331,18,331,20,331,21,331,23,331,25,331,27,331,28,331,30,331,32,331,35,331,37,331,39,331,41,331,43,331,45,331,47,331,49,331,51,331,53,331,56,332,0,332,5,332,7,332,9,332,11,332,16,332,18,332,20,332,21,332,23,332,25,332,27,332,28,332,30,332,32,332,35,332,37,332,39,332,41,332,43,332,45,332,47,332,49,332,51,332,53,332,56,333,0,333,7,333,25,333,27,333,45,333,49,333,53,333,56,334,0,334,45,334,53,334,56,335,0,335,5,335,7,335,9,335,11,335,16,335,18,335,20,335,21,335,23,335,25,335,27,335,28,335,30,335,32,335,35,335,37,335,39,335,41,335,43,335,45,335,47,335,49,335,51,335,53,335,56,336,0,336,5,336,7,336,9,336,11,336,16,336,18,336,21,336,23,336,25,336,28,336,30,336,32,336,35,336,39,336,43,336,45,336,47,336,49,336,51,336,53,336,56,337,5,337,9,337,11,337,16,337,18,337,21,337,23,337,28,337,30,337,32,337,35,337,39,337,45,337,49,337,51,337,53,337,56,338,0,338,5,338,9,338,11,338,16,338,18,338,21,338,23,338,28,338,30,338,32,338,35,338,39,338,45,338,49,338,51,338,53,338,56,339,21,339,23,339,28,339,32,339,39,339,49,339,53,339,56,340,7,340,21,340,23,340,25,340,28,340,32,340,39,340,49,340,53,340,56,341,7,341,21,341,23,341,25,341,28,341,32,341,39,341,43,341,47,341,49,341,53,341,56,342,7,342,25,342,27,342,49,343,7,343,25,343,27,343,32,343,49,343,53,343,56,344,7,344,20,344,21,344,23,344,25,344,27,344,28,344,32,344,39,344,41,344,43,344,47,344,49,344,53,344,56,349,2,349,13,349,20,349,21,349,23,349,25,349,27,349,28,349,32,349,39,349,41,349,43,349,47,349,49,350,2,350,13,350,20,350,21,350,23,350,25,350,27,350,28,350,32,350,39,350,41,350,43,350,47,350,49,351,2,351,21,351,23,351,25,351,28,351,32,351,39,351,43,351,47,351,49,354,2,354,13,354,20,354,21,354,23,354,25,354,27,354,28,354,32,354,39,354,41,354,43,354,47,354,49,355,2,355,13,355,20,355,21,355,23,355,25,355,27,355,28,355,32,355,39,355,41,355,43,355,47,355,49,356,2,356,13,356,20,356,21,356,23,356,25,356,27,356,28,356,32,356,39,356,41,356,43,356,47,356,49,357,2,357,13,357,32,358,2,358,13,358,32,359,2,359,13,359,32,360,2,360,13,360,20,360,21,360,23,360,25,360,27,360,28,360,32,360,39,360,41,360,43,360,47,360,49,361,2,361,13,361,20,361,21,361,23,361,25,361,27,361,28,361,32,361,39,361,41,361,43,361,47,361,49,362,2,362,21,362,23,362,25,362,28,362,32,362,39,362,43,362,47,362,49,363,2,363,21,363,23,363,25,363,28,363,32,363,39,363,43,363,47,363,49,364,2,364,21,364,23,364,25,364,28,364,32,364,39,364,43,364,47,364,49,367,4,367,8,367,15,367,22,367,24,367,26,367,29,367,34,367,40,367,42,367,44,367,48,367,50,367,55,367,58,368,4,368,8,368,15,368,22,368,24,368,26,368,29,368,34,368,40,368,42,368,44,368,48,368,50,368,55,368,58,369,4,369,8,369,15,369,22,369,24,369,26,369,29,369,34,369,40,369,42,369,44,369,48,369,50,369,55,369,58,370,4,370,8,370,15,370,22,370,24,370,26,370,29,370,34,370,40,370,42,370,44,370,48,370,50,370,55,370,58,371,4,371,8,371,15,371,22,371,24,371,26,371,29,371,34,371,40,371,42,371,44,371,48,371,50,371,55,371,58,372,4,372,8,372,15,372,22,372,24,372,26,372,29,372,34,372,40,372,42,372,44,372,48,372,50,372,55,372,58,373,4,373,8,373,15,373,22,373,24,373,26,373,29,373,34,373,40,373,42,373,44,373,48,373,50,373,55,373,58,374,4,374,8,374,15,374,22,374,24,374,26,374,29,374,34,374,40,374,42,374,44,374,48,374,50,374,55,374,58,378,4,378,8,378,15,378,22,378,24,378,26,378,29,378,34,378,40,378,42,378,44,378,48,378,50,378,55,378,58,380,0,380,2,380,5,380,7,380,9,380,11,380,13,380,16,380,18,380,20,380,21,380,23,380,25,380,27,380,28,380,30,380,32,380,35,380,37,380,39,380,41,380,43,380,45,380,47,380,49,380,51,380,53,380,56,381,0,381,2,381,5,381,7,381,9,381,11,381,13,381,16,381,18,381,20,381,21,381,23,381,25,381,27,381,28,381,30,381,32,381,35,381,37,381,39,381,41,381,43,381,45,381,47,381,49,381,51,381,53,381,56,382,0,382,2,382,5,382,7,382,9,382,11,382,13,382,16,382,18,382,20,382,21,382,23,382,25,382,27,382,28,382,30,382,32,382,35,382,37,382,39,382,41,382,43,382,45,382,47,382,49,382,51,382,53,382,56,388,0,388,2,388,5,388,7,388,9,388,11,388,13,388,16,388,18,388,20,388,21,388,23,388,25,388,27,388,28,388,30,388,32,388,35,388,37,388,39,388,41,388,43,388,45,388,47,388,49,388,51,388,53,388,56,389,0,389,2,389,5,389,7,389,9,389,11,389,13,389,16,389,18,389,20,389,21,389,23,389,25,389,27,389,28,389,30,389,32,389,35,389,37,389,39,389,41,389,43,389,45,389,47,389,49,389,51,389,53,389,56,390,0,390,2,390,5,390,7,390,9,390,11,390,13,390,16,390,18,390,20,390,21,390,23,390,25,390,27,390,28,390,30,390,32,390,35,390,37,390,39,390,41,390,43,390,45,390,47,390,49,390,51,390,53,390,56,391,0,391,2,391,5,391,7,391,9,391,11,391,13,391,16,391,18,391,20,391,21,391,23,391,25,391,27,391,28,391,30,391,32,391,35,391,37,391,39,391,41,391,43,391,45,391,47,391,49,391,51,391,53,391,56,392,0,392,2,392,5,392,7,392,9,392,11,392,13,392,16,392,18,392,20,392,21,392,23,392,25,392,27,392,28,392,30,392,32,392,35,392,37,392,39,392,41,392,43,392,45,392,47,392,49,392,51,392,53,392,56,393,0,393,2,393,5,393,7,393,9,393,11,393,13,393,16,393,18,393,20,393,21,393,23,393,25,393,27,393,28,393,30,393,32,393,35,393,37,393,39,393,41,393,43,393,45,393,47,393,49,393,51,393,53,393,56,394,0,394,2,394,5,394,7,394,9,394,11,394,13,394,16,394,18,394,20,394,21,394,23,394,25,394,27,394,28,394,30,394,32,394,35,394,37,394,39,394,41,394,43,394,45,394,47,394,49,394,51,394,53,394,56,395,0,395,2,395,5,395,7,395,9,395,11,395,13,395,16,395,18,395,20,395,21,395,23,395,25,395,27,395,28,395,30,395,32,395,35,395,37,395,39,395,41,395,43,395,45,395,47,395,49,395,51,395,53,395,56,396,0,396,2,396,5,396,7,396,9,396,11,396,13,396,16,396,18,396,20,396,21,396,23,396,25,396,27,396,28,396,30,396,32,396,35,396,37,396,39,396,41,396,43,396,45,396,47,396,49,396,51,396,53,396,56,397,0,397,2,397,5,397,7,397,9,397,11,397,13,397,16,397,18,397,20,397,21,397,23,397,25,397,27,397,28,397,30,397,32,397,35,397,37,397,39,397,41,397,43,397,45,397,47,397,49,397,51,397,53,397,56,398,2,398,5,398,9,398,11,398,13,398,16,398,18,398,30,398,32,398,35,398,37,398,51,399,0,399,2,399,5,399,7,399,9,399,11,399,13,399,16,399,18,399,20,399,21,399,23,399,25,399,27,399,28,399,30,399,32,399,35,399,37,399,39,399,41,399,43,399,45,399,47,399,49,399,51,399,53,399,56,400,0,400,2,400,5,400,7,400,9,400,11,400,13,400,16,400,18,400,20,400,21,400,23,400,25,400,27,400,28,400,30,400,32,400,35,400,37,400,39,400,41,400,43,400,45,400,47,400,49,400,51,400,53,400,56,401,2,401,5,401,9,401,11,401,13,401,16,401,18,401,30,401,32,401,35,401,37,401,51,402,2,402,5,402,9,402,11,402,13,402,16,402,18,402,20,402,21,402,23,402,28,402,30,402,32,402,35,402,37,402,39,402,41,402,43,402,47,402,51,403,2,403,5,403,9,403,11,403,13,403,16,403,18,403,30,403,32,403,35,403,37,403,51,404,0,404,2,404,5,404,9,404,11,404,13,404,16,404,18,404,30,404,32,404,35,404,37,404,45,404,51,404,53,404,56,405,0,405,2,405,5,405,7,405,9,405,11,405,13,405,16,405,18,405,20,405,21,405,23,405,25,405,27,405,28,405,30,405,32,405,35,405,37,405,39,405,41,405,43,405,45,405,47,405,49,405,51,405,53,405,56,406,0,406,2,406,5,406,7,406,9,406,11,406,13,406,16,406,18,406,20,406,21,406,23,406,25,406,27,406,28,406,30,406,32,406,35,406,37,406,39,406,41,406,43,406,45,406,47,406,49,406,51,406,53,406,56,407,0,407,2,407,5,407,7,407,9,407,11,407,13,407,16,407,18,407,20,407,21,407,23,407,25,407,27,407,28,407,30,407,32,407,35,407,37,407,39,407,41,407,43,407,45,407,47,407,49,407,51,407,53,407,56,408,0,408,2,408,5,408,7,408,9,408,11,408,13,408,16,408,18,408,20,408,21,408,23,408,25,408,27,408,28,408,30,408,32,408,35,408,37,408,39,408,41,408,43,408,45,408,47,408,49,408,51,408,53,408,56,409,0,409,2,409,5,409,9,409,11,409,13,409,16,409,18,409,30,409,32,409,35,409,37,409,45,409,51,409,53,409,56,410,0,410,2,410,5,410,7,410,9,410,11,410,13,410,16,410,18,410,20,410,21,410,23,410,25,410,27,410,28,410,30,410,32,410,35,410,37,410,39,410,41,410,43,410,45,410,47,410,49,410,51,410,53,410,56,411,0,411,2,411,5,411,7,411,9,411,11,411,13,411,16,411,18,411,20,411,21,411,23,411,25,411,27,411,28,411,30,411,32,411,35,411,37,411,39,411,41,411,43,411,45,411,47,411,49,411,51,411,53,411,56,412,0,412,2,412,5,412,7,412,9,412,11,412,13,412,16,412,18,412,20,412,21,412,23,412,25,412,27,412,28,412,30,412,32,412,35,412,37,412,39,412,41,412,43,412,45,412,47,412,49,412,51,412,53,412,56,413,0,413,2,413,5,413,7,413,9,413,11,413,13,413,16,413,18,413,20,413,21,413,23,413,25,413,27,413,28,413,30,413,32,413,35,413,37,413,39,413,41,413,43,413,45,413,47,413,49,413,51,413,53,413,56,414,0,414,2,414,5,414,9,414,11,414,13,414,16,414,18,414,30,414,32,414,35,414,37,414,45,414,51,414,53,414,56,415,0,415,2,415,5,415,7,415,9,415,11,415,13,415,16,415,18,415,20,415,21,415,23,415,25,415,27,415,28,415,30,415,32,415,35,415,37,415,39,415,41,415,43,415,45,415,47,415,49,415,51,415,53,415,56,416,0,416,2,416,5,416,7,416,9,416,11,416,13,416,16,416,18,416,20,416,21,416,23,416,25,416,27,416,28,416,30,416,32,416,35,416,37,416,39,416,41,416,43,416,45,416,47,416,49,416,51,416,53,416,56,417,0,417,2,417,5,417,7,417,9,417,11,417,13,417,16,417,18,417,20,417,21,417,23,417,25,417,27,417,28,417,30,417,32,417,35,417,37,417,39,417,41,417,43,417,45,417,47,417,49,417,51,417,53,417,56,418,0,418,2,418,5,418,9,418,11,418,13,418,16,418,18,418,30,418,32,418,35,418,37,418,45,418,51,418,53,418,56,419,2,419,5,419,7,419,9,419,11,419,16,419,18,419,21,419,23,419,25,419,28,419,32,419,39,419,43,419,45,419,47,419,49,419,53,419,56,420,2,420,5,420,7,420,9,420,11,420,16,420,18,420,21,420,23,420,25,420,28,420,32,420,39,420,43,420,45,420,47,420,49,420,53,420,56,421,2,421,5,421,7,421,9,421,11,421,16,421,18,421,21,421,23,421,25,421,28,421,32,421,39,421,43,421,45,421,47,421,49,421,53,421,56,422,2,422,5,422,7,422,9,422,11,422,16,422,18,422,21,422,23,422,25,422,28,422,32,422,39,422,43,422,45,422,47,422,49,422,53,422,56,423,0,423,2,423,5,423,7,423,9,423,11,423,16,423,18,423,21,423,23,423,25,423,28,423,30,423,32,423,35,423,39,423,43,423,45,423,47,423,49,423,51,423,53,423,56,424,0,424,2,424,5,424,7,424,9,424,11,424,16,424,18,424,21,424,23,424,25,424,28,424,30,424,32,424,35,424,39,424,43,424,45,424,47,424,49,424,51,424,53,424,56,425,0,425,2,425,5,425,7,425,9,425,11,425,16,425,18,425,21,425,23,425,25,425,28,425,30,425,32,425,35,425,39,425,43,425,45,425,47,425,49,425,51,425,53,425,56,426,0,426,2,426,5,426,7,426,9,426,11,426,16,426,18,426,21,426,23,426,25,426,28,426,30,426,32,426,35,426,39,426,43,426,45,426,47,426,49,426,51,426,53,426,56,427,0,427,2,427,5,427,7,427,9,427,11,427,16,427,18,427,21,427,23,427,25,427,28,427,30,427,32,427,35,427,39,427,43,427,45,427,47,427,49,427,51,427,53,427,56,428,2,428,5,428,7,428,9,428,11,428,16,428,18,428,21,428,23,428,25,428,28,428,30,428,32,428,35,428,39,428,45,428,49,428,51,428,53,428,56,429,2,429,5,429,7,429,9,429,11,429,16,429,18,429,21,429,23,429,25,429,28,429,32,429,39,429,43,429,45,429,47,429,49,429,53,429,56,434,2,434,13,434,32,437,2,437,7,437,13,437,20,437,21,437,23,437,25,437,27,437,28,437,32,437,39,437,41,437,43,437,47,437,49,437,53,437,56,438,2,438,7,438,13,438,20,438,21,438,23,438,25,438,27,438,28,438,32,438,39,438,41,438,43,438,47,438,49,438,53,438,56,439,2,439,7,439,13,439,20,439,21,439,23,439,25,439,27,439,28,439,32,439,39,439,41,439,43,439,47,439,49,439,53,439,56,440,2,440,7,440,13,440,20,440,21,440,23,440,25,440,27,440,28,440,32,440,39,440,41,440,43,440,47,440,49,440,53,440,56,441,2,441,7,441,13,441,20,441,21,441,23,441,25,441,27,441,28,441,32,441,39,441,41,441,43,441,47,441,49,441,53,441,56,442,2,442,7,442,13,442,20,442,21,442,23,442,25,442,27,442,28,442,32,442,39,442,41,442,43,442,47,442,49,442,53,442,56,443,2,443,7,443,13,443,20,443,21,443,23,443,25,443,27,443,28,443,32,443,39,443,41,443,43,443,47,443,49,443,53,443,56,444,2,444,7,444,21,444,23,444,25,444,28,444,32,444,39,444,43,444,47,444,49,444,53,444,56,445,2,445,7,445,21,445,23,445,25,445,28,445,32,445,39,445,43,445,47,445,49,445,53,445,56,446,2,446,7,446,21,446,23,446,25,446,28,446,32,446,39,446,43,446,47,446,49,446,53,446,56,447,2,447,7,447,21,447,23,447,25,447,28,447,32,447,39,447,43,447,47,447,49,447,53,447,56,448,2,448,7,448,21,448,23,448,25,448,28,448,32,448,39,448,43,448,47,448,49,448,53,448,56,449,2,449,7,449,21,449,23,449,25,449,28,449,32,449,39,449,43,449,47,449,49,449,53,449,56,450,2,450,7,450,21,450,23,450,25,450,28,450,32,450,39,450,43,450,47,450,49,450,53,450,56,460,2,460,7,460,13,460,20,460,21,460,23,460,25,460,27,460,28,460,32,460,39,460,41,460,43,460,47,460,49,460,53,460,56,461,2,461,7,461,13,461,20,461,21,461,23,461,25,461,27,461,28,461,32,461,39,461,41,461,43,461,47,461,49,461,53,461,56,462,2,462,7,462,13,462,20,462,21,462,23,462,25,462,27,462,28,462,32,462,39,462,41,462,43,462,47,462,49,462,53,462,56,463,2,463,7,463,13,463,20,463,21,463,23,463,25,463,27,463,28,463,32,463,39,463,41,463,43,463,47,463,49,463,53,463,56,464,2,464,7,464,13,464,20,464,21,464,23,464,25,464,27,464,28,464,32,464,39,464,41,464,43,464,47,464,49,464,53,464,56,465,20,465,21,465,23,465,28,465,39,465,41,465,43,465,47,466,2,466,7,466,13,466,20,466,21,466,23,466,25,466,27,466,28,466,32,466,39,466,41,466,43,466,47,466,49,466,53,466,56,467,2,467,7,467,13,467,20,467,21,467,23,467,25,467,27,467,28,467,32,467,39,467,41,467,43,467,47,467,49,467,53,467,56,468,2,468,7,468,13,468,25,468,27,468,28,468,32,468,53,468,56,469,2,469,7,469,13,469,25,469,27,469,28,469,32,469,53,469,56,470,20,470,21,470,23,470,28,470,39,470,41,470,43,470,47,471,2,471,7,471,13,471,20,471,21,471,23,471,25,471,27,471,28,471,32,471,39,471,41,471,43,471,47,471,49,471,53,471,56,472,20,472,21,472,23,472,28,472,39,472,41,472,43,472,47,473,2,473,7,473,13,473,20,473,21,473,23,473,25,473,27,473,28,473,32,473,39,473,41,473,43,473,47,473,49,473,53,473,56,474,7,474,20,474,21,474,23,474,25,474,27,474,28,474,39,474,41,474,43,474,47,474,49,475,2,475,7,475,13,475,20,475,21,475,23,475,25,475,27,475,28,475,32,475,39,475,41,475,43,475,47,475,49,475,53,475,56,476,7,476,20,476,21,476,23,476,25,476,27,476,28,476,39,476,41,476,43,476,47,476,49,477,2,477,7,477,13,477,20,477,21,477,23,477,25,477,27,477,28,477,32,477,39,477,41,477,43,477,47,477,49,477,53,477,56,478,2,478,7,478,13,478,25,478,27,478,28,478,32,478,53,478,56,479,7,479,20,479,21,479,23,479,25,479,27,479,28,479,39,479,41,479,43,479,47,479,49,480,7,480,20,480,21,480,23,480,25,480,27,480,28,480,39,480,41,480,43,480,47,480,49,481,2,481,7,481,13,481,20,481,21,481,23,481,25,481,27,481,28,481,32,481,39,481,41,481,43,481,47,481,49,481,53,481,56,482,2,482,7,482,13,482,20,482,21,482,23,482,25,482,27,482,28,482,32,482,39,482,41,482,43,482,47,482,49,482,53,482,56,483,2,483,7,483,13,483,20,483,21,483,23,483,25,483,27,483,28,483,32,483,39,483,41,483,43,483,47,483,49,483,53,483,56,484,2,484,7,484,13,484,20,484,21,484,23,484,25,484,27,484,28,484,32,484,39,484,41,484,43,484,47,484,49,484,53,484,56,485,2,485,7,485,13,485,20,485,21,485,23,485,25,485,27,485,28,485,32,485,39,485,41,485,43,485,47,485,49,485,53,485,56,486,2,486,7,486,13,486,20,486,21,486,23,486,25,486,27,486,28,486,32,486,39,486,41,486,43,486,47,486,49,486,53,486,56,487,2,487,7,487,21,487,23,487,25,487,28,487,32,487,39,487,43,487,47,487,49,487,53,487,56,488,2,488,7,488,21,488,23,488,25,488,28,488,32,488,39,488,43,488,47,488,49,488,53,488,56,489,2,489,7,489,21,489,23,489,25,489,28,489,32,489,39,489,43,489,47,489,49,489,53,489,56,490,7,490,20,490,21,490,23,490,25,490,27,490,28,490,39,490,41,490,43,490,47,490,49,491,2,491,7,491,13,491,20,491,21,491,23,491,25,491,27,491,28,491,32,491,39,491,41,491,43,491,47,491,49,491,53,491,56,501,0,501,5,501,7,501,9,501,11,501,16,501,18,501,20,501,21,501,23,501,25,501,27,501,28,501,30,501,32,501,35,501,37,501,39,501,41,501,43,501,45,501,47,501,49,501,51,501,53,501,56,502,0,502,5,502,7,502,9,502,11,502,16,502,18,502,20,502,21,502,23,502,25,502,27,502,28,502,30,502,32,502,35,502,37,502,39,502,41,502,43,502,45,502,47,502,49,502,51,502,53,502,56,503,0,503,5,503,7,503,9,503,11,503,16,503,18,503,20,503,21,503,23,503,25,503,27,503,28,503,30,503,32,503,35,503,37,503,39,503,41,503,43,503,45,503,47,503,49,503,51,503,53,503,56,504,0,504,7,504,25,504,27,504,45,504,49,504,53,504,56,505,0,505,5,505,7,505,9,505,11,505,16,505,18,505,20,505,21,505,23,505,25,505,27,505,28,505,30,505,32,505,35,505,37,505,39,505,41,505,43,505,45,505,47,505,49,505,51,505,53,505,56,506,0,506,7,506,25,506,27,506,45,506,49,506,53,506,56,507,0,507,7,507,25,507,27,507,45,507,49,507,53,507,56,508,0,508,5,508,7,508,9,508,11,508,16,508,18,508,20,508,21,508,23,508,25,508,27,508,28,508,30,508,32,508,35,508,37,508,39,508,41,508,43,508,45,508,47,508,49,508,51,508,53,508,56,509,0,509,5,509,7,509,9,509,11,509,16,509,18,509,20,509,21,509,23,509,25,509,27,509,28,509,30,509,32,509,35,509,37,509,39,509,41,509,43,509,45,509,47,509,49,509,51,509,53,509,56,510,0,510,5,510,7,510,9,510,11,510,16,510,18,510,21,510,23,510,25,510,28,510,32,510,39,510,45,510,49,510,53,510,56,511,0,511,5,511,7,511,9,511,11,511,16,511,18,511,20,511,21,511,23,511,25,511,27,511,28,511,30,511,32,511,35,511,37,511,39,511,41,511,43,511,45,511,47,511,49,511,51,511,53,511,56,513,7,513,20,513,21,513,23,513,25,513,27,513,28,513,32,513,39,513,41,513,43,513,47,513,49,513,53,513,56,514,7,514,20,514,21,514,23,514,25,514,27,514,28,514,32,514,39,514,41,514,43,514,47,514,49,514,53,514,56],"member":[1,0,3,2,4,2,6,5,8,7,10,9,12,11,14,13,15,13,17,16,19,18,22,21,24,23,26,25,29,28,31,30,33,32,34,32,36,35,38,37,40,39,42,41,44,43,46,45,48,47,50,49,52,51,54,53,55,53,57,56,58,56,59,2,60,7,61,13,62,20,63,21,64,23,65,25,66,27,67,28,68,32,69,39,70,41,71,43,72,47,73,49,74,53,75,56,76,2,77,2,78,7,79,7,80,13,81,13,82,13,83,20,84,20,85,20,86,21,87,21,88,23,89,23,90,23,91,25,92,25,93,27,94,27,95,28,96,28,97,30,98,32,99,32,100,35,101,37,102,39,103,39,104,39,105,41,106,41,107,41,108,43,109,43,110,43,111,47,112,47,113,49,114,49,115,53,116,53,117,56,118,56,119,0,120,1,121,2,122,3,123,2,124,2,125,2,126,2,127,2,128,5,129,6,130,8,131,7,132,9,133,10,134,11,135,12,136,13,137,14,138,13,139,13,140,13,141,13,142,13,143,16,144,17,145,16,146,18,147,19,148,20,149,20,150,20,151,20,152,20,153,21,154,21,155,21,156,21,157,21,158,23,159,23,160,23,161,23,162,23,163,23,164,25,165,25,166,27,167,27,168,28,169,28,170,30,171,31,172,32,173,33,174,32,175,32,176,32,177,32,178,32,179,35,180,36,181,37,182,38,183,39,184,39,185,39,186,39,187,39,188,42,189,41,190,41,191,41,192,41,193,41,194,43,195,43,196,43,197,43,198,43,199,45,200,46,201,47,202,47,203,47,204,47,205,47,206,49,207,49,208,49,209,49,210,49,211,51,212,52,213,53,214,54,215,55,216,53,217,53,218,56,219,57,220,58,221,56,222,56,223,4,224,8,225,8,226,15,227,22,228,22,229,24,230,26,231,26,232,29,233,34,234,40,235,40,236,42,237,42,238,44,239,44,240,48,241,48,242,50,243,50,244,55,245,55,246,58,247,58,250,1,251,13,252,20,253,27,254,38,255,39,256,43,257,348,258,348,259,348,260,348,261,348,262,348,263,348,264,375,265,375,266,375,267,375,268,375,269,375,270,375,271,375,272,375,273,379,274,379,275,379,276,379,277,379,278,379,279,379,280,379,281,379,282,379,283,379,284,379,285,379,286,379,287,379,288,379,289,379,290,379,291,379,292,379,293,379,294,379,295,379,296,379,297,379,298,435,299,435,300,435,301,435,302,435,303,435,304,435,305,435,306,435,307,435,308,435,309,435,310,435,311,435,312,435,313,435,314,435,315,435,316,435,317,435,318,435,319,435,320,435,321,435,322,435,323,435,324,435,325,435,326,435,327,435,328,500,329,500,330,500,331,500,332,500,333,500,334,500,335,500,336,500,337,500,338,500,339,500,340,500,341,500,342,500,343,500,344,500]},"sourcemap":[{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/AdjacentPairs.swift","symbols":[27,14,280,49,14,305,58,14,37,72,16,38,87,19,254,90,23,182,106,14,181,111,13,101,124,14,41,142,16,42,156,23,237,161,23,236,169,13,105,176,13,107,181,9,70,186,14,189,195,14,191,206,14,190,258,14,192,267,13,106,276,14,193,294,14,188]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Chain.swift","symbols":[12,14,2,32,16,3,46,25,122,52,14,121,59,16,4,87,23,223,109,13,76,116,13,77,121,9,59,131,14,124,142,14,126,151,14,125,249,14,127,269,14,123,316,12,248]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Chunked.swift","symbols":[15,14,25,51,16,26,62,23,231,69,23,230,89,13,91,94,13,92,99,14,164,108,9,65,134,14,165,147,14,27,164,19,253,167,13,93,172,13,94,177,9,66,184,14,166,193,14,167,210,14,343,224,14,344,243,14,315,272,14,316,313,14,43,314,19,256,344,16,44,356,13,108,361,13,110,367,9,71,373,14,194,385,21,239,391,21,238,401,14,198,422,14,197,432,13,109,439,14,195,457,14,196,577,14,312]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Combinations.swift","symbols":[12,14,30,60,13,97,84,16,31,175,25,171,183,14,170,258,14,300,294,14,299]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Compacted.swift","symbols":[13,14,18,24,16,19,34,25,147,44,14,146,69,14,288,77,14,28,90,16,29,100,13,95,103,13,96,106,9,67,111,14,168,125,14,169,138,21,232,168,14,320]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Cycle.swift","symbols":[12,14,5,25,16,6,39,25,129,52,14,128,62,14,39,74,19,255,76,16,40,88,23,235,93,23,234,99,13,102,104,13,104,109,9,69,114,14,183,120,14,186,125,14,185,131,14,184,145,13,103,153,14,187,196,14,314,218,14,313]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/FirstNonNil.swift","symbols":[33,14,276]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Indexed.swift","symbols":[13,14,20,26,19,252,29,13,83,34,13,85,39,9,62,44,14,148,49,14,150,54,14,149,63,14,151,68,13,84,77,14,152,109,14,317]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Intersperse.swift","symbols":[17,14,32,33,16,33,57,25,173,78,14,172,85,16,34,101,23,233,124,13,98,129,13,99,134,14,175,145,9,68,153,14,178,166,14,177,173,14,176,262,14,174,633,14,277]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Joined.swift","symbols":[17,14,11,37,16,12,47,25,135,53,14,134,68,14,45,92,16,46,102,25,200,108,14,199,121,14,21,141,16,22,151,23,228,156,23,227,162,13,86,167,13,87,172,14,153,177,9,63,182,14,155,187,14,154,197,14,156,208,14,157,223,14,49,247,16,50,257,23,243,262,23,242,268,13,113,273,13,114,278,14,206,283,9,73,288,14,208,293,14,207,303,14,209,314,14,210,334,14,295,348,14,294,383,14,297,397,14,296,414,14,338,423,14,337,443,14,326,457,14,325,473,14,340,483,14,339]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/MinMax.swift","symbols":[105,14,282,150,14,281,191,14,292,217,14,291,251,14,311,305,14,310,355,14,324,381,14,323,431,14,289,480,14,293]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Partition.swift","symbols":[60,23,265,80,23,264,99,23,268,127,23,272,186,14,307]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Permutations.swift","symbols":[78,14,35,133,13,100,142,16,36,216,25,180,260,14,179,330,14,302,386,14,301,403,14,51,449,16,52,470,25,212,498,14,211,546,14,321,586,14,322]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Product.swift","symbols":[12,14,13,29,19,251,32,16,14,51,25,137,86,14,136,93,16,15,106,23,226,112,13,81,117,13,80,124,13,82,130,9,61,146,14,139,152,14,142,206,14,141,215,14,140,426,14,138,483,12,249]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/RandomSample.swift","symbols":[31,14,308,70,14,309,113,14,303,164,14,304,182,14,278,232,14,279]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Reductions.swift","symbols":[36,14,329,67,14,328,114,14,275,158,14,273,179,14,53,202,16,54,224,25,214,236,14,213,245,16,55,261,23,245,273,23,244,286,13,115,291,13,116,296,9,74,306,14,216,319,14,217,342,14,215,374,14,330,417,14,274,426,14,56,444,16,57,464,25,219,476,14,218,482,16,58,496,23,246,501,23,247,507,13,117,512,13,118,517,9,75,526,14,221,540,14,222,554,14,220,564,14,332,573,14,331,584,14,285,593,14,283,604,14,333,614,14,284]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Rotate.swift","symbols":[59,23,271,137,23,266,215,23,267,244,23,269,275,23,270]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Split.swift","symbols":[24,14,0,52,16,1,53,21,250,90,14,119,102,23,120,229,14,334,319,14,336,348,14,7,404,16,8,431,23,225,438,23,224,494,13,78,499,13,79,508,14,131,545,9,60,553,14,130,644,14,342,741,14,341]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Stride.swift","symbols":[29,14,287,49,14,319,55,14,16,72,14,145,79,16,17,96,25,144,109,14,143,118,14,23,135,14,162,142,16,24,152,23,229,158,13,88,163,13,90,168,9,64,173,14,158,179,14,159,245,13,89,250,14,161,256,14,160,270,14,163]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Suffix.swift","symbols":[26,14,260]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Trim.swift","symbols":[30,14,306,60,23,327,85,23,298,112,14,261,133,14,259,163,23,263,187,23,262,212,23,258,234,23,257]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Unique.swift","symbols":[12,14,9,30,16,10,50,25,133,61,14,132,86,14,290,114,14,286,139,14,335]},{"uri":"file:///workspace/ecosystem/packages/.builds/swift-algorithms@1.0.0/.build/checkouts/swift-algorithms/Sources/Algorithms/Windows.swift","symbols":[41,14,318,48,14,47,70,16,48,84,23,241,89,23,240,95,13,111,104,13,112,109,9,72,117,14,201,129,14,203,138,14,202,305,14,204,337,14,205]}]}