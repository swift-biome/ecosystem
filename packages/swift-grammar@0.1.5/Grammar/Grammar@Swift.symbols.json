{"metadata":{"formatVersion":{"major":0,"minor":5,"patch":3},"generator":"Swift version 5.8-dev (LLVM 0c2f2a534df576e, Swift 025a6fca804b570)"},"module":{"name":"Grammar","platform":{"architecture":"x86_64","environment":"gnu","vendor":"unknown","operatingSystem":{"name":"linux","minimumVersion":{"major":0,"minor":0,"patch":0}}}},"symbols":[{"kind":{"identifier":"swift.property","displayName":"Instance Property"},"identifier":{"precise":"s:SzsE11descriptionSSvp::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","description"],"names":{"title":"description","subHeading":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"description"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"String","preciseIdentifier":"s:SS"}]},"docComment":{"module":"Swift","lines":[{"text":"A textual representation of this value."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"description"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"String","preciseIdentifier":"s:SS"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2neoiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","!=(_:_:)"],"names":{"title":"!=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"!="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"!="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE2apoiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","&+(_:_:)"],"names":{"title":"&+(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&+"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the sum of the two given values, wrapping the result in case of"},{"text":"any overflow."},{"text":""},{"text":"The overflow addition operator (`&+`) discards any bits that overflow the"},{"text":"fixed width of the integer type. In the following example, the sum of"},{"text":"`100` and `121` is greater than the maximum representable `Int8` value,"},{"text":"so the result is the partial value after discarding the overflowing"},{"text":"bits."},{"text":""},{"text":"    let x: Int8 = 10 &+ 21"},{"text":"    // x == 31"},{"text":"    let y: Int8 = 100 &+ 121"},{"text":"    // y == -35 (after overflow)"},{"text":""},{"text":"For more about arithmetic with overflow operators, see [Overflow"},{"text":"Operators][overflow] in *[The Swift Programming Language][tspl]*."},{"text":""},{"text":"[overflow]: https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37"},{"text":"[tspl]: https://docs.swift.org/swift-book/"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The first value to add."},{"text":"  - rhs: The second value to add."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&+"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE1topyxxFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","~(_:)"],"names":{"title":"~(_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"~"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the inverse of the bits set in the argument."},{"text":""},{"text":"The bitwise NOT operator (`~`) is a prefix operator that returns a value"},{"text":"in which all the bits of its argument are flipped: Bits that are `1` in"},{"text":"the argument are `0` in the result, and bits that are `0` in the argument"},{"text":"are `1` in the result. This is equivalent to the inverse of a set. For"},{"text":"example:"},{"text":""},{"text":"    let x: UInt8 = 5        // 0b00000101"},{"text":"    let notX = ~x           // 0b11111010"},{"text":""},{"text":"Performing a bitwise NOT operation on 0 returns a value with every bit"},{"text":"set to `1`."},{"text":""},{"text":"    let allOnes = ~UInt8.min   // 0b11111111"},{"text":""},{"text":"- Complexity: O(1)."}]},"functionSignature":{"parameters":[{"name":"x","declarationFragments":[{"kind":"identifier","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"~"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:SUss17FixedWidthIntegerRzrlE7exactlyxSgqd___tcSzRd__lufc::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","init(exactly:)"],"names":{"title":"init(exactly:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"exactly"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new instance from the given integer, if it can be represented"},{"text":"exactly."},{"text":""},{"text":"If the value passed as `source` is not representable exactly, the result"},{"text":"is `nil`. In the following example, the constant `x` is successfully"},{"text":"created from a value of `100`, while the attempt to initialize the"},{"text":"constant `y` from `1_000` fails because the `Int8` type can represent"},{"text":"`127` at maximum:"},{"text":""},{"text":"    let x = Int8(exactly: 100)"},{"text":"    // x == Optional(100)"},{"text":"    let y = Int8(exactly: 1_000)"},{"text":"    // y == nil"},{"text":""},{"text":"- Parameter source: A value to convert to this type of integer."}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Self","rhs":"FixedWidthInteger","rhsPrecise":"s:s17FixedWidthIntegerP"},{"kind":"conformance","lhs":"T","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Self","rhs":"FixedWidthInteger","rhsPrecise":"s:s17FixedWidthIntegerP"}]},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"exactly"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"source"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.property","displayName":"Instance Property"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE03bitB0Sivp::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","bitWidth"],"names":{"title":"bitWidth","subHeading":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"bitWidth"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"}]},"docComment":{"module":"Swift","lines":[{"text":"The number of bits in the binary representation of this value."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"bitWidth"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE8clampingxqd___tcSzRd__lufc::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","init(clamping:)"],"names":{"title":"init(clamping:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"clamping"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new instance with the representable value that's closest to the"},{"text":"given integer."},{"text":""},{"text":"If the value passed as `source` is greater than the maximum representable"},{"text":"value in this type, the result is the type's `max` value. If `source` is"},{"text":"less than the smallest representable value in this type, the result is"},{"text":"the type's `min` value."},{"text":""},{"text":"In this example, `x` is initialized as an `Int8` instance by clamping"},{"text":"`500` to the range `-128...127`, and `y` is initialized as a `UInt`"},{"text":"instance by clamping `-500` to the range `0...UInt.max`."},{"text":""},{"text":"    let x = Int8(clamping: 500)"},{"text":"    // x == 127"},{"text":"    // x == Int8.max"},{"text":""},{"text":"    let y = UInt(clamping: -500)"},{"text":"    // y == 0"},{"text":""},{"text":"- Parameter source: An integer to convert to this type."}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"clamping"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"source"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3apeoiyyxz_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","&+=(_:_:)"],"names":{"title":"&+=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&+="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Adds two values and stores the result in the left-hand-side variable,"},{"text":"wrapping any overflow."},{"text":""},{"text":"The masking addition assignment operator (`&+=`) silently wraps any"},{"text":"overflow that occurs during the operation. In the following example, the"},{"text":"sum of `100` and `121` is greater than the maximum representable `Int8`"},{"text":"value, so the result is the partial value after discarding the"},{"text":"overflowing bits."},{"text":""},{"text":"    var x: Int8 = 10"},{"text":"    x &+= 21"},{"text":"    // x == 31"},{"text":"    var y: Int8 = 100"},{"text":"    y &+= 121"},{"text":"    // y == -35 (after overflow)"},{"text":""},{"text":"For more about arithmetic with overflow operators, see [Overflow"},{"text":"Operators][overflow] in *[The Swift Programming Language][tspl]*."},{"text":""},{"text":"[overflow]: https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37"},{"text":"[tspl]: https://docs.swift.org/swift-book/"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The first value to add."},{"text":"  - rhs: The second value to add."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&+="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3aggoiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","&>>(_:_:)"],"names":{"title":"&>>(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&>>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the right, masking the shift amount to the"},{"text":"type's bit width."},{"text":""},{"text":"Use the masking right shift operator (`&>>`) when you need to perform a"},{"text":"shift and are sure that the shift amount is in the range"},{"text":"`0..<lhs.bitWidth`. Before shifting, the masking right shift operator"},{"text":"masks the shift to this range. The shift is performed using this masked"},{"text":"value."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the shift amount requires no masking."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x &>> 2"},{"text":"    // y == 7                         // 0b00000111"},{"text":""},{"text":"However, if you use `8` as the shift amount, the method first masks the"},{"text":"shift amount to zero, and then performs the shift, resulting in no change"},{"text":"to the original value."},{"text":""},{"text":"    let z = x &>> 8"},{"text":"    // z == 30                        // 0b00011110"},{"text":""},{"text":"If the bit width of the shifted integer type is a power of two, masking"},{"text":"is performed using a bitmask; otherwise, masking is performed using a"},{"text":"modulo operation."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the right. If `rhs` is"},{"text":"    outside the range `0..<lhs.bitWidth`, it is masked to produce a"},{"text":"    value within that range."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&>>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.method","displayName":"Type Method"},"identifier":{"precise":"s:Sq7GrammarAA11ParsingRuleRzlE5parsey12ConstructionQzSgAA0B5InputVyqd__GzAA0B11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__8TerminalRtzlFZ","interfaceLanguage":"swift"},"pathComponents":["Optional","parse(_:)"],"names":{"title":"parse(_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"parse"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Diagnostics"},{"kind":"text","spelling":">("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"ParsingInput","preciseIdentifier":"s:7Grammar12ParsingInputV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Diagnostics"},{"kind":"text","spelling":">) -> "},{"kind":"typeIdentifier","spelling":"Wrapped"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Construction"},{"kind":"text","spelling":"?"}]},"functionSignature":{"parameters":[{"name":"input","declarationFragments":[{"kind":"identifier","spelling":"input"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ParsingInput","preciseIdentifier":"s:7Grammar12ParsingInputV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Diagnostics"},{"kind":"text","spelling":">"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Wrapped"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Construction"},{"kind":"text","spelling":"?"}]},"swiftGenerics":{"parameters":[{"name":"Wrapped","index":0,"depth":0},{"name":"Diagnostics","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Wrapped","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"},{"kind":"conformance","lhs":"Diagnostics","rhs":"ParsingDiagnostics","rhsPrecise":"s:7Grammar18ParsingDiagnosticsP"},{"kind":"sameType","lhs":"Wrapped.Location","rhs":"Diagnostics.Source.Index"},{"kind":"sameType","lhs":"Wrapped.Terminal","rhs":"Diagnostics.Source.Element"}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Wrapped","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"}]},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"parse"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Diagnostics"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"_"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"input"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"ParsingInput","preciseIdentifier":"s:7Grammar12ParsingInputV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Diagnostics"},{"kind":"text","spelling":">) -> "},{"kind":"typeIdentifier","spelling":"Wrapped"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Construction"},{"kind":"text","spelling":"? "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Diagnostics"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"ParsingDiagnostics","preciseIdentifier":"s:7Grammar18ParsingDiagnosticsP"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Wrapped"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Location"},{"kind":"text","spelling":" == "},{"kind":"typeIdentifier","spelling":"Diagnostics"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Source"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Index"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Wrapped"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Terminal"},{"kind":"text","spelling":" == "},{"kind":"typeIdentifier","spelling":"Diagnostics"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Source"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Element"}],"accessLevel":"public","location":{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/parsingrule.swift","position":{"line":58,"character":9}}},{"kind":{"identifier":"swift.property","displayName":"Instance Property"},"identifier":{"precise":"s:SUsE9magnitudexvp::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","magnitude"],"names":{"title":"magnitude","subHeading":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"magnitude"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"The magnitude of this value."},{"text":""},{"text":"Every unsigned integer is its own magnitude, so for any value `x`,"},{"text":"`x == x.magnitude`."},{"text":""},{"text":"The global `abs(_:)` function provides more familiar syntax when you need"},{"text":"to find an absolute value. In addition, because `abs(_:)` always returns"},{"text":"a value of the same type, even in a generic context, using the function"},{"text":"instead of the `magnitude` property is encouraged."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"magnitude"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.property","displayName":"Type Property"},"identifier":{"precise":"s:s18AdditiveArithmeticPss27ExpressibleByIntegerLiteralRzrlE4zeroxvpZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","zero"],"names":{"title":"zero","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"zero"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"The zero value."},{"text":""},{"text":"Zero is the identity element for addition. For any value,"},{"text":"`x + .zero == x` and `.zero + x == x`."}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Self","rhs":"ExpressibleByIntegerLiteral","rhsPrecise":"s:s27ExpressibleByIntegerLiteralP"}]},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"zero"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3alloiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","&<<(_:_:)"],"names":{"title":"&<<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the left, masking the shift amount to the"},{"text":"type's bit width."},{"text":""},{"text":"Use the masking left shift operator (`&<<`) when you need to perform a"},{"text":"shift and are sure that the shift amount is in the range"},{"text":"`0..<lhs.bitWidth`. Before shifting, the masking left shift operator"},{"text":"masks the shift to this range. The shift is performed using this masked"},{"text":"value."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the shift amount requires no masking."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x &<< 2"},{"text":"    // y == 120                       // 0b01111000"},{"text":""},{"text":"However, if you use `8` as the shift amount, the method first masks the"},{"text":"shift amount to zero, and then performs the shift, resulting in no change"},{"text":"to the original value."},{"text":""},{"text":"    let z = x &<< 8"},{"text":"    // z == 30                        // 0b00011110"},{"text":""},{"text":"If the bit width of the shifted integer type is a power of two, masking"},{"text":"is performed using a bitmask; otherwise, masking is performed using a"},{"text":"modulo operation."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the left. If `rhs` is"},{"text":"    outside the range `0..<lhs.bitWidth`, it is masked to produce a"},{"text":"    value within that range."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.method","displayName":"Type Method"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE6random2inxSnyxG_tFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","random(in:)"],"names":{"title":"random(in:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">) -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a random value within the specified range."},{"text":""},{"text":"Use this method to generate an integer within a specific range. This"},{"text":"example creates three new values in the range `1..<100`."},{"text":""},{"text":"    for _ in 1...3 {"},{"text":"        print(Int.random(in: 1..<100))"},{"text":"    }"},{"text":"    // Prints \"53\""},{"text":"    // Prints \"64\""},{"text":"    // Prints \"5\""},{"text":""},{"text":"This method is equivalent to calling the version that takes a generator,"},{"text":"passing in the system's default random generator."},{"text":""},{"text":"- Parameter range: The range in which to create a random value."},{"text":"  `range` must not be empty."},{"text":"- Returns: A random value within the bounds of `range`."}]},"functionSignature":{"parameters":[{"name":"in","internalName":"range","declarationFragments":[{"kind":"identifier","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">) -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE1loiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","<(_:_:)"],"names":{"title":"<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first"},{"text":"argument is less than that of the second argument."},{"text":""},{"text":"You can compare instances of any `BinaryInteger` types using the"},{"text":"less-than operator (`<`), even if the two instances are of different"},{"text":"types."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer to compare."},{"text":"  - rhs: Another integer to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3ggeoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8",">>=(_:_:)"],"names":{"title":">>=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">>="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":")"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">>="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE3zzloiySnyxGx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","..<(_:_:)"],"names":{"title":"..<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a half-open range that contains its lower bound but not its upper"},{"text":"bound."},{"text":""},{"text":"Use the half-open range operator (`..<`) to create a range of any type"},{"text":"that conforms to the `Comparable` protocol. This example creates a"},{"text":"`Range<Double>` from zero up to, but not including, 5.0."},{"text":""},{"text":"    let lessThanFive = 0.0..<5.0"},{"text":"    print(lessThanFive.contains(3.14))  // Prints \"true\""},{"text":"    print(lessThanFive.contains(5.0))   // Prints \"false\""},{"text":""},{"text":"- Parameters:"},{"text":"  - minimum: The lower bound for the range."},{"text":"  - maximum: The upper bound for the range."},{"text":""},{"text":"- Precondition: `minimum <= maximum`."}]},"functionSignature":{"parameters":[{"name":"minimum","declarationFragments":[{"kind":"identifier","spelling":"minimum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"maximum","declarationFragments":[{"kind":"identifier","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"minimum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsEyxSgSScfc::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","init(_:)"],"names":{"title":"init(_:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?("},{"kind":"typeIdentifier","spelling":"String","preciseIdentifier":"s:SS"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new integer value from the given string."},{"text":""},{"text":"The string passed as `description` may begin with a plus or minus sign"},{"text":"character (`+` or `-`), followed by one or more numeric digits (`0-9`)."},{"text":""},{"text":"    let x = Int(\"123\")"},{"text":"    // x == 123"},{"text":""},{"text":"If `description` is in an invalid format, or if the value it denotes in"},{"text":"base 10 is not representable, the result is `nil`. For example, the"},{"text":"following conversions result in `nil`:"},{"text":""},{"text":"    Int(\" 100\")                       // Includes whitespace"},{"text":"    Int(\"21-50\")                      // Invalid format"},{"text":"    Int(\"ff6600\")                     // Characters out of bounds"},{"text":"    Int(\"10000000000000000000000000\") // Out of range"},{"text":""},{"text":"- Parameter description: The ASCII representation of a number."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?("},{"kind":"externalParam","spelling":"_"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"description"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"String","preciseIdentifier":"s:SS"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE2lloiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","<<(_:_:)"],"names":{"title":"<<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the left."},{"text":""},{"text":"The `<<` operator performs a *smart shift*, which defines a result for a"},{"text":"shift of any value."},{"text":""},{"text":"- Using a negative value for `rhs` performs a right shift using"},{"text":"  `abs(rhs)`."},{"text":"- Using a value for `rhs` that is greater than or equal to the bit width"},{"text":"  of `lhs` is an *overshift*, resulting in zero."},{"text":"- Using any other value for `rhs` performs a left shift on `lhs` by that"},{"text":"  amount."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the value is shifted left by two bits."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x << 2"},{"text":"    // y == 120                       // 0b01111000"},{"text":""},{"text":"If you use `11` as `rhs`, `x` is overshifted such that all of its bits"},{"text":"are set to zero."},{"text":""},{"text":"    let z = x << 11"},{"text":"    // z == 0                         // 0b00000000"},{"text":""},{"text":"Using a negative value as `rhs` is the same as performing a right shift"},{"text":"with `abs(rhs)`."},{"text":""},{"text":"    let a = x << -3"},{"text":"    // a == 3                         // 0b00000011"},{"text":"    let b = x >> 3"},{"text":"    // b == 3                         // 0b00000011"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the left."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.property","displayName":"Instance Property"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE9bigEndianxvp::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","bigEndian"],"names":{"title":"bigEndian","subHeading":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"bigEndian"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"The big-endian representation of this integer."},{"text":""},{"text":"If necessary, the byte order of this value is reversed from the typical"},{"text":"byte order of this integer type. On a big-endian platform, for any"},{"text":"integer `x`, `x == x.bigEndian`."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"bigEndian"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsEyxqd__cSBRd__lufc::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","init(_:)"],"names":{"title":"init(_:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates an integer from the given floating-point value, rounding toward"},{"text":"zero. Any fractional part of the value passed as `source` is removed."},{"text":""},{"text":"    let x = Int(21.5)"},{"text":"    // x == 21"},{"text":"    let y = Int(-21.5)"},{"text":"    // y == -21"},{"text":""},{"text":"If `source` is outside the bounds of this type after rounding toward"},{"text":"zero, a runtime error may occur."},{"text":""},{"text":"    let z = UInt(-21.5)"},{"text":"    // Error: ...outside the representable range"},{"text":""},{"text":"- Parameter source: A floating-point value to convert to an integer."},{"text":"  `source` must be representable in this type after rounding toward"},{"text":"  zero."}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"T","rhs":"BinaryFloatingPoint","rhsPrecise":"s:SB"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"_"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"source"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryFloatingPoint","preciseIdentifier":"s:SB"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.property","displayName":"Type Property"},"identifier":{"precise":"s:SUss17FixedWidthIntegerRzrlE3minxvpZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","min"],"names":{"title":"min","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"min"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"The minimum representable integer in this type."},{"text":""},{"text":"For unsigned integer types, this value is always `0`."}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Self","rhs":"FixedWidthInteger","rhsPrecise":"s:s17FixedWidthIntegerP"}]},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"min"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.method","displayName":"Instance Method"},"identifier":{"precise":"s:SzsE10isMultiple2ofSbx_tF::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","isMultiple(of:)"],"names":{"title":"isMultiple(of:)","subHeading":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"isMultiple"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"of"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"of","internalName":"other","declarationFragments":[{"kind":"identifier","spelling":"other"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"isMultiple"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"of"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"other"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.property","displayName":"Type Property"},"identifier":{"precise":"s:SUss17FixedWidthIntegerRzrlE3maxxvpZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","max"],"names":{"title":"max","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"max"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"The maximum representable integer in this type."},{"text":""},{"text":"For unsigned integer types, this value is `(2 ** bitWidth) - 1`, where"},{"text":"`**` is exponentiation."}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Self","rhs":"FixedWidthInteger","rhsPrecise":"s:s17FixedWidthIntegerP"}]},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"max"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2leoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","<=(_:_:)"],"names":{"title":"<=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first"},{"text":"argument is less than or equal to that of the second argument."},{"text":""},{"text":"You can compare instances of any `BinaryInteger` types using the"},{"text":"less-than-or-equal-to operator (`<=`), even if the two instances are of"},{"text":"different types."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer to compare."},{"text":"  - rhs: Another integer to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.method","displayName":"Type Method"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE6random2in5usingxSnyxG_qd__ztSGRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","random(in:using:)"],"names":{"title":"random(in:using:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">, "},{"kind":"externalParam","spelling":"using"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a random value within the specified range, using the given"},{"text":"generator as a source for randomness."},{"text":""},{"text":"Use this method to generate an integer within a specific range when you"},{"text":"are using a custom random number generator. This example creates three"},{"text":"new values in the range `1..<100`."},{"text":""},{"text":"    for _ in 1...3 {"},{"text":"        print(Int.random(in: 1..<100, using: &myGenerator))"},{"text":"    }"},{"text":"    // Prints \"7\""},{"text":"    // Prints \"44\""},{"text":"    // Prints \"21\""},{"text":""},{"text":"- Note: The algorithm used to create random values may change in a future"},{"text":"  version of Swift. If you're passing a generator that results in the"},{"text":"  same sequence of integer values each time you run your program, that"},{"text":"  sequence may change when your program is compiled using a different"},{"text":"  version of Swift."},{"text":""},{"text":"- Parameters:"},{"text":"  - range: The range in which to create a random value."},{"text":"    `range` must not be empty."},{"text":"  - generator: The random number generator to use when creating the"},{"text":"    new random value."},{"text":"- Returns: A random value within the bounds of `range`."}]},"functionSignature":{"parameters":[{"name":"in","internalName":"range","declarationFragments":[{"kind":"identifier","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},{"name":"using","internalName":"generator","declarationFragments":[{"kind":"identifier","spelling":"generator"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"T","rhs":"RandomNumberGenerator","rhsPrecise":"s:SG"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">, "},{"kind":"externalParam","spelling":"using"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"generator"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"RandomNumberGenerator","preciseIdentifier":"s:SG"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s27ExpressibleByIntegerLiteralPss01_ab7BuiltincD0RzrlE07integerD0xx_tcfc::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","init(integerLiteral:)"],"names":{"title":"init(integerLiteral:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"integerLiteral"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"swiftGenerics":{"constraints":[{"kind":"conformance","lhs":"Self","rhs":"_ExpressibleByBuiltinIntegerLiteral","rhsPrecise":"s:s35_ExpressibleByBuiltinIntegerLiteralP"}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Self","rhs":"_ExpressibleByBuiltinIntegerLiteral","rhsPrecise":"s:s35_ExpressibleByBuiltinIntegerLiteralP"}]},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"integerLiteral"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"value"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2leoiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","<=(_:_:)"],"names":{"title":"<=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.method","displayName":"Instance Method"},"identifier":{"precise":"s:SzsE8advanced2byxSi_tF::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","advanced(by:)"],"names":{"title":"advanced(by:)","subHeading":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"advanced"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"by"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a value that is offset the specified distance from this value."},{"text":""},{"text":"Use the `advanced(by:)` method in generic code to offset a value by a"},{"text":"specified distance. If you're working directly with numeric values, use"},{"text":"the addition operator (`+`) instead of this method."},{"text":""},{"text":"For a value `x`, a distance `n`, and a value `y = x.advanced(by: n)`,"},{"text":"`x.distance(to: y) == n`."},{"text":""},{"text":"- Parameter n: The distance to advance this value."},{"text":"- Returns: A value that is offset from this value by `n`."}]},"functionSignature":{"parameters":[{"name":"by","internalName":"n","declarationFragments":[{"kind":"identifier","spelling":"n"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"advanced"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"by"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"n"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE7exactlyxSgqd___tcSBRd__lufc::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","init(exactly:)"],"names":{"title":"init(exactly:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"exactly"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates an integer from the given floating-point value, if it can be"},{"text":"represented exactly."},{"text":""},{"text":"If the value passed as `source` is not representable exactly, the result"},{"text":"is `nil`. In the following example, the constant `x` is successfully"},{"text":"created from a value of `21.0`, while the attempt to initialize the"},{"text":"constant `y` from `21.5` fails:"},{"text":""},{"text":"    let x = Int(exactly: 21.0)"},{"text":"    // x == Optional(21)"},{"text":"    let y = Int(exactly: 21.5)"},{"text":"    // y == nil"},{"text":""},{"text":"- Parameter source: A floating-point value to convert to an integer."}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"T","rhs":"BinaryFloatingPoint","rhsPrecise":"s:SB"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"exactly"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"source"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryFloatingPoint","preciseIdentifier":"s:SB"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE2leoiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","<=(_:_:)"],"names":{"title":"<=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first argument"},{"text":"is less than or equal to that of the second argument."},{"text":""},{"text":"This is the default implementation of the less-than-or-equal-to"},{"text":"operator (`<=`) for any type that conforms to `Comparable`."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: A value to compare."},{"text":"  - rhs: Another value to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3ameoiyyxz_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","&*=(_:_:)"],"names":{"title":"&*=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&*="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Multiplies two values and stores the result in the left-hand-side"},{"text":"variable, wrapping any overflow."},{"text":""},{"text":"The masking multiplication assignment operator (`&*=`) silently wraps"},{"text":"any overflow that occurs during the operation. In the following example,"},{"text":"the product of `10` and `50` is greater than the maximum representable"},{"text":"`Int8` value, so the result is the partial value after discarding the"},{"text":"overflowing bits."},{"text":""},{"text":"    var x: Int8 = 10"},{"text":"    x &*= 5"},{"text":"    // x == 50"},{"text":"    var y: Int8 = 10"},{"text":"    y &*= 50"},{"text":"    // y == -12 (after overflow)"},{"text":""},{"text":"For more about arithmetic with overflow operators, see [Overflow"},{"text":"Operators][overflow] in *[The Swift Programming Language][tspl]*."},{"text":""},{"text":"[overflow]: https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37"},{"text":"[tspl]: https://docs.swift.org/swift-book/"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The first value to multiply."},{"text":"  - rhs: The second value to multiply."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&*="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SxsE2eeoiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","==(_:_:)"],"names":{"title":"==(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"=="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"x","declarationFragments":[{"kind":"identifier","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"y","declarationFragments":[{"kind":"identifier","spelling":"y"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"=="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"y"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3alloiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","&<<(_:_:)"],"names":{"title":"&<<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the left, masking the shift amount to the"},{"text":"type's bit width."},{"text":""},{"text":"Use the masking left shift operator (`&<<`) when you need to perform a"},{"text":"shift and are sure that the shift amount is in the range"},{"text":"`0..<lhs.bitWidth`. Before shifting, the masking left shift operator"},{"text":"masks the shift to this range. The shift is performed using this masked"},{"text":"value."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the shift amount requires no masking."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x &<< 2"},{"text":"    // y == 120                       // 0b01111000"},{"text":""},{"text":"However, if you use `8` as the shift amount, the method first masks the"},{"text":"shift amount to zero, and then performs the shift, resulting in no change"},{"text":"to the original value."},{"text":""},{"text":"    let z = x &<< 8"},{"text":"    // z == 30                        // 0b00011110"},{"text":""},{"text":"If the bit width of the shifted integer type is a power of two, masking"},{"text":"is performed using a bitmask; otherwise, masking is performed using a"},{"text":"modulo operation."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the left. If `rhs` is"},{"text":"    outside the range `0..<lhs.bitWidth`, it is masked to produce a"},{"text":"    value within that range."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.method","displayName":"Instance Method"},"identifier":{"precise":"s:SzsE8distance2toSix_tF::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","distance(to:)"],"names":{"title":"distance(to:)","subHeading":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"distance"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"to"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the distance from this value to the given value, expressed as a"},{"text":"stride."},{"text":""},{"text":"For two values `x` and `y`, and a distance `n = x.distance(to: y)`,"},{"text":"`x.advanced(by: n) == y`."},{"text":""},{"text":"- Parameter other: The value to calculate the distance to."},{"text":"- Returns: The distance from this value to `other`."}]},"functionSignature":{"parameters":[{"name":"to","internalName":"other","declarationFragments":[{"kind":"identifier","spelling":"other"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"distance"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"to"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"other"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE1goiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8",">(_:_:)"],"names":{"title":">(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2geoiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16",">=(_:_:)"],"names":{"title":">=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:SzsExycfc::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","init()"],"names":{"title":"init()","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"()"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new value equal to zero."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"()"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE1aoiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","&(_:_:)"],"names":{"title":"&(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of performing a bitwise AND operation on the two given"},{"text":"values."},{"text":""},{"text":"A bitwise AND operation results in a value that has each bit set to `1`"},{"text":"where *both* of its arguments have that bit set to `1`. For example:"},{"text":""},{"text":"    let x: UInt8 = 5          // 0b00000101"},{"text":"    let y: UInt8 = 14         // 0b00001110"},{"text":"    let z = x & y             // 0b00000100"},{"text":"    // z == 4"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer value."},{"text":"  - rhs: Another integer value."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE2amoiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","&*(_:_:)"],"names":{"title":"&*(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&*"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the product of the two given values, wrapping the result in case"},{"text":"of any overflow."},{"text":""},{"text":"The overflow multiplication operator (`&*`) discards any bits that"},{"text":"overflow the fixed width of the integer type. In the following example,"},{"text":"the product of `10` and `50` is greater than the maximum representable"},{"text":"`Int8` value, so the result is the partial value after discarding the"},{"text":"overflowing bits."},{"text":""},{"text":"    let x: Int8 = 10 &* 5"},{"text":"    // x == 50"},{"text":"    let y: Int8 = 10 &* 50"},{"text":"    // y == -12 (after overflow)"},{"text":""},{"text":"For more about arithmetic with overflow operators, see [Overflow"},{"text":"Operators][overflow] in *[The Swift Programming Language][tspl]*."},{"text":""},{"text":"[overflow]: https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37"},{"text":"[tspl]: https://docs.swift.org/swift-book/"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The first value to multiply."},{"text":"  - rhs: The second value to multiply."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&*"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE12littleEndianxx_tcfc::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","init(littleEndian:)"],"names":{"title":"init(littleEndian:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"littleEndian"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates an integer from its little-endian representation, changing the"},{"text":"byte order if necessary."},{"text":""},{"text":"- Parameter value: A value to use as the little-endian representation of"},{"text":"  the new integer."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"littleEndian"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"value"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE3zzzopys19PartialRangeThroughVyxGxFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","...(_:)"],"names":{"title":"...(_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..."},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a partial range up to, and including, its upper bound."},{"text":""},{"text":"Use the prefix closed range operator (prefix `...`) to create a partial"},{"text":"range of any type that conforms to the `Comparable` protocol. This"},{"text":"example creates a `PartialRangeThrough<Double>` instance that includes"},{"text":"any value less than or equal to `5.0`."},{"text":""},{"text":"    let throughFive = ...5.0"},{"text":""},{"text":"    throughFive.contains(4.0)     // true"},{"text":"    throughFive.contains(5.0)     // true"},{"text":"    throughFive.contains(6.0)     // false"},{"text":""},{"text":"You can use this type of partial range of a collection's indices to"},{"text":"represent the range from the start of the collection up to, and"},{"text":"including, the partial range's upper bound."},{"text":""},{"text":"    let numbers = [10, 20, 30, 40, 50, 60, 70]"},{"text":"    print(numbers[...3])"},{"text":"    // Prints \"[10, 20, 30, 40]\""},{"text":""},{"text":"- Parameter maximum: The upper bound for the range."},{"text":""},{"text":"- Precondition: `maximum` must compare equal to itself (i.e. cannot be NaN)."}]},"functionSignature":{"parameters":[{"name":"maximum","declarationFragments":[{"kind":"identifier","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..."},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:SUss17FixedWidthIntegerRzrlEyxqd__cSzRd__lufc::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","init(_:)"],"names":{"title":"init(_:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new instance from the given integer."},{"text":""},{"text":"Use this initializer to convert from another integer type when you know"},{"text":"the value is within the bounds of this type. Passing a value that can't"},{"text":"be represented in this type results in a runtime error."},{"text":""},{"text":"In the following example, the constant `y` is successfully created from"},{"text":"`x`, an `Int` instance with a value of `100`. Because the `Int8` type"},{"text":"can represent `127` at maximum, the attempt to create `z` with a value"},{"text":"of `1000` results in a runtime error."},{"text":""},{"text":"    let x = 100"},{"text":"    let y = Int8(x)"},{"text":"    // y == 100"},{"text":"    let z = Int8(x * 10)"},{"text":"    // Error: Not enough bits to represent the given value"},{"text":""},{"text":"- Parameter source: A value to convert to this type of integer. The value"},{"text":"  passed as `source` must be representable in this type."}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Self","rhs":"FixedWidthInteger","rhsPrecise":"s:s17FixedWidthIntegerP"},{"kind":"conformance","lhs":"T","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Self","rhs":"FixedWidthInteger","rhsPrecise":"s:s17FixedWidthIntegerP"}]},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"_"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"source"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s18AdditiveArithmeticPsE2seoiyyxz_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","-=(_:_:)"],"names":{"title":"-=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"-="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"-="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.method","displayName":"Instance Method"},"identifier":{"precise":"s:SzsE20quotientAndRemainder10dividingByx0A0_x9remaindertx_tF::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","quotientAndRemainder(dividingBy:)"],"names":{"title":"quotientAndRemainder(dividingBy:)","subHeading":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"quotientAndRemainder"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"dividingBy"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> (quotient"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", remainder"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the quotient and remainder of this value divided by the given"},{"text":"value."},{"text":""},{"text":"Use this method to calculate the quotient and remainder of a division at"},{"text":"the same time."},{"text":""},{"text":"    let x = 1_000_000"},{"text":"    let (q, r) = x.quotientAndRemainder(dividingBy: 933)"},{"text":"    // q == 1071"},{"text":"    // r == 757"},{"text":""},{"text":"- Parameter rhs: The value to divide this value by."},{"text":"- Returns: A tuple containing the quotient and remainder of this value"},{"text":"  divided by `rhs`."}]},"functionSignature":{"parameters":[{"name":"dividingBy","internalName":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"text","spelling":"(quotient"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", remainder"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"quotientAndRemainder"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"dividingBy"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> (quotient"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", remainder"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE3zzzoiySNyxGx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","...(_:_:)"],"names":{"title":"...(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..."},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a closed range that contains both of its bounds."},{"text":""},{"text":"Use the closed range operator (`...`) to create a closed range of any type"},{"text":"that conforms to the `Comparable` protocol. This example creates a"},{"text":"`ClosedRange<Character>` from \"a\" up to, and including, \"z\"."},{"text":""},{"text":"    let lowercase = \"a\"...\"z\""},{"text":"    print(lowercase.contains(\"z\"))"},{"text":"    // Prints \"true\""},{"text":""},{"text":"- Parameters:"},{"text":"  - minimum: The lower bound for the range."},{"text":"  - maximum: The upper bound for the range."},{"text":""},{"text":"- Precondition: `minimum <= maximum`."}]},"functionSignature":{"parameters":[{"name":"minimum","declarationFragments":[{"kind":"identifier","spelling":"minimum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"maximum","declarationFragments":[{"kind":"identifier","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..."},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"minimum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.method","displayName":"Type Method"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE6random2inxSNyxG_tFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","random(in:)"],"names":{"title":"random(in:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">) -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a random value within the specified range."},{"text":""},{"text":"Use this method to generate an integer within a specific range. This"},{"text":"example creates three new values in the range `1...100`."},{"text":""},{"text":"    for _ in 1...3 {"},{"text":"        print(Int.random(in: 1...100))"},{"text":"    }"},{"text":"    // Prints \"53\""},{"text":"    // Prints \"64\""},{"text":"    // Prints \"5\""},{"text":""},{"text":"This method is equivalent to calling `random(in:using:)`, passing in the"},{"text":"system's default random generator."},{"text":""},{"text":"- Parameter range: The range in which to create a random value."},{"text":"- Returns: A random value within the bounds of `range`."}]},"functionSignature":{"parameters":[{"name":"in","internalName":"range","declarationFragments":[{"kind":"identifier","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">) -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2lloiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","<<(_:_:)"],"names":{"title":"<<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"RHS"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"RHS"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the left."},{"text":""},{"text":"The `<<` operator performs a *smart shift*, which defines a result for a"},{"text":"shift of any value."},{"text":""},{"text":"- Using a negative value for `rhs` performs a right shift using"},{"text":"  `abs(rhs)`."},{"text":"- Using a value for `rhs` that is greater than or equal to the bit width"},{"text":"  of `lhs` is an *overshift*, resulting in zero."},{"text":"- Using any other value for `rhs` performs a left shift on `lhs` by that"},{"text":"  amount."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the value is shifted left by two bits."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x << 2"},{"text":"    // y == 120                       // 0b01111000"},{"text":""},{"text":"If you use `11` as `rhs`, `x` is overshifted such that all of its bits"},{"text":"are set to zero."},{"text":""},{"text":"    let z = x << 11"},{"text":"    // z == 0                         // 0b00000000"},{"text":""},{"text":"Using a negative value as `rhs` is the same as performing a right shift"},{"text":"with `abs(rhs)`."},{"text":""},{"text":"    let a = x << -3"},{"text":"    // a == 3                         // 0b00000011"},{"text":"    let b = x >> 3"},{"text":"    // b == 3                         // 0b00000011"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the left."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"RHS"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"RHS","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"RHS"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"RHS"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"RHS"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE1goiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8",">(_:_:)"],"names":{"title":">(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first argument"},{"text":"is greater than that of the second argument."},{"text":""},{"text":"This is the default implementation of the greater-than operator (`>`) for"},{"text":"any type that conforms to `Comparable`."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: A value to compare."},{"text":"  - rhs: Another value to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3aggoiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","&>>(_:_:)"],"names":{"title":"&>>(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&>>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the right, masking the shift amount to the"},{"text":"type's bit width."},{"text":""},{"text":"Use the masking right shift operator (`&>>`) when you need to perform a"},{"text":"shift and are sure that the shift amount is in the range"},{"text":"`0..<lhs.bitWidth`. Before shifting, the masking right shift operator"},{"text":"masks the shift to this range. The shift is performed using this masked"},{"text":"value."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the shift amount requires no masking."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x &>> 2"},{"text":"    // y == 7                         // 0b00000111"},{"text":""},{"text":"However, if you use `8` as the shift amount, the method first masks the"},{"text":"shift amount to zero, and then performs the shift, resulting in no change"},{"text":"to the original value."},{"text":""},{"text":"    let z = x &>> 8"},{"text":"    // z == 30                        // 0b00011110"},{"text":""},{"text":"If the bit width of the shifted integer type is a power of two, masking"},{"text":"is performed using a bitmask; otherwise, masking is performed using a"},{"text":"modulo operation."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the right. If `rhs` is"},{"text":"    outside the range `0..<lhs.bitWidth`, it is masked to produce a"},{"text":"    value within that range."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&>>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE9bigEndianxx_tcfc::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","init(bigEndian:)"],"names":{"title":"init(bigEndian:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"bigEndian"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates an integer from its big-endian representation, changing the byte"},{"text":"order if necessary."},{"text":""},{"text":"- Parameter value: A value to use as the big-endian representation of the"},{"text":"  new integer."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"bigEndian"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"value"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2neoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","!=(_:_:)"],"names":{"title":"!=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"!="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the two given values are not"},{"text":"equal."},{"text":""},{"text":"You can check the inequality of instances of any `BinaryInteger` types"},{"text":"using the not-equal-to operator (`!=`). For example, you can test"},{"text":"whether the first `UInt8` value in a string's UTF-8 encoding is not"},{"text":"equal to the first `UInt32` value in its Unicode scalar view:"},{"text":""},{"text":"    let gameName = \"Red Light, Green Light\""},{"text":"    if let firstUTF8 = gameName.utf8.first,"},{"text":"        let firstScalar = gameName.unicodeScalars.first?.value {"},{"text":"        print(\"First code values are different: \\(firstUTF8 != firstScalar)\")"},{"text":"    }"},{"text":"    // Prints \"First code values are different: false\""},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer to compare."},{"text":"  - rhs: Another integer to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"!="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE1goiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8",">(_:_:)"],"names":{"title":">(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first"},{"text":"argument is greater than that of the second argument."},{"text":""},{"text":"You can compare instances of any `BinaryInteger` types using the"},{"text":"greater-than operator (`>`), even if the two instances are of different"},{"text":"types."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer to compare."},{"text":"  - rhs: Another integer to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s18AdditiveArithmeticPsE1popyxxFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","+(_:)"],"names":{"title":"+(_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"+"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the given number unchanged."},{"text":""},{"text":"You can use the unary plus operator (`+`) to provide symmetry in your"},{"text":"code for positive numbers when also using the unary minus operator."},{"text":""},{"text":"    let x = -21"},{"text":"    let y = +21"},{"text":"    // x == -21"},{"text":"    // y == 21"},{"text":""},{"text":"- Returns: The given argument without any changes."}]},"functionSignature":{"parameters":[{"name":"x","declarationFragments":[{"kind":"identifier","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"+"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE2ggoiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8",">>(_:_:)"],"names":{"title":">>(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the right."},{"text":""},{"text":"The `>>` operator performs a *smart shift*, which defines a result for a"},{"text":"shift of any value."},{"text":""},{"text":"- Using a negative value for `rhs` performs a left shift using"},{"text":"  `abs(rhs)`."},{"text":"- Using a value for `rhs` that is greater than or equal to the bit width"},{"text":"  of `lhs` is an *overshift*. An overshift results in `-1` for a"},{"text":"  negative value of `lhs` or `0` for a nonnegative value."},{"text":"- Using any other value for `rhs` performs a right shift on `lhs` by that"},{"text":"  amount."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the value is shifted right by two bits."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x >> 2"},{"text":"    // y == 7                         // 0b00000111"},{"text":""},{"text":"If you use `11` as `rhs`, `x` is overshifted such that all of its bits"},{"text":"are set to zero."},{"text":""},{"text":"    let z = x >> 11"},{"text":"    // z == 0                         // 0b00000000"},{"text":""},{"text":"Using a negative value as `rhs` is the same as performing a left shift"},{"text":"using `abs(rhs)`."},{"text":""},{"text":"    let a = x >> -3"},{"text":"    // a == 240                       // 0b11110000"},{"text":"    let b = x << 3"},{"text":"    // b == 240                       // 0b11110000"},{"text":""},{"text":"Right shift operations on negative values \"fill in\" the high bits with"},{"text":"ones instead of zeros."},{"text":""},{"text":"    let q: Int8 = -30                 // 0b11100010"},{"text":"    let r = q >> 2"},{"text":"    // r == -8                        // 0b11111000"},{"text":""},{"text":"    let s = q >> 11"},{"text":"    // s == -1                        // 0b11111111"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the right."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:Sz12_RegexParserE9assertingxqd___tcSzRd__lufc::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","init(asserting:)"],"names":{"title":"init(asserting:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"asserting"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":")"}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"asserting"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"i"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE1xoiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","^(_:_:)"],"names":{"title":"^(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"^"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of performing a bitwise XOR operation on the two given"},{"text":"values."},{"text":""},{"text":"A bitwise XOR operation, also known as an exclusive OR operation, results"},{"text":"in a value that has each bit set to `1` where *one or the other but not"},{"text":"both* of its arguments had that bit set to `1`. For example:"},{"text":""},{"text":"    let x: UInt8 = 5          // 0b00000101"},{"text":"    let y: UInt8 = 14         // 0b00001110"},{"text":"    let z = x ^ y             // 0b00001011"},{"text":"    // z == 11"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer value."},{"text":"  - rhs: Another integer value."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"^"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE2asoiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","&-(_:_:)"],"names":{"title":"&-(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&-"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the difference of the two given values, wrapping the result in"},{"text":"case of any overflow."},{"text":""},{"text":"The overflow subtraction operator (`&-`) discards any bits that overflow"},{"text":"the fixed width of the integer type. In the following example, the"},{"text":"difference of `10` and `21` is less than zero, the minimum representable"},{"text":"`UInt` value, so the result is the partial value after discarding the"},{"text":"overflowing bits."},{"text":""},{"text":"    let x: UInt8 = 21 &- 10"},{"text":"    // x == 11"},{"text":"    let y: UInt8 = 10 &- 21"},{"text":"    // y == 245 (after overflow)"},{"text":""},{"text":"For more about arithmetic with overflow operators, see [Overflow"},{"text":"Operators][overflow] in *[The Swift Programming Language][tspl]*."},{"text":""},{"text":"[overflow]: https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37"},{"text":"[tspl]: https://docs.swift.org/swift-book/"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: A numeric value."},{"text":"  - rhs: The value to subtract from `lhs`."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&-"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3lleoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","<<=(_:_:)"],"names":{"title":"<<=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":")"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE4alleoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","&<<=(_:_:)"],"names":{"title":"&<<=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&<<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the left, masking the shift amount to the"},{"text":"type's bit width, and stores the result in the left-hand-side variable."},{"text":""},{"text":"The `&<<=` operator performs a *masking shift*, where the value used as"},{"text":"`rhs` is masked to produce a value in the range `0..<lhs.bitWidth`. The"},{"text":"shift is performed using this masked value."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the shift amount requires no masking."},{"text":""},{"text":"    var x: UInt8 = 30                 // 0b00011110"},{"text":"    x &<<= 2"},{"text":"    // x == 120                       // 0b01111000"},{"text":""},{"text":"However, if you pass `19` as `rhs`, the method first bitmasks `rhs` to"},{"text":"`3`, and then uses that masked value as the number of bits to shift `lhs`."},{"text":""},{"text":"    var y: UInt8 = 30                 // 0b00011110"},{"text":"    y &<<= 19"},{"text":"    // y == 240                       // 0b11110000"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the left. If `rhs` is"},{"text":"    outside the range `0..<lhs.bitWidth`, it is masked to produce a"},{"text":"    value within that range."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&<<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.property","displayName":"Instance Property"},"identifier":{"precise":"s:s23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","halfWidthCornerQuoted"],"names":{"title":"halfWidthCornerQuoted","subHeading":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"halfWidthCornerQuoted"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"String","preciseIdentifier":"s:SS"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"halfWidthCornerQuoted"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"String","preciseIdentifier":"s:SS"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SxsE1loiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","<(_:_:)"],"names":{"title":"<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"x","declarationFragments":[{"kind":"identifier","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"y","declarationFragments":[{"kind":"identifier","spelling":"y"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"y"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3aseoiyyxz_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","&-=(_:_:)"],"names":{"title":"&-=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&-="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Subtracts the second value from the first and stores the difference in the"},{"text":"left-hand-side variable, wrapping any overflow."},{"text":""},{"text":"The masking subtraction assignment operator (`&-=`) silently wraps any"},{"text":"overflow that occurs during the operation. In the following example, the"},{"text":"difference of `10` and `21` is less than zero, the minimum representable"},{"text":"`UInt` value, so the result is the result is the partial value after"},{"text":"discarding the overflowing bits."},{"text":""},{"text":"    var x: Int8 = 21"},{"text":"    x &-= 10"},{"text":"    // x == 11"},{"text":"    var y: UInt8 = 10"},{"text":"    y &-= 21"},{"text":"    // y == 245 (after overflow)"},{"text":""},{"text":"For more about arithmetic with overflow operators, see [Overflow"},{"text":"Operators][overflow] in *[The Swift Programming Language][tspl]*."},{"text":""},{"text":"[overflow]: https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37"},{"text":"[tspl]: https://docs.swift.org/swift-book/"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: A numeric value."},{"text":"  - rhs: The value to subtract from `lhs`."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&-="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufc::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","init(_:radix:)"],"names":{"title":"init(_:radix:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?<"},{"kind":"genericParameter","spelling":"S"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"S"},{"kind":"text","spelling":", "},{"kind":"externalParam","spelling":"radix"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new integer value from the given string and radix."},{"text":""},{"text":"The string passed as `text` may begin with a plus or minus sign character"},{"text":"(`+` or `-`), followed by one or more numeric digits (`0-9`) or letters"},{"text":"(`a-z` or `A-Z`). Parsing of the string is case insensitive."},{"text":""},{"text":"    let x = Int(\"123\")"},{"text":"    // x == 123"},{"text":""},{"text":"    let y = Int(\"-123\", radix: 8)"},{"text":"    // y == -83"},{"text":"    let y = Int(\"+123\", radix: 8)"},{"text":"    // y == +83"},{"text":""},{"text":"    let z = Int(\"07b\", radix: 16)"},{"text":"    // z == 123"},{"text":""},{"text":"If `text` is in an invalid format or contains characters that are out of"},{"text":"bounds for the given `radix`, or if the value it denotes in the given"},{"text":"`radix` is not representable, the result is `nil`. For example, the"},{"text":"following conversions result in `nil`:"},{"text":""},{"text":"    Int(\" 100\")                       // Includes whitespace"},{"text":"    Int(\"21-50\")                      // Invalid format"},{"text":"    Int(\"ff6600\")                     // Characters out of bounds"},{"text":"    Int(\"zzzzzzzzzzzzz\", radix: 36)   // Out of range"},{"text":""},{"text":"- Parameters:"},{"text":"  - text: The ASCII representation of a number in the radix passed as"},{"text":"    `radix`."},{"text":"  - radix: The radix, or base, to use for converting `text` to an integer"},{"text":"    value. `radix` must be in the range `2...36`. The default is 10."}]},"swiftGenerics":{"parameters":[{"name":"S","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"S","rhs":"StringProtocol","rhsPrecise":"s:Sy"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?<"},{"kind":"genericParameter","spelling":"S"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"_"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"text"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"S"},{"kind":"text","spelling":", "},{"kind":"externalParam","spelling":"radix"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"},{"kind":"text","spelling":" = 10) "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"S"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"StringProtocol","preciseIdentifier":"s:Sy"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.property","displayName":"Type Property"},"identifier":{"precise":"s:SUsE8isSignedSbvpZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","isSigned"],"names":{"title":"isSigned","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"isSigned"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"A Boolean value indicating whether this type is a signed integer type."},{"text":""},{"text":"This property is always `false` for unsigned integer types."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"isSigned"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2eeoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","==(_:_:)"],"names":{"title":"==(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"=="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the two given values are"},{"text":"equal."},{"text":""},{"text":"You can check the equality of instances of any `BinaryInteger` types"},{"text":"using the equal-to operator (`==`). For example, you can test whether"},{"text":"the first `UInt8` value in a string's UTF-8 encoding is equal to the"},{"text":"first `UInt32` value in its Unicode scalar view:"},{"text":""},{"text":"    let gameName = \"Red Light, Green Light\""},{"text":"    if let firstUTF8 = gameName.utf8.first,"},{"text":"        let firstScalar = gameName.unicodeScalars.first?.value {"},{"text":"        print(\"First code values are equal: \\(firstUTF8 == firstScalar)\")"},{"text":"    }"},{"text":"    // Prints \"First code values are equal: true\""},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer to compare."},{"text":"  - rhs: Another integer to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"=="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s18AdditiveArithmeticPsE2peoiyyxz_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","+=(_:_:)"],"names":{"title":"+=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"+="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"+="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.typealias","displayName":"Type Alias"},"identifier":{"precise":"s:Sq7GrammarAA11ParsingRuleRzlE8Terminala","interfaceLanguage":"swift"},"pathComponents":["Optional","Terminal"],"names":{"title":"Optional.Terminal","navigator":[{"kind":"identifier","spelling":"Terminal"}],"subHeading":[{"kind":"keyword","spelling":"typealias"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"Terminal"}]},"swiftGenerics":{"parameters":[{"name":"Wrapped","index":0,"depth":0}],"constraints":[{"kind":"conformance","lhs":"Wrapped","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Wrapped","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"}]},"declarationFragments":[{"kind":"keyword","spelling":"typealias"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"Terminal"},{"kind":"text","spelling":" = "},{"kind":"typeIdentifier","spelling":"Wrapped"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Terminal"}],"accessLevel":"public","location":{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/parsingrule.swift","position":{"line":55,"character":14}}},{"kind":{"identifier":"swift.typealias","displayName":"Type Alias"},"identifier":{"precise":"s:Sq7GrammarAA11ParsingRuleRzlE8Locationa","interfaceLanguage":"swift"},"pathComponents":["Optional","Location"],"names":{"title":"Optional.Location","navigator":[{"kind":"identifier","spelling":"Location"}],"subHeading":[{"kind":"keyword","spelling":"typealias"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"Location"}]},"swiftGenerics":{"parameters":[{"name":"Wrapped","index":0,"depth":0}],"constraints":[{"kind":"conformance","lhs":"Wrapped","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Wrapped","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"}]},"declarationFragments":[{"kind":"keyword","spelling":"typealias"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"Location"},{"kind":"text","spelling":" = "},{"kind":"typeIdentifier","spelling":"Wrapped"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Location"}],"accessLevel":"public","location":{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/parsingrule.swift","position":{"line":53,"character":14}}},{"kind":{"identifier":"swift.property","displayName":"Instance Property"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE12littleEndianxvp::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","littleEndian"],"names":{"title":"littleEndian","subHeading":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"littleEndian"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"The little-endian representation of this integer."},{"text":""},{"text":"If necessary, the byte order of this value is reversed from the typical"},{"text":"byte order of this integer type. On a little-endian platform, for any"},{"text":"integer `x`, `x == x.littleEndian`."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"littleEndian"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE3zzlopys16PartialRangeUpToVyxGxFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","..<(_:)"],"names":{"title":"..<(_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"PartialRangeUpTo","preciseIdentifier":"s:s16PartialRangeUpToV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a partial range up to, but not including, its upper bound."},{"text":""},{"text":"Use the prefix half-open range operator (prefix `..<`) to create a"},{"text":"partial range of any type that conforms to the `Comparable` protocol."},{"text":"This example creates a `PartialRangeUpTo<Double>` instance that includes"},{"text":"any value less than `5.0`."},{"text":""},{"text":"    let upToFive = ..<5.0"},{"text":""},{"text":"    upToFive.contains(3.14)       // true"},{"text":"    upToFive.contains(6.28)       // false"},{"text":"    upToFive.contains(5.0)        // false"},{"text":""},{"text":"You can use this type of partial range of a collection's indices to"},{"text":"represent the range from the start of the collection up to, but not"},{"text":"including, the partial range's upper bound."},{"text":""},{"text":"    let numbers = [10, 20, 30, 40, 50, 60, 70]"},{"text":"    print(numbers[..<3])"},{"text":"    // Prints \"[10, 20, 30]\""},{"text":""},{"text":"- Parameter maximum: The upper bound for the range."},{"text":""},{"text":"- Precondition: `maximum` must compare equal to itself (i.e. cannot be NaN)."}]},"functionSignature":{"parameters":[{"name":"maximum","declarationFragments":[{"kind":"identifier","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"PartialRangeUpTo","preciseIdentifier":"s:s16PartialRangeUpToV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"PartialRangeUpTo","preciseIdentifier":"s:s16PartialRangeUpToV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2ggoiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8",">>(_:_:)"],"names":{"title":">>(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"RHS"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"RHS"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the right."},{"text":""},{"text":"The `>>` operator performs a *smart shift*, which defines a result for a"},{"text":"shift of any value."},{"text":""},{"text":"- Using a negative value for `rhs` performs a left shift using"},{"text":"  `abs(rhs)`."},{"text":"- Using a value for `rhs` that is greater than or equal to the bit width"},{"text":"  of `lhs` is an *overshift*. An overshift results in `-1` for a"},{"text":"  negative value of `lhs` or `0` for a nonnegative value."},{"text":"- Using any other value for `rhs` performs a right shift on `lhs` by that"},{"text":"  amount."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the value is shifted right by two bits."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x >> 2"},{"text":"    // y == 7                         // 0b00000111"},{"text":""},{"text":"If you use `11` as `rhs`, `x` is overshifted such that all of its bits"},{"text":"are set to zero."},{"text":""},{"text":"    let z = x >> 11"},{"text":"    // z == 0                         // 0b00000000"},{"text":""},{"text":"Using a negative value as `rhs` is the same as performing a left shift"},{"text":"using `abs(rhs)`."},{"text":""},{"text":"    let a = x >> -3"},{"text":"    // a == 240                       // 0b11110000"},{"text":"    let b = x << 3"},{"text":"    // b == 240                       // 0b11110000"},{"text":""},{"text":"Right shift operations on negative values \"fill in\" the high bits with"},{"text":"ones instead of zeros."},{"text":""},{"text":"    let q: Int8 = -30                 // 0b11100010"},{"text":"    let r = q >> 2"},{"text":"    // r == -8                        // 0b11111000"},{"text":""},{"text":"    let s = q >> 11"},{"text":"    // s == -1                        // 0b11111111"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the right."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"RHS"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"RHS","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"RHS"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"RHS"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"RHS"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE2geoiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16",">=(_:_:)"],"names":{"title":">=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first argument"},{"text":"is greater than or equal to that of the second argument."},{"text":""},{"text":"This is the default implementation of the greater-than-or-equal-to operator"},{"text":"(`>=`) for any type that conforms to `Comparable`."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: A value to compare."},{"text":"  - rhs: Another value to compare."},{"text":"- Returns: `true` if `lhs` is greater than or equal to `rhs`; otherwise,"},{"text":"  `false`."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2geoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16",">=(_:_:)"],"names":{"title":">=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first"},{"text":"argument is greater than or equal to that of the second argument."},{"text":""},{"text":"You can compare instances of any `BinaryInteger` types using the"},{"text":"greater-than-or-equal-to operator (`>=`), even if the two instances are"},{"text":"of different types."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer to compare."},{"text":"  - rhs: Another integer to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.method","displayName":"Type Method"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE6random2in5usingxSNyxG_qd__ztSGRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","random(in:using:)"],"names":{"title":"random(in:using:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">, "},{"kind":"externalParam","spelling":"using"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a random value within the specified range, using the given"},{"text":"generator as a source for randomness."},{"text":""},{"text":"Use this method to generate an integer within a specific range when you"},{"text":"are using a custom random number generator. This example creates three"},{"text":"new values in the range `1...100`."},{"text":""},{"text":"    for _ in 1...3 {"},{"text":"        print(Int.random(in: 1...100, using: &myGenerator))"},{"text":"    }"},{"text":"    // Prints \"7\""},{"text":"    // Prints \"44\""},{"text":"    // Prints \"21\""},{"text":""},{"text":"- Parameters:"},{"text":"  - range: The range in which to create a random value."},{"text":"  - generator: The random number generator to use when creating the"},{"text":"    new random value."},{"text":"- Returns: A random value within the bounds of `range`."}]},"functionSignature":{"parameters":[{"name":"in","internalName":"range","declarationFragments":[{"kind":"identifier","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},{"name":"using","internalName":"generator","declarationFragments":[{"kind":"identifier","spelling":"generator"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"T","rhs":"RandomNumberGenerator","rhsPrecise":"s:SG"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">, "},{"kind":"externalParam","spelling":"using"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"generator"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"RandomNumberGenerator","preciseIdentifier":"s:SG"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE4aggeoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","&>>=(_:_:)"],"names":{"title":"&>>=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&>>="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Calculates the result of shifting a value's binary representation the"},{"text":"specified number of digits to the right, masking the shift amount to the"},{"text":"type's bit width, and stores the result in the left-hand-side variable."},{"text":""},{"text":"The `&>>=` operator performs a *masking shift*, where the value passed as"},{"text":"`rhs` is masked to produce a value in the range `0..<lhs.bitWidth`. The"},{"text":"shift is performed using this masked value."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the shift amount requires no masking."},{"text":""},{"text":"    var x: UInt8 = 30                 // 0b00011110"},{"text":"    x &>>= 2"},{"text":"    // x == 7                         // 0b00000111"},{"text":""},{"text":"However, if you use `19` as `rhs`, the operation first bitmasks `rhs` to"},{"text":"`3`, and then uses that masked value as the number of bits to shift `lhs`."},{"text":""},{"text":"    var y: UInt8 = 30                 // 0b00011110"},{"text":"    y &>>= 19"},{"text":"    // y == 3                         // 0b00000011"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the right. If `rhs` is"},{"text":"    outside the range `0..<lhs.bitWidth`, it is masked to produce a"},{"text":"    value within that range."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&>>="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE3zzzoPys16PartialRangeFromVyxGxFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","...(_:)"],"names":{"title":"...(_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..."},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"PartialRangeFrom","preciseIdentifier":"s:s16PartialRangeFromV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a partial range extending upward from a lower bound."},{"text":""},{"text":"Use the postfix range operator (postfix `...`) to create a partial range"},{"text":"of any type that conforms to the `Comparable` protocol. This example"},{"text":"creates a `PartialRangeFrom<Double>` instance that includes any value"},{"text":"greater than or equal to `5.0`."},{"text":""},{"text":"    let atLeastFive = 5.0..."},{"text":""},{"text":"    atLeastFive.contains(4.0)     // false"},{"text":"    atLeastFive.contains(5.0)     // true"},{"text":"    atLeastFive.contains(6.0)     // true"},{"text":""},{"text":"You can use this type of partial range of a collection's indices to"},{"text":"represent the range from the partial range's lower bound up to the end"},{"text":"of the collection."},{"text":""},{"text":"    let numbers = [10, 20, 30, 40, 50, 60, 70]"},{"text":"    print(numbers[3...])"},{"text":"    // Prints \"[40, 50, 60, 70]\""},{"text":""},{"text":"- Parameter minimum: The lower bound for the range."},{"text":""},{"text":"- Precondition: `minimum` must compare equal to itself (i.e. cannot be NaN)."}]},"functionSignature":{"parameters":[{"name":"minimum","declarationFragments":[{"kind":"identifier","spelling":"minimum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"PartialRangeFrom","preciseIdentifier":"s:s16PartialRangeFromV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..."},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"minimum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"PartialRangeFrom","preciseIdentifier":"s:s16PartialRangeFromV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE1ooiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","|(_:_:)"],"names":{"title":"|(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"|"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of performing a bitwise OR operation on the two given"},{"text":"values."},{"text":""},{"text":"A bitwise OR operation results in a value that has each bit set to `1`"},{"text":"where *one or both* of its arguments have that bit set to `1`. For"},{"text":"example:"},{"text":""},{"text":"    let x: UInt8 = 5          // 0b00000101"},{"text":"    let y: UInt8 = 14         // 0b00001110"},{"text":"    let z = x | y             // 0b00001111"},{"text":"    // z == 15"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer value."},{"text":"  - rhs: Another integer value."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"|"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE18truncatingIfNeededxqd___tcSzRd__lufc::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","init(truncatingIfNeeded:)"],"names":{"title":"init(truncatingIfNeeded:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"truncatingIfNeeded"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new instance from the bit pattern of the given instance by"},{"text":"truncating or sign-extending if needed to fit this type."},{"text":""},{"text":"When the bit width of `T` (the type of `source`) is equal to or greater"},{"text":"than this type's bit width, the result is the truncated"},{"text":"least-significant bits of `source`. For example, when converting a"},{"text":"16-bit value to an 8-bit type, only the lower 8 bits of `source` are"},{"text":"used."},{"text":""},{"text":"    let p: Int16 = -500"},{"text":"    // 'p' has a binary representation of 11111110_00001100"},{"text":"    let q = Int8(truncatingIfNeeded: p)"},{"text":"    // q == 12"},{"text":"    // 'q' has a binary representation of 00001100"},{"text":""},{"text":"When the bit width of `T` is less than this type's bit width, the result"},{"text":"is *sign-extended* to fill the remaining bits. That is, if `source` is"},{"text":"negative, the result is padded with ones; otherwise, the result is"},{"text":"padded with zeros."},{"text":""},{"text":"    let u: Int8 = 21"},{"text":"    // 'u' has a binary representation of 00010101"},{"text":"    let v = Int16(truncatingIfNeeded: u)"},{"text":"    // v == 21"},{"text":"    // 'v' has a binary representation of 00000000_00010101"},{"text":""},{"text":"    let w: Int8 = -21"},{"text":"    // 'w' has a binary representation of 11101011"},{"text":"    let x = Int16(truncatingIfNeeded: w)"},{"text":"    // x == -21"},{"text":"    // 'x' has a binary representation of 11111111_11101011"},{"text":"    let y = UInt16(truncatingIfNeeded: w)"},{"text":"    // y == 65515"},{"text":"    // 'y' has a binary representation of 11111111_11101011"},{"text":""},{"text":"- Parameter source: An integer to convert to this type."}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"T","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"truncatingIfNeeded"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"source"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.method","displayName":"Type Method"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE6random2in5usingxSNyxG_qd__ztSGRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","random(in:using:)"],"names":{"title":"random(in:using:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">, "},{"kind":"externalParam","spelling":"using"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a random value within the specified range, using the given"},{"text":"generator as a source for randomness."},{"text":""},{"text":"Use this method to generate an integer within a specific range when you"},{"text":"are using a custom random number generator. This example creates three"},{"text":"new values in the range `1...100`."},{"text":""},{"text":"    for _ in 1...3 {"},{"text":"        print(Int.random(in: 1...100, using: &myGenerator))"},{"text":"    }"},{"text":"    // Prints \"7\""},{"text":"    // Prints \"44\""},{"text":"    // Prints \"21\""},{"text":""},{"text":"- Parameters:"},{"text":"  - range: The range in which to create a random value."},{"text":"  - generator: The random number generator to use when creating the"},{"text":"    new random value."},{"text":"- Returns: A random value within the bounds of `range`."}]},"functionSignature":{"parameters":[{"name":"in","internalName":"range","declarationFragments":[{"kind":"identifier","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},{"name":"using","internalName":"generator","declarationFragments":[{"kind":"identifier","spelling":"generator"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"T","rhs":"RandomNumberGenerator","rhsPrecise":"s:SG"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">, "},{"kind":"externalParam","spelling":"using"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"generator"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"RandomNumberGenerator","preciseIdentifier":"s:SG"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2geoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8",">=(_:_:)"],"names":{"title":">=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first"},{"text":"argument is greater than or equal to that of the second argument."},{"text":""},{"text":"You can compare instances of any `BinaryInteger` types using the"},{"text":"greater-than-or-equal-to operator (`>=`), even if the two instances are"},{"text":"of different types."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer to compare."},{"text":"  - rhs: Another integer to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE3zzzoPys16PartialRangeFromVyxGxFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","...(_:)"],"names":{"title":"...(_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..."},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"PartialRangeFrom","preciseIdentifier":"s:s16PartialRangeFromV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a partial range extending upward from a lower bound."},{"text":""},{"text":"Use the postfix range operator (postfix `...`) to create a partial range"},{"text":"of any type that conforms to the `Comparable` protocol. This example"},{"text":"creates a `PartialRangeFrom<Double>` instance that includes any value"},{"text":"greater than or equal to `5.0`."},{"text":""},{"text":"    let atLeastFive = 5.0..."},{"text":""},{"text":"    atLeastFive.contains(4.0)     // false"},{"text":"    atLeastFive.contains(5.0)     // true"},{"text":"    atLeastFive.contains(6.0)     // true"},{"text":""},{"text":"You can use this type of partial range of a collection's indices to"},{"text":"represent the range from the partial range's lower bound up to the end"},{"text":"of the collection."},{"text":""},{"text":"    let numbers = [10, 20, 30, 40, 50, 60, 70]"},{"text":"    print(numbers[3...])"},{"text":"    // Prints \"[40, 50, 60, 70]\""},{"text":""},{"text":"- Parameter minimum: The lower bound for the range."},{"text":""},{"text":"- Precondition: `minimum` must compare equal to itself (i.e. cannot be NaN)."}]},"functionSignature":{"parameters":[{"name":"minimum","declarationFragments":[{"kind":"identifier","spelling":"minimum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"PartialRangeFrom","preciseIdentifier":"s:s16PartialRangeFromV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..."},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"minimum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"PartialRangeFrom","preciseIdentifier":"s:s16PartialRangeFromV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE1ooiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","|(_:_:)"],"names":{"title":"|(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"|"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of performing a bitwise OR operation on the two given"},{"text":"values."},{"text":""},{"text":"A bitwise OR operation results in a value that has each bit set to `1`"},{"text":"where *one or both* of its arguments have that bit set to `1`. For"},{"text":"example:"},{"text":""},{"text":"    let x: UInt8 = 5          // 0b00000101"},{"text":"    let y: UInt8 = 14         // 0b00001110"},{"text":"    let z = x | y             // 0b00001111"},{"text":"    // z == 15"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer value."},{"text":"  - rhs: Another integer value."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"|"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE18truncatingIfNeededxqd___tcSzRd__lufc::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","init(truncatingIfNeeded:)"],"names":{"title":"init(truncatingIfNeeded:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"truncatingIfNeeded"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new instance from the bit pattern of the given instance by"},{"text":"truncating or sign-extending if needed to fit this type."},{"text":""},{"text":"When the bit width of `T` (the type of `source`) is equal to or greater"},{"text":"than this type's bit width, the result is the truncated"},{"text":"least-significant bits of `source`. For example, when converting a"},{"text":"16-bit value to an 8-bit type, only the lower 8 bits of `source` are"},{"text":"used."},{"text":""},{"text":"    let p: Int16 = -500"},{"text":"    // 'p' has a binary representation of 11111110_00001100"},{"text":"    let q = Int8(truncatingIfNeeded: p)"},{"text":"    // q == 12"},{"text":"    // 'q' has a binary representation of 00001100"},{"text":""},{"text":"When the bit width of `T` is less than this type's bit width, the result"},{"text":"is *sign-extended* to fill the remaining bits. That is, if `source` is"},{"text":"negative, the result is padded with ones; otherwise, the result is"},{"text":"padded with zeros."},{"text":""},{"text":"    let u: Int8 = 21"},{"text":"    // 'u' has a binary representation of 00010101"},{"text":"    let v = Int16(truncatingIfNeeded: u)"},{"text":"    // v == 21"},{"text":"    // 'v' has a binary representation of 00000000_00010101"},{"text":""},{"text":"    let w: Int8 = -21"},{"text":"    // 'w' has a binary representation of 11101011"},{"text":"    let x = Int16(truncatingIfNeeded: w)"},{"text":"    // x == -21"},{"text":"    // 'x' has a binary representation of 11111111_11101011"},{"text":"    let y = UInt16(truncatingIfNeeded: w)"},{"text":"    // y == 65515"},{"text":"    // 'y' has a binary representation of 11111111_11101011"},{"text":""},{"text":"- Parameter source: An integer to convert to this type."}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"T","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"truncatingIfNeeded"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"source"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE4aggeoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","&>>=(_:_:)"],"names":{"title":"&>>=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&>>="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Calculates the result of shifting a value's binary representation the"},{"text":"specified number of digits to the right, masking the shift amount to the"},{"text":"type's bit width, and stores the result in the left-hand-side variable."},{"text":""},{"text":"The `&>>=` operator performs a *masking shift*, where the value passed as"},{"text":"`rhs` is masked to produce a value in the range `0..<lhs.bitWidth`. The"},{"text":"shift is performed using this masked value."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the shift amount requires no masking."},{"text":""},{"text":"    var x: UInt8 = 30                 // 0b00011110"},{"text":"    x &>>= 2"},{"text":"    // x == 7                         // 0b00000111"},{"text":""},{"text":"However, if you use `19` as `rhs`, the operation first bitmasks `rhs` to"},{"text":"`3`, and then uses that masked value as the number of bits to shift `lhs`."},{"text":""},{"text":"    var y: UInt8 = 30                 // 0b00011110"},{"text":"    y &>>= 19"},{"text":"    // y == 3                         // 0b00000011"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the right. If `rhs` is"},{"text":"    outside the range `0..<lhs.bitWidth`, it is masked to produce a"},{"text":"    value within that range."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&>>="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE2geoiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8",">=(_:_:)"],"names":{"title":">=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first argument"},{"text":"is greater than or equal to that of the second argument."},{"text":""},{"text":"This is the default implementation of the greater-than-or-equal-to operator"},{"text":"(`>=`) for any type that conforms to `Comparable`."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: A value to compare."},{"text":"  - rhs: Another value to compare."},{"text":"- Returns: `true` if `lhs` is greater than or equal to `rhs`; otherwise,"},{"text":"  `false`."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.property","displayName":"Instance Property"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE12littleEndianxvp::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","littleEndian"],"names":{"title":"littleEndian","subHeading":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"littleEndian"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"The little-endian representation of this integer."},{"text":""},{"text":"If necessary, the byte order of this value is reversed from the typical"},{"text":"byte order of this integer type. On a little-endian platform, for any"},{"text":"integer `x`, `x == x.littleEndian`."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"littleEndian"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE3zzlopys16PartialRangeUpToVyxGxFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","..<(_:)"],"names":{"title":"..<(_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"PartialRangeUpTo","preciseIdentifier":"s:s16PartialRangeUpToV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a partial range up to, but not including, its upper bound."},{"text":""},{"text":"Use the prefix half-open range operator (prefix `..<`) to create a"},{"text":"partial range of any type that conforms to the `Comparable` protocol."},{"text":"This example creates a `PartialRangeUpTo<Double>` instance that includes"},{"text":"any value less than `5.0`."},{"text":""},{"text":"    let upToFive = ..<5.0"},{"text":""},{"text":"    upToFive.contains(3.14)       // true"},{"text":"    upToFive.contains(6.28)       // false"},{"text":"    upToFive.contains(5.0)        // false"},{"text":""},{"text":"You can use this type of partial range of a collection's indices to"},{"text":"represent the range from the start of the collection up to, but not"},{"text":"including, the partial range's upper bound."},{"text":""},{"text":"    let numbers = [10, 20, 30, 40, 50, 60, 70]"},{"text":"    print(numbers[..<3])"},{"text":"    // Prints \"[10, 20, 30]\""},{"text":""},{"text":"- Parameter maximum: The upper bound for the range."},{"text":""},{"text":"- Precondition: `maximum` must compare equal to itself (i.e. cannot be NaN)."}]},"functionSignature":{"parameters":[{"name":"maximum","declarationFragments":[{"kind":"identifier","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"PartialRangeUpTo","preciseIdentifier":"s:s16PartialRangeUpToV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"PartialRangeUpTo","preciseIdentifier":"s:s16PartialRangeUpToV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2ggoiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16",">>(_:_:)"],"names":{"title":">>(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"RHS"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"RHS"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the right."},{"text":""},{"text":"The `>>` operator performs a *smart shift*, which defines a result for a"},{"text":"shift of any value."},{"text":""},{"text":"- Using a negative value for `rhs` performs a left shift using"},{"text":"  `abs(rhs)`."},{"text":"- Using a value for `rhs` that is greater than or equal to the bit width"},{"text":"  of `lhs` is an *overshift*. An overshift results in `-1` for a"},{"text":"  negative value of `lhs` or `0` for a nonnegative value."},{"text":"- Using any other value for `rhs` performs a right shift on `lhs` by that"},{"text":"  amount."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the value is shifted right by two bits."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x >> 2"},{"text":"    // y == 7                         // 0b00000111"},{"text":""},{"text":"If you use `11` as `rhs`, `x` is overshifted such that all of its bits"},{"text":"are set to zero."},{"text":""},{"text":"    let z = x >> 11"},{"text":"    // z == 0                         // 0b00000000"},{"text":""},{"text":"Using a negative value as `rhs` is the same as performing a left shift"},{"text":"using `abs(rhs)`."},{"text":""},{"text":"    let a = x >> -3"},{"text":"    // a == 240                       // 0b11110000"},{"text":"    let b = x << 3"},{"text":"    // b == 240                       // 0b11110000"},{"text":""},{"text":"Right shift operations on negative values \"fill in\" the high bits with"},{"text":"ones instead of zeros."},{"text":""},{"text":"    let q: Int8 = -30                 // 0b11100010"},{"text":"    let r = q >> 2"},{"text":"    // r == -8                        // 0b11111000"},{"text":""},{"text":"    let s = q >> 11"},{"text":"    // s == -1                        // 0b11111111"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the right."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"RHS"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"RHS","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"RHS"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"RHS"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"RHS"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s18AdditiveArithmeticPsE2peoiyyxz_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","+=(_:_:)"],"names":{"title":"+=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"+="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"+="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3aseoiyyxz_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","&-=(_:_:)"],"names":{"title":"&-=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&-="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Subtracts the second value from the first and stores the difference in the"},{"text":"left-hand-side variable, wrapping any overflow."},{"text":""},{"text":"The masking subtraction assignment operator (`&-=`) silently wraps any"},{"text":"overflow that occurs during the operation. In the following example, the"},{"text":"difference of `10` and `21` is less than zero, the minimum representable"},{"text":"`UInt` value, so the result is the result is the partial value after"},{"text":"discarding the overflowing bits."},{"text":""},{"text":"    var x: Int8 = 21"},{"text":"    x &-= 10"},{"text":"    // x == 11"},{"text":"    var y: UInt8 = 10"},{"text":"    y &-= 21"},{"text":"    // y == 245 (after overflow)"},{"text":""},{"text":"For more about arithmetic with overflow operators, see [Overflow"},{"text":"Operators][overflow] in *[The Swift Programming Language][tspl]*."},{"text":""},{"text":"[overflow]: https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37"},{"text":"[tspl]: https://docs.swift.org/swift-book/"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: A numeric value."},{"text":"  - rhs: The value to subtract from `lhs`."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&-="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.property","displayName":"Instance Property"},"identifier":{"precise":"s:s23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","halfWidthCornerQuoted"],"names":{"title":"halfWidthCornerQuoted","subHeading":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"halfWidthCornerQuoted"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"String","preciseIdentifier":"s:SS"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"halfWidthCornerQuoted"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"String","preciseIdentifier":"s:SS"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SxsE1loiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","<(_:_:)"],"names":{"title":"<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"x","declarationFragments":[{"kind":"identifier","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"y","declarationFragments":[{"kind":"identifier","spelling":"y"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"y"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2eeoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","==(_:_:)"],"names":{"title":"==(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"=="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the two given values are"},{"text":"equal."},{"text":""},{"text":"You can check the equality of instances of any `BinaryInteger` types"},{"text":"using the equal-to operator (`==`). For example, you can test whether"},{"text":"the first `UInt8` value in a string's UTF-8 encoding is equal to the"},{"text":"first `UInt32` value in its Unicode scalar view:"},{"text":""},{"text":"    let gameName = \"Red Light, Green Light\""},{"text":"    if let firstUTF8 = gameName.utf8.first,"},{"text":"        let firstScalar = gameName.unicodeScalars.first?.value {"},{"text":"        print(\"First code values are equal: \\(firstUTF8 == firstScalar)\")"},{"text":"    }"},{"text":"    // Prints \"First code values are equal: true\""},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer to compare."},{"text":"  - rhs: Another integer to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"=="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.property","displayName":"Type Property"},"identifier":{"precise":"s:SUsE8isSignedSbvpZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","isSigned"],"names":{"title":"isSigned","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"isSigned"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"A Boolean value indicating whether this type is a signed integer type."},{"text":""},{"text":"This property is always `false` for unsigned integer types."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"isSigned"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufc::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","init(_:radix:)"],"names":{"title":"init(_:radix:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?<"},{"kind":"genericParameter","spelling":"S"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"S"},{"kind":"text","spelling":", "},{"kind":"externalParam","spelling":"radix"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new integer value from the given string and radix."},{"text":""},{"text":"The string passed as `text` may begin with a plus or minus sign character"},{"text":"(`+` or `-`), followed by one or more numeric digits (`0-9`) or letters"},{"text":"(`a-z` or `A-Z`). Parsing of the string is case insensitive."},{"text":""},{"text":"    let x = Int(\"123\")"},{"text":"    // x == 123"},{"text":""},{"text":"    let y = Int(\"-123\", radix: 8)"},{"text":"    // y == -83"},{"text":"    let y = Int(\"+123\", radix: 8)"},{"text":"    // y == +83"},{"text":""},{"text":"    let z = Int(\"07b\", radix: 16)"},{"text":"    // z == 123"},{"text":""},{"text":"If `text` is in an invalid format or contains characters that are out of"},{"text":"bounds for the given `radix`, or if the value it denotes in the given"},{"text":"`radix` is not representable, the result is `nil`. For example, the"},{"text":"following conversions result in `nil`:"},{"text":""},{"text":"    Int(\" 100\")                       // Includes whitespace"},{"text":"    Int(\"21-50\")                      // Invalid format"},{"text":"    Int(\"ff6600\")                     // Characters out of bounds"},{"text":"    Int(\"zzzzzzzzzzzzz\", radix: 36)   // Out of range"},{"text":""},{"text":"- Parameters:"},{"text":"  - text: The ASCII representation of a number in the radix passed as"},{"text":"    `radix`."},{"text":"  - radix: The radix, or base, to use for converting `text` to an integer"},{"text":"    value. `radix` must be in the range `2...36`. The default is 10."}]},"swiftGenerics":{"parameters":[{"name":"S","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"S","rhs":"StringProtocol","rhsPrecise":"s:Sy"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?<"},{"kind":"genericParameter","spelling":"S"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"_"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"text"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"S"},{"kind":"text","spelling":", "},{"kind":"externalParam","spelling":"radix"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"},{"kind":"text","spelling":" = 10) "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"S"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"StringProtocol","preciseIdentifier":"s:Sy"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE2asoiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","&-(_:_:)"],"names":{"title":"&-(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&-"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the difference of the two given values, wrapping the result in"},{"text":"case of any overflow."},{"text":""},{"text":"The overflow subtraction operator (`&-`) discards any bits that overflow"},{"text":"the fixed width of the integer type. In the following example, the"},{"text":"difference of `10` and `21` is less than zero, the minimum representable"},{"text":"`UInt` value, so the result is the partial value after discarding the"},{"text":"overflowing bits."},{"text":""},{"text":"    let x: UInt8 = 21 &- 10"},{"text":"    // x == 11"},{"text":"    let y: UInt8 = 10 &- 21"},{"text":"    // y == 245 (after overflow)"},{"text":""},{"text":"For more about arithmetic with overflow operators, see [Overflow"},{"text":"Operators][overflow] in *[The Swift Programming Language][tspl]*."},{"text":""},{"text":"[overflow]: https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37"},{"text":"[tspl]: https://docs.swift.org/swift-book/"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: A numeric value."},{"text":"  - rhs: The value to subtract from `lhs`."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&-"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE1goiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16",">(_:_:)"],"names":{"title":">(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first argument"},{"text":"is greater than that of the second argument."},{"text":""},{"text":"This is the default implementation of the greater-than operator (`>`) for"},{"text":"any type that conforms to `Comparable`."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: A value to compare."},{"text":"  - rhs: Another value to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2lloiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","<<(_:_:)"],"names":{"title":"<<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"RHS"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"RHS"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the left."},{"text":""},{"text":"The `<<` operator performs a *smart shift*, which defines a result for a"},{"text":"shift of any value."},{"text":""},{"text":"- Using a negative value for `rhs` performs a right shift using"},{"text":"  `abs(rhs)`."},{"text":"- Using a value for `rhs` that is greater than or equal to the bit width"},{"text":"  of `lhs` is an *overshift*, resulting in zero."},{"text":"- Using any other value for `rhs` performs a left shift on `lhs` by that"},{"text":"  amount."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the value is shifted left by two bits."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x << 2"},{"text":"    // y == 120                       // 0b01111000"},{"text":""},{"text":"If you use `11` as `rhs`, `x` is overshifted such that all of its bits"},{"text":"are set to zero."},{"text":""},{"text":"    let z = x << 11"},{"text":"    // z == 0                         // 0b00000000"},{"text":""},{"text":"Using a negative value as `rhs` is the same as performing a right shift"},{"text":"with `abs(rhs)`."},{"text":""},{"text":"    let a = x << -3"},{"text":"    // a == 3                         // 0b00000011"},{"text":"    let b = x >> 3"},{"text":"    // b == 3                         // 0b00000011"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the left."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"RHS"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"RHS","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"RHS"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"RHS"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"RHS"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE4alleoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","&<<=(_:_:)"],"names":{"title":"&<<=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&<<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the left, masking the shift amount to the"},{"text":"type's bit width, and stores the result in the left-hand-side variable."},{"text":""},{"text":"The `&<<=` operator performs a *masking shift*, where the value used as"},{"text":"`rhs` is masked to produce a value in the range `0..<lhs.bitWidth`. The"},{"text":"shift is performed using this masked value."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the shift amount requires no masking."},{"text":""},{"text":"    var x: UInt8 = 30                 // 0b00011110"},{"text":"    x &<<= 2"},{"text":"    // x == 120                       // 0b01111000"},{"text":""},{"text":"However, if you pass `19` as `rhs`, the method first bitmasks `rhs` to"},{"text":"`3`, and then uses that masked value as the number of bits to shift `lhs`."},{"text":""},{"text":"    var y: UInt8 = 30                 // 0b00011110"},{"text":"    y &<<= 19"},{"text":"    // y == 240                       // 0b11110000"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the left. If `rhs` is"},{"text":"    outside the range `0..<lhs.bitWidth`, it is masked to produce a"},{"text":"    value within that range."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&<<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE3zzzoiySNyxGx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","...(_:_:)"],"names":{"title":"...(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..."},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a closed range that contains both of its bounds."},{"text":""},{"text":"Use the closed range operator (`...`) to create a closed range of any type"},{"text":"that conforms to the `Comparable` protocol. This example creates a"},{"text":"`ClosedRange<Character>` from \"a\" up to, and including, \"z\"."},{"text":""},{"text":"    let lowercase = \"a\"...\"z\""},{"text":"    print(lowercase.contains(\"z\"))"},{"text":"    // Prints \"true\""},{"text":""},{"text":"- Parameters:"},{"text":"  - minimum: The lower bound for the range."},{"text":"  - maximum: The upper bound for the range."},{"text":""},{"text":"- Precondition: `minimum <= maximum`."}]},"functionSignature":{"parameters":[{"name":"minimum","declarationFragments":[{"kind":"identifier","spelling":"minimum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"maximum","declarationFragments":[{"kind":"identifier","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..."},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"minimum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:Sz12_RegexParserE9assertingxqd___tcSzRd__lufc::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","init(asserting:)"],"names":{"title":"init(asserting:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"asserting"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":")"}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"asserting"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"i"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2neoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","!=(_:_:)"],"names":{"title":"!=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"!="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the two given values are not"},{"text":"equal."},{"text":""},{"text":"You can check the inequality of instances of any `BinaryInteger` types"},{"text":"using the not-equal-to operator (`!=`). For example, you can test"},{"text":"whether the first `UInt8` value in a string's UTF-8 encoding is not"},{"text":"equal to the first `UInt32` value in its Unicode scalar view:"},{"text":""},{"text":"    let gameName = \"Red Light, Green Light\""},{"text":"    if let firstUTF8 = gameName.utf8.first,"},{"text":"        let firstScalar = gameName.unicodeScalars.first?.value {"},{"text":"        print(\"First code values are different: \\(firstUTF8 != firstScalar)\")"},{"text":"    }"},{"text":"    // Prints \"First code values are different: false\""},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer to compare."},{"text":"  - rhs: Another integer to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"!="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s18AdditiveArithmeticPsE1popyxxFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","+(_:)"],"names":{"title":"+(_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"+"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the given number unchanged."},{"text":""},{"text":"You can use the unary plus operator (`+`) to provide symmetry in your"},{"text":"code for positive numbers when also using the unary minus operator."},{"text":""},{"text":"    let x = -21"},{"text":"    let y = +21"},{"text":"    // x == -21"},{"text":"    // y == 21"},{"text":""},{"text":"- Returns: The given argument without any changes."}]},"functionSignature":{"parameters":[{"name":"x","declarationFragments":[{"kind":"identifier","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"+"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE1goiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16",">(_:_:)"],"names":{"title":">(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first"},{"text":"argument is greater than that of the second argument."},{"text":""},{"text":"You can compare instances of any `BinaryInteger` types using the"},{"text":"greater-than operator (`>`), even if the two instances are of different"},{"text":"types."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer to compare."},{"text":"  - rhs: Another integer to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.method","displayName":"Type Method"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE6random2inxSNyxG_tFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","random(in:)"],"names":{"title":"random(in:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">) -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a random value within the specified range."},{"text":""},{"text":"Use this method to generate an integer within a specific range. This"},{"text":"example creates three new values in the range `1...100`."},{"text":""},{"text":"    for _ in 1...3 {"},{"text":"        print(Int.random(in: 1...100))"},{"text":"    }"},{"text":"    // Prints \"53\""},{"text":"    // Prints \"64\""},{"text":"    // Prints \"5\""},{"text":""},{"text":"This method is equivalent to calling `random(in:using:)`, passing in the"},{"text":"system's default random generator."},{"text":""},{"text":"- Parameter range: The range in which to create a random value."},{"text":"- Returns: A random value within the bounds of `range`."}]},"functionSignature":{"parameters":[{"name":"in","internalName":"range","declarationFragments":[{"kind":"identifier","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">) -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3lleoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","<<=(_:_:)"],"names":{"title":"<<=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":")"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE3zzzopys19PartialRangeThroughVyxGxFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","...(_:)"],"names":{"title":"...(_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..."},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a partial range up to, and including, its upper bound."},{"text":""},{"text":"Use the prefix closed range operator (prefix `...`) to create a partial"},{"text":"range of any type that conforms to the `Comparable` protocol. This"},{"text":"example creates a `PartialRangeThrough<Double>` instance that includes"},{"text":"any value less than or equal to `5.0`."},{"text":""},{"text":"    let throughFive = ...5.0"},{"text":""},{"text":"    throughFive.contains(4.0)     // true"},{"text":"    throughFive.contains(5.0)     // true"},{"text":"    throughFive.contains(6.0)     // false"},{"text":""},{"text":"You can use this type of partial range of a collection's indices to"},{"text":"represent the range from the start of the collection up to, and"},{"text":"including, the partial range's upper bound."},{"text":""},{"text":"    let numbers = [10, 20, 30, 40, 50, 60, 70]"},{"text":"    print(numbers[...3])"},{"text":"    // Prints \"[10, 20, 30, 40]\""},{"text":""},{"text":"- Parameter maximum: The upper bound for the range."},{"text":""},{"text":"- Precondition: `maximum` must compare equal to itself (i.e. cannot be NaN)."}]},"functionSignature":{"parameters":[{"name":"maximum","declarationFragments":[{"kind":"identifier","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..."},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE2ggoiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16",">>(_:_:)"],"names":{"title":">>(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the right."},{"text":""},{"text":"The `>>` operator performs a *smart shift*, which defines a result for a"},{"text":"shift of any value."},{"text":""},{"text":"- Using a negative value for `rhs` performs a left shift using"},{"text":"  `abs(rhs)`."},{"text":"- Using a value for `rhs` that is greater than or equal to the bit width"},{"text":"  of `lhs` is an *overshift*. An overshift results in `-1` for a"},{"text":"  negative value of `lhs` or `0` for a nonnegative value."},{"text":"- Using any other value for `rhs` performs a right shift on `lhs` by that"},{"text":"  amount."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the value is shifted right by two bits."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x >> 2"},{"text":"    // y == 7                         // 0b00000111"},{"text":""},{"text":"If you use `11` as `rhs`, `x` is overshifted such that all of its bits"},{"text":"are set to zero."},{"text":""},{"text":"    let z = x >> 11"},{"text":"    // z == 0                         // 0b00000000"},{"text":""},{"text":"Using a negative value as `rhs` is the same as performing a left shift"},{"text":"using `abs(rhs)`."},{"text":""},{"text":"    let a = x >> -3"},{"text":"    // a == 240                       // 0b11110000"},{"text":"    let b = x << 3"},{"text":"    // b == 240                       // 0b11110000"},{"text":""},{"text":"Right shift operations on negative values \"fill in\" the high bits with"},{"text":"ones instead of zeros."},{"text":""},{"text":"    let q: Int8 = -30                 // 0b11100010"},{"text":"    let r = q >> 2"},{"text":"    // r == -8                        // 0b11111000"},{"text":""},{"text":"    let s = q >> 11"},{"text":"    // s == -1                        // 0b11111111"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the right."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.method","displayName":"Instance Method"},"identifier":{"precise":"s:SzsE20quotientAndRemainder10dividingByx0A0_x9remaindertx_tF::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","quotientAndRemainder(dividingBy:)"],"names":{"title":"quotientAndRemainder(dividingBy:)","subHeading":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"quotientAndRemainder"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"dividingBy"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> (quotient"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", remainder"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the quotient and remainder of this value divided by the given"},{"text":"value."},{"text":""},{"text":"Use this method to calculate the quotient and remainder of a division at"},{"text":"the same time."},{"text":""},{"text":"    let x = 1_000_000"},{"text":"    let (q, r) = x.quotientAndRemainder(dividingBy: 933)"},{"text":"    // q == 1071"},{"text":"    // r == 757"},{"text":""},{"text":"- Parameter rhs: The value to divide this value by."},{"text":"- Returns: A tuple containing the quotient and remainder of this value"},{"text":"  divided by `rhs`."}]},"functionSignature":{"parameters":[{"name":"dividingBy","internalName":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"text","spelling":"(quotient"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", remainder"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"quotientAndRemainder"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"dividingBy"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> (quotient"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", remainder"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3aggoiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","&>>(_:_:)"],"names":{"title":"&>>(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&>>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the right, masking the shift amount to the"},{"text":"type's bit width."},{"text":""},{"text":"Use the masking right shift operator (`&>>`) when you need to perform a"},{"text":"shift and are sure that the shift amount is in the range"},{"text":"`0..<lhs.bitWidth`. Before shifting, the masking right shift operator"},{"text":"masks the shift to this range. The shift is performed using this masked"},{"text":"value."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the shift amount requires no masking."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x &>> 2"},{"text":"    // y == 7                         // 0b00000111"},{"text":""},{"text":"However, if you use `8` as the shift amount, the method first masks the"},{"text":"shift amount to zero, and then performs the shift, resulting in no change"},{"text":"to the original value."},{"text":""},{"text":"    let z = x &>> 8"},{"text":"    // z == 30                        // 0b00011110"},{"text":""},{"text":"If the bit width of the shifted integer type is a power of two, masking"},{"text":"is performed using a bitmask; otherwise, masking is performed using a"},{"text":"modulo operation."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the right. If `rhs` is"},{"text":"    outside the range `0..<lhs.bitWidth`, it is masked to produce a"},{"text":"    value within that range."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&>>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE1xoiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","^(_:_:)"],"names":{"title":"^(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"^"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of performing a bitwise XOR operation on the two given"},{"text":"values."},{"text":""},{"text":"A bitwise XOR operation, also known as an exclusive OR operation, results"},{"text":"in a value that has each bit set to `1` where *one or the other but not"},{"text":"both* of its arguments had that bit set to `1`. For example:"},{"text":""},{"text":"    let x: UInt8 = 5          // 0b00000101"},{"text":"    let y: UInt8 = 14         // 0b00001110"},{"text":"    let z = x ^ y             // 0b00001011"},{"text":"    // z == 11"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer value."},{"text":"  - rhs: Another integer value."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"^"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:SUss17FixedWidthIntegerRzrlEyxqd__cSzRd__lufc::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","init(_:)"],"names":{"title":"init(_:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new instance from the given integer."},{"text":""},{"text":"Use this initializer to convert from another integer type when you know"},{"text":"the value is within the bounds of this type. Passing a value that can't"},{"text":"be represented in this type results in a runtime error."},{"text":""},{"text":"In the following example, the constant `y` is successfully created from"},{"text":"`x`, an `Int` instance with a value of `100`. Because the `Int8` type"},{"text":"can represent `127` at maximum, the attempt to create `z` with a value"},{"text":"of `1000` results in a runtime error."},{"text":""},{"text":"    let x = 100"},{"text":"    let y = Int8(x)"},{"text":"    // y == 100"},{"text":"    let z = Int8(x * 10)"},{"text":"    // Error: Not enough bits to represent the given value"},{"text":""},{"text":"- Parameter source: A value to convert to this type of integer. The value"},{"text":"  passed as `source` must be representable in this type."}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Self","rhs":"FixedWidthInteger","rhsPrecise":"s:s17FixedWidthIntegerP"},{"kind":"conformance","lhs":"T","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Self","rhs":"FixedWidthInteger","rhsPrecise":"s:s17FixedWidthIntegerP"}]},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"_"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"source"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s18AdditiveArithmeticPsE2seoiyyxz_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","-=(_:_:)"],"names":{"title":"-=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"-="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"-="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE12littleEndianxx_tcfc::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","init(littleEndian:)"],"names":{"title":"init(littleEndian:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"littleEndian"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates an integer from its little-endian representation, changing the"},{"text":"byte order if necessary."},{"text":""},{"text":"- Parameter value: A value to use as the little-endian representation of"},{"text":"  the new integer."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"littleEndian"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"value"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE2amoiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","&*(_:_:)"],"names":{"title":"&*(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&*"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the product of the two given values, wrapping the result in case"},{"text":"of any overflow."},{"text":""},{"text":"The overflow multiplication operator (`&*`) discards any bits that"},{"text":"overflow the fixed width of the integer type. In the following example,"},{"text":"the product of `10` and `50` is greater than the maximum representable"},{"text":"`Int8` value, so the result is the partial value after discarding the"},{"text":"overflowing bits."},{"text":""},{"text":"    let x: Int8 = 10 &* 5"},{"text":"    // x == 50"},{"text":"    let y: Int8 = 10 &* 50"},{"text":"    // y == -12 (after overflow)"},{"text":""},{"text":"For more about arithmetic with overflow operators, see [Overflow"},{"text":"Operators][overflow] in *[The Swift Programming Language][tspl]*."},{"text":""},{"text":"[overflow]: https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37"},{"text":"[tspl]: https://docs.swift.org/swift-book/"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The first value to multiply."},{"text":"  - rhs: The second value to multiply."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&*"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE9bigEndianxx_tcfc::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","init(bigEndian:)"],"names":{"title":"init(bigEndian:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"bigEndian"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates an integer from its big-endian representation, changing the byte"},{"text":"order if necessary."},{"text":""},{"text":"- Parameter value: A value to use as the big-endian representation of the"},{"text":"  new integer."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"bigEndian"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"value"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE1aoiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","&(_:_:)"],"names":{"title":"&(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of performing a bitwise AND operation on the two given"},{"text":"values."},{"text":""},{"text":"A bitwise AND operation results in a value that has each bit set to `1`"},{"text":"where *both* of its arguments have that bit set to `1`. For example:"},{"text":""},{"text":"    let x: UInt8 = 5          // 0b00000101"},{"text":"    let y: UInt8 = 14         // 0b00001110"},{"text":"    let z = x & y             // 0b00000100"},{"text":"    // z == 4"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer value."},{"text":"  - rhs: Another integer value."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:SzsExycfc::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","init()"],"names":{"title":"init()","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"()"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new value equal to zero."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"()"}],"accessLevel":"public"},{"kind":{"identifier":"swift.typealias","displayName":"Type Alias"},"identifier":{"precise":"s:Sa7GrammarAA11ParsingRuleRzlE8Terminala","interfaceLanguage":"swift"},"pathComponents":["Array","Terminal"],"names":{"title":"Array.Terminal","navigator":[{"kind":"identifier","spelling":"Terminal"}],"subHeading":[{"kind":"keyword","spelling":"typealias"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"Terminal"}]},"swiftGenerics":{"parameters":[{"name":"Element","index":0,"depth":0}],"constraints":[{"kind":"conformance","lhs":"Element","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Element","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"}]},"declarationFragments":[{"kind":"keyword","spelling":"typealias"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"Terminal"},{"kind":"text","spelling":" = "},{"kind":"typeIdentifier","spelling":"Element"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Terminal"}],"accessLevel":"public","location":{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/parsingrule.swift","position":{"line":72,"character":14}}},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SxsE2eeoiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","==(_:_:)"],"names":{"title":"==(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"=="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"x","declarationFragments":[{"kind":"identifier","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"y","declarationFragments":[{"kind":"identifier","spelling":"y"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"=="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"y"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3ameoiyyxz_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","&*=(_:_:)"],"names":{"title":"&*=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&*="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Multiplies two values and stores the result in the left-hand-side"},{"text":"variable, wrapping any overflow."},{"text":""},{"text":"The masking multiplication assignment operator (`&*=`) silently wraps"},{"text":"any overflow that occurs during the operation. In the following example,"},{"text":"the product of `10` and `50` is greater than the maximum representable"},{"text":"`Int8` value, so the result is the partial value after discarding the"},{"text":"overflowing bits."},{"text":""},{"text":"    var x: Int8 = 10"},{"text":"    x &*= 5"},{"text":"    // x == 50"},{"text":"    var y: Int8 = 10"},{"text":"    y &*= 50"},{"text":"    // y == -12 (after overflow)"},{"text":""},{"text":"For more about arithmetic with overflow operators, see [Overflow"},{"text":"Operators][overflow] in *[The Swift Programming Language][tspl]*."},{"text":""},{"text":"[overflow]: https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37"},{"text":"[tspl]: https://docs.swift.org/swift-book/"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The first value to multiply."},{"text":"  - rhs: The second value to multiply."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&*="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2geoiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8",">=(_:_:)"],"names":{"title":">=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.method","displayName":"Instance Method"},"identifier":{"precise":"s:SzsE8distance2toSix_tF::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","distance(to:)"],"names":{"title":"distance(to:)","subHeading":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"distance"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"to"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the distance from this value to the given value, expressed as a"},{"text":"stride."},{"text":""},{"text":"For two values `x` and `y`, and a distance `n = x.distance(to: y)`,"},{"text":"`x.advanced(by: n) == y`."},{"text":""},{"text":"- Parameter other: The value to calculate the distance to."},{"text":"- Returns: The distance from this value to `other`."}]},"functionSignature":{"parameters":[{"name":"to","internalName":"other","declarationFragments":[{"kind":"identifier","spelling":"other"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"distance"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"to"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"other"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE1goiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16",">(_:_:)"],"names":{"title":">(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s27ExpressibleByIntegerLiteralPss01_ab7BuiltincD0RzrlE07integerD0xx_tcfc::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","init(integerLiteral:)"],"names":{"title":"init(integerLiteral:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"integerLiteral"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"swiftGenerics":{"constraints":[{"kind":"conformance","lhs":"Self","rhs":"_ExpressibleByBuiltinIntegerLiteral","rhsPrecise":"s:s35_ExpressibleByBuiltinIntegerLiteralP"}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Self","rhs":"_ExpressibleByBuiltinIntegerLiteral","rhsPrecise":"s:s35_ExpressibleByBuiltinIntegerLiteralP"}]},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"integerLiteral"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"value"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3alloiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","&<<(_:_:)"],"names":{"title":"&<<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the left, masking the shift amount to the"},{"text":"type's bit width."},{"text":""},{"text":"Use the masking left shift operator (`&<<`) when you need to perform a"},{"text":"shift and are sure that the shift amount is in the range"},{"text":"`0..<lhs.bitWidth`. Before shifting, the masking left shift operator"},{"text":"masks the shift to this range. The shift is performed using this masked"},{"text":"value."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the shift amount requires no masking."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x &<< 2"},{"text":"    // y == 120                       // 0b01111000"},{"text":""},{"text":"However, if you use `8` as the shift amount, the method first masks the"},{"text":"shift amount to zero, and then performs the shift, resulting in no change"},{"text":"to the original value."},{"text":""},{"text":"    let z = x &<< 8"},{"text":"    // z == 30                        // 0b00011110"},{"text":""},{"text":"If the bit width of the shifted integer type is a power of two, masking"},{"text":"is performed using a bitmask; otherwise, masking is performed using a"},{"text":"modulo operation."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the left. If `rhs` is"},{"text":"    outside the range `0..<lhs.bitWidth`, it is masked to produce a"},{"text":"    value within that range."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE2leoiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","<=(_:_:)"],"names":{"title":"<=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first argument"},{"text":"is less than or equal to that of the second argument."},{"text":""},{"text":"This is the default implementation of the less-than-or-equal-to"},{"text":"operator (`<=`) for any type that conforms to `Comparable`."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: A value to compare."},{"text":"  - rhs: Another value to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE7exactlyxSgqd___tcSBRd__lufc::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","init(exactly:)"],"names":{"title":"init(exactly:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"exactly"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates an integer from the given floating-point value, if it can be"},{"text":"represented exactly."},{"text":""},{"text":"If the value passed as `source` is not representable exactly, the result"},{"text":"is `nil`. In the following example, the constant `x` is successfully"},{"text":"created from a value of `21.0`, while the attempt to initialize the"},{"text":"constant `y` from `21.5` fails:"},{"text":""},{"text":"    let x = Int(exactly: 21.0)"},{"text":"    // x == Optional(21)"},{"text":"    let y = Int(exactly: 21.5)"},{"text":"    // y == nil"},{"text":""},{"text":"- Parameter source: A floating-point value to convert to an integer."}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"T","rhs":"BinaryFloatingPoint","rhsPrecise":"s:SB"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"exactly"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"source"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryFloatingPoint","preciseIdentifier":"s:SB"}],"accessLevel":"public"},{"kind":{"identifier":"swift.method","displayName":"Instance Method"},"identifier":{"precise":"s:SzsE8advanced2byxSi_tF::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","advanced(by:)"],"names":{"title":"advanced(by:)","subHeading":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"advanced"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"by"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a value that is offset the specified distance from this value."},{"text":""},{"text":"Use the `advanced(by:)` method in generic code to offset a value by a"},{"text":"specified distance. If you're working directly with numeric values, use"},{"text":"the addition operator (`+`) instead of this method."},{"text":""},{"text":"For a value `x`, a distance `n`, and a value `y = x.advanced(by: n)`,"},{"text":"`x.distance(to: y) == n`."},{"text":""},{"text":"- Parameter n: The distance to advance this value."},{"text":"- Returns: A value that is offset from this value by `n`."}]},"functionSignature":{"parameters":[{"name":"by","internalName":"n","declarationFragments":[{"kind":"identifier","spelling":"n"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"advanced"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"by"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"n"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2leoiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","<=(_:_:)"],"names":{"title":"<=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2leoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","<=(_:_:)"],"names":{"title":"<=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first"},{"text":"argument is less than or equal to that of the second argument."},{"text":""},{"text":"You can compare instances of any `BinaryInteger` types using the"},{"text":"less-than-or-equal-to operator (`<=`), even if the two instances are of"},{"text":"different types."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer to compare."},{"text":"  - rhs: Another integer to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.method","displayName":"Instance Method"},"identifier":{"precise":"s:SzsE10isMultiple2ofSbx_tF::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","isMultiple(of:)"],"names":{"title":"isMultiple(of:)","subHeading":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"isMultiple"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"of"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"of","internalName":"other","declarationFragments":[{"kind":"identifier","spelling":"other"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"isMultiple"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"of"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"other"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.property","displayName":"Type Property"},"identifier":{"precise":"s:SUss17FixedWidthIntegerRzrlE3maxxvpZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","max"],"names":{"title":"max","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"max"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"The maximum representable integer in this type."},{"text":""},{"text":"For unsigned integer types, this value is `(2 ** bitWidth) - 1`, where"},{"text":"`**` is exponentiation."}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Self","rhs":"FixedWidthInteger","rhsPrecise":"s:s17FixedWidthIntegerP"}]},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"max"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.method","displayName":"Type Method"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE6random2in5usingxSnyxG_qd__ztSGRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","random(in:using:)"],"names":{"title":"random(in:using:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">, "},{"kind":"externalParam","spelling":"using"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a random value within the specified range, using the given"},{"text":"generator as a source for randomness."},{"text":""},{"text":"Use this method to generate an integer within a specific range when you"},{"text":"are using a custom random number generator. This example creates three"},{"text":"new values in the range `1..<100`."},{"text":""},{"text":"    for _ in 1...3 {"},{"text":"        print(Int.random(in: 1..<100, using: &myGenerator))"},{"text":"    }"},{"text":"    // Prints \"7\""},{"text":"    // Prints \"44\""},{"text":"    // Prints \"21\""},{"text":""},{"text":"- Note: The algorithm used to create random values may change in a future"},{"text":"  version of Swift. If you're passing a generator that results in the"},{"text":"  same sequence of integer values each time you run your program, that"},{"text":"  sequence may change when your program is compiled using a different"},{"text":"  version of Swift."},{"text":""},{"text":"- Parameters:"},{"text":"  - range: The range in which to create a random value."},{"text":"    `range` must not be empty."},{"text":"  - generator: The random number generator to use when creating the"},{"text":"    new random value."},{"text":"- Returns: A random value within the bounds of `range`."}]},"functionSignature":{"parameters":[{"name":"in","internalName":"range","declarationFragments":[{"kind":"identifier","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},{"name":"using","internalName":"generator","declarationFragments":[{"kind":"identifier","spelling":"generator"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"T","rhs":"RandomNumberGenerator","rhsPrecise":"s:SG"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">, "},{"kind":"externalParam","spelling":"using"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"generator"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"RandomNumberGenerator","preciseIdentifier":"s:SG"}],"accessLevel":"public"},{"kind":{"identifier":"swift.property","displayName":"Instance Property"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE9bigEndianxvp::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","bigEndian"],"names":{"title":"bigEndian","subHeading":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"bigEndian"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"The big-endian representation of this integer."},{"text":""},{"text":"If necessary, the byte order of this value is reversed from the typical"},{"text":"byte order of this integer type. On a big-endian platform, for any"},{"text":"integer `x`, `x == x.bigEndian`."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"bigEndian"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.method","displayName":"Type Method"},"identifier":{"precise":"s:Sa7GrammarAA11ParsingRuleRzlE5parseySay12ConstructionQzGAA0B5InputVyqd__GzAA0B11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__8TerminalRtzlFZ","interfaceLanguage":"swift"},"pathComponents":["Array","parse(_:)"],"names":{"title":"parse(_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"parse"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Diagnostics"},{"kind":"text","spelling":">("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"ParsingInput","preciseIdentifier":"s:7Grammar12ParsingInputV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Diagnostics"},{"kind":"text","spelling":">) -> ["},{"kind":"typeIdentifier","spelling":"Element"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Construction"},{"kind":"text","spelling":"]"}]},"functionSignature":{"parameters":[{"name":"input","declarationFragments":[{"kind":"identifier","spelling":"input"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"ParsingInput","preciseIdentifier":"s:7Grammar12ParsingInputV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Diagnostics"},{"kind":"text","spelling":">"}]}],"returns":[{"kind":"text","spelling":"["},{"kind":"typeIdentifier","spelling":"Element"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Construction"},{"kind":"text","spelling":"]"}]},"swiftGenerics":{"parameters":[{"name":"Element","index":0,"depth":0},{"name":"Diagnostics","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Element","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"},{"kind":"conformance","lhs":"Diagnostics","rhs":"ParsingDiagnostics","rhsPrecise":"s:7Grammar18ParsingDiagnosticsP"},{"kind":"sameType","lhs":"Element.Location","rhs":"Diagnostics.Source.Index"},{"kind":"sameType","lhs":"Element.Terminal","rhs":"Diagnostics.Source.Element"}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Element","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"}]},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"parse"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Diagnostics"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"_"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"input"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"ParsingInput","preciseIdentifier":"s:7Grammar12ParsingInputV"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Diagnostics"},{"kind":"text","spelling":">) -> ["},{"kind":"typeIdentifier","spelling":"Element"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Construction"},{"kind":"text","spelling":"] "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Diagnostics"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"ParsingDiagnostics","preciseIdentifier":"s:7Grammar18ParsingDiagnosticsP"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Element"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Location"},{"kind":"text","spelling":" == "},{"kind":"typeIdentifier","spelling":"Diagnostics"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Source"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Index"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Element"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Terminal"},{"kind":"text","spelling":" == "},{"kind":"typeIdentifier","spelling":"Diagnostics"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Source"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Element"}],"accessLevel":"public","location":{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/parsingrule.swift","position":{"line":75,"character":9}}},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsEyxqd__cSBRd__lufc::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","init(_:)"],"names":{"title":"init(_:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates an integer from the given floating-point value, rounding toward"},{"text":"zero. Any fractional part of the value passed as `source` is removed."},{"text":""},{"text":"    let x = Int(21.5)"},{"text":"    // x == 21"},{"text":"    let y = Int(-21.5)"},{"text":"    // y == -21"},{"text":""},{"text":"If `source` is outside the bounds of this type after rounding toward"},{"text":"zero, a runtime error may occur."},{"text":""},{"text":"    let z = UInt(-21.5)"},{"text":"    // Error: ...outside the representable range"},{"text":""},{"text":"- Parameter source: A floating-point value to convert to an integer."},{"text":"  `source` must be representable in this type after rounding toward"},{"text":"  zero."}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"T","rhs":"BinaryFloatingPoint","rhsPrecise":"s:SB"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"_"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"source"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryFloatingPoint","preciseIdentifier":"s:SB"}],"accessLevel":"public"},{"kind":{"identifier":"swift.typealias","displayName":"Type Alias"},"identifier":{"precise":"s:Sa7GrammarAA11ParsingRuleRzlE8Locationa","interfaceLanguage":"swift"},"pathComponents":["Array","Location"],"names":{"title":"Array.Location","navigator":[{"kind":"identifier","spelling":"Location"}],"subHeading":[{"kind":"keyword","spelling":"typealias"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"Location"}]},"swiftGenerics":{"parameters":[{"name":"Element","index":0,"depth":0}],"constraints":[{"kind":"conformance","lhs":"Element","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Element","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"}]},"declarationFragments":[{"kind":"keyword","spelling":"typealias"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"Location"},{"kind":"text","spelling":" = "},{"kind":"typeIdentifier","spelling":"Element"},{"kind":"text","spelling":"."},{"kind":"typeIdentifier","spelling":"Location"}],"accessLevel":"public","location":{"uri":"file:///home/klossy/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/parsingrule.swift","position":{"line":70,"character":14}}},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE2lloiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","<<(_:_:)"],"names":{"title":"<<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the left."},{"text":""},{"text":"The `<<` operator performs a *smart shift*, which defines a result for a"},{"text":"shift of any value."},{"text":""},{"text":"- Using a negative value for `rhs` performs a right shift using"},{"text":"  `abs(rhs)`."},{"text":"- Using a value for `rhs` that is greater than or equal to the bit width"},{"text":"  of `lhs` is an *overshift*, resulting in zero."},{"text":"- Using any other value for `rhs` performs a left shift on `lhs` by that"},{"text":"  amount."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the value is shifted left by two bits."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x << 2"},{"text":"    // y == 120                       // 0b01111000"},{"text":""},{"text":"If you use `11` as `rhs`, `x` is overshifted such that all of its bits"},{"text":"are set to zero."},{"text":""},{"text":"    let z = x << 11"},{"text":"    // z == 0                         // 0b00000000"},{"text":""},{"text":"Using a negative value as `rhs` is the same as performing a right shift"},{"text":"with `abs(rhs)`."},{"text":""},{"text":"    let a = x << -3"},{"text":"    // a == 3                         // 0b00000011"},{"text":"    let b = x >> 3"},{"text":"    // b == 3                         // 0b00000011"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the left."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3alloiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","&<<(_:_:)"],"names":{"title":"&<<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the left, masking the shift amount to the"},{"text":"type's bit width."},{"text":""},{"text":"Use the masking left shift operator (`&<<`) when you need to perform a"},{"text":"shift and are sure that the shift amount is in the range"},{"text":"`0..<lhs.bitWidth`. Before shifting, the masking left shift operator"},{"text":"masks the shift to this range. The shift is performed using this masked"},{"text":"value."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the shift amount requires no masking."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x &<< 2"},{"text":"    // y == 120                       // 0b01111000"},{"text":""},{"text":"However, if you use `8` as the shift amount, the method first masks the"},{"text":"shift amount to zero, and then performs the shift, resulting in no change"},{"text":"to the original value."},{"text":""},{"text":"    let z = x &<< 8"},{"text":"    // z == 30                        // 0b00011110"},{"text":""},{"text":"If the bit width of the shifted integer type is a power of two, masking"},{"text":"is performed using a bitmask; otherwise, masking is performed using a"},{"text":"modulo operation."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the left. If `rhs` is"},{"text":"    outside the range `0..<lhs.bitWidth`, it is masked to produce a"},{"text":"    value within that range."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&<<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.property","displayName":"Type Property"},"identifier":{"precise":"s:s18AdditiveArithmeticPss27ExpressibleByIntegerLiteralRzrlE4zeroxvpZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","zero"],"names":{"title":"zero","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"zero"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"The zero value."},{"text":""},{"text":"Zero is the identity element for addition. For any value,"},{"text":"`x + .zero == x` and `.zero + x == x`."}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Self","rhs":"ExpressibleByIntegerLiteral","rhsPrecise":"s:s27ExpressibleByIntegerLiteralP"}]},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"zero"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.method","displayName":"Type Method"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE6random2inxSnyxG_tFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","random(in:)"],"names":{"title":"random(in:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">) -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a random value within the specified range."},{"text":""},{"text":"Use this method to generate an integer within a specific range. This"},{"text":"example creates three new values in the range `1..<100`."},{"text":""},{"text":"    for _ in 1...3 {"},{"text":"        print(Int.random(in: 1..<100))"},{"text":"    }"},{"text":"    // Prints \"53\""},{"text":"    // Prints \"64\""},{"text":"    // Prints \"5\""},{"text":""},{"text":"This method is equivalent to calling the version that takes a generator,"},{"text":"passing in the system's default random generator."},{"text":""},{"text":"- Parameter range: The range in which to create a random value."},{"text":"  `range` must not be empty."},{"text":"- Returns: A random value within the bounds of `range`."}]},"functionSignature":{"parameters":[{"name":"in","internalName":"range","declarationFragments":[{"kind":"identifier","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"random"},{"kind":"text","spelling":"("},{"kind":"externalParam","spelling":"in"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"range"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">) -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SLsE3zzloiySnyxGx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","..<(_:_:)"],"names":{"title":"..<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a half-open range that contains its lower bound but not its upper"},{"text":"bound."},{"text":""},{"text":"Use the half-open range operator (`..<`) to create a range of any type"},{"text":"that conforms to the `Comparable` protocol. This example creates a"},{"text":"`Range<Double>` from zero up to, but not including, 5.0."},{"text":""},{"text":"    let lessThanFive = 0.0..<5.0"},{"text":"    print(lessThanFive.contains(3.14))  // Prints \"true\""},{"text":"    print(lessThanFive.contains(5.0))   // Prints \"false\""},{"text":""},{"text":"- Parameters:"},{"text":"  - minimum: The lower bound for the range."},{"text":"  - maximum: The upper bound for the range."},{"text":""},{"text":"- Precondition: `minimum <= maximum`."}]},"functionSignature":{"parameters":[{"name":"minimum","declarationFragments":[{"kind":"identifier","spelling":"minimum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"maximum","declarationFragments":[{"kind":"identifier","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"..<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"minimum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"maximum"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","spelling":"<"},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":">"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3ggeoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16",">>=(_:_:)"],"names":{"title":">>=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">>="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":")"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":">>="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsEyxSgSScfc::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","init(_:)"],"names":{"title":"init(_:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?("},{"kind":"typeIdentifier","spelling":"String","preciseIdentifier":"s:SS"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new integer value from the given string."},{"text":""},{"text":"The string passed as `description` may begin with a plus or minus sign"},{"text":"character (`+` or `-`), followed by one or more numeric digits (`0-9`)."},{"text":""},{"text":"    let x = Int(\"123\")"},{"text":"    // x == 123"},{"text":""},{"text":"If `description` is in an invalid format, or if the value it denotes in"},{"text":"base 10 is not representable, the result is `nil`. For example, the"},{"text":"following conversions result in `nil`:"},{"text":""},{"text":"    Int(\" 100\")                       // Includes whitespace"},{"text":"    Int(\"21-50\")                      // Invalid format"},{"text":"    Int(\"ff6600\")                     // Characters out of bounds"},{"text":"    Int(\"10000000000000000000000000\") // Out of range"},{"text":""},{"text":"- Parameter description: The ASCII representation of a number."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?("},{"kind":"externalParam","spelling":"_"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"description"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"String","preciseIdentifier":"s:SS"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.property","displayName":"Instance Property"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE03bitB0Sivp::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","bitWidth"],"names":{"title":"bitWidth","subHeading":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"bitWidth"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"}]},"docComment":{"module":"Swift","lines":[{"text":"The number of bits in the binary representation of this value."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"bitWidth"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Int","preciseIdentifier":"s:Si"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.type.property","displayName":"Type Property"},"identifier":{"precise":"s:SUss17FixedWidthIntegerRzrlE3minxvpZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","min"],"names":{"title":"min","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"min"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"The minimum representable integer in this type."},{"text":""},{"text":"For unsigned integer types, this value is always `0`."}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Self","rhs":"FixedWidthInteger","rhsPrecise":"s:s17FixedWidthIntegerP"}]},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"min"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE8clampingxqd___tcSzRd__lufc::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","init(clamping:)"],"names":{"title":"init(clamping:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"clamping"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new instance with the representable value that's closest to the"},{"text":"given integer."},{"text":""},{"text":"If the value passed as `source` is greater than the maximum representable"},{"text":"value in this type, the result is the type's `max` value. If `source` is"},{"text":"less than the smallest representable value in this type, the result is"},{"text":"the type's `min` value."},{"text":""},{"text":"In this example, `x` is initialized as an `Int8` instance by clamping"},{"text":"`500` to the range `-128...127`, and `y` is initialized as a `UInt`"},{"text":"instance by clamping `-500` to the range `0...UInt.max`."},{"text":""},{"text":"    let x = Int8(clamping: 500)"},{"text":"    // x == 127"},{"text":"    // x == Int8.max"},{"text":""},{"text":"    let y = UInt(clamping: -500)"},{"text":"    // y == 0"},{"text":""},{"text":"- Parameter source: An integer to convert to this type."}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Other","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"clamping"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"source"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE1topyxxFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","~(_:)"],"names":{"title":"~(_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"~"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the inverse of the bits set in the argument."},{"text":""},{"text":"The bitwise NOT operator (`~`) is a prefix operator that returns a value"},{"text":"in which all the bits of its argument are flipped: Bits that are `1` in"},{"text":"the argument are `0` in the result, and bits that are `0` in the argument"},{"text":"are `1` in the result. This is equivalent to the inverse of a set. For"},{"text":"example:"},{"text":""},{"text":"    let x: UInt8 = 5        // 0b00000101"},{"text":"    let notX = ~x           // 0b11111010"},{"text":""},{"text":"Performing a bitwise NOT operation on 0 returns a value with every bit"},{"text":"set to `1`."},{"text":""},{"text":"    let allOnes = ~UInt8.min   // 0b11111111"},{"text":""},{"text":"- Complexity: O(1)."}]},"functionSignature":{"parameters":[{"name":"x","declarationFragments":[{"kind":"identifier","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"~"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"x"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3aggoiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","&>>(_:_:)"],"names":{"title":"&>>(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&>>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the result of shifting a value's binary representation the"},{"text":"specified number of digits to the right, masking the shift amount to the"},{"text":"type's bit width."},{"text":""},{"text":"Use the masking right shift operator (`&>>`) when you need to perform a"},{"text":"shift and are sure that the shift amount is in the range"},{"text":"`0..<lhs.bitWidth`. Before shifting, the masking right shift operator"},{"text":"masks the shift to this range. The shift is performed using this masked"},{"text":"value."},{"text":""},{"text":"The following example defines `x` as an instance of `UInt8`, an 8-bit,"},{"text":"unsigned integer type. If you use `2` as the right-hand-side value in an"},{"text":"operation on `x`, the shift amount requires no masking."},{"text":""},{"text":"    let x: UInt8 = 30                 // 0b00011110"},{"text":"    let y = x &>> 2"},{"text":"    // y == 7                         // 0b00000111"},{"text":""},{"text":"However, if you use `8` as the shift amount, the method first masks the"},{"text":"shift amount to zero, and then performs the shift, resulting in no change"},{"text":"to the original value."},{"text":""},{"text":"    let z = x &>> 8"},{"text":"    // z == 30                        // 0b00011110"},{"text":""},{"text":"If the bit width of the shifted integer type is a power of two, masking"},{"text":"is performed using a bitmask; otherwise, masking is performed using a"},{"text":"modulo operation."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The value to shift."},{"text":"  - rhs: The number of bits to shift `lhs` to the right. If `rhs` is"},{"text":"    outside the range `0..<lhs.bitWidth`, it is masked to produce a"},{"text":"    value within that range."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&>>"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE3apeoiyyxz_xtFZ::SYNTHESIZED::s:s5UInt8V","interfaceLanguage":"swift"},"pathComponents":["UInt8","&+=(_:_:)"],"names":{"title":"&+=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&+="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Adds two values and stores the result in the left-hand-side variable,"},{"text":"wrapping any overflow."},{"text":""},{"text":"The masking addition assignment operator (`&+=`) silently wraps any"},{"text":"overflow that occurs during the operation. In the following example, the"},{"text":"sum of `100` and `121` is greater than the maximum representable `Int8`"},{"text":"value, so the result is the partial value after discarding the"},{"text":"overflowing bits."},{"text":""},{"text":"    var x: Int8 = 10"},{"text":"    x &+= 21"},{"text":"    // x == 31"},{"text":"    var y: Int8 = 100"},{"text":"    y &+= 121"},{"text":"    // y == -35 (after overflow)"},{"text":""},{"text":"For more about arithmetic with overflow operators, see [Overflow"},{"text":"Operators][overflow] in *[The Swift Programming Language][tspl]*."},{"text":""},{"text":"[overflow]: https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37"},{"text":"[tspl]: https://docs.swift.org/swift-book/"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The first value to add."},{"text":"  - rhs: The second value to add."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"text","spelling":"()"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&+="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"keyword","spelling":"inout"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":")"}],"accessLevel":"public"},{"kind":{"identifier":"swift.property","displayName":"Instance Property"},"identifier":{"precise":"s:SzsE11descriptionSSvp::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","description"],"names":{"title":"description","subHeading":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"description"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"String","preciseIdentifier":"s:SS"}]},"docComment":{"module":"Swift","lines":[{"text":"A textual representation of this value."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"description"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"String","preciseIdentifier":"s:SS"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE1loiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","<(_:_:)"],"names":{"title":"<(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns a Boolean value indicating whether the value of the first"},{"text":"argument is less than that of the second argument."},{"text":""},{"text":"You can compare instances of any `BinaryInteger` types using the"},{"text":"less-than operator (`<`), even if the two instances are of different"},{"text":"types."},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: An integer to compare."},{"text":"  - rhs: Another integer to compare."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftGenerics":{"parameters":[{"name":"Other","index":0,"depth":1}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"<"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"<"},{"kind":"genericParameter","spelling":"Other"},{"kind":"text","spelling":">("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"Other"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"},{"kind":{"identifier":"swift.property","displayName":"Instance Property"},"identifier":{"precise":"s:SUsE9magnitudexvp::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","magnitude"],"names":{"title":"magnitude","subHeading":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"magnitude"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"The magnitude of this value."},{"text":""},{"text":"Every unsigned integer is its own magnitude, so for any value `x`,"},{"text":"`x == x.magnitude`."},{"text":""},{"text":"The global `abs(_:)` function provides more familiar syntax when you need"},{"text":"to find an absolute value. In addition, because `abs(_:)` always returns"},{"text":"a value of the same type, even in a generic context, using the function"},{"text":"instead of the `magnitude` property is encouraged."}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"var"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"magnitude"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":" { "},{"kind":"keyword","spelling":"get"},{"kind":"text","spelling":" }"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:SzsE2neoiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","!=(_:_:)"],"names":{"title":"!=(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"!="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"!="},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Bool","preciseIdentifier":"s:Sb"}],"accessLevel":"public"},{"kind":{"identifier":"swift.func.op","displayName":"Operator"},"identifier":{"precise":"s:s17FixedWidthIntegerPsE2apoiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","&+(_:_:)"],"names":{"title":"&+(_:_:)","subHeading":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&+"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}]},"docComment":{"module":"Swift","lines":[{"text":"Returns the sum of the two given values, wrapping the result in case of"},{"text":"any overflow."},{"text":""},{"text":"The overflow addition operator (`&+`) discards any bits that overflow the"},{"text":"fixed width of the integer type. In the following example, the sum of"},{"text":"`100` and `121` is greater than the maximum representable `Int8` value,"},{"text":"so the result is the partial value after discarding the overflowing"},{"text":"bits."},{"text":""},{"text":"    let x: Int8 = 10 &+ 21"},{"text":"    // x == 31"},{"text":"    let y: Int8 = 100 &+ 121"},{"text":"    // y == -35 (after overflow)"},{"text":""},{"text":"For more about arithmetic with overflow operators, see [Overflow"},{"text":"Operators][overflow] in *[The Swift Programming Language][tspl]*."},{"text":""},{"text":"[overflow]: https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37"},{"text":"[tspl]: https://docs.swift.org/swift-book/"},{"text":""},{"text":"- Parameters:"},{"text":"  - lhs: The first value to add."},{"text":"  - rhs: The second value to add."}]},"functionSignature":{"parameters":[{"name":"lhs","declarationFragments":[{"kind":"identifier","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]},{"name":"rhs","declarationFragments":[{"kind":"identifier","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"}]}],"returns":[{"kind":"typeIdentifier","spelling":"Self"}]},"swiftExtension":{"extendedModule":"Swift"},"declarationFragments":[{"kind":"keyword","spelling":"static"},{"kind":"text","spelling":" "},{"kind":"keyword","spelling":"func"},{"kind":"text","spelling":" "},{"kind":"identifier","spelling":"&+"},{"kind":"text","spelling":" "},{"kind":"text","spelling":"("},{"kind":"internalParam","spelling":"lhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":", "},{"kind":"internalParam","spelling":"rhs"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"Self"},{"kind":"text","spelling":") -> "},{"kind":"typeIdentifier","spelling":"Self"}],"accessLevel":"public"},{"kind":{"identifier":"swift.init","displayName":"Initializer"},"identifier":{"precise":"s:SUss17FixedWidthIntegerRzrlE7exactlyxSgqd___tcSzRd__lufc::SYNTHESIZED::s:s6UInt16V","interfaceLanguage":"swift"},"pathComponents":["UInt16","init(exactly:)"],"names":{"title":"init(exactly:)","subHeading":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"exactly"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":")"}]},"docComment":{"module":"Swift","lines":[{"text":"Creates a new instance from the given integer, if it can be represented"},{"text":"exactly."},{"text":""},{"text":"If the value passed as `source` is not representable exactly, the result"},{"text":"is `nil`. In the following example, the constant `x` is successfully"},{"text":"created from a value of `100`, while the attempt to initialize the"},{"text":"constant `y` from `1_000` fails because the `Int8` type can represent"},{"text":"`127` at maximum:"},{"text":""},{"text":"    let x = Int8(exactly: 100)"},{"text":"    // x == Optional(100)"},{"text":"    let y = Int8(exactly: 1_000)"},{"text":"    // y == nil"},{"text":""},{"text":"- Parameter source: A value to convert to this type of integer."}]},"swiftGenerics":{"parameters":[{"name":"T","index":0,"depth":1}],"constraints":[{"kind":"conformance","lhs":"Self","rhs":"FixedWidthInteger","rhsPrecise":"s:s17FixedWidthIntegerP"},{"kind":"conformance","lhs":"T","rhs":"BinaryInteger","rhsPrecise":"s:Sz"}]},"swiftExtension":{"extendedModule":"Swift","constraints":[{"kind":"conformance","lhs":"Self","rhs":"FixedWidthInteger","rhsPrecise":"s:s17FixedWidthIntegerP"}]},"declarationFragments":[{"kind":"keyword","spelling":"init"},{"kind":"text","spelling":"?<"},{"kind":"genericParameter","spelling":"T"},{"kind":"text","spelling":">("},{"kind":"externalParam","spelling":"exactly"},{"kind":"text","spelling":" "},{"kind":"internalParam","spelling":"source"},{"kind":"text","spelling":": "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":") "},{"kind":"keyword","spelling":"where"},{"kind":"text","spelling":" "},{"kind":"typeIdentifier","spelling":"T"},{"kind":"text","spelling":" : "},{"kind":"typeIdentifier","spelling":"BinaryInteger","preciseIdentifier":"s:Sz"}],"accessLevel":"public"}],"relationships":[{"kind":"memberOf","source":"s:s18AdditiveArithmeticPsE2peoiyyxz_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s18AdditiveArithmeticP2peoiyyxz_xtFZ","displayName":"AdditiveArithmetic.+=(_:_:)"}},{"kind":"memberOf","source":"s:s18AdditiveArithmeticPsE2peoiyyxz_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s18AdditiveArithmeticP2peoiyyxz_xtFZ","displayName":"AdditiveArithmetic.+=(_:_:)"}},{"kind":"memberOf","source":"s:s23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","displayName":"CustomStringConvertible.halfWidthCornerQuoted"}},{"kind":"memberOf","source":"s:SxsE1loiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SL1loiySbx_xtFZ","displayName":"Comparable.<(_:_:)"}},{"kind":"memberOf","source":"s:s23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","displayName":"CustomStringConvertible.halfWidthCornerQuoted"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE4aggeoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE4aggeoiyyxz_qd__tSzRd__lFZ","displayName":"FixedWidthInteger.&>>=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE4aggeoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE4aggeoiyyxz_qd__tSzRd__lFZ","displayName":"FixedWidthInteger.&>>=(_:_:)"}},{"kind":"conformsTo","source":"s:Sq","target":"s:7Grammar11ParsingRuleP","swiftConstraints":[{"kind":"conformance","lhs":"Wrapped","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"}]},{"kind":"memberOf","source":"s:SxsE1loiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SL1loiySbx_xtFZ","displayName":"Comparable.<(_:_:)"}},{"kind":"conformsTo","source":"s:Sa","target":"s:7Grammar11ParsingRuleP","swiftConstraints":[{"kind":"conformance","lhs":"Element","rhs":"ParsingRule","rhsPrecise":"s:7Grammar11ParsingRuleP"}]},{"kind":"memberOf","source":"s:SzsE2ggoiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE2ggoiyxx_qd__tSzRd__lFZ","displayName":"BinaryInteger.>>(_:_:)"}},{"kind":"memberOf","source":"s:SzsE2ggoiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE2ggoiyxx_qd__tSzRd__lFZ","displayName":"BinaryInteger.>>(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE12littleEndianxvp::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE12littleEndianxvp","displayName":"FixedWidthInteger.littleEndian"}},{"kind":"memberOf","source":"s:SLsE3zzlopys16PartialRangeUpToVyxGxFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SLsE3zzlopys16PartialRangeUpToVyxGxFZ","displayName":"Comparable...<(_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE12littleEndianxvp::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE12littleEndianxvp","displayName":"FixedWidthInteger.littleEndian"}},{"kind":"memberOf","source":"s:SUss17FixedWidthIntegerRzrlEyxqd__cSzRd__lufc::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SUss17FixedWidthIntegerRzrlEyxqd__cSzRd__lufc","displayName":"UnsignedInteger.init(_:)"}},{"kind":"memberOf","source":"s:SUss17FixedWidthIntegerRzrlEyxqd__cSzRd__lufc::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SUss17FixedWidthIntegerRzrlEyxqd__cSzRd__lufc","displayName":"UnsignedInteger.init(_:)"}},{"kind":"memberOf","source":"s:SLsE3zzzopys19PartialRangeThroughVyxGxFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SLsE3zzzopys19PartialRangeThroughVyxGxFZ","displayName":"Comparable....(_:)"}},{"kind":"memberOf","source":"s:SLsE3zzzopys19PartialRangeThroughVyxGxFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SLsE3zzzopys19PartialRangeThroughVyxGxFZ","displayName":"Comparable....(_:)"}},{"kind":"memberOf","source":"s:SLsE3zzlopys16PartialRangeUpToVyxGxFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SLsE3zzlopys16PartialRangeUpToVyxGxFZ","displayName":"Comparable...<(_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE2amoiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE2amoiyxx_xtFZ","displayName":"FixedWidthInteger.&*(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE2amoiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE2amoiyxx_xtFZ","displayName":"FixedWidthInteger.&*(_:_:)"}},{"kind":"memberOf","source":"s:SzsE1goiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE1goiySbx_qd__tSzRd__lFZ","displayName":"BinaryInteger.>(_:_:)"}},{"kind":"memberOf","source":"s:SzsE2neoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE2neoiySbx_qd__tSzRd__lFZ","displayName":"BinaryInteger.!=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE9bigEndianxx_tcfc::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE9bigEndianxx_tcfc","displayName":"FixedWidthInteger.init(bigEndian:)"}},{"kind":"memberOf","source":"s:SzsE1goiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE1goiySbx_qd__tSzRd__lFZ","displayName":"BinaryInteger.>(_:_:)"}},{"kind":"memberOf","source":"s:SLsE1goiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SLsE1goiySbx_xtFZ","displayName":"Comparable.>(_:_:)"}},{"kind":"memberOf","source":"s:SLsE1goiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SLsE1goiySbx_xtFZ","displayName":"Comparable.>(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE6random2inxSNyxG_tFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE6random2inxSNyxG_tFZ","displayName":"FixedWidthInteger.random(in:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE2ggoiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE2ggoiyxx_qd__tSzRd__lFZ","displayName":"FixedWidthInteger.>>(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE7exactlyxSgqd___tcSBRd__lufc::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE7exactlyxSgqd___tcSBRd__lufc","displayName":"FixedWidthInteger.init(exactly:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE6random2inxSNyxG_tFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE6random2inxSNyxG_tFZ","displayName":"FixedWidthInteger.random(in:)"}},{"kind":"conformsTo","source":"s:s5UInt8V","target":"s:7Grammar12UTF8TerminalP"},{"kind":"memberOf","source":"s:SzsE2leoiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SL2leoiySbx_xtFZ","displayName":"Comparable.<=(_:_:)"}},{"kind":"memberOf","source":"s:s27ExpressibleByIntegerLiteralPss01_ab7BuiltincD0RzrlE07integerD0xx_tcfc::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc","displayName":"ExpressibleByIntegerLiteral.init(integerLiteral:)"}},{"kind":"memberOf","source":"s:s27ExpressibleByIntegerLiteralPss01_ab7BuiltincD0RzrlE07integerD0xx_tcfc::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc","displayName":"ExpressibleByIntegerLiteral.init(integerLiteral:)"}},{"kind":"memberOf","source":"s:SzsE2neoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE2neoiySbx_qd__tSzRd__lFZ","displayName":"BinaryInteger.!=(_:_:)"}},{"kind":"memberOf","source":"s:SzsE2leoiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SL2leoiySbx_xtFZ","displayName":"Comparable.<=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE7exactlyxSgqd___tcSBRd__lufc::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE7exactlyxSgqd___tcSBRd__lufc","displayName":"FixedWidthInteger.init(exactly:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE2ggoiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE2ggoiyxx_qd__tSzRd__lFZ","displayName":"FixedWidthInteger.>>(_:_:)"}},{"kind":"memberOf","source":"s:SzsE10isMultiple2ofSbx_tF::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:Sz10isMultiple2ofSbx_tF","displayName":"BinaryInteger.isMultiple(of:)"}},{"kind":"memberOf","source":"s:SzsExycfc::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsExycfc","displayName":"BinaryInteger.init()"}},{"kind":"memberOf","source":"s:SzsExycfc::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsExycfc","displayName":"BinaryInteger.init()"}},{"kind":"memberOf","source":"s:SUss17FixedWidthIntegerRzrlE3maxxvpZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SUss17FixedWidthIntegerRzrlE3maxxvpZ","displayName":"UnsignedInteger.max"}},{"kind":"memberOf","source":"s:SzsE10isMultiple2ofSbx_tF::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:Sz10isMultiple2ofSbx_tF","displayName":"BinaryInteger.isMultiple(of:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE9bigEndianxx_tcfc::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE9bigEndianxx_tcfc","displayName":"FixedWidthInteger.init(bigEndian:)"}},{"kind":"memberOf","source":"s:SzsE8distance2toSix_tF::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE8distance2toSix_tF","displayName":"BinaryInteger.distance(to:)"}},{"kind":"memberOf","source":"s:SzsE1goiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SL1goiySbx_xtFZ","displayName":"Comparable.>(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3alloiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3alloiyxx_xtFZ","displayName":"FixedWidthInteger.&<<(_:_:)"}},{"kind":"memberOf","source":"s:SxsE2eeoiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SQ2eeoiySbx_xtFZ","displayName":"Equatable.==(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3ameoiyyxz_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3ameoiyyxz_xtFZ","displayName":"FixedWidthInteger.&*=(_:_:)"}},{"kind":"memberOf","source":"s:SzsE8distance2toSix_tF::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE8distance2toSix_tF","displayName":"BinaryInteger.distance(to:)"}},{"kind":"memberOf","source":"s:SxsE2eeoiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SQ2eeoiySbx_xtFZ","displayName":"Equatable.==(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3ameoiyyxz_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3ameoiyyxz_xtFZ","displayName":"FixedWidthInteger.&*=(_:_:)"}},{"kind":"memberOf","source":"s:SzsE1goiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SL1goiySbx_xtFZ","displayName":"Comparable.>(_:_:)"}},{"kind":"memberOf","source":"s:SUss17FixedWidthIntegerRzrlE3maxxvpZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SUss17FixedWidthIntegerRzrlE3maxxvpZ","displayName":"UnsignedInteger.max"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE1topyxxFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE1topyxxFZ","displayName":"FixedWidthInteger.~(_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE1topyxxFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE1topyxxFZ","displayName":"FixedWidthInteger.~(_:)"}},{"kind":"memberOf","source":"s:SzsE2neoiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE2neoiySbx_xtFZ","displayName":"BinaryInteger.!=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE2apoiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE2apoiyxx_xtFZ","displayName":"FixedWidthInteger.&+(_:_:)"}},{"kind":"memberOf","source":"s:SUss17FixedWidthIntegerRzrlE7exactlyxSgqd___tcSzRd__lufc::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SUss17FixedWidthIntegerRzrlE7exactlyxSgqd___tcSzRd__lufc","displayName":"UnsignedInteger.init(exactly:)"}},{"kind":"memberOf","source":"s:SzsE11descriptionSSvp::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE11descriptionSSvp","displayName":"BinaryInteger.description"}},{"kind":"memberOf","source":"s:SzsE11descriptionSSvp::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE11descriptionSSvp","displayName":"BinaryInteger.description"}},{"kind":"memberOf","source":"s:SzsE2neoiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE2neoiySbx_xtFZ","displayName":"BinaryInteger.!=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsEyxqd__cSBRd__lufc::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsEyxqd__cSBRd__lufc","displayName":"FixedWidthInteger.init(_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsEyxqd__cSBRd__lufc::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsEyxqd__cSBRd__lufc","displayName":"FixedWidthInteger.init(_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE9bigEndianxvp::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE9bigEndianxvp","displayName":"FixedWidthInteger.bigEndian"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE9bigEndianxvp::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE9bigEndianxvp","displayName":"FixedWidthInteger.bigEndian"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE2apoiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE2apoiyxx_xtFZ","displayName":"FixedWidthInteger.&+(_:_:)"}},{"kind":"memberOf","source":"s:SLsE3zzloiySnyxGx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SLsE3zzloiySnyxGx_xtFZ","displayName":"Comparable...<(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3ggeoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:Sz3ggeoiyyxz_qd__tSzRd__lFZ","displayName":"BinaryInteger.>>=(_:_:)"}},{"kind":"memberOf","source":"s:SzsE1loiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE1loiySbx_qd__tSzRd__lFZ","displayName":"BinaryInteger.<(_:_:)"}},{"kind":"memberOf","source":"s:SzsE1loiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE1loiySbx_qd__tSzRd__lFZ","displayName":"BinaryInteger.<(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3alloiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3alloiyxx_xtFZ","displayName":"FixedWidthInteger.&<<(_:_:)"}},{"kind":"memberOf","source":"s:SUsE9magnitudexvp::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SUsE9magnitudexvp","displayName":"UnsignedInteger.magnitude"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsEyxSgSScfc::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsEyxSgSScfc","displayName":"FixedWidthInteger.init(_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsEyxSgSScfc::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsEyxSgSScfc","displayName":"FixedWidthInteger.init(_:)"}},{"kind":"memberOf","source":"s:SUsE9magnitudexvp::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SUsE9magnitudexvp","displayName":"UnsignedInteger.magnitude"}},{"kind":"memberOf","source":"s:SLsE3zzloiySnyxGx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SLsE3zzloiySnyxGx_xtFZ","displayName":"Comparable...<(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE6random2inxSnyxG_tFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE6random2inxSnyxG_tFZ","displayName":"FixedWidthInteger.random(in:)"}},{"kind":"memberOf","source":"s:s18AdditiveArithmeticPss27ExpressibleByIntegerLiteralRzrlE4zeroxvpZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s18AdditiveArithmeticPss27ExpressibleByIntegerLiteralRzrlE4zeroxvpZ","displayName":"AdditiveArithmetic.zero"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3alloiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3alloiyxx_qd__tSzRd__lFZ","displayName":"FixedWidthInteger.&<<(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE2lloiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE2lloiyxx_qd__tSzRd__lFZ","displayName":"FixedWidthInteger.<<(_:_:)"}},{"kind":"memberOf","source":"s:s18AdditiveArithmeticPss27ExpressibleByIntegerLiteralRzrlE4zeroxvpZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s18AdditiveArithmeticPss27ExpressibleByIntegerLiteralRzrlE4zeroxvpZ","displayName":"AdditiveArithmetic.zero"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3ggeoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:Sz3ggeoiyyxz_qd__tSzRd__lFZ","displayName":"BinaryInteger.>>=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE6random2inxSnyxG_tFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE6random2inxSnyxG_tFZ","displayName":"FixedWidthInteger.random(in:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3alloiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3alloiyxx_qd__tSzRd__lFZ","displayName":"FixedWidthInteger.&<<(_:_:)"}},{"kind":"memberOf","source":"s:SUss17FixedWidthIntegerRzrlE7exactlyxSgqd___tcSzRd__lufc::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SUss17FixedWidthIntegerRzrlE7exactlyxSgqd___tcSzRd__lufc","displayName":"UnsignedInteger.init(exactly:)"}},{"kind":"conformsTo","source":"s:s6UInt16V","target":"s:7Grammar13UTF16TerminalP"},{"kind":"memberOf","source":"s:Sq7GrammarAA11ParsingRuleRzlE8Terminala","target":"s:Sq","targetFallback":"Swift.Optional","sourceOrigin":{"identifier":"s:7Grammar11ParsingRuleP8TerminalQa","displayName":"ParsingRule.Terminal"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE2lloiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE2lloiyxx_qd__tSzRd__lFZ","displayName":"FixedWidthInteger.<<(_:_:)"}},{"kind":"conformsTo","source":"s:s7UnicodeO6ScalarV","target":"s:7Grammar15UnicodeTerminalP"},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3apeoiyyxz_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3apeoiyyxz_xtFZ","displayName":"FixedWidthInteger.&+=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3aggoiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3aggoiyxx_xtFZ","displayName":"FixedWidthInteger.&>>(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3aggoiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3aggoiyxx_xtFZ","displayName":"FixedWidthInteger.&>>(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3apeoiyyxz_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3apeoiyyxz_xtFZ","displayName":"FixedWidthInteger.&+=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE8clampingxqd___tcSzRd__lufc::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE8clampingxqd___tcSzRd__lufc","displayName":"FixedWidthInteger.init(clamping:)"}},{"kind":"memberOf","source":"s:SUss17FixedWidthIntegerRzrlE3minxvpZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SUss17FixedWidthIntegerRzrlE3minxvpZ","displayName":"UnsignedInteger.min"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE03bitB0Sivp::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE03bitB0Sivp","displayName":"FixedWidthInteger.bitWidth"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE03bitB0Sivp::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE03bitB0Sivp","displayName":"FixedWidthInteger.bitWidth"}},{"kind":"memberOf","source":"s:SUss17FixedWidthIntegerRzrlE3minxvpZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SUss17FixedWidthIntegerRzrlE3minxvpZ","displayName":"UnsignedInteger.min"}},{"kind":"memberOf","source":"s:SzsE2geoiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SL2geoiySbx_xtFZ","displayName":"Comparable.>=(_:_:)"}},{"kind":"memberOf","source":"s:SzsE2geoiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SL2geoiySbx_xtFZ","displayName":"Comparable.>=(_:_:)"}},{"kind":"memberOf","source":"s:Sa7GrammarAA11ParsingRuleRzlE5parseySay12ConstructionQzGAA0B5InputVyqd__GzAA0B11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__8TerminalRtzlFZ","target":"s:Sa","targetFallback":"Swift.Array","sourceOrigin":{"identifier":"s:7Grammar11ParsingRuleP5parsey12ConstructionQzAA0B5InputVyqd__GzKAA0B11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__8TerminalRtzlFZ","displayName":"ParsingRule.parse(_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE8clampingxqd___tcSzRd__lufc::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE8clampingxqd___tcSzRd__lufc","displayName":"FixedWidthInteger.init(clamping:)"}},{"kind":"memberOf","source":"s:SzsE1aoiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE1aoiyxx_xtFZ","displayName":"BinaryInteger.&(_:_:)"}},{"kind":"memberOf","source":"s:SzsE1aoiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE1aoiyxx_xtFZ","displayName":"BinaryInteger.&(_:_:)"}},{"kind":"memberOf","source":"s:Sa7GrammarAA11ParsingRuleRzlE8Locationa","target":"s:Sa","targetFallback":"Swift.Array","sourceOrigin":{"identifier":"s:7Grammar11ParsingRuleP8LocationQa","displayName":"ParsingRule.Location"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE6random2in5usingxSnyxG_qd__ztSGRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE6random2in5usingxSnyxG_qd__ztSGRd__lFZ","displayName":"FixedWidthInteger.random(in:using:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE6random2in5usingxSnyxG_qd__ztSGRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE6random2in5usingxSnyxG_qd__ztSGRd__lFZ","displayName":"FixedWidthInteger.random(in:using:)"}},{"kind":"memberOf","source":"s:SzsE2leoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE2leoiySbx_qd__tSzRd__lFZ","displayName":"BinaryInteger.<=(_:_:)"}},{"kind":"memberOf","source":"s:SzsE2leoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE2leoiySbx_qd__tSzRd__lFZ","displayName":"BinaryInteger.<=(_:_:)"}},{"kind":"memberOf","source":"s:SzsE8advanced2byxSi_tF::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE8advanced2byxSi_tF","displayName":"BinaryInteger.advanced(by:)"}},{"kind":"memberOf","source":"s:SzsE8advanced2byxSi_tF::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE8advanced2byxSi_tF","displayName":"BinaryInteger.advanced(by:)"}},{"kind":"memberOf","source":"s:SLsE2leoiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SLsE2leoiySbx_xtFZ","displayName":"Comparable.<=(_:_:)"}},{"kind":"memberOf","source":"s:SLsE2leoiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SLsE2leoiySbx_xtFZ","displayName":"Comparable.<=(_:_:)"}},{"kind":"memberOf","source":"s:Sq7GrammarAA11ParsingRuleRzlE8Locationa","target":"s:Sq","targetFallback":"Swift.Optional","sourceOrigin":{"identifier":"s:7Grammar11ParsingRuleP8LocationQa","displayName":"ParsingRule.Location"}},{"kind":"memberOf","source":"s:Sa7GrammarAA11ParsingRuleRzlE8Terminala","target":"s:Sa","targetFallback":"Swift.Array","sourceOrigin":{"identifier":"s:7Grammar11ParsingRuleP8TerminalQa","displayName":"ParsingRule.Terminal"}},{"kind":"memberOf","source":"s:s18AdditiveArithmeticPsE1popyxxFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s18AdditiveArithmeticPsE1popyxxFZ","displayName":"AdditiveArithmetic.+(_:)"}},{"kind":"memberOf","source":"s:s18AdditiveArithmeticPsE1popyxxFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s18AdditiveArithmeticPsE1popyxxFZ","displayName":"AdditiveArithmetic.+(_:)"}},{"kind":"memberOf","source":"s:SLsE3zzzoiySNyxGx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SLsE3zzzoiySNyxGx_xtFZ","displayName":"Comparable....(_:_:)"}},{"kind":"memberOf","source":"s:Sz12_RegexParserE9assertingxqd___tcSzRd__lufc::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:Sz12_RegexParserE9assertingxqd___tcSzRd__lufc","displayName":"BinaryInteger.init(asserting:)"}},{"kind":"memberOf","source":"s:SzsE2lloiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE2lloiyxx_qd__tSzRd__lFZ","displayName":"BinaryInteger.<<(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE4alleoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE4alleoiyyxz_qd__tSzRd__lFZ","displayName":"FixedWidthInteger.&<<=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE2asoiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE2asoiyxx_xtFZ","displayName":"FixedWidthInteger.&-(_:_:)"}},{"kind":"memberOf","source":"s:SzsE2lloiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE2lloiyxx_qd__tSzRd__lFZ","displayName":"BinaryInteger.<<(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3lleoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:Sz3lleoiyyxz_qd__tSzRd__lFZ","displayName":"BinaryInteger.<<=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE2asoiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE2asoiyxx_xtFZ","displayName":"FixedWidthInteger.&-(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE4alleoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE4alleoiyyxz_qd__tSzRd__lFZ","displayName":"FixedWidthInteger.&<<=(_:_:)"}},{"kind":"memberOf","source":"s:SLsE3zzzoiySNyxGx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SLsE3zzzoiySNyxGx_xtFZ","displayName":"Comparable....(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE12littleEndianxx_tcfc::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE12littleEndianxx_tcfc","displayName":"FixedWidthInteger.init(littleEndian:)"}},{"kind":"memberOf","source":"s:Sz12_RegexParserE9assertingxqd___tcSzRd__lufc::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:Sz12_RegexParserE9assertingxqd___tcSzRd__lufc","displayName":"BinaryInteger.init(asserting:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE12littleEndianxx_tcfc::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE12littleEndianxx_tcfc","displayName":"FixedWidthInteger.init(littleEndian:)"}},{"kind":"memberOf","source":"s:SzsE1xoiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE1xoiyxx_xtFZ","displayName":"BinaryInteger.^(_:_:)"}},{"kind":"memberOf","source":"s:s18AdditiveArithmeticPsE2seoiyyxz_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s18AdditiveArithmeticP2seoiyyxz_xtFZ","displayName":"AdditiveArithmetic.-=(_:_:)"}},{"kind":"memberOf","source":"s:SzsE20quotientAndRemainder10dividingByx0A0_x9remaindertx_tF::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE20quotientAndRemainder10dividingByx0A0_x9remaindertx_tF","displayName":"BinaryInteger.quotientAndRemainder(dividingBy:)"}},{"kind":"memberOf","source":"s:SzsE20quotientAndRemainder10dividingByx0A0_x9remaindertx_tF::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE20quotientAndRemainder10dividingByx0A0_x9remaindertx_tF","displayName":"BinaryInteger.quotientAndRemainder(dividingBy:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3aggoiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3aggoiyxx_qd__tSzRd__lFZ","displayName":"FixedWidthInteger.&>>(_:_:)"}},{"kind":"memberOf","source":"s:SzsE1xoiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE1xoiyxx_xtFZ","displayName":"BinaryInteger.^(_:_:)"}},{"kind":"memberOf","source":"s:s18AdditiveArithmeticPsE2seoiyyxz_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s18AdditiveArithmeticP2seoiyyxz_xtFZ","displayName":"AdditiveArithmetic.-=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3aggoiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3aggoiyxx_qd__tSzRd__lFZ","displayName":"FixedWidthInteger.&>>(_:_:)"}},{"kind":"memberOf","source":"s:SLsE2geoiySbx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SLsE2geoiySbx_xtFZ","displayName":"Comparable.>=(_:_:)"}},{"kind":"memberOf","source":"s:SLsE2geoiySbx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SLsE2geoiySbx_xtFZ","displayName":"Comparable.>=(_:_:)"}},{"kind":"memberOf","source":"s:Sq7GrammarAA11ParsingRuleRzlE5parsey12ConstructionQzSgAA0B5InputVyqd__GzAA0B11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__8TerminalRtzlFZ","target":"s:Sq","targetFallback":"Swift.Optional","sourceOrigin":{"identifier":"s:7Grammar11ParsingRuleP5parsey12ConstructionQzAA0B5InputVyqd__GzKAA0B11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__8TerminalRtzlFZ","displayName":"ParsingRule.parse(_:)"}},{"kind":"memberOf","source":"s:SzsE1ooiyxx_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE1ooiyxx_xtFZ","displayName":"BinaryInteger.|(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE18truncatingIfNeededxqd___tcSzRd__lufc::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE18truncatingIfNeededxqd___tcSzRd__lufc","displayName":"FixedWidthInteger.init(truncatingIfNeeded:)"}},{"kind":"memberOf","source":"s:SzsE1ooiyxx_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE1ooiyxx_xtFZ","displayName":"BinaryInteger.|(_:_:)"}},{"kind":"memberOf","source":"s:SzsE2geoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE2geoiySbx_qd__tSzRd__lFZ","displayName":"BinaryInteger.>=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE6random2in5usingxSNyxG_qd__ztSGRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE6random2in5usingxSNyxG_qd__ztSGRd__lFZ","displayName":"FixedWidthInteger.random(in:using:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE6random2in5usingxSNyxG_qd__ztSGRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE6random2in5usingxSNyxG_qd__ztSGRd__lFZ","displayName":"FixedWidthInteger.random(in:using:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufc::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufc","displayName":"FixedWidthInteger.init(_:radix:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufc::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufc","displayName":"FixedWidthInteger.init(_:radix:)"}},{"kind":"memberOf","source":"s:SzsE2eeoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SzsE2eeoiySbx_qd__tSzRd__lFZ","displayName":"BinaryInteger.==(_:_:)"}},{"kind":"memberOf","source":"s:SLsE3zzzoPys16PartialRangeFromVyxGxFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SLsE3zzzoPys16PartialRangeFromVyxGxFZ","displayName":"Comparable....(_:)"}},{"kind":"memberOf","source":"s:SUsE8isSignedSbvpZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:SUsE8isSignedSbvpZ","displayName":"UnsignedInteger.isSigned"}},{"kind":"memberOf","source":"s:SzsE2eeoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE2eeoiySbx_qd__tSzRd__lFZ","displayName":"BinaryInteger.==(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3aseoiyyxz_xtFZ::SYNTHESIZED::s:s5UInt8V","target":"s:s5UInt8V","targetFallback":"Swift.UInt8","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3aseoiyyxz_xtFZ","displayName":"FixedWidthInteger.&-=(_:_:)"}},{"kind":"memberOf","source":"s:SzsE2geoiySbx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SzsE2geoiySbx_qd__tSzRd__lFZ","displayName":"BinaryInteger.>=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE18truncatingIfNeededxqd___tcSzRd__lufc::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE18truncatingIfNeededxqd___tcSzRd__lufc","displayName":"FixedWidthInteger.init(truncatingIfNeeded:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3aseoiyyxz_xtFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:s17FixedWidthIntegerPsE3aseoiyyxz_xtFZ","displayName":"FixedWidthInteger.&-=(_:_:)"}},{"kind":"memberOf","source":"s:s17FixedWidthIntegerPsE3lleoiyyxz_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:Sz3lleoiyyxz_qd__tSzRd__lFZ","displayName":"BinaryInteger.<<=(_:_:)"}},{"kind":"memberOf","source":"s:SUsE8isSignedSbvpZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SUsE8isSignedSbvpZ","displayName":"UnsignedInteger.isSigned"}},{"kind":"memberOf","source":"s:SLsE3zzzoPys16PartialRangeFromVyxGxFZ::SYNTHESIZED::s:s6UInt16V","target":"s:s6UInt16V","targetFallback":"Swift.UInt16","sourceOrigin":{"identifier":"s:SLsE3zzzoPys16PartialRangeFromVyxGxFZ","displayName":"Comparable....(_:)"}}]}