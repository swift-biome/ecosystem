{"culture":"Grammar","dependencies":[],"extensions":[],"partitions":[{"namespace":"Grammar","communities":[{"community":"protocol","startIndex":0,"endIndex":12},{"community":"associatedtype","startIndex":12,"endIndex":18},{"community":"enum","startIndex":18,"endIndex":81},{"community":"struct","startIndex":81,"endIndex":89},{"community":"init","startIndex":89,"endIndex":102},{"community":"subscript","startIndex":102,"endIndex":104},{"community":"type.property","startIndex":104,"endIndex":154},{"community":"property","startIndex":154,"endIndex":176},{"community":"type.method","startIndex":176,"endIndex":200},{"community":"method","startIndex":200,"endIndex":225},{"community":"typealias","startIndex":225,"endIndex":247}]},{"namespace":"Swift","communities":[{"community":"type.method","startIndex":247,"endIndex":249},{"community":"typealias","startIndex":249,"endIndex":253}]}],"identifiers":["s7Grammar11LiteralRuleP","s7Grammar11ParsingRuleP","s7Grammar12TerminalRuleP","s7Grammar12UTF8TerminalP","s7Grammar13ASCIITerminalP","s7Grammar13UTF16TerminalP","s7Grammar14TraceableErrorP","s7Grammar15UnicodeTerminalP","s7Grammar17CharacterTerminalP","s7Grammar18ParsingDiagnosticsP","s7Grammar18TraceableErrorRootP","s7Grammar9DigitRuleP","s7Grammar11LiteralRuleP0B0Qa","s7Grammar11ParsingRuleP12ConstructionQa","s7Grammar11ParsingRuleP8LocationQa","s7Grammar11ParsingRuleP8TerminalQa","s7Grammar18ParsingDiagnosticsP10BreadcrumbQa","s7Grammar18ParsingDiagnosticsP6SourceQa","s7GrammarAAO","s7GrammarAAO12DecimalDigitO","s7GrammarAAO14HexDigitScalarO","s7GrammarAAO14HexDigitScalarO9LowercaseO","s7GrammarAAO18DecimalDigitScalarO","s7GrammarAAO19NaturalDecimalDigitO","s7GrammarAAO25NaturalDecimalDigitScalarO","s7GrammarAAO32UnsignedNormalizedIntegerLiteralO","s7GrammarAAO3EndO","s7GrammarAAO3PadO","s7GrammarAAO4JoinO","s7GrammarAAO6ReduceO","s7GrammarAAO7CollectO","s7GrammarAAO7DiscardO","s7GrammarAAO8EncodingO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE10AngleRightO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE10BraceRightO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE11BracketLeftO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE12BracketRightO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE13StartOfHeaderO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE14CarriageReturnO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE15ParenthesisLeftO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE16ParenthesisRightO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1EO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1EO9UppercaseO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1PO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1PO9UppercaseO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1SO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1SO9LowercaseO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1UO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1UO9LowercaseO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1XO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1XO9LowercaseO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE3AndO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE3OneO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE3SixO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE3TwoO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE4FiveO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE4FourO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE4NineO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE4PlusO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE4ZeroO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5ColonO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5CommaO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5EightO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5MinusO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5QuoteO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5SevenO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5SlashO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5SpaceO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5ThreeO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE6DollarO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE6EqualsO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE6PeriodO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE7NewlineO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE7PercentO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE8LinefeedO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE8QuestionO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE9AngleLeftO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE9BackslashO","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE9BraceLeftO","s7GrammarAAO8HexDigitO","s7GrammarAAO8HexDigitO9LowercaseO","s7Grammar12ParsingErrorV","s7Grammar12ParsingErrorV5FrameV","s7Grammar12ParsingInputV","s7GrammarAAO13NoDiagnosticsV","s7GrammarAAO14ExpectedRegionV","s7GrammarAAO18DefaultDiagnosticsV","s7GrammarAAO20IntegerOverflowErrorV","s7GrammarAAO8ExpectedV","s7Grammar12ParsingErrorV2at7because5traceACyxGx_s0C0_pSayAC5FrameVyx_GGtcfc","s7Grammar12ParsingErrorV5FrameV5index4rule12constructionAEyx_Gx_ypXpypXptcfc","s7Grammar12ParsingInputVyACyxG6SourceQzcfc","s7Grammar13ASCIITerminalPyxs5UInt8Vcfc","s7Grammar13UTF16TerminalPyxs6UInt16Vcfc","s7Grammar15UnicodeTerminalPyxs0B0O6ScalarVcfc","s7Grammar17CharacterTerminalPyxSJcfc","s7Grammar18ParsingDiagnosticsPxycfc","s7GrammarAAO13NoDiagnosticsVADy_xGycfc","s7GrammarAAO14ExpectedRegionVADy_xq_Gycfc","s7GrammarAAO18DefaultDiagnosticsVADy_xGycfc","s7GrammarAAO20IntegerOverflowErrorVADy_xGycfc","s7GrammarAAO8ExpectedVADy_xGycfc","s7Grammar12ParsingInputVy6Source_11SubSequenceQZqd__cSXRd__AD_5IndexQZ5BoundRtd__luip","s7Grammar12ParsingInputVy6Source_7ElementQZAD_5IndexQZcip","s7Grammar11LiteralRuleP7literal0B0QzvpZ","s7Grammar12ParsingErrorV9namespaceSSvpZ","s7Grammar14TraceableErrorP9namespaceSSvpZ","s7Grammar9DigitRuleP5radix12ConstructionQzvpZ","s7GrammarAAO12DecimalDigitO5radixq0_vpZ","s7GrammarAAO14HexDigitScalarO5radixq_vpZ","s7GrammarAAO14HexDigitScalarO9LowercaseO5radixq_vpZ","s7GrammarAAO18DecimalDigitScalarO5radixq_vpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE10AngleRightO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE10BraceRightO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE11BracketLeftO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE12BracketRightO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE13StartOfHeaderO7literals010CollectionE3OneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE14CarriageReturnO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE15ParenthesisLeftO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE16ParenthesisRightO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1EO9UppercaseO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1PO9UppercaseO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1SO9LowercaseO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1UO9LowercaseO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1XO9LowercaseO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE3AndO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE3OneO7literals012CollectionOfD0Vyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE3SixO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE3TwoO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE4FiveO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE4FourO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE4NineO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE4PlusO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE4ZeroO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5ColonO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5CommaO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5EightO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5MinusO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5QuoteO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5SevenO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5SlashO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5SpaceO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE5ThreeO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE6DollarO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE6EqualsO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE6PeriodO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE7PercentO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE8LinefeedO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE8QuestionO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE9AngleLeftO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE9BackslashO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE9BraceLeftO7literals15CollectionOfOneVyq_GvpZ","s7GrammarAAO8HexDigitO5radixq0_vpZ","s7GrammarAAO8HexDigitO9LowercaseO5radixq0_vpZ","s7Grammar12ParsingErrorV4nexts0C0_pSgvp","s7Grammar12ParsingErrorV5FrameV12constructionypXpvp","s7Grammar12ParsingErrorV5FrameV4ruleypXpvp","s7Grammar12ParsingErrorV5FrameV5indexxvp","s7Grammar12ParsingErrorV5indexxvp","s7Grammar12ParsingErrorV5traceSayAC5FrameVyx_GGvp","s7Grammar12ParsingErrorV7contextSaySSGvp","s7Grammar12ParsingErrorV7problems0C0_pvp","s7Grammar12ParsingInputV11diagnosticsxvp","s7Grammar12ParsingInputV5index6Source_5IndexQZvp","s7Grammar12ParsingInputV6source6SourceQzvp","s7Grammar14TraceableErrorP4nexts0C0_pSgvp","s7Grammar14TraceableErrorP7contextSaySSGvp","s7Grammar14TraceableErrorPAAE11descriptionSSvp","s7Grammar18TraceableErrorRootP7messageSSvp","s7Grammar18TraceableErrorRootPAAE4nexts0C0_pSgvp","s7Grammar18TraceableErrorRootPAAE7contextSaySSGvp","s7GrammarAAO14ExpectedRegionV11descriptionSSvp","s7GrammarAAO18DefaultDiagnosticsV5stackSayAA12ParsingErrorV5FrameVy5IndexQz_GGvp","s7GrammarAAO18DefaultDiagnosticsV8frontierAA12ParsingErrorVy5IndexQzGSgvp","s7GrammarAAO20IntegerOverflowErrorV11descriptionSSvp","s7GrammarAAO8ExpectedV11descriptionSSvp","s7Grammar11LiteralRulePAAE5parseyyAA12ParsingInputVyqd__GzKAA0E11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAI_7ElementQYd__8TerminalRtzlFZ","s7Grammar11ParsingRuleP5parsey12ConstructionQzAA0B5InputVyqd__GzKAA0B11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__8TerminalRtzlFZ","s7Grammar12TerminalRuleP5parse8terminal12ConstructionQzSg0B0Qz_tFZ","s7Grammar12TerminalRulePAAE5parsey12ConstructionQzAA12ParsingInputVyqd__GzKAA0F11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__0B0RtzlFZ","s7GrammarAAO12DecimalDigitO5parse8terminalq0_Sgq__tFZ","s7GrammarAAO14HexDigitScalarO5parse8terminalq_Sgs7UnicodeO0D0V_tFZ","s7GrammarAAO14HexDigitScalarO9LowercaseO5parse8terminalq_Sgs7UnicodeO0D0V_tFZ","s7GrammarAAO18DecimalDigitScalarO5parse8terminalq_Sgs7UnicodeO0D0V_tFZ","s7GrammarAAO19NaturalDecimalDigitO5parse8terminalq0_Sgq__tFZ","s7GrammarAAO25NaturalDecimalDigitScalarO5parse8terminalq_Sgs7UnicodeO0E0V_tFZ","s7GrammarAAO32UnsignedNormalizedIntegerLiteralO5parsey12ConstructionQzAA12ParsingInputVyqd__GzKAA0H11DiagnosticsRd__6Source_5IndexQYd__8LocationRt_AL_7ElementQYd__8TerminalRt_lFZ","s7GrammarAAO3EndO5parseyyAA12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAI_7ElementQYd__Rs_AA0D11DiagnosticsRd__lFZ","s7GrammarAAO3PadO5parsey12ConstructionQzAA12ParsingInputVyqd__GzKAA0E11DiagnosticsRd__6Source_5IndexQYd__8LocationRt_AL_7ElementQYd__8TerminalRt_lFZ","s7GrammarAAO4JoinO5parseyq0_AA12ParsingInputVyqd__GzKAA0D11DiagnosticsRd__6Source_5IndexQYd__8LocationRt_AJ_7ElementQYd__8TerminalRt_lFZ","s7GrammarAAO5parse10diagnosing2as12ConstructionQy_x_q_mtKSlRzAA11ParsingRuleR_8TerminalQy_7ElementRtz8LocationQy_5IndexRtzr0_lFZ","s7GrammarAAO5parse_2as12ConstructionQy_x_q_mtKSlRzAA11ParsingRuleR_8TerminalQy_7ElementRtz8LocationQy_5IndexRtzr0_lFZ","s7GrammarAAO5parse_2as2inq0_x_q_mq0_mtKSlRzAA11ParsingRuleR_SmR0_8TerminalQy_7ElementRtz8LocationQy_5IndexRtzAIQy0_12ConstructionRt_r1_lFZ","s7GrammarAAO6ReduceO5parseyq_AA12ParsingInputVyqd__GzKAA0D11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAJ_7ElementQYd__8TerminalRtzlFZ","s7GrammarAAO7CollectO5parseyq_AA12ParsingInputVyqd__GzAA0D11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAJ_7ElementQYd__8TerminalRtzlFZ","s7GrammarAAO7DiscardO5parseyyAA12ParsingInputVyqd__GzAA0D11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAJ_7ElementQYd__8TerminalRtzlFZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1EO5parse8terminalytSgq__tFZ","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE7NewlineO5parseyyAA12ParsingInputVyqd__GzK6Source_5IndexQYd__RszAL_7ElementQYd__Rs_AA0F11DiagnosticsRd__lFZ","s7GrammarAAO8HexDigitO5parse8terminalq0_Sgq__tFZ","s7GrammarAAO8HexDigitO9LowercaseO5parse8terminalq0_Sgq__tFZ","s7Grammar12ParsingErrorV8annotate6source4line7newlineSSqd___SS11SubSequenceQyd__XESb7ElementQyd__XEt5IndexQyd__RszSKRd__lF","s7Grammar12ParsingInputV4next6Source_7ElementQZSgyF","s7Grammar12ParsingInputV5groupyqd_0_qd__m_qd_0_ACyxGzKXEtKr0_lF","s7Grammar12ParsingInputV5parse2as12ConstructionQyd__Sgqd__Sgm_tAA0B4RuleRd__6Source_5IndexQZ8LocationRtd__AK_7ElementQZ8TerminalRtd__lF","s7Grammar12ParsingInputV5parse2as12ConstructionQyd___AFQyd_0_AFQyd_1_AFQyd_2_AFQyd_3_AFQyd_4_AFQyd_5_tqd___qd_0_qd_1_qd_2_qd_3_qd_4_qd_5_tm_tKAA0B4RuleRd__AaNRd_0_AaNRd_1_AaNRd_2_AaNRd_3_AaNRd_4_AaNRd_5_8LocationQyd_0_AORtd__8TerminalQyd_0_ARRtd__AOQyd_1_APRSARQyd_1_ASRSAOQyd_2_AURSARQyd_2_AVRSAOQyd_3_AWRSARQyd_3_AXRSAOQyd_4_AYRSARQyd_4_AZRSAOQyd_5_A_RSARQyd_5_A0_RS6Source_5IndexQZA1_RSA3__7ElementQZA2_RSr5_lF","s7Grammar12ParsingInputV5parse2as12ConstructionQyd___AFQyd_0_AFQyd_1_AFQyd_2_AFQyd_3_AFQyd_4_tqd___qd_0_qd_1_qd_2_qd_3_qd_4_tm_tKAA0B4RuleRd__AaMRd_0_AaMRd_1_AaMRd_2_AaMRd_3_AaMRd_4_8LocationQyd_0_ANRtd__8TerminalQyd_0_AQRtd__ANQyd_1_AORSAQQyd_1_ARRSANQyd_2_ATRSAQQyd_2_AURSANQyd_3_AVRSAQQyd_3_AWRSANQyd_4_AXRSAQQyd_4_AYRS6Source_5IndexQZAZRSA0__7ElementQZA_RSr4_lF","s7Grammar12ParsingInputV5parse2as12ConstructionQyd___AFQyd_0_AFQyd_1_AFQyd_2_AFQyd_3_tqd___qd_0_qd_1_qd_2_qd_3_tm_tKAA0B4RuleRd__AaLRd_0_AaLRd_1_AaLRd_2_AaLRd_3_8LocationQyd_0_AMRtd__8TerminalQyd_0_APRtd__AMQyd_1_ANRSAPQyd_1_AQRSAMQyd_2_ASRSAPQyd_2_ATRSAMQyd_3_AURSAPQyd_3_AVRS6Source_5IndexQZAWRSAY_7ElementQZAXRSr3_lF","s7Grammar12ParsingInputV5parse2as12ConstructionQyd___AFQyd_0_AFQyd_1_AFQyd_2_tqd___qd_0_qd_1_qd_2_tm_tKAA0B4RuleRd__AaKRd_0_AaKRd_1_AaKRd_2_8LocationQyd_0_ALRtd__8TerminalQyd_0_AORtd__ALQyd_1_AMRSAOQyd_1_APRSALQyd_2_ARRSAOQyd_2_ASRS6Source_5IndexQZATRSAV_7ElementQZAURSr2_lF","s7Grammar12ParsingInputV5parse2as12ConstructionQyd___AFQyd_0_AFQyd_1_tqd___qd_0_qd_1_tm_tKAA0B4RuleRd__AaJRd_0_AaJRd_1_8LocationQyd_0_AKRtd__8TerminalQyd_0_ANRtd__AKQyd_1_ALRSANQyd_1_AORS6Source_5IndexQZAQRSAS_7ElementQZARRSr1_lF","s7Grammar12ParsingInputV5parse2as12ConstructionQyd___AFQyd_0_tqd___qd_0_tm_tKAA0B4RuleRd__AaIRd_0_8LocationQyd_0_AJRtd__8TerminalQyd_0_AMRtd__6Source_5IndexQZAKRSAP_7ElementQZANRSr0_lF","s7Grammar12ParsingInputV5parse2as12ConstructionQyd__qd__m_tKAA0B4RuleRd__6Source_5IndexQZ8LocationRtd__AI_7ElementQZ8TerminalRtd__lF","s7Grammar12ParsingInputV5parse2as2in6Source_11SubSequenceQZAG_7ElementQZm_AImtF","s7Grammar12ParsingInputV5parse2as2inqd_0_qd__m_qd_0_mtAA0B4RuleRd__SmRd_0_7ElementQyd_0_12ConstructionRtd__6Source_5IndexQZ8LocationRtd__AL_AHQZ8TerminalRtd__r0_lF","s7Grammar12ParsingInputV5parse2as2iny6Source_7ElementQZm_ytmtF","s7Grammar12ParsingInputV5parse2as2inyqd__m_ytmtAA0B4RuleRd__yt12ConstructionRtd__6Source_5IndexQZ8LocationRtd__AJ_7ElementQZ8TerminalRtd__lF","s7Grammar12ParsingInputV5parse6prefix6Source_11SubSequenceQZSi_tKF","s7Grammar18ParsingDiagnosticsP3popyyF","s7Grammar18ParsingDiagnosticsP4push5index3for2by10BreadcrumbQz6Source_5IndexQZ_qd_0_mqd__mtr0_lF","s7Grammar18ParsingDiagnosticsP5reset5index2to7becausey6Source_5IndexQZz_10BreadcrumbQzs5Error_pztF","s7GrammarAAO13NoDiagnosticsV3popyyF","s7GrammarAAO13NoDiagnosticsV4push5index3for2by5IndexQzAJ_qd_0_mqd__mtr0_lF","s7GrammarAAO13NoDiagnosticsV5reset5index2to7becausey5IndexQzz_AJs5Error_pztF","s7GrammarAAO18DefaultDiagnosticsV3popyyF","s7GrammarAAO18DefaultDiagnosticsV4push5index3for2byy5IndexQz_qd_0_mqd__mtr0_lF","s7GrammarAAO18DefaultDiagnosticsV5reset5index2to7becausey5IndexQzz_yts5Error_pztF","s7GrammarAAO13TerminalClassa","s7GrammarAAO14HexDigitScalarO8Terminala","s7GrammarAAO14HexDigitScalarO9LowercaseO8Terminala","s7GrammarAAO16TerminalSequencea","s7GrammarAAO18DecimalDigitScalarO8Terminala","s7GrammarAAO22UnsignedIntegerLiterala","s7GrammarAAO25NaturalDecimalDigitScalarO8Terminala","s7GrammarAAO32UnsignedNormalizedIntegerLiteralO8Locationa","s7GrammarAAO32UnsignedNormalizedIntegerLiteralO8Terminala","s7GrammarAAO3PadO8Locationa","s7GrammarAAO3PadO8Terminala","s7GrammarAAO4JoinO8Locationa","s7GrammarAAO4JoinO8Terminala","s7GrammarAAO6ReduceO8Locationa","s7GrammarAAO6ReduceO8Terminala","s7GrammarAAO7CollectO8Locationa","s7GrammarAAO7CollectO8Terminala","s7GrammarAAO7DiscardO8Locationa","s7GrammarAAO7DiscardO8Terminala","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE1EO12Constructiona","s7GrammarAAO8EncodingOA2A13ASCIITerminalR_rlE6Hyphena","s7GrammarAAO8Parsablea","sSa7GrammarAA11ParsingRuleRzlE5parseySay12ConstructionQzGAA0B5InputVyqd__GzAA0B11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__8TerminalRtzlFZ","sSq7GrammarAA11ParsingRuleRzlE5parsey12ConstructionQzSgAA0B5InputVyqd__GzAA0B11DiagnosticsRd__6Source_5IndexQYd__8LocationRtzAK_7ElementQYd__8TerminalRtzlFZ","sSa7GrammarAA11ParsingRuleRzlE8Locationa","sSa7GrammarAA11ParsingRuleRzlE8Terminala","sSq7GrammarAA11ParsingRuleRzlE8Locationa","sSq7GrammarAA11ParsingRuleRzlE8Terminala","sSJ","sSK","sSL1goiySbx_xtFZ","sSL1loiySbx_xtFZ","sSL2geoiySbx_xtFZ","sSL2leoiySbx_xtFZ","sSLsE1goiySbx_xtFZ","sSLsE2geoiySbx_xtFZ","sSLsE2leoiySbx_xtFZ","sSLsE3zzloiySnyxGx_xtFZ","sSLsE3zzlopys16PartialRangeUpToVyxGxFZ","sSLsE3zzzoPys16PartialRangeFromVyxGxFZ","sSLsE3zzzoiySNyxGx_xtFZ","sSLsE3zzzopys19PartialRangeThroughVyxGxFZ","sSQ","sSQ2eeoiySbx_xtFZ","sSS","sST","sSUsE8isSignedSbvpZ","sSUsE9magnitudexvp","sSUss17FixedWidthIntegerRzrlE3maxxvpZ","sSUss17FixedWidthIntegerRzrlE3minxvpZ","sSUss17FixedWidthIntegerRzrlE7exactlyxSgqd___tcSzRd__lufc","sSUss17FixedWidthIntegerRzrlEyxqd__cSzRd__lufc","sSX","sSa","sSb","sSi","sSl","sSm","sSq","sSxsE1loiySbx_xtFZ","sSxsE2eeoiySbx_xtFZ","sSz","sSz10isMultiple2ofSbx_tF","sSz12_RegexParserE9assertingxqd___tcSzRd__lufc","sSz3ggeoiyyxz_qd__tSzRd__lFZ","sSz3lleoiyyxz_qd__tSzRd__lFZ","sSzsE10isMultiple2ofSbx_tF","sSzsE11descriptionSSvp","sSzsE1aoiyxx_xtFZ","sSzsE1goiySbx_qd__tSzRd__lFZ","sSzsE1goiySbx_xtFZ","sSzsE1loiySbx_qd__tSzRd__lFZ","sSzsE1ooiyxx_xtFZ","sSzsE1xoiyxx_xtFZ","sSzsE20quotientAndRemainder10dividingByx0A0_x9remaindertx_tF","sSzsE2eeoiySbx_qd__tSzRd__lFZ","sSzsE2geoiySbx_qd__tSzRd__lFZ","sSzsE2geoiySbx_xtFZ","sSzsE2ggoiyxx_qd__tSzRd__lFZ","sSzsE2leoiySbx_qd__tSzRd__lFZ","sSzsE2leoiySbx_xtFZ","sSzsE2lloiyxx_qd__tSzRd__lFZ","sSzsE2neoiySbx_qd__tSzRd__lFZ","sSzsE2neoiySbx_xtFZ","sSzsE8advanced2byxSi_tF","sSzsE8distance2toSix_tF","sSzsExycfc","ss15CollectionOfOneV","ss17FixedWidthIntegerP","ss17FixedWidthIntegerPsE03bitB0Sivp","ss17FixedWidthIntegerPsE12littleEndianxvp","ss17FixedWidthIntegerPsE12littleEndianxx_tcfc","ss17FixedWidthIntegerPsE18truncatingIfNeededxqd___tcSzRd__lufc","ss17FixedWidthIntegerPsE1topyxxFZ","ss17FixedWidthIntegerPsE2amoiyxx_xtFZ","ss17FixedWidthIntegerPsE2apoiyxx_xtFZ","ss17FixedWidthIntegerPsE2asoiyxx_xtFZ","ss17FixedWidthIntegerPsE2ggoiyxx_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE2lloiyxx_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE3aggoiyxx_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE3aggoiyxx_xtFZ","ss17FixedWidthIntegerPsE3alloiyxx_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE3alloiyxx_xtFZ","ss17FixedWidthIntegerPsE3ameoiyyxz_xtFZ","ss17FixedWidthIntegerPsE3apeoiyyxz_xtFZ","ss17FixedWidthIntegerPsE3aseoiyyxz_xtFZ","ss17FixedWidthIntegerPsE3ggeoiyyxz_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE3lleoiyyxz_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE4aggeoiyyxz_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE4alleoiyyxz_qd__tSzRd__lFZ","ss17FixedWidthIntegerPsE6random2in5usingxSNyxG_qd__ztSGRd__lFZ","ss17FixedWidthIntegerPsE6random2in5usingxSnyxG_qd__ztSGRd__lFZ","ss17FixedWidthIntegerPsE6random2inxSNyxG_tFZ","ss17FixedWidthIntegerPsE6random2inxSnyxG_tFZ","ss17FixedWidthIntegerPsE7exactlyxSgqd___tcSBRd__lufc","ss17FixedWidthIntegerPsE8clampingxqd___tcSzRd__lufc","ss17FixedWidthIntegerPsE9bigEndianxvp","ss17FixedWidthIntegerPsE9bigEndianxx_tcfc","ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufc","ss17FixedWidthIntegerPsEyxSgSScfc","ss17FixedWidthIntegerPsEyxqd__cSBRd__lufc","ss18AdditiveArithmeticP2peoiyyxz_xtFZ","ss18AdditiveArithmeticP2seoiyyxz_xtFZ","ss18AdditiveArithmeticPsE1popyxxFZ","ss18AdditiveArithmeticPsE2peoiyyxz_xtFZ","ss18AdditiveArithmeticPsE2seoiyyxz_xtFZ","ss18AdditiveArithmeticPss27ExpressibleByIntegerLiteralRzrlE4zeroxvpZ","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc","ss27ExpressibleByIntegerLiteralPss01_ab7BuiltincD0RzrlE07integerD0xx_tcfc","ss4Voida","ss5ErrorP","ss5NeverO","ss5UInt8V","ss6UInt16V","ss7UnicodeO","ss7UnicodeO6ScalarV","ss8SendableP"],"vertices":[{"p":["LiteralRule"],"f":[["protocol",12],[" ",17],["LiteralRule",7],[" : ",17],["ParsingRule",18,1],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["Construction",18],[" == (), ",17],["Self",18],[".",17],["Terminal",18],[" : ",17],["Equatable",18,267]],"s":[["protocol",12],[" ",17],["LiteralRule",7]]},{"p":["ParsingRule"],"f":[["protocol",12],[" ",17],["ParsingRule",7]],"s":[["protocol",12],[" ",17],["ParsingRule",7]],"d":"A structured parsing rule."},{"p":["TerminalRule"],"f":[["protocol",12],[" ",17],["TerminalRule",7],[" : ",17],["ParsingRule",18,1]],"s":[["protocol",12],[" ",17],["TerminalRule",7]]},{"p":["UTF8Terminal"],"f":[["protocol",12],[" ",17],["UTF8Terminal",7],[" : ",17],["ASCIITerminal",18,4]],"s":[["protocol",12],[" ",17],["UTF8Terminal",7]]},{"p":["ASCIITerminal"],"f":[["protocol",12],[" ",17],["ASCIITerminal",7],[" : ",17],["Equatable",18,267]],"s":[["protocol",12],[" ",17],["ASCIITerminal",7]],"d":"A terminal type that can be matched against an ASCII scalar."},{"p":["UTF16Terminal"],"f":[["protocol",12],[" ",17],["UTF16Terminal",7],[" : ",17],["ASCIITerminal",18,4]],"s":[["protocol",12],[" ",17],["UTF16Terminal",7]]},{"p":["TraceableError"],"f":[["protocol",12],[" ",17],["TraceableError",7],[" : ",17],["CustomStringConvertible",18,352],[", ",17],["Error",18,358]],"s":[["protocol",12],[" ",17],["TraceableError",7]]},{"p":["UnicodeTerminal"],"f":[["protocol",12],[" ",17],["UnicodeTerminal",7],[" : ",17],["ASCIITerminal",18,4]],"s":[["protocol",12],[" ",17],["UnicodeTerminal",7]]},{"p":["CharacterTerminal"],"f":[["protocol",12],[" ",17],["CharacterTerminal",7],[" : ",17],["UnicodeTerminal",18,7]],"s":[["protocol",12],[" ",17],["CharacterTerminal",7]]},{"p":["ParsingDiagnostics"],"f":[["protocol",12],[" ",17],["ParsingDiagnostics",7]],"s":[["protocol",12],[" ",17],["ParsingDiagnostics",7]]},{"p":["TraceableErrorRoot"],"f":[["protocol",12],[" ",17],["TraceableErrorRoot",7],[" : ",17],["TraceableError",18,6]],"s":[["protocol",12],[" ",17],["TraceableErrorRoot",7]]},{"p":["DigitRule"],"f":[["protocol",12],[" ",17],["DigitRule",7],[" : ",17],["TerminalRule",18,2],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["Construction",18],[" : ",17],["BinaryInteger",18,286]],"s":[["protocol",12],[" ",17],["DigitRule",7]]},{"p":["LiteralRule","Literal"],"f":[["associatedtype",12],[" ",17],["Literal",7],[" : ",17],["Sequence",18,270],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["Terminal",18],[" == ",17],["Self",18],[".",17],["Literal",18],[".",17],["Element",18]],"s":[["associatedtype",12],[" ",17],["Literal",7],[" : ",17],["Sequence",18]]},{"p":["ParsingRule","Construction"],"f":[["associatedtype",12],[" ",17],["Construction",7]],"s":[["associatedtype",12],[" ",17],["Construction",7]],"d":"The type of the constructions produced by a successful application of this \nparsing rule.\n\nImplementations should not report failure through an ``Optional`` \nconstruction type. Instead, implementations should [`throw`]() an ``Error``, \nwhich allows the library to perform appropriate cleanup and backtracking."},{"p":["ParsingRule","Location"],"f":[["associatedtype",12],[" ",17],["Location",7]],"s":[["associatedtype",12],[" ",17],["Location",7]],"d":"The index type of the ``ParsingInput.source`` this rule expects.\n\nParsing rules must be associated with a source location type because \nsome applications may wish to store these indices in the returned \n``Construction``s. If the source location type were not fixed, then \ndifferent calls to ``parse(_:)`` could potentially return constructions\nof varying types, which would require additional abstraction, which would \nbe inefficient.\n\n>   Tip: \n    Implementations can satisfy this requirement with generics, allowing \n    parsing rules to be reused for different input types. "},{"p":["ParsingRule","Terminal"],"f":[["associatedtype",12],[" ",17],["Terminal",7]],"s":[["associatedtype",12],[" ",17],["Terminal",7]],"d":"The element type of the ``ParsingInput.source`` this rule expects."},{"p":["ParsingDiagnostics","Breadcrumb"],"f":[["associatedtype",12],[" ",17],["Breadcrumb",7]],"s":[["associatedtype",12],[" ",17],["Breadcrumb",7]]},{"p":["ParsingDiagnostics","Source"],"f":[["associatedtype",12],[" ",17],["Source",7],[" : ",17],["Collection",18,281]],"s":[["associatedtype",12],[" ",17],["Source",7],[" : ",17],["Collection",18]]},{"p":["Grammar"],"f":[["enum",12],[" ",17],["Grammar",7]],"s":[["enum",12],[" ",17],["Grammar",7]],"d":"A namespace for structured parsing utilities."},{"p":["Grammar","DecimalDigit"],"f":[["enum",12],[" ",17],["DecimalDigit",7],["<",17],["Location",0],[", ",17],["Terminal",0],[", ",17],["Construction",0],["> ",17],["where",12],[" ",17],["Terminal",18],[" : ",17],["BinaryInteger",18,286],[", ",17],["Construction",18],[" : ",17],["BinaryInteger",18,286]],"s":[["enum",12],[" ",17],["DecimalDigit",7]],"c":[["Terminal",1,"BinaryInteger",286],["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Terminal",1,0],["Construction",2,0]]},{"p":["Grammar","HexDigitScalar"],"f":[["enum",12],[" ",17],["HexDigitScalar",7],["<",17],["Location",0],[", ",17],["Construction",0],["> ",17],["where",12],[" ",17],["Construction",18],[" : ",17],["BinaryInteger",18,286]],"s":[["enum",12],[" ",17],["HexDigitScalar",7]],"c":[["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Construction",1,0]]},{"p":["Grammar","HexDigitScalar","Lowercase"],"f":[["enum",12],[" ",17],["Lowercase",7]],"s":[["enum",12],[" ",17],["Lowercase",7]],"c":[["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Construction",1,0]]},{"p":["Grammar","DecimalDigitScalar"],"f":[["enum",12],[" ",17],["DecimalDigitScalar",7],["<",17],["Location",0],[", ",17],["Construction",0],["> ",17],["where",12],[" ",17],["Construction",18],[" : ",17],["BinaryInteger",18,286]],"s":[["enum",12],[" ",17],["DecimalDigitScalar",7]],"c":[["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Construction",1,0]]},{"p":["Grammar","NaturalDecimalDigit"],"f":[["enum",12],[" ",17],["NaturalDecimalDigit",7],["<",17],["Location",0],[", ",17],["Terminal",0],[", ",17],["Construction",0],["> ",17],["where",12],[" ",17],["Terminal",18],[" : ",17],["BinaryInteger",18,286],[", ",17],["Construction",18],[" : ",17],["BinaryInteger",18,286]],"s":[["enum",12],[" ",17],["NaturalDecimalDigit",7]],"c":[["Terminal",1,"BinaryInteger",286],["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Terminal",1,0],["Construction",2,0]]},{"p":["Grammar","NaturalDecimalDigitScalar"],"f":[["enum",12],[" ",17],["NaturalDecimalDigitScalar",7],["<",17],["Location",0],[", ",17],["Construction",0],["> ",17],["where",12],[" ",17],["Construction",18],[" : ",17],["BinaryInteger",18,286]],"s":[["enum",12],[" ",17],["NaturalDecimalDigitScalar",7]],"c":[["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Construction",1,0]]},{"p":["Grammar","UnsignedNormalizedIntegerLiteral"],"f":[["enum",12],[" ",17],["UnsignedNormalizedIntegerLiteral",7],["<",17],["First",0],[", ",17],["Next",0],["> ",17],["where",12],[" ",17],["First",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Next",18],[" : ",17],["DigitRule",18,11],[", ",17],["First",18],[".",17],["Construction",18],[" : ",17],["FixedWidthInteger",18,313],[", ",17],["First",18],[".",17],["Construction",18],[" == ",17],["Next",18],[".",17],["Construction",18],[", ",17],["First",18],[".",17],["Location",18],[" == ",17],["Next",18],[".",17],["Location",18],[", ",17],["First",18],[".",17],["Terminal",18],[" == ",17],["Next",18],[".",17],["Terminal",18]],"s":[["enum",12],[" ",17],["UnsignedNormalizedIntegerLiteral",7]],"c":[["First",1,"ParsingRule",1],["Next",1,"DigitRule",11],["First.Construction",1,"FixedWidthInteger",313],["First.Construction",2,"Next.Construction"],["First.Location",2,"Next.Location"],["First.Terminal",2,"Next.Terminal"]],"g":[["First",0,0],["Next",1,0]]},{"p":["Grammar","End"],"f":[["enum",12],[" ",17],["End",7],["<",17],["Location",0],[", ",17],["Terminal",0],[">",17]],"s":[["enum",12],[" ",17],["End",7]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Pad"],"f":[["enum",12],[" ",17],["Pad",7],["<",17],["Rule",0],[", ",17],["Padding",0],["> ",17],["where",12],[" ",17],["Rule",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Padding",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Rule",18],[".",17],["Location",18],[" == ",17],["Padding",18],[".",17],["Location",18],[", ",17],["Rule",18],[".",17],["Terminal",18],[" == ",17],["Padding",18],[".",17],["Terminal",18],[", ",17],["Padding",18],[".",17],["Construction",18],[" == ()",17]],"s":[["enum",12],[" ",17],["Pad",7]],"c":[["Rule",1,"ParsingRule",1],["Padding",1,"ParsingRule",1],["Rule.Location",2,"Padding.Location"],["Rule.Terminal",2,"Padding.Terminal"],["Padding.Construction",2,"()"]],"g":[["Rule",0,0],["Padding",1,0]]},{"p":["Grammar","Join"],"f":[["enum",12],[" ",17],["Join",7],["<",17],["Rule",0],[", ",17],["Separator",0],[", ",17],["Construction",0],["> ",17],["where",12],[" ",17],["Rule",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Separator",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Construction",18],[" : ",17],["RangeReplaceableCollection",18,282],[", ",17],["Rule",18],[".",17],["Construction",18],[" == ",17],["Construction",18],[".",17],["Element",18],[", ",17],["Rule",18],[".",17],["Location",18],[" == ",17],["Separator",18],[".",17],["Location",18],[", ",17],["Rule",18],[".",17],["Terminal",18],[" == ",17],["Separator",18],[".",17],["Terminal",18],[", ",17],["Separator",18],[".",17],["Construction",18],[" == ()",17]],"s":[["enum",12],[" ",17],["Join",7]],"c":[["Rule",1,"ParsingRule",1],["Separator",1,"ParsingRule",1],["Construction",1,"RangeReplaceableCollection",282],["Rule.Construction",2,"Construction.Element"],["Rule.Location",2,"Separator.Location"],["Rule.Terminal",2,"Separator.Terminal"],["Separator.Construction",2,"()"]],"g":[["Rule",0,0],["Separator",1,0],["Construction",2,0]]},{"p":["Grammar","Reduce"],"f":[["enum",12],[" ",17],["Reduce",7],["<",17],["Rule",0],[", ",17],["Construction",0],["> ",17],["where",12],[" ",17],["Rule",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Construction",18],[" : ",17],["RangeReplaceableCollection",18,282],[", ",17],["Rule",18],[".",17],["Construction",18],[" == ",17],["Construction",18],[".",17],["Element",18]],"s":[["enum",12],[" ",17],["Reduce",7]],"c":[["Rule",1,"ParsingRule",1],["Construction",1,"RangeReplaceableCollection",282],["Rule.Construction",2,"Construction.Element"]],"g":[["Rule",0,0],["Construction",1,0]]},{"p":["Grammar","Collect"],"f":[["enum",12],[" ",17],["Collect",7],["<",17],["Rule",0],[", ",17],["Construction",0],["> ",17],["where",12],[" ",17],["Rule",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Construction",18],[" : ",17],["RangeReplaceableCollection",18,282],[", ",17],["Rule",18],[".",17],["Construction",18],[" == ",17],["Construction",18],[".",17],["Element",18]],"s":[["enum",12],[" ",17],["Collect",7]],"c":[["Rule",1,"ParsingRule",1],["Construction",1,"RangeReplaceableCollection",282],["Rule.Construction",2,"Construction.Element"]],"g":[["Rule",0,0],["Construction",1,0]]},{"p":["Grammar","Discard"],"f":[["enum",12],[" ",17],["Discard",7],["<",17],["Rule",0],["> ",17],["where",12],[" ",17],["Rule",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Rule",18],[".",17],["Construction",18],[" == ()",17]],"s":[["enum",12],[" ",17],["Discard",7]],"c":[["Rule",1,"ParsingRule",1],["Rule.Construction",2,"()"]],"g":[["Rule",0,0]]},{"p":["Grammar","Encoding"],"f":[["enum",12],[" ",17],["Encoding",7],["<",17],["Location",0],[", ",17],["Terminal",0],[">",17]],"s":[["enum",12],[" ",17],["Encoding",7]],"g":[["Location",0,0],["Terminal",1,0]],"d":"A generic context for unicode definitions."},{"p":["Grammar","Encoding","AngleRight"],"f":[["enum",12],[" ",17],["AngleRight",7]],"s":[["enum",12],[" ",17],["AngleRight",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","BraceRight"],"f":[["enum",12],[" ",17],["BraceRight",7]],"s":[["enum",12],[" ",17],["BraceRight",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","BracketLeft"],"f":[["enum",12],[" ",17],["BracketLeft",7]],"s":[["enum",12],[" ",17],["BracketLeft",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","BracketRight"],"f":[["enum",12],[" ",17],["BracketRight",7]],"s":[["enum",12],[" ",17],["BracketRight",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","StartOfHeader"],"f":[["enum",12],[" ",17],["StartOfHeader",7]],"s":[["enum",12],[" ",17],["StartOfHeader",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","CarriageReturn"],"f":[["enum",12],[" ",17],["CarriageReturn",7]],"s":[["enum",12],[" ",17],["CarriageReturn",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","ParenthesisLeft"],"f":[["enum",12],[" ",17],["ParenthesisLeft",7]],"s":[["enum",12],[" ",17],["ParenthesisLeft",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","ParenthesisRight"],"f":[["enum",12],[" ",17],["ParenthesisRight",7]],"s":[["enum",12],[" ",17],["ParenthesisRight",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","E"],"f":[["enum",12],[" ",17],["E",7]],"s":[["enum",12],[" ",17],["E",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","E","Uppercase"],"f":[["enum",12],[" ",17],["Uppercase",7]],"s":[["enum",12],[" ",17],["Uppercase",7]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","P"],"f":[["enum",12],[" ",17],["P",7]],"s":[["enum",12],[" ",17],["P",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","P","Uppercase"],"f":[["enum",12],[" ",17],["Uppercase",7]],"s":[["enum",12],[" ",17],["Uppercase",7]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","S"],"f":[["enum",12],[" ",17],["S",7]],"s":[["enum",12],[" ",17],["S",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","S","Lowercase"],"f":[["enum",12],[" ",17],["Lowercase",7]],"s":[["enum",12],[" ",17],["Lowercase",7]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","U"],"f":[["enum",12],[" ",17],["U",7]],"s":[["enum",12],[" ",17],["U",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","U","Lowercase"],"f":[["enum",12],[" ",17],["Lowercase",7]],"s":[["enum",12],[" ",17],["Lowercase",7]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","X"],"f":[["enum",12],[" ",17],["X",7]],"s":[["enum",12],[" ",17],["X",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","X","Lowercase"],"f":[["enum",12],[" ",17],["Lowercase",7]],"s":[["enum",12],[" ",17],["Lowercase",7]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","And"],"f":[["enum",12],[" ",17],["And",7]],"s":[["enum",12],[" ",17],["And",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","One"],"f":[["enum",12],[" ",17],["One",7]],"s":[["enum",12],[" ",17],["One",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Six"],"f":[["enum",12],[" ",17],["Six",7]],"s":[["enum",12],[" ",17],["Six",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Two"],"f":[["enum",12],[" ",17],["Two",7]],"s":[["enum",12],[" ",17],["Two",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Five"],"f":[["enum",12],[" ",17],["Five",7]],"s":[["enum",12],[" ",17],["Five",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Four"],"f":[["enum",12],[" ",17],["Four",7]],"s":[["enum",12],[" ",17],["Four",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Nine"],"f":[["enum",12],[" ",17],["Nine",7]],"s":[["enum",12],[" ",17],["Nine",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Plus"],"f":[["enum",12],[" ",17],["Plus",7]],"s":[["enum",12],[" ",17],["Plus",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Zero"],"f":[["enum",12],[" ",17],["Zero",7]],"s":[["enum",12],[" ",17],["Zero",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Colon"],"f":[["enum",12],[" ",17],["Colon",7]],"s":[["enum",12],[" ",17],["Colon",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Comma"],"f":[["enum",12],[" ",17],["Comma",7]],"s":[["enum",12],[" ",17],["Comma",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Eight"],"f":[["enum",12],[" ",17],["Eight",7]],"s":[["enum",12],[" ",17],["Eight",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Minus"],"f":[["enum",12],[" ",17],["Minus",7]],"s":[["enum",12],[" ",17],["Minus",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Quote"],"f":[["enum",12],[" ",17],["Quote",7]],"s":[["enum",12],[" ",17],["Quote",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Seven"],"f":[["enum",12],[" ",17],["Seven",7]],"s":[["enum",12],[" ",17],["Seven",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Slash"],"f":[["enum",12],[" ",17],["Slash",7]],"s":[["enum",12],[" ",17],["Slash",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Space"],"f":[["enum",12],[" ",17],["Space",7]],"s":[["enum",12],[" ",17],["Space",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Three"],"f":[["enum",12],[" ",17],["Three",7]],"s":[["enum",12],[" ",17],["Three",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Dollar"],"f":[["enum",12],[" ",17],["Dollar",7]],"s":[["enum",12],[" ",17],["Dollar",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Equals"],"f":[["enum",12],[" ",17],["Equals",7]],"s":[["enum",12],[" ",17],["Equals",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Period"],"f":[["enum",12],[" ",17],["Period",7]],"s":[["enum",12],[" ",17],["Period",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Newline"],"f":[["enum",12],[" ",17],["Newline",7]],"s":[["enum",12],[" ",17],["Newline",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Percent"],"f":[["enum",12],[" ",17],["Percent",7]],"s":[["enum",12],[" ",17],["Percent",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Linefeed"],"f":[["enum",12],[" ",17],["Linefeed",7]],"s":[["enum",12],[" ",17],["Linefeed",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Question"],"f":[["enum",12],[" ",17],["Question",7]],"s":[["enum",12],[" ",17],["Question",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","AngleLeft"],"f":[["enum",12],[" ",17],["AngleLeft",7]],"s":[["enum",12],[" ",17],["AngleLeft",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Backslash"],"f":[["enum",12],[" ",17],["Backslash",7]],"s":[["enum",12],[" ",17],["Backslash",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","BraceLeft"],"f":[["enum",12],[" ",17],["BraceLeft",7]],"s":[["enum",12],[" ",17],["BraceLeft",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","HexDigit"],"f":[["enum",12],[" ",17],["HexDigit",7],["<",17],["Location",0],[", ",17],["Terminal",0],[", ",17],["Construction",0],["> ",17],["where",12],[" ",17],["Terminal",18],[" : ",17],["BinaryInteger",18,286],[", ",17],["Construction",18],[" : ",17],["BinaryInteger",18,286]],"s":[["enum",12],[" ",17],["HexDigit",7]],"c":[["Terminal",1,"BinaryInteger",286],["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Terminal",1,0],["Construction",2,0]]},{"p":["Grammar","HexDigit","Lowercase"],"f":[["enum",12],[" ",17],["Lowercase",7]],"s":[["enum",12],[" ",17],["Lowercase",7]],"c":[["Terminal",1,"BinaryInteger",286],["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Terminal",1,0],["Construction",2,0]]},{"p":["ParsingError"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["ParsingError",7],["<",17],["Index",0],[">",17]],"s":[["struct",12],[" ",17],["ParsingError",7]],"g":[["Index",0,0]],"d":"An error type that indicates the furthest-successful parse, and provides a \nstack trace detailing how the parser got there.\n\nNone of the structured parsers defined in ``/swift-grammar`` throw this error \ndirectly. Instead, the ``Grammar/DefaultDiagnostics`` engine computes it\nbased on the diagnostic engine’s internal state when encountering \ninvalid input.\n\nCustom ``ParsingRule`` implementations should not throw this error either."},{"p":["ParsingError","Frame"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["Frame",7]],"s":[["struct",12],[" ",17],["Frame",7]],"g":[["Index",0,0]],"d":"A diagnostic stack frame, corresponding to a structured ``ParsingRule`` invocation.\n\nOnly the ``Grammar/DefaultDiagnostics`` engine tracks call stack state."},{"p":["ParsingInput"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["ParsingInput",7],["<",17],["Diagnostics",0],["> ",17],["where",12],[" ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9]],"s":[["struct",12],[" ",17],["ParsingInput",7]],"c":[["Diagnostics",1,"ParsingDiagnostics",9]],"g":[["Diagnostics",0,0]],"d":"A mutable interface for interacting with source input in a safe and \nstructured manner.\n\nThe [`Diagnostics`]() generic parameter provides a zero-cost abstraction \nfor configuring the debugging information emitted if parsing fails."},{"p":["Grammar","NoDiagnostics"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["NoDiagnostics",7],["<",17],["Source",0],["> ",17],["where",12],[" ",17],["Source",18],[" : ",17],["Collection",18,281]],"s":[["struct",12],[" ",17],["NoDiagnostics",7]],"c":[["Source",1,"Collection",281]],"g":[["Source",0,0]],"d":"A performance-optimized diagnostic engine that maintains minimal internal \nstate, and emits no diagnostics.\n\nParsing with ``Grammar//NoDiagnostics`` is efficient, but does not provide \nuseful debugging information. The errors it emits may have little to do \nwith the intuitive reason why parsing failed.\n\nFor richer debugging information, use ``Grammar//DefaultDiagnostics`` instead."},{"p":["Grammar","ExpectedRegion"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["ExpectedRegion",7],["<",17],["Base",0],[", ",17],["Exclusion",0],[">",17]],"s":[["struct",12],[" ",17],["ExpectedRegion",7]],"g":[["Base",0,0],["Exclusion",1,0]]},{"p":["Grammar","DefaultDiagnostics"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["DefaultDiagnostics",7],["<",17],["Source",0],["> ",17],["where",12],[" ",17],["Source",18],[" : ",17],["Collection",18,281]],"s":[["struct",12],[" ",17],["DefaultDiagnostics",7]],"c":[["Source",1,"Collection",281]],"g":[["Source",0,0]],"d":"A debuggability-optimized diagnostic engine that maintains an internal \ncall stack, and emits rich diagnostics.\n\nParsing with ``Grammar//DefaultDiagnostics`` less efficient than parsing with \n``Grammar//NoDiagnostics``. However, the errors it emits may be more useful for \nunderstanding the intuitive reason why parsing failed."},{"p":["Grammar","IntegerOverflowError"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["IntegerOverflowError",7],["<",17],["T",0],[">",17]],"s":[["struct",12],[" ",17],["IntegerOverflowError",7]],"g":[["T",0,0]]},{"p":["Grammar","Expected"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["Expected",7],["<",17],["T",0],[">",17]],"s":[["struct",12],[" ",17],["Expected",7]],"g":[["T",0,0]]},{"p":["ParsingError","init(at:because:trace:)"],"f":[["init",10],["(",17],["at",1],[" ",17],["index",2],[": ",17],["Index",18],[", ",17],["because",1],[" ",17],["problem",2],[": ",17],["Error",18,358],[", ",17],["trace",1],[": [",17],["ParsingError",18,81],["<",17],["Index",18],[">.",17],["Frame",18,82],["])",17]],"s":[["init",10],["(",17],["at",1],[": ",17],["Index",18],[", ",17],["because",1],[": ",17],["Error",18],[", ",17],["trace",1],[": [",17],["ParsingError",18],["<",17],["Index",18],[">.",17],["Frame",18],["])",17]],"g":[["Index",0,0]]},{"p":["ParsingError","Frame","init(index:rule:construction:)"],"f":[["init",10],["(",17],["index",1],[": ",17],["Index",18],[", ",17],["rule",1],[": ",17],["Any",12],[".Type, ",17],["construction",1],[": ",17],["Any",12],[".Type)",17]],"s":[["init",10],["(",17],["index",1],[": ",17],["Index",18],[", ",17],["rule",1],[": ",17],["Any",12],[".Type, ",17],["construction",1],[": ",17],["Any",12],[".Type)",17]],"g":[["Index",0,0]],"d":"Creates a stack frame.\n-   parameters:\n    - index: An index into an associated input source.\n    - rule: A metatype indicating the parsing rule associated with this stack frame.\n    - construction: A metatype indicating the expected parsing result of this stack frame."},{"p":["ParsingInput","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["source",2],[": ",17],["Diagnostics",18],[".",17],["Source",18],[")",17]],"s":[["init",10],["(",17],["Diagnostics",18],[".",17],["Source",18],[")",17]],"c":[["Diagnostics",1,"ParsingDiagnostics",9]],"g":[["Diagnostics",0,0]]},{"p":["ASCIITerminal","init(_:)"],"f":[["init",10],["(",17],["_",1],[": ",17],["UInt8",18,360],[")",17]],"s":[["init",10],["(",17],["UInt8",18],[")",17]]},{"p":["UTF16Terminal","init(_:)"],"f":[["init",10],["(",17],["_",1],[": ",17],["UInt16",18,361],[")",17]],"s":[["init",10],["(",17],["UInt16",18],[")",17]]},{"p":["UnicodeTerminal","init(_:)"],"f":[["init",10],["(",17],["_",1],[": ",17],["Unicode",18,362],[".",17],["Scalar",18,363],[")",17]],"s":[["init",10],["(",17],["Unicode",18],[".",17],["Scalar",18],[")",17]]},{"p":["CharacterTerminal","init(_:)"],"f":[["init",10],["(",17],["_",1],[": ",17],["Character",18,253],[")",17]],"s":[["init",10],["(",17],["Character",18],[")",17]]},{"p":["ParsingDiagnostics","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]]},{"p":["Grammar","NoDiagnostics","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"c":[["Source",1,"Collection",281]],"g":[["Source",0,0]]},{"p":["Grammar","ExpectedRegion","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"g":[["Base",0,0],["Exclusion",1,0]]},{"p":["Grammar","DefaultDiagnostics","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"c":[["Source",1,"Collection",281]],"g":[["Source",0,0]]},{"p":["Grammar","IntegerOverflowError","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"g":[["T",0,0]]},{"p":["Grammar","Expected","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"g":[["T",0,0]]},{"p":["ParsingInput","subscript(_:)"],"f":[["subscript",10],["<",17],["Indices",0],[">(",17],["range",2],[": ",17],["Indices",18],[") -> ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["SubSequence",18],[" ",17],["where",12],[" ",17],["Indices",18],[" : ",17],["RangeExpression",18,277],[", ",17],["Indices",18],[".",17],["Bound",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["<",17],["Indices",0],[">(",17],["Indices",18],[") -> ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["SubSequence",18]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["Indices",1,"RangeExpression",277],["Indices.Bound",2,"Diagnostics.Source.Index"]],"g":[["Diagnostics",0,0],["Indices",0,1]]},{"p":["ParsingInput","subscript(_:)"],"f":[["subscript",10],["(",17],["index",2],[": ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[") -> ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[") -> ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"c":[["Diagnostics",1,"ParsingDiagnostics",9]],"g":[["Diagnostics",0,0]]},{"p":["LiteralRule","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["Self",18],[".",17],["Literal",18],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["Self",18],[".",17],["Literal",18]]},{"p":["ParsingError","namespace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18,269],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18]],"d":"Returns the string [`\"parsing error\"`]()."},{"p":["TraceableError","namespace"],"f":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18,269],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["namespace",7],[": ",17],["String",18]]},{"p":["DigitRule","radix"],"f":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Self",18],[".",17],["Construction",18],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Self",18],[".",17],["Construction",18]]},{"p":["Grammar","DecimalDigit","radix"],"f":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Construction",18],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Construction",18]]},{"p":["Grammar","HexDigitScalar","radix"],"f":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Construction",18],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Construction",18]]},{"p":["Grammar","HexDigitScalar","Lowercase","radix"],"f":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Construction",18],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Construction",18]]},{"p":["Grammar","DecimalDigitScalar","radix"],"f":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Construction",18],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Construction",18]]},{"p":["Grammar","Encoding","AngleRight","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","BraceRight","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","BracketLeft","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","BracketRight","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","StartOfHeader","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","CarriageReturn","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","ParenthesisLeft","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","ParenthesisRight","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","E","Uppercase","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","P","Uppercase","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","S","Lowercase","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","U","Lowercase","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","X","Lowercase","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","And","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","One","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Six","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Two","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Five","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Four","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Nine","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Plus","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Zero","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Colon","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Comma","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Eight","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Minus","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Quote","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Seven","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Slash","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Space","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Three","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Dollar","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Equals","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Period","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Percent","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Linefeed","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Question","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","AngleLeft","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","Backslash","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","Encoding","BraceLeft","literal"],"f":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18,312],["<",17],["Terminal",18],["> { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["literal",7],[": ",17],["CollectionOfOne",18],["<",17],["Terminal",18],[">",17]]},{"p":["Grammar","HexDigit","radix"],"f":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Construction",18],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Construction",18]]},{"p":["Grammar","HexDigit","Lowercase","radix"],"f":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Construction",18],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["radix",7],[": ",17],["Construction",18]]},{"p":["ParsingError","next"],"f":[["var",12],[" ",17],["next",7],[": ",17],["Error",18,358],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["next",7],[": ",17],["Error",18],["?",17]]},{"p":["ParsingError","Frame","construction"],"f":[["let",12],[" ",17],["construction",7],[": ",17],["Any",12],[".Type",17]],"s":[["let",12],[" ",17],["construction",7],[": ",17],["Any",12],[".Type",17]],"d":"The ``ParsingRule//Construction`` type associated with \n``rule``, if ``rule`` is a ``ParsingRule``. If ``rule`` is a compound \n(tuple) rule, this property contains a tuple of the same arity, \ncontaining the ``ParsingRule//Construction`` types of each of its \nsubrules."},{"p":["ParsingError","Frame","rule"],"f":[["let",12],[" ",17],["rule",7],[": ",17],["Any",12],[".Type",17]],"s":[["let",12],[" ",17],["rule",7],[": ",17],["Any",12],[".Type",17]],"d":"The parsing rule associated with this stack frame. \n\nThis property is an [`Any`]() metatype, and not a \n``ParsingRule`` metatype, because this stack frame may have been \ngenerated by a compound (tuple) rule."},{"p":["ParsingError","Frame","index"],"f":[["let",12],[" ",17],["index",7],[": ",17],["Index",18]],"s":[["let",12],[" ",17],["index",7],[": ",17],["Index",18]],"d":"Indicates the position in the ``ParsingInput.source`` where \nthe parser started attempting to apply ``rule``."},{"p":["ParsingError","index"],"f":[["let",12],[" ",17],["index",7],[": ",17],["Index",18]],"s":[["let",12],[" ",17],["index",7],[": ",17],["Index",18]],"d":"The index of the first invalid terminal in the input, or the ``Collection/.endIndex``\nof the input. \n\nIf the parser attempted to apply multiple rules via backtracking, this \nindex comes from the longest successful parse."},{"p":["ParsingError","trace"],"f":[["let",12],[" ",17],["trace",7],[": [",17],["ParsingError",18,81],["<",17],["Index",18],[">.",17],["Frame",18,82],["]",17]],"s":[["let",12],[" ",17],["trace",7],[": [",17],["ParsingError",18],["<",17],["Index",18],[">.",17],["Frame",18],["]",17]]},{"p":["ParsingError","context"],"f":[["var",12],[" ",17],["context",7],[": [",17],["String",18,269],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["context",7],[": [",17],["String",18],["]",17]]},{"p":["ParsingError","problem"],"f":[["let",12],[" ",17],["problem",7],[": ",17],["Error",18,358]],"s":[["let",12],[" ",17],["problem",7],[": ",17],["Error",18]],"d":"The underlying parsing error."},{"p":["ParsingInput","diagnostics"],"f":[["var",12],[" ",17],["diagnostics",7],[": ",17],["Diagnostics",18]],"s":[["var",12],[" ",17],["diagnostics",7],[": ",17],["Diagnostics",18]]},{"p":["ParsingInput","index"],"f":[["var",12],[" ",17],["index",7],[": ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18]],"s":[["var",12],[" ",17],["index",7],[": ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18]]},{"p":["ParsingInput","source"],"f":[["let",12],[" ",17],["source",7],[": ",17],["Diagnostics",18],[".",17],["Source",18]],"s":[["let",12],[" ",17],["source",7],[": ",17],["Diagnostics",18],[".",17],["Source",18]]},{"p":["TraceableError","next"],"f":[["var",12],[" ",17],["next",7],[": ",17],["Error",18,358],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["next",7],[": ",17],["Error",18],["?",17]]},{"p":["TraceableError","context"],"f":[["var",12],[" ",17],["context",7],[": [",17],["String",18,269],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["context",7],[": [",17],["String",18],["]",17]]},{"p":["TraceableError","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,269],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["TraceableErrorRoot","message"],"f":[["var",12],[" ",17],["message",7],[": ",17],["String",18,269],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["message",7],[": ",17],["String",18]]},{"p":["TraceableErrorRoot","next"],"f":[["var",12],[" ",17],["next",7],[": ",17],["Error",18,358],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["next",7],[": ",17],["Error",18],["?",17]]},{"p":["TraceableErrorRoot","context"],"f":[["var",12],[" ",17],["context",7],[": [",17],["String",18,269],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["context",7],[": [",17],["String",18],["]",17]]},{"p":["Grammar","ExpectedRegion","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,269],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["Grammar","DefaultDiagnostics","stack"],"f":[["var",12],[" ",17],["stack",7],[": [",17],["ParsingError",18,81],["<",17],["Source",18],[".",17],["Index",18],[">.",17],["Frame",18,82],["]",17]],"s":[["var",12],[" ",17],["stack",7],[": [",17],["ParsingError",18],["<",17],["Source",18],[".",17],["Index",18],[">.",17],["Frame",18],["]",17]]},{"p":["Grammar","DefaultDiagnostics","frontier"],"f":[["var",12],[" ",17],["frontier",7],[": ",17],["ParsingError",18,81],["<",17],["Source",18],[".",17],["Index",18],[">?",17]],"s":[["var",12],[" ",17],["frontier",7],[": ",17],["ParsingError",18],["<",17],["Source",18],[".",17],["Index",18],[">?",17]]},{"p":["Grammar","IntegerOverflowError","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,269],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["Grammar","Expected","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,269],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["LiteralRule","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" ",17],["where",12],[" ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9],[", ",17],["Self",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Self",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["Self.Location",2,"Diagnostics.Source.Index"],["Self.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Diagnostics",0,1]]},{"p":["ParsingRule","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Construction",18],[" ",17],["where",12],[" ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9],[", ",17],["Self",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Self",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Construction",18]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["Self.Location",2,"Diagnostics.Source.Index"],["Self.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Diagnostics",0,1]],"d":"Attempts to parse an instance of ``Construction`` from the given \nparsing input.\n\nThe implementation is not required to clean up the state of the `input`\nupon throwing an error; this is handled by the library.\n\nImplementations *should* interact with the given ``ParsingInput`` by \ncalling its methods and subscripts. Don’t overwrite the [`inout`]() binding or its \nmutable stored properties (``ParsingInput/.index`` and ``ParsingInput/.diagnostics``)\nunless you really know what you’re doing.\n\n>   Tip: \n    Mutating `input` does *not* invalidate its indices. You can always \n    store an ``ParsingInput/.index`` and dereference it later, as long \n    as you do not overwrite the [`inout`]() binding elsewhere."},{"p":["TerminalRule","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Self",18],[".",17],["Terminal",18],[") -> ",17],["Self",18],[".",17],["Construction",18],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Self",18],[".",17],["Terminal",18],[") -> ",17],["Self",18],[".",17],["Construction",18],["?",17]]},{"p":["TerminalRule","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Construction",18],[" ",17],["where",12],[" ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9],[", ",17],["Self",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Self",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Construction",18]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["Self.Location",2,"Diagnostics.Source.Index"],["Self.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Diagnostics",0,1]]},{"p":["Grammar","DecimalDigit","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Terminal",18],[") -> ",17],["Construction",18],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Terminal",18],[") -> ",17],["Construction",18],["?",17]],"c":[["Terminal",1,"BinaryInteger",286],["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Terminal",1,0],["Construction",2,0]]},{"p":["Grammar","HexDigitScalar","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Unicode",18,362],[".",17],["Scalar",18,363],[") -> ",17],["Construction",18],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Unicode",18],[".",17],["Scalar",18],[") -> ",17],["Construction",18],["?",17]],"c":[["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Construction",1,0]]},{"p":["Grammar","HexDigitScalar","Lowercase","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Unicode",18,362],[".",17],["Scalar",18,363],[") -> ",17],["Construction",18],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Unicode",18],[".",17],["Scalar",18],[") -> ",17],["Construction",18],["?",17]],"c":[["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Construction",1,0]]},{"p":["Grammar","DecimalDigitScalar","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Unicode",18,362],[".",17],["Scalar",18,363],[") -> ",17],["Construction",18],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Unicode",18],[".",17],["Scalar",18],[") -> ",17],["Construction",18],["?",17]],"c":[["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Construction",1,0]]},{"p":["Grammar","NaturalDecimalDigit","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Terminal",18],[") -> ",17],["Construction",18],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Terminal",18],[") -> ",17],["Construction",18],["?",17]],"c":[["Terminal",1,"BinaryInteger",286],["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Terminal",1,0],["Construction",2,0]]},{"p":["Grammar","NaturalDecimalDigitScalar","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Unicode",18,362],[".",17],["Scalar",18,363],[") -> ",17],["Construction",18],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Unicode",18],[".",17],["Scalar",18],[") -> ",17],["Construction",18],["?",17]],"c":[["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Construction",1,0]]},{"p":["Grammar","UnsignedNormalizedIntegerLiteral","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Next",18],[".",17],["Construction",18],[" ",17],["where",12],[" ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9],[", ",17],["Next",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Next",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Next",18],[".",17],["Construction",18]],"c":[["First",1,"ParsingRule",1],["Next",1,"DigitRule",11],["Diagnostics",1,"ParsingDiagnostics",9],["First.Construction",1,"FixedWidthInteger",313],["First.Construction",2,"Next.Construction"],["First.Location",2,"Next.Location"],["First.Terminal",2,"Next.Terminal"],["Next.Location",2,"Diagnostics.Source.Index"],["Next.Terminal",2,"Diagnostics.Source.Element"]],"g":[["First",0,0],["Next",1,0],["Diagnostics",0,1]]},{"p":["Grammar","End","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12]],"c":[["Location",2,"Diagnostics.Source.Index"],["Terminal",2,"Diagnostics.Source.Element"],["Diagnostics",1,"ParsingDiagnostics",9]],"g":[["Location",0,0],["Terminal",1,0],["Diagnostics",0,1]]},{"p":["Grammar","Pad","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Rule",18],[".",17],["Construction",18],[" ",17],["where",12],[" ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9],[", ",17],["Padding",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Padding",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Rule",18],[".",17],["Construction",18]],"c":[["Rule",1,"ParsingRule",1],["Padding",1,"ParsingRule",1],["Diagnostics",1,"ParsingDiagnostics",9],["Rule.Location",2,"Padding.Location"],["Rule.Terminal",2,"Padding.Terminal"],["Padding.Construction",2,"()"],["Padding.Location",2,"Diagnostics.Source.Index"],["Padding.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Rule",0,0],["Padding",1,0],["Diagnostics",0,1]]},{"p":["Grammar","Join","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Construction",18],[" ",17],["where",12],[" ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9],[", ",17],["Separator",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Separator",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Construction",18]],"c":[["Rule",1,"ParsingRule",1],["Separator",1,"ParsingRule",1],["Construction",1,"RangeReplaceableCollection",282],["Diagnostics",1,"ParsingDiagnostics",9],["Rule.Construction",2,"Construction.Element"],["Rule.Location",2,"Separator.Location"],["Rule.Terminal",2,"Separator.Terminal"],["Separator.Construction",2,"()"],["Separator.Location",2,"Diagnostics.Source.Index"],["Separator.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Rule",0,0],["Separator",1,0],["Construction",2,0],["Diagnostics",0,1]]},{"p":["Grammar","parse(diagnosing:as:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Source",0],[", ",17],["Root",0],[">(",17],["diagnosing",1],[" ",17],["source",2],[": ",17],["Source",18],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Root",18],[".Type) ",17],["throws",12],[" -> ",17],["Root",18],[".",17],["Construction",18],[" ",17],["where",12],[" ",17],["Source",18],[" : ",17],["Collection",18,281],[", ",17],["Root",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Source",18],[".",17],["Element",18],[" == ",17],["Root",18],[".",17],["Terminal",18],[", ",17],["Source",18],[".",17],["Index",18],[" == ",17],["Root",18],[".",17],["Location",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Source",0],[", ",17],["Root",0],[">(",17],["diagnosing",1],[": ",17],["Source",18],[", ",17],["as",1],[": ",17],["Root",18],[".Type) ",17],["throws",12],[" -> ",17],["Root",18],[".",17],["Construction",18]],"c":[["Source",1,"Collection",281],["Root",1,"ParsingRule",1],["Source.Element",2,"Root.Terminal"],["Source.Index",2,"Root.Location"]],"g":[["Source",0,0],["Root",1,0]]},{"p":["Grammar","parse(_:as:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Source",0],[", ",17],["Root",0],[">(",17],["_",1],[" ",17],["source",2],[": ",17],["Source",18],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Root",18],[".Type) ",17],["throws",12],[" -> ",17],["Root",18],[".",17],["Construction",18],[" ",17],["where",12],[" ",17],["Source",18],[" : ",17],["Collection",18,281],[", ",17],["Root",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Source",18],[".",17],["Element",18],[" == ",17],["Root",18],[".",17],["Terminal",18],[", ",17],["Source",18],[".",17],["Index",18],[" == ",17],["Root",18],[".",17],["Location",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Source",0],[", ",17],["Root",0],[">(",17],["Source",18],[", ",17],["as",1],[": ",17],["Root",18],[".Type) ",17],["throws",12],[" -> ",17],["Root",18],[".",17],["Construction",18]],"c":[["Source",1,"Collection",281],["Root",1,"ParsingRule",1],["Source.Element",2,"Root.Terminal"],["Source.Index",2,"Root.Location"]],"g":[["Source",0,0],["Root",1,0]]},{"p":["Grammar","parse(_:as:in:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Source",0],[", ",17],["Rule",0],[", ",17],["Vector",0],[">(",17],["_",1],[" ",17],["source",2],[": ",17],["Source",18],[", ",17],["as",1],[" ",17],["_",2],[": ",17],["Rule",18],[".Type, ",17],["in",1],[" ",17],["_",2],[": ",17],["Vector",18],[".Type) ",17],["throws",12],[" -> ",17],["Vector",18],[" ",17],["where",12],[" ",17],["Source",18],[" : ",17],["Collection",18,281],[", ",17],["Rule",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Vector",18],[" : ",17],["RangeReplaceableCollection",18,282],[", ",17],["Source",18],[".",17],["Element",18],[" == ",17],["Rule",18],[".",17],["Terminal",18],[", ",17],["Source",18],[".",17],["Index",18],[" == ",17],["Rule",18],[".",17],["Location",18],[", ",17],["Rule",18],[".",17],["Construction",18],[" == ",17],["Vector",18],[".",17],["Element",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Source",0],[", ",17],["Rule",0],[", ",17],["Vector",0],[">(",17],["Source",18],[", ",17],["as",1],[": ",17],["Rule",18],[".Type, ",17],["in",1],[": ",17],["Vector",18],[".Type) ",17],["throws",12],[" -> ",17],["Vector",18]],"c":[["Source",1,"Collection",281],["Rule",1,"ParsingRule",1],["Vector",1,"RangeReplaceableCollection",282],["Source.Element",2,"Rule.Terminal"],["Source.Index",2,"Rule.Location"],["Rule.Construction",2,"Vector.Element"]],"g":[["Source",0,0],["Rule",1,0],["Vector",2,0]]},{"p":["Grammar","Reduce","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Construction",18],[" ",17],["where",12],[" ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9],[", ",17],["Rule",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Rule",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Construction",18]],"c":[["Rule",1,"ParsingRule",1],["Construction",1,"RangeReplaceableCollection",282],["Diagnostics",1,"ParsingDiagnostics",9],["Rule.Construction",2,"Construction.Element"],["Rule.Location",2,"Diagnostics.Source.Index"],["Rule.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Rule",0,0],["Construction",1,0],["Diagnostics",0,1]]},{"p":["Grammar","Collect","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) -> ",17],["Construction",18],[" ",17],["where",12],[" ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9],[", ",17],["Rule",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Rule",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) -> ",17],["Construction",18]],"c":[["Rule",1,"ParsingRule",1],["Construction",1,"RangeReplaceableCollection",282],["Diagnostics",1,"ParsingDiagnostics",9],["Rule.Construction",2,"Construction.Element"],["Rule.Location",2,"Diagnostics.Source.Index"],["Rule.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Rule",0,0],["Construction",1,0],["Diagnostics",0,1]]},{"p":["Grammar","Discard","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) ",17],["where",12],[" ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9],[", ",17],["Rule",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Rule",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">)",17]],"c":[["Rule",1,"ParsingRule",1],["Diagnostics",1,"ParsingDiagnostics",9],["Rule.Construction",2,"()"],["Rule.Location",2,"Diagnostics.Source.Index"],["Rule.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Rule",0,0],["Diagnostics",0,1]]},{"p":["Grammar","Encoding","E","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Terminal",18],[") -> ",17],["Void",18,357],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Terminal",18],[") -> ",17],["Void",18],["?",17]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Newline","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12]],"c":[["Location",2,"Diagnostics.Source.Index"],["Terminal",1,"ASCIITerminal",4],["Terminal",2,"Diagnostics.Source.Element"],["Diagnostics",1,"ParsingDiagnostics",9]],"g":[["Location",0,0],["Terminal",1,0],["Diagnostics",0,1]]},{"p":["Grammar","HexDigit","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Terminal",18],[") -> ",17],["Construction",18],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Terminal",18],[") -> ",17],["Construction",18],["?",17]],"c":[["Terminal",1,"BinaryInteger",286],["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Terminal",1,0],["Construction",2,0]]},{"p":["Grammar","HexDigit","Lowercase","parse(terminal:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Terminal",18],[") -> ",17],["Construction",18],["?",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["terminal",1],[": ",17],["Terminal",18],[") -> ",17],["Construction",18],["?",17]],"c":[["Terminal",1,"BinaryInteger",286],["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Terminal",1,0],["Construction",2,0]]},{"p":["ParsingError","annotate(source:line:newline:)"],"f":[["func",12],[" ",17],["annotate",7],["<",17],["Background",0],[">(",17],["source",1],[" ",17],["background",2],[": ",17],["Background",18],[", ",17],["line",1],[": (",17],["Background",18],[".",17],["SubSequence",18],[") -> ",17],["String",18,269],[", ",17],["newline",1],[": (",17],["Background",18],[".",17],["Element",18],[") -> ",17],["Bool",18,279],[") -> ",17],["String",18,269],[" ",17],["where",12],[" ",17],["Index",18],[" == ",17],["Background",18],[".",17],["Index",18],[", ",17],["Background",18],[" : ",17],["BidirectionalCollection",18,254]],"s":[["func",12],[" ",17],["annotate",7],["<",17],["Background",0],[">(",17],["source",1],[": ",17],["Background",18],[", ",17],["line",1],[": (",17],["Background",18],[".",17],["SubSequence",18],[") -> ",17],["String",18],[", ",17],["newline",1],[": (",17],["Background",18],[".",17],["Element",18],[") -> ",17],["Bool",18],[") -> ",17],["String",18]],"c":[["Index",2,"Background.Index"],["Background",1,"BidirectionalCollection",254]],"g":[["Index",0,0],["Background",0,1]]},{"p":["ParsingInput","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],["?",17]],"c":[["Diagnostics",1,"ParsingDiagnostics",9]],"g":[["Diagnostics",0,0]]},{"p":["ParsingInput","group(_:_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["group",7],["<",17],["Rule",0],[", ",17],["Construction",0],[">(",17],["_",1],[": ",17],["Rule",18],[".Type, ",17],["_",1],[" ",17],["body",2],[": (",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Construction",18],[") ",17],["throws",12],[" -> ",17],["Construction",18]],"s":[["func",12],[" ",17],["group",7],["<",17],["Rule",0],[", ",17],["Construction",0],[">(",17],["Rule",18],[".Type, (",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) ",17],["throws",12],[" -> ",17],["Construction",18],[") ",17],["throws",12],[" -> ",17],["Construction",18]],"c":[["Diagnostics",1,"ParsingDiagnostics",9]],"g":[["Diagnostics",0,0],["Rule",0,1],["Construction",1,1]],"d":"Applies a parsing rule, or a group of parsing rules, appropriately \nhandling cleanup, backtracking, and diagnostic reporting if the parsing \nrule throws an error.\n\nThis API is used by other library methods that are emitted into the \nclient. Although it is safe to use, library users should rarely need \nto call it directly."},{"p":["ParsingInput","parse(as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Rule",0],[">(",17],["as",1],[" ",17],["_",2],[": ",17],["Rule",18],["?.Type) -> ",17],["Rule",18],[".",17],["Construction",18],["? ",17],["where",12],[" ",17],["Rule",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Rule",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Rule",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["parse",7],["<",17],["Rule",0],[">(",17],["as",1],[": ",17],["Rule",18],["?.Type) -> ",17],["Rule",18],[".",17],["Construction",18],["?",17]],"e":[["Diagnostics",1,"ParsingDiagnostics",9]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["Rule",1,"ParsingRule",1],["Rule.Location",2,"Diagnostics.Source.Index"],["Rule.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Diagnostics",0,0],["Rule",0,1]]},{"p":["ParsingInput","parse(as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["T0",0],[", ",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[">(",17],["as",1],[" ",17],["_",2],[": (",17],["T0",18],[", ",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[").Type) ",17],["throws",12],[" -> (",17],["T0",18],[".",17],["Construction",18],[", ",17],["T1",18],[".",17],["Construction",18],[", ",17],["T2",18],[".",17],["Construction",18],[", ",17],["T3",18],[".",17],["Construction",18],[", ",17],["T4",18],[".",17],["Construction",18],[", ",17],["T5",18],[".",17],["Construction",18],[", ",17],["T6",18],[".",17],["Construction",18],[") ",17],["where",12],[" ",17],["T0",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T1",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T2",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T3",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T4",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T5",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T6",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T0",18],[".",17],["Location",18],[" == ",17],["T1",18],[".",17],["Location",18],[", ",17],["T0",18],[".",17],["Terminal",18],[" == ",17],["T1",18],[".",17],["Terminal",18],[", ",17],["T1",18],[".",17],["Location",18],[" == ",17],["T2",18],[".",17],["Location",18],[", ",17],["T1",18],[".",17],["Terminal",18],[" == ",17],["T2",18],[".",17],["Terminal",18],[", ",17],["T2",18],[".",17],["Location",18],[" == ",17],["T3",18],[".",17],["Location",18],[", ",17],["T2",18],[".",17],["Terminal",18],[" == ",17],["T3",18],[".",17],["Terminal",18],[", ",17],["T3",18],[".",17],["Location",18],[" == ",17],["T4",18],[".",17],["Location",18],[", ",17],["T3",18],[".",17],["Terminal",18],[" == ",17],["T4",18],[".",17],["Terminal",18],[", ",17],["T4",18],[".",17],["Location",18],[" == ",17],["T5",18],[".",17],["Location",18],[", ",17],["T4",18],[".",17],["Terminal",18],[" == ",17],["T5",18],[".",17],["Terminal",18],[", ",17],["T5",18],[".",17],["Location",18],[" == ",17],["T6",18],[".",17],["Location",18],[", ",17],["T5",18],[".",17],["Terminal",18],[" == ",17],["T6",18],[".",17],["Terminal",18],[", ",17],["T6",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["T6",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["parse",7],["<",17],["T0",0],[", ",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[", ",17],["T6",0],[">(",17],["as",1],[": (",17],["T0",18],[", ",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[", ",17],["T6",18],[").Type) ",17],["throws",12],[" -> (",17],["T0",18],[".",17],["Construction",18],[", ",17],["T1",18],[".",17],["Construction",18],[", ",17],["T2",18],[".",17],["Construction",18],[", ",17],["T3",18],[".",17],["Construction",18],[", ",17],["T4",18],[".",17],["Construction",18],[", ",17],["T5",18],[".",17],["Construction",18],[", ",17],["T6",18],[".",17],["Construction",18],[")",17]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["T0",1,"ParsingRule",1],["T1",1,"ParsingRule",1],["T2",1,"ParsingRule",1],["T3",1,"ParsingRule",1],["T4",1,"ParsingRule",1],["T5",1,"ParsingRule",1],["T6",1,"ParsingRule",1],["T0.Location",2,"T1.Location"],["T0.Terminal",2,"T1.Terminal"],["T1.Location",2,"T2.Location"],["T1.Terminal",2,"T2.Terminal"],["T2.Location",2,"T3.Location"],["T2.Terminal",2,"T3.Terminal"],["T3.Location",2,"T4.Location"],["T3.Terminal",2,"T4.Terminal"],["T4.Location",2,"T5.Location"],["T4.Terminal",2,"T5.Terminal"],["T5.Location",2,"T6.Location"],["T5.Terminal",2,"T6.Terminal"],["T6.Location",2,"Diagnostics.Source.Index"],["T6.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Diagnostics",0,0],["T0",0,1],["T1",1,1],["T2",2,1],["T3",3,1],["T4",4,1],["T5",5,1],["T6",6,1]]},{"p":["ParsingInput","parse(as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["T0",0],[", ",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[">(",17],["as",1],[" ",17],["_",2],[": (",17],["T0",18],[", ",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[").Type) ",17],["throws",12],[" -> (",17],["T0",18],[".",17],["Construction",18],[", ",17],["T1",18],[".",17],["Construction",18],[", ",17],["T2",18],[".",17],["Construction",18],[", ",17],["T3",18],[".",17],["Construction",18],[", ",17],["T4",18],[".",17],["Construction",18],[", ",17],["T5",18],[".",17],["Construction",18],[") ",17],["where",12],[" ",17],["T0",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T1",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T2",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T3",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T4",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T5",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T0",18],[".",17],["Location",18],[" == ",17],["T1",18],[".",17],["Location",18],[", ",17],["T0",18],[".",17],["Terminal",18],[" == ",17],["T1",18],[".",17],["Terminal",18],[", ",17],["T1",18],[".",17],["Location",18],[" == ",17],["T2",18],[".",17],["Location",18],[", ",17],["T1",18],[".",17],["Terminal",18],[" == ",17],["T2",18],[".",17],["Terminal",18],[", ",17],["T2",18],[".",17],["Location",18],[" == ",17],["T3",18],[".",17],["Location",18],[", ",17],["T2",18],[".",17],["Terminal",18],[" == ",17],["T3",18],[".",17],["Terminal",18],[", ",17],["T3",18],[".",17],["Location",18],[" == ",17],["T4",18],[".",17],["Location",18],[", ",17],["T3",18],[".",17],["Terminal",18],[" == ",17],["T4",18],[".",17],["Terminal",18],[", ",17],["T4",18],[".",17],["Location",18],[" == ",17],["T5",18],[".",17],["Location",18],[", ",17],["T4",18],[".",17],["Terminal",18],[" == ",17],["T5",18],[".",17],["Terminal",18],[", ",17],["T5",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["T5",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["parse",7],["<",17],["T0",0],[", ",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[", ",17],["T5",0],[">(",17],["as",1],[": (",17],["T0",18],[", ",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[", ",17],["T5",18],[").Type) ",17],["throws",12],[" -> (",17],["T0",18],[".",17],["Construction",18],[", ",17],["T1",18],[".",17],["Construction",18],[", ",17],["T2",18],[".",17],["Construction",18],[", ",17],["T3",18],[".",17],["Construction",18],[", ",17],["T4",18],[".",17],["Construction",18],[", ",17],["T5",18],[".",17],["Construction",18],[")",17]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["T0",1,"ParsingRule",1],["T1",1,"ParsingRule",1],["T2",1,"ParsingRule",1],["T3",1,"ParsingRule",1],["T4",1,"ParsingRule",1],["T5",1,"ParsingRule",1],["T0.Location",2,"T1.Location"],["T0.Terminal",2,"T1.Terminal"],["T1.Location",2,"T2.Location"],["T1.Terminal",2,"T2.Terminal"],["T2.Location",2,"T3.Location"],["T2.Terminal",2,"T3.Terminal"],["T3.Location",2,"T4.Location"],["T3.Terminal",2,"T4.Terminal"],["T4.Location",2,"T5.Location"],["T4.Terminal",2,"T5.Terminal"],["T5.Location",2,"Diagnostics.Source.Index"],["T5.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Diagnostics",0,0],["T0",0,1],["T1",1,1],["T2",2,1],["T3",3,1],["T4",4,1],["T5",5,1]]},{"p":["ParsingInput","parse(as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["T0",0],[", ",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[">(",17],["as",1],[" ",17],["_",2],[": (",17],["T0",18],[", ",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[").Type) ",17],["throws",12],[" -> (",17],["T0",18],[".",17],["Construction",18],[", ",17],["T1",18],[".",17],["Construction",18],[", ",17],["T2",18],[".",17],["Construction",18],[", ",17],["T3",18],[".",17],["Construction",18],[", ",17],["T4",18],[".",17],["Construction",18],[") ",17],["where",12],[" ",17],["T0",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T1",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T2",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T3",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T4",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T0",18],[".",17],["Location",18],[" == ",17],["T1",18],[".",17],["Location",18],[", ",17],["T0",18],[".",17],["Terminal",18],[" == ",17],["T1",18],[".",17],["Terminal",18],[", ",17],["T1",18],[".",17],["Location",18],[" == ",17],["T2",18],[".",17],["Location",18],[", ",17],["T1",18],[".",17],["Terminal",18],[" == ",17],["T2",18],[".",17],["Terminal",18],[", ",17],["T2",18],[".",17],["Location",18],[" == ",17],["T3",18],[".",17],["Location",18],[", ",17],["T2",18],[".",17],["Terminal",18],[" == ",17],["T3",18],[".",17],["Terminal",18],[", ",17],["T3",18],[".",17],["Location",18],[" == ",17],["T4",18],[".",17],["Location",18],[", ",17],["T3",18],[".",17],["Terminal",18],[" == ",17],["T4",18],[".",17],["Terminal",18],[", ",17],["T4",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["T4",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["parse",7],["<",17],["T0",0],[", ",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[", ",17],["T4",0],[">(",17],["as",1],[": (",17],["T0",18],[", ",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[", ",17],["T4",18],[").Type) ",17],["throws",12],[" -> (",17],["T0",18],[".",17],["Construction",18],[", ",17],["T1",18],[".",17],["Construction",18],[", ",17],["T2",18],[".",17],["Construction",18],[", ",17],["T3",18],[".",17],["Construction",18],[", ",17],["T4",18],[".",17],["Construction",18],[")",17]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["T0",1,"ParsingRule",1],["T1",1,"ParsingRule",1],["T2",1,"ParsingRule",1],["T3",1,"ParsingRule",1],["T4",1,"ParsingRule",1],["T0.Location",2,"T1.Location"],["T0.Terminal",2,"T1.Terminal"],["T1.Location",2,"T2.Location"],["T1.Terminal",2,"T2.Terminal"],["T2.Location",2,"T3.Location"],["T2.Terminal",2,"T3.Terminal"],["T3.Location",2,"T4.Location"],["T3.Terminal",2,"T4.Terminal"],["T4.Location",2,"Diagnostics.Source.Index"],["T4.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Diagnostics",0,0],["T0",0,1],["T1",1,1],["T2",2,1],["T3",3,1],["T4",4,1]]},{"p":["ParsingInput","parse(as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["T0",0],[", ",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[">(",17],["as",1],[" ",17],["_",2],[": (",17],["T0",18],[", ",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[").Type) ",17],["throws",12],[" -> (",17],["T0",18],[".",17],["Construction",18],[", ",17],["T1",18],[".",17],["Construction",18],[", ",17],["T2",18],[".",17],["Construction",18],[", ",17],["T3",18],[".",17],["Construction",18],[") ",17],["where",12],[" ",17],["T0",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T1",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T2",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T3",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T0",18],[".",17],["Location",18],[" == ",17],["T1",18],[".",17],["Location",18],[", ",17],["T0",18],[".",17],["Terminal",18],[" == ",17],["T1",18],[".",17],["Terminal",18],[", ",17],["T1",18],[".",17],["Location",18],[" == ",17],["T2",18],[".",17],["Location",18],[", ",17],["T1",18],[".",17],["Terminal",18],[" == ",17],["T2",18],[".",17],["Terminal",18],[", ",17],["T2",18],[".",17],["Location",18],[" == ",17],["T3",18],[".",17],["Location",18],[", ",17],["T2",18],[".",17],["Terminal",18],[" == ",17],["T3",18],[".",17],["Terminal",18],[", ",17],["T3",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["T3",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["parse",7],["<",17],["T0",0],[", ",17],["T1",0],[", ",17],["T2",0],[", ",17],["T3",0],[">(",17],["as",1],[": (",17],["T0",18],[", ",17],["T1",18],[", ",17],["T2",18],[", ",17],["T3",18],[").Type) ",17],["throws",12],[" -> (",17],["T0",18],[".",17],["Construction",18],[", ",17],["T1",18],[".",17],["Construction",18],[", ",17],["T2",18],[".",17],["Construction",18],[", ",17],["T3",18],[".",17],["Construction",18],[")",17]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["T0",1,"ParsingRule",1],["T1",1,"ParsingRule",1],["T2",1,"ParsingRule",1],["T3",1,"ParsingRule",1],["T0.Location",2,"T1.Location"],["T0.Terminal",2,"T1.Terminal"],["T1.Location",2,"T2.Location"],["T1.Terminal",2,"T2.Terminal"],["T2.Location",2,"T3.Location"],["T2.Terminal",2,"T3.Terminal"],["T3.Location",2,"Diagnostics.Source.Index"],["T3.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Diagnostics",0,0],["T0",0,1],["T1",1,1],["T2",2,1],["T3",3,1]]},{"p":["ParsingInput","parse(as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["T0",0],[", ",17],["T1",0],[", ",17],["T2",0],[">(",17],["as",1],[" ",17],["_",2],[": (",17],["T0",18],[", ",17],["T1",18],[", ",17],["T2",18],[").Type) ",17],["throws",12],[" -> (",17],["T0",18],[".",17],["Construction",18],[", ",17],["T1",18],[".",17],["Construction",18],[", ",17],["T2",18],[".",17],["Construction",18],[") ",17],["where",12],[" ",17],["T0",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T1",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T2",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T0",18],[".",17],["Location",18],[" == ",17],["T1",18],[".",17],["Location",18],[", ",17],["T0",18],[".",17],["Terminal",18],[" == ",17],["T1",18],[".",17],["Terminal",18],[", ",17],["T1",18],[".",17],["Location",18],[" == ",17],["T2",18],[".",17],["Location",18],[", ",17],["T1",18],[".",17],["Terminal",18],[" == ",17],["T2",18],[".",17],["Terminal",18],[", ",17],["T2",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["T2",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["parse",7],["<",17],["T0",0],[", ",17],["T1",0],[", ",17],["T2",0],[">(",17],["as",1],[": (",17],["T0",18],[", ",17],["T1",18],[", ",17],["T2",18],[").Type) ",17],["throws",12],[" -> (",17],["T0",18],[".",17],["Construction",18],[", ",17],["T1",18],[".",17],["Construction",18],[", ",17],["T2",18],[".",17],["Construction",18],[")",17]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["T0",1,"ParsingRule",1],["T1",1,"ParsingRule",1],["T2",1,"ParsingRule",1],["T0.Location",2,"T1.Location"],["T0.Terminal",2,"T1.Terminal"],["T1.Location",2,"T2.Location"],["T1.Terminal",2,"T2.Terminal"],["T2.Location",2,"Diagnostics.Source.Index"],["T2.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Diagnostics",0,0],["T0",0,1],["T1",1,1],["T2",2,1]]},{"p":["ParsingInput","parse(as:)"],"f":[["@discardableResult",3],[" ",17],["mutating",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["T0",0],[", ",17],["T1",0],[">(",17],["as",1],[" ",17],["_",2],[": (",17],["T0",18],[", ",17],["T1",18],[").Type) ",17],["throws",12],[" -> (",17],["T0",18],[".",17],["Construction",18],[", ",17],["T1",18],[".",17],["Construction",18],[") ",17],["where",12],[" ",17],["T0",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T1",18],[" : ",17],["ParsingRule",18,1],[", ",17],["T0",18],[".",17],["Location",18],[" == ",17],["T1",18],[".",17],["Location",18],[", ",17],["T0",18],[".",17],["Terminal",18],[" == ",17],["T1",18],[".",17],["Terminal",18],[", ",17],["T1",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["T1",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["parse",7],["<",17],["T0",0],[", ",17],["T1",0],[">(",17],["as",1],[": (",17],["T0",18],[", ",17],["T1",18],[").Type) ",17],["throws",12],[" -> (",17],["T0",18],[".",17],["Construction",18],[", ",17],["T1",18],[".",17],["Construction",18],[")",17]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["T0",1,"ParsingRule",1],["T1",1,"ParsingRule",1],["T0.Location",2,"T1.Location"],["T0.Terminal",2,"T1.Terminal"],["T1.Location",2,"Diagnostics.Source.Index"],["T1.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Diagnostics",0,0],["T0",0,1],["T1",1,1]]},{"p":["ParsingInput","parse(as:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Rule",0],[">(",17],["as",1],[" ",17],["_",2],[": ",17],["Rule",18],[".Type) ",17],["throws",12],[" -> ",17],["Rule",18],[".",17],["Construction",18],[" ",17],["where",12],[" ",17],["Rule",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Rule",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Rule",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["parse",7],["<",17],["Rule",0],[">(",17],["as",1],[": ",17],["Rule",18],[".Type) ",17],["throws",12],[" -> ",17],["Rule",18],[".",17],["Construction",18]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["Rule",1,"ParsingRule",1],["Rule.Location",2,"Diagnostics.Source.Index"],["Rule.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Diagnostics",0,0],["Rule",0,1]]},{"p":["ParsingInput","parse(as:in:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["as",1],[" ",17],["_",2],[": ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[".Type, ",17],["in",1],[" ",17],["_",2],[": ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["SubSequence",18],[".Type) -> ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["SubSequence",18]],"s":[["func",12],[" ",17],["parse",7],["(",17],["as",1],[": ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[".Type, ",17],["in",1],[": ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["SubSequence",18],[".Type) -> ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["SubSequence",18]],"e":[["Diagnostics",1,"ParsingDiagnostics",9]],"c":[["Diagnostics",1,"ParsingDiagnostics",9]],"g":[["Diagnostics",0,0]],"d":"Discards and returns all remaining input.\n>   Complexity: O(1)"},{"p":["ParsingInput","parse(as:in:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Rule",0],[", ",17],["Vector",0],[">(",17],["as",1],[" ",17],["_",2],[": ",17],["Rule",18],[".Type, ",17],["in",1],[" ",17],["_",2],[": ",17],["Vector",18],[".Type) -> ",17],["Vector",18],[" ",17],["where",12],[" ",17],["Rule",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Vector",18],[" : ",17],["RangeReplaceableCollection",18,282],[", ",17],["Rule",18],[".",17],["Construction",18],[" == ",17],["Vector",18],[".",17],["Element",18],[", ",17],["Rule",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Rule",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["parse",7],["<",17],["Rule",0],[", ",17],["Vector",0],[">(",17],["as",1],[": ",17],["Rule",18],[".Type, ",17],["in",1],[": ",17],["Vector",18],[".Type) -> ",17],["Vector",18]],"e":[["Diagnostics",1,"ParsingDiagnostics",9]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["Rule",1,"ParsingRule",1],["Vector",1,"RangeReplaceableCollection",282],["Rule.Construction",2,"Vector.Element"],["Rule.Location",2,"Diagnostics.Source.Index"],["Rule.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Diagnostics",0,0],["Rule",0,1],["Vector",1,1]]},{"p":["ParsingInput","parse(as:in:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["as",1],[" ",17],["_",2],[": ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[".Type, ",17],["in",1],[" ",17],["_",2],[": ",17],["Void",18,357],[".Type)",17]],"s":[["func",12],[" ",17],["parse",7],["(",17],["as",1],[": ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[".Type, ",17],["in",1],[": ",17],["Void",18],[".Type)",17]],"e":[["Diagnostics",1,"ParsingDiagnostics",9]],"c":[["Diagnostics",1,"ParsingDiagnostics",9]],"g":[["Diagnostics",0,0]],"d":"Discards all remaining input.\n>   Complexity: O(1)"},{"p":["ParsingInput","parse(as:in:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Rule",0],[">(",17],["as",1],[" ",17],["_",2],[": ",17],["Rule",18],[".Type, ",17],["in",1],[" ",17],["_",2],[": ",17],["Void",18,357],[".Type) ",17],["where",12],[" ",17],["Rule",18],[" : ",17],["ParsingRule",18,1],[", ",17],["Rule",18],[".",17],["Construction",18],[" == (), ",17],["Rule",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Rule",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["parse",7],["<",17],["Rule",0],[">(",17],["as",1],[": ",17],["Rule",18],[".Type, ",17],["in",1],[": ",17],["Void",18],[".Type)",17]],"e":[["Diagnostics",1,"ParsingDiagnostics",9]],"c":[["Diagnostics",1,"ParsingDiagnostics",9],["Rule",1,"ParsingRule",1],["Rule.Construction",2,"()"],["Rule.Location",2,"Diagnostics.Source.Index"],["Rule.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Diagnostics",0,0],["Rule",0,1]]},{"p":["ParsingInput","parse(prefix:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["parse",7],["(",17],["prefix",1],[" ",17],["count",2],[": ",17],["Int",18,280],[") ",17],["throws",12],[" -> ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["SubSequence",18]],"s":[["func",12],[" ",17],["parse",7],["(",17],["prefix",1],[": ",17],["Int",18],[") ",17],["throws",12],[" -> ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["SubSequence",18]],"e":[["Diagnostics",1,"ParsingDiagnostics",9]],"c":[["Diagnostics",1,"ParsingDiagnostics",9]],"g":[["Diagnostics",0,0]]},{"p":["ParsingDiagnostics","pop()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["()",17]],"s":[["func",12],[" ",17],["pop",7],["()",17]]},{"p":["ParsingDiagnostics","push(index:for:by:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["push",7],["<",17],["Rule",0],[", ",17],["Construction",0],[">(",17],["index",1],[": ",17],["Self",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["for",1],[" ",17],["_",2],[": ",17],["Construction",18],[".Type, ",17],["by",1],[" ",17],["_",2],[": ",17],["Rule",18],[".Type) -> ",17],["Self",18],[".",17],["Breadcrumb",18]],"s":[["func",12],[" ",17],["push",7],["<",17],["Rule",0],[", ",17],["Construction",0],[">(",17],["index",1],[": ",17],["Self",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["for",1],[": ",17],["Construction",18],[".Type, ",17],["by",1],[": ",17],["Rule",18],[".Type) -> ",17],["Self",18],[".",17],["Breadcrumb",18]],"g":[["Rule",0,1],["Construction",1,1]]},{"p":["ParsingDiagnostics","reset(index:to:because:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["reset",7],["(",17],["index",1],[": ",17],["inout",12],[" ",17],["Self",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["to",1],[": ",17],["Self",18],[".",17],["Breadcrumb",18],[", ",17],["because",1],[": ",17],["inout",12],[" ",17],["Error",18,358],[")",17]],"s":[["func",12],[" ",17],["reset",7],["(",17],["index",1],[": ",17],["inout",12],[" ",17],["Self",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["to",1],[": ",17],["Self",18],[".",17],["Breadcrumb",18],[", ",17],["because",1],[": ",17],["inout",12],[" ",17],["Error",18],[")",17]]},{"p":["Grammar","NoDiagnostics","pop()"],"f":[["func",12],[" ",17],["pop",7],["()",17]],"s":[["func",12],[" ",17],["pop",7],["()",17]],"c":[["Source",1,"Collection",281]],"g":[["Source",0,0]]},{"p":["Grammar","NoDiagnostics","push(index:for:by:)"],"f":[["func",12],[" ",17],["push",7],["<",17],["Rule",0],[", ",17],["Construction",0],[">(",17],["index",1],[": ",17],["Source",18],[".",17],["Index",18],[", ",17],["for",1],[" ",17],["_",2],[": ",17],["Construction",18],[".Type, ",17],["by",1],[" ",17],["_",2],[": ",17],["Rule",18],[".Type) -> ",17],["Source",18],[".",17],["Index",18]],"s":[["func",12],[" ",17],["push",7],["<",17],["Rule",0],[", ",17],["Construction",0],[">(",17],["index",1],[": ",17],["Source",18],[".",17],["Index",18],[", ",17],["for",1],[": ",17],["Construction",18],[".Type, ",17],["by",1],[": ",17],["Rule",18],[".Type) -> ",17],["Source",18],[".",17],["Index",18]],"c":[["Source",1,"Collection",281]],"g":[["Source",0,0],["Rule",0,1],["Construction",1,1]]},{"p":["Grammar","NoDiagnostics","reset(index:to:because:)"],"f":[["func",12],[" ",17],["reset",7],["(",17],["index",1],[": ",17],["inout",12],[" ",17],["Source",18],[".",17],["Index",18],[", ",17],["to",1],[" ",17],["breadcrumb",2],[": ",17],["Source",18],[".",17],["Index",18],[", ",17],["because",1],[" ",17],["_",2],[": ",17],["inout",12],[" ",17],["Error",18,358],[")",17]],"s":[["func",12],[" ",17],["reset",7],["(",17],["index",1],[": ",17],["inout",12],[" ",17],["Source",18],[".",17],["Index",18],[", ",17],["to",1],[": ",17],["Source",18],[".",17],["Index",18],[", ",17],["because",1],[": ",17],["inout",12],[" ",17],["Error",18],[")",17]],"c":[["Source",1,"Collection",281]],"g":[["Source",0,0]]},{"p":["Grammar","DefaultDiagnostics","pop()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["pop",7],["()",17]],"s":[["func",12],[" ",17],["pop",7],["()",17]],"c":[["Source",1,"Collection",281]],"g":[["Source",0,0]]},{"p":["Grammar","DefaultDiagnostics","push(index:for:by:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["push",7],["<",17],["Rule",0],[", ",17],["Construction",0],[">(",17],["index",1],[": ",17],["Source",18],[".",17],["Index",18],[", ",17],["for",1],[" ",17],["_",2],[": ",17],["Construction",18],[".Type, ",17],["by",1],[" ",17],["_",2],[": ",17],["Rule",18],[".Type)",17]],"s":[["func",12],[" ",17],["push",7],["<",17],["Rule",0],[", ",17],["Construction",0],[">(",17],["index",1],[": ",17],["Source",18],[".",17],["Index",18],[", ",17],["for",1],[": ",17],["Construction",18],[".Type, ",17],["by",1],[": ",17],["Rule",18],[".Type)",17]],"c":[["Source",1,"Collection",281]],"g":[["Source",0,0],["Rule",0,1],["Construction",1,1]]},{"p":["Grammar","DefaultDiagnostics","reset(index:to:because:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["reset",7],["(",17],["index",1],[": ",17],["inout",12],[" ",17],["Source",18],[".",17],["Index",18],[", ",17],["to",1],[" ",17],["_",2],[": ",17],["Void",18,357],[", ",17],["because",1],[" ",17],["error",2],[": ",17],["inout",12],[" ",17],["Error",18,358],[")",17]],"s":[["func",12],[" ",17],["reset",7],["(",17],["index",1],[": ",17],["inout",12],[" ",17],["Source",18],[".",17],["Index",18],[", ",17],["to",1],[": ",17],["Void",18],[", ",17],["because",1],[": ",17],["inout",12],[" ",17],["Error",18],[")",17]],"c":[["Source",1,"Collection",281]],"g":[["Source",0,0]]},{"p":["Grammar","TerminalClass"],"f":[["typealias",12],[" ",17],["TerminalClass",7],[" = ",17],["TerminalRule",18,2]],"s":[["typealias",12],[" ",17],["TerminalClass",7]],"a":{"a":{"d":true,"r":"TerminalRule"}}},{"p":["Grammar","HexDigitScalar","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["Unicode",18,362],[".",17],["Scalar",18,363]],"s":[["typealias",12],[" ",17],["Terminal",7]],"c":[["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Construction",1,0]]},{"p":["Grammar","HexDigitScalar","Lowercase","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["Unicode",18,362],[".",17],["Scalar",18,363]],"s":[["typealias",12],[" ",17],["Terminal",7]],"c":[["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Construction",1,0]]},{"p":["Grammar","TerminalSequence"],"f":[["typealias",12],[" ",17],["TerminalSequence",7],[" = ",17],["LiteralRule",18,0]],"s":[["typealias",12],[" ",17],["TerminalSequence",7]],"a":{"a":{"d":true,"r":"LiteralRule"}}},{"p":["Grammar","DecimalDigitScalar","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["Unicode",18,362],[".",17],["Scalar",18,363]],"s":[["typealias",12],[" ",17],["Terminal",7]],"c":[["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Construction",1,0]]},{"p":["Grammar","UnsignedIntegerLiteral"],"f":[["typealias",12],[" ",17],["UnsignedIntegerLiteral",7],["<",17],["Digit",0],["> = ",17],["Grammar",18,18],[".",17],["UnsignedNormalizedIntegerLiteral",18,25],["<",17],["Digit",18],[", ",17],["Digit",18],["> ",17],["where",12],[" ",17],["Digit",18],[" : ",17],["DigitRule",18,11],[", ",17],["Digit",18],[".",17],["Construction",18],[" : ",17],["FixedWidthInteger",18,313]],"s":[["typealias",12],[" ",17],["UnsignedIntegerLiteral",7]],"c":[["Digit",1,"DigitRule",11],["Digit.Construction",1,"FixedWidthInteger",313]],"g":[["Digit",0,0]]},{"p":["Grammar","NaturalDecimalDigitScalar","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["Unicode",18,362],[".",17],["Scalar",18,363]],"s":[["typealias",12],[" ",17],["Terminal",7]],"c":[["Construction",1,"BinaryInteger",286]],"g":[["Location",0,0],["Construction",1,0]]},{"p":["Grammar","UnsignedNormalizedIntegerLiteral","Location"],"f":[["typealias",12],[" ",17],["Location",7],[" = ",17],["First",18],[".",17],["Location",18]],"s":[["typealias",12],[" ",17],["Location",7]],"c":[["First",1,"ParsingRule",1],["Next",1,"DigitRule",11],["First.Construction",1,"FixedWidthInteger",313],["First.Construction",2,"Next.Construction"],["First.Location",2,"Next.Location"],["First.Terminal",2,"Next.Terminal"]],"g":[["First",0,0],["Next",1,0]]},{"p":["Grammar","UnsignedNormalizedIntegerLiteral","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["First",18],[".",17],["Terminal",18]],"s":[["typealias",12],[" ",17],["Terminal",7]],"c":[["First",1,"ParsingRule",1],["Next",1,"DigitRule",11],["First.Construction",1,"FixedWidthInteger",313],["First.Construction",2,"Next.Construction"],["First.Location",2,"Next.Location"],["First.Terminal",2,"Next.Terminal"]],"g":[["First",0,0],["Next",1,0]]},{"p":["Grammar","Pad","Location"],"f":[["typealias",12],[" ",17],["Location",7],[" = ",17],["Rule",18],[".",17],["Location",18]],"s":[["typealias",12],[" ",17],["Location",7]],"c":[["Rule",1,"ParsingRule",1],["Padding",1,"ParsingRule",1],["Rule.Location",2,"Padding.Location"],["Rule.Terminal",2,"Padding.Terminal"],["Padding.Construction",2,"()"]],"g":[["Rule",0,0],["Padding",1,0]]},{"p":["Grammar","Pad","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["Rule",18],[".",17],["Terminal",18]],"s":[["typealias",12],[" ",17],["Terminal",7]],"c":[["Rule",1,"ParsingRule",1],["Padding",1,"ParsingRule",1],["Rule.Location",2,"Padding.Location"],["Rule.Terminal",2,"Padding.Terminal"],["Padding.Construction",2,"()"]],"g":[["Rule",0,0],["Padding",1,0]]},{"p":["Grammar","Join","Location"],"f":[["typealias",12],[" ",17],["Location",7],[" = ",17],["Rule",18],[".",17],["Location",18]],"s":[["typealias",12],[" ",17],["Location",7]],"c":[["Rule",1,"ParsingRule",1],["Separator",1,"ParsingRule",1],["Construction",1,"RangeReplaceableCollection",282],["Rule.Construction",2,"Construction.Element"],["Rule.Location",2,"Separator.Location"],["Rule.Terminal",2,"Separator.Terminal"],["Separator.Construction",2,"()"]],"g":[["Rule",0,0],["Separator",1,0],["Construction",2,0]]},{"p":["Grammar","Join","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["Rule",18],[".",17],["Terminal",18]],"s":[["typealias",12],[" ",17],["Terminal",7]],"c":[["Rule",1,"ParsingRule",1],["Separator",1,"ParsingRule",1],["Construction",1,"RangeReplaceableCollection",282],["Rule.Construction",2,"Construction.Element"],["Rule.Location",2,"Separator.Location"],["Rule.Terminal",2,"Separator.Terminal"],["Separator.Construction",2,"()"]],"g":[["Rule",0,0],["Separator",1,0],["Construction",2,0]]},{"p":["Grammar","Reduce","Location"],"f":[["typealias",12],[" ",17],["Location",7],[" = ",17],["Rule",18],[".",17],["Location",18]],"s":[["typealias",12],[" ",17],["Location",7]],"c":[["Rule",1,"ParsingRule",1],["Construction",1,"RangeReplaceableCollection",282],["Rule.Construction",2,"Construction.Element"]],"g":[["Rule",0,0],["Construction",1,0]]},{"p":["Grammar","Reduce","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["Rule",18],[".",17],["Terminal",18]],"s":[["typealias",12],[" ",17],["Terminal",7]],"c":[["Rule",1,"ParsingRule",1],["Construction",1,"RangeReplaceableCollection",282],["Rule.Construction",2,"Construction.Element"]],"g":[["Rule",0,0],["Construction",1,0]]},{"p":["Grammar","Collect","Location"],"f":[["typealias",12],[" ",17],["Location",7],[" = ",17],["Rule",18],[".",17],["Location",18]],"s":[["typealias",12],[" ",17],["Location",7]],"c":[["Rule",1,"ParsingRule",1],["Construction",1,"RangeReplaceableCollection",282],["Rule.Construction",2,"Construction.Element"]],"g":[["Rule",0,0],["Construction",1,0]]},{"p":["Grammar","Collect","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["Rule",18],[".",17],["Terminal",18]],"s":[["typealias",12],[" ",17],["Terminal",7]],"c":[["Rule",1,"ParsingRule",1],["Construction",1,"RangeReplaceableCollection",282],["Rule.Construction",2,"Construction.Element"]],"g":[["Rule",0,0],["Construction",1,0]]},{"p":["Grammar","Discard","Location"],"f":[["typealias",12],[" ",17],["Location",7],[" = ",17],["Rule",18],[".",17],["Location",18]],"s":[["typealias",12],[" ",17],["Location",7]],"c":[["Rule",1,"ParsingRule",1],["Rule.Construction",2,"()"]],"g":[["Rule",0,0]]},{"p":["Grammar","Discard","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["Rule",18],[".",17],["Terminal",18]],"s":[["typealias",12],[" ",17],["Terminal",7]],"c":[["Rule",1,"ParsingRule",1],["Rule.Construction",2,"()"]],"g":[["Rule",0,0]]},{"p":["Grammar","Encoding","E","Construction"],"f":[["typealias",12],[" ",17],["Construction",7],[" = ",17],["Void",18,357]],"s":[["typealias",12],[" ",17],["Construction",7]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Encoding","Hyphen"],"f":[["typealias",12],[" ",17],["Hyphen",7],[" = ",17],["Grammar",18,18],[".",17],["Encoding",18,32],["<",17],["Location",18],[", ",17],["Terminal",18],[">.",17],["Minus",18,63]],"s":[["typealias",12],[" ",17],["Hyphen",7]],"e":[["Terminal",1,"ASCIITerminal",4]],"c":[["Terminal",1,"ASCIITerminal",4]],"g":[["Location",0,0],["Terminal",1,0]]},{"p":["Grammar","Parsable"],"f":[["typealias",12],[" ",17],["Parsable",7],["<",17],["Location",0],[", ",17],["Terminal",0],[", ",17],["Diagnostics",0],["> = ",17],["Never",18,359],[" ",17],["where",12],[" ",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18],[", ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9]],"s":[["typealias",12],[" ",17],["Parsable",7]],"c":[["Location",2,"Diagnostics.Source.Index"],["Terminal",2,"Diagnostics.Source.Element"],["Diagnostics",1,"ParsingDiagnostics",9]],"g":[["Location",0,0],["Terminal",1,0],["Diagnostics",2,0]],"d":"A shortcut for expressing the type constraints on ``ParsingRule.parse(_:)``.\n\nTo use this compile-time abstraction, fill in its generic parameters and \ndeclare that it must conform to [`Any`]().\n\nFor example, the following:\n\n   ```swift \n   static \n   func parse<Diagnostics>(_ input:inout ParsingInput<Diagnostics>) \n       throws -> Void?\n       where Grammar.Parsable<String.Index, UInt8, Diagnostics>:Any\n   {\n       // ...\n   }\n   ```\n   \nis equivalent to:\n\n   ```swift \n   static \n   func parse<Diagnostics>(_ input:inout ParsingInput<Diagnostics>) \n       throws -> Void?\n       where   Diagnostics:ParsingDiagnostics, \n               Diagnostics.Source.Index == String.Index,\n               Diagnostics.Source.Element == UInt8\n   {\n       // ...\n   }\n   ```\n   "},{"p":["Array","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) -> [",17],["Element",18],[".",17],["Construction",18],["] ",17],["where",12],[" ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9],[", ",17],["Element",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Element",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) -> [",17],["Element",18],[".",17],["Construction",18],["]",17]],"e":[["Element",1,"ParsingRule",1]],"c":[["Element",1,"ParsingRule",1],["Diagnostics",1,"ParsingDiagnostics",9],["Element.Location",2,"Diagnostics.Source.Index"],["Element.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Element",0,0],["Diagnostics",0,1]]},{"p":["Optional","parse(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["_",1],[" ",17],["input",2],[": ",17],["inout",12],[" ",17],["ParsingInput",18,83],["<",17],["Diagnostics",18],[">) -> ",17],["Wrapped",18],[".",17],["Construction",18],["? ",17],["where",12],[" ",17],["Diagnostics",18],[" : ",17],["ParsingDiagnostics",18,9],[", ",17],["Wrapped",18],[".",17],["Location",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Index",18],[", ",17],["Wrapped",18],[".",17],["Terminal",18],[" == ",17],["Diagnostics",18],[".",17],["Source",18],[".",17],["Element",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["parse",7],["<",17],["Diagnostics",0],[">(",17],["inout",12],[" ",17],["ParsingInput",18],["<",17],["Diagnostics",18],[">) -> ",17],["Wrapped",18],[".",17],["Construction",18],["?",17]],"e":[["Wrapped",1,"ParsingRule",1]],"c":[["Wrapped",1,"ParsingRule",1],["Diagnostics",1,"ParsingDiagnostics",9],["Wrapped.Location",2,"Diagnostics.Source.Index"],["Wrapped.Terminal",2,"Diagnostics.Source.Element"]],"g":[["Wrapped",0,0],["Diagnostics",0,1]]},{"p":["Array","Location"],"f":[["typealias",12],[" ",17],["Location",7],[" = ",17],["Element",18],[".",17],["Location",18]],"s":[["typealias",12],[" ",17],["Location",7]],"e":[["Element",1,"ParsingRule",1]],"c":[["Element",1,"ParsingRule",1]],"g":[["Element",0,0]]},{"p":["Array","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["Element",18],[".",17],["Terminal",18]],"s":[["typealias",12],[" ",17],["Terminal",7]],"e":[["Element",1,"ParsingRule",1]],"c":[["Element",1,"ParsingRule",1]],"g":[["Element",0,0]]},{"p":["Optional","Location"],"f":[["typealias",12],[" ",17],["Location",7],[" = ",17],["Wrapped",18],[".",17],["Location",18]],"s":[["typealias",12],[" ",17],["Location",7]],"e":[["Wrapped",1,"ParsingRule",1]],"c":[["Wrapped",1,"ParsingRule",1]],"g":[["Wrapped",0,0]]},{"p":["Optional","Terminal"],"f":[["typealias",12],[" ",17],["Terminal",7],[" = ",17],["Wrapped",18],[".",17],["Terminal",18]],"s":[["typealias",12],[" ",17],["Terminal",7]],"e":[["Wrapped",1,"ParsingRule",1]],"c":[["Wrapped",1,"ParsingRule",1]],"g":[["Wrapped",0,0]]}],"edges":{"conformer":[0,1,[],2,1,[],3,4,[],3,267,[],4,267,[],5,4,[],5,267,[],6,352,[],6,358,[],6,364,[],7,4,[],7,267,[],8,4,[],8,7,[],8,267,[],10,6,[],10,352,[],10,358,[],10,364,[],11,1,[],11,2,[],19,1,[],19,2,[],19,11,[],20,1,[],20,2,[],20,11,[],21,1,[],21,2,[],21,11,[],22,1,[],22,2,[],22,11,[],23,1,[],23,2,[],24,1,[],24,2,[],25,1,[],26,1,[],27,1,[],28,1,[],29,1,[],30,1,[],31,1,[],33,0,[],33,1,[],34,0,[],34,1,[],35,0,[],35,1,[],36,0,[],36,1,[],37,0,[],37,1,[],38,0,[],38,1,[],39,0,[],39,1,[],40,0,[],40,1,[],41,1,[],41,2,[],42,0,[],42,1,[],44,0,[],44,1,[],46,0,[],46,1,[],48,0,[],48,1,[],50,0,[],50,1,[],51,0,[],51,1,[],52,0,[],52,1,[],53,0,[],53,1,[],54,0,[],54,1,[],55,0,[],55,1,[],56,0,[],56,1,[],57,0,[],57,1,[],58,0,[],58,1,[],59,0,[],59,1,[],60,0,[],60,1,[],61,0,[],61,1,[],62,0,[],62,1,[],63,0,[],63,1,[],64,0,[],64,1,[],65,0,[],65,1,[],66,0,[],66,1,[],67,0,[],67,1,[],68,0,[],68,1,[],69,0,[],69,1,[],70,0,[],70,1,[],71,0,[],71,1,[],72,1,[],73,0,[],73,1,[],74,0,[],74,1,[],75,0,[],75,1,[],76,0,[],76,1,[],77,0,[],77,1,[],78,0,[],78,1,[],79,1,[],79,2,[],79,11,[],80,1,[],80,2,[],80,11,[],81,6,[],81,352,[],81,358,[],81,364,[],84,9,[],84,364,[],85,352,[],85,358,[],85,364,[],86,9,[],87,352,[],87,358,[],87,364,[],88,352,[],88,358,[],88,364,[],278,1,[["Element",1,"ParsingRule",1]],283,1,[["Wrapped",1,"ParsingRule",1]],360,3,[],361,5,[],363,7,[]],"feature":[167,81,176,33,176,34,176,35,176,36,176,37,176,38,176,39,176,40,176,42,176,44,176,46,176,48,176,50,176,51,176,52,176,53,176,54,176,55,176,56,176,57,176,58,176,59,176,60,176,61,176,62,176,63,176,64,176,65,176,66,176,67,176,68,176,69,176,70,176,71,176,73,176,74,176,75,176,76,176,77,176,78,179,19,179,20,179,21,179,22,179,23,179,24,179,41,179,79,179,80,259,360,259,361,260,360,260,361,261,360,261,361,262,360,262,361,263,360,263,361,264,360,264,361,265,360,265,361,266,360,266,361,271,360,271,361,272,360,272,361,273,360,273,361,274,360,274,361,275,360,275,361,276,360,276,361,284,360,284,361,285,360,285,361,288,360,288,361,291,360,291,361,292,360,292,361,293,360,293,361,294,360,294,361,295,360,295,361,296,360,296,361,297,360,297,361,298,360,298,361,299,360,299,361,300,360,300,361,301,360,301,361,302,360,302,361,303,360,303,361,304,360,304,361,305,360,305,361,306,360,306,361,307,360,307,361,308,360,308,361,309,360,309,361,310,360,310,361,311,360,311,361,314,360,314,361,315,360,315,361,316,360,316,361,317,360,317,361,318,360,318,361,319,360,319,361,320,360,320,361,321,360,321,361,322,360,322,361,323,360,323,361,324,360,324,361,325,360,325,361,326,360,326,361,327,360,327,361,328,360,328,361,329,360,329,361,330,360,330,361,331,360,331,361,332,360,332,361,333,360,333,361,334,360,334,361,335,360,335,361,336,360,336,361,337,360,337,361,338,360,338,361,339,360,339,361,340,360,340,361,341,360,341,361,342,360,342,361,343,360,343,361,344,360,344,361,345,360,345,361,348,360,348,361,349,360,349,361,350,360,350,361,351,360,351,361,354,81,354,85,354,87,354,88,354,360,354,361,356,360,356,361],"member":[19,18,20,18,21,20,22,18,23,18,24,18,25,18,26,18,27,18,28,18,29,18,30,18,31,18,32,18,33,32,34,32,35,32,36,32,37,32,38,32,39,32,40,32,41,32,42,41,43,32,44,43,45,32,46,45,47,32,48,47,49,32,50,49,51,32,52,32,53,32,54,32,55,32,56,32,57,32,58,32,59,32,60,32,61,32,62,32,63,32,64,32,65,32,66,32,67,32,68,32,69,32,70,32,71,32,72,32,73,32,74,32,75,32,76,32,77,32,78,32,79,18,80,79,82,81,84,18,85,18,86,18,87,18,88,18,89,81,90,82,91,83,97,84,98,85,99,86,100,87,101,88,102,83,103,83,105,81,108,19,109,20,110,21,111,22,112,33,113,34,114,35,115,36,116,37,117,38,118,39,119,40,120,42,121,44,122,46,123,48,124,50,125,51,126,52,127,53,128,54,129,55,130,56,131,57,132,58,133,59,134,60,135,61,136,62,137,63,138,64,139,65,140,66,141,67,142,68,143,69,144,70,145,71,146,73,147,74,148,75,149,76,150,77,151,78,152,79,153,80,154,81,155,82,156,82,157,82,158,81,159,81,160,81,161,81,162,83,163,83,164,83,167,6,171,85,172,86,173,86,174,87,175,88,180,19,181,20,182,21,183,22,184,23,185,24,186,25,187,26,188,27,189,28,190,18,191,18,192,18,193,29,194,30,195,31,196,41,197,72,198,79,199,80,200,81,201,83,202,83,203,83,204,83,205,83,206,83,207,83,208,83,209,83,210,83,211,83,212,83,213,83,214,83,215,83,219,84,220,84,221,84,222,86,223,86,224,86,225,18,226,20,227,21,228,18,229,22,230,18,231,24,232,25,233,25,234,27,235,27,236,28,237,28,238,29,239,29,240,30,241,30,242,31,243,31,244,41,245,32,246,18,247,278,248,283,249,278,250,278,251,283,252,283],"requirement":[12,0,13,1,14,1,15,1,16,9,17,9,92,4,93,5,94,7,95,8,96,9,104,0,106,6,107,11,165,6,166,6,168,10,177,1,178,2,216,9,217,9,218,9],"defaultImplementation":[167,353,169,165,170,166,176,177,179,177]},"hints":[97,96,99,96,105,106,108,107,109,107,110,107,111,107,112,104,113,104,114,104,115,104,116,104,117,104,118,104,119,104,120,104,121,104,122,104,123,104,124,104,125,104,126,104,127,104,128,104,129,104,130,104,131,104,132,104,133,104,134,104,135,104,136,104,137,104,138,104,139,104,140,104,141,104,142,104,143,104,144,104,145,104,146,104,147,104,148,104,149,104,150,104,151,104,152,107,153,107,154,165,160,166,167,353,171,353,174,353,175,353,176,177,179,177,180,178,181,178,182,178,183,178,184,178,185,178,186,177,187,177,188,177,189,177,193,177,194,177,195,177,196,178,197,177,198,178,199,178,219,216,220,217,221,218,222,216,223,217,224,218,226,15,227,15,229,15,231,15,232,14,233,15,234,14,235,15,236,14,237,15,238,14,239,15,240,14,241,15,242,14,243,15,244,13,247,177,248,177,249,14,250,15,251,14,252,15,259,259,260,260,261,261,262,262,263,263,264,264,265,265,266,266,271,271,272,272,273,273,274,274,275,275,276,276,284,256,285,268,288,288,291,287,292,292,293,293,294,294,295,255,296,296,297,297,298,298,299,299,300,300,301,301,302,257,303,303,304,304,305,258,306,306,307,307,308,308,309,309,310,310,311,311,314,314,315,315,316,316,317,317,318,318,319,319,320,320,321,321,322,322,323,323,324,324,325,325,326,326,327,327,328,328,329,329,330,330,331,289,332,290,333,333,334,334,335,335,336,336,337,337,338,338,339,339,340,340,341,341,342,342,343,343,344,344,345,345,348,348,349,346,350,347,351,351,354,354,356,355],"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/digit.swift","symbols":[1,9,11,4,8,107,13,9,23,17,13,184,28,9,19,32,12,108,37,13,180,48,9,79,52,12,152,57,13,198,69,13,80,72,16,153,77,17,199,92,9,24,95,18,231,98,13,185,105,9,22,108,18,229,111,12,111,116,13,183,123,9,20,126,18,226,129,12,109,134,13,181,150,13,21,153,22,227,156,16,110,161,17,182,180,11,87,185,8,100,189,12,174,196,14,230,200,9,25,207,18,232,209,18,233,212,13,186]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/grammar.swift","symbols":[2,5,18,37,14,246,44,9,32,49,11,88,52,8,101,56,12,175,62,11,85,65,8,98,69,12,171,76,9,190,86,9,191,96,9,192,111,14,228,115,14,225]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/literal.swift","symbols":[2,9,4,4,4,92,7,9,3,11,9,5,13,4,93,16,9,7,18,4,94,21,9,8,23,4,95,46,9,37,49,12,116,53,9,51,56,12,125,59,9,76,62,12,149,65,9,33,68,12,112,71,9,77,74,12,150,77,9,78,80,12,151,83,9,34,86,12,113,89,9,35,92,12,114,95,9,36,98,12,115,101,9,60,104,12,134,107,9,61,110,12,135,113,9,69,116,12,143,119,9,70,122,12,144,125,9,74,128,12,147,131,9,63,134,12,137,137,9,39,140,12,118,143,9,40,146,12,119,149,9,73,152,12,146,155,9,71,158,12,145,161,9,58,164,12,132,167,9,64,170,12,138,173,9,75,176,12,148,179,9,38,182,12,117,185,9,66,188,12,140,191,9,67,194,12,141,198,9,41,201,13,42,204,16,120,208,18,244,210,13,196,222,9,43,225,13,44,228,16,121,232,9,45,235,13,46,238,16,122,242,9,49,245,13,50,248,16,124,252,9,47,255,13,48,258,16,123,263,9,59,266,12,133,269,9,52,272,12,126,275,9,54,278,12,128,281,9,68,284,12,142,287,9,56,290,12,130,293,9,55,296,12,129,299,9,53,302,12,127,305,9,65,308,12,139,311,9,62,314,12,136,317,9,57,320,12,131,323,14,245,326,9,72,329,13,197]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/literalrule.swift","symbols":[1,9,0,4,19,12,6,8,104,14,9,176]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/parsingdiagnostics.swift","symbols":[1,9,9,3,19,17,4,19,16,6,4,96,9,9,217,12,9,216,14,9,218,27,11,84,30,8,97,37,13,220,44,13,219,49,13,221,61,11,86,64,12,172,65,12,173,67,8,99,73,13,223,78,13,222,83,13,224]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/parsingerror.swift","symbols":[10,7,81,16,11,82,21,12,157,28,12,156,35,12,155,42,8,90,51,8,105,57,8,161,64,8,158,66,8,159,69,4,89,76,8,160,91,8,154,136,9,200]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/parsinginput.swift","symbols":[7,7,83,10,8,164,12,8,163,14,8,162,16,4,91,23,4,103,28,4,102,35,9,201,56,9,202,75,9,210,83,9,209,98,9,208,115,9,207,134,9,206,155,9,205,178,9,204,206,9,203,212,9,214,221,9,212,234,9,215,250,9,211,261,9,213]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/parsingrule.swift","symbols":[2,9,1,16,19,14,18,19,15,25,19,13,43,9,177,53,14,251,55,14,252,58,9,248,70,14,249,72,14,250,75,9,247,87,9,26,90,13,187,102,9,31,106,18,242,108,18,243,110,13,195,119,9,30,124,18,240,126,18,241,128,13,194,137,9,29,142,18,238,144,18,239,146,13,193,161,9,28,170,18,237,172,18,236,174,13,189,189,9,27,196,18,235,198,18,234,200,13,188]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/terminalrule.swift","symbols":[1,9,2,4,9,178,9,9,179]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-grammar@0.1.5/.build/checkouts/swift-grammar/sources/traceableerror.swift","symbols":[1,9,6,4,8,106,8,8,165,12,8,166,18,9,10,20,8,168,28,8,170,32,8,169,64,8,167]}]}