{"culture":"Markdown","dependencies":[],"extensions":[{"name":"Markdown","source":"# ``Markdown``\n\nSwift `Markdown` is a Swift package for parsing, building, editing, and analyzing Markdown documents.\n\n## Overview\n\nThe parser is powered by GitHub-flavored Markdown's [cmark-gfm](https://github.com/github/cmark-gfm) implementation, so it follows the spec closely. As the needs of the community change, the effective dialect implemented by this library may change.\n\nThe markup tree provided by this package is comprised of immutable/persistent, thread-safe, copy-on-write value types that only copy substructure that has changed. Other examples of the main strategy behind this library can be seen in Swift's [lib/Syntax](https://github.com/apple/swift/tree/master/lib/Syntax) and its Swift bindings, [SwiftSyntax](https://github.com/apple/swift-syntax).\n\n## Topics\n\n### Getting Started\n\n- <doc:Parsing-Building-and-Modifying-Markup-Trees>\n- <doc:Visitors-Walkers-and-Rewriters>\n\n### Essentials\n\n- ``Markup``\n- ``MarkupChildren``\n- ``ChildIndexPath``\n- ``TypedChildIndexPath``\n- ``DirectiveArgument``\n- ``DirectiveArgumentText``\n- ``Document``\n- ``LiteralMarkup``\n- ``PlainTextConvertibleMarkup``\n\n### Markup Types\n\n- <doc:BlockMarkup>\n- <doc:InlineMarkup>\n- ``Aside``\n\n### Infrastructure\n\n- <doc:Infrastructure> \n\n### Visit Markup\n\n- <doc:VisitMarkup> \n- <doc:FormatterAndOptions>\n\n<!-- Copyright (c) 2021-2022 Apple Inc and the Swift Project authors. All Rights Reserved. -->\n"},{"name":"Parsing-Building-and-Modifying Markup-Trees","source":"# Parsing, Building, and Modifying Markup Trees\n\nGet started with Swift-Markdown's markup trees.\n\n## Parsing\n\nTo create a new ``Document`` by parsing markdown content, use Document's ``Document/init(parsing:options:)`` initializer, supplying a `String` or `URL`:\n\n```swift\nimport Markdown\n\nlet source = \"This is a markup *document*.\"\nlet document = Document(parsing: source)\nprint(document.debugDescription())\n// Document\n// └─ Paragraph\n//    ├─ Text \"This is a markup \"\n//    ├─ Emphasis\n//    │  └─ Text \"document\"\n//    └─ Text \".\"\n```\n\nParsing text is just one way to build a tree of ``Markup`` elements. You can also build them yourself declaratively.\n\n## Building Markup Trees\n\nYou can build trees using initializers for the various element types provided.\n\n```swift\nimport Markdown\n\nlet document = Document(\n    Paragraph(\n        Text(\"This is a \"),\n        Emphasis(\n            Text(\"paragraph.\"))))\n```\n\nThis would be equivalent to parsing `\"This is a *paragraph.*\"` but allows you to programmatically insert content from other data sources into individual elements.\n\n## Modifying Markup Trees with Persistence\n\nSwift Markdown uses a [persistent](https://en.wikipedia.org/wiki/Persistent_data_structure) tree for its backing storage, providing effectively immutable, copy-on-write value types that only copy the substructure necessary to create a unique root without affecting the previous version of the tree.\n\n### Modifying Elements Directly\n\nIf you just need to make a quick change, you can modify an element anywhere in a tree, and Swift Markdown will create copies of substructure that cannot be shared.\n\n```swift\nimport Markdown\n\nlet source = \"This is *emphasized.*\"\nlet document = Document(parsing: source)\nprint(document.debugDescription())\n// Document\n// └─ Paragraph\n//    ├─ Text \"This is \"\n//    └─ Emphasis\n//       └─ Text \"emphasized.\"\n\nvar text = document.child(through:\n    0, // Paragraph\n    1, // Emphasis\n    0) as! Text // Text\n\ntext.string = \"really emphasized!\"\nprint(text.root.debugDescription())\n// Document\n// └─ Paragraph\n//    ├─ Text \"This is \"\n//    └─ Emphasis\n//       └─ Text \"really emphasized!\"\n\n// The original document is unchanged:\n\nprint(document.debugDescription())\n// Document\n// └─ Paragraph\n//    ├─ Text \"This is \"\n//    └─ Emphasis\n//       └─ Text \"emphasized.\"\n```\n\nIf you find yourself needing to systematically change many parts of a tree, or even provide a complete transformation into something else, maybe the familiar [Visitor Pattern](https://en.wikipedia.org/wiki/Visitor_pattern) is what you want.\n\n<!-- Copyright (c) 2021-2022 Apple Inc and the Swift Project authors. All Rights Reserved. -->\n"},{"name":"Visitors-Walkers-and-Rewriters","source":"# Visitors, Walkers, and Rewriters\n\nUse `MarkupVisitor` to transform, walk, and rewrite markup trees.\n\n## Markup Visitor\n\nThe core ``MarkupVisitor`` protocol provides the basis for transforming, walking, or rewriting a markup tree.\n\n```swift\npublic protocol MarkupVisitor {\n    associatedtype Result\n}\n```\n\nUsing its ``MarkupVisitor/Result`` type, you can transform a markup tree into anything: another markup tree, or perhaps a tree of XML or HTML elements. There are two included refinements of `MarkupVisitor` for common uses.\n\n## Markup Walker\n\nThe first refinement of `MarkupVisitor`, ``MarkupWalker``, has an associated `Result` type of `Void`, so it's meant for summarizing or detecting aspects of a markup tree. If you wanted to append to a string as elements are visited, this might be a good tool for that.\n\n```swift\nimport Markdown\n\n/// Counts `Link`s in a `Document`.\nstruct LinkCounter: MarkupWalker {\n    var count = 0\n    mutating func visitLink(_ link: Link) {\n        if link.destination == \"https://swift.org\" {\n            count += 1\n        }\n        descendInto(link)\n    }\n}\n\nlet source = \"There are [two](https://swift.org) links to <https://swift.org> here.\"\nlet document = Document(parsing: source)\nprint(document.debugDescription())\nvar linkCounter = LinkCounter()\nlinkCounter.visit(document)\nprint(linkCounter.count)\n// 2\n```\n\n## Markup Rewriter\n\nThe second refinement, ``MarkupRewriter``, has an associated `Result` type of an optional ``Markup`` element, so it's meant to change or even remove elements from a markup tree. You can return `nil` to delete an element, or return another element to substitute in its place.\n\n```swift\nimport Markdown\n\n/// Delete all **strong** elements in a markup tree.\nstruct StrongDeleter: MarkupRewriter {\n    mutating func visitStrong(_ strong: Strong) -> Markup? {\n        return nil\n    }\n}\n\nlet source = \"Now you see me, **now you don't**\"\nlet document = Document(parsing: source)\nvar strongDeleter = StrongDeleter()\nlet newDocument = strongDeleter.visit(document)\n\nprint(newDocument!.debugDescription())\n// Document\n// └─ Paragraph\n//    └─ Text \"Now you see me, \"\n```\n\n<!-- Copyright (c) 2021-2022 Apple Inc and the Swift Project authors. All Rights Reserved. -->\n"},{"name":"Infrastructure","source":"# Infrastructure\n\n## Topics\n\n### Replacement\n\n- ``Replacement``\n\n### Source\n\n- ``SourceLocation``\n- ``SourceRange``\n\n<!-- Copyright (c) 2021-2022 Apple Inc and the Swift Project authors. All Rights Reserved. -->\n"},{"name":"InlineMarkup","source":"# Markup Inline Nodes\n\n## Topics\n\n### Inline Container\n- ``Emphasis``\n- ``Image``\n- ``Link``\n- ``Strikethrough``\n- ``Strong``\n\n### Inline Leaves\n- ``CustomInline``\n- ``InlineCode``\n- ``InlineHTML``\n- ``LineBreak``\n- ``SoftBreak``\n- ``SymbolLink``\n- ``Text``\n\n<!-- Copyright (c) 2021-2022 Apple Inc and the Swift Project authors. All Rights Reserved. -->\n"},{"name":"BlockMarkup","source":"# Markup Block Nodes\n\n## Topics\n\n### Block Container Blocks\n- ``BlockDirective``\n- ``BlockQuote``\n- ``CustomBlock``\n- ``ListItem``\n- ``OrderedList``\n- ``UnorderedList``\n\n### Inline Container Blocks\n- ``Paragraph``\n\n### Leaf Blocks\n- ``Heading``\n- ``HTMLBlock``\n- ``ThematicBreak``\n- ``CodeBlock``\n\n### Tables\n\n- ``Table``\n- ``TableCellContainer``\n\n## See Also\n- <doc:BlockDirectives> \n\n<!-- Copyright (c) 2021-2022 Apple Inc and the Swift Project authors. All Rights Reserved. -->\n"},{"name":"BlockDirectives","source":"# Block Directives\n\nBlock directives are a syntax extension that create attributed containers to hold other block elements, such as paragraphs and lists, or even other block directives. Here is what one looks like:\n\n```markdown\n@Directive(x: 1, y: 2\n           z: 3) {\n    - A\n    - B\n    - C\n}\n```\n\nThis creates a syntax tree that looks like this:\n\n```\nDocument\n└─ BlockDirective name: \"Directive\"\n   ├─ Argument text segments:\n   |    \"x: 1, y: 2\"\n   |    \"           z: 3\"\n   └─ UnorderedList\n      ├─ ListItem\n      │  └─ Paragraph\n      │     └─ Text \"A\"\n      ├─ ListItem\n      │  └─ Paragraph\n      │     └─ Text \"B\"\n      └─ ListItem\n         └─ Paragraph\n            └─ Text \"C\"\n```\n\nThere are three main pieces to a block directive: the name, the argument text, and its content.\n\n## Names\n\nBlock directives are opened with an at-symbol `@` immediately followed by a non-empty name. Most characters are allowed except whitespace and punctuation used for other parts of block directive syntax unless they are escaped, such as parentheses `()`, curly brackets `{}`, commas `,`, and colons `:`.\n\n```\nBlockDirectiveOpening -> @ BlockDirectiveName\nBlockDirectiveName -> [^(){}:, \\t]\n```\n\n## Argument Text\n\nBlock directives can have one or more *argument text segments* inside parentheses.\n\n```\nArgumentText -> ( ArgumentTextSegment ArgumentTextRest? )\n              | ε\nArgumentTextRest -> \\n ArgumentText\nArgumentTextSegment* -> [^)]\n\n* Escaping allowed with a backslash \\ character.\n```\n\nIf you don't need any argument text, you can simply omit the parentheses.\n\n```\n@Directive {\n    - A\n    - B\n    - C\n}\n```\n\nYou can parse argument text segments however you like. Swift Markdown also includes a default name-value argument parser that can cover lots of use cases. These are comma-separated pairs of name and value *literals*. For example:\n\n```markdown\n@Directive(x: 1, y: \"2\")\n```\n\nWhen using the name-value argument parser, this results in arguments `x` with value `1` and `y` with value `2`. Names and values are both strings; it's up to you to decide how to convert them into something more specific.\n\nWhen using the name-value argument parser, the first argument can be unnamed for when the directive name also describes the purpose of the first argument. This parsed name-value pair will have an empty name. All other arguments have both names and values. \n\nHere is the grammar of name-value argument syntax:\n\n```\nArguments -> FirstArgument ArgumentsRest?\nArgumentsRest -> , NamedArguments\nNamedArguments -> Argument ArgumentsRest?\nFirstArgument -> UnnamedArgument\n               | Argument\nArgument -> Literal : Literal\nUnnamedArgument -> Literal\nLiteral -> QuotedLiteral\n         | UnquotedLiteral\nQuotedLiteral -> \" QuotedLiteralContent \"\nQuotedLiteralContent* -> [^:{}(),\"]\nUnquotedLiteral* -> [^ \\t:{}(),\"]\n\n* Escaping allowed with a backslash \\ character.\n```\n\n> Note: Because of the way Markdown is usually parsed, name-value arguments cannot span multiple lines.\n\n## Content\n\nWrap content with curly brackets `{}`.\n\n```markdown\n@Outer {\n  @Inner {\n    - A\n    - B\n    - C\n  }\n}\n```\n\nIf a block directive doesn't have any content, you can omit the curly brackets:\n\n```\n@TOC\n\n# Title\n\n...\n```\n\n## Nesting and Indentation\n\nSince it's very common for block directives to nest, you can indent the lines that make up the name, arguments, and contents any amount.\n\n```markdown\n@Outer {\n        @Inner {\n          - A\n            - B\n        }\n}\n```\n\nFor the contents, indentation is established by the first non-blank line, assuming that indentation for the rest of a directive's contents. Runs of lines that don't make up the definition of a block directive are handed off to the cmark parser. For `@Inner`'s contents above, the cmark parser will see:\n\n```markdown\n- A\n  - B\n```\n\nSwift Markdown adjusts the source locations reported by cmark after parsing.\n\n## Enabling Block Directive Syntax\n\nPass the `.parseBlockDirectives` option when parsing a document to enable block directive syntax:\n\n```swift\nlet document = Document(parsing: source, options: .parseBlockDirectives)\n```\n\n## Collecting Diagnostics\n\nWhen parsing block directive syntax, you can optionally provide an array of errors \nto collect parsing problems and report them to a user. See ``DirectiveArgumentText/ParseError``.\n\n<!-- Copyright (c) 2021-2022 Apple Inc and the Swift Project authors. All Rights Reserved. -->\n"},{"name":"FormatterAndOptions","source":"# Formatter and Options\n\n## Topics\n\n### Formatter\n\n- ``MarkupFormatter``\n\n### Options\n\n- ``MarkupDumpOptions``\n\n<!-- Copyright (c) 2021-2022 Apple Inc and the Swift Project authors. All Rights Reserved. -->\n"},{"name":"VisitMarkup","source":"# Visiting Markup\n\n## Topics\n\n### Vistor\n\n- ``MarkupVisitor``\n\n### Walker\n\n``MarkupWalker`` is a default implementation for ``MarkupVisitor``.\n\n- ``MarkupWalker``\n\n### Rewriter\n\n- ``MarkupRewriter``\n\n<!-- Copyright (c) 2021-2022 Apple Inc and the Swift Project authors. All Rights Reserved. -->\n"}],"partitions":[{"namespace":"Markdown","communities":[{"community":"protocol","startIndex":0,"endIndex":15},{"community":"associatedtype","startIndex":15,"endIndex":16},{"community":"enum","startIndex":16,"endIndex":27},{"community":"struct","startIndex":27,"endIndex":74},{"community":"enum.case","startIndex":74,"endIndex":122},{"community":"init","startIndex":122,"endIndex":191},{"community":"subscript","startIndex":191,"endIndex":192},{"community":"type.property","startIndex":192,"endIndex":198},{"community":"property","startIndex":198,"endIndex":275},{"community":"method","startIndex":275,"endIndex":449},{"community":"type.op","startIndex":449,"endIndex":451},{"community":"typealias","startIndex":451,"endIndex":454}]},{"namespace":"Swift","communities":[{"community":"init","startIndex":454,"endIndex":455},{"community":"property","startIndex":455,"endIndex":457},{"community":"method","startIndex":457,"endIndex":458}]}],"identifiers":["s8Markdown11BlockMarkupP","s8Markdown12InlineMarkupP","s8Markdown12MarkupWalkerP","s8Markdown13LiteralMarkupP","s8Markdown13MarkupVisitorP","s8Markdown14BlockContainerP","s8Markdown14MarkupRewriterP","s8Markdown15InlineContainerP","s8Markdown17ListItemContainerP","s8Markdown18TableCellContainerP","s8Markdown19BasicBlockContainerP","s8Markdown20BasicInlineContainerP","s8Markdown21RecurringInlineMarkupP","s8Markdown26PlainTextConvertibleMarkupP","s8Markdown6MarkupP","s8Markdown13MarkupVisitorP6ResultQa","s8Markdown15MarkupFormatterV7OptionsV12UseCodeFenceO","s8Markdown15MarkupFormatterV7OptionsV14EmphasisMarkerO","s8Markdown15MarkupFormatterV7OptionsV18PreferredLineLimitV16SplittingElementO","s8Markdown15MarkupFormatterV7OptionsV19OrderedListNumeralsO","s8Markdown15MarkupFormatterV7OptionsV19UnorderedListMarkerO","s8Markdown15MarkupFormatterV7OptionsV21PreferredHeadingStyleO","s8Markdown15MarkupFormatterV7OptionsV22ThematicBreakCharacterO","s8Markdown21DirectiveArgumentTextV10ParseErrorO","s8Markdown5AsideV4KindO","s8Markdown5TableV15ColumnAlignmentO","s8Markdown8CheckboxO","s8Markdown10BlockQuoteV","s8Markdown10InlineCodeV","s8Markdown10InlineHTMLV","s8Markdown10SymbolLinkV","s8Markdown11CustomBlockV","s8Markdown11OrderedListV","s8Markdown11ReplacementV","s8Markdown12CustomInlineV","s8Markdown12ParseOptionsV","s8Markdown13StrikethroughV","s8Markdown13ThematicBreakV","s8Markdown13UnorderedListV","s8Markdown14BlockDirectiveV","s8Markdown14MarkupChildrenV","s8Markdown14MarkupChildrenV8IteratorV","s8Markdown14SourceLocationV","s8Markdown15MarkupFormatterV","s8Markdown15MarkupFormatterV7OptionsV","s8Markdown15MarkupFormatterV7OptionsV18PreferredLineLimitV","s8Markdown15RawMarkupHeaderV","s8Markdown17DirectiveArgumentV","s8Markdown17MarkupDumpOptionsV","s8Markdown19TypedChildIndexPathV","s8Markdown19TypedChildIndexPathV7ElementV","s8Markdown21DirectiveArgumentTextV","s8Markdown21DirectiveArgumentTextV11LineSegmentV","s8Markdown22ReversedMarkupChildrenV","s8Markdown22ReversedMarkupChildrenV8IteratorV","s8Markdown4LinkV","s8Markdown4TextV","s8Markdown5AsideV","s8Markdown5ImageV","s8Markdown5TableV","s8Markdown5TableV3RowV","s8Markdown5TableV4BodyV","s8Markdown5TableV4CellV","s8Markdown5TableV4HeadV","s8Markdown6StrongV","s8Markdown7HeadingV","s8Markdown8DocumentV","s8Markdown8EmphasisV","s8Markdown8ListItemV","s8Markdown9CodeBlockV","s8Markdown9HTMLBlockV","s8Markdown9LineBreakV","s8Markdown9ParagraphV","s8Markdown9SoftBreakV","s8Markdown15MarkupFormatterV7OptionsV12UseCodeFenceO25onlyWhenLanguageIsPresentyA2GmF","s8Markdown15MarkupFormatterV7OptionsV12UseCodeFenceO5neveryA2GmF","s8Markdown15MarkupFormatterV7OptionsV12UseCodeFenceO6alwaysyA2GmF","s8Markdown15MarkupFormatterV7OptionsV14EmphasisMarkerO4staryA2GmF","s8Markdown15MarkupFormatterV7OptionsV14EmphasisMarkerO9underlineyA2GmF","s8Markdown15MarkupFormatterV7OptionsV18PreferredLineLimitV16SplittingElementO9hardBreakyA2ImF","s8Markdown15MarkupFormatterV7OptionsV18PreferredLineLimitV16SplittingElementO9softBreakyA2ImF","s8Markdown15MarkupFormatterV7OptionsV19OrderedListNumeralsO12incrementingyAGSu_tcAGmF","s8Markdown15MarkupFormatterV7OptionsV19OrderedListNumeralsO7allSameyAGSucAGmF","s8Markdown15MarkupFormatterV7OptionsV19UnorderedListMarkerO4dashyA2GmF","s8Markdown15MarkupFormatterV7OptionsV19UnorderedListMarkerO4plusyA2GmF","s8Markdown15MarkupFormatterV7OptionsV19UnorderedListMarkerO4staryA2GmF","s8Markdown15MarkupFormatterV7OptionsV21PreferredHeadingStyleO3atxyA2GmF","s8Markdown15MarkupFormatterV7OptionsV21PreferredHeadingStyleO6setextyA2GmF","s8Markdown15MarkupFormatterV7OptionsV22ThematicBreakCharacterO4dashyA2GmF","s8Markdown15MarkupFormatterV7OptionsV22ThematicBreakCharacterO4staryA2GmF","s8Markdown15MarkupFormatterV7OptionsV22ThematicBreakCharacterO9underlineyA2GmF","s8Markdown21DirectiveArgumentTextV10ParseErrorO09duplicateC0yAESS_AA14SourceLocationVAHtcAEmF","s8Markdown21DirectiveArgumentTextV10ParseErrorO19unexpectedCharacteryAESJ_AA14SourceLocationVtcAEmF","s8Markdown21DirectiveArgumentTextV10ParseErrorO24missingExpectedCharacteryAESJ_AA14SourceLocationVtcAEmF","s8Markdown5AsideV4KindO10complexityyA2EmF","s8Markdown5AsideV4KindO10experimentyA2EmF","s8Markdown5AsideV4KindO12preconditionyA2EmF","s8Markdown5AsideV4KindO13postconditionyA2EmF","s8Markdown5AsideV4KindO15mutatingVariantyA2EmF","s8Markdown5AsideV4KindO18nonMutatingVariantyA2EmF","s8Markdown5AsideV4KindO3bugyA2EmF","s8Markdown5AsideV4KindO3tipyA2EmF","s8Markdown5AsideV4KindO4dateyA2EmF","s8Markdown5AsideV4KindO4noteyA2EmF","s8Markdown5AsideV4KindO4todoyA2EmF","s8Markdown5AsideV4KindO5sinceyA2EmF","s8Markdown5AsideV4KindO6authoryA2EmF","s8Markdown5AsideV4KindO6remarkyA2EmF","s8Markdown5AsideV4KindO6throwsyA2EmF","s8Markdown5AsideV4KindO7authorsyA2EmF","s8Markdown5AsideV4KindO7versionyA2EmF","s8Markdown5AsideV4KindO7warningyA2EmF","s8Markdown5AsideV4KindO8requiresyA2EmF","s8Markdown5AsideV4KindO9attentionyA2EmF","s8Markdown5AsideV4KindO9copyrightyA2EmF","s8Markdown5AsideV4KindO9importantyA2EmF","s8Markdown5AsideV4KindO9invariantyA2EmF","s8Markdown5TableV15ColumnAlignmentO4leftyA2EmF","s8Markdown5TableV15ColumnAlignmentO5rightyA2EmF","s8Markdown5TableV15ColumnAlignmentO6centeryA2EmF","s8Markdown8CheckboxO7checkedyA2CmF","s8Markdown8CheckboxO9uncheckedyA2CmF","s8Markdown10BlockQuoteVyACxcSTRzAA0B6Markup_p7ElementRtzlufc","s8Markdown10InlineCodeVyACSScfc","s8Markdown10InlineHTMLVyACSScfc","s8Markdown10SymbolLinkV11destinationACSSSg_tcfc","s8Markdown11CustomBlockVyACxcSTRzAA0C6Markup_p7ElementRtzlufc","s8Markdown11OrderedListVyACxcSTRzAA0C4ItemV7ElementRtzlufc","s8Markdown11ReplacementV5range15replacementTextACSnyAA14SourceLocationVG_SStcfc","s8Markdown12CustomInlineVyACSScfc","s8Markdown12ParseOptionsV8rawValueACSu_tcfc","s8Markdown13LiteralMarkupPyxSScfc","s8Markdown13StrikethroughVyACxcSTRzAA12InlineMarkup_p7ElementRtzlufc","s8Markdown13ThematicBreakVACycfc","s8Markdown13UnorderedListVyACxcSTRzAA0C4ItemV7ElementRtzlufc","s8Markdown14BlockDirectiveV4name12argumentText8childrenACSS_SSSgAA0B6Markup_pdtcfc","s8Markdown14BlockDirectiveV4name12argumentText8childrenACSS_SSSgxtcSTRzAA0B6Markup_p7ElementRtzlufc","s8Markdown14SourceLocationV4line6column6sourceACSi_Si10Foundation3URLVSgtcfc","s8Markdown15MarkupFormatterV17formattingOptionsA2C0E0V_tcfc","s8Markdown15MarkupFormatterV7OptionsV12UseCodeFenceO8rawValueAGSgSS_tcfc","s8Markdown15MarkupFormatterV7OptionsV14EmphasisMarkerO8rawValueAGSgSS_tcfc","s8Markdown15MarkupFormatterV7OptionsV18PreferredLineLimitV16SplittingElementO8rawValueAISgSS_tcfc","s8Markdown15MarkupFormatterV7OptionsV18PreferredLineLimitV9maxLength9breakWithAGSi_AG16SplittingElementOtcfc","s8Markdown15MarkupFormatterV7OptionsV19UnorderedListMarkerO8rawValueAGSgSS_tcfc","s8Markdown15MarkupFormatterV7OptionsV19unorderedListMarker07orderedF8Numerals12useCodeFence07defaultK13BlockLanguage22thematicBreakCharacter0pQ6Length08emphasisG017condenseAutolinks21preferredHeadingStyle0W9LineLimit06customZ6PrefixA2E09UnorderedfG0O_AE07OrderedfI0OAE03UsekL0OSSSgAE08ThematicqR0OSuAE08EmphasisG0OSbAE09PreferredxY0OAE09PreferredZ5LimitVSgSStcfc","s8Markdown15MarkupFormatterV7OptionsV21PreferredHeadingStyleO8rawValueAGSgSS_tcfc","s8Markdown15MarkupFormatterV7OptionsV22ThematicBreakCharacterO8rawValueAGSgSS_tcfc","s8Markdown17ListItemContainerPAAEyxAA0bC0Vcfc","s8Markdown17ListItemContainerPAAEyxAA0bC0Vd_tcfc","s8Markdown17ListItemContainerPyxqd__cSTRd__AA0bC0V7ElementRtd__lufc","s8Markdown17MarkupDumpOptionsV8rawValueACSu_tcfc","s8Markdown18TableCellContainerPAAE12arrayLiteralxAA0B0V0C0Vd_tcfc","s8Markdown18TableCellContainerPAAEyxAA0B0V0C0Vcfc","s8Markdown18TableCellContainerPAAEyxAA0B0V0C0Vd_tcfc","s8Markdown18TableCellContainerPyxqd__cSTRd__AA0B0V0C0V7ElementRtd__lufc","s8Markdown19BasicBlockContainerPAAEyxAA0C6Markup_pd_tcfc","s8Markdown19BasicBlockContainerPyxqd__cSTRd__AA0C6Markup_p7ElementRtd__lufc","s8Markdown19TypedChildIndexPathV12arrayLiteralACSi_AA6Markup_pXpSgtd_tcfc","s8Markdown19TypedChildIndexPathVACycfc","s8Markdown19TypedChildIndexPathVyACxcSTRzAC7ElementVADRtzlufc","s8Markdown20BasicInlineContainerPAAEyxAA0C6Markup_pd_tcfc","s8Markdown20BasicInlineContainerPyxqd__cSTRd__AA0C6Markup_p7ElementRtd__lufc","s8Markdown21DirectiveArgumentTextV8segmentsACx_tcSTRzAC11LineSegmentV7ElementRtzlufc","s8Markdown21DirectiveArgumentTextVyACxcSyRzlufc","s8Markdown4LinkV11destination_ACSSSg_xtcSTRzAA21RecurringInlineMarkup_p7ElementRtzlufc","s8Markdown4LinkV11destination_ACSS_AA21RecurringInlineMarkup_pdtcfc","s8Markdown4TextVyACSScfc","s8Markdown5AsideV4KindO8rawValueAESgSS_tcfc","s8Markdown5AsideVyAcA10BlockQuoteVcfc","s8Markdown5ImageV6source5title_ACSSSg_AFxtcSTRzAA21RecurringInlineMarkup_p7ElementRtzlufc","s8Markdown5ImageV6source5title_ACSSSg_AfA21RecurringInlineMarkup_pdtcfc","s8Markdown5TableV16columnAlignments6header4bodyACSayAC15ColumnAlignmentOSgGSg_AC4HeadVAC4BodyVtcfc","s8Markdown5TableV3RowVyAExcSTRzAC4CellV7ElementRtzlufc","s8Markdown5TableV4BodyVyAExcSTRzAC3RowV7ElementRtzlufc","s8Markdown5TableV4BodyVyAeC3RowVd_tcfc","s8Markdown5TableV4CellVyAExcSTRzAA12InlineMarkup_p7ElementRtzlufc","s8Markdown5TableV4HeadVyAExcSTRzAC4CellV7ElementRtzlufc","s8Markdown6StrongVyACxcSTRzAA12InlineMarkup_p7ElementRtzlufc","s8Markdown7HeadingV5level_ACSi_AA12InlineMarkup_pdtcfc","s8Markdown7HeadingV5level_ACSi_xtcSTRzAA12InlineMarkup_p7ElementRtzlufc","s8Markdown8DocumentV7parsing6source7optionsACSS_10Foundation3URLVSgAA12ParseOptionsVtcfc","s8Markdown8DocumentV7parsing7optionsAC10Foundation3URLV_AA12ParseOptionsVtKcfc","s8Markdown8DocumentVyACxcSTRzAA11BlockMarkup_p7ElementRtzlufc","s8Markdown8EmphasisVyACxcSTRzAA12InlineMarkup_p7ElementRtzlufc","s8Markdown8ListItemV8checkbox_AcA8CheckboxOSg_AA11BlockMarkup_pdtcfc","s8Markdown8ListItemV8checkbox_AcA8CheckboxOSg_xtcSTRzAA11BlockMarkup_p7ElementRtzlufc","s8Markdown9CodeBlockV8language_ACSSSg_SStcfc","s8Markdown9HTMLBlockVyACSScfc","s8Markdown9LineBreakVACycfc","s8Markdown9ParagraphVyACxcSTRzAA12InlineMarkup_p7ElementRtzlufc","s8Markdown9SoftBreakVACycfc","s8Markdown19TypedChildIndexPathVyAC7ElementVSicip","s8Markdown12ParseOptionsV16parseSymbolLinksACvpZ","s8Markdown12ParseOptionsV20parseBlockDirectivesACvpZ","s8Markdown15MarkupFormatterV7OptionsV7defaultAEvpZ","s8Markdown17MarkupDumpOptionsV15printEverythingACvpZ","s8Markdown17MarkupDumpOptionsV20printSourceLocationsACvpZ","s8Markdown17MarkupDumpOptionsV22printUniqueIdentifiersACvpZ","s8Markdown10InlineCodeV4codeSSvp","s8Markdown10InlineCodeV9plainTextSSvp","s8Markdown10InlineHTMLV03rawC0SSvp","s8Markdown10InlineHTMLV9plainTextSSvp","s8Markdown10SymbolLinkV11destinationSSSgvp","s8Markdown10SymbolLinkV9plainTextSSvp","s8Markdown11ReplacementV11descriptionSSvp","s8Markdown11ReplacementV15replacementTextSSvp","s8Markdown11ReplacementV16debugDescriptionSSvp","s8Markdown11ReplacementV5rangeSnyAA14SourceLocationVGvp","s8Markdown12CustomInlineV4textSSvp","s8Markdown12CustomInlineV9plainTextSSvp","s8Markdown12ParseOptionsV8rawValueSuvp","s8Markdown13StrikethroughV9plainTextSSvp","s8Markdown14BlockContainerPAAE13blockChildrens15LazyMapSequenceVyAA06MarkupE0VAA0bI0_pGvp","s8Markdown14BlockDirectiveV12argumentTextAA0c8ArgumentE0Vvp","s8Markdown14BlockDirectiveV12nameLocationAA06SourceE0VSgvp","s8Markdown14BlockDirectiveV4nameSSvp","s8Markdown14BlockDirectiveV9nameRangeSnyAA14SourceLocationVGSgvp","s8Markdown14SourceLocationV11descriptionSSvp","s8Markdown14SourceLocationV4lineSivp","s8Markdown14SourceLocationV6columnSivp","s8Markdown14SourceLocationV6source10Foundation3URLVSgvp","s8Markdown15InlineContainerPAAE14inlineChildrens15LazyMapSequenceVyAA06MarkupE0VAA0bI0_pGvp","s8Markdown15InlineContainerPAAE9plainTextSSvp","s8Markdown15MarkupFormatterV17formattingOptionsAC0E0Vvp","s8Markdown15MarkupFormatterV6resultSSvp","s8Markdown15MarkupFormatterV7OptionsV18PreferredLineLimitV20lineSplittingElementAG0iJ0Ovp","s8Markdown15MarkupFormatterV7OptionsV18PreferredLineLimitV9maxLengthSivp","s8Markdown17DirectiveArgumentV10valueRangeSnyAA14SourceLocationVGSgvp","s8Markdown17DirectiveArgumentV16hasTrailingCommaSbvp","s8Markdown17DirectiveArgumentV4nameSSvp","s8Markdown17DirectiveArgumentV5valueSSvp","s8Markdown17DirectiveArgumentV9nameRangeSnyAA14SourceLocationVGSgvp","s8Markdown17ListItemContainerPAAE9listItemss15LazyMapSequenceVyAA14MarkupChildrenVAA0bC0VGvp","s8Markdown17MarkupDumpOptionsV8rawValueSuvp","s8Markdown18TableCellContainerPAAE5cellss15LazyMapSequenceVyAA14MarkupChildrenVAA0B0V0C0VGvp","s8Markdown19TypedChildIndexPathV03endD0Sivp","s8Markdown19TypedChildIndexPathV05startD0Sivp","s8Markdown21DirectiveArgumentTextV11LineSegmentV07trimmedD0Ssvp","s8Markdown21DirectiveArgumentTextV11LineSegmentV09untrimmedD0SSvp","s8Markdown21DirectiveArgumentTextV11LineSegmentV10parseIndexSS0H0Vvp","s8Markdown21DirectiveArgumentTextV11LineSegmentV14lineStartIndexSS0I0Vvp","s8Markdown21DirectiveArgumentTextV11LineSegmentV5rangeSnyAA14SourceLocationVGSgvp","s8Markdown21DirectiveArgumentTextV7isEmptySbvp","s8Markdown21DirectiveArgumentTextV8segmentsSayAC11LineSegmentVGvp","s8Markdown26PlainTextConvertibleMarkupP05plainC0SSvp","s8Markdown4LinkV11destinationSSSgvp","s8Markdown4TextV05plainB0SSvp","s8Markdown4TextV6stringSSvp","s8Markdown5AsideV4kindAC4KindOvp","s8Markdown5AsideV7contentSayAA11BlockMarkup_pGvp","s8Markdown5ImageV5titleSSSgvp","s8Markdown5ImageV6sourceSSSgvp","s8Markdown5TableV14maxColumnCountSivp","s8Markdown5TableV16columnAlignmentsSayAC15ColumnAlignmentOSgGvp","s8Markdown5TableV4BodyV4rowss15LazyMapSequenceVyAA14MarkupChildrenVAC3RowVGvp","s8Markdown5TableV4bodyAC4BodyVvp","s8Markdown5TableV4headAC4HeadVvp","s8Markdown5TableV7isEmptySbvp","s8Markdown6MarkupPAAE10childCountSivp","s8Markdown6MarkupPAAE13indexInParentSivp","s8Markdown6MarkupPAAE18detachedFromParentAaB_pvp","s8Markdown6MarkupPAAE4rootAaB_pvp","s8Markdown6MarkupPAAE5rangeSnyAA14SourceLocationVGSgvp","s8Markdown6MarkupPAAE6parentAaB_pSgvp","s8Markdown6MarkupPAAE7isEmptySbvp","s8Markdown6MarkupPAAE8childrenAA0B8ChildrenVvp","s8Markdown6StrongV9plainTextSSvp","s8Markdown7HeadingV5levelSivp","s8Markdown8EmphasisV9plainTextSSvp","s8Markdown8ListItemV8checkboxAA8CheckboxOSgvp","s8Markdown9CodeBlockV4codeSSvp","s8Markdown9CodeBlockV8languageSSSgvp","s8Markdown9HTMLBlockV7rawHTMLSSvp","s8Markdown9LineBreakV9plainTextSSvp","s8Markdown9SoftBreakV9plainTextSSvp","s8Markdown10BlockQuoteV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown10InlineCodeV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown10InlineHTMLV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown10SymbolLinkV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown11CustomBlockV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown11OrderedListV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown12CustomInlineV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown12MarkupWalkerPAAE11descendIntoyyAA0B0_pF","s8Markdown12MarkupWalkerPAAE12defaultVisityyAA0B0_pF","s8Markdown13MarkupVisitorP10visitImagey6ResultQzAA0E0VF","s8Markdown13MarkupVisitorP10visitTabley6ResultQzAA0E0VF","s8Markdown13MarkupVisitorP11visitStrongy6ResultQzAA0E0VF","s8Markdown13MarkupVisitorP12defaultVisity6ResultQzAA0B0_pF","s8Markdown13MarkupVisitorP12visitHeadingy6ResultQzAA0E0VF","s8Markdown13MarkupVisitorP13visitDocumenty6ResultQzAA0E0VF","s8Markdown13MarkupVisitorP13visitEmphasisy6ResultQzAA0E0VF","s8Markdown13MarkupVisitorP13visitListItemy6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP13visitTableRowy6ResultQzAA0E0V0F0VF","s8Markdown13MarkupVisitorP14visitCodeBlocky6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP14visitHTMLBlocky6ResultQzAA0E0VF","s8Markdown13MarkupVisitorP14visitLineBreaky6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP14visitParagraphy6ResultQzAA0E0VF","s8Markdown13MarkupVisitorP14visitSoftBreaky6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP14visitTableBodyy6ResultQzAA0E0V0F0VF","s8Markdown13MarkupVisitorP14visitTableCelly6ResultQzAA0E0V0F0VF","s8Markdown13MarkupVisitorP14visitTableHeady6ResultQzAA0E0V0F0VF","s8Markdown13MarkupVisitorP15visitBlockQuotey6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP15visitInlineCodey6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP15visitInlineHTMLy6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP15visitSymbolLinky6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP16visitCustomBlocky6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP16visitOrderedListy6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP17visitCustomInliney6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP18visitStrikethroughy6ResultQzAA0E0VF","s8Markdown13MarkupVisitorP18visitThematicBreaky6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP18visitUnorderedListy6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP19visitBlockDirectivey6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorP5visity6ResultQzAA0B0_pF","s8Markdown13MarkupVisitorP9visitLinky6ResultQzAA0E0VF","s8Markdown13MarkupVisitorP9visitTexty6ResultQzAA0E0VF","s8Markdown13MarkupVisitorPAAE10visitImagey6ResultQzAA0E0VF","s8Markdown13MarkupVisitorPAAE10visitTabley6ResultQzAA0E0VF","s8Markdown13MarkupVisitorPAAE11visitStrongy6ResultQzAA0E0VF","s8Markdown13MarkupVisitorPAAE12visitHeadingy6ResultQzAA0E0VF","s8Markdown13MarkupVisitorPAAE13visitDocumenty6ResultQzAA0E0VF","s8Markdown13MarkupVisitorPAAE13visitEmphasisy6ResultQzAA0E0VF","s8Markdown13MarkupVisitorPAAE13visitListItemy6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE13visitTableRowy6ResultQzAA0E0V0F0VF","s8Markdown13MarkupVisitorPAAE14visitCodeBlocky6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE14visitHTMLBlocky6ResultQzAA0E0VF","s8Markdown13MarkupVisitorPAAE14visitLineBreaky6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE14visitParagraphy6ResultQzAA0E0VF","s8Markdown13MarkupVisitorPAAE14visitSoftBreaky6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE14visitTableBodyy6ResultQzAA0E0V0F0VF","s8Markdown13MarkupVisitorPAAE14visitTableCelly6ResultQzAA0E0V0F0VF","s8Markdown13MarkupVisitorPAAE14visitTableHeady6ResultQzAA0E0V0F0VF","s8Markdown13MarkupVisitorPAAE15visitBlockQuotey6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE15visitInlineCodey6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE15visitInlineHTMLy6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE15visitSymbolLinky6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE16visitCustomBlocky6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE16visitOrderedListy6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE17visitCustomInliney6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE18visitStrikethroughy6ResultQzAA0E0VF","s8Markdown13MarkupVisitorPAAE18visitThematicBreaky6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE18visitUnorderedListy6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE19visitBlockDirectivey6ResultQzAA0eF0VF","s8Markdown13MarkupVisitorPAAE5visity6ResultQzAA0B0_pF","s8Markdown13MarkupVisitorPAAE9visitLinky6ResultQzAA0E0VF","s8Markdown13MarkupVisitorPAAE9visitTexty6ResultQzAA0E0VF","s8Markdown13StrikethroughV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown13ThematicBreakV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown13UnorderedListV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown14BlockContainerPAAE03setB8Childrenyyqd__STRd__AA0B6Markup_p7ElementRtd__lF","s8Markdown14BlockContainerPAAE22replaceChildrenInRange_4withySnySiG_qd__tSTRd__AA0B6Markup_p7ElementRtd__lF","s8Markdown14BlockDirectiveV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown14MarkupChildrenV12makeIteratorAC0E0VyF","s8Markdown14MarkupChildrenV8IteratorV4nextAA0B0_pSgyF","s8Markdown14MarkupChildrenV8reversedAA08ReversedbC0VyF","s8Markdown14MarkupRewriterPAAE10visitImageyAA0B0_pSgAA0E0VF","s8Markdown14MarkupRewriterPAAE11visitStrongyAA0B0_pSgAA0E0VF","s8Markdown14MarkupRewriterPAAE12defaultVisityAA0B0_pSgAaE_pF","s8Markdown14MarkupRewriterPAAE12visitHeadingyAA0B0_pSgAA0E0VF","s8Markdown14MarkupRewriterPAAE13visitDocumentyAA0B0_pSgAA0E0VF","s8Markdown14MarkupRewriterPAAE13visitEmphasisyAA0B0_pSgAA0E0VF","s8Markdown14MarkupRewriterPAAE13visitListItemyAA0B0_pSgAA0eF0VF","s8Markdown14MarkupRewriterPAAE14visitCodeBlockyAA0B0_pSgAA0eF0VF","s8Markdown14MarkupRewriterPAAE14visitHTMLBlockyAA0B0_pSgAA0E0VF","s8Markdown14MarkupRewriterPAAE14visitLineBreakyAA0B0_pSgAA0eF0VF","s8Markdown14MarkupRewriterPAAE14visitParagraphyAA0B0_pSgAA0E0VF","s8Markdown14MarkupRewriterPAAE14visitSoftBreakyAA0B0_pSgAA0eF0VF","s8Markdown14MarkupRewriterPAAE15visitBlockQuoteyAA0B0_pSgAA0eF0VF","s8Markdown14MarkupRewriterPAAE15visitInlineCodeyAA0B0_pSgAA0eF0VF","s8Markdown14MarkupRewriterPAAE15visitInlineHTMLyAA0B0_pSgAA0eF0VF","s8Markdown14MarkupRewriterPAAE16visitCustomBlockyAA0B0_pSgAA0eF0VF","s8Markdown14MarkupRewriterPAAE16visitOrderedListyAA0B0_pSgAA0eF0VF","s8Markdown14MarkupRewriterPAAE17visitCustomInlineyAA0B0_pSgAA0eF0VF","s8Markdown14MarkupRewriterPAAE18visitThematicBreakyAA0B0_pSgAA0eF0VF","s8Markdown14MarkupRewriterPAAE18visitUnorderedListyAA0B0_pSgAA0eF0VF","s8Markdown14MarkupRewriterPAAE19visitBlockDirectiveyAA0B0_pSgAA0eF0VF","s8Markdown14MarkupRewriterPAAE9visitLinkyAA0B0_pSgAA0E0VF","s8Markdown14MarkupRewriterPAAE9visitTextyAA0B0_pSgAA0E0VF","s8Markdown15InlineContainerPAAE03setB8Childrenyyqd__STRd__AA0B6Markup_p7ElementRtd__lF","s8Markdown15InlineContainerPAAE22replaceChildrenInRange_4withySnySiG_qd__tSTRd__AA0B6Markup_p7ElementRtd__lF","s8Markdown15MarkupFormatterV10visitImageyyAA0E0VF","s8Markdown15MarkupFormatterV10visitTableyyAA0E0VF","s8Markdown15MarkupFormatterV11visitStrongyyAA0E0VF","s8Markdown15MarkupFormatterV12defaultVisityyAA0B0_pF","s8Markdown15MarkupFormatterV12visitHeadingyyAA0E0VF","s8Markdown15MarkupFormatterV13visitDocumentyyAA0E0VF","s8Markdown15MarkupFormatterV13visitEmphasisyyAA0E0VF","s8Markdown15MarkupFormatterV13visitListItemyyAA0eF0VF","s8Markdown15MarkupFormatterV13visitTableRowyyAA0E0V0F0VF","s8Markdown15MarkupFormatterV14visitCodeBlockyyAA0eF0VF","s8Markdown15MarkupFormatterV14visitHTMLBlockyyAA0E0VF","s8Markdown15MarkupFormatterV14visitLineBreakyyAA0eF0VF","s8Markdown15MarkupFormatterV14visitParagraphyyAA0E0VF","s8Markdown15MarkupFormatterV14visitSoftBreakyyAA0eF0VF","s8Markdown15MarkupFormatterV14visitTableBodyyyAA0E0V0F0VF","s8Markdown15MarkupFormatterV14visitTableCellyyAA0E0V0F0VF","s8Markdown15MarkupFormatterV14visitTableHeadyyAA0E0V0F0VF","s8Markdown15MarkupFormatterV15visitBlockQuoteyyAA0eF0VF","s8Markdown15MarkupFormatterV15visitInlineCodeyyAA0eF0VF","s8Markdown15MarkupFormatterV15visitInlineHTMLyyAA0eF0VF","s8Markdown15MarkupFormatterV15visitSymbolLinkyyAA0eF0VF","s8Markdown15MarkupFormatterV16visitOrderedListyyAA0eF0VF","s8Markdown15MarkupFormatterV18visitStrikethroughyyAA0E0VF","s8Markdown15MarkupFormatterV18visitThematicBreakyyAA0eF0VF","s8Markdown15MarkupFormatterV18visitUnorderedListyyAA0eF0VF","s8Markdown15MarkupFormatterV19visitBlockDirectiveyyAA0eF0VF","s8Markdown15MarkupFormatterV9visitLinkyyAA0E0VF","s8Markdown15MarkupFormatterV9visitTextyyAA0E0VF","s8Markdown17ListItemContainerPAAE03setB5Itemsyyqd__STRd__AA0bC0V7ElementRtd__lF","s8Markdown17ListItemContainerPAAE06appendC0yyAA0bC0VF","s8Markdown17ListItemContainerPAAE19replaceItemsInRange_4withySnySiG_qd__tSTRd__AA0bC0V7ElementRtd__lF","s8Markdown18TableCellContainerPAAE06appendC0yyAA0B0V0C0VF","s8Markdown18TableCellContainerPAAE19replaceCellsInRange_4withySnySiG_qd__tSTRd__AA0B0V0C0V7ElementRtd__lF","s8Markdown18TableCellContainerPAAE8setCellsyyqd__STRd__AA0B0V0C0V7ElementRtd__lF","s8Markdown21DirectiveArgumentTextV11LineSegmentV23parseNameValueArguments0G6ErrorsSayAA0bC0VGSayAC10ParseErrorOGz_tF","s8Markdown21DirectiveArgumentTextV23parseNameValueArguments0E6ErrorsSayAA0bC0VGSayAC10ParseErrorOGz_tF","s8Markdown21DirectiveArgumentTextV23parseNameValueArgumentsSayAA0bC0VGyF","s8Markdown22ReversedMarkupChildrenV12makeIteratorAC0F0VyF","s8Markdown22ReversedMarkupChildrenV8IteratorV4nextAA0C0_pSgyF","s8Markdown4LinkV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown4TextV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown5ImageV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown5TableV3RowV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown5TableV4BodyV18replaceRowsInRange_4withySnySiG_xtSTRzAC3RowV7ElementRtzlF","s8Markdown5TableV4BodyV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown5TableV4BodyV7setRowsyyxSTRzAC3RowV7ElementRtzlF","s8Markdown5TableV4BodyV9appendRowyyAC0E0VF","s8Markdown5TableV4CellV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown5TableV4HeadV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown5TableV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown6MarkupP6accepty6ResultQyd__qd__zAA0B7VisitorRd__lF","s8Markdown6MarkupPAAE11isIdentical2toSbAaB_p_tF","s8Markdown6MarkupPAAE16debugDescription7optionsSSAA0B11DumpOptionsV_tF","s8Markdown6MarkupPAAE16hasSameStructure2asSbAaB_p_tF","s8Markdown6MarkupPAAE21withUncheckedChildrenyAaB_pqd__STRd__AaB_p7ElementRtd__lF","s8Markdown6MarkupPAAE5child2atAaB_pSgSi_tF","s8Markdown6MarkupPAAE5child7throughAaB_pSgAA19TypedChildIndexPathV_tF","s8Markdown6MarkupPAAE5child7throughAaB_pSgSid_tF","s8Markdown6MarkupPAAE5child7throughAaB_pSgqd___tSTRd__Si7ElementRtd__lF","s8Markdown6MarkupPAAE6format7optionsSSAA0B9FormatterV7OptionsV_tF","s8Markdown6StrongV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown7HeadingV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown8DocumentV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown8EmphasisV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown8ListItemV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown9CodeBlockV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown9HTMLBlockV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown9LineBreakV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown9ParagraphV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown9SoftBreakV6accepty6ResultQzxzAA13MarkupVisitorRzlF","s8Markdown14SourceLocationV1loiySbAC_ACtFZ","s8Markdown21DirectiveArgumentTextV11LineSegmentV2eeoiySbAE_AEtFZ","s8Markdown11SourceRangea","s8Markdown14ChildIndexPatha","s8Markdown19TypedChildIndexPathV19ArrayLiteralElementa","sSn8MarkdownAA14SourceLocationVRszrlE5start3endSnyACGAC_ACtcfc","sSn8MarkdownAA14SourceLocationVRszrlE3endACvp","sSn8MarkdownAA14SourceLocationVRszrlE5startACvp","sSn8MarkdownAA14SourceLocationVRszrlE21diagnosticDescription11includePathSSSb_tF","s10Foundation3URLV","sSH","sSJ","sSK","sSK12_RegexParserE10mapOffsetsySny5IndexQzGSi5lower_Si5uppert_tF","sSK12_RegexParserE14flatmapOffsetsySny5IndexQzGSi5lower_Si5uppertSgF","sSK9formIndex6beforey0B0Qzz_tF","sSKsE10difference4from2bys20CollectionDifferenceVy7ElementQzGqd___SbAG_AGtXEtSKRd__AFQyd__AGRSlF","sSKsE4last5where7ElementQzSgSbADKXE_tKF","sSKsE4last7ElementQzSgvp","sSKsE6suffixy11SubSequenceQzSiF","sSKsE8dropLasty11SubSequenceQzSiF","sSKsE8reverseds18ReversedCollectionVyxGyF","sSKsE9formIndex6beforey0B0Qzz_tF","sSKsE9lastIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSL","sSL1loiySbx_xtFZ","sSLsE1goiySbx_xtFZ","sSLsE2geoiySbx_xtFZ","sSLsE2leoiySbx_xtFZ","sSLsE3zzloiySnyxGx_xtFZ","sSLsE3zzlopys16PartialRangeUpToVyxGxFZ","sSLsE3zzzoPys16PartialRangeFromVyxGxFZ","sSLsE3zzzoiySNyxGx_xtFZ","sSLsE3zzzopys19PartialRangeThroughVyxGxFZ","sSQ","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSS","sSS5IndexV","sST","sST12_RegexParserE3allyS2b7ElementQzXEF","sST12_RegexParserE3anyyS2b7ElementQzXEF","sST12_RegexParserE4noneyS2b7ElementQzXEF","sST12makeIterator0B0QzyF","sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sST8IteratorQa","sSTsE10allSatisfyyS2b7ElementQzKXEKF","sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE10enumerateds18EnumeratedSequenceVyxGyF","sSTsE13elementsEqual_2bySbqd___Sb7ElementQz_ACQyd__tKXEtKSTRd__lF","sSTsE19underestimatedCountSivp","sSTsE25lexicographicallyPrecedes_2bySbqd___Sb7ElementQz_ADtKXEtKSTRd__ACQyd__ADRSlF","sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sSTsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSTsE3max2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE3min2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE4drop5whiles17DropWhileSequenceVyxGSb7ElementQzKXE_tKF","sSTsE4lazys12LazySequenceVyxGvp","sSTsE5first5where7ElementQzSgSbADKXE_tKF","sSTsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSays10ArraySliceVy7ElementQzGGSi_S2bAHKXEtKF","sSTsE6filterySay7ElementQzGSbACKXEKF","sSTsE6prefix5whileSay7ElementQzGSbADKXE_tKF","sSTsE6prefixys14PrefixSequenceVyxGSiF","sSTsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF","sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF","sSTsE6sorted2bySay7ElementQzGSbAD_ADtKXE_tKF","sSTsE6starts4with2bySbqd___Sb7ElementQz_ADQyd__tKXEtKSTRd__lF","sSTsE6suffixySay7ElementQzGSiF","sSTsE7flatMapySay7ElementQyd__Gqd__ABQzKXEKSTRd__lF","sSTsE7flatMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE7forEachyyy7ElementQzKXEKF","sSTsE8contains5whereS2b7ElementQzKXE_tKF","sSTsE8dropLastySay7ElementQzGSiF","sSTsE8reversedSay7ElementQzGyF","sSTsE8shuffled5usingSay7ElementQzGqd__z_tSGRd__lF","sSTsE8shuffledSay7ElementQzGyF","sSTsE9dropFirstys04DropB8SequenceVyxGSiF","sSY","sSY8rawValue03RawB0Qzvp","sSY8rawValuexSg03RawB0Qz_tcfc","sSYsSHRzSH8RawValueSYRpzrlE04hashB0Sivp","sSYsSHRzSH8RawValueSYRpzrlE4hash4intoys6HasherVz_tF","sSa7Elementa","sSb","sSi","sSk","sSk7ElementQa","sSksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSl","sSl10startIndex0B0Qzvp","sSl12_RegexParserE15convertByOffset_2in5IndexQyd__ADQz_qd__tSlRd__lF","sSl12_RegexParserE15convertByOffset_2inSny5IndexQyd__GSnyADQzG_qd__tSlRd__lF","sSl12_RegexParserE5index8atOffset5IndexQzSi_tF","sSl12_RegexParserE5split6around11SubSequenceQz6prefix_A2E6suffixtSny5IndexQzG_tF","sSl12_RegexParserE6offset2ofSi5IndexQz_tF","sSl12_RegexParserE6offset7ofIndexSi0E0Qz_tF","sSl12_RegexParserE7offsets2ofSnySiGSny5IndexQzG_tF","sSl17_StringProcessingE14trimmingPrefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSl8endIndex0B0Qzvp","sSlsE10firstIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSlsE13randomElement0B0QzSgyF","sSlsE13randomElement5using0B0QzSgqd__z_tSGRd__lF","sSlsE19underestimatedCountSivp","sSlsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSlsE4drop5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE5countSivp","sSlsE5first7ElementQzSgvp","sSlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF","sSlsE6prefix4upTo11SubSequenceQz5IndexQz_tF","sSlsE6prefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE6prefix7through11SubSequenceQz5IndexQz_tF","sSlsE6prefixy11SubSequenceQzSiF","sSlsE6suffix4from11SubSequenceQz5IndexQz_tF","sSlsE7isEmptySbvp","sSlsE9dropFirsty11SubSequenceQzSiF","sSlsE9formIndex5aftery0B0Qzz_tF","sSlsE9formIndex_8offsetBy07limitedD0Sb0B0Qzz_SiAEtF","sSlsE9formIndex_8offsetByy0B0Qzz_SitF","sSlsEy11SubSequenceQzqd__cSXRd__5BoundQyd__5IndexRtzluip","sSlsEy11SubSequenceQzys15UnboundedRange_OXEcip","sSlss16IndexingIteratorVyxG0B0RtzrlE04makeB0ACyF","sSlss5SliceVyxG11SubSequenceRtzrlEyACSny5IndexQzGcip","sSly7ElementQz5IndexQzcip","sSn","sSs","sSt","sSt4next7ElementQzSgyF","sSu","sSy","ss10SetAlgebraP","ss10SetAlgebraPs7ElementQz012ArrayLiteralC0RtzrlE05arrayE0xAFd_tcfc","ss10SetAlgebraPsE10isDisjoint4withSbx_tF","ss10SetAlgebraPsE10isSuperset2ofSbx_tF","ss10SetAlgebraPsE11subtractingyxxF","ss10SetAlgebraPsE14isStrictSubset2ofSbx_tF","ss10SetAlgebraPsE16isStrictSuperset2ofSbx_tF","ss10SetAlgebraPsE7isEmptySbvp","ss10SetAlgebraPsE8isSubset2ofSbx_tF","ss10SetAlgebraPsE8subtractyyxF","ss10SetAlgebraPsEyxqd__ncSTRd__7ElementQyd__ACRtzlufc","ss12CaseIterableP","ss15LazyMapSequenceV","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss25ExpressibleByArrayLiteralP","ss25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc","ss25ExpressibleByArrayLiteralP0cD7ElementQa","ss28CustomDebugStringConvertibleP","ss28CustomDebugStringConvertibleP16debugDescriptionSSvp","ss9OptionSetP","ss9OptionSetP8rawValuex03RawD0Qz_tcfc","ss9OptionSetPs7ElementQzRszrlE6insertySb8inserted_x17memberAfterInserttxF","ss9OptionSetPs7ElementQzRszrlE6removeyxSgxF","ss9OptionSetPs7ElementQzRszrlE6update4withxSgx_tF","ss9OptionSetPs7ElementQzRszrlE8containsySbxF","ss9OptionSetPsE12intersectionyxxF","ss9OptionSetPsE19symmetricDifferenceyxxF","ss9OptionSetPsE5unionyxxF","ss9OptionSetPss17FixedWidthInteger8RawValueRpzrlE16formIntersectionyyxF","ss9OptionSetPss17FixedWidthInteger8RawValueRpzrlE23formSymmetricDifferenceyyxF","ss9OptionSetPss17FixedWidthInteger8RawValueRpzrlE9formUnionyyxF","ss9OptionSetPss17FixedWidthInteger8RawValueRpzrlExycfc"],"vertices":[{"p":["BlockMarkup"],"f":[["protocol",12],[" ",17],["BlockMarkup",7],[" : ",17],["Markup",18,14]],"s":[["protocol",12],[" ",17],["BlockMarkup",7]],"d":"A block markup element."},{"p":["InlineMarkup"],"f":[["protocol",12],[" ",17],["InlineMarkup",7],[" : ",17],["PlainTextConvertibleMarkup",18,13]],"s":[["protocol",12],[" ",17],["InlineMarkup",7]],"d":"An inline markup element."},{"p":["MarkupWalker"],"f":[["protocol",12],[" ",17],["MarkupWalker",7],[" : ",17],["MarkupVisitor",18,4],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["Result",18],[" == ()",17]],"s":[["protocol",12],[" ",17],["MarkupWalker",7]],"d":"An interface for walking a `Markup` tree without altering it."},{"p":["LiteralMarkup"],"f":[["protocol",12],[" ",17],["LiteralMarkup",7],[" : ",17],["Markup",18,14]],"s":[["protocol",12],[" ",17],["LiteralMarkup",7]],"d":"An element that is represented with just some plain text."},{"p":["MarkupVisitor"],"f":[["protocol",12],[" ",17],["MarkupVisitor",7]],"s":[["protocol",12],[" ",17],["MarkupVisitor",7]],"d":"Visits `Markup` elements and returns a result.\n\n- note: This interface only provides requirements for visiting each kind of element. It does not require each visit method to descend into child elements.\n\nGenerally, ``MarkupWalker`` is best for walking a ``Markup`` tree if the ``Result`` type is `Void` or is built up some other way, or ``MarkupRewriter`` for recursively changing a tree's structure. This type serves as a common interface to both. However, for building up other structured result types you can implement ``MarkupVisitor`` directly."},{"p":["BlockContainer"],"f":[["protocol",12],[" ",17],["BlockContainer",7],[" : ",17],["BlockMarkup",18,0]],"s":[["protocol",12],[" ",17],["BlockContainer",7]],"d":"A block element whose children must conform to `BlockMarkup`"},{"p":["MarkupRewriter"],"f":[["protocol",12],[" ",17],["MarkupRewriter",7],[" : ",17],["MarkupVisitor",18,4],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["Result",18],[" == ",17],["Markup",18,14],["?",17]],"s":[["protocol",12],[" ",17],["MarkupRewriter",7]],"d":"A `MarkupVisitor` with the capability to rewrite elements in the tree."},{"p":["InlineContainer"],"f":[["protocol",12],[" ",17],["InlineContainer",7],[" : ",17],["PlainTextConvertibleMarkup",18,13]],"s":[["protocol",12],[" ",17],["InlineContainer",7]],"d":"An element whose children must conform to `InlineMarkup`"},{"p":["ListItemContainer"],"f":[["protocol",12],[" ",17],["ListItemContainer",7],[" : ",17],["BlockMarkup",18,0]],"s":[["protocol",12],[" ",17],["ListItemContainer",7]],"d":"A markup element that can contain only `ListItem`s as children and require no other information."},{"p":["TableCellContainer"],"f":[["protocol",12],[" ",17],["TableCellContainer",7],[" : ",17],["Markup",18,14],[", ",17],["ExpressibleByArrayLiteral",18,594]],"s":[["protocol",12],[" ",17],["TableCellContainer",7]],"d":"A container of ``Table/Cell`` elements."},{"p":["BasicBlockContainer"],"f":[["protocol",12],[" ",17],["BasicBlockContainer",7],[" : ",17],["BlockContainer",18,5]],"s":[["protocol",12],[" ",17],["BasicBlockContainer",7]],"d":"A block element that can contain only other block elements and doesn't require any other information."},{"p":["BasicInlineContainer"],"f":[["protocol",12],[" ",17],["BasicInlineContainer",7],[" : ",17],["InlineContainer",18,7]],"s":[["protocol",12],[" ",17],["BasicInlineContainer",7]],"d":"A block or inline markup element that can contain only `InlineMarkup` elements and doesn't require any other information."},{"p":["RecurringInlineMarkup"],"f":[["protocol",12],[" ",17],["RecurringInlineMarkup",7],[" : ",17],["InlineMarkup",18,1]],"s":[["protocol",12],[" ",17],["RecurringInlineMarkup",7]],"d":"An inline element that can recur throughout any structure.\n\nThis is mostly used to prevent some kinds of elements from nesting; for\nexample, you cannot put a ``Link`` inside another ``Link`` or an ``Image``\ninside another ``Image``."},{"p":["PlainTextConvertibleMarkup"],"f":[["protocol",12],[" ",17],["PlainTextConvertibleMarkup",7],[" : ",17],["Markup",18,14]],"s":[["protocol",12],[" ",17],["PlainTextConvertibleMarkup",7]],"d":"An element that can be converted to plain text without formatting."},{"p":["Markup"],"f":[["protocol",12],[" ",17],["Markup",7]],"s":[["protocol",12],[" ",17],["Markup",7]],"d":"A markup element.\n\n> Note: All supported markup elements are already implemented in the framework.\nUse this protocol only as a generic constraint."},{"p":["MarkupVisitor","Result"],"f":[["associatedtype",12],[" ",17],["Result",7]],"s":[["associatedtype",12],[" ",17],["Result",7]],"d":"The result type returned when visiting a element.\n"},{"p":["MarkupFormatter","Options","UseCodeFence"],"f":[["enum",12],[" ",17],["UseCodeFence",7]],"s":[["enum",12],[" ",17],["UseCodeFence",7]],"d":"When to use a code fence for code blocks."},{"p":["MarkupFormatter","Options","EmphasisMarker"],"f":[["enum",12],[" ",17],["EmphasisMarker",7]],"s":[["enum",12],[" ",17],["EmphasisMarker",7]],"d":"The character to use for emphasis and strong emphasis markers."},{"p":["MarkupFormatter","Options","PreferredLineLimit","SplittingElement"],"f":[["enum",12],[" ",17],["SplittingElement",7]],"s":[["enum",12],[" ",17],["SplittingElement",7]],"d":"The element to use when splitting lines that are longer than the preferred line length."},{"p":["MarkupFormatter","Options","OrderedListNumerals"],"f":[["enum",12],[" ",17],["OrderedListNumerals",7]],"s":[["enum",12],[" ",17],["OrderedListNumerals",7]],"d":"The start numeral and counting style for ordered lists."},{"p":["MarkupFormatter","Options","UnorderedListMarker"],"f":[["enum",12],[" ",17],["UnorderedListMarker",7]],"s":[["enum",12],[" ",17],["UnorderedListMarker",7]],"d":"The marker character to use for unordered lists.\n"},{"p":["MarkupFormatter","Options","PreferredHeadingStyle"],"f":[["enum",12],[" ",17],["PreferredHeadingStyle",7]],"s":[["enum",12],[" ",17],["PreferredHeadingStyle",7]],"d":"The preferred heading style."},{"p":["MarkupFormatter","Options","ThematicBreakCharacter"],"f":[["enum",12],[" ",17],["ThematicBreakCharacter",7]],"s":[["enum",12],[" ",17],["ThematicBreakCharacter",7]],"d":"The character to use for thematic breaks."},{"p":["DirectiveArgumentText","ParseError"],"f":[["enum",12],[" ",17],["ParseError",7]],"s":[["enum",12],[" ",17],["ParseError",7]],"d":"Errors parsing name-value arguments from argument text segments."},{"p":["Aside","Kind"],"f":[["enum",12],[" ",17],["Kind",7]],"s":[["enum",12],[" ",17],["Kind",7]],"d":"The kind of aside."},{"p":["Table","ColumnAlignment"],"f":[["enum",12],[" ",17],["ColumnAlignment",7]],"s":[["enum",12],[" ",17],["ColumnAlignment",7]],"d":"The alignment of all cells under a table column."},{"p":["Checkbox"],"f":[["enum",12],[" ",17],["Checkbox",7]],"s":[["enum",12],[" ",17],["Checkbox",7]],"d":"A checkbox that can represent an on/off state."},{"p":["BlockQuote"],"f":[["struct",12],[" ",17],["BlockQuote",7]],"s":[["struct",12],[" ",17],["BlockQuote",7]],"d":"A block quote."},{"p":["InlineCode"],"f":[["struct",12],[" ",17],["InlineCode",7]],"s":[["struct",12],[" ",17],["InlineCode",7]],"d":"An inline code markup element, representing some code-like or \"code voice\" text."},{"p":["InlineHTML"],"f":[["struct",12],[" ",17],["InlineHTML",7]],"s":[["struct",12],[" ",17],["InlineHTML",7]],"d":"An inline markup element containing raw HTML."},{"p":["SymbolLink"],"f":[["struct",12],[" ",17],["SymbolLink",7]],"s":[["struct",12],[" ",17],["SymbolLink",7]],"d":"A link to a symbol.\n\nSymbol links are written the same as inline code spans but with\ntwo backticks `\\`` instead of one. The contents inside the backticks become\nthe link's destination.\n\nSymbol links should be typically rendered with \"code voice\", usually\nmonospace."},{"p":["CustomBlock"],"f":[["struct",12],[" ",17],["CustomBlock",7]],"s":[["struct",12],[" ",17],["CustomBlock",7]],"d":"A custom block markup element.\n\n- note: This element does not yet allow for custom information to be appended and is included for backward compatibility with CommonMark. It wraps any block element."},{"p":["OrderedList"],"f":[["struct",12],[" ",17],["OrderedList",7]],"s":[["struct",12],[" ",17],["OrderedList",7]],"d":"An ordered list."},{"p":["Replacement"],"f":[["struct",12],[" ",17],["Replacement",7]],"s":[["struct",12],[" ",17],["Replacement",7]],"d":"A textual replacement."},{"p":["CustomInline"],"f":[["struct",12],[" ",17],["CustomInline",7]],"s":[["struct",12],[" ",17],["CustomInline",7]],"d":"A custom inline markup element.\n\n- note: This element does not yet allow for custom information to be appended and is included for backward compatibility with CommonMark. It wraps raw text."},{"p":["ParseOptions"],"f":[["struct",12],[" ",17],["ParseOptions",7]],"s":[["struct",12],[" ",17],["ParseOptions",7]],"d":"Options for parsing Markdown."},{"p":["Strikethrough"],"f":[["struct",12],[" ",17],["Strikethrough",7]],"s":[["struct",12],[" ",17],["Strikethrough",7]],"d":"Inline elements that should be rendered with a strike through them."},{"p":["ThematicBreak"],"f":[["struct",12],[" ",17],["ThematicBreak",7]],"s":[["struct",12],[" ",17],["ThematicBreak",7]],"d":"A thematic break."},{"p":["UnorderedList"],"f":[["struct",12],[" ",17],["UnorderedList",7]],"s":[["struct",12],[" ",17],["UnorderedList",7]],"d":"An unordered list."},{"p":["BlockDirective"],"f":[["struct",12],[" ",17],["BlockDirective",7]],"s":[["struct",12],[" ",17],["BlockDirective",7]],"d":"An element with attribute text that wraps other block elements.\n\nA block directive can be used to tag wrapped block elements or be a novel block element in itself.\nThe contents within may be more block directives or the other typical Markdown elements.\n\nFor example, a block directive could serve as a placeholder for a table of contents that can be rendered\nand inlined later:\n\n```markdown\n@TOC\n\n# Title\n...\n```\n\nA block directive could also add attribute data to the wrapped elements.\nContents inside parentheses `(...)` are considered *argument text*. There is\nno particular mandatory format for argument text but a default `name: value` style\nargument parser is included.\n\n```markdown\n@Wrapped(paperStyle: shiny) {\n   - A\n   - B\n}\n```\n\nBlock directives can be indented any amount.\n\n```markdown\n@Outer {\n  @TwoSpaces {\n      @FourSpaces\n  }\n}\n```\n\nThe indentation for the contents of a block directive are measured using\nthe first non-blank line. For example:\n\n```markdown\n@Outer {\n    This line establishes indentation to be removed from these inner contents.\n    This line will line up with the last.\n}\n```\n\nThe parser will see the following logical lines for the inner content,\nadjusting source locations after the parse.\n\n```markdown\nThis line establishes indentation to be removed from these inner contents.\nThis line will line up with the last.\n```"},{"p":["MarkupChildren"],"f":[["struct",12],[" ",17],["MarkupChildren",7]],"s":[["struct",12],[" ",17],["MarkupChildren",7]],"d":"A lazy sequence consisting of an element's child elements.\n\nThis is a `Sequence` and not a `Collection` because\ninformation that locates a child element under a parent element is not\ncached and calculated on demand."},{"p":["MarkupChildren","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":494},{"p":["SourceLocation"],"f":[["struct",12],[" ",17],["SourceLocation",7]],"s":[["struct",12],[" ",17],["SourceLocation",7]],"d":"A location in a source file."},{"p":["MarkupFormatter"],"f":[["struct",12],[" ",17],["MarkupFormatter",7]],"s":[["struct",12],[" ",17],["MarkupFormatter",7]],"d":"Prints a `Markup` tree with formatting options."},{"p":["MarkupFormatter","Options"],"f":[["struct",12],[" ",17],["Options",7]],"s":[["struct",12],[" ",17],["Options",7]],"d":"Formatting options for Markdown, based on [CommonMark](https://commonmark.org).\n"},{"p":["MarkupFormatter","Options","PreferredLineLimit"],"f":[["struct",12],[" ",17],["PreferredLineLimit",7]],"s":[["struct",12],[" ",17],["PreferredLineLimit",7]],"d":"The preferred maximum line length and element for splitting  that reach that preferred limit.\n- Note: This is a *preferred* line limit, not an absolute one.\n"},{"p":["RawMarkupHeader"],"f":[["struct",12],[" ",17],["RawMarkupHeader",7]],"s":[["struct",12],[" ",17],["RawMarkupHeader",7]],"d":"The header for the `RawMarkup` managed buffer.\n\n> Warning: **Do not mutate** anything to do with `RawMarkupHeader`\n> or change any property to variable.\n> Although this is a struct, this is used as the header type for a\n> managed buffer type with reference semantics."},{"p":["DirectiveArgument"],"f":[["struct",12],[" ",17],["DirectiveArgument",7]],"s":[["struct",12],[" ",17],["DirectiveArgument",7]],"d":"A directive argument, parsed from the form `name: value` or `name: \"value\"`."},{"p":["MarkupDumpOptions"],"f":[["struct",12],[" ",17],["MarkupDumpOptions",7]],"s":[["struct",12],[" ",17],["MarkupDumpOptions",7]],"d":"Options when printing a debug description of a markup tree."},{"p":["TypedChildIndexPath"],"f":[["struct",12],[" ",17],["TypedChildIndexPath",7]],"s":[["struct",12],[" ",17],["TypedChildIndexPath",7]],"d":"A description of a traversal through a markup tree by index and optional expected type."},{"p":["TypedChildIndexPath","Element"],"f":[["struct",12],[" ",17],["Element",7]],"s":[["struct",12],[" ",17],["Element",7]],"d":"An element of a complex child index path.","o":535},{"p":["DirectiveArgumentText"],"f":[["struct",12],[" ",17],["DirectiveArgumentText",7]],"s":[["struct",12],[" ",17],["DirectiveArgumentText",7]],"d":"The argument text provided to a directive, which can be parsed\ninto various kinds of arguments.\n\nFor example, take the following directive:\n\n```markdown\n@Dir(x: 1,\n     y: 2)\n```\n\nThe following line segments would be provided as ``DirectiveArgumentText``,\nparsed as one logical string:\n\n```\nx: 1,\n```\n```\ny: 2\n```"},{"p":["DirectiveArgumentText","LineSegment"],"f":[["struct",12],[" ",17],["LineSegment",7]],"s":[["struct",12],[" ",17],["LineSegment",7]],"d":"A segment of a line of argument text."},{"p":["ReversedMarkupChildren"],"f":[["struct",12],[" ",17],["ReversedMarkupChildren",7]],"s":[["struct",12],[" ",17],["ReversedMarkupChildren",7]],"d":"A sequence consisting of an element's child elements in reverse.\n\nThis is a `Sequence` and not a `Collection` because\ninformation that locates a child element under a parent element is not\ncached and calculated on demand."},{"p":["ReversedMarkupChildren","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"o":494},{"p":["Link"],"f":[["struct",12],[" ",17],["Link",7]],"s":[["struct",12],[" ",17],["Link",7]],"d":"A link."},{"p":["Text"],"f":[["struct",12],[" ",17],["Text",7]],"s":[["struct",12],[" ",17],["Text",7]],"d":"Plain text."},{"p":["Aside"],"f":[["struct",12],[" ",17],["Aside",7]],"s":[["struct",12],[" ",17],["Aside",7]],"d":"An auxiliary aside element interpreted from a block quote.\n\nAsides are written as a block quote starting with a special plain-text tag,\nsuch as `note:` or `tip:`:\n\n```markdown\n> Tip: This is a `tip` aside.\n> It may have a presentation similar to a block quote, but with a\n> different meaning, as it doesn't quote speech.\n```"},{"p":["Image"],"f":[["struct",12],[" ",17],["Image",7]],"s":[["struct",12],[" ",17],["Image",7]],"d":"An inline image reference."},{"p":["Table"],"f":[["struct",12],[" ",17],["Table",7]],"s":[["struct",12],[" ",17],["Table",7]],"d":"A table.\n\nA table consists of a *head*, a single row of cells; and a *body*, which can contain zero or more *rows*.\n\nThere are a few invariants on the table which must be kept due to the parser's implementation of the [spec](https://github.github.com/gfm/#tables-extension-).\n\n- All rows must have the same number of cells. Therefore, sibling rows will be expanded with empty cells to fit larger incoming rows. Trimming columns from the table requires explicit action\n- Column alignment applies to all cells within in the same column. See ``columnAlignments``."},{"p":["Table","Row"],"f":[["struct",12],[" ",17],["Row",7]],"s":[["struct",12],[" ",17],["Row",7]],"d":"A row of cells in a table."},{"p":["Table","Body"],"f":[["struct",12],[" ",17],["Body",7]],"s":[["struct",12],[" ",17],["Body",7]],"d":"The body of a table consisting of zero or more ``Table/Row`` elements."},{"p":["Table","Cell"],"f":[["struct",12],[" ",17],["Cell",7]],"s":[["struct",12],[" ",17],["Cell",7]],"d":"A cell in a table."},{"p":["Table","Head"],"f":[["struct",12],[" ",17],["Head",7]],"s":[["struct",12],[" ",17],["Head",7]],"d":"The head of a table which contains one or more ``Table/Cell`` elements."},{"p":["Strong"],"f":[["struct",12],[" ",17],["Strong",7]],"s":[["struct",12],[" ",17],["Strong",7]],"d":"An element that tags inline elements with strong emphasis."},{"p":["Heading"],"f":[["struct",12],[" ",17],["Heading",7]],"s":[["struct",12],[" ",17],["Heading",7]],"d":"A heading."},{"p":["Document"],"f":[["struct",12],[" ",17],["Document",7]],"s":[["struct",12],[" ",17],["Document",7]],"d":"A markup element representing the top level of a whole document.\n\n- note: Although this could be considered a block element that can contain block elements, a `Document` itself can't be the child of any other markup, so it is not considered a block element."},{"p":["Emphasis"],"f":[["struct",12],[" ",17],["Emphasis",7]],"s":[["struct",12],[" ",17],["Emphasis",7]],"d":"A markup element that tags inline elements with emphasis."},{"p":["ListItem"],"f":[["struct",12],[" ",17],["ListItem",7]],"s":[["struct",12],[" ",17],["ListItem",7]],"d":"A list item in an ordered or unordered list."},{"p":["CodeBlock"],"f":[["struct",12],[" ",17],["CodeBlock",7]],"s":[["struct",12],[" ",17],["CodeBlock",7]],"d":"A code block."},{"p":["HTMLBlock"],"f":[["struct",12],[" ",17],["HTMLBlock",7]],"s":[["struct",12],[" ",17],["HTMLBlock",7]],"d":"A block element containing raw HTML."},{"p":["LineBreak"],"f":[["struct",12],[" ",17],["LineBreak",7]],"s":[["struct",12],[" ",17],["LineBreak",7]],"d":"A line break."},{"p":["Paragraph"],"f":[["struct",12],[" ",17],["Paragraph",7]],"s":[["struct",12],[" ",17],["Paragraph",7]],"d":"A paragraph."},{"p":["SoftBreak"],"f":[["struct",12],[" ",17],["SoftBreak",7]],"s":[["struct",12],[" ",17],["SoftBreak",7]],"d":"A soft break."},{"p":["MarkupFormatter","Options","UseCodeFence","onlyWhenLanguageIsPresent"],"f":[["case",12],[" ",17],["onlyWhenLanguageIsPresent",7]],"s":[["case",12],[" ",17],["onlyWhenLanguageIsPresent",7]],"d":"Use a code fence only when a language is present on the\ncode block already."},{"p":["MarkupFormatter","Options","UseCodeFence","never"],"f":[["case",12],[" ",17],["never",7]],"s":[["case",12],[" ",17],["never",7]],"d":"Never use a code fence.\n\n> Note: This will strip code block languages."},{"p":["MarkupFormatter","Options","UseCodeFence","always"],"f":[["case",12],[" ",17],["always",7]],"s":[["case",12],[" ",17],["always",7]],"d":"Always use a code fence."},{"p":["MarkupFormatter","Options","EmphasisMarker","star"],"f":[["case",12],[" ",17],["star",7]],"s":[["case",12],[" ",17],["star",7]],"d":"A star/asterisk character (`*`)."},{"p":["MarkupFormatter","Options","EmphasisMarker","underline"],"f":[["case",12],[" ",17],["underline",7]],"s":[["case",12],[" ",17],["underline",7]],"d":"An underline/underbar character (`_`)."},{"p":["MarkupFormatter","Options","PreferredLineLimit","SplittingElement","hardBreak"],"f":[["case",12],[" ",17],["hardBreak",7]],"s":[["case",12],[" ",17],["hardBreak",7]],"d":"Split ``Text`` elements with ``LineBreak`` (a.k.a. *hard break*) elements if a line length\napproaches the preferred maximum length if possible.\n"},{"p":["MarkupFormatter","Options","PreferredLineLimit","SplittingElement","softBreak"],"f":[["case",12],[" ",17],["softBreak",7]],"s":[["case",12],[" ",17],["softBreak",7]],"d":"Split ``Text`` elements with ``SoftBreak`` elements if a line length\napproaches the preferred maximum length if possible.\n"},{"p":["MarkupFormatter","Options","OrderedListNumerals","incrementing(start:)"],"f":[["case",12],[" ",17],["incrementing",7],["(",17],["start",1],[": ",17],["UInt",18,576],[")",17]],"s":[["case",12],[" ",17],["incrementing",7],["(",17],["start",1],[": ",17],["UInt",18],[")",17]],"d":"Print increasing ordered list marker numerals with each\nlist item."},{"p":["MarkupFormatter","Options","OrderedListNumerals","allSame(_:)"],"f":[["case",12],[" ",17],["allSame",7],["(",17],["UInt",18,576],[")",17]],"s":[["case",12],[" ",17],["allSame",7],["(",17],["UInt",18],[")",17]],"d":"Use `start` for all ordered list markers, letting markdown\nparsers automatically increment from the `start`."},{"p":["MarkupFormatter","Options","UnorderedListMarker","dash"],"f":[["case",12],[" ",17],["dash",7]],"s":[["case",12],[" ",17],["dash",7]],"d":"A dash character (`-`)."},{"p":["MarkupFormatter","Options","UnorderedListMarker","plus"],"f":[["case",12],[" ",17],["plus",7]],"s":[["case",12],[" ",17],["plus",7]],"d":"A plus character (`+`)."},{"p":["MarkupFormatter","Options","UnorderedListMarker","star"],"f":[["case",12],[" ",17],["star",7]],"s":[["case",12],[" ",17],["star",7]],"d":"A star/asterisk character (`*`)."},{"p":["MarkupFormatter","Options","PreferredHeadingStyle","atx"],"f":[["case",12],[" ",17],["atx",7]],"s":[["case",12],[" ",17],["atx",7]],"d":"ATX-style headings.\n\nExample:\n```markdown\n# Level-1 heading\n## Level-2 heading\n...\n```"},{"p":["MarkupFormatter","Options","PreferredHeadingStyle","setext"],"f":[["case",12],[" ",17],["setext",7]],"s":[["case",12],[" ",17],["setext",7]],"d":"Setext-style headings, limited to level 1 and 2 headings.\n\nExample:\n```markdown\nLevel-1 Heading\n===============\n\nLevel-2 Heading\n---------------\n```\n\n> Note: Setext-style headings only define syntax for heading\n> levels 1 and 2. To preserve structure, headings with level\n> 3 or above will use ATX-style headings."},{"p":["MarkupFormatter","Options","ThematicBreakCharacter","dash"],"f":[["case",12],[" ",17],["dash",7]],"s":[["case",12],[" ",17],["dash",7]],"d":"A dash character (`-`)."},{"p":["MarkupFormatter","Options","ThematicBreakCharacter","star"],"f":[["case",12],[" ",17],["star",7]],"s":[["case",12],[" ",17],["star",7]],"d":"A star/asterisk character (`*`)."},{"p":["MarkupFormatter","Options","ThematicBreakCharacter","underline"],"f":[["case",12],[" ",17],["underline",7]],"s":[["case",12],[" ",17],["underline",7]],"d":"An underline/underbar character (`_`)."},{"p":["DirectiveArgumentText","ParseError","duplicateArgument(name:firstLocation:duplicateLocation:)"],"f":[["case",12],[" ",17],["duplicateArgument",7],["(",17],["name",1],[": ",17],["String",18,486],[", ",17],["firstLocation",1],[": ",17],["SourceLocation",18,42],[", ",17],["duplicateLocation",1],[": ",17],["SourceLocation",18,42],[")",17]],"s":[["case",12],[" ",17],["duplicateArgument",7],["(",17],["name",1],[": ",17],["String",18],[", ",17],["firstLocation",1],[": ",17],["SourceLocation",18],[", ",17],["duplicateLocation",1],[": ",17],["SourceLocation",18],[")",17]],"d":"A duplicate argument was given."},{"p":["DirectiveArgumentText","ParseError","unexpectedCharacter(_:location:)"],"f":[["case",12],[" ",17],["unexpectedCharacter",7],["(",17],["Character",18,460],[", ",17],["location",1],[": ",17],["SourceLocation",18,42],[")",17]],"s":[["case",12],[" ",17],["unexpectedCharacter",7],["(",17],["Character",18],[", ",17],["location",1],[": ",17],["SourceLocation",18],[")",17]],"d":"Unexpected character at a source location."},{"p":["DirectiveArgumentText","ParseError","missingExpectedCharacter(_:location:)"],"f":[["case",12],[" ",17],["missingExpectedCharacter",7],["(",17],["Character",18,460],[", ",17],["location",1],[": ",17],["SourceLocation",18,42],[")",17]],"s":[["case",12],[" ",17],["missingExpectedCharacter",7],["(",17],["Character",18],[", ",17],["location",1],[": ",17],["SourceLocation",18],[")",17]],"d":"A character was expected but not found at a source location."},{"p":["Aside","Kind","complexity"],"f":[["case",12],[" ",17],["complexity",7]],"s":[["case",12],[" ",17],["complexity",7]],"d":"A \"complexity\" aside."},{"p":["Aside","Kind","experiment"],"f":[["case",12],[" ",17],["experiment",7]],"s":[["case",12],[" ",17],["experiment",7]],"d":"An \"experiment\" aside."},{"p":["Aside","Kind","precondition"],"f":[["case",12],[" ",17],["precondition",7]],"s":[["case",12],[" ",17],["precondition",7]],"d":"A \"precondition\" aside."},{"p":["Aside","Kind","postcondition"],"f":[["case",12],[" ",17],["postcondition",7]],"s":[["case",12],[" ",17],["postcondition",7]],"d":"A \"postcondition\" aside."},{"p":["Aside","Kind","mutatingVariant"],"f":[["case",12],[" ",17],["mutatingVariant",7]],"s":[["case",12],[" ",17],["mutatingVariant",7]],"d":"A \"mutatingVariant\" aside."},{"p":["Aside","Kind","nonMutatingVariant"],"f":[["case",12],[" ",17],["nonMutatingVariant",7]],"s":[["case",12],[" ",17],["nonMutatingVariant",7]],"d":"A \"nonMutatingVariant\" aside."},{"p":["Aside","Kind","bug"],"f":[["case",12],[" ",17],["bug",7]],"s":[["case",12],[" ",17],["bug",7]],"d":"A \"bug\" aside."},{"p":["Aside","Kind","tip"],"f":[["case",12],[" ",17],["tip",7]],"s":[["case",12],[" ",17],["tip",7]],"d":"A \"tip\" aside."},{"p":["Aside","Kind","date"],"f":[["case",12],[" ",17],["date",7]],"s":[["case",12],[" ",17],["date",7]],"d":"A \"date\" aside."},{"p":["Aside","Kind","note"],"f":[["case",12],[" ",17],["note",7]],"s":[["case",12],[" ",17],["note",7]],"d":"A \"note\" aside."},{"p":["Aside","Kind","todo"],"f":[["case",12],[" ",17],["todo",7]],"s":[["case",12],[" ",17],["todo",7]],"d":"A \"todo\" aside."},{"p":["Aside","Kind","since"],"f":[["case",12],[" ",17],["since",7]],"s":[["case",12],[" ",17],["since",7]],"d":"A \"since\" aside."},{"p":["Aside","Kind","author"],"f":[["case",12],[" ",17],["author",7]],"s":[["case",12],[" ",17],["author",7]],"d":"An \"author\" aside."},{"p":["Aside","Kind","remark"],"f":[["case",12],[" ",17],["remark",7]],"s":[["case",12],[" ",17],["remark",7]],"d":"A \"remark\" aside."},{"p":["Aside","Kind","throws"],"f":[["case",12],[" ",17],["`throws`",7]],"s":[["case",12],[" ",17],["`throws`",7]],"d":"A \"throws\" aside."},{"p":["Aside","Kind","authors"],"f":[["case",12],[" ",17],["authors",7]],"s":[["case",12],[" ",17],["authors",7]],"d":"An \"authors\" aside."},{"p":["Aside","Kind","version"],"f":[["case",12],[" ",17],["version",7]],"s":[["case",12],[" ",17],["version",7]],"d":"A \"version\" aside."},{"p":["Aside","Kind","warning"],"f":[["case",12],[" ",17],["warning",7]],"s":[["case",12],[" ",17],["warning",7]],"d":"A \"warning\" aside."},{"p":["Aside","Kind","requires"],"f":[["case",12],[" ",17],["requires",7]],"s":[["case",12],[" ",17],["requires",7]],"d":"A \"requires\" aside."},{"p":["Aside","Kind","attention"],"f":[["case",12],[" ",17],["attention",7]],"s":[["case",12],[" ",17],["attention",7]],"d":"An \"attention\" aside."},{"p":["Aside","Kind","copyright"],"f":[["case",12],[" ",17],["copyright",7]],"s":[["case",12],[" ",17],["copyright",7]],"d":"A \"copyright\" aside."},{"p":["Aside","Kind","important"],"f":[["case",12],[" ",17],["important",7]],"s":[["case",12],[" ",17],["important",7]],"d":"An \"important\" aside."},{"p":["Aside","Kind","invariant"],"f":[["case",12],[" ",17],["invariant",7]],"s":[["case",12],[" ",17],["invariant",7]],"d":"An \"invariant\" aside."},{"p":["Table","ColumnAlignment","left"],"f":[["case",12],[" ",17],["left",7]],"s":[["case",12],[" ",17],["left",7]],"d":"Left alignment."},{"p":["Table","ColumnAlignment","right"],"f":[["case",12],[" ",17],["right",7]],"s":[["case",12],[" ",17],["right",7]],"d":"Right alignment."},{"p":["Table","ColumnAlignment","center"],"f":[["case",12],[" ",17],["center",7]],"s":[["case",12],[" ",17],["center",7]],"d":"Center alignment."},{"p":["Checkbox","checked"],"f":[["case",12],[" ",17],["checked",7]],"s":[["case",12],[" ",17],["checked",7]],"d":"The checkbox is checked, representing an \"on\", \"true\", or \"incomplete\" state."},{"p":["Checkbox","unchecked"],"f":[["case",12],[" ",17],["unchecked",7]],"s":[["case",12],[" ",17],["unchecked",7]],"d":"The checkbox is unchecked, representing an \"off\", \"false\", or \"incomplete\" state."},{"p":["BlockQuote","init(_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["_",1],[" ",17],["children",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["BlockMarkup",18,0]],"s":[["init",10],["<",17],["Children",0],[">(",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"BlockMarkup",0]],"g":[["Children",0,0]],"o":156},{"p":["InlineCode","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["code",2],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]],"d":"Create an inline code element from a string."},{"p":["InlineHTML","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["literalText",2],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]],"o":131},{"p":["SymbolLink","init(destination:)"],"f":[["init",10],["(",17],["destination",1],[": ",17],["String",18,486],["? = nil)",17]],"s":[["init",10],["(",17],["destination",1],[": ",17],["String",18],["?)",17]],"d":"Create a symbol link with a destination."},{"p":["CustomBlock","init(_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["_",1],[" ",17],["children",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["BlockMarkup",18,0]],"s":[["init",10],["<",17],["Children",0],[">(",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"BlockMarkup",0]],"g":[["Children",0,0]],"o":156},{"p":["OrderedList","init(_:)"],"f":[["init",10],["<",17],["Items",0],[">(",17],["_",1],[" ",17],["items",2],[": ",17],["Items",18],[") ",17],["where",12],[" ",17],["Items",18],[" : ",17],["Sequence",18,488],[", ",17],["Items",18],[".",17],["Element",18],[" == ",17],["ListItem",18,68]],"s":[["init",10],["<",17],["Items",0],[">(",17],["Items",18],[")",17]],"c":[["Items",1,"Sequence",488],["Items.Element",2,"ListItem",68]],"g":[["Items",0,0]],"o":149},{"p":["Replacement","init(range:replacementText:)"],"f":[["init",10],["(",17],["range",1],[": ",17],["SourceRange",18,451],[", ",17],["replacementText",1],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["(",17],["range",1],[": ",17],["SourceRange",18],[", ",17],["replacementText",1],[": ",17],["String",18],[")",17]],"d":"Create a textual replacement.\n\n- parameter range: The range of the source text to replace.\n- parameter replacementText: The text to substitute in the range."},{"p":["CustomInline","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["text",2],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]],"d":"Create a custom inline element from raw text."},{"p":["ParseOptions","init(rawValue:)"],"f":[["init",10],["(",17],["rawValue",1],[": ",17],["UInt",18,576],[")",17]],"s":[["init",10],["(",17],["rawValue",1],[": ",17],["UInt",18],[")",17]],"o":600},{"p":["LiteralMarkup","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["literalText",2],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]],"d":"Create an element from its literal text."},{"p":["Strikethrough","init(_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["_",1],[" ",17],["newChildren",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["InlineMarkup",18,1]],"s":[["init",10],["<",17],["Children",0],[">(",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"InlineMarkup",1]],"g":[["Children",0,0]],"o":161},{"p":["ThematicBreak","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"d":"Create a thematic break."},{"p":["UnorderedList","init(_:)"],"f":[["init",10],["<",17],["Items",0],[">(",17],["_",1],[" ",17],["items",2],[": ",17],["Items",18],[") ",17],["where",12],[" ",17],["Items",18],[" : ",17],["Sequence",18,488],[", ",17],["Items",18],[".",17],["Element",18],[" == ",17],["ListItem",18,68]],"s":[["init",10],["<",17],["Items",0],[">(",17],["Items",18],[")",17]],"c":[["Items",1,"Sequence",488],["Items.Element",2,"ListItem",68]],"g":[["Items",0,0]],"o":149},{"p":["BlockDirective","init(name:argumentText:children:)"],"f":[["init",10],["(",17],["name",1],[": ",17],["String",18,486],[", ",17],["argumentText",1],[": ",17],["String",18,486],["? = nil, ",17],["children",1],[": ",17],["BlockMarkup",18,0],["...)",17]],"s":[["init",10],["(",17],["name",1],[": ",17],["String",18],[", ",17],["argumentText",1],[": ",17],["String",18],["?, ",17],["children",1],[": ",17],["BlockMarkup",18],["...)",17]],"d":"Create a block directive.\n\n- parameter name: The name of the directive.\n- parameter argumentText: The text to use when interpreting arguments to the directive.\n- parameter children: block child elements."},{"p":["BlockDirective","init(name:argumentText:children:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["name",1],[": ",17],["String",18,486],[", ",17],["argumentText",1],[": ",17],["String",18,486],["? = nil, ",17],["children",1],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["BlockMarkup",18,0]],"s":[["init",10],["<",17],["Children",0],[">(",17],["name",1],[": ",17],["String",18],[", ",17],["argumentText",1],[": ",17],["String",18],["?, ",17],["children",1],[": ",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"BlockMarkup",0]],"g":[["Children",0,0]],"d":"Create a block directive.\n\n- parameter name: The name of the directive.\n- parameter argumentText: The text to use when interpreting arguments to the directive.\n- parameter children: block child elements."},{"p":["SourceLocation","init(line:column:source:)"],"f":[["init",10],["(",17],["line",1],[": ",17],["Int",18,533],[", ",17],["column",1],[": ",17],["Int",18,533],[", ",17],["source",1],[": ",17],["URL",18,458],["?)",17]],"s":[["init",10],["(",17],["line",1],[": ",17],["Int",18],[", ",17],["column",1],[": ",17],["Int",18],[", ",17],["source",1],[": ",17],["URL",18],["?)",17]],"d":"Create a source location with line, column, and optional source to which the location applies.\n\n- parameter line: The line number of the location, starting with 1.\n- parameter column: The column of the location, starting with 1.\n- parameter source: The URL in which the location resides, or `nil` if there is not a specific\n  file or resource that needs to be identified."},{"p":["MarkupFormatter","init(formattingOptions:)"],"f":[["init",10],["(",17],["formattingOptions",1],[": ",17],["MarkupFormatter",18,43],[".",17],["Options",18,44],[" = .default)",17]],"s":[["init",10],["(",17],["formattingOptions",1],[": ",17],["MarkupFormatter",18],[".",17],["Options",18],[")",17]],"d":"Create a `MarkupPrinter` with formatting options."},{"p":["MarkupFormatter","Options","UseCodeFence","init(rawValue:)"],"f":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18],[")",17]],"o":528},{"p":["MarkupFormatter","Options","EmphasisMarker","init(rawValue:)"],"f":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18],[")",17]],"o":528},{"p":["MarkupFormatter","Options","PreferredLineLimit","SplittingElement","init(rawValue:)"],"f":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18],[")",17]],"o":528},{"p":["MarkupFormatter","Options","PreferredLineLimit","init(maxLength:breakWith:)"],"f":[["init",10],["(",17],["maxLength",1],[": ",17],["Int",18,533],[", ",17],["breakWith",1],[" ",17],["splittingElement",2],[": ",17],["MarkupFormatter",18,43],[".",17],["Options",18,44],[".",17],["PreferredLineLimit",18,45],[".",17],["SplittingElement",18,18],[")",17]],"s":[["init",10],["(",17],["maxLength",1],[": ",17],["Int",18],[", ",17],["breakWith",1],[": ",17],["MarkupFormatter",18],[".",17],["Options",18],[".",17],["PreferredLineLimit",18],[".",17],["SplittingElement",18],[")",17]],"d":"Create a preferred line limit.\n\n- parameter maxLength: The maximum line length desired.\n- parameter splittingElement: The element used to split ``Text`` elements.\n"},{"p":["MarkupFormatter","Options","UnorderedListMarker","init(rawValue:)"],"f":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18],[")",17]],"o":528},{"p":["MarkupFormatter","Options","init(unorderedListMarker:orderedListNumerals:useCodeFence:defaultCodeBlockLanguage:thematicBreakCharacter:thematicBreakLength:emphasisMarker:condenseAutolinks:preferredHeadingStyle:preferredLineLimit:customLinePrefix:)"],"f":[["init",10],["(",17],["unorderedListMarker",1],[": ",17],["MarkupFormatter",18,43],[".",17],["Options",18,44],[".",17],["UnorderedListMarker",18,20],[" = .dash, ",17],["orderedListNumerals",1],[": ",17],["MarkupFormatter",18,43],[".",17],["Options",18,44],[".",17],["OrderedListNumerals",18,19],[" = .allSame(1), ",17],["useCodeFence",1],[": ",17],["MarkupFormatter",18,43],[".",17],["Options",18,44],[".",17],["UseCodeFence",18,16],[" = .always, ",17],["defaultCodeBlockLanguage",1],[": ",17],["String",18,486],["? = nil, ",17],["thematicBreakCharacter",1],[": ",17],["MarkupFormatter",18,43],[".",17],["Options",18,44],[".",17],["ThematicBreakCharacter",18,22],[" = .dash, ",17],["thematicBreakLength",1],[": ",17],["UInt",18,576],[" = 5, ",17],["emphasisMarker",1],[": ",17],["MarkupFormatter",18,43],[".",17],["Options",18,44],[".",17],["EmphasisMarker",18,17],[" = .star, ",17],["condenseAutolinks",1],[": ",17],["Bool",18,532],[" = true, ",17],["preferredHeadingStyle",1],[": ",17],["MarkupFormatter",18,43],[".",17],["Options",18,44],[".",17],["PreferredHeadingStyle",18,21],[" = .atx, ",17],["preferredLineLimit",1],[": ",17],["MarkupFormatter",18,43],[".",17],["Options",18,44],[".",17],["PreferredLineLimit",18,45],["? = nil, ",17],["customLinePrefix",1],[": ",17],["String",18,486],[" = \"\")",17]],"s":[["init",10],["(",17],["unorderedListMarker",1],[": ",17],["MarkupFormatter",18],[".",17],["Options",18],[".",17],["UnorderedListMarker",18],[", ",17],["orderedListNumerals",1],[": ",17],["MarkupFormatter",18],[".",17],["Options",18],[".",17],["OrderedListNumerals",18],[", ",17],["useCodeFence",1],[": ",17],["MarkupFormatter",18],[".",17],["Options",18],[".",17],["UseCodeFence",18],[", ",17],["defaultCodeBlockLanguage",1],[": ",17],["String",18],["?, ",17],["thematicBreakCharacter",1],[": ",17],["MarkupFormatter",18],[".",17],["Options",18],[".",17],["ThematicBreakCharacter",18],[", ",17],["thematicBreakLength",1],[": ",17],["UInt",18],[", ",17],["emphasisMarker",1],[": ",17],["MarkupFormatter",18],[".",17],["Options",18],[".",17],["EmphasisMarker",18],[", ",17],["condenseAutolinks",1],[": ",17],["Bool",18],[", ",17],["preferredHeadingStyle",1],[": ",17],["MarkupFormatter",18],[".",17],["Options",18],[".",17],["PreferredHeadingStyle",18],[", ",17],["preferredLineLimit",1],[": ",17],["MarkupFormatter",18],[".",17],["Options",18],[".",17],["PreferredLineLimit",18],["?, ",17],["customLinePrefix",1],[": ",17],["String",18],[")",17]],"d":"Create a set of formatting options to use when printing an element.\n\n- Parameters:\n   - unorderedListMarker: The character to use for unordered list markers.\n   - orderedListNumerals: The counting behavior and start numeral for ordered list markers.\n   - useCodeFence: Decides when to use code fences on code blocks\n   - defaultCodeBlockLanguage: The default language string to use when code blocks don't have a language and will be printed as fenced code blocks.\n   - thematicBreakCharacter: The character to use for thematic breaks.\n   - thematicBreakLength: The length of printed thematic breaks.\n   - emphasisMarker: The character to use for emphasis and strong emphasis markers.\n   - condenseAutolinks: Print links whose link text and destination match as autolinks, e.g. `<https://swift.org>`.\n   - preferredHeadingStyle: The preferred heading style.\n   - lineLimit: The preferred maximum line length and method for splitting ``Text`` elements in an attempt to maintain that line length.\n   - customLinePrefix: An addition prefix to print at the start of each line, useful for adding documentation comment markers.\n"},{"p":["MarkupFormatter","Options","PreferredHeadingStyle","init(rawValue:)"],"f":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18],[")",17]],"o":528},{"p":["MarkupFormatter","Options","ThematicBreakCharacter","init(rawValue:)"],"f":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18],[")",17]],"o":528},{"p":["ListItemContainer","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["item",2],[": ",17],["ListItem",18,68],[")",17]],"s":[["init",10],["(",17],["ListItem",18],[")",17]],"d":"Create a list with one item."},{"p":["ListItemContainer","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["items",2],[": ",17],["ListItem",18,68],["...)",17]],"s":[["init",10],["(",17],["ListItem",18],["...)",17]],"d":"Create a list with the given `ListItem`s."},{"p":["ListItemContainer","init(_:)"],"f":[["init",10],["<",17],["Items",0],[">(",17],["_",1],[" ",17],["items",2],[": ",17],["Items",18],[") ",17],["where",12],[" ",17],["Items",18],[" : ",17],["Sequence",18,488],[", ",17],["Items",18],[".",17],["Element",18],[" == ",17],["ListItem",18,68]],"s":[["init",10],["<",17],["Items",0],[">(",17],["Items",18],[")",17]],"c":[["Items",1,"Sequence",488],["Items.Element",2,"ListItem",68]],"g":[["Items",0,1]],"d":"Create a list from a sequence of items."},{"p":["MarkupDumpOptions","init(rawValue:)"],"f":[["init",10],["(",17],["rawValue",1],[": ",17],["UInt",18,576],[")",17]],"s":[["init",10],["(",17],["rawValue",1],[": ",17],["UInt",18],[")",17]],"o":600},{"p":["TableCellContainer","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["Table",18,59],[".",17],["Cell",18,62],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["Table",18],[".",17],["Cell",18],["...)",17]],"o":595},{"p":["TableCellContainer","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["cell",2],[": ",17],["Table",18,59],[".",17],["Cell",18,62],[")",17]],"s":[["init",10],["(",17],["Table",18],[".",17],["Cell",18],[")",17]],"d":"Create a row from one cell.\n\n- parameter cell: The one cell comprising the row."},{"p":["TableCellContainer","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["cells",2],[": ",17],["Table",18,59],[".",17],["Cell",18,62],["...)",17]],"s":[["init",10],["(",17],["Table",18],[".",17],["Cell",18],["...)",17]],"d":"Create a row from cells.\n\n- parameter cells: A sequence of ``Table/Cell`` elements from which to make this row."},{"p":["TableCellContainer","init(_:)"],"f":[["init",10],["<",17],["Cells",0],[">(",17],["_",1],[" ",17],["cells",2],[": ",17],["Cells",18],[") ",17],["where",12],[" ",17],["Cells",18],[" : ",17],["Sequence",18,488],[", ",17],["Cells",18],[".",17],["Element",18],[" == ",17],["Table",18,59],[".",17],["Cell",18,62]],"s":[["init",10],["<",17],["Cells",0],[">(",17],["Cells",18],[")",17]],"c":[["Cells",1,"Sequence",488],["Cells.Element",2,"Table.Cell",62]],"g":[["Cells",0,1]],"d":"Create a row from cells.\n\n- parameter cells: A sequence of ``Table/Cell`` elements from which to make this row."},{"p":["BasicBlockContainer","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["children",2],[": ",17],["BlockMarkup",18,0],["...)",17]],"s":[["init",10],["(",17],["BlockMarkup",18],["...)",17]],"d":"Create this element with a sequence of block markup elements."},{"p":["BasicBlockContainer","init(_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["_",1],[" ",17],["children",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["BlockMarkup",18,0]],"s":[["init",10],["<",17],["Children",0],[">(",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"BlockMarkup",0]],"g":[["Children",0,1]],"d":"Create this element from a sequence of block markup elements."},{"p":["TypedChildIndexPath","init(arrayLiteral:)"],"f":[["init",10],["(",17],["arrayLiteral",1],[" ",17],["elements",2],[": ",17],["TypedChildIndexPath",18,49],[".",17],["ArrayLiteralElement",18,453],["...)",17]],"s":[["init",10],["(",17],["arrayLiteral",1],[": ",17],["TypedChildIndexPath",18],[".",17],["ArrayLiteralElement",18],["...)",17]],"d":"Create a path from a sequence of index-type pairs.","o":595},{"p":["TypedChildIndexPath","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"d":"Create an empty path."},{"p":["TypedChildIndexPath","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["elements",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["Sequence",18,488],[", ",17],["S",18],[".",17],["Element",18],[" == ",17],["TypedChildIndexPath",18,49],[".",17],["Element",18,50]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"Sequence",488],["S.Element",2,"TypedChildIndexPath.Element",50]],"g":[["S",0,0]],"d":"Create a path from a sequence of index-type pairs."},{"p":["BasicInlineContainer","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["children",2],[": ",17],["InlineMarkup",18,1],["...)",17]],"s":[["init",10],["(",17],["InlineMarkup",18],["...)",17]],"d":"Create this element with a sequence of inline markup elements."},{"p":["BasicInlineContainer","init(_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["_",1],[" ",17],["children",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["InlineMarkup",18,1]],"s":[["init",10],["<",17],["Children",0],[">(",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"InlineMarkup",1]],"g":[["Children",0,1]],"d":"Create this element with a sequence of inline markup elements."},{"p":["DirectiveArgumentText","init(segments:)"],"f":[["init",10],["<",17],["Segments",0],[">(",17],["segments",1],[": ",17],["Segments",18],[") ",17],["where",12],[" ",17],["Segments",18],[" : ",17],["Sequence",18,488],[", ",17],["Segments",18],[".",17],["Element",18],[" == ",17],["DirectiveArgumentText",18,51],[".",17],["LineSegment",18,52]],"s":[["init",10],["<",17],["Segments",0],[">(",17],["segments",1],[": ",17],["Segments",18],[")",17]],"c":[["Segments",1,"Sequence",488],["Segments.Element",2,"DirectiveArgumentText.LineSegment",52]],"g":[["Segments",0,0]],"d":"Create a body of argument text from a sequence of ``LineSegment`` elements."},{"p":["DirectiveArgumentText","init(_:)"],"f":[["init",10],["<",17],["S",0],[">(",17],["_",1],[" ",17],["string",2],[": ",17],["S",18],[") ",17],["where",12],[" ",17],["S",18],[" : ",17],["StringProtocol",18,577]],"s":[["init",10],["<",17],["S",0],[">(",17],["S",18],[")",17]],"c":[["S",1,"StringProtocol",577]],"g":[["S",0,0]],"d":"Create a body of argument text as a single, rangeless ``LineSegment``\nfrom a string."},{"p":["Link","init(destination:_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["destination",1],[": ",17],["String",18,486],["? = nil, ",17],["_",1],[" ",17],["children",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["RecurringInlineMarkup",18,12]],"s":[["init",10],["<",17],["Children",0],[">(",17],["destination",1],[": ",17],["String",18],["?, ",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"RecurringInlineMarkup",12]],"g":[["Children",0,0]],"d":"Create a link with a destination and zero or more child inline elements."},{"p":["Link","init(destination:_:)"],"f":[["init",10],["(",17],["destination",1],[": ",17],["String",18,486],[", ",17],["_",1],[" ",17],["children",2],[": ",17],["RecurringInlineMarkup",18,12],["...)",17]],"s":[["init",10],["(",17],["destination",1],[": ",17],["String",18],[", ",17],["RecurringInlineMarkup",18],["...)",17]],"d":"Create a link with a destination and zero or more child inline elements."},{"p":["Text","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["literalText",2],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]],"o":131},{"p":["Aside","Kind","init(rawValue:)"],"f":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["?(",17],["rawValue",1],[": ",17],["String",18],[")",17]],"o":528},{"p":["Aside","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["blockQuote",2],[": ",17],["BlockQuote",18,27],[")",17]],"s":[["init",10],["(",17],["BlockQuote",18],[")",17]],"d":"Create an aside from a block quote."},{"p":["Image","init(source:title:_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["source",1],[": ",17],["String",18,486],["? = nil, ",17],["title",1],[": ",17],["String",18,486],["? = nil, ",17],["_",1],[" ",17],["children",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["RecurringInlineMarkup",18,12]],"s":[["init",10],["<",17],["Children",0],[">(",17],["source",1],[": ",17],["String",18],["?, ",17],["title",1],[": ",17],["String",18],["?, ",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"RecurringInlineMarkup",12]],"g":[["Children",0,0]],"d":"Create an image from a source and zero or more child inline elements."},{"p":["Image","init(source:title:_:)"],"f":[["init",10],["(",17],["source",1],[": ",17],["String",18,486],["? = nil, ",17],["title",1],[": ",17],["String",18,486],["? = nil, ",17],["_",1],[" ",17],["children",2],[": ",17],["RecurringInlineMarkup",18,12],["...)",17]],"s":[["init",10],["(",17],["source",1],[": ",17],["String",18],["?, ",17],["title",1],[": ",17],["String",18],["?, ",17],["RecurringInlineMarkup",18],["...)",17]],"d":"Create an image from a source and zero or more child inline elements."},{"p":["Table","init(columnAlignments:header:body:)"],"f":[["init",10],["(",17],["columnAlignments",1],[": [",17],["Table",18,59],[".",17],["ColumnAlignment",18,25],["?]? = nil, ",17],["header",1],[": ",17],["Table",18,59],[".",17],["Head",18,63],[" = Head(), ",17],["body",1],[": ",17],["Table",18,59],[".",17],["Body",18,61],[" = Body())",17]],"s":[["init",10],["(",17],["columnAlignments",1],[": [",17],["Table",18],[".",17],["ColumnAlignment",18],["?]?, ",17],["header",1],[": ",17],["Table",18],[".",17],["Head",18],[", ",17],["body",1],[": ",17],["Table",18],[".",17],["Body",18],[")",17]],"d":"Create a table from a header, body, and optional column alignments.\n\n- parameter columnAlignments: An optional list of alignments for each column,\n  truncated or expanded with `nil` to fit the table's maximum column count.\n- parameter head: A ``Table/Head-swift.struct`` element serving as the table's head.\n- parameter body: A ``Table/Body-swift.struct`` element serving as the table's body."},{"p":["Table","Row","init(_:)"],"f":[["init",10],["<",17],["Cells",0],[">(",17],["_",1],[" ",17],["cells",2],[": ",17],["Cells",18],[") ",17],["where",12],[" ",17],["Cells",18],[" : ",17],["Sequence",18,488],[", ",17],["Cells",18],[".",17],["Element",18],[" == ",17],["Table",18,59],[".",17],["Cell",18,62]],"s":[["init",10],["<",17],["Cells",0],[">(",17],["Cells",18],[")",17]],"c":[["Cells",1,"Sequence",488],["Cells.Element",2,"Table.Cell",62]],"g":[["Cells",0,0]],"o":154},{"p":["Table","Body","init(_:)"],"f":[["init",10],["<",17],["Rows",0],[">(",17],["_",1],[" ",17],["rows",2],[": ",17],["Rows",18],[") ",17],["where",12],[" ",17],["Rows",18],[" : ",17],["Sequence",18,488],[", ",17],["Rows",18],[".",17],["Element",18],[" == ",17],["Table",18,59],[".",17],["Row",18,60]],"s":[["init",10],["<",17],["Rows",0],[">(",17],["Rows",18],[")",17]],"c":[["Rows",1,"Sequence",488],["Rows.Element",2,"Table.Row",60]],"g":[["Rows",0,0]],"d":"Create a table body from a sequence of ``Table/Row`` elements."},{"p":["Table","Body","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["rows",2],[": ",17],["Table",18,59],[".",17],["Row",18,60],["...)",17]],"s":[["init",10],["(",17],["Table",18],[".",17],["Row",18],["...)",17]],"d":"Create a table body from a sequence of ``Table/Row`` elements."},{"p":["Table","Cell","init(_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["_",1],[" ",17],["children",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["InlineMarkup",18,1]],"s":[["init",10],["<",17],["Children",0],[">(",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"InlineMarkup",1]],"g":[["Children",0,0]],"o":161},{"p":["Table","Head","init(_:)"],"f":[["init",10],["<",17],["Cells",0],[">(",17],["_",1],[" ",17],["cells",2],[": ",17],["Cells",18],[") ",17],["where",12],[" ",17],["Cells",18],[" : ",17],["Sequence",18,488],[", ",17],["Cells",18],[".",17],["Element",18],[" == ",17],["Table",18,59],[".",17],["Cell",18,62]],"s":[["init",10],["<",17],["Cells",0],[">(",17],["Cells",18],[")",17]],"c":[["Cells",1,"Sequence",488],["Cells.Element",2,"Table.Cell",62]],"g":[["Cells",0,0]],"o":154},{"p":["Strong","init(_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["_",1],[" ",17],["newChildren",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["InlineMarkup",18,1]],"s":[["init",10],["<",17],["Children",0],[">(",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"InlineMarkup",1]],"g":[["Children",0,0]],"o":161},{"p":["Heading","init(level:_:)"],"f":[["init",10],["(",17],["level",1],[": ",17],["Int",18,533],[", ",17],["_",1],[" ",17],["children",2],[": ",17],["InlineMarkup",18,1],["...)",17]],"s":[["init",10],["(",17],["level",1],[": ",17],["Int",18],[", ",17],["InlineMarkup",18],["...)",17]],"d":"Create a heading with a level and a sequence of children."},{"p":["Heading","init(level:_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["level",1],[": ",17],["Int",18,533],[", ",17],["_",1],[" ",17],["children",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["InlineMarkup",18,1]],"s":[["init",10],["<",17],["Children",0],[">(",17],["level",1],[": ",17],["Int",18],[", ",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"InlineMarkup",1]],"g":[["Children",0,0]],"d":"Create a heading with a level and a sequence of children."},{"p":["Document","init(parsing:source:options:)"],"f":[["init",10],["(",17],["parsing",1],[" ",17],["string",2],[": ",17],["String",18,486],[", ",17],["source",1],[": ",17],["URL",18,458],["? = nil, ",17],["options",1],[": ",17],["ParseOptions",18,35],[" = [])",17]],"s":[["init",10],["(",17],["parsing",1],[": ",17],["String",18],[", ",17],["source",1],[": ",17],["URL",18],["?, ",17],["options",1],[": ",17],["ParseOptions",18],[")",17]],"d":"Parse a string into a `Document`.\n\n- parameter string: the input Markdown text to parse.\n- parameter options: options for parsing Markdown text.\n- parameter source: an explicit source URL from which the input `string` came for marking source locations.\n  This need not be a file URL."},{"p":["Document","init(parsing:options:)"],"f":[["init",10],["(",17],["parsing",1],[" ",17],["file",2],[": ",17],["URL",18,458],[", ",17],["options",1],[": ",17],["ParseOptions",18,35],[" = []) ",17],["throws",12]],"s":[["init",10],["(",17],["parsing",1],[": ",17],["URL",18],[", ",17],["options",1],[": ",17],["ParseOptions",18],[") ",17],["throws",12]],"d":"Parse a file's contents into a `Document`.\n\n- parameter file: a file URL from which to load Markdown text to parse.\n- parameter options: options for parsing Markdown text."},{"p":["Document","init(_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["_",1],[" ",17],["children",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["BlockMarkup",18,0]],"s":[["init",10],["<",17],["Children",0],[">(",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"BlockMarkup",0]],"g":[["Children",0,0]],"d":"Create a document from a sequence of block markup elements.","o":156},{"p":["Emphasis","init(_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["_",1],[" ",17],["newChildren",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["InlineMarkup",18,1]],"s":[["init",10],["<",17],["Children",0],[">(",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"InlineMarkup",1]],"g":[["Children",0,0]],"o":161},{"p":["ListItem","init(checkbox:_:)"],"f":[["init",10],["(",17],["checkbox",1],[": ",17],["Checkbox",18,26],["? = .none, ",17],["_",1],[" ",17],["children",2],[": ",17],["BlockMarkup",18,0],["...)",17]],"s":[["init",10],["(",17],["checkbox",1],[": ",17],["Checkbox",18],["?, ",17],["BlockMarkup",18],["...)",17]],"d":"Create a list item.\n- Parameter checkbox: An optional ``Checkbox`` for the list item.\n- Parameter children: The child block elements of the list item."},{"p":["ListItem","init(checkbox:_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["checkbox",1],[": ",17],["Checkbox",18,26],["? = .none, ",17],["_",1],[" ",17],["children",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["BlockMarkup",18,0]],"s":[["init",10],["<",17],["Children",0],[">(",17],["checkbox",1],[": ",17],["Checkbox",18],["?, ",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"BlockMarkup",0]],"g":[["Children",0,0]],"d":"Create a list item.\n- Parameter checkbox: An optional ``Checkbox`` for the list item.\n- Parameter children: The child block elements of the list item."},{"p":["CodeBlock","init(language:_:)"],"f":[["init",10],["(",17],["language",1],[": ",17],["String",18,486],["? = nil, ",17],["_",1],[" ",17],["code",2],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["(",17],["language",1],[": ",17],["String",18],["?, ",17],["String",18],[")",17]],"d":"Create a code block with raw `code` and optional `language`."},{"p":["HTMLBlock","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["literalText",2],[": ",17],["String",18,486],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]],"o":131},{"p":["LineBreak","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"d":"Create a hard line break."},{"p":["Paragraph","init(_:)"],"f":[["init",10],["<",17],["Children",0],[">(",17],["_",1],[" ",17],["newChildren",2],[": ",17],["Children",18],[") ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["InlineMarkup",18,1]],"s":[["init",10],["<",17],["Children",0],[">(",17],["Children",18],[")",17]],"c":[["Children",1,"Sequence",488],["Children.Element",2,"InlineMarkup",1]],"g":[["Children",0,0]],"o":161},{"p":["SoftBreak","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"d":"Create a soft line break."},{"p":["TypedChildIndexPath","subscript(_:)"],"f":[["subscript",10],["(",17],["index",2],[": ",17],["Int",18,533],[") -> ",17],["TypedChildIndexPath",18,49],[".",17],["Element",18,50],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["Int",18],[") -> ",17],["TypedChildIndexPath",18],[".",17],["Element",18]],"o":571},{"p":["ParseOptions","parseSymbolLinks"],"f":[["static",12],[" ",17],["let",12],[" ",17],["parseSymbolLinks",7],[": ",17],["ParseOptions",18,35]],"s":[["static",12],[" ",17],["let",12],[" ",17],["parseSymbolLinks",7],[": ",17],["ParseOptions",18]],"d":"Enable interpretation of symbol links from inline code spans surrounded by two backticks."},{"p":["ParseOptions","parseBlockDirectives"],"f":[["static",12],[" ",17],["let",12],[" ",17],["parseBlockDirectives",7],[": ",17],["ParseOptions",18,35]],"s":[["static",12],[" ",17],["let",12],[" ",17],["parseBlockDirectives",7],[": ",17],["ParseOptions",18]],"d":"Enable block directive syntax."},{"p":["MarkupFormatter","Options","default"],"f":[["static",12],[" ",17],["let",12],[" ",17],["`default`",7],[": ",17],["MarkupFormatter",18,43],[".",17],["Options",18,44]],"s":[["static",12],[" ",17],["let",12],[" ",17],["`default`",7],[": ",17],["MarkupFormatter",18],[".",17],["Options",18]],"d":"The default set of formatting options."},{"p":["MarkupDumpOptions","printEverything"],"f":[["static",12],[" ",17],["let",12],[" ",17],["printEverything",7],[": ",17],["MarkupDumpOptions",18,48]],"s":[["static",12],[" ",17],["let",12],[" ",17],["printEverything",7],[": ",17],["MarkupDumpOptions",18]],"d":"Print all optional information about a markup tree."},{"p":["MarkupDumpOptions","printSourceLocations"],"f":[["static",12],[" ",17],["let",12],[" ",17],["printSourceLocations",7],[": ",17],["MarkupDumpOptions",18,48]],"s":[["static",12],[" ",17],["let",12],[" ",17],["printSourceLocations",7],[": ",17],["MarkupDumpOptions",18]],"d":"Include source locations and ranges of each element in the dump."},{"p":["MarkupDumpOptions","printUniqueIdentifiers"],"f":[["static",12],[" ",17],["let",12],[" ",17],["printUniqueIdentifiers",7],[": ",17],["MarkupDumpOptions",18,48]],"s":[["static",12],[" ",17],["let",12],[" ",17],["printUniqueIdentifiers",7],[": ",17],["MarkupDumpOptions",18]],"d":"Include internal unique identifiers of each element in the dump."},{"p":["InlineCode","code"],"f":[["var",12],[" ",17],["code",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["code",7],[": ",17],["String",18]],"d":"The literal text content."},{"p":["InlineCode","plainText"],"f":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18]],"o":244},{"p":["InlineHTML","rawHTML"],"f":[["var",12],[" ",17],["rawHTML",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rawHTML",7],[": ",17],["String",18]],"d":"The raw HTML text."},{"p":["InlineHTML","plainText"],"f":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18]],"o":244},{"p":["SymbolLink","destination"],"f":[["var",12],[" ",17],["destination",7],[": ",17],["String",18,486],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["destination",7],[": ",17],["String",18],["?",17]],"d":"The link's destination."},{"p":["SymbolLink","plainText"],"f":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18]],"o":244},{"p":["Replacement","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":592},{"p":["Replacement","replacementText"],"f":[["var",12],[" ",17],["replacementText",7],[": ",17],["String",18,486]],"s":[["var",12],[" ",17],["replacementText",7],[": ",17],["String",18]],"d":"The text to substitute in the ``range``."},{"p":["Replacement","debugDescription"],"f":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["debugDescription",7],[": ",17],["String",18]],"o":598},{"p":["Replacement","range"],"f":[["var",12],[" ",17],["range",7],[": ",17],["SourceRange",18,451]],"s":[["var",12],[" ",17],["range",7],[": ",17],["SourceRange",18]],"d":"The range of source text to replace."},{"p":["CustomInline","text"],"f":[["var",12],[" ",17],["text",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["text",7],[": ",17],["String",18]],"d":"The raw inline text of the element."},{"p":["CustomInline","plainText"],"f":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18]],"o":244},{"p":["ParseOptions","rawValue"],"f":[["var",12],[" ",17],["rawValue",7],[": ",17],["UInt",18,576]],"s":[["var",12],[" ",17],["rawValue",7],[": ",17],["UInt",18]],"o":527},{"p":["Strikethrough","plainText"],"f":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18]],"o":244},{"p":["BlockContainer","blockChildren"],"f":[["var",12],[" ",17],["blockChildren",7],[": ",17],["LazyMapSequence",18,590],["<",17],["MarkupChildren",18,40],[", ",17],["BlockMarkup",18,0],["> { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["blockChildren",7],[": ",17],["LazyMapSequence",18],["<",17],["MarkupChildren",18],[", ",17],["BlockMarkup",18],[">",17]],"d":"The inline child elements of this element.\n\n- Precondition: All children of an `InlineContainer`\n  must conform to `InlineMarkup`."},{"p":["BlockDirective","argumentText"],"f":[["var",12],[" ",17],["argumentText",7],[": ",17],["DirectiveArgumentText",18,51],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["argumentText",7],[": ",17],["DirectiveArgumentText",18]],"d":"The textual content that can be interpreted as arguments to the directive."},{"p":["BlockDirective","nameLocation"],"f":[["var",12],[" ",17],["nameLocation",7],[": ",17],["SourceLocation",18,42],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["nameLocation",7],[": ",17],["SourceLocation",18],["?",17]],"d":"The source location from which the directive's name was parsed, if it\nwas parsed from source."},{"p":["BlockDirective","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["String",18]],"d":"The name of the directive."},{"p":["BlockDirective","nameRange"],"f":[["var",12],[" ",17],["nameRange",7],[": ",17],["SourceRange",18,451],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["nameRange",7],[": ",17],["SourceRange",18],["?",17]],"d":"The source range from which the directive's name was parsed, if it was\nparsed from source."},{"p":["SourceLocation","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"o":592},{"p":["SourceLocation","line"],"f":[["var",12],[" ",17],["line",7],[": ",17],["Int",18,533]],"s":[["var",12],[" ",17],["line",7],[": ",17],["Int",18]],"d":"The line number of the location."},{"p":["SourceLocation","column"],"f":[["var",12],[" ",17],["column",7],[": ",17],["Int",18,533]],"s":[["var",12],[" ",17],["column",7],[": ",17],["Int",18]],"d":"The number of Unicode code units from the start of the line to the character at this source location."},{"p":["SourceLocation","source"],"f":[["var",12],[" ",17],["source",7],[": ",17],["URL",18,458],["?",17]],"s":[["var",12],[" ",17],["source",7],[": ",17],["URL",18],["?",17]],"d":"The source file for which this location applies, if it came from an accessible location."},{"p":["InlineContainer","inlineChildren"],"f":[["var",12],[" ",17],["inlineChildren",7],[": ",17],["LazyMapSequence",18,590],["<",17],["MarkupChildren",18,40],[", ",17],["InlineMarkup",18,1],["> { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["inlineChildren",7],[": ",17],["LazyMapSequence",18],["<",17],["MarkupChildren",18],[", ",17],["InlineMarkup",18],[">",17]],"d":"The inline child elements of this element.\n\n- Precondition: All children of an `InlineContainer`\n  must conform to `InlineMarkup`."},{"p":["InlineContainer","plainText"],"f":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18]],"o":244},{"p":["MarkupFormatter","formattingOptions"],"f":[["var",12],[" ",17],["formattingOptions",7],[": ",17],["MarkupFormatter",18,43],[".",17],["Options",18,44]],"s":[["var",12],[" ",17],["formattingOptions",7],[": ",17],["MarkupFormatter",18],[".",17],["Options",18]],"d":"Formatting options to use while printing."},{"p":["MarkupFormatter","result"],"f":[["var",12],[" ",17],["result",7],[": ",17],["String",18,486],[" { get }",17]],"s":[["var",12],[" ",17],["result",7],[": ",17],["String",18]],"d":"The formatted result."},{"p":["MarkupFormatter","Options","PreferredLineLimit","lineSplittingElement"],"f":[["var",12],[" ",17],["lineSplittingElement",7],[": ",17],["MarkupFormatter",18,43],[".",17],["Options",18,44],[".",17],["PreferredLineLimit",18,45],[".",17],["SplittingElement",18,18]],"s":[["var",12],[" ",17],["lineSplittingElement",7],[": ",17],["MarkupFormatter",18],[".",17],["Options",18],[".",17],["PreferredLineLimit",18],[".",17],["SplittingElement",18]],"d":"The method for splitting lines"},{"p":["MarkupFormatter","Options","PreferredLineLimit","maxLength"],"f":[["var",12],[" ",17],["maxLength",7],[": ",17],["Int",18,533]],"s":[["var",12],[" ",17],["maxLength",7],[": ",17],["Int",18]],"d":"The preferred maximum line length."},{"p":["DirectiveArgument","valueRange"],"f":[["var",12],[" ",17],["valueRange",7],[": ",17],["SourceRange",18,451],["?",17]],"s":[["var",12],[" ",17],["valueRange",7],[": ",17],["SourceRange",18],["?",17]],"d":"The range of the argument value if it was parsed from source text."},{"p":["DirectiveArgument","hasTrailingComma"],"f":[["var",12],[" ",17],["hasTrailingComma",7],[": ",17],["Bool",18,532]],"s":[["var",12],[" ",17],["hasTrailingComma",7],[": ",17],["Bool",18]],"d":"`true` if the argument value was followed by a comma."},{"p":["DirectiveArgument","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["String",18,486]],"s":[["var",12],[" ",17],["name",7],[": ",17],["String",18]],"d":"The name of the argument."},{"p":["DirectiveArgument","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["String",18,486]],"s":[["var",12],[" ",17],["value",7],[": ",17],["String",18]],"d":"The value of the argument."},{"p":["DirectiveArgument","nameRange"],"f":[["var",12],[" ",17],["nameRange",7],[": ",17],["SourceRange",18,451],["?",17]],"s":[["var",12],[" ",17],["nameRange",7],[": ",17],["SourceRange",18],["?",17]],"d":"The range of the argument name if it was parsed from source text."},{"p":["ListItemContainer","listItems"],"f":[["var",12],[" ",17],["listItems",7],[": ",17],["LazyMapSequence",18,590],["<",17],["MarkupChildren",18,40],[", ",17],["ListItem",18,68],["> { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["listItems",7],[": ",17],["LazyMapSequence",18],["<",17],["MarkupChildren",18],[", ",17],["ListItem",18],[">",17]],"d":"The items of the list.\n\n- Precondition: All children of a `ListItemContainer`\n  must be a `ListItem`."},{"p":["MarkupDumpOptions","rawValue"],"f":[["let",12],[" ",17],["rawValue",7],[": ",17],["UInt",18,576]],"s":[["let",12],[" ",17],["rawValue",7],[": ",17],["UInt",18]],"o":527},{"p":["TableCellContainer","cells"],"f":[["var",12],[" ",17],["cells",7],[": ",17],["LazyMapSequence",18,590],["<",17],["MarkupChildren",18,40],[", ",17],["Table",18,59],[".",17],["Cell",18,62],["> { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["cells",7],[": ",17],["LazyMapSequence",18],["<",17],["MarkupChildren",18],[", ",17],["Table",18],[".",17],["Cell",18],[">",17]],"d":"The cells of the row.\n\n- Precondition: All children of a ``TableCellContainer`` must be a `Table.Cell`."},{"p":["TypedChildIndexPath","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18,533],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18]],"o":547},{"p":["TypedChildIndexPath","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["Int",18,533],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["Int",18]],"o":538},{"p":["DirectiveArgumentText","LineSegment","trimmedText"],"f":[["var",12],[" ",17],["trimmedText",7],[": ",17],["Substring",18,573],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["trimmedText",7],[": ",17],["Substring",18]],"d":"The segment's text starting from ``parseIndex``."},{"p":["DirectiveArgumentText","LineSegment","untrimmedText"],"f":[["var",12],[" ",17],["untrimmedText",7],[": ",17],["String",18,486]],"s":[["var",12],[" ",17],["untrimmedText",7],[": ",17],["String",18]],"d":"The segment's untrimmed text from which arguments can be parsed."},{"p":["DirectiveArgumentText","LineSegment","parseIndex"],"f":[["var",12],[" ",17],["parseIndex",7],[": ",17],["String",18,486],[".",17],["Index",18,487]],"s":[["var",12],[" ",17],["parseIndex",7],[": ",17],["String",18],[".",17],["Index",18]],"d":"The index from which parsing should start."},{"p":["DirectiveArgumentText","LineSegment","lineStartIndex"],"f":[["var",12],[" ",17],["lineStartIndex",7],[": ",17],["String",18,486],[".",17],["Index",18,487]],"s":[["var",12],[" ",17],["lineStartIndex",7],[": ",17],["String",18],[".",17],["Index",18]],"d":"The index in ``untrimmedText`` where the line started."},{"p":["DirectiveArgumentText","LineSegment","range"],"f":[["var",12],[" ",17],["range",7],[": ",17],["SourceRange",18,451],["?",17]],"s":[["var",12],[" ",17],["range",7],[": ",17],["SourceRange",18],["?",17]],"d":"The range from which a segment was extracted from a line\nof source, or `nil` if it was provided by other means."},{"p":["DirectiveArgumentText","isEmpty"],"f":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18]],"d":"`true` if there are no segments or all segments consist entirely of whitespace."},{"p":["DirectiveArgumentText","segments"],"f":[["var",12],[" ",17],["segments",7],[": [",17],["DirectiveArgumentText",18,51],[".",17],["LineSegment",18,52],["]",17]],"s":[["var",12],[" ",17],["segments",7],[": [",17],["DirectiveArgumentText",18],[".",17],["LineSegment",18],["]",17]],"d":"The segments that make up the argument text."},{"p":["PlainTextConvertibleMarkup","plainText"],"f":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18]],"d":"The plain text content of an element."},{"p":["Link","destination"],"f":[["var",12],[" ",17],["destination",7],[": ",17],["String",18,486],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["destination",7],[": ",17],["String",18],["?",17]],"d":"The link's destination."},{"p":["Text","plainText"],"f":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18]],"o":244},{"p":["Text","string"],"f":[["var",12],[" ",17],["string",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["string",7],[": ",17],["String",18]],"d":"The raw text of the element."},{"p":["Aside","kind"],"f":[["var",12],[" ",17],["kind",7],[": ",17],["Aside",18,57],[".",17],["Kind",18,24]],"s":[["var",12],[" ",17],["kind",7],[": ",17],["Aside",18],[".",17],["Kind",18]],"d":"The kind of aside interpreted from the initial text of the ``BlockQuote``."},{"p":["Aside","content"],"f":[["var",12],[" ",17],["content",7],[": [",17],["BlockMarkup",18,0],["]",17]],"s":[["var",12],[" ",17],["content",7],[": [",17],["BlockMarkup",18],["]",17]],"d":"The block elements of the aside taken from the ``BlockQuote``,\nexcluding the initial text tag."},{"p":["Image","title"],"f":[["var",12],[" ",17],["title",7],[": ",17],["String",18,486],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["title",7],[": ",17],["String",18],["?",17]],"d":"The image's title."},{"p":["Image","source"],"f":[["var",12],[" ",17],["source",7],[": ",17],["String",18,486],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["source",7],[": ",17],["String",18],["?",17]],"d":"The image's source."},{"p":["Table","maxColumnCount"],"f":[["var",12],[" ",17],["maxColumnCount",7],[": ",17],["Int",18,533],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["maxColumnCount",7],[": ",17],["Int",18]],"d":"The maximum number of columns in each row."},{"p":["Table","columnAlignments"],"f":[["var",12],[" ",17],["columnAlignments",7],[": [",17],["Table",18,59],[".",17],["ColumnAlignment",18,25],["?] { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["columnAlignments",7],[": [",17],["Table",18],[".",17],["ColumnAlignment",18],["?]",17]],"d":"Alignments to apply to each cell in each column."},{"p":["Table","Body","rows"],"f":[["var",12],[" ",17],["rows",7],[": ",17],["LazyMapSequence",18,590],["<",17],["MarkupChildren",18,40],[", ",17],["Table",18,59],[".",17],["Row",18,60],["> { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["rows",7],[": ",17],["LazyMapSequence",18],["<",17],["MarkupChildren",18],[", ",17],["Table",18],[".",17],["Row",18],[">",17]],"d":"The rows of the body.\n\n- Precondition: All children of a `ListItemContainer`\n  must be a `ListItem`."},{"p":["Table","body"],"f":[["var",12],[" ",17],["body",7],[": ",17],["Table",18,59],[".",17],["Body",18,61],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["body",7],[": ",17],["Table",18],[".",17],["Body",18]],"d":"The table's body, a collection of rows."},{"p":["Table","head"],"f":[["var",12],[" ",17],["head",7],[": ",17],["Table",18,59],[".",17],["Head",18,63],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["head",7],[": ",17],["Table",18],[".",17],["Head",18]],"d":"The table's header, a single row of cells."},{"p":["Table","isEmpty"],"f":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18]],"d":"`true` if both the ``Table/head-swift.property`` and ``Table/body-swift.property`` are empty."},{"p":["Markup","childCount"],"f":[["var",12],[" ",17],["childCount",7],[": ",17],["Int",18,533],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["childCount",7],[": ",17],["Int",18]],"d":"The number of this element's children.\n\n- Complexity: `O(1)`"},{"p":["Markup","indexInParent"],"f":[["var",12],[" ",17],["indexInParent",7],[": ",17],["Int",18,533],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["indexInParent",7],[": ",17],["Int",18]],"d":"The index in the parent's children."},{"p":["Markup","detachedFromParent"],"f":[["var",12],[" ",17],["detachedFromParent",7],[": ",17],["Markup",18,14],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["detachedFromParent",7],[": ",17],["Markup",18]],"d":"Returns this element detached from its parent."},{"p":["Markup","root"],"f":[["var",12],[" ",17],["root",7],[": ",17],["Markup",18,14],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["root",7],[": ",17],["Markup",18]],"d":"The root of the tree in which this element resides, or the element itself if it is the root.\n\n- Complexity: `O(height)`"},{"p":["Markup","range"],"f":[["var",12],[" ",17],["range",7],[": ",17],["SourceRange",18,451],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["range",7],[": ",17],["SourceRange",18],["?",17]],"d":"The text range where this element was parsed, or `nil` if it was constructed outside of parsing.\n\n- Complexity: `O(height)` (The root element holds range information for its subtree)"},{"p":["Markup","parent"],"f":[["var",12],[" ",17],["parent",7],[": ",17],["Markup",18,14],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["parent",7],[": ",17],["Markup",18],["?",17]],"d":"The parent of this element, or `nil` if this is a root."},{"p":["Markup","isEmpty"],"f":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18,532],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18]],"d":"`true` if this element has no children.\n\n- Complexity: `O(1)`"},{"p":["Markup","children"],"f":[["var",12],[" ",17],["children",7],[": ",17],["MarkupChildren",18,40],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["children",7],[": ",17],["MarkupChildren",18]],"d":"The children of the element."},{"p":["Strong","plainText"],"f":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18]],"o":244},{"p":["Heading","level"],"f":[["var",12],[" ",17],["level",7],[": ",17],["Int",18,533],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["level",7],[": ",17],["Int",18]],"d":"The level of the heading, starting at `1`."},{"p":["Emphasis","plainText"],"f":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18]],"o":244},{"p":["ListItem","checkbox"],"f":[["var",12],[" ",17],["checkbox",7],[": ",17],["Checkbox",18,26],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["checkbox",7],[": ",17],["Checkbox",18],["?",17]],"d":"An optional ``Checkbox`` for the list item, which can indicate completion of a task, or some other off/on information."},{"p":["CodeBlock","code"],"f":[["var",12],[" ",17],["code",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["code",7],[": ",17],["String",18]],"d":"The raw text representing the code of this block."},{"p":["CodeBlock","language"],"f":[["var",12],[" ",17],["language",7],[": ",17],["String",18,486],["? { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["language",7],[": ",17],["String",18],["?",17]],"d":"The name of the syntax or programming language of the code block, which may be `nil` when unspecified."},{"p":["HTMLBlock","rawHTML"],"f":[["var",12],[" ",17],["rawHTML",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["rawHTML",7],[": ",17],["String",18]],"d":"The raw HTML text comprising the block."},{"p":["LineBreak","plainText"],"f":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18]],"o":244},{"p":["SoftBreak","plainText"],"f":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18,486],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["plainText",7],[": ",17],["String",18]],"o":244},{"p":["BlockQuote","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["InlineCode","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["InlineHTML","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["SymbolLink","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["CustomBlock","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["OrderedList","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["CustomInline","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["MarkupWalker","descendInto(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["descendInto",7],["(",17],["_",1],[" ",17],["markup",2],[": ",17],["Markup",18,14],[")",17]],"s":[["func",12],[" ",17],["descendInto",7],["(",17],["Markup",18],[")",17]],"d":"Continue walking by descending in the given element.\n\n- Parameter markup: the element whose children the walker should visit."},{"p":["MarkupWalker","defaultVisit(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["defaultVisit",7],["(",17],["_",1],[" ",17],["markup",2],[": ",17],["Markup",18,14],[")",17]],"s":[["func",12],[" ",17],["defaultVisit",7],["(",17],["Markup",18],[")",17]],"o":287},{"p":["MarkupVisitor","visitImage(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitImage",7],["(",17],["_",1],[" ",17],["image",2],[": ",17],["Image",18,58],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitImage",7],["(",17],["Image",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Image` element and return the result.\n\n- parameter image: An `Image` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitTable(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTable",7],["(",17],["_",1],[" ",17],["table",2],[": ",17],["Table",18,59],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitTable",7],["(",17],["Table",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Table` element and return the result.\n\n- parameter table: A `Table` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitStrong(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitStrong",7],["(",17],["_",1],[" ",17],["strong",2],[": ",17],["Strong",18,64],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitStrong",7],["(",17],["Strong",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Strong` element and return the result.\n\n- parameter strong: An `Strong` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","defaultVisit(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["defaultVisit",7],["(",17],["_",1],[" ",17],["markup",2],[": ",17],["Markup",18,14],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["defaultVisit",7],["(",17],["Markup",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"A default implementation to use when a visitor method isn't implemented for a particular element.\n- parameter markup: the element to visit.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitHeading(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitHeading",7],["(",17],["_",1],[" ",17],["heading",2],[": ",17],["Heading",18,65],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitHeading",7],["(",17],["Heading",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Heading` element and return the result.\n\n- parameter heading: An `Heading` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitDocument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitDocument",7],["(",17],["_",1],[" ",17],["document",2],[": ",17],["Document",18,66],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitDocument",7],["(",17],["Document",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Document` element and return the result.\n\n- parameter document: An `Document` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitEmphasis(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitEmphasis",7],["(",17],["_",1],[" ",17],["emphasis",2],[": ",17],["Emphasis",18,67],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitEmphasis",7],["(",17],["Emphasis",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Emphasis` element and return the result.\n\n- parameter emphasis: An `Emphasis` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitListItem(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitListItem",7],["(",17],["_",1],[" ",17],["listItem",2],[": ",17],["ListItem",18,68],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitListItem",7],["(",17],["ListItem",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `ListItem` element and return the result.\n\n- parameter listItem: An `ListItem` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitTableRow(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTableRow",7],["(",17],["_",1],[" ",17],["tableRow",2],[": ",17],["Table",18,59],[".",17],["Row",18,60],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitTableRow",7],["(",17],["Table",18],[".",17],["Row",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Table.Row` element and return the result.\n\n- parameter tableRow: A `Table.Row` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitCodeBlock(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitCodeBlock",7],["(",17],["_",1],[" ",17],["codeBlock",2],[": ",17],["CodeBlock",18,69],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitCodeBlock",7],["(",17],["CodeBlock",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `CodeBlock` element and return the result.\n\n- parameter codeBlock: An `CodeBlock` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitHTMLBlock(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitHTMLBlock",7],["(",17],["_",1],[" ",17],["html",2],[": ",17],["HTMLBlock",18,70],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitHTMLBlock",7],["(",17],["HTMLBlock",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit an `HTML` element and return the result.\n\n- parameter html: An `HTML` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitLineBreak(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitLineBreak",7],["(",17],["_",1],[" ",17],["lineBreak",2],[": ",17],["LineBreak",18,71],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitLineBreak",7],["(",17],["LineBreak",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `LineBreak` element and return the result.\n\n- parameter lineBreak: An `LineBreak` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitParagraph(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitParagraph",7],["(",17],["_",1],[" ",17],["paragraph",2],[": ",17],["Paragraph",18,72],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitParagraph",7],["(",17],["Paragraph",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Paragraph` element and return the result.\n\n- parameter paragraph: An `Paragraph` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitSoftBreak(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitSoftBreak",7],["(",17],["_",1],[" ",17],["softBreak",2],[": ",17],["SoftBreak",18,73],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitSoftBreak",7],["(",17],["SoftBreak",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `SoftBreak` element and return the result.\n\n- parameter softBreak: An `SoftBreak` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitTableBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTableBody",7],["(",17],["_",1],[" ",17],["tableBody",2],[": ",17],["Table",18,59],[".",17],["Body",18,61],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitTableBody",7],["(",17],["Table",18],[".",17],["Body",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Table.Body` element and return the result.\n\n- parameter tableBody: A `Table.Body` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitTableCell(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTableCell",7],["(",17],["_",1],[" ",17],["tableCell",2],[": ",17],["Table",18,59],[".",17],["Cell",18,62],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitTableCell",7],["(",17],["Table",18],[".",17],["Cell",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Table.Cell` element and return the result.\n\n- parameter tableCell: A `Table.Cell` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitTableHead(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTableHead",7],["(",17],["_",1],[" ",17],["tableHead",2],[": ",17],["Table",18,59],[".",17],["Head",18,63],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitTableHead",7],["(",17],["Table",18],[".",17],["Head",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Table.Head` element and return the result.\n\n- parameter tableHead: A `Table.Head` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitBlockQuote(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitBlockQuote",7],["(",17],["_",1],[" ",17],["blockQuote",2],[": ",17],["BlockQuote",18,27],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitBlockQuote",7],["(",17],["BlockQuote",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `BlockQuote` element and return the result.\n\n- parameter blockQuote: A `BlockQuote` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitInlineCode(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitInlineCode",7],["(",17],["_",1],[" ",17],["inlineCode",2],[": ",17],["InlineCode",18,28],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitInlineCode",7],["(",17],["InlineCode",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `InlineCode` element and return the result.\n\n- parameter inlineCode: An `InlineCode` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitInlineHTML(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitInlineHTML",7],["(",17],["_",1],[" ",17],["inlineHTML",2],[": ",17],["InlineHTML",18,29],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitInlineHTML",7],["(",17],["InlineHTML",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `InlineHTML` element and return the result.\n\n- parameter inlineHTML: An `InlineHTML` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitSymbolLink(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitSymbolLink",7],["(",17],["_",1],[" ",17],["symbolLink",2],[": ",17],["SymbolLink",18,30],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitSymbolLink",7],["(",17],["SymbolLink",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `SymbolLink` element and return the result.\n\n- parameter symbolLink: A `SymbolLink` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitCustomBlock(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitCustomBlock",7],["(",17],["_",1],[" ",17],["customBlock",2],[": ",17],["CustomBlock",18,31],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitCustomBlock",7],["(",17],["CustomBlock",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `CustomBlock` element and return the result.\n\n- parameter customBlock: An `CustomBlock` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitOrderedList(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitOrderedList",7],["(",17],["_",1],[" ",17],["orderedList",2],[": ",17],["OrderedList",18,32],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitOrderedList",7],["(",17],["OrderedList",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `OrderedList` element and return the result.\n\n- parameter orderedList: An `OrderedList` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitCustomInline(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitCustomInline",7],["(",17],["_",1],[" ",17],["customInline",2],[": ",17],["CustomInline",18,34],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitCustomInline",7],["(",17],["CustomInline",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `CustomInline` element and return the result.\n\n- parameter customInline: An `CustomInline` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitStrikethrough(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitStrikethrough",7],["(",17],["_",1],[" ",17],["strikethrough",2],[": ",17],["Strikethrough",18,36],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitStrikethrough",7],["(",17],["Strikethrough",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Strikethrough` element and return the result.\n\n- parameter strikethrough: A `Strikethrough` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitThematicBreak(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitThematicBreak",7],["(",17],["_",1],[" ",17],["thematicBreak",2],[": ",17],["ThematicBreak",18,37],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitThematicBreak",7],["(",17],["ThematicBreak",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `ThematicBreak` element and return the result.\n\n- parameter thematicBreak: An `ThematicBreak` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitUnorderedList(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitUnorderedList",7],["(",17],["_",1],[" ",17],["unorderedList",2],[": ",17],["UnorderedList",18,38],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitUnorderedList",7],["(",17],["UnorderedList",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `UnorderedList` element and return the result.\n\n- parameter unorderedList: An `UnorderedList` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitBlockDirective(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitBlockDirective",7],["(",17],["_",1],[" ",17],["blockDirective",2],[": ",17],["BlockDirective",18,39],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitBlockDirective",7],["(",17],["BlockDirective",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `BlockDirective` element and return the result.\n\n- parameter blockDirective: A `BlockDirective` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visit(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["markup",2],[": ",17],["Markup",18,14],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visit",7],["(",17],["Markup",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit any kind of `Markup` element and return the result.\n\n- parameter markup: Any kind of `Markup` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitLink(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitLink",7],["(",17],["_",1],[" ",17],["link",2],[": ",17],["Link",18,55],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitLink",7],["(",17],["Link",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Link` element and return the result.\n\n- parameter link: An `Link` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitText(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitText",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["Text",18,56],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitText",7],["(",17],["Text",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"d":"Visit a `Text` element and return the result.\n\n- parameter text: A `Text` element.\n- returns: The result of the visit.\n"},{"p":["MarkupVisitor","visitImage(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitImage",7],["(",17],["_",1],[" ",17],["image",2],[": ",17],["Image",18,58],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitImage",7],["(",17],["Image",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":284},{"p":["MarkupVisitor","visitTable(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTable",7],["(",17],["_",1],[" ",17],["table",2],[": ",17],["Table",18,59],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitTable",7],["(",17],["Table",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":285},{"p":["MarkupVisitor","visitStrong(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitStrong",7],["(",17],["_",1],[" ",17],["strong",2],[": ",17],["Strong",18,64],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitStrong",7],["(",17],["Strong",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":286},{"p":["MarkupVisitor","visitHeading(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitHeading",7],["(",17],["_",1],[" ",17],["heading",2],[": ",17],["Heading",18,65],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitHeading",7],["(",17],["Heading",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":288},{"p":["MarkupVisitor","visitDocument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitDocument",7],["(",17],["_",1],[" ",17],["document",2],[": ",17],["Document",18,66],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitDocument",7],["(",17],["Document",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":289},{"p":["MarkupVisitor","visitEmphasis(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitEmphasis",7],["(",17],["_",1],[" ",17],["emphasis",2],[": ",17],["Emphasis",18,67],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitEmphasis",7],["(",17],["Emphasis",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":290},{"p":["MarkupVisitor","visitListItem(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitListItem",7],["(",17],["_",1],[" ",17],["listItem",2],[": ",17],["ListItem",18,68],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitListItem",7],["(",17],["ListItem",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":291},{"p":["MarkupVisitor","visitTableRow(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTableRow",7],["(",17],["_",1],[" ",17],["tableRow",2],[": ",17],["Table",18,59],[".",17],["Row",18,60],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitTableRow",7],["(",17],["Table",18],[".",17],["Row",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":292},{"p":["MarkupVisitor","visitCodeBlock(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitCodeBlock",7],["(",17],["_",1],[" ",17],["codeBlock",2],[": ",17],["CodeBlock",18,69],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitCodeBlock",7],["(",17],["CodeBlock",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":293},{"p":["MarkupVisitor","visitHTMLBlock(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitHTMLBlock",7],["(",17],["_",1],[" ",17],["html",2],[": ",17],["HTMLBlock",18,70],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitHTMLBlock",7],["(",17],["HTMLBlock",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":294},{"p":["MarkupVisitor","visitLineBreak(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitLineBreak",7],["(",17],["_",1],[" ",17],["lineBreak",2],[": ",17],["LineBreak",18,71],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitLineBreak",7],["(",17],["LineBreak",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":295},{"p":["MarkupVisitor","visitParagraph(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitParagraph",7],["(",17],["_",1],[" ",17],["paragraph",2],[": ",17],["Paragraph",18,72],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitParagraph",7],["(",17],["Paragraph",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":296},{"p":["MarkupVisitor","visitSoftBreak(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitSoftBreak",7],["(",17],["_",1],[" ",17],["softBreak",2],[": ",17],["SoftBreak",18,73],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitSoftBreak",7],["(",17],["SoftBreak",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":297},{"p":["MarkupVisitor","visitTableBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTableBody",7],["(",17],["_",1],[" ",17],["tableBody",2],[": ",17],["Table",18,59],[".",17],["Body",18,61],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitTableBody",7],["(",17],["Table",18],[".",17],["Body",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":298},{"p":["MarkupVisitor","visitTableCell(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTableCell",7],["(",17],["_",1],[" ",17],["tableCell",2],[": ",17],["Table",18,59],[".",17],["Cell",18,62],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitTableCell",7],["(",17],["Table",18],[".",17],["Cell",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":299},{"p":["MarkupVisitor","visitTableHead(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTableHead",7],["(",17],["_",1],[" ",17],["tableHead",2],[": ",17],["Table",18,59],[".",17],["Head",18,63],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitTableHead",7],["(",17],["Table",18],[".",17],["Head",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":300},{"p":["MarkupVisitor","visitBlockQuote(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitBlockQuote",7],["(",17],["_",1],[" ",17],["blockQuote",2],[": ",17],["BlockQuote",18,27],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitBlockQuote",7],["(",17],["BlockQuote",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":301},{"p":["MarkupVisitor","visitInlineCode(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitInlineCode",7],["(",17],["_",1],[" ",17],["inlineCode",2],[": ",17],["InlineCode",18,28],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitInlineCode",7],["(",17],["InlineCode",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":302},{"p":["MarkupVisitor","visitInlineHTML(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitInlineHTML",7],["(",17],["_",1],[" ",17],["inlineHTML",2],[": ",17],["InlineHTML",18,29],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitInlineHTML",7],["(",17],["InlineHTML",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":303},{"p":["MarkupVisitor","visitSymbolLink(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitSymbolLink",7],["(",17],["_",1],[" ",17],["symbolLink",2],[": ",17],["SymbolLink",18,30],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitSymbolLink",7],["(",17],["SymbolLink",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":304},{"p":["MarkupVisitor","visitCustomBlock(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitCustomBlock",7],["(",17],["_",1],[" ",17],["customBlock",2],[": ",17],["CustomBlock",18,31],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitCustomBlock",7],["(",17],["CustomBlock",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":305},{"p":["MarkupVisitor","visitOrderedList(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitOrderedList",7],["(",17],["_",1],[" ",17],["orderedList",2],[": ",17],["OrderedList",18,32],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitOrderedList",7],["(",17],["OrderedList",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":306},{"p":["MarkupVisitor","visitCustomInline(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitCustomInline",7],["(",17],["_",1],[" ",17],["customInline",2],[": ",17],["CustomInline",18,34],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitCustomInline",7],["(",17],["CustomInline",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":307},{"p":["MarkupVisitor","visitStrikethrough(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitStrikethrough",7],["(",17],["_",1],[" ",17],["strikethrough",2],[": ",17],["Strikethrough",18,36],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitStrikethrough",7],["(",17],["Strikethrough",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":308},{"p":["MarkupVisitor","visitThematicBreak(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitThematicBreak",7],["(",17],["_",1],[" ",17],["thematicBreak",2],[": ",17],["ThematicBreak",18,37],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitThematicBreak",7],["(",17],["ThematicBreak",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":309},{"p":["MarkupVisitor","visitUnorderedList(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitUnorderedList",7],["(",17],["_",1],[" ",17],["unorderedList",2],[": ",17],["UnorderedList",18,38],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitUnorderedList",7],["(",17],["UnorderedList",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":310},{"p":["MarkupVisitor","visitBlockDirective(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitBlockDirective",7],["(",17],["_",1],[" ",17],["blockDirective",2],[": ",17],["BlockDirective",18,39],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitBlockDirective",7],["(",17],["BlockDirective",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":311},{"p":["MarkupVisitor","visit(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visit",7],["(",17],["_",1],[" ",17],["markup",2],[": ",17],["Markup",18,14],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visit",7],["(",17],["Markup",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":312},{"p":["MarkupVisitor","visitLink(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitLink",7],["(",17],["_",1],[" ",17],["link",2],[": ",17],["Link",18,55],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitLink",7],["(",17],["Link",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":313},{"p":["MarkupVisitor","visitText(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitText",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["Text",18,56],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitText",7],["(",17],["Text",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":314},{"p":["Strikethrough","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["ThematicBreak","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["UnorderedList","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["BlockContainer","setBlockChildren(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["setBlockChildren",7],["<",17],["Items",0],[">(",17],["_",1],[" ",17],["newChildren",2],[": ",17],["Items",18],[") ",17],["where",12],[" ",17],["Items",18],[" : ",17],["Sequence",18,488],[", ",17],["Items",18],[".",17],["Element",18],[" == ",17],["BlockMarkup",18,0]],"s":[["func",12],[" ",17],["setBlockChildren",7],["<",17],["Items",0],[">(",17],["Items",18],[")",17]],"c":[["Items",1,"Sequence",488],["Items.Element",2,"BlockMarkup",0]],"g":[["Items",0,1]],"d":"Replace all inline child elements with a new sequence of inline elements."},{"p":["BlockContainer","replaceChildrenInRange(_:with:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["replaceChildrenInRange",7],["<",17],["Items",0],[">(",17],["_",1],[" ",17],["range",2],[": ",17],["Range",18,572],["<",17],["Int",18,533],[">, ",17],["with",1],[" ",17],["incomingItems",2],[": ",17],["Items",18],[") ",17],["where",12],[" ",17],["Items",18],[" : ",17],["Sequence",18,488],[", ",17],["Items",18],[".",17],["Element",18],[" == ",17],["BlockMarkup",18,0]],"s":[["func",12],[" ",17],["replaceChildrenInRange",7],["<",17],["Items",0],[">(",17],["Range",18],["<",17],["Int",18],[">, ",17],["with",1],[": ",17],["Items",18],[")",17]],"c":[["Items",1,"Sequence",488],["Items.Element",2,"BlockMarkup",0]],"g":[["Items",0,1]],"d":"Replace child inline elements in a range with a new sequence of elements."},{"p":["BlockDirective","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["MarkupChildren","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["MarkupChildren",18,40],[".",17],["Iterator",18,41]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["MarkupChildren",18],[".",17],["Iterator",18]],"o":492},{"p":["MarkupChildren","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Markup",18,14],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Markup",18],["?",17]],"o":575},{"p":["MarkupChildren","reversed()"],"f":[["func",12],[" ",17],["reversed",7],["() -> ",17],["ReversedMarkupChildren",18,53]],"s":[["func",12],[" ",17],["reversed",7],["() -> ",17],["ReversedMarkupChildren",18]],"d":"A reversed view of the element's children."},{"p":["MarkupRewriter","visitImage(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitImage",7],["(",17],["_",1],[" ",17],["image",2],[": ",17],["Image",18,58],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitImage",7],["(",17],["Image",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":284},{"p":["MarkupRewriter","visitStrong(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitStrong",7],["(",17],["_",1],[" ",17],["strong",2],[": ",17],["Strong",18,64],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitStrong",7],["(",17],["Strong",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":286},{"p":["MarkupRewriter","defaultVisit(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["defaultVisit",7],["(",17],["_",1],[" ",17],["markup",2],[": ",17],["Markup",18,14],[") -> ",17],["Markup",18,14],["?",17]],"s":[["func",12],[" ",17],["defaultVisit",7],["(",17],["Markup",18],[") -> ",17],["Markup",18],["?",17]],"o":287},{"p":["MarkupRewriter","visitHeading(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitHeading",7],["(",17],["_",1],[" ",17],["heading",2],[": ",17],["Heading",18,65],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitHeading",7],["(",17],["Heading",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":288},{"p":["MarkupRewriter","visitDocument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitDocument",7],["(",17],["_",1],[" ",17],["document",2],[": ",17],["Document",18,66],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitDocument",7],["(",17],["Document",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":289},{"p":["MarkupRewriter","visitEmphasis(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitEmphasis",7],["(",17],["_",1],[" ",17],["emphasis",2],[": ",17],["Emphasis",18,67],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitEmphasis",7],["(",17],["Emphasis",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":290},{"p":["MarkupRewriter","visitListItem(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitListItem",7],["(",17],["_",1],[" ",17],["listItem",2],[": ",17],["ListItem",18,68],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitListItem",7],["(",17],["ListItem",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":291},{"p":["MarkupRewriter","visitCodeBlock(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitCodeBlock",7],["(",17],["_",1],[" ",17],["codeBlock",2],[": ",17],["CodeBlock",18,69],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitCodeBlock",7],["(",17],["CodeBlock",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":293},{"p":["MarkupRewriter","visitHTMLBlock(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitHTMLBlock",7],["(",17],["_",1],[" ",17],["html",2],[": ",17],["HTMLBlock",18,70],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitHTMLBlock",7],["(",17],["HTMLBlock",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":294},{"p":["MarkupRewriter","visitLineBreak(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitLineBreak",7],["(",17],["_",1],[" ",17],["lineBreak",2],[": ",17],["LineBreak",18,71],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitLineBreak",7],["(",17],["LineBreak",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":295},{"p":["MarkupRewriter","visitParagraph(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitParagraph",7],["(",17],["_",1],[" ",17],["paragraph",2],[": ",17],["Paragraph",18,72],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitParagraph",7],["(",17],["Paragraph",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":296},{"p":["MarkupRewriter","visitSoftBreak(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitSoftBreak",7],["(",17],["_",1],[" ",17],["softBreak",2],[": ",17],["SoftBreak",18,73],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitSoftBreak",7],["(",17],["SoftBreak",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":297},{"p":["MarkupRewriter","visitBlockQuote(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitBlockQuote",7],["(",17],["_",1],[" ",17],["blockQuote",2],[": ",17],["BlockQuote",18,27],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitBlockQuote",7],["(",17],["BlockQuote",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":301},{"p":["MarkupRewriter","visitInlineCode(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitInlineCode",7],["(",17],["_",1],[" ",17],["inlineCode",2],[": ",17],["InlineCode",18,28],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitInlineCode",7],["(",17],["InlineCode",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":302},{"p":["MarkupRewriter","visitInlineHTML(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitInlineHTML",7],["(",17],["_",1],[" ",17],["inlineHTML",2],[": ",17],["InlineHTML",18,29],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitInlineHTML",7],["(",17],["InlineHTML",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":303},{"p":["MarkupRewriter","visitCustomBlock(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitCustomBlock",7],["(",17],["_",1],[" ",17],["customBlock",2],[": ",17],["CustomBlock",18,31],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitCustomBlock",7],["(",17],["CustomBlock",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":305},{"p":["MarkupRewriter","visitOrderedList(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitOrderedList",7],["(",17],["_",1],[" ",17],["orderedList",2],[": ",17],["OrderedList",18,32],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitOrderedList",7],["(",17],["OrderedList",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":306},{"p":["MarkupRewriter","visitCustomInline(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitCustomInline",7],["(",17],["_",1],[" ",17],["customInline",2],[": ",17],["CustomInline",18,34],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitCustomInline",7],["(",17],["CustomInline",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":307},{"p":["MarkupRewriter","visitThematicBreak(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitThematicBreak",7],["(",17],["_",1],[" ",17],["thematicBreak",2],[": ",17],["ThematicBreak",18,37],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitThematicBreak",7],["(",17],["ThematicBreak",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":309},{"p":["MarkupRewriter","visitUnorderedList(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitUnorderedList",7],["(",17],["_",1],[" ",17],["unorderedList",2],[": ",17],["UnorderedList",18,38],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitUnorderedList",7],["(",17],["UnorderedList",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":310},{"p":["MarkupRewriter","visitBlockDirective(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitBlockDirective",7],["(",17],["_",1],[" ",17],["blockDirective",2],[": ",17],["BlockDirective",18,39],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitBlockDirective",7],["(",17],["BlockDirective",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":311},{"p":["MarkupRewriter","visitLink(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitLink",7],["(",17],["_",1],[" ",17],["link",2],[": ",17],["Link",18,55],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitLink",7],["(",17],["Link",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":313},{"p":["MarkupRewriter","visitText(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitText",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["Text",18,56],[") -> ",17],["Self",18],[".",17],["Result",18]],"s":[["func",12],[" ",17],["visitText",7],["(",17],["Text",18],[") -> ",17],["Self",18],[".",17],["Result",18]],"o":314},{"p":["InlineContainer","setInlineChildren(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["setInlineChildren",7],["<",17],["Items",0],[">(",17],["_",1],[" ",17],["newChildren",2],[": ",17],["Items",18],[") ",17],["where",12],[" ",17],["Items",18],[" : ",17],["Sequence",18,488],[", ",17],["Items",18],[".",17],["Element",18],[" == ",17],["InlineMarkup",18,1]],"s":[["func",12],[" ",17],["setInlineChildren",7],["<",17],["Items",0],[">(",17],["Items",18],[")",17]],"c":[["Items",1,"Sequence",488],["Items.Element",2,"InlineMarkup",1]],"g":[["Items",0,1]],"d":"Replace all inline child elements with a new sequence of inline elements."},{"p":["InlineContainer","replaceChildrenInRange(_:with:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["replaceChildrenInRange",7],["<",17],["Items",0],[">(",17],["_",1],[" ",17],["range",2],[": ",17],["Range",18,572],["<",17],["Int",18,533],[">, ",17],["with",1],[" ",17],["incomingItems",2],[": ",17],["Items",18],[") ",17],["where",12],[" ",17],["Items",18],[" : ",17],["Sequence",18,488],[", ",17],["Items",18],[".",17],["Element",18],[" == ",17],["InlineMarkup",18,1]],"s":[["func",12],[" ",17],["replaceChildrenInRange",7],["<",17],["Items",0],[">(",17],["Range",18],["<",17],["Int",18],[">, ",17],["with",1],[": ",17],["Items",18],[")",17]],"c":[["Items",1,"Sequence",488],["Items.Element",2,"InlineMarkup",1]],"g":[["Items",0,1]],"d":"Replace child inline elements in a range with a new sequence of elements."},{"p":["MarkupFormatter","visitImage(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitImage",7],["(",17],["_",1],[" ",17],["image",2],[": ",17],["Image",18,58],[")",17]],"s":[["func",12],[" ",17],["visitImage",7],["(",17],["Image",18],[")",17]],"o":284},{"p":["MarkupFormatter","visitTable(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTable",7],["(",17],["_",1],[" ",17],["table",2],[": ",17],["Table",18,59],[")",17]],"s":[["func",12],[" ",17],["visitTable",7],["(",17],["Table",18],[")",17]],"d":"Format a table as an indivisible unit.\n\nBecause tables likely print multiple cells of inline content next\nto each other on the same line, we're breaking with the pattern\na little bit here and not descending into the substructure of a table\nautomatically in this ``MarkupFormatter``. We'll handle all of the\ncells right here.","o":285},{"p":["MarkupFormatter","visitStrong(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitStrong",7],["(",17],["_",1],[" ",17],["strong",2],[": ",17],["Strong",18,64],[")",17]],"s":[["func",12],[" ",17],["visitStrong",7],["(",17],["Strong",18],[")",17]],"o":286},{"p":["MarkupFormatter","defaultVisit(_:)"],"f":[["func",12],[" ",17],["defaultVisit",7],["(",17],["_",1],[" ",17],["markup",2],[": ",17],["Markup",18,14],[")",17]],"s":[["func",12],[" ",17],["defaultVisit",7],["(",17],["Markup",18],[")",17]],"o":287},{"p":["MarkupFormatter","visitHeading(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitHeading",7],["(",17],["_",1],[" ",17],["heading",2],[": ",17],["Heading",18,65],[")",17]],"s":[["func",12],[" ",17],["visitHeading",7],["(",17],["Heading",18],[")",17]],"o":288},{"p":["MarkupFormatter","visitDocument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitDocument",7],["(",17],["_",1],[" ",17],["document",2],[": ",17],["Document",18,66],[")",17]],"s":[["func",12],[" ",17],["visitDocument",7],["(",17],["Document",18],[")",17]],"o":289},{"p":["MarkupFormatter","visitEmphasis(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitEmphasis",7],["(",17],["_",1],[" ",17],["emphasis",2],[": ",17],["Emphasis",18,67],[")",17]],"s":[["func",12],[" ",17],["visitEmphasis",7],["(",17],["Emphasis",18],[")",17]],"o":290},{"p":["MarkupFormatter","visitListItem(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitListItem",7],["(",17],["_",1],[" ",17],["listItem",2],[": ",17],["ListItem",18,68],[")",17]],"s":[["func",12],[" ",17],["visitListItem",7],["(",17],["ListItem",18],[")",17]],"o":291},{"p":["MarkupFormatter","visitTableRow(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTableRow",7],["(",17],["_",1],[" ",17],["tableRow",2],[": ",17],["Table",18,59],[".",17],["Row",18,60],[")",17]],"s":[["func",12],[" ",17],["visitTableRow",7],["(",17],["Table",18],[".",17],["Row",18],[")",17]],"d":"See ``MarkupFormatter/visitTable(_:)-61rlp`` for more information.","o":292},{"p":["MarkupFormatter","visitCodeBlock(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitCodeBlock",7],["(",17],["_",1],[" ",17],["codeBlock",2],[": ",17],["CodeBlock",18,69],[")",17]],"s":[["func",12],[" ",17],["visitCodeBlock",7],["(",17],["CodeBlock",18],[")",17]],"o":293},{"p":["MarkupFormatter","visitHTMLBlock(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitHTMLBlock",7],["(",17],["_",1],[" ",17],["html",2],[": ",17],["HTMLBlock",18,70],[")",17]],"s":[["func",12],[" ",17],["visitHTMLBlock",7],["(",17],["HTMLBlock",18],[")",17]],"o":294},{"p":["MarkupFormatter","visitLineBreak(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitLineBreak",7],["(",17],["_",1],[" ",17],["lineBreak",2],[": ",17],["LineBreak",18,71],[")",17]],"s":[["func",12],[" ",17],["visitLineBreak",7],["(",17],["LineBreak",18],[")",17]],"o":295},{"p":["MarkupFormatter","visitParagraph(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitParagraph",7],["(",17],["_",1],[" ",17],["paragraph",2],[": ",17],["Paragraph",18,72],[")",17]],"s":[["func",12],[" ",17],["visitParagraph",7],["(",17],["Paragraph",18],[")",17]],"o":296},{"p":["MarkupFormatter","visitSoftBreak(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitSoftBreak",7],["(",17],["_",1],[" ",17],["softBreak",2],[": ",17],["SoftBreak",18,73],[")",17]],"s":[["func",12],[" ",17],["visitSoftBreak",7],["(",17],["SoftBreak",18],[")",17]],"o":297},{"p":["MarkupFormatter","visitTableBody(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTableBody",7],["(",17],["_",1],[" ",17],["tableBody",2],[": ",17],["Table",18,59],[".",17],["Body",18,61],[")",17]],"s":[["func",12],[" ",17],["visitTableBody",7],["(",17],["Table",18],[".",17],["Body",18],[")",17]],"d":"See ``MarkupFormatter/visitTable(_:)-61rlp`` for more information.","o":298},{"p":["MarkupFormatter","visitTableCell(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTableCell",7],["(",17],["_",1],[" ",17],["tableCell",2],[": ",17],["Table",18,59],[".",17],["Cell",18,62],[")",17]],"s":[["func",12],[" ",17],["visitTableCell",7],["(",17],["Table",18],[".",17],["Cell",18],[")",17]],"d":"See ``MarkupFormatter/visitTable(_:)-61rlp`` for more information.","o":299},{"p":["MarkupFormatter","visitTableHead(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitTableHead",7],["(",17],["_",1],[" ",17],["tableHead",2],[": ",17],["Table",18,59],[".",17],["Head",18,63],[")",17]],"s":[["func",12],[" ",17],["visitTableHead",7],["(",17],["Table",18],[".",17],["Head",18],[")",17]],"d":"See ``MarkupFormatter/visitTable(_:)-61rlp`` for more information.","o":300},{"p":["MarkupFormatter","visitBlockQuote(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitBlockQuote",7],["(",17],["_",1],[" ",17],["blockQuote",2],[": ",17],["BlockQuote",18,27],[")",17]],"s":[["func",12],[" ",17],["visitBlockQuote",7],["(",17],["BlockQuote",18],[")",17]],"o":301},{"p":["MarkupFormatter","visitInlineCode(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitInlineCode",7],["(",17],["_",1],[" ",17],["inlineCode",2],[": ",17],["InlineCode",18,28],[")",17]],"s":[["func",12],[" ",17],["visitInlineCode",7],["(",17],["InlineCode",18],[")",17]],"o":302},{"p":["MarkupFormatter","visitInlineHTML(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitInlineHTML",7],["(",17],["_",1],[" ",17],["inlineHTML",2],[": ",17],["InlineHTML",18,29],[")",17]],"s":[["func",12],[" ",17],["visitInlineHTML",7],["(",17],["InlineHTML",18],[")",17]],"o":303},{"p":["MarkupFormatter","visitSymbolLink(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitSymbolLink",7],["(",17],["_",1],[" ",17],["symbolLink",2],[": ",17],["SymbolLink",18,30],[")",17]],"s":[["func",12],[" ",17],["visitSymbolLink",7],["(",17],["SymbolLink",18],[")",17]],"o":304},{"p":["MarkupFormatter","visitOrderedList(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitOrderedList",7],["(",17],["_",1],[" ",17],["orderedList",2],[": ",17],["OrderedList",18,32],[")",17]],"s":[["func",12],[" ",17],["visitOrderedList",7],["(",17],["OrderedList",18],[")",17]],"o":306},{"p":["MarkupFormatter","visitStrikethrough(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitStrikethrough",7],["(",17],["_",1],[" ",17],["strikethrough",2],[": ",17],["Strikethrough",18,36],[")",17]],"s":[["func",12],[" ",17],["visitStrikethrough",7],["(",17],["Strikethrough",18],[")",17]],"o":308},{"p":["MarkupFormatter","visitThematicBreak(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitThematicBreak",7],["(",17],["_",1],[" ",17],["thematicBreak",2],[": ",17],["ThematicBreak",18,37],[")",17]],"s":[["func",12],[" ",17],["visitThematicBreak",7],["(",17],["ThematicBreak",18],[")",17]],"o":309},{"p":["MarkupFormatter","visitUnorderedList(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitUnorderedList",7],["(",17],["_",1],[" ",17],["unorderedList",2],[": ",17],["UnorderedList",18,38],[")",17]],"s":[["func",12],[" ",17],["visitUnorderedList",7],["(",17],["UnorderedList",18],[")",17]],"o":310},{"p":["MarkupFormatter","visitBlockDirective(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitBlockDirective",7],["(",17],["_",1],[" ",17],["blockDirective",2],[": ",17],["BlockDirective",18,39],[")",17]],"s":[["func",12],[" ",17],["visitBlockDirective",7],["(",17],["BlockDirective",18],[")",17]],"o":311},{"p":["MarkupFormatter","visitLink(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitLink",7],["(",17],["_",1],[" ",17],["link",2],[": ",17],["Link",18,55],[")",17]],"s":[["func",12],[" ",17],["visitLink",7],["(",17],["Link",18],[")",17]],"o":313},{"p":["MarkupFormatter","visitText(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["visitText",7],["(",17],["_",1],[" ",17],["text",2],[": ",17],["Text",18,56],[")",17]],"s":[["func",12],[" ",17],["visitText",7],["(",17],["Text",18],[")",17]],"o":314},{"p":["ListItemContainer","setListItems(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["setListItems",7],["<",17],["Items",0],[">(",17],["_",1],[" ",17],["newItems",2],[": ",17],["Items",18],[") ",17],["where",12],[" ",17],["Items",18],[" : ",17],["Sequence",18,488],[", ",17],["Items",18],[".",17],["Element",18],[" == ",17],["ListItem",18,68]],"s":[["func",12],[" ",17],["setListItems",7],["<",17],["Items",0],[">(",17],["Items",18],[")",17]],"c":[["Items",1,"Sequence",488],["Items.Element",2,"ListItem",68]],"g":[["Items",0,1]],"d":"Replace all list items with a sequence of items."},{"p":["ListItemContainer","appendItem(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["appendItem",7],["(",17],["_",1],[" ",17],["item",2],[": ",17],["ListItem",18,68],[")",17]],"s":[["func",12],[" ",17],["appendItem",7],["(",17],["ListItem",18],[")",17]],"d":"Append an item to the list."},{"p":["ListItemContainer","replaceItemsInRange(_:with:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["replaceItemsInRange",7],["<",17],["Items",0],[">(",17],["_",1],[" ",17],["range",2],[": ",17],["Range",18,572],["<",17],["Int",18,533],[">, ",17],["with",1],[" ",17],["incomingItems",2],[": ",17],["Items",18],[") ",17],["where",12],[" ",17],["Items",18],[" : ",17],["Sequence",18,488],[", ",17],["Items",18],[".",17],["Element",18],[" == ",17],["ListItem",18,68]],"s":[["func",12],[" ",17],["replaceItemsInRange",7],["<",17],["Items",0],[">(",17],["Range",18],["<",17],["Int",18],[">, ",17],["with",1],[": ",17],["Items",18],[")",17]],"c":[["Items",1,"Sequence",488],["Items.Element",2,"ListItem",68]],"g":[["Items",0,1]],"d":"Replace list items in a range with a sequence of items."},{"p":["TableCellContainer","appendCell(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["appendCell",7],["(",17],["_",1],[" ",17],["cell",2],[": ",17],["Table",18,59],[".",17],["Cell",18,62],[")",17]],"s":[["func",12],[" ",17],["appendCell",7],["(",17],["Table",18],[".",17],["Cell",18],[")",17]],"d":"Append a cell to the row.\n\n- parameter cell: The cell to append to the row."},{"p":["TableCellContainer","replaceCellsInRange(_:with:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["replaceCellsInRange",7],["<",17],["Cells",0],[">(",17],["_",1],[" ",17],["range",2],[": ",17],["Range",18,572],["<",17],["Int",18,533],[">, ",17],["with",1],[" ",17],["incomingCells",2],[": ",17],["Cells",18],[") ",17],["where",12],[" ",17],["Cells",18],[" : ",17],["Sequence",18,488],[", ",17],["Cells",18],[".",17],["Element",18],[" == ",17],["Table",18,59],[".",17],["Cell",18,62]],"s":[["func",12],[" ",17],["replaceCellsInRange",7],["<",17],["Cells",0],[">(",17],["Range",18],["<",17],["Int",18],[">, ",17],["with",1],[": ",17],["Cells",18],[")",17]],"c":[["Cells",1,"Sequence",488],["Cells.Element",2,"Table.Cell",62]],"g":[["Cells",0,1]],"d":"Replace cells in a range with a sequence of cells."},{"p":["TableCellContainer","setCells(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["setCells",7],["<",17],["Cells",0],[">(",17],["_",1],[" ",17],["newCells",2],[": ",17],["Cells",18],[") ",17],["where",12],[" ",17],["Cells",18],[" : ",17],["Sequence",18,488],[", ",17],["Cells",18],[".",17],["Element",18],[" == ",17],["Table",18,59],[".",17],["Cell",18,62]],"s":[["func",12],[" ",17],["setCells",7],["<",17],["Cells",0],[">(",17],["Cells",18],[")",17]],"c":[["Cells",1,"Sequence",488],["Cells.Element",2,"Table.Cell",62]],"g":[["Cells",0,1]],"d":"Replace all cells with a sequence of cells.\n\n- parameter newCells: A sequence of ``Table/Cell`` elements that will replace all of the cells in this row."},{"p":["DirectiveArgumentText","LineSegment","parseNameValueArguments(parseErrors:)"],"f":[["func",12],[" ",17],["parseNameValueArguments",7],["(",17],["parseErrors",1],[": ",17],["inout",12],[" [",17],["DirectiveArgumentText",18,51],[".",17],["ParseError",18,23],["]) -> [",17],["DirectiveArgument",18,47],["]",17]],"s":[["func",12],[" ",17],["parseNameValueArguments",7],["(",17],["parseErrors",1],[": ",17],["inout",12],[" [",17],["DirectiveArgumentText",18],[".",17],["ParseError",18],["]) -> [",17],["DirectiveArgument",18],["]",17]],"d":"Parse the line segment as name-value argument pairs separated by commas.\n\n```\narguments -> first-argument name-value-arguments-rest\nfirst-argument -> value-only-argument | name-value-argument\nvalue-only-argument -> literal\nname-value-argument -> literal : literal\nname-value-arguments -> name-value-argument name-value-arguments-rest\nname-value-arguments-rest -> , name-value-arguments | ε\n```\n\nNote the following aspects of this parsing function.\n\n- An argument-name pair is only recognized within a single line or line segment;\n  that is, an argument cannot span multiple lines.\n- A comma is expected between name-value pairs.\n- The first argument can be unnamed. An unnamed argument will have an empty ``DirectiveArgument/name`` with no ``DirectiveArgument/nameRange``.\n\n- Parameter parseErrors: an array to update with any errors encountered while parsing\n- Returns: an array of successfully parsed ``DirectiveArgument`` values."},{"p":["DirectiveArgumentText","parseNameValueArguments(parseErrors:)"],"f":[["func",12],[" ",17],["parseNameValueArguments",7],["(",17],["parseErrors",1],[": ",17],["inout",12],[" [",17],["DirectiveArgumentText",18,51],[".",17],["ParseError",18,23],["]) -> [",17],["DirectiveArgument",18,47],["]",17]],"s":[["func",12],[" ",17],["parseNameValueArguments",7],["(",17],["parseErrors",1],[": ",17],["inout",12],[" [",17],["DirectiveArgumentText",18],[".",17],["ParseError",18],["]) -> [",17],["DirectiveArgument",18],["]",17]],"d":"Parse the line segments as name-value argument pairs separated by commas.\n\n```\narguments -> first-argument name-value-arguments-rest\nfirst-argument -> value-only-argument | name-value-argument\nvalue-only-argument -> literal\nname-value-argument -> literal : literal\nname-value-arguments -> name-value-argument name-value-arguments-rest\nname-value-arguments-rest -> , name-value-arguments | ε\n```\n\nNote the following aspects of this parsing function.\n\n- An argument-name pair is only recognized within a single line or line segment;\n  that is, an argument cannot span multiple lines.\n- A comma is expected between name-value pairs.\n- The first argument can be unnamed. An unnamed argument will have an empty ``DirectiveArgument/name`` with no ``DirectiveArgument/nameRange``.\n\n- Parameter parseErrors: an array to collect errors while parsing arguments.\n- Returns: an array of successfully parsed ``DirectiveArgument`` values."},{"p":["DirectiveArgumentText","parseNameValueArguments()"],"f":[["func",12],[" ",17],["parseNameValueArguments",7],["() -> [",17],["DirectiveArgument",18,47],["]",17]],"s":[["func",12],[" ",17],["parseNameValueArguments",7],["() -> [",17],["DirectiveArgument",18],["]",17]],"d":"Parse the line segments as name-value argument pairs separated by commas.\n\n```\narguments -> first-argument name-value-arguments-rest\nfirst-argument -> value-only-argument | name-value-argument\nvalue-only-argument -> literal\nname-value-argument -> literal : literal\nname-value-arguments -> name-value-argument name-value-arguments-rest\nname-value-arguments-rest -> , name-value-arguments | ε\n```\n\nNote the following aspects of this parsing function.\n\n- An argument-name pair is only recognized within a single line or line segment;\n  that is, an argument cannot span multiple lines.\n- A comma is expected between name-value pairs.\n- The first argument can be unnamed. An unnamed argument will have an empty ``DirectiveArgument/name`` with no ``DirectiveArgument/nameRange``.\n\n- Returns: an array of successfully parsed ``DirectiveArgument`` values.\n\nThis overload discards parse errors.\n\n- SeeAlso: ``parseNameValueArguments(parseErrors:)``"},{"p":["ReversedMarkupChildren","makeIterator()"],"f":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ReversedMarkupChildren",18,53],[".",17],["Iterator",18,54]],"s":[["func",12],[" ",17],["makeIterator",7],["() -> ",17],["ReversedMarkupChildren",18],[".",17],["Iterator",18]],"o":492},{"p":["ReversedMarkupChildren","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() -> ",17],["Markup",18,14],["?",17]],"s":[["func",12],[" ",17],["next",7],["() -> ",17],["Markup",18],["?",17]],"o":575},{"p":["Link","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["Text","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["Image","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["Table","Row","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["Table","Body","replaceRowsInRange(_:with:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["replaceRowsInRange",7],["<",17],["Rows",0],[">(",17],["_",1],[" ",17],["range",2],[": ",17],["Range",18,572],["<",17],["Int",18,533],[">, ",17],["with",1],[" ",17],["incomingRows",2],[": ",17],["Rows",18],[") ",17],["where",12],[" ",17],["Rows",18],[" : ",17],["Sequence",18,488],[", ",17],["Rows",18],[".",17],["Element",18],[" == ",17],["Table",18,59],[".",17],["Row",18,60]],"s":[["func",12],[" ",17],["replaceRowsInRange",7],["<",17],["Rows",0],[">(",17],["Range",18],["<",17],["Int",18],[">, ",17],["with",1],[": ",17],["Rows",18],[")",17]],"c":[["Rows",1,"Sequence",488],["Rows.Element",2,"Table.Row",60]],"g":[["Rows",0,0]],"d":"Replace list items in a range with a sequence of items."},{"p":["Table","Body","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["Table","Body","setRows(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["setRows",7],["<",17],["Rows",0],[">(",17],["_",1],[" ",17],["newRows",2],[": ",17],["Rows",18],[") ",17],["where",12],[" ",17],["Rows",18],[" : ",17],["Sequence",18,488],[", ",17],["Rows",18],[".",17],["Element",18],[" == ",17],["Table",18,59],[".",17],["Row",18,60]],"s":[["func",12],[" ",17],["setRows",7],["<",17],["Rows",0],[">(",17],["Rows",18],[")",17]],"c":[["Rows",1,"Sequence",488],["Rows.Element",2,"Table.Row",60]],"g":[["Rows",0,0]],"d":"Replace all list items with a sequence of items."},{"p":["Table","Body","appendRow(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["appendRow",7],["(",17],["_",1],[" ",17],["row",2],[": ",17],["Table",18,59],[".",17],["Row",18,60],[")",17]],"s":[["func",12],[" ",17],["appendRow",7],["(",17],["Table",18],[".",17],["Row",18],[")",17]],"d":"Append a row to the list."},{"p":["Table","Cell","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["Table","Head","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["Table","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["Markup","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,1]],"d":"Accept a `MarkupVisitor` and call the specific visitation method for this element.\n\n- parameter visitor: The `MarkupVisitor` visiting the element.\n- returns: The result of the visit."},{"p":["Markup","isIdentical(to:)"],"f":[["func",12],[" ",17],["isIdentical",7],["(",17],["to",1],[" ",17],["other",2],[": ",17],["Markup",18,14],[") -> ",17],["Bool",18,532]],"s":[["func",12],[" ",17],["isIdentical",7],["(",17],["to",1],[": ",17],["Markup",18],[") -> ",17],["Bool",18]],"d":"Returns `true` if this element is identical to another, comparing internal unique identifiers.\n\n- Note: Use this to bypass checking for structural equality.\n- Complexity: `O(1)`"},{"p":["Markup","debugDescription(options:)"],"f":[["func",12],[" ",17],["debugDescription",7],["(",17],["options",1],[": ",17],["MarkupDumpOptions",18,48],[" = []) -> ",17],["String",18,486]],"s":[["func",12],[" ",17],["debugDescription",7],["(",17],["options",1],[": ",17],["MarkupDumpOptions",18],[") -> ",17],["String",18]],"d":"Print a debug representation of the tree.\n- Parameter options: options to use while printing.\n- Returns: a description illustrating the hierarchy and contents of each element of the tree."},{"p":["Markup","hasSameStructure(as:)"],"f":[["func",12],[" ",17],["hasSameStructure",7],["(",17],["as",1],[" ",17],["other",2],[": ",17],["Markup",18,14],[") -> ",17],["Bool",18,532]],"s":[["func",12],[" ",17],["hasSameStructure",7],["(",17],["as",1],[": ",17],["Markup",18],[") -> ",17],["Bool",18]],"d":"Returns true if this element has the same tree structure underneath it as another element.\n\n- Complexity: `O(subtreeCount)`"},{"p":["Markup","withUncheckedChildren(_:)"],"f":[["func",12],[" ",17],["withUncheckedChildren",7],["<",17],["Children",0],[">(",17],["_",1],[" ",17],["newChildren",2],[": ",17],["Children",18],[") -> ",17],["Markup",18,14],[" ",17],["where",12],[" ",17],["Children",18],[" : ",17],["Sequence",18,488],[", ",17],["Children",18],[".",17],["Element",18],[" == ",17],["Markup",18,14]],"s":[["func",12],[" ",17],["withUncheckedChildren",7],["<",17],["Children",0],[">(",17],["Children",18],[") -> ",17],["Markup",18]],"c":[["Children",1,"Sequence",488]],"g":[["Children",0,1]],"d":"Returns a copy of this element with the given children instead.\n\n- parameter newChildren: A sequence of children to use instead of the current children.\n- warning: This does not check for compatibility. This API should only be used when the type of the children are already known to be the right kind."},{"p":["Markup","child(at:)"],"f":[["func",12],[" ",17],["child",7],["(",17],["at",1],[" ",17],["position",2],[": ",17],["Int",18,533],[") -> ",17],["Markup",18,14],["?",17]],"s":[["func",12],[" ",17],["child",7],["(",17],["at",1],[": ",17],["Int",18],[") -> ",17],["Markup",18],["?",17]],"d":"Returns the child at the given position if it is within the bounds of `children.indices`.\n\n- Complexity: `O(childCount)`"},{"p":["Markup","child(through:)"],"f":[["func",12],[" ",17],["child",7],["(",17],["through",1],[" ",17],["path",2],[": ",17],["TypedChildIndexPath",18,49],[") -> ",17],["Markup",18,14],["?",17]],"s":[["func",12],[" ",17],["child",7],["(",17],["through",1],[": ",17],["TypedChildIndexPath",18],[") -> ",17],["Markup",18],["?",17]],"d":"Traverse this markup tree by descending into the child at the index of each path element, returning `nil` if there is no child at that index or if the expected type for that path element doesn't match.\n\nFor example, given the following tree:\n```\nDocument\n └─ Paragraph\n   ├─ Text \"This is \"\n   ├─ Emphasis\n   │  └─ Text \"emphasized\"\n   └─ Text \".\"\n```\n\nTo get the `Text \"emphasized\"` element, you could provide the following path:\n\n```swift\n[\n  (0, Paragraph.self), // Document's child 0, a Paragraph element\n  (1, Emphasis.self),  // Paragraph's child 1, an Emphasis element\n  (0, Text.self),      // Emphasis's child 0, the `Text \"emphasized\"` element.\n]\n```\n\nUsing a `TypedChildIndexPath` without any expected types:\n```swift\n[\n  (0, nil),\n  (1, nil),\n  (0, nil),\n]\n```\nwould also provide a match.\n\nAn example of a path that wouldn't match the `Text \"emphasized\"` element would be:\n\n```swift\n[\n  (0, Paragraph.self),\n  // The search would fail here because this element\n  // isn't `Strong` but `Emphasized`.\n  (1, Strong.self),\n  (0, Text.self),\n]\n```"},{"p":["Markup","child(through:)"],"f":[["func",12],[" ",17],["child",7],["(",17],["through",1],[" ",17],["path",2],[": ",17],["ChildIndexPath",18,452],[".",17],["Element",18,531],["...) -> ",17],["Markup",18,14],["?",17]],"s":[["func",12],[" ",17],["child",7],["(",17],["through",1],[": ",17],["ChildIndexPath",18],[".",17],["Element",18],["...) -> ",17],["Markup",18],["?",17]],"d":"Traverse this markup tree by descending into the child at the index of each path element, returning `nil` if there is no child at that index.\n\nFor example, given the following tree:\n```\nDocument\n └─ Paragraph\n   ├─ Text \"This is \"\n   ├─ Emphasis\n   │  └─ Text \"emphasized\"\n   └─ Text \".\"\n```\n\nTo get the `Text \"emphasized\"` element, you would provide the following path:\n\n```swift\n[\n  0, // Document's child 0, a Paragraph element\n  1, // Paragraph's child 1, an Emphasis element\n  0, // Emphasis's child 0, the `Text \"emphasized\"` element.\n]\n```\n\nThis would be equivalent to using the `TypedChildIndexPath` without any expected types:\n```swift\n[\n  (0, nil),\n  (1, nil),\n  (0, nil),\n]\n```"},{"p":["Markup","child(through:)"],"f":[["func",12],[" ",17],["child",7],["<",17],["S",0],[">(",17],["through",1],[" ",17],["path",2],[": ",17],["S",18],[") -> ",17],["Markup",18,14],["? ",17],["where",12],[" ",17],["S",18],[" : ",17],["Sequence",18,488],[", ",17],["S",18],[".",17],["Element",18],[" == ",17],["Int",18,533]],"s":[["func",12],[" ",17],["child",7],["<",17],["S",0],[">(",17],["through",1],[": ",17],["S",18],[") -> ",17],["Markup",18],["?",17]],"c":[["S",1,"Sequence",488],["S.Element",2,"Int",533]],"g":[["S",0,1]],"d":"Traverse this markup tree by descending into the child at the index of each path element, returning `nil` if there is no child at that index.\n\nFor example, given the following tree:\n```\nDocument\n └─ Paragraph\n   ├─ Text \"This is \"\n   ├─ Emphasis\n   │  └─ Text \"emphasized\"\n   └─ Text \".\"\n```\n\nTo get the `Text \"emphasized\"` element, you would provide the following path:\n\n```swift\n[\n  0, // Document's child 0, a Paragraph element\n  1, // Paragraph's child 1, an Emphasis element\n  0, // Emphasis's child 0, the `Text \"emphasized\"` element.\n]\n```\n\nThis would be equivalent to using the `TypedChildIndexPath` without any expected types:\n```swift\n[\n  (0, nil),\n  (1, nil),\n  (0, nil),\n]\n```"},{"p":["Markup","format(options:)"],"f":[["func",12],[" ",17],["format",7],["(",17],["options",1],[": ",17],["MarkupFormatter",18,43],[".",17],["Options",18,44],[" = .default) -> ",17],["String",18,486]],"s":[["func",12],[" ",17],["format",7],["(",17],["options",1],[": ",17],["MarkupFormatter",18],[".",17],["Options",18],[") -> ",17],["String",18]],"d":"Print this element with the given formatting rules."},{"p":["Strong","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["Heading","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["Document","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["Emphasis","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["ListItem","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["CodeBlock","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["HTMLBlock","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["LineBreak","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["Paragraph","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["SoftBreak","accept(_:)"],"f":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["_",1],[" ",17],["visitor",2],[": ",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18],[" ",17],["where",12],[" ",17],["V",18],[" : ",17],["MarkupVisitor",18,4]],"s":[["func",12],[" ",17],["accept",7],["<",17],["V",0],[">(",17],["inout",12],[" ",17],["V",18],[") -> ",17],["V",18],[".",17],["Result",18]],"c":[["V",1,"MarkupVisitor",4]],"g":[["V",0,0]],"o":429},{"p":["SourceLocation","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["SourceLocation",18,42],[", ",17],["rhs",2],[": ",17],["SourceLocation",18,42],[") -> ",17],["Bool",18,532]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["SourceLocation",18],[", ",17],["SourceLocation",18],[") -> ",17],["Bool",18]],"o":474},{"p":["DirectiveArgumentText","LineSegment","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["DirectiveArgumentText",18,51],[".",17],["LineSegment",18,52],[", ",17],["rhs",2],[": ",17],["DirectiveArgumentText",18,51],[".",17],["LineSegment",18,52],[") -> ",17],["Bool",18,532]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["DirectiveArgumentText",18],[".",17],["LineSegment",18],[", ",17],["DirectiveArgumentText",18],[".",17],["LineSegment",18],[") -> ",17],["Bool",18]],"d":"Returns a Boolean value indicating whether two line segments are equal.\n- Parameter lhs: a line segment to compare\n- Parameter rhs: another line segment to compare\n- Returns: `true` if the two segments are equal.","o":484},{"p":["SourceRange"],"f":[["typealias",12],[" ",17],["SourceRange",7],[" = ",17],["Range",18,572],["<",17],["SourceLocation",18,42],[">",17]],"s":[["typealias",12],[" ",17],["SourceRange",7]],"d":"A range in a source file."},{"p":["ChildIndexPath"],"f":[["typealias",12],[" ",17],["ChildIndexPath",7],[" = [",17],["Int",18,533],["]",17]],"s":[["typealias",12],[" ",17],["ChildIndexPath",7]],"d":"An array of indexes for traversing deeply into a markup tree."},{"p":["TypedChildIndexPath","ArrayLiteralElement"],"f":[["typealias",12],[" ",17],["ArrayLiteralElement",7],[" = (",17],["Int",18,533],[", ",17],["Markup",18,14],[".Type?)",17]],"s":[["typealias",12],[" ",17],["ArrayLiteralElement",7]],"d":"A pair consisting of an expected index and optional expected type for a child element.\n\nThis type is a shorthand convenience when creating a ``TypedChildIndexPath`` from an array literal.","o":596},{"p":["Range","init(start:end:)"],"f":[["init",10],["(",17],["start",1],[": ",17],["Bound",18],[", ",17],["end",1],[": ",17],["Bound",18],[")",17]],"s":[["init",10],["(",17],["start",1],[": ",17],["Bound",18],[", ",17],["end",1],[": ",17],["Bound",18],[")",17]],"a":{"a":{"d":true,"m":"Use lowerBound..<upperBound initialization"}},"e":[["Bound",2,"SourceLocation",42]],"c":[["Bound",2,"SourceLocation",42]],"g":[["Bound",0,0]]},{"p":["Range","end"],"f":[["var",12],[" ",17],["end",7],[": ",17],["SourceLocation",18,42],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["end",7],[": ",17],["SourceLocation",18]],"a":{"a":{"d":true,"r":"upperBound"}},"e":[["Bound",2,"SourceLocation",42]]},{"p":["Range","start"],"f":[["var",12],[" ",17],["start",7],[": ",17],["SourceLocation",18,42],[" { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["start",7],[": ",17],["SourceLocation",18]],"a":{"a":{"d":true,"r":"lowerBound"}},"e":[["Bound",2,"SourceLocation",42]]},{"p":["Range","diagnosticDescription(includePath:)"],"f":[["func",12],[" ",17],["diagnosticDescription",7],["(",17],["includePath",1],[": ",17],["Bool",18,532],[" = true) -> ",17],["String",18,486]],"s":[["func",12],[" ",17],["diagnosticDescription",7],["(",17],["includePath",1],[": ",17],["Bool",18],[") -> ",17],["String",18]],"e":[["Bound",2,"SourceLocation",42]],"c":[["Bound",2,"SourceLocation",42]],"g":[["Bound",0,0]],"d":"A textual description for use in diagnostics."}],"edges":{"conformer":[0,14,[],1,13,[],1,14,[],2,4,[],3,14,[],5,0,[],5,14,[],6,4,[],7,13,[],7,14,[],8,0,[],8,14,[],9,14,[],9,594,[],10,0,[],10,5,[],10,14,[],11,7,[],11,13,[],11,14,[],12,1,[],12,13,[],12,14,[],13,14,[],16,459,[],16,483,[],16,526,[],16,589,[],17,459,[],17,483,[],17,526,[],17,589,[],18,459,[],18,483,[],18,526,[],18,589,[],20,459,[],20,483,[],20,526,[],20,589,[],21,459,[],21,483,[],21,526,[],21,589,[],22,459,[],22,483,[],22,526,[],22,589,[],23,483,[],24,459,[],24,483,[],24,526,[],24,589,[],25,459,[],25,483,[],26,459,[],26,483,[],27,0,[],27,5,[],27,10,[],27,14,[],28,1,[],28,12,[],28,13,[],28,14,[],29,1,[],29,3,[],29,12,[],29,13,[],29,14,[],30,1,[],30,13,[],30,14,[],31,0,[],31,5,[],31,10,[],31,14,[],32,0,[],32,8,[],32,14,[],33,591,[],33,597,[],34,1,[],34,12,[],34,13,[],34,14,[],35,483,[],35,526,[],35,578,[],35,594,[],35,599,[],36,1,[],36,7,[],36,11,[],36,12,[],36,13,[],36,14,[],37,0,[],37,14,[],38,0,[],38,8,[],38,14,[],39,0,[],39,5,[],39,14,[],40,488,[],41,574,[],42,459,[],42,473,[],42,483,[],42,591,[],43,2,[],43,4,[],47,483,[],48,483,[],48,526,[],48,578,[],48,594,[],48,599,[],49,461,[],49,488,[],49,534,[],49,537,[],49,594,[],51,483,[],52,483,[],53,488,[],54,574,[],55,1,[],55,7,[],55,13,[],55,14,[],56,1,[],56,3,[],56,12,[],56,13,[],56,14,[],58,1,[],58,7,[],58,13,[],58,14,[],59,0,[],59,14,[],60,9,[],60,14,[],60,594,[],61,14,[],62,7,[],62,11,[],62,13,[],62,14,[],63,9,[],63,14,[],63,594,[],64,1,[],64,7,[],64,11,[],64,12,[],64,13,[],64,14,[],65,0,[],65,7,[],65,13,[],65,14,[],66,0,[],66,5,[],66,10,[],66,14,[],67,1,[],67,7,[],67,11,[],67,12,[],67,13,[],67,14,[],68,0,[],68,5,[],68,14,[],69,0,[],69,14,[],70,0,[],70,3,[],70,14,[],71,1,[],71,12,[],71,13,[],71,14,[],72,0,[],72,7,[],72,11,[],72,13,[],72,14,[],73,1,[],73,12,[],73,13,[],73,14,[]],"feature":[147,32,147,38,148,32,148,38,151,60,151,63,152,60,152,63,153,60,153,63,155,27,155,31,155,66,160,36,160,62,160,64,160,67,160,72,212,27,212,31,212,39,212,66,212,68,221,36,221,55,221,58,221,62,221,64,221,65,221,67,221,72,222,36,222,55,222,58,222,62,222,64,222,65,222,67,222,72,232,32,232,38,234,60,234,63,258,27,258,28,258,29,258,30,258,31,258,32,258,34,258,36,258,37,258,38,258,39,258,55,258,56,258,58,258,59,258,60,258,61,258,62,258,63,258,64,258,65,258,66,258,67,258,68,258,69,258,70,258,71,258,72,258,73,259,27,259,28,259,29,259,30,259,31,259,32,259,34,259,36,259,37,259,38,259,39,259,55,259,56,259,58,259,59,259,60,259,61,259,62,259,63,259,64,259,65,259,66,259,67,259,68,259,69,259,70,259,71,259,72,259,73,260,27,260,28,260,29,260,30,260,31,260,32,260,34,260,36,260,37,260,38,260,39,260,55,260,56,260,58,260,59,260,60,260,61,260,62,260,63,260,64,260,65,260,66,260,67,260,68,260,69,260,70,260,71,260,72,260,73,261,27,261,28,261,29,261,30,261,31,261,32,261,34,261,36,261,37,261,38,261,39,261,55,261,56,261,58,261,59,261,60,261,61,261,62,261,63,261,64,261,65,261,66,261,67,261,68,261,69,261,70,261,71,261,72,261,73,262,27,262,28,262,29,262,30,262,31,262,32,262,34,262,36,262,37,262,38,262,39,262,55,262,56,262,58,262,59,262,60,262,61,262,62,262,63,262,64,262,65,262,66,262,67,262,68,262,69,262,70,262,71,262,72,262,73,263,27,263,28,263,29,263,30,263,31,263,32,263,34,263,36,263,37,263,38,263,39,263,55,263,56,263,58,263,59,263,60,263,61,263,62,263,63,263,64,263,65,263,66,263,67,263,68,263,69,263,70,263,71,263,72,263,73,264,27,264,28,264,29,264,30,264,31,264,32,264,34,264,36,264,37,264,38,264,39,264,55,264,56,264,58,264,59,264,60,264,61,264,62,264,63,264,64,264,65,264,66,264,67,264,68,264,69,264,70,264,71,264,72,264,73,265,27,265,28,265,29,265,30,265,31,265,32,265,34,265,36,265,37,265,38,265,39,265,55,265,56,265,58,265,59,265,60,265,61,265,62,265,63,265,64,265,65,265,66,265,67,265,68,265,69,265,70,265,71,265,72,265,73,282,43,315,43,316,43,317,43,318,43,319,43,320,43,321,43,322,43,323,43,324,43,325,43,326,43,327,43,328,43,329,43,330,43,331,43,332,43,333,43,334,43,335,43,336,43,337,43,338,43,339,43,340,43,341,43,342,43,343,43,344,43,348,27,348,31,348,39,348,66,348,68,349,27,349,31,349,39,349,66,349,68,377,36,377,55,377,58,377,62,377,64,377,65,377,67,377,72,378,36,378,55,378,58,378,62,378,64,378,65,378,67,378,72,407,32,407,38,408,32,408,38,409,32,409,38,410,60,410,63,411,60,411,63,412,60,412,63,430,27,430,28,430,29,430,30,430,31,430,32,430,34,430,36,430,37,430,38,430,39,430,55,430,56,430,58,430,59,430,60,430,61,430,62,430,63,430,64,430,65,430,66,430,67,430,68,430,69,430,70,430,71,430,72,430,73,431,27,431,28,431,29,431,30,431,31,431,32,431,34,431,36,431,37,431,38,431,39,431,55,431,56,431,58,431,59,431,60,431,61,431,62,431,63,431,64,431,65,431,66,431,67,431,68,431,69,431,70,431,71,431,72,431,73,432,27,432,28,432,29,432,30,432,31,432,32,432,34,432,36,432,37,432,38,432,39,432,55,432,56,432,58,432,59,432,60,432,61,432,62,432,63,432,64,432,65,432,66,432,67,432,68,432,69,432,70,432,71,432,72,432,73,433,27,433,28,433,29,433,30,433,31,433,32,433,34,433,36,433,37,433,38,433,39,433,55,433,56,433,58,433,59,433,60,433,61,433,62,433,63,433,64,433,65,433,66,433,67,433,68,433,69,433,70,433,71,433,72,433,73,434,27,434,28,434,29,434,30,434,31,434,32,434,34,434,36,434,37,434,38,434,39,434,55,434,56,434,58,434,59,434,60,434,61,434,62,434,63,434,64,434,65,434,66,434,67,434,68,434,69,434,70,434,71,434,72,434,73,435,27,435,28,435,29,435,30,435,31,435,32,435,34,435,36,435,37,435,38,435,39,435,55,435,56,435,58,435,59,435,60,435,61,435,62,435,63,435,64,435,65,435,66,435,67,435,68,435,69,435,70,435,71,435,72,435,73,438,27,438,28,438,29,438,30,438,31,438,32,438,34,438,36,438,37,438,38,438,39,438,55,438,56,438,58,438,59,438,60,438,61,438,62,438,63,438,64,438,65,438,66,438,67,438,68,438,69,438,70,438,71,438,72,438,73,462,49,463,49,465,49,466,49,467,49,468,49,469,49,470,49,471,49,472,49,475,42,476,42,477,42,478,42,479,42,480,42,481,42,482,42,485,16,485,17,485,18,485,20,485,21,485,22,485,23,485,24,485,25,485,26,485,35,485,42,485,47,485,48,485,51,485,52,489,40,489,49,489,53,490,40,490,49,490,53,491,40,491,49,491,53,495,40,495,49,495,53,496,40,496,49,496,53,497,40,497,49,497,53,498,40,498,49,498,53,499,40,499,49,499,53,500,40,500,49,500,53,501,40,501,49,501,53,502,40,502,49,502,53,503,40,503,49,503,53,504,40,504,49,504,53,505,40,505,53,506,40,506,49,506,53,507,40,507,49,507,53,508,40,508,53,509,40,509,49,509,53,510,40,510,53,511,40,511,53,512,40,512,49,512,53,513,40,513,49,513,53,514,40,514,49,514,53,515,40,515,49,515,53,516,40,516,53,517,40,517,49,517,53,518,40,518,49,518,53,519,40,519,49,519,53,520,40,520,49,520,53,521,40,521,53,522,53,523,40,523,49,523,53,524,40,524,49,524,53,525,40,525,53,529,16,529,17,529,18,529,20,529,21,529,22,529,24,530,16,530,17,530,18,530,20,530,21,530,22,530,24,536,49,539,49,540,49,541,49,542,49,543,49,544,49,545,49,546,49,548,49,549,49,550,49,551,49,552,49,553,49,554,49,555,49,556,49,557,49,558,49,559,49,560,49,561,49,562,49,563,49,564,49,565,49,566,49,567,49,568,49,569,49,570,49,579,35,579,48,580,35,580,48,581,35,581,48,582,35,582,48,583,35,583,48,584,35,584,48,585,35,585,48,586,35,586,48,587,35,587,48,588,35,588,48,593,33,593,42,601,35,601,48,602,35,602,48,603,35,603,48,604,35,604,48,605,35,605,48,606,35,606,48,607,35,607,48,608,35,608,48,609,35,609,48,610,35,610,48,611,35,611,48],"member":[16,44,17,44,18,45,19,44,20,44,21,44,22,44,23,51,24,57,25,59,41,40,44,43,45,44,50,49,52,51,54,53,60,59,61,59,62,59,63,59,74,16,75,16,76,16,77,17,78,17,79,18,80,18,81,19,82,19,83,20,84,20,85,20,86,21,87,21,88,22,89,22,90,22,91,23,92,23,93,23,94,24,95,24,96,24,97,24,98,24,99,24,100,24,101,24,102,24,103,24,104,24,105,24,106,24,107,24,108,24,109,24,110,24,111,24,112,24,113,24,114,24,115,24,116,24,117,25,118,25,119,25,120,26,121,26,122,27,123,28,124,29,125,30,126,31,127,32,128,33,129,34,130,35,132,36,133,37,134,38,135,39,136,39,137,42,138,43,139,16,140,17,141,18,142,45,143,20,144,44,145,21,146,22,150,48,151,9,157,49,158,49,159,49,162,51,163,51,164,55,165,55,166,56,167,24,168,57,169,58,170,58,171,59,172,60,173,61,174,61,175,62,176,63,177,64,178,65,179,65,180,66,181,66,182,66,183,67,184,68,185,68,186,69,187,70,188,71,189,72,190,73,191,49,192,35,193,35,194,44,195,48,196,48,197,48,198,28,199,28,200,29,201,29,202,30,203,30,204,33,205,33,206,33,207,33,208,34,209,34,210,35,211,36,212,5,213,39,214,39,215,39,216,39,217,42,218,42,219,42,220,42,221,7,223,43,224,43,225,45,226,45,227,47,228,47,229,47,230,47,231,47,232,8,233,48,234,9,235,49,236,49,237,52,238,52,239,52,240,52,241,52,242,51,243,51,245,55,246,56,247,56,248,57,249,57,250,58,251,58,252,59,253,59,254,61,255,59,256,59,257,59,258,14,259,14,260,14,261,14,262,14,263,14,264,14,265,14,266,64,267,65,268,67,269,68,270,69,271,69,272,70,273,71,274,73,275,27,276,28,277,29,278,30,279,31,280,32,281,34,282,2,345,36,346,37,347,38,348,5,349,5,350,39,351,40,352,41,353,40,377,7,378,7,379,43,380,43,381,43,382,43,383,43,384,43,385,43,386,43,387,43,388,43,389,43,390,43,391,43,392,43,393,43,394,43,395,43,396,43,397,43,398,43,399,43,400,43,401,43,402,43,403,43,404,43,405,43,406,43,407,8,408,8,409,8,410,9,411,9,412,9,413,52,414,51,415,51,416,53,417,54,418,55,419,56,420,58,421,60,422,61,423,61,424,61,425,61,426,62,427,63,428,59,430,14,431,14,432,14,433,14,434,14,435,14,436,14,437,14,438,14,439,64,440,65,441,66,442,67,443,68,444,69,445,70,446,71,447,72,448,73,449,42,450,52,453,49,454,572,455,572,456,572,457,572],"requirement":[15,4,131,3,149,8,154,9,156,10,161,11,244,13,284,4,285,4,286,4,287,4,288,4,289,4,290,4,291,4,292,4,293,4,294,4,295,4,296,4,297,4,298,4,299,4,300,4,301,4,302,4,303,4,304,4,305,4,306,4,307,4,308,4,309,4,310,4,311,4,312,4,313,4,314,4,429,14],"defaultImplementation":[147,149,148,149,151,595,152,154,153,154,155,156,160,161,222,244,283,287,315,284,316,285,317,286,318,288,319,289,320,290,321,291,322,292,323,293,324,294,325,295,326,296,327,297,328,298,329,299,330,300,331,301,332,302,333,303,334,304,335,305,336,306,337,307,338,308,339,309,340,310,341,311,342,312,343,313,344,314,354,284,355,286,356,287,357,288,358,289,359,290,360,291,361,293,362,294,363,295,364,296,365,297,366,301,367,302,368,303,369,305,370,306,371,307,372,309,373,310,374,311,375,313,376,314]},"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Base/ChildIndexPath.swift","symbols":[11,17,452,14,14,49,18,21,453,21,18,50,37,11,158,42,11,159,47,11,157,51,15,236,55,15,235,59,11,191]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Base/DirectiveArgument.swift","symbols":[29,14,51,32,16,23,34,13,91,37,13,93,40,13,92,44,18,52,46,19,238,49,19,240,52,19,239,56,19,241,59,19,237,81,27,450,197,20,413,279,15,243,283,11,163,289,11,162,294,15,242,322,16,414,372,16,415,379,14,47,381,15,229,384,15,231,387,15,230,390,15,227,393,15,228]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Base/Document.swift","symbols":[15,14,66,43,4,180,56,4,181,67,4,182,73,9,441]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Base/LiteralMarkup.swift","symbols":[11,16,3,13,4,131]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Base/Markup.swift","symbols":[78,16,14,83,9,429,126,16,433,138,15,262,145,15,261,150,15,263,155,15,260,167,15,258,174,15,264,179,15,265,186,16,434,258,16,435,311,16,437,346,16,436,351,15,259,359,16,430,366,16,432,371,16,438]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Base/MarkupChildren.swift","symbols":[15,14,40,16,18,41,25,29,352,50,16,351,55,16,353,65,14,53,66,18,54,81,29,417,105,16,416]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Base/PlainTextConvertibleMarkup.swift","symbols":[11,16,13,13,8,244]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Base/RawMarkup.swift","symbols":[60,14,46]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Block Container Blocks/BlockDirective.swift","symbols":[64,14,39,89,4,136,112,4,135,119,8,215,138,8,214,148,8,216,157,8,213,176,9,350]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Block Container Blocks/BlockQuote.swift","symbols":[11,14,27,31,4,122,37,9,275]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Block Container Blocks/CustomBlock.swift","symbols":[13,14,31,31,4,126,37,9,279]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Block Container Blocks/ListItem.swift","symbols":[11,12,26,13,9,120,15,9,121,19,14,68,40,4,184,47,4,185,52,8,269,66,9,443]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Block Container Blocks/OrderedList.swift","symbols":[11,14,32,30,4,127,36,9,280]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Block Container Blocks/UnorderedList.swift","symbols":[11,14,38,31,4,134,37,9,347]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Inline Container Blocks/Paragraph.swift","symbols":[11,14,72,31,4,189,37,9,447]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Leaf Blocks/CodeBlock.swift","symbols":[11,14,69,30,4,186,35,8,271,48,8,270,62,9,444]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Leaf Blocks/HTMLBlock.swift","symbols":[11,14,70,29,4,187,34,8,272,48,9,445]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Leaf Blocks/Heading.swift","symbols":[11,14,65,33,4,179,38,8,267,57,4,178,63,9,440]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Leaf Blocks/ThematicBreak.swift","symbols":[11,14,37,29,4,133,35,9,346]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Tables/Table.swift","symbols":[19,14,59,21,16,25,23,13,117,26,13,119,29,13,118,56,4,171,66,8,252,71,8,256,84,8,255,97,8,253,114,8,257,120,9,428]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Tables/TableBody.swift","symbols":[12,18,61,40,4,173,45,4,174,53,8,254,58,18,424,63,18,422,71,18,425,77,9,423]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Tables/TableCell.swift","symbols":[12,18,62,34,4,175,40,9,426]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Tables/TableCellContainer.swift","symbols":[11,16,9,15,4,154,24,4,152,31,4,153,35,4,151,42,8,234,49,18,412,54,18,411,64,18,410]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Tables/TableHead.swift","symbols":[13,18,63,34,4,176,40,9,427]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Block Nodes/Tables/TableRow.swift","symbols":[14,18,60,37,4,172,43,9,421]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Infrastructure/Replacement.swift","symbols":[11,14,33,13,15,207,16,15,205,22,11,128,27,15,204,31,15,206]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Infrastructure/SourceLocation.swift","symbols":[13,14,42,14,23,449,25,15,218,28,15,219,31,15,220,39,11,137,45,15,217,63,17,451,67,11,454,72,15,456,82,15,455,92,16,457]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Inline Nodes/Inline Containers/Emphasis.swift","symbols":[11,14,67,31,4,183,37,8,268,46,9,442]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Inline Nodes/Inline Containers/Image.swift","symbols":[11,14,58,31,4,169,50,4,170,55,8,251,75,8,250,97,9,420]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Inline Nodes/Inline Containers/Link.swift","symbols":[11,14,55,31,4,164,44,4,165,49,8,245,67,9,418]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Inline Nodes/Inline Containers/Strikethrough.swift","symbols":[11,14,36,30,4,132,36,8,211,45,9,345]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Inline Nodes/Inline Containers/Strong.swift","symbols":[11,14,64,30,4,177,36,8,266,45,9,439]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Inline Nodes/Inline Leaves/CustomInline.swift","symbols":[13,14,34,32,4,129,37,8,208,46,8,209,50,9,281]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Inline Nodes/Inline Leaves/InlineCode.swift","symbols":[11,14,28,31,4,123,36,8,198,50,8,199,56,9,276]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Inline Nodes/Inline Leaves/InlineHTML.swift","symbols":[11,14,29,29,4,124,34,8,200,48,8,201,54,9,277]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Inline Nodes/Inline Leaves/LineBreak.swift","symbols":[11,14,71,31,4,188,37,8,273,43,9,446]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Inline Nodes/Inline Leaves/SoftBreak.swift","symbols":[11,14,73,31,4,190,37,8,274,43,9,448]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Inline Nodes/Inline Leaves/SymbolLink.swift","symbols":[18,14,30,38,4,125,43,8,202,61,9,278,67,8,203]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Inline Nodes/Inline Leaves/Text.swift","symbols":[11,14,56,30,4,166,35,8,247,49,8,246,55,9,419]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Interpretive Nodes/Aside.swift","symbols":[22,14,57,24,16,24,26,13,103,29,13,101,32,13,115,35,13,95,38,13,111,41,13,113,44,13,106,47,13,109,50,13,100,53,13,94,56,13,114,59,13,102,62,13,116,65,13,98,68,13,99,71,13,97,74,13,96,77,13,107,80,13,112,83,13,105,86,13,104,89,13,110,92,13,108,94,15,167,105,15,248,109,15,249,112,11,168]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Parser/ParseOptions.swift","symbols":[11,14,35,12,15,210,14,11,130,19,22,193,22,22,192]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Rewriter/MarkupRewriter.swift","symbols":[11,16,6,14,25,356,20,25,366,23,25,361,26,25,369,29,25,358,32,25,357,35,25,372,38,25,362,41,25,360,44,25,370,47,25,373,50,25,364,53,25,374,56,25,367,59,25,371,62,25,359,65,25,354,68,25,368,71,25,363,74,25,375,77,25,365,80,25,355,83,25,376]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Structural Restrictions/BasicBlockContainer.swift","symbols":[11,16,10,13,4,156,20,11,155]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Structural Restrictions/BasicInlineContainer.swift","symbols":[11,16,11,13,4,161,18,11,160]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Structural Restrictions/BlockContainer.swift","symbols":[11,16,5,20,8,212,25,18,348,30,18,349]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Structural Restrictions/BlockMarkup.swift","symbols":[11,16,0]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Structural Restrictions/InlineContainer.swift","symbols":[11,16,7,20,8,221,25,18,377,30,18,378,39,8,222]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Structural Restrictions/InlineMarkup.swift","symbols":[11,16,1,18,16,12]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Structural Restrictions/ListItemContainer.swift","symbols":[11,16,8,13,4,149,20,4,147,24,4,148,32,8,232,37,18,407,42,18,409,50,18,408]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Visitor/MarkupVisitor.swift","symbols":[15,16,4,20,19,15,27,18,287,35,18,312,43,18,301,51,18,293,59,18,305,67,18,289,75,18,288,83,18,309,91,18,294,99,18,291,107,18,306,115,18,310,123,18,296,131,18,311,139,18,302,147,18,307,155,18,290,163,18,284,171,18,303,179,18,295,187,18,313,195,18,297,203,18,286,211,18,314,219,18,308,227,18,285,235,18,300,243,18,298,251,18,292,259,18,299,267,18,304,274,25,342,277,25,331,280,25,323,283,25,335,286,25,319,289,25,318,292,25,339,295,25,324,298,25,321,301,25,336,304,25,340,307,25,326,310,25,341,313,25,332,316,25,337,319,25,320,322,25,315,325,25,333,328,25,325,331,25,343,334,25,327,337,25,317,340,25,344,343,25,338,346,25,316,349,25,330,352,25,328,355,25,322,358,25,329,361,25,334]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Walker/MarkupWalker.swift","symbols":[11,16,2,17,25,282,22,25,283]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Walker/Walkers/MarkupFormatter.swift","symbols":[99,14,43,103,18,44,107,20,20,109,17,83,112,17,84,115,17,85,119,20,16,122,17,74,125,17,76,130,17,75,134,20,22,136,17,88,139,17,90,142,17,89,146,20,17,148,17,77,151,17,78,155,20,21,164,17,86,180,17,87,184,20,19,187,17,82,191,17,81,198,22,45,200,24,18,205,21,80,210,21,79,214,23,225,217,23,226,225,19,142,262,15,144,289,26,194,293,15,223,296,28,224,308,11,138,599,16,382,603,25,384,607,25,391,614,25,388,655,25,396,668,25,403,675,25,400,682,25,389,692,25,386,712,25,383,741,25,402,750,25,397,765,25,385,771,25,379,796,25,398,800,25,390,805,25,405,837,25,392,841,25,381,847,25,406,856,25,401,869,25,380,1019,25,395,1024,25,393,1029,25,387,1034,25,394,1038,25,404,1069,25,399]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-markdown@swift-DEVELOPMENT-SNAPSHOT-2022-06-20-a/.build/checkouts/swift-markdown/Sources/Markdown/Walker/Walkers/MarkupTreeDumper.swift","symbols":[20,14,48,21,15,233,22,11,150,27,22,196,30,22,197,33,22,195,43,16,431]}]}