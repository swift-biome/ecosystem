{"culture":"NIOSSL","dependencies":[{"package":"swift-nio","modules":["NIO","NIOConcurrencyHelpers","NIOCore","NIOEmbedded","NIOPosix","NIOTLS","_NIODataStructures"]}],"extensions":[],"partitions":[{"namespace":"NIOCore","communities":[{"community":"method","startIndex":0,"endIndex":2}]},{"namespace":"NIOSSL","communities":[{"community":"protocol","startIndex":2,"endIndex":3},{"community":"enum","startIndex":3,"endIndex":15},{"community":"struct","startIndex":15,"endIndex":24},{"community":"class","startIndex":24,"endIndex":31},{"community":"enum.case","startIndex":31,"endIndex":84},{"community":"init","startIndex":84,"endIndex":111},{"community":"type.property","startIndex":111,"endIndex":147},{"community":"property","startIndex":147,"endIndex":176},{"community":"type.method","startIndex":176,"endIndex":190},{"community":"method","startIndex":190,"endIndex":211},{"community":"type.op","startIndex":211,"endIndex":215},{"community":"var","startIndex":215,"endIndex":216},{"community":"typealias","startIndex":216,"endIndex":229}]}],"identifiers":["s7NIOCore15ChannelPipelineC21SynchronousOperationsV6NIOSSLE17nioSSL_tlsVersionAF10TLSVersionOSgyKF","s7NIOCore7ChannelP6NIOSSLE17nioSSL_tlsVersionAA15EventLoopFutureCyAD10TLSVersionOSgGyF","s6NIOSSL22NIOSSLCustomPrivateKeyP","s6NIOSSL10TLSVersionO","s6NIOSSL11NIOSSLErrorO","s6NIOSSL14BoringSSLErrorO","s6NIOSSL16NIOSSLTrustRootsO","s6NIOSSL21NIOTLSUnwrappingErrorO","s6NIOSSL22NIOSSLPrivateKeySourceO","s6NIOSSL23CertificateVerificationO","s6NIOSSL23NIORenegotiationSupportO","s6NIOSSL23NIOSSLCertificateSourceO","s6NIOSSL24NIOSSLVerificationResultO","s6NIOSSL26NIOSSLAdditionalTrustRootsO","s6NIOSSL26NIOSSLSerializationFormatsO","s6NIOSSL12NIOTLSCipherV","s6NIOSSL16NIOSSLExtraErrorV","s6NIOSSL16TLSConfigurationV","s6NIOSSL18NIOSSLPKCS12BundleV","s6NIOSSL18SignatureAlgorithmV","s6NIOSSL22BoringSSLInternalErrorV","s6NIOSSL22NIOSSLObjectIdentifierV","s6NIOSSL23NIOSSLClientTLSProviderV","s6NIOSSL24NIOSSLCloseTimedOutErrorV","s6NIOSSL13NIOSSLContextC","s6NIOSSL13NIOSSLHandlerC","s6NIOSSL15NIOSSLPublicKeyC","s6NIOSSL16NIOSSLPrivateKeyC","s6NIOSSL17NIOSSLCertificateC","s6NIOSSL19NIOSSLClientHandlerC","s6NIOSSL19NIOSSLServerHandlerC","s6NIOSSL10TLSVersionO5tlsv1yA2CmF","s6NIOSSL10TLSVersionO6tlsv11yA2CmF","s6NIOSSL10TLSVersionO6tlsv12yA2CmF","s6NIOSSL10TLSVersionO6tlsv13yA2CmF","s6NIOSSL11NIOSSLErrorO14shutdownFailedyAcA14BoringSSLErrorOcACmF","s6NIOSSL11NIOSSLErrorO15handshakeFailedyAcA14BoringSSLErrorOcACmF","s6NIOSSL11NIOSSLErrorO15uncleanShutdownyA2CmF","s6NIOSSL11NIOSSLErrorO16cannotFindPeerIPyA2CmF","s6NIOSSL11NIOSSLErrorO17cannotMatchULabelyA2CmF","s6NIOSSL11NIOSSLErrorO21readInInvalidTLSStateyA2CmF","s6NIOSSL11NIOSSLErrorO22failedToLoadPrivateKeyyA2CmF","s6NIOSSL11NIOSSLErrorO22noSuchFilesystemObjectyA2CmF","s6NIOSSL11NIOSSLErrorO22writeDuringTLSShutdownyA2CmF","s6NIOSSL11NIOSSLErrorO23failedToLoadCertificateyA2CmF","s6NIOSSL11NIOSSLErrorO23noCertificateToValidateyA2CmF","s6NIOSSL11NIOSSLErrorO27unableToValidateCertificateyA2CmF","s6NIOSSL11NIOSSLErrorO31unableToAllocateBoringSSLObjectyA2CmF","s6NIOSSL14BoringSSLErrorO10wantAcceptyA2CmF","s6NIOSSL14BoringSSLErrorO10zeroReturnyA2CmF","s6NIOSSL14BoringSSLErrorO11wantConnectyA2CmF","s6NIOSSL14BoringSSLErrorO12syscallErroryA2CmF","s6NIOSSL14BoringSSLErrorO12unknownErroryACSayAA0b11SSLInternalE0VGcACmF","s6NIOSSL14BoringSSLErrorO14invalidSNINameyACSayAA0B16SSLInternalErrorVGcACmF","s6NIOSSL14BoringSSLErrorO14wantX509LookupyA2CmF","s6NIOSSL14BoringSSLErrorO15failedToSetALPNyACSayAA0B16SSLInternalErrorVGcACmF","s6NIOSSL14BoringSSLErrorO21wantCertificateVerifyyA2CmF","s6NIOSSL14BoringSSLErrorO7noErroryA2CmF","s6NIOSSL14BoringSSLErrorO8sslErroryACSayAA0b11SSLInternalE0VGcACmF","s6NIOSSL14BoringSSLErrorO8wantReadyA2CmF","s6NIOSSL14BoringSSLErrorO9wantWriteyA2CmF","s6NIOSSL16NIOSSLTrustRootsO12certificatesyACSayAA17NIOSSLCertificateCGcACmF","s6NIOSSL16NIOSSLTrustRootsO4fileyACSScACmF","s6NIOSSL16NIOSSLTrustRootsO7defaultyA2CmF","s6NIOSSL21NIOTLSUnwrappingErrorO13alreadyClosedyA2CmF","s6NIOSSL21NIOTLSUnwrappingErrorO20invalidInternalStateyA2CmF","s6NIOSSL21NIOTLSUnwrappingErrorO22unflushedWriteOnUnwrapyA2CmF","s6NIOSSL21NIOTLSUnwrappingErrorO26closeRequestedDuringUnwrapyA2CmF","s6NIOSSL22NIOSSLPrivateKeySourceO07privateC0yAcA0bC0CcACmF","s6NIOSSL22NIOSSLPrivateKeySourceO4fileyACSScACmF","s6NIOSSL23CertificateVerificationO010noHostnameC0yA2CmF","s6NIOSSL23CertificateVerificationO04fullC0yA2CmF","s6NIOSSL23CertificateVerificationO4noneyA2CmF","s6NIOSSL23NIORenegotiationSupportO4noneyA2CmF","s6NIOSSL23NIORenegotiationSupportO4onceyA2CmF","s6NIOSSL23NIORenegotiationSupportO6alwaysyA2CmF","s6NIOSSL23NIOSSLCertificateSourceO11certificateyAcA0B0CcACmF","s6NIOSSL23NIOSSLCertificateSourceO4fileyACSScACmF","s6NIOSSL24NIOSSLVerificationResultO19certificateVerifiedyA2CmF","s6NIOSSL24NIOSSLVerificationResultO6failedyA2CmF","s6NIOSSL26NIOSSLAdditionalTrustRootsO12certificatesyACSayAA17NIOSSLCertificateCGcACmF","s6NIOSSL26NIOSSLAdditionalTrustRootsO4fileyACSScACmF","s6NIOSSL26NIOSSLSerializationFormatsO3deryA2CmF","s6NIOSSL26NIOSSLSerializationFormatsO3pemyA2CmF","s6NIOSSL12NIOTLSCipherV8rawValueACs6UInt16V_tcfc","s6NIOSSL12NIOTLSCipherVyACs6UInt16Vcfc","s6NIOSSL13NIOSSLContextC13configuration18passphraseCallbackAcA16TLSConfigurationV_yyxXEKctKcSlRzs5UInt8V7ElementRtzlufc","s6NIOSSL13NIOSSLContextC13configurationAcA16TLSConfigurationV_tKcfc","s6NIOSSL16NIOSSLPrivateKeyC013customPrivateC0ACx_tcAA012NIOSSLCustomeC0RzSHRzlufc","s6NIOSSL16NIOSSLPrivateKeyC4file6format18passphraseCallbackACSS_AA26NIOSSLSerializationFormatsOyyxXEKctKcSlRzs5UInt8V7ElementRtzlufc","s6NIOSSL16NIOSSLPrivateKeyC4file6formatACSS_AA26NIOSSLSerializationFormatsOtKcfc","s6NIOSSL16NIOSSLPrivateKeyC5bytes6format18passphraseCallbackACSays5UInt8VG_AA26NIOSSLSerializationFormatsOyyxXEKctKcSlRzAH7ElementRtzlufc","s6NIOSSL16NIOSSLPrivateKeyC5bytes6formatACSays5UInt8VG_AA26NIOSSLSerializationFormatsOtKcfc","s6NIOSSL16NIOSSLPrivateKeyC6buffer6format18passphraseCallbackACSays4Int8VG_AA26NIOSSLSerializationFormatsOyyxXEKctKcSlRzs5UInt8V7ElementRtzlufc","s6NIOSSL16NIOSSLPrivateKeyC6buffer6formatACSays4Int8VG_AA26NIOSSLSerializationFormatsOtKcfc","s6NIOSSL17NIOSSLCertificateC4file6formatACSS_AA26NIOSSLSerializationFormatsOtKcfc","s6NIOSSL17NIOSSLCertificateC5bytes6formatACSays5UInt8VG_AA26NIOSSLSerializationFormatsOtKcfc","s6NIOSSL17NIOSSLCertificateC6buffer6formatACSays4Int8VG_AA26NIOSSLSerializationFormatsOtKcfc","s6NIOSSL18NIOSSLPKCS12BundleV4file10passphraseACSS_xSgtKcSlRzs5UInt8V7ElementRtzlufc","s6NIOSSL18NIOSSLPKCS12BundleV4fileACSS_tKcfc","s6NIOSSL18NIOSSLPKCS12BundleV6buffer10passphraseACSays5UInt8VG_xSgtKcSlRzAG7ElementRtzlufc","s6NIOSSL18NIOSSLPKCS12BundleV6bufferACSays5UInt8VG_tKcfc","s6NIOSSL18SignatureAlgorithmV8rawValueACs6UInt16V_tcfc","s6NIOSSL19NIOSSLClientHandlerC7context14serverHostname20verificationCallbackAcA13NIOSSLContextC_SSSgAA24NIOSSLVerificationResultOAK_AA17NIOSSLCertificateCtcSgtKcfc","s6NIOSSL19NIOSSLClientHandlerC7context14serverHostname26customVerificationCallbackAcA13NIOSSLContextC_SSSgySayAA17NIOSSLCertificateCG_7NIOCore16EventLoopPromiseVyAA24NIOSSLVerificationResultOGtctKcfc","s6NIOSSL19NIOSSLClientHandlerC7context14serverHostnameAcA13NIOSSLContextC_SSSgtKcfc","s6NIOSSL19NIOSSLServerHandlerC7context20verificationCallbackAcA13NIOSSLContextC_AA24NIOSSLVerificationResultOAI_AA17NIOSSLCertificateCtcSgtKcfc","s6NIOSSL19NIOSSLServerHandlerC7context26customVerificationCallbackAcA13NIOSSLContextC_ySayAA17NIOSSLCertificateCG_7NIOCore16EventLoopPromiseVyAA24NIOSSLVerificationResultOGtctcfc","s6NIOSSL19NIOSSLServerHandlerC7contextAcA13NIOSSLContextC_tcfc","s6NIOSSL22NIOSSLObjectIdentifierVyACSgSScfc","s6NIOSSL23NIOSSLClientTLSProviderV7context14serverHostname26customVerificationCallbackACyxGAA13NIOSSLContextC_SSSgySayAA17NIOSSLCertificateCG_7NIOCore16EventLoopPromiseVyAA24NIOSSLVerificationResultOGtcSgtKcfc","s6NIOSSL12NIOTLSCipherV22TLS_AES_128_GCM_SHA256ACvpZ","s6NIOSSL12NIOTLSCipherV22TLS_AES_256_GCM_SHA384ACvpZ","s6NIOSSL12NIOTLSCipherV28TLS_CHACHA20_POLY1305_SHA256ACvpZ","s6NIOSSL12NIOTLSCipherV28TLS_RSA_WITH_AES_128_CBC_SHAACvpZ","s6NIOSSL12NIOTLSCipherV28TLS_RSA_WITH_AES_256_CBC_SHAACvpZ","s6NIOSSL12NIOTLSCipherV31TLS_RSA_WITH_AES_128_GCM_SHA256ACvpZ","s6NIOSSL12NIOTLSCipherV31TLS_RSA_WITH_AES_256_GCM_SHA384ACvpZ","s6NIOSSL12NIOTLSCipherV34TLS_ECDHE_RSA_WITH_AES_128_CBC_SHAACvpZ","s6NIOSSL12NIOTLSCipherV34TLS_ECDHE_RSA_WITH_AES_256_CBC_SHAACvpZ","s6NIOSSL12NIOTLSCipherV36TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHAACvpZ","s6NIOSSL12NIOTLSCipherV36TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHAACvpZ","s6NIOSSL12NIOTLSCipherV37TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256ACvpZ","s6NIOSSL12NIOTLSCipherV37TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384ACvpZ","s6NIOSSL12NIOTLSCipherV39TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256ACvpZ","s6NIOSSL12NIOTLSCipherV39TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384ACvpZ","s6NIOSSL12NIOTLSCipherV43TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256ACvpZ","s6NIOSSL12NIOTLSCipherV45TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256ACvpZ","s6NIOSSL16NIOSSLExtraErrorV18invalidSNIHostnameACvpZ","s6NIOSSL16NIOSSLExtraErrorV23cannotUseIPAddressInSNIACvpZ","s6NIOSSL16NIOSSLExtraErrorV24failedToValidateHostnameACvpZ","s6NIOSSL16NIOSSLExtraErrorV31serverHostnameImpossibleToMatchACvpZ","s6NIOSSL16TLSConfigurationV13clientDefaultACvpZ","s6NIOSSL18SignatureAlgorithmV12rsaPkcs1Sha1ACvpZ","s6NIOSSL18SignatureAlgorithmV14rsaPkcs1Sha256ACvpZ","s6NIOSSL18SignatureAlgorithmV14rsaPkcs1Sha384ACvpZ","s6NIOSSL18SignatureAlgorithmV14rsaPkcs1Sha512ACvpZ","s6NIOSSL18SignatureAlgorithmV16rsaPssRsaeSha256ACvpZ","s6NIOSSL18SignatureAlgorithmV16rsaPssRsaeSha384ACvpZ","s6NIOSSL18SignatureAlgorithmV16rsaPssRsaeSha512ACvpZ","s6NIOSSL18SignatureAlgorithmV20ecdsaSecp256R1Sha256ACvpZ","s6NIOSSL18SignatureAlgorithmV20ecdsaSecp384R1Sha384ACvpZ","s6NIOSSL18SignatureAlgorithmV20ecdsaSecp521R1Sha512ACvpZ","s6NIOSSL18SignatureAlgorithmV7ed25519ACvpZ","s6NIOSSL18SignatureAlgorithmV9ecdsaSha1ACvpZ","s6NIOSSL22BoringSSLInternalErrorV18eofDuringHandshakeACvpZ","s6NIOSSL22BoringSSLInternalErrorV45eofDuringAdditionalCertficiateChainValidationACvpZ","s6NIOSSL12NIOTLSCipherV8rawValues6UInt16Vvp","s6NIOSSL13NIOSSLHandlerC10tlsVersionAA10TLSVersionOSgvp","s6NIOSSL16NIOSSLExtraErrorV11descriptionSSvp","s6NIOSSL16TLSConfigurationV10privateKeyAA013NIOSSLPrivateD6SourceOSgvp","s6NIOSSL16TLSConfigurationV10trustRootsAA011NIOSSLTrustD0OSgvp","s6NIOSSL16TLSConfigurationV12cipherSuitesSSvp","s6NIOSSL16TLSConfigurationV14keyLogCallbacky7NIOCore10ByteBufferVcSgvp","s6NIOSSL16TLSConfigurationV14sendCANameListSbvp","s6NIOSSL16TLSConfigurationV15shutdownTimeout7NIOCore10TimeAmountVvp","s6NIOSSL16TLSConfigurationV16certificateChainSayAA23NIOSSLCertificateSourceOGvp","s6NIOSSL16TLSConfigurationV17cipherSuiteValuesSayAA12NIOTLSCipherVGvp","s6NIOSSL16TLSConfigurationV17maximumTLSVersionAA0D0OSgvp","s6NIOSSL16TLSConfigurationV17minimumTLSVersionAA0D0Ovp","s6NIOSSL16TLSConfigurationV20additionalTrustRootsSayAA016NIOSSLAdditionaldE0OGvp","s6NIOSSL16TLSConfigurationV20applicationProtocolsSaySSGvp","s6NIOSSL16TLSConfigurationV20renegotiationSupportAA016NIORenegotiationD0Ovp","s6NIOSSL16TLSConfigurationV23certificateVerificationAA011CertificateD0Ovp","s6NIOSSL16TLSConfigurationV25verifySignatureAlgorithmsSayAA0D9AlgorithmVGSgvp","s6NIOSSL16TLSConfigurationV26signingSignatureAlgorithmsSayAA0D9AlgorithmVGSgvp","s6NIOSSL17NIOSSLCertificateC11descriptionSSvp","s6NIOSSL17NIOSSLCertificateC12serialNumberSays5UInt8VGvp","s6NIOSSL17NIOSSLCertificateC13notValidAfterSivp","s6NIOSSL17NIOSSLCertificateC14notValidBeforeSivp","s6NIOSSL18NIOSSLPKCS12BundleV10privateKeyAA013NIOSSLPrivateE0Cvp","s6NIOSSL18NIOSSLPKCS12BundleV16certificateChainSayAA17NIOSSLCertificateCGvp","s6NIOSSL18SignatureAlgorithmV8rawValues6UInt16Vvp","s6NIOSSL22BoringSSLInternalErrorV11descriptionSSvp","s6NIOSSL22NIOSSLCustomPrivateKeyP19signatureAlgorithmsSayAA18SignatureAlgorithmVGvp","s6NIOSSL22NIOSSLObjectIdentifierV11descriptionSSvp","s6NIOSSL16TLSConfigurationV23makeClientConfigurationACyFZ","s6NIOSSL16TLSConfigurationV23makeServerConfiguration16certificateChain10privateKeyACSayAA23NIOSSLCertificateSourceOG_AA013NIOSSLPrivateiK0OtFZ","s6NIOSSL16TLSConfigurationV9forClient12cipherSuites17minimumTLSVersion07maximumH023certificateVerification10trustRoots0J5Chain10privateKey20applicationProtocols15shutdownTimeout14keyLogCallback20renegotiationSupportACSS_AA0H0OAQSgAA011CertificateK0OAA011NIOSSLTrustM0OSayAA23NIOSSLCertificateSourceOGAA013NIOSSLPrivateP6SourceOSgSaySSG7NIOCore10TimeAmountVyA2_10ByteBufferVcSgAA016NIORenegotiationY0OtFZ","s6NIOSSL16TLSConfigurationV9forClient12cipherSuites17minimumTLSVersion07maximumH023certificateVerification10trustRoots0J5Chain10privateKey20applicationProtocols15shutdownTimeout14keyLogCallbackACSS_AA0H0OAPSgAA011CertificateK0OAA011NIOSSLTrustM0OSayAA23NIOSSLCertificateSourceOGAA013NIOSSLPrivateP6SourceOSgSaySSG7NIOCore10TimeAmountVyA1_10ByteBufferVcSgtFZ","s6NIOSSL16TLSConfigurationV9forClient12cipherSuites25verifySignatureAlgorithms07signinghI017minimumTLSVersion07maximumL023certificateVerification10trustRoots0N5Chain10privateKey20applicationProtocols15shutdownTimeout14keyLogCallback20renegotiationSupport015additionalTrustQ0ACSS_SayAA0H9AlgorithmVGSgAvA0L0OAXSgAA011CertificateO0OAA011NIOSSLTrustQ0OSayAA23NIOSSLCertificateSourceOGAA013NIOSSLPrivateT6SourceOSgSaySSG7NIOCore10TimeAmountVyA9_10ByteBufferVcSgAA23NIORenegotiationSupportOSayAA021NIOSSLAdditionalTrustQ0OGtFZ","s6NIOSSL16TLSConfigurationV9forClient12cipherSuites25verifySignatureAlgorithms07signinghI017minimumTLSVersion07maximumL023certificateVerification10trustRoots0N5Chain10privateKey20applicationProtocols15shutdownTimeout14keyLogCallback20renegotiationSupport015additionalTrustQ0ACSayAA12NIOTLSCipherVG_SayAA0H9AlgorithmVGSgAyA0L0OA_SgAA011CertificateO0OAA011NIOSSLTrustQ0OSayAA23NIOSSLCertificateSourceOGAA013NIOSSLPrivateT6SourceOSgSaySSG7NIOCore10TimeAmountVyA12_10ByteBufferVcSgAA23NIORenegotiationSupportOSayAA021NIOSSLAdditionalTrustQ0OGtFZ","s6NIOSSL16TLSConfigurationV9forClient12cipherSuites25verifySignatureAlgorithms07signinghI017minimumTLSVersion07maximumL023certificateVerification10trustRoots0N5Chain10privateKey20applicationProtocols15shutdownTimeout14keyLogCallback20renegotiationSupportACSS_SayAA0H9AlgorithmVGSgAuA0L0OAWSgAA011CertificateO0OAA011NIOSSLTrustQ0OSayAA23NIOSSLCertificateSourceOGAA013NIOSSLPrivateT6SourceOSgSaySSG7NIOCore10TimeAmountVyA8_10ByteBufferVcSgAA23NIORenegotiationSupportOtFZ","s6NIOSSL16TLSConfigurationV9forServer16certificateChain10privateKey12cipherSuites17minimumTLSVersion07maximumL00E12Verification10trustRoots20applicationProtocols15shutdownTimeout14keyLogCallbackACSayAA23NIOSSLCertificateSourceOG_AA013NIOSSLPrivatehY0OSSAA0L0OAUSgAA011CertificateN0OAA011NIOSSLTrustP0OSaySSG7NIOCore10TimeAmountVyA0_10ByteBufferVcSgtFZ","s6NIOSSL16TLSConfigurationV9forServer16certificateChain10privateKey12cipherSuites25verifySignatureAlgorithms07signinglM017minimumTLSVersion07maximumP00E12Verification10trustRoots20applicationProtocols15shutdownTimeout14keyLogCallback015additionalTrustT0ACSayAA23NIOSSLCertificateSourceOG_AA013NIOSSLPrivateH6SourceOSSSayAA0L9AlgorithmVGSgAzA0P0OA0_SgAA011CertificateR0OAA011NIOSSLTrustT0OSaySSG7NIOCore10TimeAmountVyA7_10ByteBufferVcSgSayAA021NIOSSLAdditionalTrustT0OGtFZ","s6NIOSSL16TLSConfigurationV9forServer16certificateChain10privateKey12cipherSuites25verifySignatureAlgorithms07signinglM017minimumTLSVersion07maximumP00E12Verification10trustRoots20applicationProtocols15shutdownTimeout14keyLogCallback015additionalTrustT0ACSayAA23NIOSSLCertificateSourceOG_AA013NIOSSLPrivateH6SourceOSayAA12NIOTLSCipherVGSayAA0L9AlgorithmVGSgA1_AA0P0OA3_SgAA011CertificateR0OAA011NIOSSLTrustT0OSaySSG7NIOCore10TimeAmountVyA10_10ByteBufferVcSgSayAA021NIOSSLAdditionalTrustT0OGtFZ","s6NIOSSL16TLSConfigurationV9forServer16certificateChain10privateKey12cipherSuites25verifySignatureAlgorithms07signinglM017minimumTLSVersion07maximumP00E12Verification10trustRoots20applicationProtocols15shutdownTimeout14keyLogCallbackACSayAA23NIOSSLCertificateSourceOG_AA013NIOSSLPrivateH6SourceOSSSayAA0L9AlgorithmVGSgAyA0P0OA_SgAA011CertificateR0OAA011NIOSSLTrustT0OSaySSG7NIOCore10TimeAmountVyA6_10ByteBufferVcSgtFZ","s6NIOSSL17NIOSSLCertificateC11fromPEMFileySayACGSSKFZ","s6NIOSSL17NIOSSLCertificateC12fromPEMBytesySayACGSays5UInt8VGKFZ","s6NIOSSL17NIOSSLCertificateC13fromPEMBufferySayACGSays4Int8VGKFZ","s6NIOSSL13NIOSSLHandlerC11channelRead7context4datay7NIOCore21ChannelHandlerContextC_AG6NIOAnyVtF","s6NIOSSL13NIOSSLHandlerC12handlerAdded7contexty7NIOCore21ChannelHandlerContextC_tF","s6NIOSSL13NIOSSLHandlerC13channelActive7contexty7NIOCore21ChannelHandlerContextC_tF","s6NIOSSL13NIOSSLHandlerC14handlerRemoved7contexty7NIOCore21ChannelHandlerContextC_tF","s6NIOSSL13NIOSSLHandlerC15channelInactive7contexty7NIOCore21ChannelHandlerContextC_tF","s6NIOSSL13NIOSSLHandlerC19channelReadComplete7contexty7NIOCore21ChannelHandlerContextC_tF","s6NIOSSL13NIOSSLHandlerC5close7context4mode7promisey7NIOCore21ChannelHandlerContextC_AH9CloseModeOAH16EventLoopPromiseVyytGSgtF","s6NIOSSL13NIOSSLHandlerC5flush7contexty7NIOCore21ChannelHandlerContextC_tF","s6NIOSSL13NIOSSLHandlerC5write7context4data7promisey7NIOCore21ChannelHandlerContextC_AH6NIOAnyVAH16EventLoopPromiseVyytGSgtF","s6NIOSSL13NIOSSLHandlerC7stopTLS7promisey7NIOCore16EventLoopPromiseVyytGSg_tF","s6NIOSSL15NIOSSLPublicKeyC11toSPKIBytesSays5UInt8VGyKF","s6NIOSSL16NIOSSLPrivateKeyC4hash4intoys6HasherVz_tF","s6NIOSSL16TLSConfigurationV14bestEffortHash4intoys6HasherVz_tF","s6NIOSSL16TLSConfigurationV16bestEffortEqualsySbACF","s6NIOSSL17NIOSSLCertificateC10toDERBytesSays5UInt8VGyKF","s6NIOSSL17NIOSSLCertificateC16extractPublicKeyAA012NIOSSLPublicE0CyKF","s6NIOSSL17NIOSSLCertificateC4hash4intoys6HasherVz_tF","s6NIOSSL22NIOSSLCustomPrivateKeyP4sign7channel9algorithm4data7NIOCore15EventLoopFutureCyAH10ByteBufferVGAH7Channel_p_AA18SignatureAlgorithmVALtF","s6NIOSSL22NIOSSLCustomPrivateKeyP7decrypt7channel4data7NIOCore15EventLoopFutureCyAG10ByteBufferVGAG7Channel_p_AKtF","s6NIOSSL22NIOSSLObjectIdentifierV4hash4intoys6HasherVz_tF","s6NIOSSL23NIOSSLClientTLSProviderV9enableTLSyxxF","s6NIOSSL16NIOSSLExtraErrorV2eeoiySbAC_ACtFZ","s6NIOSSL16NIOSSLPrivateKeyC2eeoiySbAC_ACtFZ","s6NIOSSL17NIOSSLCertificateC2eeoiySbAC_ACtFZ","s6NIOSSL22NIOSSLObjectIdentifierV2eeoiySbAC_ACtFZ","s6NIOSSL19defaultCipherSuitesSSvp","s6NIOSSL12NIOTLSCipherV8RawValuea","s6NIOSSL13NIOSSLHandlerC10InboundOuta","s6NIOSSL13NIOSSLHandlerC10OutboundIna","s6NIOSSL13NIOSSLHandlerC11OutboundOuta","s6NIOSSL13NIOSSLHandlerC9InboundIna","s6NIOSSL18SignatureAlgorithmV8RawValuea","s6NIOSSL20NIOSSLKeyLogCallbacka","s6NIOSSL22NIOBoringSSLErrorStacka","s6NIOSSL22NIOSSLPassphraseSettera","s6NIOSSL23NIOSSLClientTLSProviderV9Bootstrapa","s6NIOSSL24NIOSSLPassphraseCallbacka","s6NIOSSL26NIOSSLVerificationCallbacka","s6NIOSSL32NIOSSLCustomVerificationCallbacka","c@T@time_t","s7NIOCore10ByteBufferV","s7NIOCore10TimeAmountV","s7NIOCore14ChannelHandlerP","s7NIOCore14ChannelHandlerP12handlerAdded7contextyAA0bC7ContextC_tF","s7NIOCore14ChannelHandlerP14handlerRemoved7contextyAA0bC7ContextC_tF","s7NIOCore15ChannelPipelineC21SynchronousOperationsV","s7NIOCore15EventLoopFutureC","s7NIOCore16EventLoopPromiseV","s7NIOCore20NIOClientTLSProviderP","s7NIOCore20NIOClientTLSProviderP9BootstrapQa","s7NIOCore20NIOClientTLSProviderP9enableTLSy9BootstrapQzAFF","s7NIOCore21ChannelHandlerContextC","s7NIOCore21ChannelInboundHandlerP","s7NIOCore21ChannelInboundHandlerP04wrapC3OutyAA6NIOAnyV0cF0QzF","s7NIOCore21ChannelInboundHandlerP06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore21ChannelInboundHandlerP0C2InQa","s7NIOCore21ChannelInboundHandlerP0C3OutQa","s7NIOCore21ChannelInboundHandlerPAAE04wrapC3OutyAA6NIOAnyV0cF0QzF","s7NIOCore21ChannelInboundHandlerPAAE06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore22ChannelOutboundHandlerP","s7NIOCore22ChannelOutboundHandlerP06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore22ChannelOutboundHandlerP0C2InQa","s7NIOCore22ChannelOutboundHandlerPAAE06unwrapC2Iny0cF0QzAA6NIOAnyVF","s7NIOCore22_ChannelInboundHandlerP11channelRead7context4datayAA0bD7ContextC_AA6NIOAnyVtF","s7NIOCore22_ChannelInboundHandlerP13channelActive7contextyAA0bD7ContextC_tF","s7NIOCore22_ChannelInboundHandlerP15channelInactive7contextyAA0bD7ContextC_tF","s7NIOCore22_ChannelInboundHandlerP19channelReadComplete7contextyAA0bD7ContextC_tF","s7NIOCore23RemovableChannelHandlerP","s7NIOCore23RemovableChannelHandlerP06removeD07context12removalTokenyAA0cD7ContextC_AH07RemovalH0VtF","s7NIOCore23RemovableChannelHandlerPAAE06removeD07context12removalTokenyAA0cD7ContextC_AH07RemovalH0VtF","s7NIOCore23_ChannelOutboundHandlerP5close7context4mode7promiseyAA0bD7ContextC_AA9CloseModeOAA16EventLoopPromiseVyytGSgtF","s7NIOCore23_ChannelOutboundHandlerP5flush7contextyAA0bD7ContextC_tF","s7NIOCore23_ChannelOutboundHandlerP5write7context4data7promiseyAA0bD7ContextC_AA6NIOAnyVAA16EventLoopPromiseVyytGSgtF","s7NIOCore23_EmittingChannelHandlerP11OutboundOutQa","s7NIOCore29NIOClientTCPBootstrapProtocolP","s7NIOCore6NIOAnyV","s7NIOCore7ChannelP","s7NIOCore9CloseModeO","sSH","sSH4hash4intoys6HasherVz_tF","sSQ","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSS","sSY","sSY8RawValueQa","sSY8rawValue03RawB0Qzvp","sSY8rawValuexSg03RawB0Qz_tcfc","sSYsSHRzSH8RawValueSYRpzrlE04hashB0Sivp","sSYsSHRzSH8RawValueSYRpzrlE4hash4intoys6HasherVz_tF","sSb","sSl","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss23CustomStringConvertibleP12_RegexParserE21halfWidthCornerQuotedSSvp","ss25LosslessStringConvertibleP","ss25LosslessStringConvertiblePyxSgSScfc","ss4Int8V","ss4Voida","ss5ErrorP","ss5UInt8V","ss6HasherV","ss6UInt16V","ss8SendableP"],"vertices":[{"p":["ChannelPipeline","SynchronousOperations","nioSSL_tlsVersion()"],"f":[["func",12],[" ",17],["nioSSL_tlsVersion",7],["() ",17],["throws",12],[" -> ",17],["TLSVersion",18,3],["?",17]],"s":[["func",12],[" ",17],["nioSSL_tlsVersion",7],["() ",17],["throws",12],[" -> ",17],["TLSVersion",18],["?",17]],"d":"API to query the `TLSVersion` directly from the `ChannelPipeline`."},{"p":["Channel","nioSSL_tlsVersion()"],"f":[["func",12],[" ",17],["nioSSL_tlsVersion",7],["() -> ",17],["EventLoopFuture",18,236],["<",17],["TLSVersion",18,3],["?>",17]],"s":[["func",12],[" ",17],["nioSSL_tlsVersion",7],["() -> ",17],["EventLoopFuture",18],["<",17],["TLSVersion",18],["?>",17]],"d":"API to extract the `TLSVersion` from an EventLoopFuture."},{"p":["NIOSSLCustomPrivateKey"],"f":[["protocol",12],[" ",17],["NIOSSLCustomPrivateKey",7]],"s":[["protocol",12],[" ",17],["NIOSSLCustomPrivateKey",7]],"d":"`NIOSSLCustomPrivateKey` defines the interface of a custom, non-BoringSSL private key.\n\nIn a number of circumstances it is advantageous to store a TLS private key in some form of high-security storage,\nsuch as a smart card. In these cases it is not possible to represent the TLS private key directly as a sequence\nof bytes that BoringSSL will understand.\n\nThis protocol allows a type to implement callbacks that perform the specific operation required by the TLS handshake.\nImplementers are required to specify what signature algorithms they support, and then must implement **only one** of\nthe `sign`/`decrypt` functions. For elliptic curve keys, implementers should implement `sign`. For RSA keys,\nimplementers should implement `sign` and, if supporting RSA key exchange in TLS versions before 1.3, you should\nalso implement `decrypt`.\n\nIf the same `NIOSSLCustomPrivateKey` implementation is used by multiple channels at once, then no synchronization\nis imposed by SwiftNIO. The calls to the protocol requirements will be made on event loop threads, so if further\nsynchronization is required it is up to the implementer to provide it. Note that it is unacceptable to block in\nthese functions, and so potentially blocking operations must delegate to another thread."},{"p":["TLSVersion"],"f":[["enum",12],[" ",17],["TLSVersion",7]],"s":[["enum",12],[" ",17],["TLSVersion",7]],"d":"Known and supported TLS versions."},{"p":["NIOSSLError"],"f":[["enum",12],[" ",17],["NIOSSLError",7]],"s":[["enum",12],[" ",17],["NIOSSLError",7]],"d":"Errors that can be raised by NIO's BoringSSL wrapper."},{"p":["BoringSSLError"],"f":[["enum",12],[" ",17],["BoringSSLError",7]],"s":[["enum",12],[" ",17],["BoringSSLError",7]],"d":"An enum that wraps individual BoringSSL errors directly."},{"p":["NIOSSLTrustRoots"],"f":[["enum",12],[" ",17],["NIOSSLTrustRoots",7]],"s":[["enum",12],[" ",17],["NIOSSLTrustRoots",7]],"d":"Places NIOSSL can obtain a trust store from."},{"p":["NIOTLSUnwrappingError"],"f":[["enum",12],[" ",17],["NIOTLSUnwrappingError",7]],"s":[["enum",12],[" ",17],["NIOTLSUnwrappingError",7]],"d":"Represents errors that may occur while attempting to unwrap TLS from a connection."},{"p":["NIOSSLPrivateKeySource"],"f":[["enum",12],[" ",17],["NIOSSLPrivateKeySource",7]],"s":[["enum",12],[" ",17],["NIOSSLPrivateKeySource",7]],"d":"Places NIOSSL can obtain private keys from."},{"p":["CertificateVerification"],"f":[["enum",12],[" ",17],["CertificateVerification",7]],"s":[["enum",12],[" ",17],["CertificateVerification",7]],"d":"Certificate verification modes."},{"p":["NIORenegotiationSupport"],"f":[["enum",12],[" ",17],["NIORenegotiationSupport",7]],"s":[["enum",12],[" ",17],["NIORenegotiationSupport",7]],"d":"Support for TLS renegotiation.\n\nIn general, renegotiation should not be enabled except in circumstances where it is absolutely necessary.\nRenegotiation is only supported in TLS 1.2 and earlier, and generally does not work very well. NIOSSL will\ndisallow most uses of renegotiation: the only supported use-case is to perform post-connection authentication\n*as a client*. There is no way to initiate a TLS renegotiation in NIOSSL."},{"p":["NIOSSLCertificateSource"],"f":[["enum",12],[" ",17],["NIOSSLCertificateSource",7]],"s":[["enum",12],[" ",17],["NIOSSLCertificateSource",7]],"d":"Places NIOSSL can obtain certificates from."},{"p":["NIOSSLVerificationResult"],"f":[["enum",12],[" ",17],["NIOSSLVerificationResult",7]],"s":[["enum",12],[" ",17],["NIOSSLVerificationResult",7]],"d":"The result of an attempt to verify an X.509 certificate."},{"p":["NIOSSLAdditionalTrustRoots"],"f":[["enum",12],[" ",17],["NIOSSLAdditionalTrustRoots",7]],"s":[["enum",12],[" ",17],["NIOSSLAdditionalTrustRoots",7]],"d":"Places NIOSSL can obtain additional trust roots from."},{"p":["NIOSSLSerializationFormats"],"f":[["enum",12],[" ",17],["NIOSSLSerializationFormats",7]],"s":[["enum",12],[" ",17],["NIOSSLSerializationFormats",7]],"d":"Formats NIOSSL supports for serializing keys and certificates."},{"p":["NIOTLSCipher"],"f":[["struct",12],[" ",17],["NIOTLSCipher",7]],"s":[["struct",12],[" ",17],["NIOTLSCipher",7]],"d":"Available ciphers to use for TLS instead of a string based representation."},{"p":["NIOSSLExtraError"],"f":[["struct",12],[" ",17],["NIOSSLExtraError",7]],"s":[["struct",12],[" ",17],["NIOSSLExtraError",7]],"d":"This structure contains errors added to NIOSSL after the original `NIOSSLError` enum was\nshipped. This is an extensible error object that allows us to evolve it going forward."},{"p":["TLSConfiguration"],"f":[["struct",12],[" ",17],["TLSConfiguration",7]],"s":[["struct",12],[" ",17],["TLSConfiguration",7]],"d":"Manages configuration of TLS for SwiftNIO programs."},{"p":["NIOSSLPKCS12Bundle"],"f":[["struct",12],[" ",17],["NIOSSLPKCS12Bundle",7]],"s":[["struct",12],[" ",17],["NIOSSLPKCS12Bundle",7]],"d":"A container of a single PKCS#12 bundle.\n\nPKCS#12 is a specification that defines an archive format for storing multiple\ncryptographic objects together in one file. Its most common usage, and the one\nthat SwiftNIO is most interested in, is its use to bundle one or more X.509\ncertificates (`NIOSSLCertificate`) together with an associated private key\n(`NIOSSLPrivateKey`).\n\n### Working with TLSConfiguration\n\nIn many cases users will want to configure a `TLSConfiguration` with the data\nfrom a PKCS#12 bundle. This object assists in unpacking that bundle into its\nassociated pieces.\n\nIf you have a PKCS12 bundle, you configure a `TLSConfiguration` like this:\n\n    let p12Bundle = NIOSSLPKCS12Bundle(file: pathToMyP12)\n    let config = TLSConfiguration.makeServerConfiguration(\n        certificateChain: p12Bundle.certificateChain,\n        privateKey: p12Bundle.privateKey\n    )\n\nThe created `TLSConfiguration` can then be safely used for your endpoint."},{"p":["SignatureAlgorithm"],"f":[["struct",12],[" ",17],["SignatureAlgorithm",7]],"s":[["struct",12],[" ",17],["SignatureAlgorithm",7]],"d":"Signature algorithms. The values are defined as in TLS 1.3"},{"p":["BoringSSLInternalError"],"f":[["struct",12],[" ",17],["BoringSSLInternalError",7]],"s":[["struct",12],[" ",17],["BoringSSLInternalError",7]],"d":"Wraps a single error from BoringSSL."},{"p":["NIOSSLObjectIdentifier"],"f":[["struct",12],[" ",17],["NIOSSLObjectIdentifier",7]],"s":[["struct",12],[" ",17],["NIOSSLObjectIdentifier",7]],"d":"Object Identifier (OID)"},{"p":["NIOSSLClientTLSProvider"],"f":[["struct",12],[" ",17],["NIOSSLClientTLSProvider",7],["<",17],["Bootstrap",0],["> ",17],["where",12],[" ",17],["Bootstrap",18],[" : ",17],["NIOClientTCPBootstrapProtocol",18,264]],"s":[["struct",12],[" ",17],["NIOSSLClientTLSProvider",7]],"c":[["Bootstrap",1,"NIOClientTCPBootstrapProtocol",264]],"g":[["Bootstrap",0,0]],"d":"A TLS provider to bootstrap TLS-enabled connections with `NIOClientTCPBootstrap`.\n\nExample:\n\n    // TLS setup.\n    let configuration = TLSConfiguration.makeClientConfiguration()\n    let sslContext = try NIOSSLContext(configuration: configuration)\n\n    // Creating the \"universal bootstrap\" with the `NIOSSLClientTLSProvider`.\n    let tlsProvider = NIOSSLClientTLSProvider<ClientBootstrap>(context: sslContext, serverHostname: \"example.com\")\n    let bootstrap = NIOClientTCPBootstrap(ClientBootstrap(group: group), tls: tlsProvider)\n\n    // Bootstrapping a connection using the \"universal bootstrapping mechanism\"\n    let connection = bootstrap.enableTLS()\n                         .connect(to: \"example.com\")\n                         .wait()"},{"p":["NIOSSLCloseTimedOutError"],"f":[["struct",12],[" ",17],["NIOSSLCloseTimedOutError",7]],"s":[["struct",12],[" ",17],["NIOSSLCloseTimedOutError",7]],"d":"Closing the TLS channel cleanly timed out, so it was closed uncleanly."},{"p":["NIOSSLContext"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NIOSSLContext",7]],"s":[["class",12],[" ",17],["NIOSSLContext",7]],"d":"A wrapper class that encapsulates BoringSSL's `SSL_CTX *` object.\n\nThis object is thread-safe and can be shared across TLS connections in your application. Even if the connections\nare associated with `Channel`s from different `EventLoop`s.\n\n- Note: Creating a `NIOSSLContext` is a very expensive operation because BoringSSL will usually need to load and\n        parse large number of certificates from the system trust store. Therefore, creating a\n        `NIOSSLContext` will likely allocate many thousand times and will also _perform blocking disk I/O_.\n\n- Warning: Avoid creating `NIOSSLContext`s on any `EventLoop` because it does _blocking disk I/O_."},{"p":["NIOSSLHandler"],"f":[["class",12],[" ",17],["NIOSSLHandler",7]],"s":[["class",12],[" ",17],["NIOSSLHandler",7]],"d":"The base class for all NIOSSL handlers. This class cannot actually be instantiated by\nusers directly: instead, users must select which mode they would like their handler to\noperate in, client or server.\n\nThis class exists to deal with the reality that for almost the entirety of the lifetime\nof a TLS connection there is no meaningful distinction between a server and a client.\nFor this reason almost the entirety of the implementation for the channel and server\nhandlers in NIOSSL is shared, in the form of this parent class."},{"p":["NIOSSLPublicKey"],"f":[["class",12],[" ",17],["NIOSSLPublicKey",7]],"s":[["class",12],[" ",17],["NIOSSLPublicKey",7]],"d":"An `NIOSSLPublicKey` is an abstract handle to a public key owned by BoringSSL.\n\nThis object is of minimal utility, as it cannot be used for very many operations\nin `NIOSSL`. Its primary purpose is to allow extracting public keys from\n`NIOSSLCertificate` objects to be serialized, so that they can be passed to\ngeneral-purpose cryptography libraries."},{"p":["NIOSSLPrivateKey"],"f":[["class",12],[" ",17],["NIOSSLPrivateKey",7]],"s":[["class",12],[" ",17],["NIOSSLPrivateKey",7]],"d":"A reference to an BoringSSL private key object in the form of an `EVP_PKEY *`.\n\nThis thin wrapper class allows us to use ARC to automatically manage\nthe memory associated with this key. That ensures that BoringSSL\nwill not free the underlying buffer until we are done with the key.\n\nThis class also provides several convenience constructors that allow users\nto obtain an in-memory representation of a key from a buffer of\nbytes or from a file path."},{"p":["NIOSSLCertificate"],"f":[["class",12],[" ",17],["NIOSSLCertificate",7]],"s":[["class",12],[" ",17],["NIOSSLCertificate",7]],"d":"A reference to a BoringSSL Certificate object (`X509 *`).\n\nThis thin wrapper class allows us to use ARC to automatically manage\nthe memory associated with this TLS certificate. That ensures that BoringSSL\nwill not free the underlying buffer until we are done with the certificate.\n\nThis class also provides several convenience constructors that allow users\nto obtain an in-memory representation of a TLS certificate from a buffer of\nbytes or from a file path."},{"p":["NIOSSLClientHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NIOSSLClientHandler",7]],"s":[["class",12],[" ",17],["NIOSSLClientHandler",7]],"d":"A channel handler that wraps a channel in TLS using NIOSSL.\nThis handler can be used in channels that are acting as the client\nin the TLS dialog. For server connections, use the `NIOSSLServerHandler`."},{"p":["NIOSSLServerHandler"],"f":[["final",12],[" ",17],["class",12],[" ",17],["NIOSSLServerHandler",7]],"s":[["class",12],[" ",17],["NIOSSLServerHandler",7]],"d":"A channel handler that wraps a channel in TLS using NIOSSL. This\nhandler can be used in channels that are acting as the server in\nthe TLS dialog. For client connections, use the `NIOSSLClientHandler`."},{"p":["TLSVersion","tlsv1"],"f":[["case",12],[" ",17],["tlsv1",7]],"s":[["case",12],[" ",17],["tlsv1",7]]},{"p":["TLSVersion","tlsv11"],"f":[["case",12],[" ",17],["tlsv11",7]],"s":[["case",12],[" ",17],["tlsv11",7]]},{"p":["TLSVersion","tlsv12"],"f":[["case",12],[" ",17],["tlsv12",7]],"s":[["case",12],[" ",17],["tlsv12",7]]},{"p":["TLSVersion","tlsv13"],"f":[["case",12],[" ",17],["tlsv13",7]],"s":[["case",12],[" ",17],["tlsv13",7]]},{"p":["NIOSSLError","shutdownFailed(_:)"],"f":[["case",12],[" ",17],["shutdownFailed",7],["(",17],["BoringSSLError",18,5],[")",17]],"s":[["case",12],[" ",17],["shutdownFailed",7],["(",17],["BoringSSLError",18],[")",17]]},{"p":["NIOSSLError","handshakeFailed(_:)"],"f":[["case",12],[" ",17],["handshakeFailed",7],["(",17],["BoringSSLError",18,5],[")",17]],"s":[["case",12],[" ",17],["handshakeFailed",7],["(",17],["BoringSSLError",18],[")",17]]},{"p":["NIOSSLError","uncleanShutdown"],"f":[["case",12],[" ",17],["uncleanShutdown",7]],"s":[["case",12],[" ",17],["uncleanShutdown",7]]},{"p":["NIOSSLError","cannotFindPeerIP"],"f":[["case",12],[" ",17],["cannotFindPeerIP",7]],"s":[["case",12],[" ",17],["cannotFindPeerIP",7]]},{"p":["NIOSSLError","cannotMatchULabel"],"f":[["case",12],[" ",17],["cannotMatchULabel",7]],"s":[["case",12],[" ",17],["cannotMatchULabel",7]]},{"p":["NIOSSLError","readInInvalidTLSState"],"f":[["case",12],[" ",17],["readInInvalidTLSState",7]],"s":[["case",12],[" ",17],["readInInvalidTLSState",7]]},{"p":["NIOSSLError","failedToLoadPrivateKey"],"f":[["case",12],[" ",17],["failedToLoadPrivateKey",7]],"s":[["case",12],[" ",17],["failedToLoadPrivateKey",7]]},{"p":["NIOSSLError","noSuchFilesystemObject"],"f":[["case",12],[" ",17],["noSuchFilesystemObject",7]],"s":[["case",12],[" ",17],["noSuchFilesystemObject",7]]},{"p":["NIOSSLError","writeDuringTLSShutdown"],"f":[["case",12],[" ",17],["writeDuringTLSShutdown",7]],"s":[["case",12],[" ",17],["writeDuringTLSShutdown",7]]},{"p":["NIOSSLError","failedToLoadCertificate"],"f":[["case",12],[" ",17],["failedToLoadCertificate",7]],"s":[["case",12],[" ",17],["failedToLoadCertificate",7]]},{"p":["NIOSSLError","noCertificateToValidate"],"f":[["case",12],[" ",17],["noCertificateToValidate",7]],"s":[["case",12],[" ",17],["noCertificateToValidate",7]]},{"p":["NIOSSLError","unableToValidateCertificate"],"f":[["case",12],[" ",17],["unableToValidateCertificate",7]],"s":[["case",12],[" ",17],["unableToValidateCertificate",7]]},{"p":["NIOSSLError","unableToAllocateBoringSSLObject"],"f":[["case",12],[" ",17],["unableToAllocateBoringSSLObject",7]],"s":[["case",12],[" ",17],["unableToAllocateBoringSSLObject",7]],"a":{"a":{"d":true,"m":"unableToAllocateBoringSSLObject can no longer be thrown"}}},{"p":["BoringSSLError","wantAccept"],"f":[["case",12],[" ",17],["wantAccept",7]],"s":[["case",12],[" ",17],["wantAccept",7]]},{"p":["BoringSSLError","zeroReturn"],"f":[["case",12],[" ",17],["zeroReturn",7]],"s":[["case",12],[" ",17],["zeroReturn",7]]},{"p":["BoringSSLError","wantConnect"],"f":[["case",12],[" ",17],["wantConnect",7]],"s":[["case",12],[" ",17],["wantConnect",7]]},{"p":["BoringSSLError","syscallError"],"f":[["case",12],[" ",17],["syscallError",7]],"s":[["case",12],[" ",17],["syscallError",7]]},{"p":["BoringSSLError","unknownError(_:)"],"f":[["case",12],[" ",17],["unknownError",7],["(",17],["NIOBoringSSLErrorStack",18,223],[")",17]],"s":[["case",12],[" ",17],["unknownError",7],["(",17],["NIOBoringSSLErrorStack",18],[")",17]]},{"p":["BoringSSLError","invalidSNIName(_:)"],"f":[["case",12],[" ",17],["invalidSNIName",7],["(",17],["NIOBoringSSLErrorStack",18,223],[")",17]],"s":[["case",12],[" ",17],["invalidSNIName",7],["(",17],["NIOBoringSSLErrorStack",18],[")",17]]},{"p":["BoringSSLError","wantX509Lookup"],"f":[["case",12],[" ",17],["wantX509Lookup",7]],"s":[["case",12],[" ",17],["wantX509Lookup",7]]},{"p":["BoringSSLError","failedToSetALPN(_:)"],"f":[["case",12],[" ",17],["failedToSetALPN",7],["(",17],["NIOBoringSSLErrorStack",18,223],[")",17]],"s":[["case",12],[" ",17],["failedToSetALPN",7],["(",17],["NIOBoringSSLErrorStack",18],[")",17]]},{"p":["BoringSSLError","wantCertificateVerify"],"f":[["case",12],[" ",17],["wantCertificateVerify",7]],"s":[["case",12],[" ",17],["wantCertificateVerify",7]]},{"p":["BoringSSLError","noError"],"f":[["case",12],[" ",17],["noError",7]],"s":[["case",12],[" ",17],["noError",7]]},{"p":["BoringSSLError","sslError(_:)"],"f":[["case",12],[" ",17],["sslError",7],["(",17],["NIOBoringSSLErrorStack",18,223],[")",17]],"s":[["case",12],[" ",17],["sslError",7],["(",17],["NIOBoringSSLErrorStack",18],[")",17]]},{"p":["BoringSSLError","wantRead"],"f":[["case",12],[" ",17],["wantRead",7]],"s":[["case",12],[" ",17],["wantRead",7]]},{"p":["BoringSSLError","wantWrite"],"f":[["case",12],[" ",17],["wantWrite",7]],"s":[["case",12],[" ",17],["wantWrite",7]]},{"p":["NIOSSLTrustRoots","certificates(_:)"],"f":[["case",12],[" ",17],["certificates",7],["([",17],["NIOSSLCertificate",18,28],["])",17]],"s":[["case",12],[" ",17],["certificates",7],["([",17],["NIOSSLCertificate",18],["])",17]],"d":"A list of certificates."},{"p":["NIOSSLTrustRoots","file(_:)"],"f":[["case",12],[" ",17],["file",7],["(",17],["String",18,273],[")",17]],"s":[["case",12],[" ",17],["file",7],["(",17],["String",18],[")",17]],"d":"Path to either a file of CA certificates in PEM format, or a directory containing CA certificates in PEM format.\n\nIf a path to a file is provided, the file can contain several CA certificates identified by\n\n    -----BEGIN CERTIFICATE-----\n    ... (CA certificate in base64 encoding) ...\n    -----END CERTIFICATE-----\n\nsequences. Before, between, and after the certificates, text is allowed which can be used e.g.\nfor descriptions of the certificates.\n\nIf a path to a directory is provided, the files each contain one CA certificate in PEM format."},{"p":["NIOSSLTrustRoots","default"],"f":[["case",12],[" ",17],["`default`",7]],"s":[["case",12],[" ",17],["`default`",7]],"d":"The system default root of trust."},{"p":["NIOTLSUnwrappingError","alreadyClosed"],"f":[["case",12],[" ",17],["alreadyClosed",7]],"s":[["case",12],[" ",17],["alreadyClosed",7]],"d":"The TLS channel has already been closed, so it is not possible to unwrap it."},{"p":["NIOTLSUnwrappingError","invalidInternalState"],"f":[["case",12],[" ",17],["invalidInternalState",7]],"s":[["case",12],[" ",17],["invalidInternalState",7]],"d":"The internal state of the handler is not able to process the unwrapping request."},{"p":["NIOTLSUnwrappingError","unflushedWriteOnUnwrap"],"f":[["case",12],[" ",17],["unflushedWriteOnUnwrap",7]],"s":[["case",12],[" ",17],["unflushedWriteOnUnwrap",7]],"d":"This write was failed because the channel was unwrapped before it was flushed."},{"p":["NIOTLSUnwrappingError","closeRequestedDuringUnwrap"],"f":[["case",12],[" ",17],["closeRequestedDuringUnwrap",7]],"s":[["case",12],[" ",17],["closeRequestedDuringUnwrap",7]],"d":"We were unwrapping the connection, but during the unwrap process a close call\nwas made. This means the connection is now closed, not unwrapped."},{"p":["NIOSSLPrivateKeySource","privateKey(_:)"],"f":[["case",12],[" ",17],["privateKey",7],["(",17],["NIOSSLPrivateKey",18,27],[")",17]],"s":[["case",12],[" ",17],["privateKey",7],["(",17],["NIOSSLPrivateKey",18],[")",17]]},{"p":["NIOSSLPrivateKeySource","file(_:)"],"f":[["case",12],[" ",17],["file",7],["(",17],["String",18,273],[")",17]],"s":[["case",12],[" ",17],["file",7],["(",17],["String",18],[")",17]]},{"p":["CertificateVerification","noHostnameVerification"],"f":[["case",12],[" ",17],["noHostnameVerification",7]],"s":[["case",12],[" ",17],["noHostnameVerification",7]],"d":"Certificates will be validated against the trust store, but will not\nbe checked to see if they are valid for the given hostname."},{"p":["CertificateVerification","fullVerification"],"f":[["case",12],[" ",17],["fullVerification",7]],"s":[["case",12],[" ",17],["fullVerification",7]],"d":"Certificates will be validated against the trust store and checked\nagainst the hostname of the service we are contacting."},{"p":["CertificateVerification","none"],"f":[["case",12],[" ",17],["none",7]],"s":[["case",12],[" ",17],["none",7]],"d":"All certificate verification disabled."},{"p":["NIORenegotiationSupport","none"],"f":[["case",12],[" ",17],["none",7]],"s":[["case",12],[" ",17],["none",7]],"d":"No support for TLS renegotiation. The default and recommended setting."},{"p":["NIORenegotiationSupport","once"],"f":[["case",12],[" ",17],["once",7]],"s":[["case",12],[" ",17],["once",7]],"d":"Allow renegotiation exactly once. If you must use renegotiation, use this setting."},{"p":["NIORenegotiationSupport","always"],"f":[["case",12],[" ",17],["always",7]],"s":[["case",12],[" ",17],["always",7]],"d":"Allow repeated renegotiation. To be avoided."},{"p":["NIOSSLCertificateSource","certificate(_:)"],"f":[["case",12],[" ",17],["certificate",7],["(",17],["NIOSSLCertificate",18,28],[")",17]],"s":[["case",12],[" ",17],["certificate",7],["(",17],["NIOSSLCertificate",18],[")",17]]},{"p":["NIOSSLCertificateSource","file(_:)"],"f":[["case",12],[" ",17],["file",7],["(",17],["String",18,273],[")",17]],"s":[["case",12],[" ",17],["file",7],["(",17],["String",18],[")",17]],"a":{"a":{"d":true,"m":"Use 'NIOSSLCertificate.fromPEMFile(_:)' to load the certificate(s) and use the '.certificate(NIOSSLCertificate)' case to provide them as a source"}}},{"p":["NIOSSLVerificationResult","certificateVerified"],"f":[["case",12],[" ",17],["certificateVerified",7]],"s":[["case",12],[" ",17],["certificateVerified",7]],"d":"The certificate was successfully verified."},{"p":["NIOSSLVerificationResult","failed"],"f":[["case",12],[" ",17],["failed",7]],"s":[["case",12],[" ",17],["failed",7]],"d":"The certificate was not verified."},{"p":["NIOSSLAdditionalTrustRoots","certificates(_:)"],"f":[["case",12],[" ",17],["certificates",7],["([",17],["NIOSSLCertificate",18,28],["])",17]],"s":[["case",12],[" ",17],["certificates",7],["([",17],["NIOSSLCertificate",18],["])",17]],"d":"See `NIOSSLTrustRoots.certificates`"},{"p":["NIOSSLAdditionalTrustRoots","file(_:)"],"f":[["case",12],[" ",17],["file",7],["(",17],["String",18,273],[")",17]],"s":[["case",12],[" ",17],["file",7],["(",17],["String",18],[")",17]],"d":"See `NIOSSLTrustRoots.file`"},{"p":["NIOSSLSerializationFormats","der"],"f":[["case",12],[" ",17],["der",7]],"s":[["case",12],[" ",17],["der",7]]},{"p":["NIOSSLSerializationFormats","pem"],"f":[["case",12],[" ",17],["pem",7]],"s":[["case",12],[" ",17],["pem",7]]},{"p":["NIOTLSCipher","init(rawValue:)"],"f":[["init",10],["(",17],["rawValue",1],[": ",17],["UInt16",18,292],[")",17]],"s":[["init",10],["(",17],["rawValue",1],[": ",17],["UInt16",18],[")",17]]},{"p":["NIOTLSCipher","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["rawValue",2],[": ",17],["NIOTLSCipher",18,15],[".",17],["RawValue",18,216],[")",17]],"s":[["init",10],["(",17],["NIOTLSCipher",18],[".",17],["RawValue",18],[")",17]]},{"p":["NIOSSLContext","init(configuration:passphraseCallback:)"],"f":[["convenience",12],[" ",17],["init",10],["<",17],["T",0],[">(",17],["configuration",1],[": ",17],["TLSConfiguration",18,17],[", ",17],["passphraseCallback",1],[": ",17],["@escaping",12],[" ",17],["NIOSSLPassphraseCallback",18,226],["<",17],["T",18],[">) ",17],["throws",12],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["Collection",18,281],[", ",17],["T",18],[".",17],["Element",18],[" == ",17],["UInt8",18,290]],"s":[["convenience",12],[" ",17],["init",10],["<",17],["T",0],[">(",17],["configuration",1],[": ",17],["TLSConfiguration",18],[", ",17],["passphraseCallback",1],[": ",17],["NIOSSLPassphraseCallback",18],["<",17],["T",18],[">) ",17],["throws",12]],"c":[["T",1,"Collection",281],["T.Element",2,"UInt8",290]],"g":[["T",0,0]],"d":"Initialize a context that will create multiple connections, all with the same\nconfiguration, along with a callback that will be called when needed to decrypt any\nencrypted private keys.\n\n- Note: Creating a `NIOSSLContext` is a very expensive operation because BoringSSL will usually need to load and\n        parse large number of certificates from the system trust store. Therefore, creating a\n        `NIOSSLContext` will likely allocate many thousand times and will also _perform blocking disk I/O_.\n\n- Warning: Avoid creating `NIOSSLContext`s on any `EventLoop` because it does _blocking disk I/O_.\n\n- parameters:\n    - configuration: The `TLSConfiguration` to use for all the connections with this\n        `NIOSSLContext`.\n    - passphraseCallback: The callback to use to decrypt any private keys used by this\n        `NIOSSLContext`. For more details on this parameter see the documentation for\n        `NIOSSLPassphraseCallback`."},{"p":["NIOSSLContext","init(configuration:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["configuration",1],[": ",17],["TLSConfiguration",18,17],[") ",17],["throws",12]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["configuration",1],[": ",17],["TLSConfiguration",18],[") ",17],["throws",12]],"d":"Initialize a context that will create multiple connections, all with the same\nconfiguration.\n\n- Note: Creating a `NIOSSLContext` is a very expensive operation because BoringSSL will usually need to load and\n        parse large number of certificates from the system trust store. Therefore, creating a\n        `NIOSSLContext` will likely allocate many thousand times and will also _perform blocking disk I/O_.\n\n- Warning: Avoid creating `NIOSSLContext`s on any `EventLoop` because it does _blocking disk I/O_."},{"p":["NIOSSLPrivateKey","init(customPrivateKey:)"],"f":[["init",10],["<",17],["CustomKey",0],[">(",17],["customPrivateKey",1],[": ",17],["CustomKey",18],[") ",17],["where",12],[" ",17],["CustomKey",18],[" : ",17],["NIOSSLCustomPrivateKey",18,2],[", ",17],["CustomKey",18],[" : ",17],["Hashable",18,268]],"s":[["init",10],["<",17],["CustomKey",0],[">(",17],["customPrivateKey",1],[": ",17],["CustomKey",18],[")",17]],"c":[["CustomKey",1,"NIOSSLCustomPrivateKey",2],["CustomKey",1,"Hashable",268]],"g":[["CustomKey",0,0]],"d":"Create a `NIOSSLPrivateKey` from a custom private key callback.\n\nThe private key, in addition to needing to conform to `NIOSSLCustomPrivateKey`,\nis also required to be `Hashable`. This is because `NIOSSLPrivateKey`s are `Hashable`.\n\n- parameters:\n    - customPrivateKey: The custom private key to use with the TLS certificate."},{"p":["NIOSSLPrivateKey","init(file:format:passphraseCallback:)"],"f":[["convenience",12],[" ",17],["init",10],["<",17],["T",0],[">(",17],["file",1],[": ",17],["String",18,273],[", ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18,14],[", ",17],["passphraseCallback",1],[": ",17],["@escaping",12],[" ",17],["NIOSSLPassphraseCallback",18,226],["<",17],["T",18],[">) ",17],["throws",12],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["Collection",18,281],[", ",17],["T",18],[".",17],["Element",18],[" == ",17],["UInt8",18,290]],"s":[["convenience",12],[" ",17],["init",10],["<",17],["T",0],[">(",17],["file",1],[": ",17],["String",18],[", ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18],[", ",17],["passphraseCallback",1],[": ",17],["NIOSSLPassphraseCallback",18],["<",17],["T",18],[">) ",17],["throws",12]],"c":[["T",1,"Collection",281],["T.Element",2,"UInt8",290]],"g":[["T",0,0]],"d":"Create an NIOSSLPrivateKey from a file at a given path in either PEM or\nDER format, providing a passphrase callback.\n\n- parameters:\n    - file: The path to the file to load.\n    - format: The format of the key to load, either DER or PEM.\n    - passphraseCallback: A callback to invoke to obtain the passphrase for\n        encrypted keys."},{"p":["NIOSSLPrivateKey","init(file:format:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["file",1],[": ",17],["String",18,273],[", ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18,14],[") ",17],["throws",12]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["file",1],[": ",17],["String",18],[", ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18],[") ",17],["throws",12]],"d":"Create an NIOSSLPrivateKey from a file at a given path in either PEM or\nDER format, providing a passphrase callback.\n\n- parameters:\n    - file: The path to the file to load.\n    - format: The format of the key to load, either DER or PEM."},{"p":["NIOSSLPrivateKey","init(bytes:format:passphraseCallback:)"],"f":[["convenience",12],[" ",17],["init",10],["<",17],["T",0],[">(",17],["bytes",1],[": [",17],["UInt8",18,290],["], ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18,14],[", ",17],["passphraseCallback",1],[": ",17],["@escaping",12],[" ",17],["NIOSSLPassphraseCallback",18,226],["<",17],["T",18],[">) ",17],["throws",12],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["Collection",18,281],[", ",17],["T",18],[".",17],["Element",18],[" == ",17],["UInt8",18,290]],"s":[["convenience",12],[" ",17],["init",10],["<",17],["T",0],[">(",17],["bytes",1],[": [",17],["UInt8",18],["], ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18],[", ",17],["passphraseCallback",1],[": ",17],["NIOSSLPassphraseCallback",18],["<",17],["T",18],[">) ",17],["throws",12]],"c":[["T",1,"Collection",281],["T.Element",2,"UInt8",290]],"g":[["T",0,0]],"d":"Create an NIOSSLPrivateKey from a buffer of bytes in either PEM or\nDER format.\n\n- parameters:\n    - bytes: The key bytes.\n    - format: The format of the key to load, either DER or PEM.\n    - passphraseCallback: Optionally a callback to invoke to obtain the passphrase for\n        encrypted keys. If not provided, or set to `nil`, the default BoringSSL\n        behaviour will be used, which prints a prompt and requests the passphrase from\n        stdin."},{"p":["NIOSSLPrivateKey","init(bytes:format:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["bytes",1],[": [",17],["UInt8",18,290],["], ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18,14],[") ",17],["throws",12]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["bytes",1],[": [",17],["UInt8",18],["], ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18],[") ",17],["throws",12]],"d":"Create an NIOSSLPrivateKey from a buffer of bytes in either PEM or\nDER format.\n\n- parameters:\n    - bytes: The key bytes.\n    - format: The format of the key to load, either DER or PEM."},{"p":["NIOSSLPrivateKey","init(buffer:format:passphraseCallback:)"],"f":[["convenience",12],[" ",17],["init",10],["<",17],["T",0],[">(",17],["buffer",1],[": [",17],["Int8",18,287],["], ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18,14],[", ",17],["passphraseCallback",1],[": ",17],["@escaping",12],[" ",17],["NIOSSLPassphraseCallback",18,226],["<",17],["T",18],[">) ",17],["throws",12],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["Collection",18,281],[", ",17],["T",18],[".",17],["Element",18],[" == ",17],["UInt8",18,290]],"s":[["convenience",12],[" ",17],["init",10],["<",17],["T",0],[">(",17],["buffer",1],[": [",17],["Int8",18],["], ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18],[", ",17],["passphraseCallback",1],[": ",17],["NIOSSLPassphraseCallback",18],["<",17],["T",18],[">) ",17],["throws",12]],"a":{"a":{"d":true,"r":"NIOSSLPrivateKey.init(bytes:format:passphraseCallback:)"}},"c":[["T",1,"Collection",281],["T.Element",2,"UInt8",290]],"g":[["T",0,0]],"d":"Create an NIOSSLPrivateKey from a buffer of bytes in either PEM or\nDER format.\n\n- parameters:\n    - buffer: The key bytes.\n    - format: The format of the key to load, either DER or PEM.\n    - passphraseCallback: Optionally a callback to invoke to obtain the passphrase for\n        encrypted keys. If not provided, or set to `nil`, the default BoringSSL\n        behaviour will be used, which prints a prompt and requests the passphrase from\n        stdin.\n- SeeAlso: `NIOSSLPrivateKey.init(bytes:format:passphraseCallback:)`"},{"p":["NIOSSLPrivateKey","init(buffer:format:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["buffer",1],[": [",17],["Int8",18,287],["], ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18,14],[") ",17],["throws",12]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["buffer",1],[": [",17],["Int8",18],["], ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18],[") ",17],["throws",12]],"a":{"a":{"d":true,"r":"NIOSSLPrivateKey.init(bytes:format:)"}},"d":"Create an NIOSSLPrivateKey from a buffer of bytes in either PEM or\nDER format.\n\n- parameters:\n    - buffer: The key bytes.\n    - format: The format of the key to load, either DER or PEM.\n- SeeAlso: `NIOSSLPrivateKey.init(bytes:format:)`"},{"p":["NIOSSLCertificate","init(file:format:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["file",1],[": ",17],["String",18,273],[", ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18,14],[") ",17],["throws",12]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["file",1],[": ",17],["String",18],[", ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18],[") ",17],["throws",12]],"d":"Create a NIOSSLCertificate from a file at a given path in either PEM or\nDER format.\n\nNote that this method will only ever load the first certificate from a given file."},{"p":["NIOSSLCertificate","init(bytes:format:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["bytes",1],[": [",17],["UInt8",18,290],["], ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18,14],[") ",17],["throws",12]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["bytes",1],[": [",17],["UInt8",18],["], ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18],[") ",17],["throws",12]],"d":"Create a NIOSSLCertificate from a buffer of bytes in either PEM or\nDER format."},{"p":["NIOSSLCertificate","init(buffer:format:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["buffer",1],[": [",17],["Int8",18,287],["], ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18,14],[") ",17],["throws",12]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["buffer",1],[": [",17],["Int8",18],["], ",17],["format",1],[": ",17],["NIOSSLSerializationFormats",18],[") ",17],["throws",12]],"a":{"a":{"d":true,"r":"NIOSSLCertificate.init(bytes:format:)"}},"d":"Create a NIOSSLCertificate from a buffer of bytes in either PEM or\nDER format.\n\n- SeeAlso: `NIOSSLCertificate.init(bytes:format:)`"},{"p":["NIOSSLPKCS12Bundle","init(file:passphrase:)"],"f":[["init",10],["<",17],["Bytes",0],[">(",17],["file",1],[": ",17],["String",18,273],[", ",17],["passphrase",1],[": ",17],["Bytes",18],["?) ",17],["throws",12],[" ",17],["where",12],[" ",17],["Bytes",18],[" : ",17],["Collection",18,281],[", ",17],["Bytes",18],[".",17],["Element",18],[" == ",17],["UInt8",18,290]],"s":[["init",10],["<",17],["Bytes",0],[">(",17],["file",1],[": ",17],["String",18],[", ",17],["passphrase",1],[": ",17],["Bytes",18],["?) ",17],["throws",12]],"c":[["Bytes",1,"Collection",281],["Bytes.Element",2,"UInt8",290]],"g":[["Bytes",0,0]],"d":"Create a `NIOSSLPKCS12Bundle` from the given bytes on disk,\noptionally decrypting the bundle with the given passphrase.\n\n- parameters:\n    - file: The path to the PKCS#12 bundle on disk.\n    - passphrase: The passphrase used for the bundle, as a sequence of UTF-8 bytes."},{"p":["NIOSSLPKCS12Bundle","init(file:)"],"f":[["init",10],["(",17],["file",1],[": ",17],["String",18,273],[") ",17],["throws",12]],"s":[["init",10],["(",17],["file",1],[": ",17],["String",18],[") ",17],["throws",12]],"d":"Create a `NIOSSLPKCS12Bundle` from the given bytes on disk,\nassuming it has no passphrase.\n\nIf the bundle does have a passphrase, call `init(file:passphrase:)` instead.\n\n- parameters:\n    - file: The path to the PKCS#12 bundle on disk."},{"p":["NIOSSLPKCS12Bundle","init(buffer:passphrase:)"],"f":[["init",10],["<",17],["Bytes",0],[">(",17],["buffer",1],[": [",17],["UInt8",18,290],["], ",17],["passphrase",1],[": ",17],["Bytes",18],["?) ",17],["throws",12],[" ",17],["where",12],[" ",17],["Bytes",18],[" : ",17],["Collection",18,281],[", ",17],["Bytes",18],[".",17],["Element",18],[" == ",17],["UInt8",18,290]],"s":[["init",10],["<",17],["Bytes",0],[">(",17],["buffer",1],[": [",17],["UInt8",18],["], ",17],["passphrase",1],[": ",17],["Bytes",18],["?) ",17],["throws",12]],"c":[["Bytes",1,"Collection",281],["Bytes.Element",2,"UInt8",290]],"g":[["Bytes",0,0]],"d":"Create a `NIOSSLPKCS12Bundle` from the given bytes in memory,\noptionally decrypting the bundle with the given passphrase.\n\n- parameters:\n    - buffer: The bytes of the PKCS#12 bundle.\n    - passphrase: The passphrase used for the bundle, as a sequence of UTF-8 bytes."},{"p":["NIOSSLPKCS12Bundle","init(buffer:)"],"f":[["init",10],["(",17],["buffer",1],[": [",17],["UInt8",18,290],["]) ",17],["throws",12]],"s":[["init",10],["(",17],["buffer",1],[": [",17],["UInt8",18],["]) ",17],["throws",12]],"d":"Create a `NIOSSLPKCS12Bundle` from the given bytes in memory,\nassuming it has no passphrase.\n\nIf the bundle does have a passphrase, call `init(buffer:passphrase:)` instead.\n\n- parameters:\n    - buffer: The bytes of the PKCS#12 bundle."},{"p":["SignatureAlgorithm","init(rawValue:)"],"f":[["init",10],["(",17],["rawValue",1],[": ",17],["UInt16",18,292],[")",17]],"s":[["init",10],["(",17],["rawValue",1],[": ",17],["UInt16",18],[")",17]]},{"p":["NIOSSLClientHandler","init(context:serverHostname:verificationCallback:)"],"f":[["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18,24],[", ",17],["serverHostname",1],[": ",17],["String",18,273],["?, ",17],["verificationCallback",1],[": ",17],["NIOSSLVerificationCallback",18,227],["? = nil) ",17],["throws",12]],"s":[["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18],[", ",17],["serverHostname",1],[": ",17],["String",18],["?, ",17],["verificationCallback",1],[": ",17],["NIOSSLVerificationCallback",18],["?) ",17],["throws",12]],"a":{"a":{"d":true,"r":"init(context:serverHostname:customVerificationCallback:)"}}},{"p":["NIOSSLClientHandler","init(context:serverHostname:customVerificationCallback:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18,24],[", ",17],["serverHostname",1],[": ",17],["String",18,273],["?, ",17],["customVerificationCallback",1],[": ",17],["@escaping",12],[" ",17],["NIOSSLCustomVerificationCallback",18,228],[") ",17],["throws",12]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18],[", ",17],["serverHostname",1],[": ",17],["String",18],["?, ",17],["customVerificationCallback",1],[": ",17],["NIOSSLCustomVerificationCallback",18],[") ",17],["throws",12]]},{"p":["NIOSSLClientHandler","init(context:serverHostname:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18,24],[", ",17],["serverHostname",1],[": ",17],["String",18,273],["?) ",17],["throws",12]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18],[", ",17],["serverHostname",1],[": ",17],["String",18],["?) ",17],["throws",12]]},{"p":["NIOSSLServerHandler","init(context:verificationCallback:)"],"f":[["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18,24],[", ",17],["verificationCallback",1],[": ",17],["NIOSSLVerificationCallback",18,227],["? = nil) ",17],["throws",12]],"s":[["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18],[", ",17],["verificationCallback",1],[": ",17],["NIOSSLVerificationCallback",18],["?) ",17],["throws",12]],"a":{"a":{"d":true,"r":"init(context:customVerificationCallback:)"}}},{"p":["NIOSSLServerHandler","init(context:customVerificationCallback:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18,24],[", ",17],["customVerificationCallback",1],[": ",17],["@escaping",12],[" ",17],["NIOSSLCustomVerificationCallback",18,228],[")",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18],[", ",17],["customVerificationCallback",1],[": ",17],["NIOSSLCustomVerificationCallback",18],[")",17]]},{"p":["NIOSSLServerHandler","init(context:)"],"f":[["convenience",12],[" ",17],["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18,24],[")",17]],"s":[["convenience",12],[" ",17],["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18],[")",17]]},{"p":["NIOSSLObjectIdentifier","init(_:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["string",2],[": ",17],["String",18,273],[")",17]],"s":[["init",10],["?(",17],["String",18],[")",17]],"d":"Creates a Object Identifier (OID) from its textual dotted representation (e.g. `1.2.3`)\n- Parameter string: textual dotted representation of an OID"},{"p":["NIOSSLClientTLSProvider","init(context:serverHostname:customVerificationCallback:)"],"f":[["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18,24],[", ",17],["serverHostname",1],[": ",17],["String",18,273],["?, ",17],["customVerificationCallback",1],[": ",17],["NIOSSLCustomVerificationCallback",18,228],["? = nil) ",17],["throws",12]],"s":[["init",10],["(",17],["context",1],[": ",17],["NIOSSLContext",18],[", ",17],["serverHostname",1],[": ",17],["String",18],["?, ",17],["customVerificationCallback",1],[": ",17],["NIOSSLCustomVerificationCallback",18],["?) ",17],["throws",12]],"c":[["Bootstrap",1,"NIOClientTCPBootstrapProtocol",264]],"g":[["Bootstrap",0,0]],"d":"Construct the TLS provider with the necessary configuration."},{"p":["NIOTLSCipher","TLS_AES_128_GCM_SHA256"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_AES_128_GCM_SHA256",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_AES_128_GCM_SHA256",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_AES_256_GCM_SHA384"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_AES_256_GCM_SHA384",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_AES_256_GCM_SHA384",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_CHACHA20_POLY1305_SHA256"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_CHACHA20_POLY1305_SHA256",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_CHACHA20_POLY1305_SHA256",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_RSA_WITH_AES_128_CBC_SHA"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_RSA_WITH_AES_128_CBC_SHA",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_RSA_WITH_AES_128_CBC_SHA",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_RSA_WITH_AES_256_CBC_SHA"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_RSA_WITH_AES_256_CBC_SHA",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_RSA_WITH_AES_256_CBC_SHA",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_RSA_WITH_AES_128_GCM_SHA256"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_RSA_WITH_AES_128_GCM_SHA256",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_RSA_WITH_AES_128_GCM_SHA256",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_RSA_WITH_AES_256_GCM_SHA384"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_RSA_WITH_AES_256_GCM_SHA384",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_RSA_WITH_AES_256_GCM_SHA384",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOTLSCipher","TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"],"f":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",7],[": ",17],["NIOTLSCipher",18,15]],"s":[["static",12],[" ",17],["let",12],[" ",17],["TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",7],[": ",17],["NIOTLSCipher",18]]},{"p":["NIOSSLExtraError","invalidSNIHostname"],"f":[["static",12],[" ",17],["let",12],[" ",17],["invalidSNIHostname",7],[": ",17],["NIOSSLExtraError",18,16]],"s":[["static",12],[" ",17],["let",12],[" ",17],["invalidSNIHostname",7],[": ",17],["NIOSSLExtraError",18]],"d":"The SNI hostname requirements have not been met.\n\n- note: Should the provided SNI hostname be an IP address instead, `.cannotUseIPAddressInSNI` is thrown instead\n        of this error.\n\nReasons a hostname might not meet the requirements:\n- hostname in UTF8 is more than 255 bytes\n- hostname is the empty string\n- hostname contains the `0` unicode scalar (which would be encoded as the `0` byte which is unsupported)."},{"p":["NIOSSLExtraError","cannotUseIPAddressInSNI"],"f":[["static",12],[" ",17],["let",12],[" ",17],["cannotUseIPAddressInSNI",7],[": ",17],["NIOSSLExtraError",18,16]],"s":[["static",12],[" ",17],["let",12],[" ",17],["cannotUseIPAddressInSNI",7],[": ",17],["NIOSSLExtraError",18]],"d":"IP addresses may not be used in SNI."},{"p":["NIOSSLExtraError","failedToValidateHostname"],"f":[["static",12],[" ",17],["let",12],[" ",17],["failedToValidateHostname",7],[": ",17],["NIOSSLExtraError",18,16]],"s":[["static",12],[" ",17],["let",12],[" ",17],["failedToValidateHostname",7],[": ",17],["NIOSSLExtraError",18]],"d":"NIOSSL was unable to validate the hostname presented by the remote peer."},{"p":["NIOSSLExtraError","serverHostnameImpossibleToMatch"],"f":[["static",12],[" ",17],["let",12],[" ",17],["serverHostnameImpossibleToMatch",7],[": ",17],["NIOSSLExtraError",18,16]],"s":[["static",12],[" ",17],["let",12],[" ",17],["serverHostnameImpossibleToMatch",7],[": ",17],["NIOSSLExtraError",18]],"d":"The server hostname provided by the user cannot match any names in the certificate due to containing invalid characters."},{"p":["TLSConfiguration","clientDefault"],"f":[["static",12],[" ",17],["let",12],[" ",17],["clientDefault",7],[": ",17],["TLSConfiguration",18,17]],"s":[["static",12],[" ",17],["let",12],[" ",17],["clientDefault",7],[": ",17],["TLSConfiguration",18]],"d":"A default TLS configuration for client use."},{"p":["SignatureAlgorithm","rsaPkcs1Sha1"],"f":[["static",12],[" ",17],["let",12],[" ",17],["rsaPkcs1Sha1",7],[": ",17],["SignatureAlgorithm",18,19]],"s":[["static",12],[" ",17],["let",12],[" ",17],["rsaPkcs1Sha1",7],[": ",17],["SignatureAlgorithm",18]]},{"p":["SignatureAlgorithm","rsaPkcs1Sha256"],"f":[["static",12],[" ",17],["let",12],[" ",17],["rsaPkcs1Sha256",7],[": ",17],["SignatureAlgorithm",18,19]],"s":[["static",12],[" ",17],["let",12],[" ",17],["rsaPkcs1Sha256",7],[": ",17],["SignatureAlgorithm",18]]},{"p":["SignatureAlgorithm","rsaPkcs1Sha384"],"f":[["static",12],[" ",17],["let",12],[" ",17],["rsaPkcs1Sha384",7],[": ",17],["SignatureAlgorithm",18,19]],"s":[["static",12],[" ",17],["let",12],[" ",17],["rsaPkcs1Sha384",7],[": ",17],["SignatureAlgorithm",18]]},{"p":["SignatureAlgorithm","rsaPkcs1Sha512"],"f":[["static",12],[" ",17],["let",12],[" ",17],["rsaPkcs1Sha512",7],[": ",17],["SignatureAlgorithm",18,19]],"s":[["static",12],[" ",17],["let",12],[" ",17],["rsaPkcs1Sha512",7],[": ",17],["SignatureAlgorithm",18]]},{"p":["SignatureAlgorithm","rsaPssRsaeSha256"],"f":[["static",12],[" ",17],["let",12],[" ",17],["rsaPssRsaeSha256",7],[": ",17],["SignatureAlgorithm",18,19]],"s":[["static",12],[" ",17],["let",12],[" ",17],["rsaPssRsaeSha256",7],[": ",17],["SignatureAlgorithm",18]]},{"p":["SignatureAlgorithm","rsaPssRsaeSha384"],"f":[["static",12],[" ",17],["let",12],[" ",17],["rsaPssRsaeSha384",7],[": ",17],["SignatureAlgorithm",18,19]],"s":[["static",12],[" ",17],["let",12],[" ",17],["rsaPssRsaeSha384",7],[": ",17],["SignatureAlgorithm",18]]},{"p":["SignatureAlgorithm","rsaPssRsaeSha512"],"f":[["static",12],[" ",17],["let",12],[" ",17],["rsaPssRsaeSha512",7],[": ",17],["SignatureAlgorithm",18,19]],"s":[["static",12],[" ",17],["let",12],[" ",17],["rsaPssRsaeSha512",7],[": ",17],["SignatureAlgorithm",18]]},{"p":["SignatureAlgorithm","ecdsaSecp256R1Sha256"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ecdsaSecp256R1Sha256",7],[": ",17],["SignatureAlgorithm",18,19]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ecdsaSecp256R1Sha256",7],[": ",17],["SignatureAlgorithm",18]]},{"p":["SignatureAlgorithm","ecdsaSecp384R1Sha384"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ecdsaSecp384R1Sha384",7],[": ",17],["SignatureAlgorithm",18,19]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ecdsaSecp384R1Sha384",7],[": ",17],["SignatureAlgorithm",18]]},{"p":["SignatureAlgorithm","ecdsaSecp521R1Sha512"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ecdsaSecp521R1Sha512",7],[": ",17],["SignatureAlgorithm",18,19]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ecdsaSecp521R1Sha512",7],[": ",17],["SignatureAlgorithm",18]]},{"p":["SignatureAlgorithm","ed25519"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ed25519",7],[": ",17],["SignatureAlgorithm",18,19]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ed25519",7],[": ",17],["SignatureAlgorithm",18]]},{"p":["SignatureAlgorithm","ecdsaSha1"],"f":[["static",12],[" ",17],["let",12],[" ",17],["ecdsaSha1",7],[": ",17],["SignatureAlgorithm",18,19]],"s":[["static",12],[" ",17],["let",12],[" ",17],["ecdsaSha1",7],[": ",17],["SignatureAlgorithm",18]]},{"p":["BoringSSLInternalError","eofDuringHandshake"],"f":[["static",12],[" ",17],["let",12],[" ",17],["eofDuringHandshake",7],[": ",17],["BoringSSLInternalError",18,20]],"s":[["static",12],[" ",17],["let",12],[" ",17],["eofDuringHandshake",7],[": ",17],["BoringSSLInternalError",18]],"d":"Received EOF during the TLS handshake."},{"p":["BoringSSLInternalError","eofDuringAdditionalCertficiateChainValidation"],"f":[["static",12],[" ",17],["let",12],[" ",17],["eofDuringAdditionalCertficiateChainValidation",7],[": ",17],["BoringSSLInternalError",18,20]],"s":[["static",12],[" ",17],["let",12],[" ",17],["eofDuringAdditionalCertficiateChainValidation",7],[": ",17],["BoringSSLInternalError",18]],"d":"Received EOF during additional certificate chain verification."},{"p":["NIOTLSCipher","rawValue"],"f":[["var",12],[" ",17],["rawValue",7],[": ",17],["UInt16",18,292]],"s":[["var",12],[" ",17],["rawValue",7],[": ",17],["UInt16",18]]},{"p":["NIOSSLHandler","tlsVersion"],"f":[["var",12],[" ",17],["tlsVersion",7],[": ",17],["TLSVersion",18,3],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["tlsVersion",7],[": ",17],["TLSVersion",18],["?",17]],"d":"Variable that can be queried during the connection lifecycle to grab the `TLSVersion` used on the `SSLConnection`."},{"p":["NIOSSLExtraError","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,273],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["TLSConfiguration","privateKey"],"f":[["var",12],[" ",17],["privateKey",7],[": ",17],["NIOSSLPrivateKeySource",18,8],["?",17]],"s":[["var",12],[" ",17],["privateKey",7],[": ",17],["NIOSSLPrivateKeySource",18],["?",17]],"d":"The private key associated with the leaf certificate."},{"p":["TLSConfiguration","trustRoots"],"f":[["var",12],[" ",17],["trustRoots",7],[": ",17],["NIOSSLTrustRoots",18,6],["?",17]],"s":[["var",12],[" ",17],["trustRoots",7],[": ",17],["NIOSSLTrustRoots",18],["?",17]],"d":"The trust roots to use to validate certificates. This only needs to be provided if you intend to validate\ncertificates.\n\n- NOTE: If certificate validation is enabled and `trustRoots` is `nil` then the system default root of\ntrust is used (as if `trustRoots` had been explicitly set to `.default`).\n\n- NOTE: If a directory path is used here to load a directory of certificates into a configuration, then the\n        certificates in this directory must be formatted by c_rehash to create the rehash file format of HHHHHHHH.D with a symlink."},{"p":["TLSConfiguration","cipherSuites"],"f":[["var",12],[" ",17],["cipherSuites",7],[": ",17],["String",18,273]],"s":[["var",12],[" ",17],["cipherSuites",7],[": ",17],["String",18]],"d":"The pre-TLS1.3 cipher suites supported by this handler. This uses the OpenSSL cipher string format.\nTLS 1.3 cipher suites cannot be configured."},{"p":["TLSConfiguration","keyLogCallback"],"f":[["var",12],[" ",17],["keyLogCallback",7],[": ",17],["NIOSSLKeyLogCallback",18,222],["?",17]],"s":[["var",12],[" ",17],["keyLogCallback",7],[": ",17],["NIOSSLKeyLogCallback",18],["?",17]],"d":"A callback that can be used to implement `SSLKEYLOGFILE` support."},{"p":["TLSConfiguration","sendCANameList"],"f":[["var",12],[" ",17],["sendCANameList",7],[": ",17],["Bool",18,280]],"s":[["var",12],[" ",17],["sendCANameList",7],[": ",17],["Bool",18]],"d":"Send the CA names derived from the `trustRoots`  for client authentication.\nThis instructs the client which identities can be used by evaluating what CA the identity certificate was issued from."},{"p":["TLSConfiguration","shutdownTimeout"],"f":[["var",12],[" ",17],["shutdownTimeout",7],[": ",17],["TimeAmount",18,231]],"s":[["var",12],[" ",17],["shutdownTimeout",7],[": ",17],["TimeAmount",18]],"d":"The amount of time to wait after initiating a shutdown before performing an unclean\nshutdown. Defaults to 5 seconds."},{"p":["TLSConfiguration","certificateChain"],"f":[["var",12],[" ",17],["certificateChain",7],[": [",17],["NIOSSLCertificateSource",18,11],["]",17]],"s":[["var",12],[" ",17],["certificateChain",7],[": [",17],["NIOSSLCertificateSource",18],["]",17]],"d":"The certificates to offer during negotiation. If not present, no certificates will be offered."},{"p":["TLSConfiguration","cipherSuiteValues"],"f":[["var",12],[" ",17],["cipherSuiteValues",7],[": [",17],["NIOTLSCipher",18,15],["] { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["cipherSuiteValues",7],[": [",17],["NIOTLSCipher",18],["]",17]],"d":"Public property used to set the internal cipherSuites from NIOTLSCipher."},{"p":["TLSConfiguration","maximumTLSVersion"],"f":[["var",12],[" ",17],["maximumTLSVersion",7],[": ",17],["TLSVersion",18,3],["?",17]],"s":[["var",12],[" ",17],["maximumTLSVersion",7],[": ",17],["TLSVersion",18],["?",17]],"d":"The maximum TLS version to allow in negotiation. If nil, there is no upper limit. Defaults to nil."},{"p":["TLSConfiguration","minimumTLSVersion"],"f":[["var",12],[" ",17],["minimumTLSVersion",7],[": ",17],["TLSVersion",18,3]],"s":[["var",12],[" ",17],["minimumTLSVersion",7],[": ",17],["TLSVersion",18]],"d":"The minimum TLS version to allow in negotiation. Defaults to tlsv1."},{"p":["TLSConfiguration","additionalTrustRoots"],"f":[["var",12],[" ",17],["additionalTrustRoots",7],[": [",17],["NIOSSLAdditionalTrustRoots",18,13],["]",17]],"s":[["var",12],[" ",17],["additionalTrustRoots",7],[": [",17],["NIOSSLAdditionalTrustRoots",18],["]",17]],"d":"Additional trust roots to use to validate certificates, used in addition to `trustRoots`."},{"p":["TLSConfiguration","applicationProtocols"],"f":[["var",12],[" ",17],["applicationProtocols",7],[": [",17],["String",18,273],["] { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["applicationProtocols",7],[": [",17],["String",18],["]",17]],"d":"The application protocols to use in the connection. Should be an ordered list of ASCII\nstrings representing the ALPN identifiers of the protocols to negotiate. For clients,\nthe protocols will be offered in the order given. For servers, the protocols will be matched\nagainst the client's offered protocols in order."},{"p":["TLSConfiguration","renegotiationSupport"],"f":[["var",12],[" ",17],["renegotiationSupport",7],[": ",17],["NIORenegotiationSupport",18,10]],"s":[["var",12],[" ",17],["renegotiationSupport",7],[": ",17],["NIORenegotiationSupport",18]],"d":"Whether renegotiation is supported."},{"p":["TLSConfiguration","certificateVerification"],"f":[["var",12],[" ",17],["certificateVerification",7],[": ",17],["CertificateVerification",18,9]],"s":[["var",12],[" ",17],["certificateVerification",7],[": ",17],["CertificateVerification",18]],"d":"Whether to verify remote certificates."},{"p":["TLSConfiguration","verifySignatureAlgorithms"],"f":[["var",12],[" ",17],["verifySignatureAlgorithms",7],[": [",17],["SignatureAlgorithm",18,19],["]?",17]],"s":[["var",12],[" ",17],["verifySignatureAlgorithms",7],[": [",17],["SignatureAlgorithm",18],["]?",17]],"d":"Allowed algorithms to verify signatures. Passing nil means, that a built-in set of algorithms will be used."},{"p":["TLSConfiguration","signingSignatureAlgorithms"],"f":[["var",12],[" ",17],["signingSignatureAlgorithms",7],[": [",17],["SignatureAlgorithm",18,19],["]?",17]],"s":[["var",12],[" ",17],["signingSignatureAlgorithms",7],[": [",17],["SignatureAlgorithm",18],["]?",17]],"d":"Allowed algorithms to sign signatures. Passing nil means, that a built-in set of algorithms will be used."},{"p":["NIOSSLCertificate","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,273],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["NIOSSLCertificate","serialNumber"],"f":[["var",12],[" ",17],["serialNumber",7],[": [",17],["UInt8",18,290],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["serialNumber",7],[": [",17],["UInt8",18],["]",17]]},{"p":["NIOSSLCertificate","notValidAfter"],"f":[["var",12],[" ",17],["notValidAfter",7],[": ",17],["time_t",18,229],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["notValidAfter",7],[": ",17],["time_t",18]],"d":"Returns the timestamp after which this certificate is not valid.\n\nThe value is in seconds since the UNIX epoch."},{"p":["NIOSSLCertificate","notValidBefore"],"f":[["var",12],[" ",17],["notValidBefore",7],[": ",17],["time_t",18,229],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["notValidBefore",7],[": ",17],["time_t",18]],"d":"Returns the timestamp before which this certificate is not valid.\n\nThe value is in seconds since the UNIX epoch."},{"p":["NIOSSLPKCS12Bundle","privateKey"],"f":[["let",12],[" ",17],["privateKey",7],[": ",17],["NIOSSLPrivateKey",18,27]],"s":[["let",12],[" ",17],["privateKey",7],[": ",17],["NIOSSLPrivateKey",18]]},{"p":["NIOSSLPKCS12Bundle","certificateChain"],"f":[["let",12],[" ",17],["certificateChain",7],[": [",17],["NIOSSLCertificate",18,28],["]",17]],"s":[["let",12],[" ",17],["certificateChain",7],[": [",17],["NIOSSLCertificate",18],["]",17]]},{"p":["SignatureAlgorithm","rawValue"],"f":[["var",12],[" ",17],["rawValue",7],[": ",17],["UInt16",18,292]],"s":[["var",12],[" ",17],["rawValue",7],[": ",17],["UInt16",18]]},{"p":["BoringSSLInternalError","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,273],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["NIOSSLCustomPrivateKey","signatureAlgorithms"],"f":[["var",12],[" ",17],["signatureAlgorithms",7],[": [",17],["SignatureAlgorithm",18,19],["] { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["signatureAlgorithms",7],[": [",17],["SignatureAlgorithm",18],["]",17]],"d":"The signature algorithms supported by this key."},{"p":["NIOSSLObjectIdentifier","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,273],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]]},{"p":["TLSConfiguration","makeClientConfiguration()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeClientConfiguration",7],["() -> ",17],["TLSConfiguration",18,17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeClientConfiguration",7],["() -> ",17],["TLSConfiguration",18]],"d":"Creates a TLS configuration for use with client-side contexts.\n\nThis provides sensible defaults, and can be used without customisation. For server-side\ncontexts, you should use `makeServerConfiguration` instead.\n\nFor customising fields, modify the returned TLSConfiguration object."},{"p":["TLSConfiguration","makeServerConfiguration(certificateChain:privateKey:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["makeServerConfiguration",7],["(",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18,11],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18,8],[") -> ",17],["TLSConfiguration",18,17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["makeServerConfiguration",7],["(",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18],[") -> ",17],["TLSConfiguration",18]],"d":"Create a TLS configuration for use with server-side contexts.\n\nThis provides sensible defaults while requiring that you provide any data that is necessary\nfor server-side function. For client use, try `makeClientConfiguration` instead.\n\nFor customising fields, modify the returned TLSConfiguration object."},{"p":["TLSConfiguration","forClient(cipherSuites:minimumTLSVersion:maximumTLSVersion:certificateVerification:trustRoots:certificateChain:privateKey:applicationProtocols:shutdownTimeout:keyLogCallback:renegotiationSupport:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["forClient",7],["(",17],["cipherSuites",1],[": ",17],["String",18,273],[" = defaultCipherSuites, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18,3],[" = .tlsv1, ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18,3],["? = nil, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18,9],[" = .fullVerification, ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18,6],[" = .default, ",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18,11],["] = [], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18,8],["? = nil, ",17],["applicationProtocols",1],[": [",17],["String",18,273],["] = [], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18,231],[" = .seconds(5), ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18,222],["? = nil, ",17],["renegotiationSupport",1],[": ",17],["NIORenegotiationSupport",18,10],[") -> ",17],["TLSConfiguration",18,17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["forClient",7],["(",17],["cipherSuites",1],[": ",17],["String",18],[", ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18],[", ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18],["?, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18],[", ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18],[", ",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18],["?, ",17],["applicationProtocols",1],[": [",17],["String",18],["], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18],[", ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18],["?, ",17],["renegotiationSupport",1],[": ",17],["NIORenegotiationSupport",18],[") -> ",17],["TLSConfiguration",18]],"a":{"a":{"d":true,"r":"makeClientConfiguration()"}},"d":"Creates a TLS configuration for use with client-side contexts.\n\nThis provides sensible defaults, and can be used without customisation. For server-side\ncontexts, you should use `makeServerConfiguration` instead."},{"p":["TLSConfiguration","forClient(cipherSuites:minimumTLSVersion:maximumTLSVersion:certificateVerification:trustRoots:certificateChain:privateKey:applicationProtocols:shutdownTimeout:keyLogCallback:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["forClient",7],["(",17],["cipherSuites",1],[": ",17],["String",18,273],[" = defaultCipherSuites, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18,3],[" = .tlsv1, ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18,3],["? = nil, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18,9],[" = .fullVerification, ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18,6],[" = .default, ",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18,11],["] = [], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18,8],["? = nil, ",17],["applicationProtocols",1],[": [",17],["String",18,273],["] = [], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18,231],[" = .seconds(5), ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18,222],["? = nil) -> ",17],["TLSConfiguration",18,17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["forClient",7],["(",17],["cipherSuites",1],[": ",17],["String",18],[", ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18],[", ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18],["?, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18],[", ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18],[", ",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18],["?, ",17],["applicationProtocols",1],[": [",17],["String",18],["], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18],[", ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18],["?) -> ",17],["TLSConfiguration",18]],"a":{"a":{"d":true,"r":"makeClientConfiguration()"}},"d":"Creates a TLS configuration for use with client-side contexts.\n\nThis provides sensible defaults, and can be used without customisation. For server-side\ncontexts, you should use `makeServerConfiguration` instead."},{"p":["TLSConfiguration","forClient(cipherSuites:verifySignatureAlgorithms:signingSignatureAlgorithms:minimumTLSVersion:maximumTLSVersion:certificateVerification:trustRoots:certificateChain:privateKey:applicationProtocols:shutdownTimeout:keyLogCallback:renegotiationSupport:additionalTrustRoots:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["forClient",7],["(",17],["cipherSuites",1],[": ",17],["String",18,273],[" = defaultCipherSuites, ",17],["verifySignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18,19],["]? = nil, ",17],["signingSignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18,19],["]? = nil, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18,3],[" = .tlsv1, ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18,3],["? = nil, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18,9],[" = .fullVerification, ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18,6],[" = .default, ",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18,11],["] = [], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18,8],["? = nil, ",17],["applicationProtocols",1],[": [",17],["String",18,273],["] = [], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18,231],[" = .seconds(5), ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18,222],["? = nil, ",17],["renegotiationSupport",1],[": ",17],["NIORenegotiationSupport",18,10],[" = .none, ",17],["additionalTrustRoots",1],[": [",17],["NIOSSLAdditionalTrustRoots",18,13],["]) -> ",17],["TLSConfiguration",18,17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["forClient",7],["(",17],["cipherSuites",1],[": ",17],["String",18],[", ",17],["verifySignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18],["]?, ",17],["signingSignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18],["]?, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18],[", ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18],["?, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18],[", ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18],[", ",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18],["?, ",17],["applicationProtocols",1],[": [",17],["String",18],["], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18],[", ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18],["?, ",17],["renegotiationSupport",1],[": ",17],["NIORenegotiationSupport",18],[", ",17],["additionalTrustRoots",1],[": [",17],["NIOSSLAdditionalTrustRoots",18],["]) -> ",17],["TLSConfiguration",18]],"a":{"a":{"d":true,"r":"makeClientConfiguration()"}},"d":"Creates a TLS configuration for use with client-side contexts.\n\nThis provides sensible defaults, and can be used without customisation. For server-side\ncontexts, you should use `makeServerConfiguration` instead."},{"p":["TLSConfiguration","forClient(cipherSuites:verifySignatureAlgorithms:signingSignatureAlgorithms:minimumTLSVersion:maximumTLSVersion:certificateVerification:trustRoots:certificateChain:privateKey:applicationProtocols:shutdownTimeout:keyLogCallback:renegotiationSupport:additionalTrustRoots:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["forClient",7],["(",17],["cipherSuites",1],[": [",17],["NIOTLSCipher",18,15],["], ",17],["verifySignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18,19],["]? = nil, ",17],["signingSignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18,19],["]? = nil, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18,3],[" = .tlsv1, ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18,3],["? = nil, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18,9],[" = .fullVerification, ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18,6],[" = .default, ",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18,11],["] = [], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18,8],["? = nil, ",17],["applicationProtocols",1],[": [",17],["String",18,273],["] = [], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18,231],[" = .seconds(5), ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18,222],["? = nil, ",17],["renegotiationSupport",1],[": ",17],["NIORenegotiationSupport",18,10],[" = .none, ",17],["additionalTrustRoots",1],[": [",17],["NIOSSLAdditionalTrustRoots",18,13],["] = []) -> ",17],["TLSConfiguration",18,17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["forClient",7],["(",17],["cipherSuites",1],[": [",17],["NIOTLSCipher",18],["], ",17],["verifySignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18],["]?, ",17],["signingSignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18],["]?, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18],[", ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18],["?, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18],[", ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18],[", ",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18],["?, ",17],["applicationProtocols",1],[": [",17],["String",18],["], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18],[", ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18],["?, ",17],["renegotiationSupport",1],[": ",17],["NIORenegotiationSupport",18],[", ",17],["additionalTrustRoots",1],[": [",17],["NIOSSLAdditionalTrustRoots",18],["]) -> ",17],["TLSConfiguration",18]],"a":{"a":{"d":true,"r":"makeClientConfiguration()"}},"d":"Creates a TLS configuration for use with client-side contexts. This allows setting the `NIOTLSCipher` property specifically.\n\nThis provides sensible defaults, and can be used without customisation. For server-side\ncontexts, you should use `makeServerConfiguration` instead."},{"p":["TLSConfiguration","forClient(cipherSuites:verifySignatureAlgorithms:signingSignatureAlgorithms:minimumTLSVersion:maximumTLSVersion:certificateVerification:trustRoots:certificateChain:privateKey:applicationProtocols:shutdownTimeout:keyLogCallback:renegotiationSupport:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["forClient",7],["(",17],["cipherSuites",1],[": ",17],["String",18,273],[" = defaultCipherSuites, ",17],["verifySignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18,19],["]? = nil, ",17],["signingSignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18,19],["]? = nil, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18,3],[" = .tlsv1, ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18,3],["? = nil, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18,9],[" = .fullVerification, ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18,6],[" = .default, ",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18,11],["] = [], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18,8],["? = nil, ",17],["applicationProtocols",1],[": [",17],["String",18,273],["] = [], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18,231],[" = .seconds(5), ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18,222],["? = nil, ",17],["renegotiationSupport",1],[": ",17],["NIORenegotiationSupport",18,10],[") -> ",17],["TLSConfiguration",18,17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["forClient",7],["(",17],["cipherSuites",1],[": ",17],["String",18],[", ",17],["verifySignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18],["]?, ",17],["signingSignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18],["]?, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18],[", ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18],["?, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18],[", ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18],[", ",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18],["?, ",17],["applicationProtocols",1],[": [",17],["String",18],["], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18],[", ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18],["?, ",17],["renegotiationSupport",1],[": ",17],["NIORenegotiationSupport",18],[") -> ",17],["TLSConfiguration",18]],"a":{"a":{"d":true,"r":"makeClientConfiguration()"}},"d":"Creates a TLS configuration for use with client-side contexts.\n\nThis provides sensible defaults, and can be used without customisation. For server-side\ncontexts, you should use `makeServerConfiguration` instead."},{"p":["TLSConfiguration","forServer(certificateChain:privateKey:cipherSuites:minimumTLSVersion:maximumTLSVersion:certificateVerification:trustRoots:applicationProtocols:shutdownTimeout:keyLogCallback:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["forServer",7],["(",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18,11],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18,8],[", ",17],["cipherSuites",1],[": ",17],["String",18,273],[" = defaultCipherSuites, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18,3],[" = .tlsv1, ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18,3],["? = nil, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18,9],[" = .none, ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18,6],[" = .default, ",17],["applicationProtocols",1],[": [",17],["String",18,273],["] = [], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18,231],[" = .seconds(5), ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18,222],["? = nil) -> ",17],["TLSConfiguration",18,17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["forServer",7],["(",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18],[", ",17],["cipherSuites",1],[": ",17],["String",18],[", ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18],[", ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18],["?, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18],[", ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18],[", ",17],["applicationProtocols",1],[": [",17],["String",18],["], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18],[", ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18],["?) -> ",17],["TLSConfiguration",18]],"a":{"a":{"d":true,"r":"makeServerConfiguration(certificateChain:privateKey:)"}},"d":"Create a TLS configuration for use with server-side contexts.\n\nThis provides sensible defaults while requiring that you provide any data that is necessary\nfor server-side function. For client use, try `makeClientConfiguration` instead."},{"p":["TLSConfiguration","forServer(certificateChain:privateKey:cipherSuites:verifySignatureAlgorithms:signingSignatureAlgorithms:minimumTLSVersion:maximumTLSVersion:certificateVerification:trustRoots:applicationProtocols:shutdownTimeout:keyLogCallback:additionalTrustRoots:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["forServer",7],["(",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18,11],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18,8],[", ",17],["cipherSuites",1],[": ",17],["String",18,273],[" = defaultCipherSuites, ",17],["verifySignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18,19],["]? = nil, ",17],["signingSignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18,19],["]? = nil, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18,3],[" = .tlsv1, ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18,3],["? = nil, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18,9],[" = .none, ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18,6],[" = .default, ",17],["applicationProtocols",1],[": [",17],["String",18,273],["] = [], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18,231],[" = .seconds(5), ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18,222],["? = nil, ",17],["additionalTrustRoots",1],[": [",17],["NIOSSLAdditionalTrustRoots",18,13],["]) -> ",17],["TLSConfiguration",18,17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["forServer",7],["(",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18],[", ",17],["cipherSuites",1],[": ",17],["String",18],[", ",17],["verifySignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18],["]?, ",17],["signingSignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18],["]?, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18],[", ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18],["?, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18],[", ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18],[", ",17],["applicationProtocols",1],[": [",17],["String",18],["], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18],[", ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18],["?, ",17],["additionalTrustRoots",1],[": [",17],["NIOSSLAdditionalTrustRoots",18],["]) -> ",17],["TLSConfiguration",18]],"a":{"a":{"d":true,"r":"makeServerConfiguration(certificateChain:privateKey:)"}},"d":"Create a TLS configuration for use with server-side contexts.\n\nThis provides sensible defaults while requiring that you provide any data that is necessary\nfor server-side function. For client use, try `makeClientConfiguration` instead."},{"p":["TLSConfiguration","forServer(certificateChain:privateKey:cipherSuites:verifySignatureAlgorithms:signingSignatureAlgorithms:minimumTLSVersion:maximumTLSVersion:certificateVerification:trustRoots:applicationProtocols:shutdownTimeout:keyLogCallback:additionalTrustRoots:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["forServer",7],["(",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18,11],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18,8],[", ",17],["cipherSuites",1],[": [",17],["NIOTLSCipher",18,15],["], ",17],["verifySignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18,19],["]? = nil, ",17],["signingSignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18,19],["]? = nil, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18,3],[" = .tlsv1, ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18,3],["? = nil, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18,9],[" = .none, ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18,6],[" = .default, ",17],["applicationProtocols",1],[": [",17],["String",18,273],["] = [], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18,231],[" = .seconds(5), ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18,222],["? = nil, ",17],["additionalTrustRoots",1],[": [",17],["NIOSSLAdditionalTrustRoots",18,13],["] = []) -> ",17],["TLSConfiguration",18,17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["forServer",7],["(",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18],[", ",17],["cipherSuites",1],[": [",17],["NIOTLSCipher",18],["], ",17],["verifySignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18],["]?, ",17],["signingSignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18],["]?, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18],[", ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18],["?, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18],[", ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18],[", ",17],["applicationProtocols",1],[": [",17],["String",18],["], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18],[", ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18],["?, ",17],["additionalTrustRoots",1],[": [",17],["NIOSSLAdditionalTrustRoots",18],["]) -> ",17],["TLSConfiguration",18]],"a":{"a":{"d":true,"r":"makeServerConfiguration(certificateChain:privateKey:)"}},"d":"Create a TLS configuration for use with server-side contexts. This allows setting the `NIOTLSCipher` property specifically.\n\nThis provides sensible defaults while requiring that you provide any data that is necessary\nfor server-side function. For client use, try `makeClientConfiguration` instead."},{"p":["TLSConfiguration","forServer(certificateChain:privateKey:cipherSuites:verifySignatureAlgorithms:signingSignatureAlgorithms:minimumTLSVersion:maximumTLSVersion:certificateVerification:trustRoots:applicationProtocols:shutdownTimeout:keyLogCallback:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["forServer",7],["(",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18,11],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18,8],[", ",17],["cipherSuites",1],[": ",17],["String",18,273],[" = defaultCipherSuites, ",17],["verifySignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18,19],["]? = nil, ",17],["signingSignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18,19],["]? = nil, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18,3],[" = .tlsv1, ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18,3],["? = nil, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18,9],[" = .none, ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18,6],[" = .default, ",17],["applicationProtocols",1],[": [",17],["String",18,273],["] = [], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18,231],[" = .seconds(5), ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18,222],["? = nil) -> ",17],["TLSConfiguration",18,17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["forServer",7],["(",17],["certificateChain",1],[": [",17],["NIOSSLCertificateSource",18],["], ",17],["privateKey",1],[": ",17],["NIOSSLPrivateKeySource",18],[", ",17],["cipherSuites",1],[": ",17],["String",18],[", ",17],["verifySignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18],["]?, ",17],["signingSignatureAlgorithms",1],[": [",17],["SignatureAlgorithm",18],["]?, ",17],["minimumTLSVersion",1],[": ",17],["TLSVersion",18],[", ",17],["maximumTLSVersion",1],[": ",17],["TLSVersion",18],["?, ",17],["certificateVerification",1],[": ",17],["CertificateVerification",18],[", ",17],["trustRoots",1],[": ",17],["NIOSSLTrustRoots",18],[", ",17],["applicationProtocols",1],[": [",17],["String",18],["], ",17],["shutdownTimeout",1],[": ",17],["TimeAmount",18],[", ",17],["keyLogCallback",1],[": ",17],["NIOSSLKeyLogCallback",18],["?) -> ",17],["TLSConfiguration",18]],"a":{"a":{"d":true,"r":"makeServerConfiguration(certificateChain:privateKey:)"}},"d":"Create a TLS configuration for use with server-side contexts.\n\nThis provides sensible defaults while requiring that you provide any data that is necessary\nfor server-side function. For client use, try `makeClientConfiguration` instead."},{"p":["NIOSSLCertificate","fromPEMFile(_:)"],"f":[["class",12],[" ",17],["func",12],[" ",17],["fromPEMFile",7],["(",17],["_",1],[" ",17],["path",2],[": ",17],["String",18,273],[") ",17],["throws",12],[" -> [",17],["NIOSSLCertificate",18,28],["]",17]],"s":[["class",12],[" ",17],["func",12],[" ",17],["fromPEMFile",7],["(",17],["String",18],[") ",17],["throws",12],[" -> [",17],["NIOSSLCertificate",18],["]",17]],"d":"Create an array of `NIOSSLCertificate`s from a file at a given path in PEM format.\n\n- Parameter file: The PEM file to read certificates from.\n- Throws: If an error is encountered while reading certificates."},{"p":["NIOSSLCertificate","fromPEMBytes(_:)"],"f":[["class",12],[" ",17],["func",12],[" ",17],["fromPEMBytes",7],["(",17],["_",1],[" ",17],["bytes",2],[": [",17],["UInt8",18,290],["]) ",17],["throws",12],[" -> [",17],["NIOSSLCertificate",18,28],["]",17]],"s":[["class",12],[" ",17],["func",12],[" ",17],["fromPEMBytes",7],["([",17],["UInt8",18],["]) ",17],["throws",12],[" -> [",17],["NIOSSLCertificate",18],["]",17]],"d":"Create an array of `NIOSSLCertificate`s from a buffer of bytes in PEM format.\n\n- Parameter bytes: The PEM buffer to read certificates from.\n- Throws: If an error is encountered while reading certificates."},{"p":["NIOSSLCertificate","fromPEMBuffer(_:)"],"f":[["class",12],[" ",17],["func",12],[" ",17],["fromPEMBuffer",7],["(",17],["_",1],[" ",17],["buffer",2],[": [",17],["Int8",18,287],["]) ",17],["throws",12],[" -> [",17],["NIOSSLCertificate",18,28],["]",17]],"s":[["class",12],[" ",17],["func",12],[" ",17],["fromPEMBuffer",7],["([",17],["Int8",18],["]) ",17],["throws",12],[" -> [",17],["NIOSSLCertificate",18],["]",17]],"a":{"a":{"d":true,"r":"NIOSSLCertificate.fromPEMBytes(_:)"}},"d":"Create an array of `NIOSSLCertificate`s from a buffer of bytes in PEM format.\n\n- Parameter buffer: The PEM buffer to read certificates from.\n- Throws: If an error is encountered while reading certificates.\n- SeeAlso: `NIOSSLCertificate.fromPEMBytes(_:)`"},{"p":["NIOSSLHandler","channelRead(context:data:)"],"f":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,241],[", ",17],["data",1],[": ",17],["NIOAny",18,265],[")",17]],"s":[["func",12],[" ",17],["channelRead",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[")",17]]},{"p":["NIOSSLHandler","handlerAdded(context:)"],"f":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,241],[")",17]],"s":[["func",12],[" ",17],["handlerAdded",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]]},{"p":["NIOSSLHandler","channelActive(context:)"],"f":[["func",12],[" ",17],["channelActive",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,241],[")",17]],"s":[["func",12],[" ",17],["channelActive",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]]},{"p":["NIOSSLHandler","handlerRemoved(context:)"],"f":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,241],[")",17]],"s":[["func",12],[" ",17],["handlerRemoved",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]]},{"p":["NIOSSLHandler","channelInactive(context:)"],"f":[["func",12],[" ",17],["channelInactive",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,241],[")",17]],"s":[["func",12],[" ",17],["channelInactive",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]]},{"p":["NIOSSLHandler","channelReadComplete(context:)"],"f":[["func",12],[" ",17],["channelReadComplete",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,241],[")",17]],"s":[["func",12],[" ",17],["channelReadComplete",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]]},{"p":["NIOSSLHandler","close(context:mode:promise:)"],"f":[["func",12],[" ",17],["close",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,241],[", ",17],["mode",1],[": ",17],["CloseMode",18,267],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,237],["<",17],["Void",18,288],[">?)",17]],"s":[["func",12],[" ",17],["close",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["mode",1],[": ",17],["CloseMode",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]]},{"p":["NIOSSLHandler","flush(context:)"],"f":[["func",12],[" ",17],["flush",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,241],[")",17]],"s":[["func",12],[" ",17],["flush",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[")",17]]},{"p":["NIOSSLHandler","write(context:data:promise:)"],"f":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18,241],[", ",17],["data",1],[": ",17],["NIOAny",18,265],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18,237],["<",17],["Void",18,288],[">?)",17]],"s":[["func",12],[" ",17],["write",7],["(",17],["context",1],[": ",17],["ChannelHandlerContext",18],[", ",17],["data",1],[": ",17],["NIOAny",18],[", ",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]]},{"p":["NIOSSLHandler","stopTLS(promise:)"],"f":[["func",12],[" ",17],["stopTLS",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18,237],["<",17],["Void",18,288],[">?)",17]],"s":[["func",12],[" ",17],["stopTLS",7],["(",17],["promise",1],[": ",17],["EventLoopPromise",18],["<",17],["Void",18],[">?)",17]],"d":"Called to instruct this handler to perform an orderly TLS shutdown and then remove itself\nfrom the pipeline. This will leave the connection established, but remove the TLS wrapper\nfrom it.\n\nThis will send a CLOSE_NOTIFY and wait for the corresponding CLOSE_NOTIFY. When that next\nCLOSE_NOTIFY is received, this handler will pass on all pending writes and remove itself\nfrom the channel pipeline. If the shutdown times out then an error will fire down the\npipeline, this handler will remove itself from the pipeline, but the channel will not be\nautomatically closed.\n\nThis function **is not thread-safe**: you **must** call it from the correct event\nloop thread.\n\n- parameters:\n    - promise: An `EventLoopPromise` that will be completed when the unwrapping has\n        completed."},{"p":["NIOSSLPublicKey","toSPKIBytes()"],"f":[["func",12],[" ",17],["toSPKIBytes",7],["() ",17],["throws",12],[" -> [",17],["UInt8",18,290],["]",17]],"s":[["func",12],[" ",17],["toSPKIBytes",7],["() ",17],["throws",12],[" -> [",17],["UInt8",18],["]",17]],"d":"Extracts the bytes of this public key in the SubjectPublicKeyInfo format.\n\nThe SubjectPublicKeyInfo format is defined in RFC 5280. In addition to the raw key bytes, it also\nprovides an identifier of the algorithm, ensuring that the key can be unambiguously decoded.\n\n- returns: The DER-encoded SubjectPublicKeyInfo bytes for this public key.\n- throws: If an error occurred while serializing the key."},{"p":["NIOSSLPrivateKey","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,291],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]]},{"p":["TLSConfiguration","bestEffortHash(into:)"],"f":[["func",12],[" ",17],["bestEffortHash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,291],[")",17]],"s":[["func",12],[" ",17],["bestEffortHash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"d":"Returns a best effort hash of this TLS configuration.\n\nThe \"best effort\" stems from the fact that we are hashing the pointer bytes of the `keyLogCallback` closure.\n\n- warning: You should probably not use this function. This function can return false-negatives, but not false-positives."},{"p":["TLSConfiguration","bestEffortEquals(_:)"],"f":[["func",12],[" ",17],["bestEffortEquals",7],["(",17],["_",1],[" ",17],["comparing",2],[": ",17],["TLSConfiguration",18,17],[") -> ",17],["Bool",18,280]],"s":[["func",12],[" ",17],["bestEffortEquals",7],["(",17],["TLSConfiguration",18],[") -> ",17],["Bool",18]],"d":"Returns a best effort result of whether two `TLSConfiguration` objects are equal.\n\nThe \"best effort\" stems from the fact that we are checking the pointer to the `keyLogCallback` closure.\n\n- warning: You should probably not use this function. This function can return false-negatives, but not false-positives."},{"p":["NIOSSLCertificate","toDERBytes()"],"f":[["func",12],[" ",17],["toDERBytes",7],["() ",17],["throws",12],[" -> [",17],["UInt8",18,290],["]",17]],"s":[["func",12],[" ",17],["toDERBytes",7],["() ",17],["throws",12],[" -> [",17],["UInt8",18],["]",17]],"d":"Extracts the bytes of this certificate in DER format.\n\n- returns: The DER-encoded bytes for this certificate.\n- throws: If an error occurred while serializing the certificate."},{"p":["NIOSSLCertificate","extractPublicKey()"],"f":[["func",12],[" ",17],["extractPublicKey",7],["() ",17],["throws",12],[" -> ",17],["NIOSSLPublicKey",18,26]],"s":[["func",12],[" ",17],["extractPublicKey",7],["() ",17],["throws",12],[" -> ",17],["NIOSSLPublicKey",18]],"d":"Obtain the public key for this `NIOSSLCertificate`.\n\n- returns: This certificate's `NIOSSLPublicKey`.\n- throws: If an error is encountered extracting the key."},{"p":["NIOSSLCertificate","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,291],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]]},{"p":["NIOSSLCustomPrivateKey","sign(channel:algorithm:data:)"],"f":[["func",12],[" ",17],["sign",7],["(",17],["channel",1],[": ",17],["Channel",18,266],[", ",17],["algorithm",1],[": ",17],["SignatureAlgorithm",18,19],[", ",17],["data",1],[": ",17],["ByteBuffer",18,230],[") -> ",17],["EventLoopFuture",18,236],["<",17],["ByteBuffer",18,230],[">",17]],"s":[["func",12],[" ",17],["sign",7],["(",17],["channel",1],[": ",17],["Channel",18],[", ",17],["algorithm",1],[": ",17],["SignatureAlgorithm",18],[", ",17],["data",1],[": ",17],["ByteBuffer",18],[") -> ",17],["EventLoopFuture",18],["<",17],["ByteBuffer",18],[">",17]],"d":"Called to perform a signing operation.\n\nThe data being passed to the call has not been hashed, and it is the responsibility of the implementer\nto ensure that the data _is_ hashed before use. `algorithm` will control what hash algorithm should be used.\nThis call will always execute on `channel.eventLoop`.\n\nThis function should be implemented by both EC and RSA keys.\n\n- parameters:\n    - channel: The `Channel` representing the connection for which we are performing the signing operation.\n    - algorithm: The `SignatureAlgorithm` that should be used to generate the signature.\n    - data: The data to be signed.\n- returns: An `EventLoopFuture` that will be fulfilled with a `ByteBuffer` containing the signature bytes, if\n    the signing operation completes, or that will be failed with a relevant `Error` if the signature could not\n    be produced."},{"p":["NIOSSLCustomPrivateKey","decrypt(channel:data:)"],"f":[["func",12],[" ",17],["decrypt",7],["(",17],["channel",1],[": ",17],["Channel",18,266],[", ",17],["data",1],[": ",17],["ByteBuffer",18,230],[") -> ",17],["EventLoopFuture",18,236],["<",17],["ByteBuffer",18,230],[">",17]],"s":[["func",12],[" ",17],["decrypt",7],["(",17],["channel",1],[": ",17],["Channel",18],[", ",17],["data",1],[": ",17],["ByteBuffer",18],[") -> ",17],["EventLoopFuture",18],["<",17],["ByteBuffer",18],[">",17]],"d":"Called to perform a decryption operation.\n\nThe data being passed to the call should be decrypted using _raw_ RSA public key decryption, without padding.\nThis call will always execute on `channel.eventLoop`.\n\nThis function should only be implemented for RSA keys, and then only if you support RSA key exchange. If you\nare only using TLS 1.3 and later, this function is entirely unnecessary and it will never be called.\n\n- parameters:\n    - channel: The `Channel` representing the connection for which we are performing the decryption operation.\n    - data: The data to be decrypted.\n- returns: An `EventLoopFuture` that will be fulfilled with a `ByteBuffer` containing the decrypted bytes, if\n    the decryption operation completes, or that will be failed with a relevant `Error` if the decrypted bytes\n    could not be produced."},{"p":["NIOSSLObjectIdentifier","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,291],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]]},{"p":["NIOSSLClientTLSProvider","enableTLS(_:)"],"f":[["func",12],[" ",17],["enableTLS",7],["(",17],["_",1],[" ",17],["bootstrap",2],[": ",17],["Bootstrap",18],[") -> ",17],["Bootstrap",18]],"s":[["func",12],[" ",17],["enableTLS",7],["(",17],["Bootstrap",18],[") -> ",17],["Bootstrap",18]],"c":[["Bootstrap",1,"NIOClientTCPBootstrapProtocol",264]],"g":[["Bootstrap",0,0]],"d":"Enable TLS on the bootstrap. This is not a function you will typically call as a user, it is called by\n`NIOClientTCPBootstrap`."},{"p":["NIOSSLExtraError","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["NIOSSLExtraError",18,16],[", ",17],["rhs",2],[": ",17],["NIOSSLExtraError",18,16],[") -> ",17],["Bool",18,280]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["NIOSSLExtraError",18],[", ",17],["NIOSSLExtraError",18],[") -> ",17],["Bool",18]]},{"p":["NIOSSLPrivateKey","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["NIOSSLPrivateKey",18,27],[", ",17],["rhs",2],[": ",17],["NIOSSLPrivateKey",18,27],[") -> ",17],["Bool",18,280]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["NIOSSLPrivateKey",18],[", ",17],["NIOSSLPrivateKey",18],[") -> ",17],["Bool",18]]},{"p":["NIOSSLCertificate","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["NIOSSLCertificate",18,28],[", ",17],["rhs",2],[": ",17],["NIOSSLCertificate",18,28],[") -> ",17],["Bool",18,280]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["NIOSSLCertificate",18],[", ",17],["NIOSSLCertificate",18],[") -> ",17],["Bool",18]]},{"p":["NIOSSLObjectIdentifier","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["NIOSSLObjectIdentifier",18,21],[", ",17],["rhs",2],[": ",17],["NIOSSLObjectIdentifier",18,21],[") -> ",17],["Bool",18,280]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["NIOSSLObjectIdentifier",18],[", ",17],["NIOSSLObjectIdentifier",18],[") -> ",17],["Bool",18]]},{"p":["defaultCipherSuites"],"f":[["let",12],[" ",17],["defaultCipherSuites",7],[": ",17],["String",18,273]],"s":[["let",12],[" ",17],["defaultCipherSuites",7],[": ",17],["String",18]],"d":"A secure default configuration of cipher suites for TLS 1.2 and earlier.\n\nThe goal of this cipher suite string is:\n- Prefer cipher suites that offer Perfect Forward Secrecy (DHE/ECDHE)\n- Prefer ECDH(E) to DH(E) for performance.\n- Prefer any AEAD cipher suite over non-AEAD suites for better performance and security\n- Prefer AES-GCM over ChaCha20 because hardware-accelerated AES is common\n- Disable NULL authentication and encryption and any appearance of MD5"},{"p":["NIOTLSCipher","RawValue"],"f":[["typealias",12],[" ",17],["RawValue",7],[" = ",17],["UInt16",18,292]],"s":[["typealias",12],[" ",17],["RawValue",7]]},{"p":["NIOSSLHandler","InboundOut"],"f":[["typealias",12],[" ",17],["InboundOut",7],[" = ",17],["ByteBuffer",18,230]],"s":[["typealias",12],[" ",17],["InboundOut",7]]},{"p":["NIOSSLHandler","OutboundIn"],"f":[["typealias",12],[" ",17],["OutboundIn",7],[" = ",17],["ByteBuffer",18,230]],"s":[["typealias",12],[" ",17],["OutboundIn",7]]},{"p":["NIOSSLHandler","OutboundOut"],"f":[["typealias",12],[" ",17],["OutboundOut",7],[" = ",17],["ByteBuffer",18,230]],"s":[["typealias",12],[" ",17],["OutboundOut",7]]},{"p":["NIOSSLHandler","InboundIn"],"f":[["typealias",12],[" ",17],["InboundIn",7],[" = ",17],["ByteBuffer",18,230]],"s":[["typealias",12],[" ",17],["InboundIn",7]]},{"p":["SignatureAlgorithm","RawValue"],"f":[["typealias",12],[" ",17],["RawValue",7],[" = ",17],["UInt16",18,292]],"s":[["typealias",12],[" ",17],["RawValue",7]]},{"p":["NIOSSLKeyLogCallback"],"f":[["typealias",12],[" ",17],["NIOSSLKeyLogCallback",7],[" = (",17],["ByteBuffer",18,230],[") -> ",17],["Void",18,288]],"s":[["typealias",12],[" ",17],["NIOSSLKeyLogCallback",7]],"d":"A callback that can be used to implement `SSLKEYLOGFILE` support.\n\nWireshark can decrypt packet captures that contain encrypted TLS connections if they have access to the\nsession keys used to perform the encryption. These keys are normally stored in a file that has a specific\nfile format. This callback is the low-level primitive that can be used to write such a file.\n\nWhen set, this callback will be invoked once per secret. The provided `ByteBuffer` will contain the bytes\nthat need to be written into the file, including the newline character.\n\n- warning: Please be aware that enabling support for `SSLKEYLOGFILE` through this callback will put the secrecy of\n    your connections at risk. You should only do so when you are confident that it will not be possible to\n    extract those secrets unnecessarily.\n"},{"p":["NIOBoringSSLErrorStack"],"f":[["typealias",12],[" ",17],["NIOBoringSSLErrorStack",7],[" = [",17],["BoringSSLInternalError",18,20],["]",17]],"s":[["typealias",12],[" ",17],["NIOBoringSSLErrorStack",7]],"d":"A representation of BoringSSL's internal error stack: a list of BoringSSL errors."},{"p":["NIOSSLPassphraseSetter"],"f":[["typealias",12],[" ",17],["NIOSSLPassphraseSetter",7],["<",17],["Bytes",0],["> = (",17],["Bytes",18],[") -> ",17],["Void",18,288],[" ",17],["where",12],[" ",17],["Bytes",18],[" : ",17],["Collection",18,281],[", ",17],["Bytes",18],[".",17],["Element",18],[" == ",17],["UInt8",18,290]],"s":[["typealias",12],[" ",17],["NIOSSLPassphraseSetter",7]],"c":[["Bytes",1,"Collection",281],["Bytes.Element",2,"UInt8",290]],"g":[["Bytes",0,0]],"d":"An `NIOSSLPassphraseSetter` is a closure that you must invoke to provide a passphrase to BoringSSL.\nIt will be provided to you when your `NIOSSLPassphraseCallback` is invoked."},{"p":["NIOSSLClientTLSProvider","Bootstrap"],"f":[["typealias",12],[" ",17],["Bootstrap",7],[" = ",17],["Bootstrap",18]],"s":[["typealias",12],[" ",17],["Bootstrap",7]],"c":[["Bootstrap",1,"NIOClientTCPBootstrapProtocol",264]],"g":[["Bootstrap",0,0]]},{"p":["NIOSSLPassphraseCallback"],"f":[["typealias",12],[" ",17],["NIOSSLPassphraseCallback",7],["<",17],["Bytes",0],["> = ((",17],["Bytes",18],[") -> ",17],["Void",18,288],[") ",17],["throws",12],[" -> ",17],["Void",18,288],[" ",17],["where",12],[" ",17],["Bytes",18],[" : ",17],["Collection",18,281],[", ",17],["Bytes",18],[".",17],["Element",18],[" == ",17],["UInt8",18,290]],"s":[["typealias",12],[" ",17],["NIOSSLPassphraseCallback",7]],"c":[["Bytes",1,"Collection",281],["Bytes.Element",2,"UInt8",290]],"g":[["Bytes",0,0]],"d":"An `NIOSSLPassphraseCallback` is a callback that will be invoked by NIOSSL when it needs to\nget access to a private key that is stored in encrypted form.\n\nThis callback will be invoked with one argument, a non-escaping closure that must be called with the\npassphrase. Failing to call the closure will cause decryption to fail.\n\nThe reason this design has been used is to allow you to secure any memory storing the passphrase after\nuse. We guarantee that after the `NIOSSLPassphraseSetter` closure has been invoked the `Collection`\nyou have passed in will no longer be needed by BoringSSL, and so you can safely destroy any memory it\nmay be using if you need to."},{"p":["NIOSSLVerificationCallback"],"f":[["typealias",12],[" ",17],["NIOSSLVerificationCallback",7],[" = (",17],["NIOSSLVerificationResult",18,12],[", ",17],["NIOSSLCertificate",18,28],[") -> ",17],["NIOSSLVerificationResult",18,12]],"s":[["typealias",12],[" ",17],["NIOSSLVerificationCallback",7]],"d":"A custom verification callback.\n\nThis verification callback is usually called more than once per connection, as it is called once\nper certificate in the peer's complete certificate chain (including the root CA). The calls proceed\nfrom root to leaf, ending with the peer's leaf certificate. Each time it is invoked with 2 arguments:\n\n1. The result of the BoringSSL verification for this certificate\n2. The `SSLCertificate` for this level of the chain.\n\nPlease be cautious with calling out from this method. This method is always invoked on the event loop,\nso you must not block or wait. It is not possible to return an `EventLoopFuture` from this method, as it\nmust not block or wait. Additionally, this method must take care to ensure that it does not cause any\nChannelHandler to recursively call back into the `NIOSSLHandler` that triggered it, as making re-entrant\ncalls into BoringSSL is not supported by SwiftNIO and leads to undefined behaviour.\n\nIn general, the only safe thing to do here is to either perform some cryptographic operations, to log,\nor to store the `NIOSSLCertificate` somewhere for later consumption. The easiest way to be sure that the\n`NIOSSLCertificate` is safe to consume is to wait for a user event that shows the handshake as completed,\nor for channelInactive.\n\nwarning: This callback uses the old-style OpenSSL callback behaviour and is excessively complex to program with.\n   Instead, prefer using the NIOSSLCustomVerificationCallback style which receives the entire trust chain at once,\n   and also supports asynchronous certificate verification."},{"p":["NIOSSLCustomVerificationCallback"],"f":[["typealias",12],[" ",17],["NIOSSLCustomVerificationCallback",7],[" = ([",17],["NIOSSLCertificate",18,28],["], ",17],["EventLoopPromise",18,237],["<",17],["NIOSSLVerificationResult",18,12],[">) -> ",17],["Void",18,288]],"s":[["typealias",12],[" ",17],["NIOSSLCustomVerificationCallback",7]],"d":"A custom verification callback that allows completely overriding the certificate verification logic of BoringSSL.\n\nThis verification callback is called no more than once per connection attempt. It is invoked with two arguments:\n\n1. The certificate chain presented by the peer, in the order the peer presented them (with the first certificate\n    being the leaf certificate presented by the peer).\n2. An `EventLoopPromise` that must be completed to signal the result of the verification.\n\nPlease be cautious with calling out from this method. This method is always invoked on the event loop,\nso you must not block or wait. However, you may perform asynchronous work by leaving the event loop context:\nwhen the verification is complete you must complete the provided `EventLoopPromise`.\n\nThis method must take care to ensure that it does not cause any `ChannelHandler` to recursively call back into\nthe `NIOSSLHandler` that triggered it, as making re-entrant calls into BoringSSL is not supported by SwiftNIO and\nleads to undefined behaviour. It is acceptable to leave the event loop context and then call into the `NIOSSLHandler`,\nas this will not be re-entrant.\n\nNote that setting this callback will override _all_ verification logic that BoringSSL provides."}],"edges":{"conformer":[3,268,[],3,270,[],4,270,[],4,289,[],4,293,[],5,270,[],5,289,[],5,293,[],6,268,[],6,270,[],7,268,[],7,270,[],7,289,[],7,293,[],8,268,[],8,270,[],9,268,[],9,270,[],10,268,[],10,270,[],11,268,[],11,270,[],12,268,[],12,270,[],13,268,[],13,270,[],14,268,[],14,270,[],15,268,[],15,270,[],15,274,[],16,270,[],16,282,[],16,289,[],16,293,[],18,268,[],18,270,[],19,268,[],19,270,[],19,274,[],20,270,[],20,282,[],21,268,[],21,270,[],21,282,[],21,285,[],22,238,[],23,289,[],23,293,[],25,232,[],25,242,[],25,249,[],25,257,[],27,268,[],27,270,[],28,268,[],28,270,[],28,282,[],29,232,[],29,242,[],29,249,[],29,257,[],30,232,[],30,242,[],30,249,[],30,257,[]],"feature":[247,25,248,25,252,25,259,25,272,3,272,4,272,5,272,6,272,7,272,8,272,9,272,10,272,11,272,12,272,13,272,14,272,15,272,16,272,18,272,19,272,20,272,21,272,27,272,28,278,15,278,19,279,15,279,19,284,16,284,20,284,21,284,28],"member":[0,235,1,266,31,3,32,3,33,3,34,3,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,48,5,49,5,50,5,51,5,52,5,53,5,54,5,55,5,56,5,57,5,58,5,59,5,60,5,61,6,62,6,63,6,64,7,65,7,66,7,67,7,68,8,69,8,70,9,71,9,72,9,73,10,74,10,75,10,76,11,77,11,78,12,79,12,80,13,81,13,82,14,83,14,84,15,85,15,86,24,87,24,88,27,89,27,90,27,91,27,92,27,93,27,94,27,95,28,96,28,97,28,98,18,99,18,100,18,101,18,102,19,103,29,104,29,105,29,106,30,107,30,108,30,109,21,110,22,111,15,112,15,113,15,114,15,115,15,116,15,117,15,118,15,119,15,120,15,121,15,122,15,123,15,124,15,125,15,126,15,127,15,128,16,129,16,130,16,131,16,132,17,133,19,134,19,135,19,136,19,137,19,138,19,139,19,140,19,141,19,142,19,143,19,144,19,145,20,146,20,147,15,148,25,149,16,150,17,151,17,152,17,153,17,154,17,155,17,156,17,157,17,158,17,159,17,160,17,161,17,162,17,163,17,164,17,165,17,166,28,167,28,168,28,169,28,170,18,171,18,172,19,173,20,175,21,176,17,177,17,178,17,179,17,180,17,181,17,182,17,183,17,184,17,185,17,186,17,187,28,188,28,189,28,190,25,191,25,192,25,193,25,194,25,195,25,196,25,197,25,198,25,199,25,200,26,201,27,202,17,203,17,204,28,205,28,206,28,209,21,210,22,211,16,212,27,213,28,214,21,216,15,217,25,218,25,219,25,220,25,221,19,225,22],"subclass":[29,25,30,25],"requirement":[174,2,207,2,208,2]},"hints":[84,277,102,277,109,286,147,276,149,283,166,283,172,276,173,283,175,283,190,253,191,233,192,254,193,234,194,255,195,256,196,260,197,261,198,262,201,269,206,269,209,269,210,240,211,271,212,271,213,271,214,271,216,275,217,246,218,251,219,263,220,245,221,275,225,239,247,243,248,244,252,250,259,258,272,272,278,278,279,279,284,284],"sourcemap":[{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/CustomPrivateKey.swift","symbols":[33,16,2,35,8,174,52,9,207,68,9,208]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/NIOSSLClientHandler.swift","symbols":[55,19,29,56,23,105,61,11,103,86,23,104]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/NIOSSLHandler.swift","symbols":[26,13,25,27,21,218,28,21,219,29,21,220,30,21,217,63,16,191,76,16,193,86,16,192,95,16,194,143,16,190,167,16,195,176,16,198,180,16,197,191,16,196,607,15,148,614,16,1,623,16,0,647,16,199]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/NIOSSLServerHandler.swift","symbols":[19,19,30,20,23,108,25,11,106,39,23,107]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/ObjectIdentifier.swift","symbols":[18,14,21,64,11,109,102,23,214,112,16,209,123,15,175]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/SSLCallbacks.swift","symbols":[26,12,12,28,9,78,31,9,79,68,17,227,89,17,228,105,17,222]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/SSLCertificate.swift","symbols":[41,13,28,55,15,167,68,23,95,94,23,97,100,23,96,240,16,205,252,16,204,262,22,189,270,22,188,290,22,187,313,15,169,322,15,168,384,23,213,391,16,206,401,15,166]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/SSLContext.swift","symbols":[124,19,24,291,23,87,311,23,86]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/SSLErrors.swift","symbols":[17,14,20,48,15,173,61,22,145,64,22,146,68,17,223,72,12,4,73,9,43,75,9,47,76,9,42,77,9,44,78,9,41,79,9,36,80,9,35,81,9,39,82,9,45,83,9,46,84,9,38,85,9,40,86,9,37,92,14,23,95,12,5,96,9,57,97,9,49,98,9,59,99,9,60,100,9,50,101,9,48,102,9,54,103,9,56,104,9,51,105,9,58,106,9,52,107,9,53,108,9,55,160,12,7,162,9,64,165,9,65,169,9,67,172,9,66,178,14,16,202,22,130,205,22,131,208,22,129,219,22,128,242,15,149,249,23,211]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/SSLPKCS12Bundle.swift","symbols":[40,14,18,41,15,171,42,15,170,85,11,100,112,11,98,139,11,99,150,11,101]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/SSLPrivateKey.swift","symbols":[26,17,226,31,17,224,113,13,27,209,23,90,221,23,89,234,23,94,244,23,92,260,23,93,274,23,91,287,11,88,366,23,212,389,16,201]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/SSLPublicKey.swift","symbols":[22,13,26,60,16,200]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/TLSConfiguration.swift","symbols":[18,12,3,19,9,31,20,9,32,21,9,33,22,9,34,26,12,11,28,9,77,29,9,76,33,12,8,34,9,69,35,9,68,39,12,6,52,9,62,55,9,61,58,9,63,71,12,13,73,9,81,76,9,80,80,14,15,81,11,84,85,11,85,89,15,147,90,21,216,92,22,114,93,22,115,94,22,116,95,22,117,96,22,111,97,22,112,98,22,113,99,22,120,100,22,121,101,22,118,102,22,119,103,22,124,104,22,125,105,22,122,106,22,123,107,22,126,108,22,127,117,12,14,118,9,83,119,9,82,123,12,9,125,9,72,129,9,70,133,9,71,142,12,10,144,9,73,147,9,74,150,9,75,154,14,19,156,21,221,157,15,172,159,11,102,163,22,133,164,22,134,165,22,135,166,22,136,167,22,144,168,22,140,169,22,141,170,22,142,171,22,137,172,22,138,173,22,139,174,22,143,186,11,215,223,14,17,225,22,132,228,15,159,231,15,158,235,15,152,238,15,157,252,15,164,255,15,165,258,15,163,268,15,151,271,15,160,274,15,156,277,15,150,283,15,161,296,15,155,299,15,153,302,15,162,306,15,154,353,16,203,381,16,202,406,23,176,430,23,177,460,23,185,494,23,183,525,23,186,558,23,184,592,23,181,627,23,179,659,23,178,691,23,182,725,23,180]},{"uri":"file:///workspaces/swiftinit.org/ecosystem/packages/.builds/swift-nio-ssl@2.20.2/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/UniversalBootstrapSupport.swift","symbols":[32,14,22,33,21,225,40,11,110,53,16,210]}]}